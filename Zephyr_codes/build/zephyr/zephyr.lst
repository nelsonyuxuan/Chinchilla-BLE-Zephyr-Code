
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	c0 6b 00 20 e5 54 01 00 2f 6a 02 00 b9 54 01 00     .k. .T../j...T..
	while (ad->len > 1) {
  10:	b9 54 01 00 b9 54 01 00 b9 54 01 00 00 00 00 00     .T...T...T......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	a9 4c 01 00 b9 54 01 00 00 00 00 00 55 4c 01 00     .L...T......UL..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	b9 54 01 00                                         .T..

00000040 <_irq_vector_table>:
  40:	59 4d 01 00 77 98 02 00 59 4d 01 00 59 4d 01 00     YM..w...YM..YM..
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
  50:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
		if (!func(&data, user_data)) {
  60:	25 98 02 00 59 4d 01 00 59 4d 01 00 5d 98 02 00     %...YM..YM..]...
		net_buf_simple_pull(ad, len - 1);
  70:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  80:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  90:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  a0:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  b0:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  c0:	59 4d 01 00 59 4d 01 00 59 4d 01 00 59 4d 01 00     YM..YM..YM..YM..
  d0:	59 4d 01 00 59 4d 01 00 59 4d 01 00                 YM..YM..YM..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f00c fb78 	bl	c7f4 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <ocrypto_bigint_add256>:
     114:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     118:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     11c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     120:	185b      	adds	r3, r3, r1
     122:	eb54 040c 	adcs.w	r4, r4, ip
     126:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     12a:	414d      	adcs	r5, r1
     12c:	eb56 060c 	adcs.w	r6, r6, ip
     130:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     134:	414f      	adcs	r7, r1
     136:	eb58 080c 	adcs.w	r8, r8, ip
     13a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     13e:	eb59 0901 	adcs.w	r9, r9, r1
     142:	eb5a 0a0c 	adcs.w	sl, sl, ip
     146:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     14a:	4180      	sbcs	r0, r0
     14c:	3001      	adds	r0, #1
     14e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     152:	4770      	bx	lr

00000154 <ocrypto_bigint_sub256>:
     154:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     158:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     15c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     160:	1a5b      	subs	r3, r3, r1
     162:	eb74 040c 	sbcs.w	r4, r4, ip
     166:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     16a:	418d      	sbcs	r5, r1
     16c:	eb76 060c 	sbcs.w	r6, r6, ip
     170:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     174:	418f      	sbcs	r7, r1
     176:	eb78 080c 	sbcs.w	r8, r8, ip
     17a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     17e:	eb79 0901 	sbcs.w	r9, r9, r1
     182:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     186:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     18a:	4180      	sbcs	r0, r0
     18c:	4240      	negs	r0, r0
     18e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     192:	4770      	bx	lr

00000194 <ocrypto_bigint_cadd256>:
     194:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     198:	4252      	negs	r2, r2
     19a:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     19e:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1a2:	4017      	ands	r7, r2
     1a4:	19db      	adds	r3, r3, r7
     1a6:	ea18 0802 	ands.w	r8, r8, r2
     1aa:	eb54 0408 	adcs.w	r4, r4, r8
     1ae:	ea19 0902 	ands.w	r9, r9, r2
     1b2:	eb55 0509 	adcs.w	r5, r5, r9
     1b6:	ea1a 0a02 	ands.w	sl, sl, r2
     1ba:	eb56 060a 	adcs.w	r6, r6, sl
     1be:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1c0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1c4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c8:	4017      	ands	r7, r2
     1ca:	417b      	adcs	r3, r7
     1cc:	ea18 0802 	ands.w	r8, r8, r2
     1d0:	eb54 0408 	adcs.w	r4, r4, r8
     1d4:	ea19 0902 	ands.w	r9, r9, r2
     1d8:	eb55 0509 	adcs.w	r5, r5, r9
     1dc:	ea1a 0a02 	ands.w	sl, sl, r2
     1e0:	eb56 060a 	adcs.w	r6, r6, sl
     1e4:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e6:	4180      	sbcs	r0, r0
     1e8:	3001      	adds	r0, #1
     1ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1ee:	4770      	bx	lr

000001f0 <ocrypto_bigint_csub256>:
     1f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1f4:	4252      	negs	r2, r2
     1f6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1fa:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1fe:	4017      	ands	r7, r2
     200:	1bdb      	subs	r3, r3, r7
     202:	ea18 0802 	ands.w	r8, r8, r2
     206:	eb74 0408 	sbcs.w	r4, r4, r8
     20a:	ea19 0902 	ands.w	r9, r9, r2
     20e:	eb75 0509 	sbcs.w	r5, r5, r9
     212:	ea1a 0a02 	ands.w	sl, sl, r2
     216:	eb76 060a 	sbcs.w	r6, r6, sl
     21a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     21c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     220:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     224:	4017      	ands	r7, r2
     226:	41bb      	sbcs	r3, r7
     228:	ea18 0802 	ands.w	r8, r8, r2
     22c:	eb74 0408 	sbcs.w	r4, r4, r8
     230:	ea19 0902 	ands.w	r9, r9, r2
     234:	eb75 0509 	sbcs.w	r5, r5, r9
     238:	ea1a 0a02 	ands.w	sl, sl, r2
     23c:	eb76 060a 	sbcs.w	r6, r6, sl
     240:	c078      	stmia	r0!, {r3, r4, r5, r6}
     242:	4180      	sbcs	r0, r0
     244:	4240      	negs	r0, r0
     246:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     24a:	4770      	bx	lr

0000024c <ocrypto_bigint_cswap256>:
     24c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     250:	4252      	negs	r2, r2
     252:	f04f 0804 	mov.w	r8, #4

00000256 <cswap256_loop>:
     256:	e890 0030 	ldmia.w	r0, {r4, r5}
     25a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     25e:	1ba3      	subs	r3, r4, r6
     260:	4013      	ands	r3, r2
     262:	1ae4      	subs	r4, r4, r3
     264:	18f6      	adds	r6, r6, r3
     266:	1beb      	subs	r3, r5, r7
     268:	4013      	ands	r3, r2
     26a:	1aed      	subs	r5, r5, r3
     26c:	18ff      	adds	r7, r7, r3
     26e:	c030      	stmia	r0!, {r4, r5}
     270:	c1c0      	stmia	r1!, {r6, r7}
     272:	f1b8 0801 	subs.w	r8, r8, #1
     276:	d1ee      	bne.n	256 <cswap256_loop>
     278:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     27c:	4770      	bx	lr
     27e:	bf00      	nop

00000280 <ocrypto_mul256_noframe>:
     280:	b500      	push	{lr}
     282:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     286:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     28a:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     28e:	b402      	push	{r1}
     290:	fba7 5102 	umull	r5, r1, r7, r2
     294:	950a      	str	r5, [sp, #40]	; 0x28
     296:	fba8 0b02 	umull	r0, fp, r8, r2
     29a:	fbe7 1063 	umaal	r1, r0, r7, r3
     29e:	fbe9 b062 	umaal	fp, r0, r9, r2
     2a2:	910b      	str	r1, [sp, #44]	; 0x2c
     2a4:	fba8 5103 	umull	r5, r1, r8, r3
     2a8:	fbea 0162 	umaal	r0, r1, sl, r2
     2ac:	fbe7 b564 	umaal	fp, r5, r7, r4
     2b0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2b4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2b8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2bc:	fba9 b603 	umull	fp, r6, r9, r3
     2c0:	fbea 1663 	umaal	r1, r6, sl, r3
     2c4:	fbec 5663 	umaal	r5, r6, ip, r3
     2c8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2cc:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2d0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2d4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2d8:	900d      	str	r0, [sp, #52]	; 0x34
     2da:	fbac 3002 	umull	r3, r0, ip, r2
     2de:	9c05      	ldr	r4, [sp, #20]
     2e0:	fbee 5062 	umaal	r5, r0, lr, r2
     2e4:	fbe9 6064 	umaal	r6, r0, r9, r4
     2e8:	fbea b064 	umaal	fp, r0, sl, r4
     2ec:	fbe7 3164 	umaal	r3, r1, r7, r4
     2f0:	fbe8 5164 	umaal	r5, r1, r8, r4
     2f4:	9c06      	ldr	r4, [sp, #24]
     2f6:	fbe8 6164 	umaal	r6, r1, r8, r4
     2fa:	fbe9 b164 	umaal	fp, r1, r9, r4
     2fe:	fbea 0164 	umaal	r0, r1, sl, r4
     302:	930e      	str	r3, [sp, #56]	; 0x38
     304:	fba7 3204 	umull	r3, r2, r7, r4
     308:	9c07      	ldr	r4, [sp, #28]
     30a:	fbe7 6264 	umaal	r6, r2, r7, r4
     30e:	fbe8 b264 	umaal	fp, r2, r8, r4
     312:	fbe9 0264 	umaal	r0, r2, r9, r4
     316:	fbea 1264 	umaal	r1, r2, sl, r4
     31a:	9c04      	ldr	r4, [sp, #16]
     31c:	fbe9 5364 	umaal	r5, r3, r9, r4
     320:	fbea 6364 	umaal	r6, r3, sl, r4
     324:	9c08      	ldr	r4, [sp, #32]
     326:	fbe7 b364 	umaal	fp, r3, r7, r4
     32a:	fbe8 0364 	umaal	r0, r3, r8, r4
     32e:	fbe9 1364 	umaal	r1, r3, r9, r4
     332:	fbea 2364 	umaal	r2, r3, sl, r4
     336:	950f      	str	r5, [sp, #60]	; 0x3c
     338:	f85d 9b04 	ldr.w	r9, [sp], #4
     33c:	e899 0600 	ldmia.w	r9, {r9, sl}
     340:	f8dd 8000 	ldr.w	r8, [sp]
     344:	fba9 5408 	umull	r5, r4, r9, r8
     348:	fbea b468 	umaal	fp, r4, sl, r8
     34c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     350:	fbec 0468 	umaal	r0, r4, ip, r8
     354:	fbee 1468 	umaal	r1, r4, lr, r8
     358:	fbe9 2468 	umaal	r2, r4, r9, r8
     35c:	fbea 3468 	umaal	r3, r4, sl, r8
     360:	f8dd 8004 	ldr.w	r8, [sp, #4]
     364:	fbee 6568 	umaal	r6, r5, lr, r8
     368:	fbe9 b568 	umaal	fp, r5, r9, r8
     36c:	fbea 0568 	umaal	r0, r5, sl, r8
     370:	f8dd 8014 	ldr.w	r8, [sp, #20]
     374:	fbec 1568 	umaal	r1, r5, ip, r8
     378:	fbee 2568 	umaal	r2, r5, lr, r8
     37c:	fbe9 3568 	umaal	r3, r5, r9, r8
     380:	fbea 4568 	umaal	r4, r5, sl, r8
     384:	960f      	str	r6, [sp, #60]	; 0x3c
     386:	f8dd 8008 	ldr.w	r8, [sp, #8]
     38a:	fbae 7608 	umull	r7, r6, lr, r8
     38e:	fbe9 0668 	umaal	r0, r6, r9, r8
     392:	fbea 1668 	umaal	r1, r6, sl, r8
     396:	f8dd 8018 	ldr.w	r8, [sp, #24]
     39a:	fbec 2668 	umaal	r2, r6, ip, r8
     39e:	fbee 3668 	umaal	r3, r6, lr, r8
     3a2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3a6:	fbea 5668 	umaal	r5, r6, sl, r8
     3aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ae:	fbec b768 	umaal	fp, r7, ip, r8
     3b2:	fbee 0768 	umaal	r0, r7, lr, r8
     3b6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3ba:	fbea 2768 	umaal	r2, r7, sl, r8
     3be:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3c2:	fbec 3768 	umaal	r3, r7, ip, r8
     3c6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ca:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ce:	fbea 6768 	umaal	r6, r7, sl, r8
     3d2:	b008      	add	sp, #32
     3d4:	bd00      	pop	{pc}
     3d6:	bf00      	nop

000003d8 <ocrypto_bigint_mul256>:
     3d8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b087      	sub	sp, #28
     3de:	f7ff ff4f 	bl	280 <ocrypto_mul256_noframe>
     3e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e6:	f108 0820 	add.w	r8, r8, #32
     3ea:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     3ee:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     3f0:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000003f8 <ocrypto_sqr256_noframe>:
     3f8:	b500      	push	{lr}
     3fa:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     3fe:	fba3 5203 	umull	r5, r2, r3, r3
     402:	9501      	str	r5, [sp, #4]
     404:	fba3 0104 	umull	r0, r1, r3, r4
     408:	fbe3 2064 	umaal	r2, r0, r3, r4
     40c:	fbe3 1067 	umaal	r1, r0, r3, r7
     410:	9202      	str	r2, [sp, #8]
     412:	fba3 5207 	umull	r5, r2, r3, r7
     416:	fbe3 0268 	umaal	r0, r2, r3, r8
     41a:	fbe4 1564 	umaal	r1, r5, r4, r4
     41e:	fbe3 0568 	umaal	r0, r5, r3, r8
     422:	fbe3 2569 	umaal	r2, r5, r3, r9
     426:	9103      	str	r1, [sp, #12]
     428:	fba4 b607 	umull	fp, r6, r4, r7
     42c:	fbe3 2669 	umaal	r2, r6, r3, r9
     430:	fbe3 566a 	umaal	r5, r6, r3, sl
     434:	fbe4 0b67 	umaal	r0, fp, r4, r7
     438:	fbe4 2b68 	umaal	r2, fp, r4, r8
     43c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     440:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     444:	9004      	str	r0, [sp, #16]
     446:	fba4 1008 	umull	r1, r0, r4, r8
     44a:	fbe4 5069 	umaal	r5, r0, r4, r9
     44e:	fbe3 606c 	umaal	r6, r0, r3, ip
     452:	fbe3 b06e 	umaal	fp, r0, r3, lr
     456:	fbe7 2167 	umaal	r2, r1, r7, r7
     45a:	fbe4 5169 	umaal	r5, r1, r4, r9
     45e:	fbe4 616a 	umaal	r6, r1, r4, sl
     462:	fbe3 b16e 	umaal	fp, r1, r3, lr
     466:	fbe4 016e 	umaal	r0, r1, r4, lr
     46a:	9205      	str	r2, [sp, #20]
     46c:	fba7 3208 	umull	r3, r2, r7, r8
     470:	fbe4 626a 	umaal	r6, r2, r4, sl
     474:	fbe4 b26c 	umaal	fp, r2, r4, ip
     478:	fbe4 026e 	umaal	r0, r2, r4, lr
     47c:	fbe7 126e 	umaal	r1, r2, r7, lr
     480:	fbe7 5368 	umaal	r5, r3, r7, r8
     484:	fbe7 6369 	umaal	r6, r3, r7, r9
     488:	fbe4 b36c 	umaal	fp, r3, r4, ip
     48c:	fbe7 036c 	umaal	r0, r3, r7, ip
     490:	fbe7 136e 	umaal	r1, r3, r7, lr
     494:	fbe8 236e 	umaal	r2, r3, r8, lr
     498:	9506      	str	r5, [sp, #24]
     49a:	fba7 5409 	umull	r5, r4, r7, r9
     49e:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4a2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4a6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4aa:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ae:	fbe9 346e 	umaal	r3, r4, r9, lr
     4b2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4b6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4ba:	fbe8 056a 	umaal	r0, r5, r8, sl
     4be:	fbe8 156c 	umaal	r1, r5, r8, ip
     4c2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4c6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ca:	fbea 456e 	umaal	r4, r5, sl, lr
     4ce:	9607      	str	r6, [sp, #28]
     4d0:	fba8 7609 	umull	r7, r6, r8, r9
     4d4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4d8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4dc:	fbe9 266c 	umaal	r2, r6, r9, ip
     4e0:	fbea 366c 	umaal	r3, r6, sl, ip
     4e4:	fbea 466e 	umaal	r4, r6, sl, lr
     4e8:	fbec 566e 	umaal	r5, r6, ip, lr
     4ec:	fbe8 b769 	umaal	fp, r7, r8, r9
     4f0:	fbe9 0769 	umaal	r0, r7, r9, r9
     4f4:	fbe9 176a 	umaal	r1, r7, r9, sl
     4f8:	fbea 276a 	umaal	r2, r7, sl, sl
     4fc:	fbea 376c 	umaal	r3, r7, sl, ip
     500:	fbec 476c 	umaal	r4, r7, ip, ip
     504:	fbec 576e 	umaal	r5, r7, ip, lr
     508:	fbee 676e 	umaal	r6, r7, lr, lr
     50c:	bd00      	pop	{pc}
     50e:	bf00      	nop

00000510 <ocrypto_bigint_sqr256>:
     510:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     514:	b087      	sub	sp, #28
     516:	f7ff ff6f 	bl	3f8 <ocrypto_sqr256_noframe>
     51a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     51e:	f108 0820 	add.w	r8, r8, #32
     522:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     526:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     528:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000530 <ocrypto_constant_time_equal>:
     530:	b430      	push	{r4, r5}
     532:	f04f 0300 	mov.w	r3, #0

00000536 <constant_time_equal_loop>:
     536:	f810 4b01 	ldrb.w	r4, [r0], #1
     53a:	f811 5b01 	ldrb.w	r5, [r1], #1
     53e:	3a01      	subs	r2, #1
     540:	ea84 0405 	eor.w	r4, r4, r5
     544:	ea43 0304 	orr.w	r3, r3, r4
     548:	d1f5      	bne.n	536 <constant_time_equal_loop>
     54a:	f1a3 0301 	sub.w	r3, r3, #1
     54e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     552:	bc30      	pop	{r4, r5}
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <ocrypto_constant_time_is_zero>:
     558:	f04f 0300 	mov.w	r3, #0

0000055c <constant_time_is_zero_loop>:
     55c:	f810 2b01 	ldrb.w	r2, [r0], #1
     560:	3901      	subs	r1, #1
     562:	ea43 0302 	orr.w	r3, r3, r2
     566:	d1f9      	bne.n	55c <constant_time_is_zero_loop>
     568:	f1a3 0301 	sub.w	r3, r3, #1
     56c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     570:	4770      	bx	lr
     572:	bf00      	nop

00000574 <ocrypto_constant_time_xor>:
     574:	b430      	push	{r4, r5}

00000576 <constant_time_xor_loop>:
     576:	f811 4b01 	ldrb.w	r4, [r1], #1
     57a:	f812 5b01 	ldrb.w	r5, [r2], #1
     57e:	406c      	eors	r4, r5
     580:	f800 4b01 	strb.w	r4, [r0], #1
     584:	3b01      	subs	r3, #1
     586:	d1f6      	bne.n	576 <constant_time_xor_loop>
     588:	bc30      	pop	{r4, r5}
     58a:	4770      	bx	lr

0000058c <ocrypto_mod_p256_add>:
     58c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     590:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     594:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     598:	185b      	adds	r3, r3, r1
     59a:	eb54 040c 	adcs.w	r4, r4, ip
     59e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5a2:	414d      	adcs	r5, r1
     5a4:	eb56 060c 	adcs.w	r6, r6, ip
     5a8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5ac:	414f      	adcs	r7, r1
     5ae:	eb58 080c 	adcs.w	r8, r8, ip
     5b2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b6:	eb59 0901 	adcs.w	r9, r9, r1
     5ba:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5be:	4189      	sbcs	r1, r1
     5c0:	f1b3 33ff 	subs.w	r3, r3, #4294967295	; 0xffffffff
     5c4:	f174 34ff 	sbcs.w	r4, r4, #4294967295	; 0xffffffff
     5c8:	f175 35ff 	sbcs.w	r5, r5, #4294967295	; 0xffffffff
     5cc:	f176 0600 	sbcs.w	r6, r6, #0
     5d0:	f177 0700 	sbcs.w	r7, r7, #0
     5d4:	f178 0800 	sbcs.w	r8, r8, #0
     5d8:	f179 0901 	sbcs.w	r9, r9, #1
     5dc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295	; 0xffffffff
     5e0:	f151 0100 	adcs.w	r1, r1, #0
     5e4:	185b      	adds	r3, r3, r1
     5e6:	414c      	adcs	r4, r1
     5e8:	414d      	adcs	r5, r1
     5ea:	f156 0600 	adcs.w	r6, r6, #0
     5ee:	f157 0700 	adcs.w	r7, r7, #0
     5f2:	f158 0800 	adcs.w	r8, r8, #0
     5f6:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     5fa:	eb5a 0a01 	adcs.w	sl, sl, r1
     5fe:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     602:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     606:	4770      	bx	lr

00000608 <ocrypto_mod_p256_sub>:
     608:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     60c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     610:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     614:	1a5b      	subs	r3, r3, r1
     616:	eb74 040c 	sbcs.w	r4, r4, ip
     61a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     61e:	418d      	sbcs	r5, r1
     620:	eb76 060c 	sbcs.w	r6, r6, ip
     624:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     628:	418f      	sbcs	r7, r1
     62a:	eb78 080c 	sbcs.w	r8, r8, ip
     62e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     632:	eb79 0901 	sbcs.w	r9, r9, r1
     636:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     63a:	4189      	sbcs	r1, r1
     63c:	185b      	adds	r3, r3, r1
     63e:	414c      	adcs	r4, r1
     640:	414d      	adcs	r5, r1
     642:	f156 0600 	adcs.w	r6, r6, #0
     646:	f157 0700 	adcs.w	r7, r7, #0
     64a:	f158 0800 	adcs.w	r8, r8, #0
     64e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     652:	eb5a 0a01 	adcs.w	sl, sl, r1
     656:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     65a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     65e:	4770      	bx	lr

00000660 <mul_reduce>:
     660:	eb18 0804 	adds.w	r8, r8, r4
     664:	eb59 0905 	adcs.w	r9, r9, r5
     668:	eb5a 0a06 	adcs.w	sl, sl, r6
     66c:	eb5b 0b07 	adcs.w	fp, fp, r7
     670:	f05f 0c00 	movs.w	ip, #0
     674:	f14c 0c00 	adc.w	ip, ip, #0
     678:	eb18 0805 	adds.w	r8, r8, r5
     67c:	eb59 0906 	adcs.w	r9, r9, r6
     680:	eb5a 0a07 	adcs.w	sl, sl, r7
     684:	eb5b 0b07 	adcs.w	fp, fp, r7
     688:	eb50 000c 	adcs.w	r0, r0, ip
     68c:	f05f 0c00 	movs.w	ip, #0
     690:	eb51 010c 	adcs.w	r1, r1, ip
     694:	eb52 020c 	adcs.w	r2, r2, ip
     698:	4163      	adcs	r3, r4
     69a:	f14c 0c00 	adc.w	ip, ip, #0
     69e:	ebb8 0807 	subs.w	r8, r8, r7
     6a2:	f179 0900 	sbcs.w	r9, r9, #0
     6a6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6aa:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ae:	41a8      	sbcs	r0, r5
     6b0:	41b1      	sbcs	r1, r6
     6b2:	41a2      	sbcs	r2, r4
     6b4:	41b3      	sbcs	r3, r6
     6b6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ba:	ebbb 0b05 	subs.w	fp, fp, r5
     6be:	41b0      	sbcs	r0, r6
     6c0:	41b9      	sbcs	r1, r7
     6c2:	41aa      	sbcs	r2, r5
     6c4:	41bb      	sbcs	r3, r7
     6c6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ca:	f04c 0601 	orr.w	r6, ip, #1
     6ce:	f08c 0702 	eor.w	r7, ip, #2
     6d2:	eb18 0806 	adds.w	r8, r8, r6
     6d6:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     6da:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     6de:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     6e2:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     6e6:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     6ea:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     6ee:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     6f2:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     6f6:	eb18 000c 	adds.w	r0, r8, ip
     6fa:	eb59 010c 	adcs.w	r1, r9, ip
     6fe:	eb5a 020c 	adcs.w	r2, sl, ip
     702:	f15b 0300 	adcs.w	r3, fp, #0
     706:	f154 0400 	adcs.w	r4, r4, #0
     70a:	f155 0500 	adcs.w	r5, r5, #0
     70e:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     712:	eb57 070c 	adcs.w	r7, r7, ip
     716:	4770      	bx	lr

00000718 <ocrypto_mod_p256_mul>:
     718:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     71c:	b087      	sub	sp, #28
     71e:	f7ff fdaf 	bl	280 <ocrypto_mul256_noframe>
     722:	f8dd 8010 	ldr.w	r8, [sp, #16]
     726:	f8dd 9014 	ldr.w	r9, [sp, #20]
     72a:	f8dd a018 	ldr.w	sl, [sp, #24]
     72e:	f7ff ff97 	bl	660 <mul_reduce>
     732:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     736:	f7ff ff93 	bl	660 <mul_reduce>
     73a:	b003      	add	sp, #12
     73c:	f85d 8b04 	ldr.w	r8, [sp], #4
     740:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000748 <ocrypto_mod_p256_sqr>:
     748:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     74c:	b087      	sub	sp, #28
     74e:	f7ff fe53 	bl	3f8 <ocrypto_sqr256_noframe>
     752:	f8dd 8010 	ldr.w	r8, [sp, #16]
     756:	f8dd 9014 	ldr.w	r9, [sp, #20]
     75a:	f8dd a018 	ldr.w	sl, [sp, #24]
     75e:	f7ff ff7f 	bl	660 <mul_reduce>
     762:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     766:	f7ff ff7b 	bl	660 <mul_reduce>
     76a:	b003      	add	sp, #12
     76c:	f85d 8b04 	ldr.w	r8, [sp], #4
     770:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     77a:	4c14      	ldr	r4, [pc, #80]	; (7cc <ocrypto_mod_p256_sqr+0x84>)
     77c:	7a20      	ldrb	r0, [r4, #8]
     77e:	f88d 0001 	strb.w	r0, [sp, #1]
     782:	79e0      	ldrb	r0, [r4, #7]
     784:	f88d 0000 	strb.w	r0, [sp]
     788:	79a0      	ldrb	r0, [r4, #6]
     78a:	f8ad 0004 	strh.w	r0, [sp, #4]
     78e:	7960      	ldrb	r0, [r4, #5]
     790:	f8ad 0002 	strh.w	r0, [sp, #2]
     794:	4668      	mov	r0, sp
     796:	f006 fae3 	bl	6d60 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     79a:	b108      	cbz	r0, 7a0 <ocrypto_mod_p256_sqr+0x58>
     79c:	21ad      	movs	r1, #173	; 0xad
     79e:	e010      	b.n	7c2 <ocrypto_mod_p256_sqr+0x7a>
     7a0:	68e0      	ldr	r0, [r4, #12]
     7a2:	9002      	str	r0, [sp, #8]
     7a4:	a802      	add	r0, sp, #8
     7a6:	f006 faf1 	bl	6d8c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7aa:	b108      	cbz	r0, 7b0 <ocrypto_mod_p256_sqr+0x68>
     7ac:	21b1      	movs	r1, #177	; 0xb1
     7ae:	e008      	b.n	7c2 <ocrypto_mod_p256_sqr+0x7a>
     7b0:	4807      	ldr	r0, [pc, #28]	; (7d0 <ocrypto_mod_p256_sqr+0x88>)
     7b2:	6800      	ldr	r0, [r0, #0]
     7b4:	9003      	str	r0, [sp, #12]
     7b6:	a803      	add	r0, sp, #12
     7b8:	f00f fbdc 	bl	ff74 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7bc:	2800      	cmp	r0, #0
     7be:	d003      	beq.n	7c8 <ocrypto_mod_p256_sqr+0x80>
     7c0:	21b5      	movs	r1, #181	; 0xb5
     7c2:	2003      	movs	r0, #3
     7c4:	f000 f8e4 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     7c8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     7ca:	0000      	.short	0x0000
     7cc:	20001280 	.word	0x20001280
     7d0:	00000a98 	.word	0x00000a98

000007d4 <sdc_build_revision_get>:
     7d4:	b510      	push	{r4, lr}
     7d6:	b128      	cbz	r0, 7e4 <sdc_build_revision_get+0x10>
     7d8:	2214      	movs	r2, #20
     7da:	4904      	ldr	r1, [pc, #16]	; (7ec <sdc_build_revision_get+0x18>)
     7dc:	f010 fb43 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     7e0:	2000      	movs	r0, #0
     7e2:	bd10      	pop	{r4, pc}
     7e4:	f06f 0015 	mvn.w	r0, #21
     7e8:	bd10      	pop	{r4, pc}
     7ea:	0000      	.short	0x0000
     7ec:	00000ac0 	.word	0x00000ac0

000007f0 <sdc_cfg_set>:
     7f0:	b570      	push	{r4, r5, r6, lr}
     7f2:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     7f6:	bb78      	cbnz	r0, 858 <__z_interrupt_stack_SIZEOF+0x18>
     7f8:	4c22      	ldr	r4, [pc, #136]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     7fa:	7860      	ldrb	r0, [r4, #1]
     7fc:	b108      	cbz	r0, 802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fe:	11a8      	asrs	r0, r5, #6
     800:	bd70      	pop	{r4, r5, r6, pc}
     802:	b1f9      	cbz	r1, 844 <__z_interrupt_stack_SIZEOF+0x4>
     804:	f06f 0015 	mvn.w	r0, #21
     808:	2a00      	cmp	r2, #0
     80a:	d0f9      	beq.n	800 <CONFIG_ISR_STACK_SIZE>
     80c:	4b1e      	ldr	r3, [pc, #120]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     80e:	1e89      	subs	r1, r1, #2
     810:	2907      	cmp	r1, #7
     812:	d231      	bcs.n	878 <__z_interrupt_stack_SIZEOF+0x38>
     814:	e8df f001 	tbb	[pc, r1]
     818:	1a170704 	.word	0x1a170704
     81c:	00211d30 	.word	0x00211d30
     820:	7810      	ldrb	r0, [r2, #0]
     822:	7058      	strb	r0, [r3, #1]
     824:	e01d      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     826:	7891      	ldrb	r1, [r2, #2]
     828:	2900      	cmp	r1, #0
     82a:	d0e9      	beq.n	800 <CONFIG_ISR_STACK_SIZE>
     82c:	78d1      	ldrb	r1, [r2, #3]
     82e:	2900      	cmp	r1, #0
     830:	d0e6      	beq.n	800 <CONFIG_ISR_STACK_SIZE>
     832:	7811      	ldrb	r1, [r2, #0]
     834:	291b      	cmp	r1, #27
     836:	d3e3      	bcc.n	800 <CONFIG_ISR_STACK_SIZE>
     838:	7851      	ldrb	r1, [r2, #1]
     83a:	291b      	cmp	r1, #27
     83c:	d3e0      	bcc.n	800 <CONFIG_ISR_STACK_SIZE>
     83e:	6810      	ldr	r0, [r2, #0]
     840:	f8c3 0005 	str.w	r0, [r3, #5]
     844:	e00d      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     846:	6810      	ldr	r0, [r2, #0]
     848:	60d8      	str	r0, [r3, #12]
     84a:	e00a      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     84c:	7810      	ldrb	r0, [r2, #0]
     84e:	7098      	strb	r0, [r3, #2]
     850:	e007      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     852:	8810      	ldrh	r0, [r2, #0]
     854:	8258      	strh	r0, [r3, #18]
     856:	e004      	b.n	862 <__z_interrupt_stack_SIZEOF+0x22>
     858:	e00e      	b.n	878 <__z_interrupt_stack_SIZEOF+0x38>
     85a:	8811      	ldrh	r1, [r2, #0]
     85c:	29ff      	cmp	r1, #255	; 0xff
     85e:	d8cf      	bhi.n	800 <CONFIG_ISR_STACK_SIZE>
     860:	7519      	strb	r1, [r3, #20]
     862:	2201      	movs	r2, #1
     864:	4908      	ldr	r1, [pc, #32]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     866:	2000      	movs	r0, #0
     868:	f00c f914 	bl	ca94 <__udivmoddi4+0x2a0>
     86c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     870:	db04      	blt.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
     872:	f06f 000b 	mvn.w	r0, #11
     876:	bd70      	pop	{r4, r5, r6, pc}
     878:	4628      	mov	r0, r5
     87a:	bd70      	pop	{r4, r5, r6, pc}
     87c:	2101      	movs	r1, #1
     87e:	70a1      	strb	r1, [r4, #2]
     880:	bd70      	pop	{r4, r5, r6, pc}
     882:	0000      	.short	0x0000
     884:	20000040 	.word	0x20000040
     888:	20001280 	.word	0x20001280

0000088c <sdc_disable>:
     88c:	b510      	push	{r4, lr}
     88e:	4c07      	ldr	r4, [pc, #28]	; (8ac <CONFIG_BT_RX_STACK_SIZE+0x14>)
     890:	7860      	ldrb	r0, [r4, #1]
     892:	b120      	cbz	r0, 89e <CONFIG_BT_RX_STACK_SIZE+0x6>
     894:	f006 fd60 	bl	7358 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     898:	7820      	ldrb	r0, [r4, #0]
     89a:	f00b fecb 	bl	c634 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     89e:	f000 fe4d 	bl	153c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     8a2:	f000 ff25 	bl	16f0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     8a6:	2000      	movs	r0, #0
     8a8:	7060      	strb	r0, [r4, #1]
     8aa:	bd10      	pop	{r4, pc}
     8ac:	20000040 	.word	0x20000040

000008b0 <sdc_enable>:
     8b0:	b570      	push	{r4, r5, r6, lr}
     8b2:	460c      	mov	r4, r1
     8b4:	0005      	movs	r5, r0
     8b6:	d002      	beq.n	8be <sdc_enable+0xe>
     8b8:	b10c      	cbz	r4, 8be <sdc_enable+0xe>
     8ba:	0760      	lsls	r0, r4, #29
     8bc:	d002      	beq.n	8c4 <sdc_enable+0x14>
     8be:	f06f 0015 	mvn.w	r0, #21
     8c2:	bd70      	pop	{r4, r5, r6, pc}
     8c4:	f000 f922 	bl	b0c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     8c8:	b1a8      	cbz	r0, 8f6 <sdc_enable+0x46>
     8ca:	4628      	mov	r0, r5
     8cc:	f00b fe78 	bl	c5c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     8d0:	4d0a      	ldr	r5, [pc, #40]	; (8fc <sdc_enable+0x4c>)
     8d2:	2200      	movs	r2, #0
     8d4:	490a      	ldr	r1, [pc, #40]	; (900 <sdc_enable+0x50>)
     8d6:	7028      	strb	r0, [r5, #0]
     8d8:	4620      	mov	r0, r4
     8da:	f00c f8db 	bl	ca94 <__udivmoddi4+0x2a0>
     8de:	f00f ff58 	bl	10792 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     8e2:	2100      	movs	r1, #0
     8e4:	7828      	ldrb	r0, [r5, #0]
     8e6:	f006 fd21 	bl	732c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     8ea:	f7ff ff45 	bl	778 <ocrypto_mod_p256_sqr+0x30>
     8ee:	2001      	movs	r0, #1
     8f0:	7068      	strb	r0, [r5, #1]
     8f2:	2000      	movs	r0, #0
     8f4:	bd70      	pop	{r4, r5, r6, pc}
     8f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	20000040 	.word	0x20000040
     900:	20001280 	.word	0x20001280

00000904 <sdc_init>:
     904:	b530      	push	{r4, r5, lr}
     906:	b089      	sub	sp, #36	; 0x24
     908:	0004      	movs	r4, r0
     90a:	d00c      	beq.n	926 <sdc_init+0x22>
     90c:	f00b fe00 	bl	c510 <mpsl_is_initialized>
     910:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
     914:	b120      	cbz	r0, 920 <sdc_init+0x1c>
     916:	f00b fc93 	bl	c240 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     91a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     91e:	d905      	bls.n	92c <sdc_init+0x28>
     920:	4628      	mov	r0, r5
     922:	b009      	add	sp, #36	; 0x24
     924:	bd30      	pop	{r4, r5, pc}
     926:	f06f 0015 	mvn.w	r0, #21
     92a:	e7fa      	b.n	922 <sdc_init+0x1e>
     92c:	4d13      	ldr	r5, [pc, #76]	; (97c <sdc_init+0x78>)
     92e:	4814      	ldr	r0, [pc, #80]	; (980 <sdc_init+0x7c>)
     930:	606c      	str	r4, [r5, #4]
     932:	f000 fa07 	bl	d44 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     936:	2000      	movs	r0, #0
     938:	7068      	strb	r0, [r5, #1]
     93a:	70a8      	strb	r0, [r5, #2]
     93c:	4601      	mov	r1, r0
     93e:	2224      	movs	r2, #36	; 0x24
     940:	4668      	mov	r0, sp
     942:	f010 fb0a 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     946:	2224      	movs	r2, #36	; 0x24
     948:	490e      	ldr	r1, [pc, #56]	; (984 <sdc_init+0x80>)
     94a:	4668      	mov	r0, sp
     94c:	f010 fa8b 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     950:	2224      	movs	r2, #36	; 0x24
     952:	4669      	mov	r1, sp
     954:	480c      	ldr	r0, [pc, #48]	; (988 <sdc_init+0x84>)
     956:	f010 fa86 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     95a:	f3ef 8410 	mrs	r4, PRIMASK
     95e:	b672      	cpsid	i
     960:	f000 fdfa 	bl	1558 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     964:	4809      	ldr	r0, [pc, #36]	; (98c <sdc_init+0x88>)
     966:	f000 fecf 	bl	1708 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     96a:	b118      	cbz	r0, 974 <sdc_init+0x70>
     96c:	21cb      	movs	r1, #203	; 0xcb
     96e:	2003      	movs	r0, #3
     970:	f000 f80e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     974:	b904      	cbnz	r4, 978 <sdc_init+0x74>
     976:	b662      	cpsie	i
     978:	2000      	movs	r0, #0
     97a:	e7d2      	b.n	922 <sdc_init+0x1e>
     97c:	20000040 	.word	0x20000040
     980:	00000779 	.word	0x00000779
     984:	00000a9c 	.word	0x00000a9c
     988:	20001280 	.word	0x20001280
     98c:	00000b39 	.word	0x00000b39

00000990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     990:	b50e      	push	{r1, r2, r3, lr}
     992:	b672      	cpsid	i
     994:	4a15      	ldr	r2, [pc, #84]	; (9ec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     996:	6855      	ldr	r5, [r2, #4]
     998:	b1dd      	cbz	r5, 9d2 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     99a:	2200      	movs	r2, #0
     99c:	4603      	mov	r3, r0
     99e:	466e      	mov	r6, sp
     9a0:	240a      	movs	r4, #10
     9a2:	e003      	b.n	9ac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     9a4:	fbb0 f0f4 	udiv	r0, r0, r4
     9a8:	1c52      	adds	r2, r2, #1
     9aa:	b2d2      	uxtb	r2, r2
     9ac:	2800      	cmp	r0, #0
     9ae:	d1f9      	bne.n	9a4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     9b0:	54b0      	strb	r0, [r6, r2]
     9b2:	e00a      	b.n	9ca <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     9b4:	b2d8      	uxtb	r0, r3
     9b6:	fbb0 f7f4 	udiv	r7, r0, r4
     9ba:	fbb3 f3f4 	udiv	r3, r3, r4
     9be:	fb04 0017 	mls	r0, r4, r7, r0
     9c2:	1e52      	subs	r2, r2, #1
     9c4:	b2d2      	uxtb	r2, r2
     9c6:	3030      	adds	r0, #48	; 0x30
     9c8:	54b0      	strb	r0, [r6, r2]
     9ca:	2a00      	cmp	r2, #0
     9cc:	d1f2      	bne.n	9b4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     9ce:	4630      	mov	r0, r6
     9d0:	47a8      	blx	r5
     9d2:	f3bf 8f4f 	dsb	sy
     9d6:	4806      	ldr	r0, [pc, #24]	; (9f0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     9d8:	6801      	ldr	r1, [r0, #0]
     9da:	4a06      	ldr	r2, [pc, #24]	; (9f4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     9dc:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     9e0:	4311      	orrs	r1, r2
     9e2:	6001      	str	r1, [r0, #0]
     9e4:	f3bf 8f4f 	dsb	sy
     9e8:	bf00      	nop
     9ea:	e7fd      	b.n	9e8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     9ec:	20000040 	.word	0x20000040
     9f0:	e000ed0c 	.word	0xe000ed0c
     9f4:	05fa0004 	.word	0x05fa0004

000009f8 <sdc_support_adv>:
     9f8:	4806      	ldr	r0, [pc, #24]	; (a14 <sdc_support_adv+0x1c>)
     9fa:	b510      	push	{r4, lr}
     9fc:	7881      	ldrb	r1, [r0, #2]
     9fe:	7840      	ldrb	r0, [r0, #1]
     a00:	4301      	orrs	r1, r0
     a02:	d002      	beq.n	a0a <sdc_support_adv+0x12>
     a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a08:	bd10      	pop	{r4, pc}
     a0a:	f006 fcb5 	bl	7378 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
     a0e:	2000      	movs	r0, #0
     a10:	bd10      	pop	{r4, pc}
     a12:	0000      	.short	0x0000
     a14:	20000040 	.word	0x20000040

00000a18 <sdc_support_dle_peripheral>:
     a18:	4806      	ldr	r0, [pc, #24]	; (a34 <sdc_support_dle_peripheral+0x1c>)
     a1a:	b510      	push	{r4, lr}
     a1c:	7881      	ldrb	r1, [r0, #2]
     a1e:	7840      	ldrb	r0, [r0, #1]
     a20:	4301      	orrs	r1, r0
     a22:	d002      	beq.n	a2a <sdc_support_dle_peripheral+0x12>
     a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a28:	bd10      	pop	{r4, pc}
     a2a:	f006 facd 	bl	6fc8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
     a2e:	2000      	movs	r0, #0
     a30:	bd10      	pop	{r4, pc}
     a32:	0000      	.short	0x0000
     a34:	20000040 	.word	0x20000040

00000a38 <sdc_support_le_2m_phy>:
     a38:	4806      	ldr	r0, [pc, #24]	; (a54 <sdc_support_le_2m_phy+0x1c>)
     a3a:	b510      	push	{r4, lr}
     a3c:	7881      	ldrb	r1, [r0, #2]
     a3e:	7840      	ldrb	r0, [r0, #1]
     a40:	4301      	orrs	r1, r0
     a42:	d002      	beq.n	a4a <sdc_support_le_2m_phy+0x12>
     a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a48:	bd10      	pop	{r4, pc}
     a4a:	f00f fc37 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     a4e:	2000      	movs	r0, #0
     a50:	bd10      	pop	{r4, pc}
     a52:	0000      	.short	0x0000
     a54:	20000040 	.word	0x20000040

00000a58 <sdc_support_peripheral>:
     a58:	4806      	ldr	r0, [pc, #24]	; (a74 <sdc_support_peripheral+0x1c>)
     a5a:	b510      	push	{r4, lr}
     a5c:	7881      	ldrb	r1, [r0, #2]
     a5e:	7840      	ldrb	r0, [r0, #1]
     a60:	4301      	orrs	r1, r0
     a62:	d002      	beq.n	a6a <sdc_support_peripheral+0x12>
     a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a68:	bd10      	pop	{r4, pc}
     a6a:	f006 fc97 	bl	739c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
     a6e:	2000      	movs	r0, #0
     a70:	bd10      	pop	{r4, pc}
     a72:	0000      	.short	0x0000
     a74:	20000040 	.word	0x20000040

00000a78 <sdc_support_phy_update_peripheral>:
     a78:	4806      	ldr	r0, [pc, #24]	; (a94 <sdc_support_phy_update_peripheral+0x1c>)
     a7a:	b510      	push	{r4, lr}
     a7c:	7881      	ldrb	r1, [r0, #2]
     a7e:	7840      	ldrb	r0, [r0, #1]
     a80:	4301      	orrs	r1, r0
     a82:	d002      	beq.n	a8a <sdc_support_phy_update_peripheral+0x12>
     a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a88:	bd10      	pop	{r4, pc}
     a8a:	f00f fc2b 	bl	102e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
     a8e:	2000      	movs	r0, #0
     a90:	bd10      	pop	{r4, pc}
     a92:	0000      	.short	0x0000
     a94:	20000040 	.word	0x20000040
     a98:	00000001 	.word	0x00000001
     a9c:	00010100 	.word	0x00010100
     aa0:	031b1b00 	.word	0x031b1b00
     aa4:	00000002 	.word	0x00000002
     aa8:	00001d4c 	.word	0x00001d4c
     aac:	001f0000 	.word	0x001f0000
     ab0:	00000008 	.word	0x00000008
	...
     ac0:	c12e7ee0 	.word	0xc12e7ee0
     ac4:	2385055e 	.word	0x2385055e
     ac8:	fadc1546 	.word	0xfadc1546
     acc:	707d298e 	.word	0x707d298e
     ad0:	fca59310 	.word	0xfca59310

00000ad4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     ad4:	4a05      	ldr	r2, [pc, #20]	; (aec <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     ad6:	b510      	push	{r4, lr}
     ad8:	6852      	ldr	r2, [r2, #4]
     ada:	b112      	cbz	r2, ae2 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     ae0:	4710      	bx	r2
     ae2:	2192      	movs	r1, #146	; 0x92
     ae4:	2004      	movs	r0, #4
     ae6:	f7ff ff53 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     aea:	0000      	.short	0x0000
     aec:	200012a4 	.word	0x200012a4

00000af0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     af0:	4a05      	ldr	r2, [pc, #20]	; (b08 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     af2:	b510      	push	{r4, lr}
     af4:	6892      	ldr	r2, [r2, #8]
     af6:	b112      	cbz	r2, afe <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     afc:	4710      	bx	r2
     afe:	2198      	movs	r1, #152	; 0x98
     b00:	2004      	movs	r0, #4
     b02:	f7ff ff45 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b06:	0000      	.short	0x0000
     b08:	200012a4 	.word	0x200012a4

00000b0c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     b0c:	4805      	ldr	r0, [pc, #20]	; (b24 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     b0e:	6801      	ldr	r1, [r0, #0]
     b10:	b129      	cbz	r1, b1e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b12:	6841      	ldr	r1, [r0, #4]
     b14:	b119      	cbz	r1, b1e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b16:	6880      	ldr	r0, [r0, #8]
     b18:	b108      	cbz	r0, b1e <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     b1a:	2001      	movs	r0, #1
     b1c:	4770      	bx	lr
     b1e:	2000      	movs	r0, #0
     b20:	4770      	bx	lr
     b22:	0000      	.short	0x0000
     b24:	200012a4 	.word	0x200012a4

00000b28 <sdc_rand_source_register>:
     b28:	4902      	ldr	r1, [pc, #8]	; (b34 <sdc_rand_source_register+0xc>)
     b2a:	c80d      	ldmia	r0, {r0, r2, r3}
     b2c:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     b30:	2000      	movs	r0, #0
     b32:	4770      	bx	lr
     b34:	200012a4 	.word	0x200012a4

00000b38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b3a:	4c12      	ldr	r4, [pc, #72]	; (b84 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     b3c:	2600      	movs	r6, #0
     b3e:	6825      	ldr	r5, [r4, #0]
     b40:	e011      	b.n	b66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b42:	9800      	ldr	r0, [sp, #0]
     b44:	2802      	cmp	r0, #2
     b46:	d002      	beq.n	b4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     b48:	2803      	cmp	r0, #3
     b4a:	d10c      	bne.n	b66 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     b4c:	e006      	b.n	b5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     b4e:	6820      	ldr	r0, [r4, #0]
     b50:	b110      	cbz	r0, b58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     b52:	2000      	movs	r0, #0
     b54:	6026      	str	r6, [r4, #0]
     b56:	e005      	b.n	b64 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     b58:	2128      	movs	r1, #40	; 0x28
     b5a:	e00c      	b.n	b76 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b5c:	6820      	ldr	r0, [r4, #0]
     b5e:	b168      	cbz	r0, b7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     b60:	2001      	movs	r0, #1
     b62:	6026      	str	r6, [r4, #0]
     b64:	47a8      	blx	r5
     b66:	4668      	mov	r0, sp
     b68:	f000 fd94 	bl	1694 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     b6c:	2800      	cmp	r0, #0
     b6e:	d0e8      	beq.n	b42 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     b70:	2805      	cmp	r0, #5
     b72:	d005      	beq.n	b80 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     b74:	2135      	movs	r1, #53	; 0x35
     b76:	2004      	movs	r0, #4
     b78:	f7ff ff0a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b7c:	212d      	movs	r1, #45	; 0x2d
     b7e:	e7fa      	b.n	b76 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b82:	0000      	.short	0x0000
     b84:	20000048 	.word	0x20000048

00000b88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     b88:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
     b8c:	4e28      	ldr	r6, [pc, #160]	; (c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     b8e:	4605      	mov	r5, r0
     b90:	1d00      	adds	r0, r0, #4
     b92:	f106 0744 	add.w	r7, r6, #68	; 0x44
     b96:	6030      	str	r0, [r6, #0]
     b98:	7838      	ldrb	r0, [r7, #0]
     b9a:	b158      	cbz	r0, bb4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     b9c:	78ba      	ldrb	r2, [r7, #2]
     b9e:	463c      	mov	r4, r7
     ba0:	1c79      	adds	r1, r7, #1
     ba2:	4628      	mov	r0, r5
     ba4:	1c92      	adds	r2, r2, #2
     ba6:	f010 f95e 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     baa:	2000      	movs	r0, #0
     bac:	7020      	strb	r0, [r4, #0]
     bae:	2004      	movs	r0, #4
     bb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
     bb4:	481e      	ldr	r0, [pc, #120]	; (c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bb6:	f001 ff6d 	bl	2a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     bba:	4604      	mov	r4, r0
     bbc:	2802      	cmp	r0, #2
     bbe:	d004      	beq.n	bca <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     bc0:	2c04      	cmp	r4, #4
     bc2:	d007      	beq.n	bd4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     bc4:	2c08      	cmp	r4, #8
     bc6:	d02c      	beq.n	c22 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9a>
     bc8:	e02f      	b.n	c2a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bca:	4919      	ldr	r1, [pc, #100]	; (c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     bcc:	4628      	mov	r0, r5
     bce:	f00c f826 	bl	cc1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     bd2:	e02a      	b.n	c2a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     bd4:	7830      	ldrb	r0, [r6, #0]
     bd6:	2808      	cmp	r0, #8
     bd8:	d104      	bne.n	be4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
     bda:	2105      	movs	r1, #5
     bdc:	203e      	movs	r0, #62	; 0x3e
     bde:	f00b fff0 	bl	cbc2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     be2:	b150      	cbz	r0, bfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x72>
     be4:	4912      	ldr	r1, [pc, #72]	; (c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     be6:	4628      	mov	r0, r5
     be8:	f00c f87e 	bl	cce8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     bec:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
     bf0:	d30e      	bcc.n	c10 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
     bf2:	21c7      	movs	r1, #199	; 0xc7
     bf4:	2008      	movs	r0, #8
     bf6:	f7ff fecb 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bfa:	88b0      	ldrh	r0, [r6, #4]
     bfc:	f8ad 0000 	strh.w	r0, [sp]
     c00:	a901      	add	r1, sp, #4
     c02:	4668      	mov	r0, sp
     c04:	f00c fae0 	bl	d1c8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
     c08:	2800      	cmp	r0, #0
     c0a:	d0c5      	beq.n	b98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c0c:	21a8      	movs	r1, #168	; 0xa8
     c0e:	e7f1      	b.n	bf4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x6c>
     c10:	2800      	cmp	r0, #0
     c12:	d0c1      	beq.n	b98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c14:	78a9      	ldrb	r1, [r5, #2]
     c16:	7828      	ldrb	r0, [r5, #0]
     c18:	f00b ffd3 	bl	cbc2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
     c1c:	2800      	cmp	r0, #0
     c1e:	d0bb      	beq.n	b98 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
     c20:	e003      	b.n	c2a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa2>
     c22:	4903      	ldr	r1, [pc, #12]	; (c30 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>)
     c24:	4628      	mov	r0, r5
     c26:	f00c f828 	bl	cc7a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     c2a:	4620      	mov	r0, r4
     c2c:	e7c0      	b.n	bb0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     c2e:	0000      	.short	0x0000
     c30:	200012b0 	.word	0x200012b0
     c34:	b570      	push	{r4, r5, r6, lr}
     c36:	780a      	ldrb	r2, [r1, #0]
     c38:	7082      	strb	r2, [r0, #2]
     c3a:	b33a      	cbz	r2, c8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c3c:	2a01      	cmp	r2, #1
     c3e:	d825      	bhi.n	c8c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x104>
     c40:	2313      	movs	r3, #19
     c42:	7003      	strb	r3, [r0, #0]
     c44:	2300      	movs	r3, #0
     c46:	e00a      	b.n	c5e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd6>
     c48:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     c4c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     c50:	78a6      	ldrb	r6, [r4, #2]
     c52:	70ee      	strb	r6, [r5, #3]
     c54:	8864      	ldrh	r4, [r4, #2]
     c56:	0a24      	lsrs	r4, r4, #8
     c58:	1c5b      	adds	r3, r3, #1
     c5a:	712c      	strb	r4, [r5, #4]
     c5c:	b2db      	uxtb	r3, r3
     c5e:	4293      	cmp	r3, r2
     c60:	d3f2      	bcc.n	c48 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc0>
     c62:	2300      	movs	r3, #0
     c64:	e00b      	b.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf6>
     c66:	bf00      	nop
     c68:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     c6c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     c70:	792e      	ldrb	r6, [r5, #4]
     c72:	7166      	strb	r6, [r4, #5]
     c74:	88ad      	ldrh	r5, [r5, #4]
     c76:	0a2d      	lsrs	r5, r5, #8
     c78:	1c5b      	adds	r3, r3, #1
     c7a:	71a5      	strb	r5, [r4, #6]
     c7c:	b2db      	uxtb	r3, r3
     c7e:	4293      	cmp	r3, r2
     c80:	d3f2      	bcc.n	c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xe0>
     c82:	2101      	movs	r1, #1
     c84:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     c88:	b2c0      	uxtb	r0, r0
     c8a:	bd70      	pop	{r4, r5, r6, pc}
     c8c:	2000      	movs	r0, #0
     c8e:	bd70      	pop	{r4, r5, r6, pc}

00000c90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     c90:	2840      	cmp	r0, #64	; 0x40
     c92:	d203      	bcs.n	c9c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     c94:	1e40      	subs	r0, r0, #1
     c96:	b2c1      	uxtb	r1, r0
     c98:	4805      	ldr	r0, [pc, #20]	; (cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     c9a:	e005      	b.n	ca8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     c9c:	28ff      	cmp	r0, #255	; 0xff
     c9e:	d005      	beq.n	cac <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     ca0:	3840      	subs	r0, #64	; 0x40
     ca2:	b2c1      	uxtb	r1, r0
     ca4:	4802      	ldr	r0, [pc, #8]	; (cb0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     ca6:	3008      	adds	r0, #8
     ca8:	f00c ba1d 	b.w	d0e6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cac:	2001      	movs	r0, #1
     cae:	4770      	bx	lr
     cb0:	2000004c 	.word	0x2000004c

00000cb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     cb4:	1e40      	subs	r0, r0, #1
     cb6:	b2c1      	uxtb	r1, r0
     cb8:	4801      	ldr	r0, [pc, #4]	; (cc0 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     cba:	f00c ba14 	b.w	d0e6 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     cbe:	0000      	.short	0x0000
     cc0:	2000005c 	.word	0x2000005c

00000cc4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     cc4:	4902      	ldr	r1, [pc, #8]	; (cd0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
     cc6:	6802      	ldr	r2, [r0, #0]
     cc8:	610a      	str	r2, [r1, #16]
     cca:	6840      	ldr	r0, [r0, #4]
     ccc:	6148      	str	r0, [r1, #20]
     cce:	4770      	bx	lr
     cd0:	2000004c 	.word	0x2000004c

00000cd4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     cd4:	4905      	ldr	r1, [pc, #20]	; (cec <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
     cd6:	6802      	ldr	r2, [r0, #0]
     cd8:	600a      	str	r2, [r1, #0]
     cda:	6840      	ldr	r0, [r0, #4]
     cdc:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
     ce0:	600a      	str	r2, [r1, #0]
     ce2:	4a03      	ldr	r2, [pc, #12]	; (cf0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     ce4:	4310      	orrs	r0, r2
     ce6:	6048      	str	r0, [r1, #4]
     ce8:	4770      	bx	lr
     cea:	0000      	.short	0x0000
     cec:	2000004c 	.word	0x2000004c
     cf0:	024007f8 	.word	0x024007f8

00000cf4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     cf4:	4902      	ldr	r1, [pc, #8]	; (d00 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     cf6:	6802      	ldr	r2, [r0, #0]
     cf8:	608a      	str	r2, [r1, #8]
     cfa:	6840      	ldr	r0, [r0, #4]
     cfc:	60c8      	str	r0, [r1, #12]
     cfe:	4770      	bx	lr
     d00:	2000004c 	.word	0x2000004c

00000d04 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     d04:	4807      	ldr	r0, [pc, #28]	; (d24 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     d06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     d0a:	2200      	movs	r2, #0
     d0c:	6001      	str	r1, [r0, #0]
     d0e:	0cc9      	lsrs	r1, r1, #19
     d10:	6041      	str	r1, [r0, #4]
     d12:	f100 0108 	add.w	r1, r0, #8
     d16:	201f      	movs	r0, #31
     d18:	600a      	str	r2, [r1, #0]
     d1a:	604a      	str	r2, [r1, #4]
     d1c:	3108      	adds	r1, #8
     d1e:	e9c1 0200 	strd	r0, r2, [r1]
     d22:	4770      	bx	lr
     d24:	2000004c 	.word	0x2000004c

00000d28 <sdc_hci_cmd_cb_reset>:
     d28:	b510      	push	{r4, lr}
     d2a:	f7ff ffeb 	bl	d04 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     d2e:	f00f fa39 	bl	101a4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     d32:	4604      	mov	r4, r0
     d34:	4802      	ldr	r0, [pc, #8]	; (d40 <sdc_hci_cmd_cb_reset+0x18>)
     d36:	6800      	ldr	r0, [r0, #0]
     d38:	b100      	cbz	r0, d3c <sdc_hci_cmd_cb_reset+0x14>
     d3a:	4780      	blx	r0
     d3c:	4620      	mov	r0, r4
     d3e:	bd10      	pop	{r4, pc}
     d40:	20000064 	.word	0x20000064

00000d44 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     d44:	4901      	ldr	r1, [pc, #4]	; (d4c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     d46:	6008      	str	r0, [r1, #0]
     d48:	4770      	bx	lr
     d4a:	0000      	.short	0x0000
     d4c:	20000064 	.word	0x20000064

00000d50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
     d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d54:	4604      	mov	r4, r0
     d56:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     d5a:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
     d5e:	4d1f      	ldr	r5, [pc, #124]	; (ddc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d60:	4e1e      	ldr	r6, [pc, #120]	; (ddc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
     d62:	3d10      	subs	r5, #16
     d64:	2210      	movs	r2, #16
     d66:	2100      	movs	r1, #0
     d68:	4620      	mov	r0, r4
     d6a:	f010 f8f6 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d6e:	2210      	movs	r2, #16
     d70:	2100      	movs	r1, #0
     d72:	f104 0010 	add.w	r0, r4, #16
     d76:	f010 f8f0 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     d7a:	6828      	ldr	r0, [r5, #0]
     d7c:	1c40      	adds	r0, r0, #1
     d7e:	d108      	bne.n	d92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d80:	6868      	ldr	r0, [r5, #4]
     d82:	1c40      	adds	r0, r0, #1
     d84:	d105      	bne.n	d92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d86:	68a8      	ldr	r0, [r5, #8]
     d88:	1c40      	adds	r0, r0, #1
     d8a:	d102      	bne.n	d92 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
     d8c:	68e8      	ldr	r0, [r5, #12]
     d8e:	1c40      	adds	r0, r0, #1
     d90:	d007      	beq.n	da2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
     d92:	6828      	ldr	r0, [r5, #0]
     d94:	686a      	ldr	r2, [r5, #4]
     d96:	68a9      	ldr	r1, [r5, #8]
     d98:	68eb      	ldr	r3, [r5, #12]
     d9a:	6120      	str	r0, [r4, #16]
     d9c:	6162      	str	r2, [r4, #20]
     d9e:	61a1      	str	r1, [r4, #24]
     da0:	61e3      	str	r3, [r4, #28]
     da2:	2000      	movs	r0, #0
     da4:	f000 fd84 	bl	18b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     da8:	4387      	bics	r7, r0
     daa:	07f8      	lsls	r0, r7, #31
     dac:	d113      	bne.n	dd6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dae:	6830      	ldr	r0, [r6, #0]
     db0:	1c40      	adds	r0, r0, #1
     db2:	d108      	bne.n	dc6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     db4:	6870      	ldr	r0, [r6, #4]
     db6:	1c40      	adds	r0, r0, #1
     db8:	d105      	bne.n	dc6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dba:	68b0      	ldr	r0, [r6, #8]
     dbc:	1c40      	adds	r0, r0, #1
     dbe:	d102      	bne.n	dc6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
     dc0:	68f0      	ldr	r0, [r6, #12]
     dc2:	1c40      	adds	r0, r0, #1
     dc4:	d007      	beq.n	dd6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
     dc6:	6832      	ldr	r2, [r6, #0]
     dc8:	6870      	ldr	r0, [r6, #4]
     dca:	68b1      	ldr	r1, [r6, #8]
     dcc:	68f3      	ldr	r3, [r6, #12]
     dce:	6022      	str	r2, [r4, #0]
     dd0:	6060      	str	r0, [r4, #4]
     dd2:	60a1      	str	r1, [r4, #8]
     dd4:	60e3      	str	r3, [r4, #12]
     dd6:	2000      	movs	r0, #0
     dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ddc:	10000090 	.word	0x10000090

00000de0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
     de0:	b538      	push	{r3, r4, r5, lr}
     de2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
     de6:	4604      	mov	r4, r0
     de8:	4822      	ldr	r0, [pc, #136]	; (e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     dea:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
     dee:	4d21      	ldr	r5, [pc, #132]	; (e74 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
     df0:	6802      	ldr	r2, [r0, #0]
     df2:	3d14      	subs	r5, #20
     df4:	1c52      	adds	r2, r2, #1
     df6:	d104      	bne.n	e02 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
     df8:	6842      	ldr	r2, [r0, #4]
     dfa:	43d2      	mvns	r2, r2
     dfc:	0412      	lsls	r2, r2, #16
     dfe:	0c12      	lsrs	r2, r2, #16
     e00:	d035      	beq.n	e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e02:	07c9      	lsls	r1, r1, #31
     e04:	d033      	beq.n	e6e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
     e06:	6801      	ldr	r1, [r0, #0]
     e08:	6840      	ldr	r0, [r0, #4]
     e0a:	f8ad 0000 	strh.w	r0, [sp]
     e0e:	f8c4 1001 	str.w	r1, [r4, #1]
     e12:	f8bd 0000 	ldrh.w	r0, [sp]
     e16:	f8a4 0005 	strh.w	r0, [r4, #5]
     e1a:	79a0      	ldrb	r0, [r4, #6]
     e1c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
     e20:	71a0      	strb	r0, [r4, #6]
     e22:	6828      	ldr	r0, [r5, #0]
     e24:	1c40      	adds	r0, r0, #1
     e26:	d00c      	beq.n	e42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e28:	6868      	ldr	r0, [r5, #4]
     e2a:	1c40      	adds	r0, r0, #1
     e2c:	d009      	beq.n	e42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e2e:	68a8      	ldr	r0, [r5, #8]
     e30:	1c40      	adds	r0, r0, #1
     e32:	d006      	beq.n	e42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e34:	68e8      	ldr	r0, [r5, #12]
     e36:	1c40      	adds	r0, r0, #1
     e38:	d003      	beq.n	e42 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
     e3a:	2000      	movs	r0, #0
     e3c:	f000 fd38 	bl	18b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
     e40:	b140      	cbz	r0, e54 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
     e42:	2210      	movs	r2, #16
     e44:	2100      	movs	r1, #0
     e46:	1de0      	adds	r0, r4, #7
     e48:	f010 f887 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     e4c:	2001      	movs	r0, #1
     e4e:	7020      	strb	r0, [r4, #0]
     e50:	2000      	movs	r0, #0
     e52:	bd38      	pop	{r3, r4, r5, pc}
     e54:	682a      	ldr	r2, [r5, #0]
     e56:	6869      	ldr	r1, [r5, #4]
     e58:	68a8      	ldr	r0, [r5, #8]
     e5a:	68eb      	ldr	r3, [r5, #12]
     e5c:	f8c4 2007 	str.w	r2, [r4, #7]
     e60:	f8c4 100b 	str.w	r1, [r4, #11]
     e64:	f8c4 000f 	str.w	r0, [r4, #15]
     e68:	f8c4 3013 	str.w	r3, [r4, #19]
     e6c:	e7ee      	b.n	e4c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
     e6e:	2000      	movs	r0, #0
     e70:	e7ed      	b.n	e4e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
     e72:	0000      	.short	0x0000
     e74:	100000a4 	.word	0x100000a4

00000e78 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e78:	2102      	movs	r1, #2
     e7a:	8001      	strh	r1, [r0, #0]
     e7c:	8041      	strh	r1, [r0, #2]
     e7e:	2100      	movs	r1, #0
     e80:	7101      	strb	r1, [r0, #4]
     e82:	21e0      	movs	r1, #224	; 0xe0
     e84:	7141      	strb	r1, [r0, #5]
     e86:	f642 617e 	movw	r1, #11902	; 0x2e7e
     e8a:	80c1      	strh	r1, [r0, #6]
     e8c:	4901      	ldr	r1, [pc, #4]	; (e94 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e8e:	6081      	str	r1, [r0, #8]
     e90:	2000      	movs	r0, #0
     e92:	4770      	bx	lr
     e94:	85055ec1 	.word	0x85055ec1
     e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e9c:	798c      	ldrb	r4, [r1, #6]
     e9e:	f8dd e018 	ldr.w	lr, [sp, #24]
     ea2:	2c08      	cmp	r4, #8
     ea4:	d901      	bls.n	eaa <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
     ea6:	21db      	movs	r1, #219	; 0xdb
     ea8:	e02c      	b.n	f04 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eaa:	f8df c0a4 	ldr.w	ip, [pc, #164]	; f50 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
     eae:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
     eb2:	b10d      	cbz	r5, eb8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
     eb4:	21dc      	movs	r1, #220	; 0xdc
     eb6:	e025      	b.n	f04 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
     eb8:	79cd      	ldrb	r5, [r1, #7]
     eba:	2d00      	cmp	r5, #0
     ebc:	d045      	beq.n	f4a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
     ebe:	006f      	lsls	r7, r5, #1
     ec0:	370a      	adds	r7, #10
     ec2:	681d      	ldr	r5, [r3, #0]
     ec4:	2c02      	cmp	r4, #2
     ec6:	443d      	add	r5, r7
     ec8:	d901      	bls.n	ece <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
     eca:	4626      	mov	r6, r4
     ecc:	e001      	b.n	ed2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
     ece:	f04f 0602 	mov.w	r6, #2
     ed2:	442e      	add	r6, r5
     ed4:	f1a6 0601 	sub.w	r6, r6, #1
     ed8:	d901      	bls.n	ede <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
     eda:	4625      	mov	r5, r4
     edc:	e001      	b.n	ee2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
     ede:	f04f 0502 	mov.w	r5, #2
     ee2:	f1a5 0501 	sub.w	r5, r5, #1
     ee6:	ea26 0605 	bic.w	r6, r6, r5
     eea:	888d      	ldrh	r5, [r1, #4]
     eec:	4425      	add	r5, r4
     eee:	f1a4 0401 	sub.w	r4, r4, #1
     ef2:	f1a5 0501 	sub.w	r5, r5, #1
     ef6:	ea25 0504 	bic.w	r5, r5, r4
     efa:	f64f 74ff 	movw	r4, #65535	; 0xffff
     efe:	42a5      	cmp	r5, r4
     f00:	d303      	bcc.n	f0a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
     f02:	21e7      	movs	r1, #231	; 0xe7
     f04:	2017      	movs	r0, #23
     f06:	f7ff fd43 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f0a:	f1be 0f00 	cmp.w	lr, #0
     f0e:	d118      	bne.n	f42 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
     f10:	1bf4      	subs	r4, r6, r7
     f12:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
     f16:	8025      	strh	r5, [r4, #0]
     f18:	79c8      	ldrb	r0, [r1, #7]
     f1a:	70a0      	strb	r0, [r4, #2]
     f1c:	2001      	movs	r0, #1
     f1e:	70e0      	strb	r0, [r4, #3]
     f20:	7122      	strb	r2, [r4, #4]
     f22:	6808      	ldr	r0, [r1, #0]
     f24:	f64f 72f0 	movw	r2, #65520	; 0xfff0
     f28:	0c00      	lsrs	r0, r0, #16
     f2a:	80e0      	strh	r0, [r4, #6]
     f2c:	8808      	ldrh	r0, [r1, #0]
     f2e:	8120      	strh	r0, [r4, #8]
     f30:	2000      	movs	r0, #0
     f32:	e003      	b.n	f3c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
     f34:	eb04 0740 	add.w	r7, r4, r0, lsl #1
     f38:	1c40      	adds	r0, r0, #1
     f3a:	817a      	strh	r2, [r7, #10]
     f3c:	79cf      	ldrb	r7, [r1, #7]
     f3e:	4287      	cmp	r7, r0
     f40:	d8f8      	bhi.n	f34 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
     f42:	79c8      	ldrb	r0, [r1, #7]
     f44:	fb00 6005 	mla	r0, r0, r5, r6
     f48:	6018      	str	r0, [r3, #0]
     f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f4e:	0000      	.short	0x0000
     f50:	20000068 	.word	0x20000068
     f54:	b530      	push	{r4, r5, lr}
     f56:	4603      	mov	r3, r0
     f58:	ea4f 0002 	mov.w	r0, r2
     f5c:	eb03 0440 	add.w	r4, r3, r0, lsl #1
     f60:	8964      	ldrh	r4, [r4, #10]
     f62:	428c      	cmp	r4, r1
     f64:	d009      	beq.n	f7a <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
     f66:	789c      	ldrb	r4, [r3, #2]
     f68:	1c40      	adds	r0, r0, #1
     f6a:	fbb0 f5f4 	udiv	r5, r0, r4
     f6e:	fb04 0015 	mls	r0, r4, r5, r0
     f72:	b2c0      	uxtb	r0, r0
     f74:	4290      	cmp	r0, r2
     f76:	d1f1      	bne.n	f5c <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
     f78:	20ff      	movs	r0, #255	; 0xff
     f7a:	bd30      	pop	{r4, r5, pc}

00000f7c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
     f7c:	b570      	push	{r4, r5, r6, lr}
     f7e:	4605      	mov	r5, r0
     f80:	4819      	ldr	r0, [pc, #100]	; (fe8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
     f82:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
     f86:	b364      	cbz	r4, fe2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     f88:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
     f8c:	d304      	bcc.n	f98 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
     f8e:	f240 2125 	movw	r1, #549	; 0x225
     f92:	2017      	movs	r0, #23
     f94:	f7ff fcfc 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f98:	4629      	mov	r1, r5
     f9a:	4620      	mov	r0, r4
     f9c:	f00c fbbf 	bl	d71e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     fa0:	4601      	mov	r1, r0
     fa2:	28ff      	cmp	r0, #255	; 0xff
     fa4:	d004      	beq.n	fb0 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
     fa6:	4620      	mov	r0, r4
     fa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fac:	f00c bbcb 	b.w	d746 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
     fb0:	78a0      	ldrb	r0, [r4, #2]
     fb2:	fbb5 f1f0 	udiv	r1, r5, r0
     fb6:	fb00 5011 	mls	r0, r0, r1, r5
     fba:	b2c6      	uxtb	r6, r0
     fbc:	4632      	mov	r2, r6
     fbe:	f64f 71f0 	movw	r1, #65520	; 0xfff0
     fc2:	4620      	mov	r0, r4
     fc4:	f7ff ffc6 	bl	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
     fc8:	4602      	mov	r2, r0
     fca:	28ff      	cmp	r0, #255	; 0xff
     fcc:	d009      	beq.n	fe2 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
     fce:	42b2      	cmp	r2, r6
     fd0:	d001      	beq.n	fd6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
     fd2:	2000      	movs	r0, #0
     fd4:	70e0      	strb	r0, [r4, #3]
     fd6:	4629      	mov	r1, r5
     fd8:	4620      	mov	r0, r4
     fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     fde:	f00c bb98 	b.w	d712 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
     fe2:	2000      	movs	r0, #0
     fe4:	bd70      	pop	{r4, r5, r6, pc}
     fe6:	0000      	.short	0x0000
     fe8:	20000068 	.word	0x20000068

00000fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
     fec:	4a08      	ldr	r2, [pc, #32]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fee:	b510      	push	{r4, lr}
     ff0:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
     ff4:	4601      	mov	r1, r0
     ff6:	4620      	mov	r0, r4
     ff8:	f00c fb91 	bl	d71e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
     ffc:	4601      	mov	r1, r0
     ffe:	28ff      	cmp	r0, #255	; 0xff
    1000:	d004      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    1002:	4620      	mov	r0, r4
    1004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1008:	f00c bb9d 	b.w	d746 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    100c:	2000      	movs	r0, #0
    100e:	bd10      	pop	{r4, pc}
    1010:	20000068 	.word	0x20000068

00001014 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1014:	b5f0      	push	{r4, r5, r6, r7, lr}
    1016:	b089      	sub	sp, #36	; 0x24
    1018:	0004      	movs	r4, r0
    101a:	460e      	mov	r6, r1
    101c:	9406      	str	r4, [sp, #24]
    101e:	d007      	beq.n	1030 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1020:	2500      	movs	r5, #0
    1022:	0760      	lsls	r0, r4, #29
    1024:	d006      	beq.n	1034 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1026:	f240 1119 	movw	r1, #281	; 0x119
    102a:	2017      	movs	r0, #23
    102c:	f7ff fcb0 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1030:	2501      	movs	r5, #1
    1032:	e7f6      	b.n	1022 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1034:	4814      	ldr	r0, [pc, #80]	; (1088 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1036:	2200      	movs	r2, #0
    1038:	4f14      	ldr	r7, [pc, #80]	; (108c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    103a:	6002      	str	r2, [r0, #0]
    103c:	6042      	str	r2, [r0, #4]
    103e:	e9d7 1000 	ldrd	r1, r0, [r7]
    1042:	f896 c000 	ldrb.w	ip, [r6]
    1046:	68bb      	ldr	r3, [r7, #8]
    1048:	f36c 601f 	bfi	r0, ip, #24, #8
    104c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1050:	e9cd 5100 	strd	r5, r1, [sp]
    1054:	ab06      	add	r3, sp, #24
    1056:	a901      	add	r1, sp, #4
    1058:	4610      	mov	r0, r2
    105a:	f7ff ff1d 	bl	e98 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    105e:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1062:	7873      	ldrb	r3, [r6, #1]
    1064:	697a      	ldr	r2, [r7, #20]
    1066:	f363 601f 	bfi	r0, r3, #24, #8
    106a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    106e:	e9cd 5100 	strd	r5, r1, [sp]
    1072:	ab06      	add	r3, sp, #24
    1074:	2200      	movs	r2, #0
    1076:	a901      	add	r1, sp, #4
    1078:	2001      	movs	r0, #1
    107a:	f7ff ff0d 	bl	e98 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    107e:	9806      	ldr	r0, [sp, #24]
    1080:	b009      	add	sp, #36	; 0x24
    1082:	1b00      	subs	r0, r0, r4
    1084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1086:	0000      	.short	0x0000
    1088:	20000068 	.word	0x20000068
    108c:	0000117c 	.word	0x0000117c

00001090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1090:	b510      	push	{r4, lr}
    1092:	4604      	mov	r4, r0
    1094:	7980      	ldrb	r0, [r0, #6]
    1096:	490e      	ldr	r1, [pc, #56]	; (10d0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    1098:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    109c:	b1a8      	cbz	r0, 10ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    109e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    10a2:	79e1      	ldrb	r1, [r4, #7]
    10a4:	7882      	ldrb	r2, [r0, #2]
    10a6:	4291      	cmp	r1, r2
    10a8:	d20f      	bcs.n	10ca <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    10aa:	1c4a      	adds	r2, r1, #1
    10ac:	71e2      	strb	r2, [r4, #7]
    10ae:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10b2:	8952      	ldrh	r2, [r2, #10]
    10b4:	429a      	cmp	r2, r3
    10b6:	d0f4      	beq.n	10a2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    10b8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    10bc:	8952      	ldrh	r2, [r2, #10]
    10be:	80a2      	strh	r2, [r4, #4]
    10c0:	f00c fb41 	bl	d746 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    10c4:	6020      	str	r0, [r4, #0]
    10c6:	2000      	movs	r0, #0
    10c8:	bd10      	pop	{r4, pc}
    10ca:	2005      	movs	r0, #5
    10cc:	bd10      	pop	{r4, pc}
    10ce:	0000      	.short	0x0000
    10d0:	20000068 	.word	0x20000068

000010d4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    10d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    10d8:	4607      	mov	r7, r0
    10da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    10de:	8038      	strh	r0, [r7, #0]
    10e0:	4812      	ldr	r0, [pc, #72]	; (112c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    10e2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    10e6:	b1ec      	cbz	r4, 1124 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    10e8:	78a5      	ldrb	r5, [r4, #2]
    10ea:	7920      	ldrb	r0, [r4, #4]
    10ec:	fbb0 f1f5 	udiv	r1, r0, r5
    10f0:	fb05 0611 	mls	r6, r5, r1, r0
    10f4:	4632      	mov	r2, r6
    10f6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    10fa:	4620      	mov	r0, r4
    10fc:	f7ff ff2a 	bl	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1100:	4602      	mov	r2, r0
    1102:	28ff      	cmp	r0, #255	; 0xff
    1104:	d00e      	beq.n	1124 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1106:	1ba8      	subs	r0, r5, r6
    1108:	4410      	add	r0, r2
    110a:	fbb0 f1f5 	udiv	r1, r0, r5
    110e:	fb05 0011 	mls	r0, r5, r1, r0
    1112:	7921      	ldrb	r1, [r4, #4]
    1114:	4408      	add	r0, r1
    1116:	b281      	uxth	r1, r0
    1118:	8039      	strh	r1, [r7, #0]
    111a:	4620      	mov	r0, r4
    111c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1120:	f00c baf7 	b.w	d712 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1124:	2000      	movs	r0, #0
    1126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    112a:	0000      	.short	0x0000
    112c:	20000068 	.word	0x20000068

00001130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1134:	4606      	mov	r6, r0
    1136:	4810      	ldr	r0, [pc, #64]	; (1178 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1138:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    113c:	4631      	mov	r1, r6
    113e:	4628      	mov	r0, r5
    1140:	f00c faed 	bl	d71e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1144:	4604      	mov	r4, r0
    1146:	28ff      	cmp	r0, #255	; 0xff
    1148:	d012      	beq.n	1170 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    114a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    114e:	4621      	mov	r1, r4
    1150:	ea4f 4730 	mov.w	r7, r0, ror #16
    1154:	4628      	mov	r0, r5
    1156:	f00c faf6 	bl	d746 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    115a:	4601      	mov	r1, r0
    115c:	4630      	mov	r0, r6
    115e:	47b8      	blx	r7
    1160:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1164:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    1168:	8148      	strh	r0, [r1, #10]
    116a:	2000      	movs	r0, #0
    116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1170:	f243 0002 	movw	r0, #12290	; 0x3002
    1174:	e7fa      	b.n	116c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    1176:	0000      	.short	0x0000
    1178:	20000068 	.word	0x20000068
    117c:	0000f557 	.word	0x0000f557
    1180:	000802f8 	.word	0x000802f8
    1184:	00000000 	.word	0x00000000
    1188:	0000eb2d 	.word	0x0000eb2d
    118c:	00080118 	.word	0x00080118
    1190:	00000000 	.word	0x00000000

00001194 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1194:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1198:	4c24      	ldr	r4, [pc, #144]	; (122c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    119a:	4606      	mov	r6, r0
    119c:	b081      	sub	sp, #4
    119e:	6820      	ldr	r0, [r4, #0]
    11a0:	469a      	mov	sl, r3
    11a2:	4693      	mov	fp, r2
    11a4:	b158      	cbz	r0, 11be <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    11a6:	7a01      	ldrb	r1, [r0, #8]
    11a8:	42b1      	cmp	r1, r6
    11aa:	d903      	bls.n	11b4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    11ac:	6840      	ldr	r0, [r0, #4]
    11ae:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    11b2:	b140      	cbz	r0, 11c6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    11b4:	f243 0002 	movw	r0, #12290	; 0x3002
    11b8:	b005      	add	sp, #20
    11ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11be:	21a5      	movs	r1, #165	; 0xa5
    11c0:	2018      	movs	r0, #24
    11c2:	f7ff fbe5 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11c6:	4619      	mov	r1, r3
    11c8:	9802      	ldr	r0, [sp, #8]
    11ca:	f00c faf7 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    11ce:	4680      	mov	r8, r0
    11d0:	4658      	mov	r0, fp
    11d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    11d4:	f00c fae8 	bl	d7a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    11d8:	4605      	mov	r5, r0
    11da:	eb08 0005 	add.w	r0, r8, r5
    11de:	1d00      	adds	r0, r0, #4
    11e0:	b287      	uxth	r7, r0
    11e2:	6820      	ldr	r0, [r4, #0]
    11e4:	46a1      	mov	r9, r4
    11e6:	4639      	mov	r1, r7
    11e8:	6800      	ldr	r0, [r0, #0]
    11ea:	f00c fa2d 	bl	d648 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    11ee:	0004      	movs	r4, r0
    11f0:	d01a      	beq.n	1228 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    11f2:	8067      	strh	r7, [r4, #2]
    11f4:	8025      	strh	r5, [r4, #0]
    11f6:	4629      	mov	r1, r5
    11f8:	1d20      	adds	r0, r4, #4
    11fa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    11fc:	4607      	mov	r7, r0
    11fe:	465a      	mov	r2, fp
    1200:	2309      	movs	r3, #9
    1202:	9500      	str	r5, [sp, #0]
    1204:	f00c f99a 	bl	d53c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1208:	8820      	ldrh	r0, [r4, #0]
    120a:	4641      	mov	r1, r8
    120c:	4438      	add	r0, r7
    120e:	230a      	movs	r3, #10
    1210:	9a02      	ldr	r2, [sp, #8]
    1212:	f8cd a000 	str.w	sl, [sp]
    1216:	f00c f991 	bl	d53c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    121a:	f8d9 0000 	ldr.w	r0, [r9]
    121e:	6840      	ldr	r0, [r0, #4]
    1220:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1224:	2000      	movs	r0, #0
    1226:	e7c7      	b.n	11b8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1228:	2004      	movs	r0, #4
    122a:	e7c5      	b.n	11b8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    122c:	20000070 	.word	0x20000070

00001230 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1230:	b570      	push	{r4, r5, r6, lr}
    1232:	4c14      	ldr	r4, [pc, #80]	; (1284 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1234:	6823      	ldr	r3, [r4, #0]
    1236:	b18b      	cbz	r3, 125c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1238:	7a19      	ldrb	r1, [r3, #8]
    123a:	4281      	cmp	r1, r0
    123c:	d912      	bls.n	1264 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    123e:	685a      	ldr	r2, [r3, #4]
    1240:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1244:	b171      	cbz	r1, 1264 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1246:	2500      	movs	r5, #0
    1248:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    124c:	884a      	ldrh	r2, [r1, #2]
    124e:	6818      	ldr	r0, [r3, #0]
    1250:	f00c fa52 	bl	d6f8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1254:	6821      	ldr	r1, [r4, #0]
    1256:	2000      	movs	r0, #0
    1258:	7a0a      	ldrb	r2, [r1, #8]
    125a:	e00c      	b.n	1276 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    125c:	21c6      	movs	r1, #198	; 0xc6
    125e:	2018      	movs	r0, #24
    1260:	f7ff fb96 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1264:	f243 0002 	movw	r0, #12290	; 0x3002
    1268:	bd70      	pop	{r4, r5, r6, pc}
    126a:	684b      	ldr	r3, [r1, #4]
    126c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1270:	b933      	cbnz	r3, 1280 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1272:	1c40      	adds	r0, r0, #1
    1274:	b2c0      	uxtb	r0, r0
    1276:	4282      	cmp	r2, r0
    1278:	d8f7      	bhi.n	126a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    127a:	6808      	ldr	r0, [r1, #0]
    127c:	f00c fa31 	bl	d6e2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1280:	2000      	movs	r0, #0
    1282:	bd70      	pop	{r4, r5, r6, pc}
    1284:	20000070 	.word	0x20000070

00001288 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    128c:	460d      	mov	r5, r1
    128e:	0004      	movs	r4, r0
    1290:	4690      	mov	r8, r2
    1292:	f04f 0600 	mov.w	r6, #0
    1296:	d006      	beq.n	12a6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1298:	2700      	movs	r7, #0
    129a:	07a0      	lsls	r0, r4, #30
    129c:	d005      	beq.n	12aa <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    129e:	2186      	movs	r1, #134	; 0x86
    12a0:	2018      	movs	r0, #24
    12a2:	f7ff fb75 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12a6:	2701      	movs	r7, #1
    12a8:	e7f7      	b.n	129a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    12aa:	b1cd      	cbz	r5, 12e0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12ac:	4611      	mov	r1, r2
    12ae:	2000      	movs	r0, #0
    12b0:	f00c f9fb 	bl	d6aa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12b4:	300c      	adds	r0, #12
    12b6:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    12ba:	b98f      	cbnz	r7, 12e0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    12bc:	4f0a      	ldr	r7, [pc, #40]	; (12e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    12be:	f104 000c 	add.w	r0, r4, #12
    12c2:	00aa      	lsls	r2, r5, #2
    12c4:	603c      	str	r4, [r7, #0]
    12c6:	7225      	strb	r5, [r4, #8]
    12c8:	6060      	str	r0, [r4, #4]
    12ca:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    12ce:	6020      	str	r0, [r4, #0]
    12d0:	2100      	movs	r1, #0
    12d2:	6860      	ldr	r0, [r4, #4]
    12d4:	f00f fe41 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    12d8:	4641      	mov	r1, r8
    12da:	6838      	ldr	r0, [r7, #0]
    12dc:	f00c f9e5 	bl	d6aa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    12e0:	4630      	mov	r0, r6
    12e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12e6:	0000      	.short	0x0000
    12e8:	20000070 	.word	0x20000070

000012ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	4d08      	ldr	r5, [pc, #32]	; (1310 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    12f0:	6828      	ldr	r0, [r5, #0]
    12f2:	2800      	cmp	r0, #0
    12f4:	d00a      	beq.n	130c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    12f6:	2400      	movs	r4, #0
    12f8:	e004      	b.n	1304 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    12fa:	4620      	mov	r0, r4
    12fc:	f7ff ff98 	bl	1230 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1300:	1c64      	adds	r4, r4, #1
    1302:	b2e4      	uxtb	r4, r4
    1304:	6828      	ldr	r0, [r5, #0]
    1306:	7a00      	ldrb	r0, [r0, #8]
    1308:	42a0      	cmp	r0, r4
    130a:	d8f6      	bhi.n	12fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    130c:	bd70      	pop	{r4, r5, r6, pc}
    130e:	0000      	.short	0x0000
    1310:	20000070 	.word	0x20000070

00001314 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1314:	4909      	ldr	r1, [pc, #36]	; (133c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1316:	b510      	push	{r4, lr}
    1318:	4602      	mov	r2, r0
    131a:	6809      	ldr	r1, [r1, #0]
    131c:	2000      	movs	r0, #0
    131e:	b149      	cbz	r1, 1334 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1320:	7a0b      	ldrb	r3, [r1, #8]
    1322:	4293      	cmp	r3, r2
    1324:	d905      	bls.n	1332 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1326:	6849      	ldr	r1, [r1, #4]
    1328:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    132c:	2900      	cmp	r1, #0
    132e:	d000      	beq.n	1332 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1330:	1d08      	adds	r0, r1, #4
    1332:	bd10      	pop	{r4, pc}
    1334:	21ec      	movs	r1, #236	; 0xec
    1336:	2018      	movs	r0, #24
    1338:	f7ff fb2a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    133c:	20000070 	.word	0x20000070

00001340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1340:	490a      	ldr	r1, [pc, #40]	; (136c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1342:	b510      	push	{r4, lr}
    1344:	4602      	mov	r2, r0
    1346:	6809      	ldr	r1, [r1, #0]
    1348:	2000      	movs	r0, #0
    134a:	b159      	cbz	r1, 1364 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    134c:	7a0b      	ldrb	r3, [r1, #8]
    134e:	4293      	cmp	r3, r2
    1350:	d907      	bls.n	1362 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1352:	6849      	ldr	r1, [r1, #4]
    1354:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1358:	2900      	cmp	r1, #0
    135a:	d002      	beq.n	1362 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    135c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1360:	4408      	add	r0, r1
    1362:	bd10      	pop	{r4, pc}
    1364:	21fa      	movs	r1, #250	; 0xfa
    1366:	2018      	movs	r0, #24
    1368:	f7ff fb12 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    136c:	20000070 	.word	0x20000070
    1370:	b570      	push	{r4, r5, r6, lr}
    1372:	4b1e      	ldr	r3, [pc, #120]	; (13ec <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x64>)
    1374:	6845      	ldr	r5, [r0, #4]
    1376:	4604      	mov	r4, r0
    1378:	2200      	movs	r2, #0
    137a:	b1a1      	cbz	r1, 13a6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x1e>
    137c:	2001      	movs	r0, #1
    137e:	7060      	strb	r0, [r4, #1]
    1380:	8858      	ldrh	r0, [r3, #2]
    1382:	0881      	lsrs	r1, r0, #2
    1384:	f05f 0000 	movs.w	r0, #0
    1388:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    138c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1390:	831a      	strh	r2, [r3, #24]
    1392:	8419      	strh	r1, [r3, #32]
    1394:	fb00 5301 	mla	r3, r0, r1, r5
    1398:	6073      	str	r3, [r6, #4]
    139a:	1823      	adds	r3, r4, r0
    139c:	1c40      	adds	r0, r0, #1
    139e:	751a      	strb	r2, [r3, #20]
    13a0:	2804      	cmp	r0, #4
    13a2:	d3f1      	bcc.n	1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    13a4:	bd70      	pop	{r4, r5, r6, pc}
    13a6:	7062      	strb	r2, [r4, #1]
    13a8:	f05f 0000 	movs.w	r0, #0
    13ac:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    13b0:	830a      	strh	r2, [r1, #24]
    13b2:	840a      	strh	r2, [r1, #32]
    13b4:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    13b8:	604a      	str	r2, [r1, #4]
    13ba:	1821      	adds	r1, r4, r0
    13bc:	1c40      	adds	r0, r0, #1
    13be:	750a      	strb	r2, [r1, #20]
    13c0:	2804      	cmp	r0, #4
    13c2:	d3f3      	bcc.n	13ac <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x24>
    13c4:	8858      	ldrh	r0, [r3, #2]
    13c6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    13ca:	d201      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x48>
    13cc:	0846      	lsrs	r6, r0, #1
    13ce:	e000      	b.n	13d2 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4a>
    13d0:	26ff      	movs	r6, #255	; 0xff
    13d2:	f00c fa67 	bl	d8a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    13d6:	6065      	str	r5, [r4, #4]
    13d8:	8420      	strh	r0, [r4, #32]
    13da:	1829      	adds	r1, r5, r0
    13dc:	60a1      	str	r1, [r4, #8]
    13de:	8466      	strh	r6, [r4, #34]	; 0x22
    13e0:	60e5      	str	r5, [r4, #12]
    13e2:	84a0      	strh	r0, [r4, #36]	; 0x24
    13e4:	6121      	str	r1, [r4, #16]
    13e6:	84e6      	strh	r6, [r4, #38]	; 0x26
    13e8:	bd70      	pop	{r4, r5, r6, pc}
    13ea:	0000      	.short	0x0000
    13ec:	20000074 	.word	0x20000074

000013f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    13f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13f4:	b158      	cbz	r0, 140e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    13f6:	2500      	movs	r5, #0
    13f8:	4411      	add	r1, r2
    13fa:	4e24      	ldr	r6, [pc, #144]	; (148c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    13fc:	b2cc      	uxtb	r4, r1
    13fe:	2700      	movs	r7, #0
    1400:	7034      	strb	r4, [r6, #0]
    1402:	0781      	lsls	r1, r0, #30
    1404:	d005      	beq.n	1412 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1406:	214e      	movs	r1, #78	; 0x4e
    1408:	2009      	movs	r0, #9
    140a:	f7ff fac1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    140e:	2501      	movs	r5, #1
    1410:	e7f2      	b.n	13f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1412:	2b1f      	cmp	r3, #31
    1414:	d804      	bhi.n	1420 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    141a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    141e:	e009      	b.n	1434 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1420:	0059      	lsls	r1, r3, #1
    1422:	2bff      	cmp	r3, #255	; 0xff
    1424:	d90c      	bls.n	1440 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1426:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    142a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    142e:	d200      	bcs.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1430:	4611      	mov	r1, r2
    1432:	b289      	uxth	r1, r1
    1434:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1438:	1cc9      	adds	r1, r1, #3
    143a:	4011      	ands	r1, r2
    143c:	b135      	cbz	r5, 144c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    143e:	e007      	b.n	1450 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1440:	227c      	movs	r2, #124	; 0x7c
    1442:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1446:	d3f4      	bcc.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1448:	217c      	movs	r1, #124	; 0x7c
    144a:	e7f2      	b.n	1432 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    144c:	6070      	str	r0, [r6, #4]
    144e:	8071      	strh	r1, [r6, #2]
    1450:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1454:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1458:	2200      	movs	r2, #0
    145a:	6876      	ldr	r6, [r6, #4]
    145c:	f04f 0c01 	mov.w	ip, #1
    1460:	e00d      	b.n	147e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1462:	b94d      	cbnz	r5, 1478 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1464:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1468:	eb00 0e03 	add.w	lr, r0, r3
    146c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1470:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1474:	f8c7 e004 	str.w	lr, [r7, #4]
    1478:	1c52      	adds	r2, r2, #1
    147a:	440b      	add	r3, r1
    147c:	b2d2      	uxtb	r2, r2
    147e:	42a2      	cmp	r2, r4
    1480:	d3ef      	bcc.n	1462 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1482:	1ddb      	adds	r3, r3, #7
    1484:	f023 0007 	bic.w	r0, r3, #7
    1488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    148c:	20000074 	.word	0x20000074

00001490 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	4a10      	ldr	r2, [pc, #64]	; (14d4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1494:	2000      	movs	r0, #0
    1496:	6851      	ldr	r1, [r2, #4]
    1498:	7812      	ldrb	r2, [r2, #0]
    149a:	e014      	b.n	14c6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    149c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    14a0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    14a4:	b16b      	cbz	r3, 14c2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    14a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    14aa:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    14ae:	d00c      	beq.n	14ca <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    14b0:	2500      	movs	r5, #0
    14b2:	70a5      	strb	r5, [r4, #2]
    14b4:	2101      	movs	r1, #1
    14b6:	4620      	mov	r0, r4
    14b8:	f7ff ff5a 	bl	1370 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    14bc:	7025      	strb	r5, [r4, #0]
    14be:	4620      	mov	r0, r4
    14c0:	bd70      	pop	{r4, r5, r6, pc}
    14c2:	1c40      	adds	r0, r0, #1
    14c4:	b2c0      	uxtb	r0, r0
    14c6:	4290      	cmp	r0, r2
    14c8:	d3e8      	bcc.n	149c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    14ca:	21a9      	movs	r1, #169	; 0xa9
    14cc:	2009      	movs	r0, #9
    14ce:	f7ff fa5f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14d2:	0000      	.short	0x0000
    14d4:	20000074 	.word	0x20000074

000014d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    14d8:	4804      	ldr	r0, [pc, #16]	; (14ec <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    14da:	b510      	push	{r4, lr}
    14dc:	8840      	ldrh	r0, [r0, #2]
    14de:	0884      	lsrs	r4, r0, #2
    14e0:	f00c f9e0 	bl	d8a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    14e4:	4284      	cmp	r4, r0
    14e6:	d300      	bcc.n	14ea <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    14e8:	4620      	mov	r0, r4
    14ea:	bd10      	pop	{r4, pc}
    14ec:	20000074 	.word	0x20000074
    14f0:	b530      	push	{r4, r5, lr}
    14f2:	490d      	ldr	r1, [pc, #52]	; (1528 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    14f4:	2001      	movs	r0, #1
    14f6:	6048      	str	r0, [r1, #4]
    14f8:	1e82      	subs	r2, r0, #2
    14fa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    14fe:	490b      	ldr	r1, [pc, #44]	; (152c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1500:	6088      	str	r0, [r1, #8]
    1502:	2300      	movs	r3, #0
    1504:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1508:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    150c:	4c08      	ldr	r4, [pc, #32]	; (1530 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    150e:	6023      	str	r3, [r4, #0]
    1510:	1d25      	adds	r5, r4, #4
    1512:	6028      	str	r0, [r5, #0]
    1514:	6088      	str	r0, [r1, #8]
    1516:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    151a:	6023      	str	r3, [r4, #0]
    151c:	6028      	str	r0, [r5, #0]
    151e:	4906      	ldr	r1, [pc, #24]	; (1538 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1520:	4804      	ldr	r0, [pc, #16]	; (1534 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1522:	6008      	str	r0, [r1, #0]
    1524:	bd30      	pop	{r4, r5, pc}
    1526:	0000      	.short	0x0000
    1528:	4000e000 	.word	0x4000e000
    152c:	4000f000 	.word	0x4000f000
    1530:	4000f500 	.word	0x4000f500
    1534:	3ff60000 	.word	0x3ff60000
    1538:	4001f508 	.word	0x4001f508

0000153c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    153c:	b510      	push	{r4, lr}
    153e:	f7ff ffd7 	bl	14f0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1542:	f00c fa86 	bl	da52 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1546:	4903      	ldr	r1, [pc, #12]	; (1554 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1548:	4801      	ldr	r0, [pc, #4]	; (1550 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    154a:	6008      	str	r0, [r1, #0]
    154c:	bd10      	pop	{r4, pc}
    154e:	0000      	.short	0x0000
    1550:	3ff60000 	.word	0x3ff60000
    1554:	4001f508 	.word	0x4001f508

00001558 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1558:	b510      	push	{r4, lr}
    155a:	f7ff ffc9 	bl	14f0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    155e:	f00c fa78 	bl	da52 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1562:	f000 f887 	bl	1674 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1566:	4905      	ldr	r1, [pc, #20]	; (157c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1568:	4803      	ldr	r0, [pc, #12]	; (1578 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    156a:	6008      	str	r0, [r1, #0]
    156c:	f000 f8b8 	bl	16e0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1574:	f000 b8dc 	b.w	1730 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1578:	3ff60000 	.word	0x3ff60000
    157c:	4001f508 	.word	0x4001f508
    1580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1584:	4682      	mov	sl, r0
    1586:	4838      	ldr	r0, [pc, #224]	; (1668 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1588:	f00f fb7c 	bl	10c84 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    158c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1668 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1590:	b128      	cbz	r0, 159e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1592:	2601      	movs	r6, #1
    1594:	f10b 0001 	add.w	r0, fp, #1
    1598:	21ff      	movs	r1, #255	; 0xff
    159a:	7001      	strb	r1, [r0, #0]
    159c:	e000      	b.n	15a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    159e:	2600      	movs	r6, #0
    15a0:	f44f 7580 	mov.w	r5, #256	; 0x100
    15a4:	4c31      	ldr	r4, [pc, #196]	; (166c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    15a6:	f04f 0800 	mov.w	r8, #0
    15aa:	1d2f      	adds	r7, r5, #4
    15ac:	2101      	movs	r1, #1
    15ae:	6061      	str	r1, [r4, #4]
    15b0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    15b4:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    15b8:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    15bc:	6021      	str	r1, [r4, #0]
    15be:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1670 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    15c2:	e01c      	b.n	15fe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15c4:	f8d9 0000 	ldr.w	r0, [r9]
    15c8:	06c0      	lsls	r0, r0, #27
    15ca:	d518      	bpl.n	15fe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15cc:	200e      	movs	r0, #14
    15ce:	f00c fa4f 	bl	da70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    15d2:	f3ef 8010 	mrs	r0, PRIMASK
    15d6:	9000      	str	r0, [sp, #0]
    15d8:	b672      	cpsid	i
    15da:	2103      	movs	r1, #3
    15dc:	4620      	mov	r0, r4
    15de:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    15e2:	4629      	mov	r1, r5
    15e4:	f00c fa51 	bl	da8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    15e8:	b930      	cbnz	r0, 15f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    15ea:	4639      	mov	r1, r7
    15ec:	4620      	mov	r0, r4
    15ee:	f00c fa4c 	bl	da8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    15f2:	b908      	cbnz	r0, 15f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    15f4:	f00f fbdd 	bl	10db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    15f8:	9800      	ldr	r0, [sp, #0]
    15fa:	b900      	cbnz	r0, 15fe <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    15fc:	b662      	cpsie	i
    15fe:	4629      	mov	r1, r5
    1600:	4620      	mov	r0, r4
    1602:	f00c fa42 	bl	da8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1606:	b928      	cbnz	r0, 1614 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1608:	4639      	mov	r1, r7
    160a:	4620      	mov	r0, r4
    160c:	f00c fa3d 	bl	da8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1610:	2800      	cmp	r0, #0
    1612:	d0d7      	beq.n	15c4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1614:	4639      	mov	r1, r7
    1616:	4620      	mov	r0, r4
    1618:	f00c fa37 	bl	da8a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    161c:	2800      	cmp	r0, #0
    161e:	d1c5      	bne.n	15ac <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1620:	bb06      	cbnz	r6, 1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1622:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1626:	f88d 1000 	strb.w	r1, [sp]
    162a:	9900      	ldr	r1, [sp, #0]
    162c:	9100      	str	r1, [sp, #0]
    162e:	f89d 1000 	ldrb.w	r1, [sp]
    1632:	b109      	cbz	r1, 1638 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1634:	2501      	movs	r5, #1
    1636:	e000      	b.n	163a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1638:	2500      	movs	r5, #0
    163a:	f10b 0001 	add.w	r0, fp, #1
    163e:	f880 8000 	strb.w	r8, [r0]
    1642:	2003      	movs	r0, #3
    1644:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1648:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    164c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1650:	200e      	movs	r0, #14
    1652:	f00c fa0d 	bl	da70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1656:	4804      	ldr	r0, [pc, #16]	; (1668 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1658:	f00f fb2b 	bl	10cb2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    165c:	b115      	cbz	r5, 1664 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    165e:	2011      	movs	r0, #17
    1660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1664:	2000      	movs	r0, #0
    1666:	e7fb      	b.n	1660 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1668:	20000364 	.word	0x20000364
    166c:	4000e000 	.word	0x4000e000
    1670:	e000ed10 	.word	0xe000ed10

00001674 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1674:	b510      	push	{r4, lr}
    1676:	4806      	ldr	r0, [pc, #24]	; (1690 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1678:	f00f fb17 	bl	10caa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    167c:	b118      	cbz	r0, 1686 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    167e:	2130      	movs	r1, #48	; 0x30
    1680:	201d      	movs	r0, #29
    1682:	f7ff f985 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1686:	4802      	ldr	r0, [pc, #8]	; (1690 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1688:	2100      	movs	r1, #0
    168a:	7041      	strb	r1, [r0, #1]
    168c:	bd10      	pop	{r4, pc}
    168e:	0000      	.short	0x0000
    1690:	20000364 	.word	0x20000364

00001694 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1694:	b570      	push	{r4, r5, r6, lr}
    1696:	4911      	ldr	r1, [pc, #68]	; (16dc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1698:	680a      	ldr	r2, [r1, #0]
    169a:	b1ea      	cbz	r2, 16d8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    169c:	2300      	movs	r3, #0
    169e:	461d      	mov	r5, r3
    16a0:	2401      	movs	r4, #1
    16a2:	684a      	ldr	r2, [r1, #4]
    16a4:	1c52      	adds	r2, r2, #1
    16a6:	604a      	str	r2, [r1, #4]
    16a8:	2a09      	cmp	r2, #9
    16aa:	d300      	bcc.n	16ae <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    16ac:	604d      	str	r5, [r1, #4]
    16ae:	790e      	ldrb	r6, [r1, #4]
    16b0:	fa04 f206 	lsl.w	r2, r4, r6
    16b4:	680e      	ldr	r6, [r1, #0]
    16b6:	4216      	tst	r6, r2
    16b8:	d00b      	beq.n	16d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    16ba:	f3ef 8310 	mrs	r3, PRIMASK
    16be:	b672      	cpsid	i
    16c0:	680c      	ldr	r4, [r1, #0]
    16c2:	4394      	bics	r4, r2
    16c4:	600c      	str	r4, [r1, #0]
    16c6:	b903      	cbnz	r3, 16ca <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    16c8:	b662      	cpsie	i
    16ca:	6849      	ldr	r1, [r1, #4]
    16cc:	6001      	str	r1, [r0, #0]
    16ce:	2000      	movs	r0, #0
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	1c5b      	adds	r3, r3, #1
    16d4:	2b09      	cmp	r3, #9
    16d6:	d3e4      	bcc.n	16a2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    16d8:	2005      	movs	r0, #5
    16da:	bd70      	pop	{r4, r5, r6, pc}
    16dc:	2000007c 	.word	0x2000007c

000016e0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    16e0:	4802      	ldr	r0, [pc, #8]	; (16ec <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    16e2:	2100      	movs	r1, #0
    16e4:	6001      	str	r1, [r0, #0]
    16e6:	6041      	str	r1, [r0, #4]
    16e8:	4770      	bx	lr
    16ea:	0000      	.short	0x0000
    16ec:	2000007c 	.word	0x2000007c

000016f0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    16f0:	b510      	push	{r4, lr}
    16f2:	4c04      	ldr	r4, [pc, #16]	; (1704 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    16f4:	7820      	ldrb	r0, [r4, #0]
    16f6:	28ff      	cmp	r0, #255	; 0xff
    16f8:	d003      	beq.n	1702 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    16fa:	f00a ff9b 	bl	c634 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    16fe:	20ff      	movs	r0, #255	; 0xff
    1700:	7020      	strb	r0, [r4, #0]
    1702:	bd10      	pop	{r4, pc}
    1704:	20000000 	.word	0x20000000

00001708 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1708:	b510      	push	{r4, lr}
    170a:	4c08      	ldr	r4, [pc, #32]	; (172c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    170c:	7861      	ldrb	r1, [r4, #1]
    170e:	b109      	cbz	r1, 1714 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1710:	200f      	movs	r0, #15
    1712:	bd10      	pop	{r4, pc}
    1714:	f00a ff54 	bl	c5c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1718:	7020      	strb	r0, [r4, #0]
    171a:	28ff      	cmp	r0, #255	; 0xff
    171c:	d001      	beq.n	1722 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    171e:	2000      	movs	r0, #0
    1720:	bd10      	pop	{r4, pc}
    1722:	2173      	movs	r1, #115	; 0x73
    1724:	201f      	movs	r0, #31
    1726:	f7ff f933 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    172a:	0000      	.short	0x0000
    172c:	20000000 	.word	0x20000000

00001730 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1730:	4901      	ldr	r1, [pc, #4]	; (1738 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1732:	2000      	movs	r0, #0
    1734:	7048      	strb	r0, [r1, #1]
    1736:	4770      	bx	lr
    1738:	20000000 	.word	0x20000000

0000173c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    173c:	4806      	ldr	r0, [pc, #24]	; (1758 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    173e:	4a07      	ldr	r2, [pc, #28]	; (175c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1740:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1742:	8852      	ldrh	r2, [r2, #2]
    1744:	4291      	cmp	r1, r2
    1746:	d104      	bne.n	1752 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1748:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    174c:	b108      	cbz	r0, 1752 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    174e:	2000      	movs	r0, #0
    1750:	4770      	bx	lr
    1752:	2001      	movs	r0, #1
    1754:	4770      	bx	lr
    1756:	0000      	.short	0x0000
    1758:	200014d0 	.word	0x200014d0
    175c:	20000358 	.word	0x20000358

00001760 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1760:	4901      	ldr	r1, [pc, #4]	; (1768 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1762:	8048      	strh	r0, [r1, #2]
    1764:	4770      	bx	lr
    1766:	0000      	.short	0x0000
    1768:	20000358 	.word	0x20000358

0000176c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    176c:	4808      	ldr	r0, [pc, #32]	; (1790 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    176e:	4a09      	ldr	r2, [pc, #36]	; (1794 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1770:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1772:	8852      	ldrh	r2, [r2, #2]
    1774:	4291      	cmp	r1, r2
    1776:	d109      	bne.n	178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1778:	f64f 71ff 	movw	r1, #65535	; 0xffff
    177c:	8481      	strh	r1, [r0, #36]	; 0x24
    177e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1782:	b119      	cbz	r1, 178c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1784:	2100      	movs	r1, #0
    1786:	7001      	strb	r1, [r0, #0]
    1788:	2001      	movs	r0, #1
    178a:	4770      	bx	lr
    178c:	2000      	movs	r0, #0
    178e:	4770      	bx	lr
    1790:	200014d0 	.word	0x200014d0
    1794:	20000358 	.word	0x20000358

00001798 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1798:	4807      	ldr	r0, [pc, #28]	; (17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    179a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    179e:	2901      	cmp	r1, #1
    17a0:	d007      	beq.n	17b2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    17a2:	2101      	movs	r1, #1
    17a4:	7001      	strb	r1, [r0, #0]
    17a6:	4805      	ldr	r0, [pc, #20]	; (17bc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    17a8:	4903      	ldr	r1, [pc, #12]	; (17b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    17aa:	8800      	ldrh	r0, [r0, #0]
    17ac:	8488      	strh	r0, [r1, #36]	; 0x24
    17ae:	2001      	movs	r0, #1
    17b0:	4770      	bx	lr
    17b2:	2000      	movs	r0, #0
    17b4:	4770      	bx	lr
    17b6:	0000      	.short	0x0000
    17b8:	200014d0 	.word	0x200014d0
    17bc:	20000358 	.word	0x20000358

000017c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    17c0:	4906      	ldr	r1, [pc, #24]	; (17dc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    17c2:	4b07      	ldr	r3, [pc, #28]	; (17e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    17c4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17c6:	885b      	ldrh	r3, [r3, #2]
    17c8:	429a      	cmp	r2, r3
    17ca:	d105      	bne.n	17d8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17cc:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17d0:	b112      	cbz	r2, 17d8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    17d2:	6001      	str	r1, [r0, #0]
    17d4:	2001      	movs	r0, #1
    17d6:	4770      	bx	lr
    17d8:	2000      	movs	r0, #0
    17da:	4770      	bx	lr
    17dc:	200014d0 	.word	0x200014d0
    17e0:	20000358 	.word	0x20000358

000017e4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    17e4:	4909      	ldr	r1, [pc, #36]	; (180c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    17e6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    17e8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    17ec:	3bff      	subs	r3, #255	; 0xff
    17ee:	d002      	beq.n	17f6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    17f0:	2100      	movs	r1, #0
    17f2:	6001      	str	r1, [r0, #0]
    17f4:	e007      	b.n	1806 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    17f6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    17fa:	4904      	ldr	r1, [pc, #16]	; (180c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    17fc:	2a01      	cmp	r2, #1
    17fe:	d002      	beq.n	1806 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1800:	6001      	str	r1, [r0, #0]
    1802:	2001      	movs	r0, #1
    1804:	4770      	bx	lr
    1806:	2000      	movs	r0, #0
    1808:	4770      	bx	lr
    180a:	0000      	.short	0x0000
    180c:	200014d0 	.word	0x200014d0

00001810 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1810:	4901      	ldr	r1, [pc, #4]	; (1818 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1812:	8008      	strh	r0, [r1, #0]
    1814:	4770      	bx	lr
    1816:	0000      	.short	0x0000
    1818:	20000358 	.word	0x20000358

0000181c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    181c:	4905      	ldr	r1, [pc, #20]	; (1834 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    181e:	2000      	movs	r0, #0
    1820:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1824:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1828:	8488      	strh	r0, [r1, #36]	; 0x24
    182a:	4903      	ldr	r1, [pc, #12]	; (1838 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    182c:	8008      	strh	r0, [r1, #0]
    182e:	8048      	strh	r0, [r1, #2]
    1830:	4770      	bx	lr
    1832:	0000      	.short	0x0000
    1834:	200014d0 	.word	0x200014d0
    1838:	20000358 	.word	0x20000358
    183c:	4905      	ldr	r1, [pc, #20]	; (1854 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    183e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1840:	4282      	cmp	r2, r0
    1842:	d105      	bne.n	1850 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1844:	2000      	movs	r0, #0
    1846:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    184a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    184e:	8488      	strh	r0, [r1, #36]	; 0x24
    1850:	4770      	bx	lr
    1852:	0000      	.short	0x0000
    1854:	200014d0 	.word	0x200014d0

00001858 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1858:	4a0a      	ldr	r2, [pc, #40]	; (1884 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    185a:	b110      	cbz	r0, 1862 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    185c:	2801      	cmp	r0, #1
    185e:	d007      	beq.n	1870 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1860:	e00e      	b.n	1880 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1862:	7850      	ldrb	r0, [r2, #1]
    1864:	b160      	cbz	r0, 1880 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1866:	f8d2 0002 	ldr.w	r0, [r2, #2]
    186a:	6008      	str	r0, [r1, #0]
    186c:	88d0      	ldrh	r0, [r2, #6]
    186e:	e004      	b.n	187a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1870:	7810      	ldrb	r0, [r2, #0]
    1872:	b128      	cbz	r0, 1880 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1874:	6890      	ldr	r0, [r2, #8]
    1876:	6008      	str	r0, [r1, #0]
    1878:	8990      	ldrh	r0, [r2, #12]
    187a:	8088      	strh	r0, [r1, #4]
    187c:	2001      	movs	r0, #1
    187e:	4770      	bx	lr
    1880:	2000      	movs	r0, #0
    1882:	4770      	bx	lr
    1884:	20000366 	.word	0x20000366

00001888 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1888:	4a08      	ldr	r2, [pc, #32]	; (18ac <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    188a:	2301      	movs	r3, #1
    188c:	b138      	cbz	r0, 189e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    188e:	2801      	cmp	r0, #1
    1890:	d104      	bne.n	189c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1892:	7013      	strb	r3, [r2, #0]
    1894:	6808      	ldr	r0, [r1, #0]
    1896:	6090      	str	r0, [r2, #8]
    1898:	8888      	ldrh	r0, [r1, #4]
    189a:	8190      	strh	r0, [r2, #12]
    189c:	4770      	bx	lr
    189e:	7053      	strb	r3, [r2, #1]
    18a0:	6808      	ldr	r0, [r1, #0]
    18a2:	f8c2 0002 	str.w	r0, [r2, #2]
    18a6:	8888      	ldrh	r0, [r1, #4]
    18a8:	80d0      	strh	r0, [r2, #6]
    18aa:	4770      	bx	lr
    18ac:	20000366 	.word	0x20000366

000018b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    18b0:	4906      	ldr	r1, [pc, #24]	; (18cc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    18b2:	b110      	cbz	r0, 18ba <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    18b4:	2801      	cmp	r0, #1
    18b6:	d002      	beq.n	18be <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    18b8:	e005      	b.n	18c6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18ba:	7848      	ldrb	r0, [r1, #1]
    18bc:	e000      	b.n	18c0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    18be:	7808      	ldrb	r0, [r1, #0]
    18c0:	b108      	cbz	r0, 18c6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    18c2:	2001      	movs	r0, #1
    18c4:	4770      	bx	lr
    18c6:	2000      	movs	r0, #0
    18c8:	4770      	bx	lr
    18ca:	0000      	.short	0x0000
    18cc:	20000366 	.word	0x20000366

000018d0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    18d0:	4901      	ldr	r1, [pc, #4]	; (18d8 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    18d2:	7708      	strb	r0, [r1, #28]
    18d4:	4770      	bx	lr
    18d6:	0000      	.short	0x0000
    18d8:	20000d92 	.word	0x20000d92

000018dc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    18dc:	4801      	ldr	r0, [pc, #4]	; (18e4 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    18de:	7880      	ldrb	r0, [r0, #2]
    18e0:	4770      	bx	lr
    18e2:	0000      	.short	0x0000
    18e4:	20000084 	.word	0x20000084

000018e8 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    18e8:	4801      	ldr	r0, [pc, #4]	; (18f0 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    18ea:	78c0      	ldrb	r0, [r0, #3]
    18ec:	4770      	bx	lr
    18ee:	0000      	.short	0x0000
    18f0:	20000084 	.word	0x20000084

000018f4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    18f4:	b570      	push	{r4, r5, r6, lr}
    18f6:	460c      	mov	r4, r1
    18f8:	4605      	mov	r5, r0
    18fa:	f000 f91f 	bl	1b3c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    18fe:	b118      	cbz	r0, 1908 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    1900:	21d0      	movs	r1, #208	; 0xd0
    1902:	2027      	movs	r0, #39	; 0x27
    1904:	f7ff f844 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1908:	4803      	ldr	r0, [pc, #12]	; (1918 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    190a:	2101      	movs	r1, #1
    190c:	f00c fcdf 	bl	e2ce <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1910:	4802      	ldr	r0, [pc, #8]	; (191c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    1912:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1916:	bd70      	pop	{r4, r5, r6, pc}
    1918:	20000d70 	.word	0x20000d70
    191c:	20000084 	.word	0x20000084

00001920 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    1920:	4901      	ldr	r1, [pc, #4]	; (1928 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    1922:	2001      	movs	r0, #1
    1924:	7148      	strb	r0, [r1, #5]
    1926:	4770      	bx	lr
    1928:	20000084 	.word	0x20000084

0000192c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    192c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1930:	4d5b      	ldr	r5, [pc, #364]	; (1aa0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    1932:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    1934:	782e      	ldrb	r6, [r5, #0]
    1936:	2e00      	cmp	r6, #0
    1938:	d16b      	bne.n	1a12 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    193a:	2a00      	cmp	r2, #0
    193c:	d069      	beq.n	1a12 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    193e:	2b00      	cmp	r3, #0
    1940:	d067      	beq.n	1a12 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1942:	2c00      	cmp	r4, #0
    1944:	d065      	beq.n	1a12 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    1946:	f105 0614 	add.w	r6, r5, #20
    194a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    194e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    1952:	2700      	movs	r7, #0
    1954:	716f      	strb	r7, [r5, #5]
    1956:	712f      	strb	r7, [r5, #4]
    1958:	70af      	strb	r7, [r5, #2]
    195a:	706f      	strb	r7, [r5, #1]
    195c:	70ef      	strb	r7, [r5, #3]
    195e:	81af      	strh	r7, [r5, #12]
    1960:	81ef      	strh	r7, [r5, #14]
    1962:	f000 f92f 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1966:	4606      	mov	r6, r0
    1968:	f000 f926 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    196c:	4604      	mov	r4, r0
    196e:	f006 f9d1 	bl	7d14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    1972:	f005 ff29 	bl	77c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1976:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    197a:	f006 fa4f 	bl	7e1c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    197e:	69e0      	ldr	r0, [r4, #28]
    1980:	f006 fb32 	bl	7fe8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1984:	6960      	ldr	r0, [r4, #20]
    1986:	f006 fb25 	bl	7fd4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    198a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    198e:	f006 fb5b 	bl	8048 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    1992:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    1996:	6840      	ldr	r0, [r0, #4]
    1998:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    199c:	b108      	cbz	r0, 19a2 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    199e:	f006 f933 	bl	7c08 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    19a2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    19a6:	2001      	movs	r0, #1
    19a8:	f006 f872 	bl	7a90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    19ac:	2800      	cmp	r0, #0
    19ae:	d070      	beq.n	1a92 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    19b0:	483c      	ldr	r0, [pc, #240]	; (1aa4 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    19b2:	f006 f8d9 	bl	7b68 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    19b6:	8820      	ldrh	r0, [r4, #0]
    19b8:	f7ff fcc2 	bl	1340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    19bc:	6368      	str	r0, [r5, #52]	; 0x34
    19be:	8820      	ldrh	r0, [r4, #0]
    19c0:	f7ff fca8 	bl	1314 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    19c4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    19c8:	63a8      	str	r0, [r5, #56]	; 0x38
    19ca:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    19ce:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 1aa8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    19d2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    19d6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    19da:	f8c9 2019 	str.w	r2, [r9, #25]
    19de:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    19e2:	f8c9 101d 	str.w	r1, [r9, #29]
    19e6:	f000 f925 	bl	1c34 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    19ea:	4601      	mov	r1, r0
    19ec:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    19ee:	f00c f9c3 	bl	dd78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    19f2:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    19f4:	4281      	cmp	r1, r0
    19f6:	d200      	bcs.n	19fa <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    19f8:	4608      	mov	r0, r1
    19fa:	71a8      	strb	r0, [r5, #6]
    19fc:	46a8      	mov	r8, r5
    19fe:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1a02:	46ba      	mov	sl, r7
    1a04:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    1a06:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    1a0a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    1a0c:	2908      	cmp	r1, #8
    1a0e:	d104      	bne.n	1a1a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    1a10:	e002      	b.n	1a18 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    1a12:	f240 1145 	movw	r1, #325	; 0x145
    1a16:	e040      	b.n	1a9a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    1a18:	2104      	movs	r1, #4
    1a1a:	f00c f9ad 	bl	dd78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    1a1e:	b90f      	cbnz	r7, 1a24 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    1a20:	1d00      	adds	r0, r0, #4
    1a22:	b280      	uxth	r0, r0
    1a24:	4285      	cmp	r5, r0
    1a26:	d200      	bcs.n	1a2a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    1a28:	4628      	mov	r0, r5
    1a2a:	b2c5      	uxtb	r5, r0
    1a2c:	f888 5007 	strb.w	r5, [r8, #7]
    1a30:	f888 5008 	strb.w	r5, [r8, #8]
    1a34:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1a38:	46d0      	mov	r8, sl
    1a3a:	b190      	cbz	r0, 1a62 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    1a3c:	2701      	movs	r7, #1
    1a3e:	f889 7018 	strb.w	r7, [r9, #24]
    1a42:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    1a46:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1a4a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    1a4e:	f00c f8a8 	bl	dba2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1a52:	4603      	mov	r3, r0
    1a54:	462a      	mov	r2, r5
    1a56:	4914      	ldr	r1, [pc, #80]	; (1aa8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a58:	4638      	mov	r0, r7
    1a5a:	f8cd 8000 	str.w	r8, [sp]
    1a5e:	f005 fe1f 	bl	76a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1a62:	2001      	movs	r0, #1
    1a64:	f000 fb46 	bl	20f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf4>
    1a68:	4810      	ldr	r0, [pc, #64]	; (1aac <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    1a6a:	6800      	ldr	r0, [r0, #0]
    1a6c:	2803      	cmp	r0, #3
    1a6e:	d012      	beq.n	1a96 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a70:	280b      	cmp	r0, #11
    1a72:	d010      	beq.n	1a96 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    1a74:	480c      	ldr	r0, [pc, #48]	; (1aa8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a76:	220e      	movs	r2, #14
    1a78:	2100      	movs	r1, #0
    1a7a:	304a      	adds	r0, #74	; 0x4a
    1a7c:	f00f fa6d 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a80:	4809      	ldr	r0, [pc, #36]	; (1aa8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    1a82:	8ab1      	ldrh	r1, [r6, #20]
    1a84:	304a      	adds	r0, #74	; 0x4a
    1a86:	8041      	strh	r1, [r0, #2]
    1a88:	8821      	ldrh	r1, [r4, #0]
    1a8a:	8001      	strh	r1, [r0, #0]
    1a8c:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    1a90:	7101      	strb	r1, [r0, #4]
    1a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a96:	f240 2102 	movw	r1, #514	; 0x202
    1a9a:	2027      	movs	r0, #39	; 0x27
    1a9c:	f7fe ff78 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1aa0:	20000084 	.word	0x20000084
    1aa4:	000022f8 	.word	0x000022f8
    1aa8:	20000d48 	.word	0x20000d48
    1aac:	40001550 	.word	0x40001550

00001ab0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    1ab0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1ab4:	4688      	mov	r8, r1
    1ab6:	4607      	mov	r7, r0
    1ab8:	f000 f884 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1abc:	4c1a      	ldr	r4, [pc, #104]	; (1b28 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    1abe:	4605      	mov	r5, r0
    1ac0:	07b8      	lsls	r0, r7, #30
    1ac2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ac4:	784e      	ldrb	r6, [r1, #1]
    1ac6:	d516      	bpl.n	1af6 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    1ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1aca:	b330      	cbz	r0, 1b1a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    1acc:	8962      	ldrh	r2, [r4, #10]
    1ace:	1cd2      	adds	r2, r2, #3
    1ad0:	f00f f9c9 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ad4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1ad6:	6260      	str	r0, [r4, #36]	; 0x24
    1ad8:	4669      	mov	r1, sp
    1ada:	aa01      	add	r2, sp, #4
    1adc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1ade:	f00b fcaa 	bl	d436 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    1ae2:	9800      	ldr	r0, [sp, #0]
    1ae4:	f00b fc5d 	bl	d3a2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1ae8:	f8c8 0000 	str.w	r0, [r8]
    1aec:	4631      	mov	r1, r6
    1aee:	2201      	movs	r2, #1
    1af0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1af2:	f00b fc0d 	bl	d310 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    1af6:	07f8      	lsls	r0, r7, #31
    1af8:	d00d      	beq.n	1b16 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    1afa:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    1afe:	3518      	adds	r5, #24
    1b00:	1c40      	adds	r0, r0, #1
    1b02:	f141 0100 	adc.w	r1, r1, #0
    1b06:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    1b0a:	f815 0918 	ldrb.w	r0, [r5], #-24
    1b0e:	2801      	cmp	r0, #1
    1b10:	d008      	beq.n	1b24 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    1b12:	2001      	movs	r0, #1
    1b14:	7628      	strb	r0, [r5, #24]
    1b16:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1b1a:	f240 415c 	movw	r1, #1116	; 0x45c
    1b1e:	2027      	movs	r0, #39	; 0x27
    1b20:	f7fe ff36 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b24:	2000      	movs	r0, #0
    1b26:	e7f5      	b.n	1b14 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    1b28:	20000084 	.word	0x20000084

00001b2c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    1b2c:	4802      	ldr	r0, [pc, #8]	; (1b38 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    1b2e:	89c0      	ldrh	r0, [r0, #14]
    1b30:	f3c0 2080 	ubfx	r0, r0, #10, #1
    1b34:	4770      	bx	lr
    1b36:	0000      	.short	0x0000
    1b38:	20000084 	.word	0x20000084

00001b3c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    1b3c:	4804      	ldr	r0, [pc, #16]	; (1b50 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    1b3e:	7800      	ldrb	r0, [r0, #0]
    1b40:	b108      	cbz	r0, 1b46 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    1b42:	200c      	movs	r0, #12
    1b44:	4770      	bx	lr
    1b46:	4903      	ldr	r1, [pc, #12]	; (1b54 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    1b48:	2000      	movs	r0, #0
    1b4a:	7708      	strb	r0, [r1, #28]
    1b4c:	4770      	bx	lr
    1b4e:	0000      	.short	0x0000
    1b50:	20000084 	.word	0x20000084
    1b54:	20000d92 	.word	0x20000d92

00001b58 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    1b58:	480c      	ldr	r0, [pc, #48]	; (1b8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    1b5a:	b510      	push	{r4, lr}
    1b5c:	7801      	ldrb	r1, [r0, #0]
    1b5e:	b149      	cbz	r1, 1b74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    1b60:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    1b64:	7800      	ldrb	r0, [r0, #0]
    1b66:	2802      	cmp	r0, #2
    1b68:	d008      	beq.n	1b7c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    1b6a:	f240 211e 	movw	r1, #542	; 0x21e
    1b6e:	2027      	movs	r0, #39	; 0x27
    1b70:	f7fe ff0e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b78:	f000 b9ca 	b.w	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1b7c:	6848      	ldr	r0, [r1, #4]
    1b7e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    1b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b86:	f005 bff7 	b.w	7b78 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    1b8a:	0000      	.short	0x0000
    1b8c:	20000084 	.word	0x20000084
    1b90:	4608      	mov	r0, r1
    1b92:	2100      	movs	r1, #0
    1b94:	7041      	strb	r1, [r0, #1]
    1b96:	211d      	movs	r1, #29
    1b98:	f800 1b04 	strb.w	r1, [r0], #4
    1b9c:	220e      	movs	r2, #14
    1b9e:	4901      	ldr	r1, [pc, #4]	; (1ba4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    1ba0:	f00f b961 	b.w	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1ba4:	20000da0 	.word	0x20000da0
    1ba8:	4a02      	ldr	r2, [pc, #8]	; (1bb4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    1baa:	8993      	ldrh	r3, [r2, #12]
    1bac:	4303      	orrs	r3, r0
    1bae:	8193      	strh	r3, [r2, #12]
    1bb0:	6952      	ldr	r2, [r2, #20]
    1bb2:	4710      	bx	r2
    1bb4:	20000084 	.word	0x20000084
    1bb8:	4801      	ldr	r0, [pc, #4]	; (1bc0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    1bba:	6840      	ldr	r0, [r0, #4]
    1bbc:	4770      	bx	lr
    1bbe:	0000      	.short	0x0000
    1bc0:	200000c0 	.word	0x200000c0
    1bc4:	4801      	ldr	r0, [pc, #4]	; (1bcc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    1bc6:	6840      	ldr	r0, [r0, #4]
    1bc8:	3080      	adds	r0, #128	; 0x80
    1bca:	4770      	bx	lr
    1bcc:	200000c0 	.word	0x200000c0
    1bd0:	4a01      	ldr	r2, [pc, #4]	; (1bd8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    1bd2:	2100      	movs	r1, #0
    1bd4:	6952      	ldr	r2, [r2, #20]
    1bd6:	4710      	bx	r2
    1bd8:	20000084 	.word	0x20000084
    1bdc:	b570      	push	{r4, r5, r6, lr}
    1bde:	4605      	mov	r5, r0
    1be0:	2901      	cmp	r1, #1
    1be2:	d818      	bhi.n	1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1be4:	4c12      	ldr	r4, [pc, #72]	; (1c30 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    1be6:	69a1      	ldr	r1, [r4, #24]
    1be8:	4788      	blx	r1
    1bea:	b1a0      	cbz	r0, 1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1bec:	7920      	ldrb	r0, [r4, #4]
    1bee:	b990      	cbnz	r0, 1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1bf0:	b9e5      	cbnz	r5, 1c2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1bf2:	f104 0010 	add.w	r0, r4, #16
    1bf6:	7801      	ldrb	r1, [r0, #0]
    1bf8:	06c8      	lsls	r0, r1, #27
    1bfa:	d405      	bmi.n	1c08 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1bfc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1bfe:	7800      	ldrb	r0, [r0, #0]
    1c00:	06c0      	lsls	r0, r0, #27
    1c02:	d401      	bmi.n	1c08 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    1c04:	2001      	movs	r0, #1
    1c06:	e000      	b.n	1c0a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    1c08:	2000      	movs	r0, #0
    1c0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1c0c:	b92a      	cbnz	r2, 1c1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c0e:	8962      	ldrh	r2, [r4, #10]
    1c10:	b11a      	cbz	r2, 1c1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c12:	06c9      	lsls	r1, r1, #27
    1c14:	d401      	bmi.n	1c1a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    1c16:	2001      	movs	r0, #1
    1c18:	bd70      	pop	{r4, r5, r6, pc}
    1c1a:	89a1      	ldrh	r1, [r4, #12]
    1c1c:	078a      	lsls	r2, r1, #30
    1c1e:	d503      	bpl.n	1c28 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    1c20:	6a22      	ldr	r2, [r4, #32]
    1c22:	78d2      	ldrb	r2, [r2, #3]
    1c24:	2a02      	cmp	r2, #2
    1c26:	d001      	beq.n	1c2c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    1c28:	4308      	orrs	r0, r1
    1c2a:	d1f4      	bne.n	1c16 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    1c2c:	2000      	movs	r0, #0
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	20000084 	.word	0x20000084
    1c34:	b510      	push	{r4, lr}
    1c36:	f7ff ffbf 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1c3a:	4604      	mov	r4, r0
    1c3c:	f7ff ffc2 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1c40:	4602      	mov	r2, r0
    1c42:	7f41      	ldrb	r1, [r0, #29]
    1c44:	4816      	ldr	r0, [pc, #88]	; (1ca0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    1c46:	2925      	cmp	r1, #37	; 0x25
    1c48:	d010      	beq.n	1c6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c4a:	2926      	cmp	r1, #38	; 0x26
    1c4c:	d00e      	beq.n	1c6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c4e:	7f92      	ldrb	r2, [r2, #30]
    1c50:	2a25      	cmp	r2, #37	; 0x25
    1c52:	d00b      	beq.n	1c6c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    1c54:	2920      	cmp	r1, #32
    1c56:	d00d      	beq.n	1c74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c58:	2921      	cmp	r1, #33	; 0x21
    1c5a:	d00b      	beq.n	1c74 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    1c5c:	2a23      	cmp	r2, #35	; 0x23
    1c5e:	d00f      	beq.n	1c80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c60:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c64:	2804      	cmp	r0, #4
    1c66:	d100      	bne.n	1c6a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    1c68:	2008      	movs	r0, #8
    1c6a:	bd10      	pop	{r4, pc}
    1c6c:	6840      	ldr	r0, [r0, #4]
    1c6e:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    1c72:	e00e      	b.n	1c92 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    1c74:	2a23      	cmp	r2, #35	; 0x23
    1c76:	d003      	beq.n	1c80 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    1c78:	6840      	ldr	r0, [r0, #4]
    1c7a:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    1c7e:	e005      	b.n	1c8c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    1c80:	6841      	ldr	r1, [r0, #4]
    1c82:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    1c86:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    1c8a:	4008      	ands	r0, r1
    1c8c:	f00b ff7f 	bl	db8e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    1c90:	4601      	mov	r1, r0
    1c92:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1c9a:	f00b bf90 	b.w	dbbe <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    1c9e:	0000      	.short	0x0000
    1ca0:	200000c0 	.word	0x200000c0
    1ca4:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1ca8:	468b      	mov	fp, r1
    1caa:	4681      	mov	r9, r0
    1cac:	f7ff ff8a 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1cb0:	2600      	movs	r6, #0
    1cb2:	4c66      	ldr	r4, [pc, #408]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1cb4:	4607      	mov	r7, r0
    1cb6:	f88d 6008 	strb.w	r6, [sp, #8]
    1cba:	9603      	str	r6, [sp, #12]
    1cbc:	9601      	str	r6, [sp, #4]
    1cbe:	7820      	ldrb	r0, [r4, #0]
    1cc0:	4635      	mov	r5, r6
    1cc2:	2802      	cmp	r0, #2
    1cc4:	d004      	beq.n	1cd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    1cc6:	f240 41df 	movw	r1, #1247	; 0x4df
    1cca:	2027      	movs	r0, #39	; 0x27
    1ccc:	f7fe fe60 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1cd0:	7ba0      	ldrb	r0, [r4, #14]
    1cd2:	0640      	lsls	r0, r0, #25
    1cd4:	d406      	bmi.n	1ce4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    1cd6:	2040      	movs	r0, #64	; 0x40
    1cd8:	f7ff ff7a 	bl	1bd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1cdc:	89e0      	ldrh	r0, [r4, #14]
    1cde:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1ce2:	81e0      	strh	r0, [r4, #14]
    1ce4:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    1ce8:	f1b9 0f00 	cmp.w	r9, #0
    1cec:	d03a      	beq.n	1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1cee:	b180      	cbz	r0, 1d12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1cf0:	f005 fda4 	bl	783c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1cf4:	f005 fd7e 	bl	77f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1cf8:	b958      	cbnz	r0, 1d12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1cfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1cfc:	7841      	ldrb	r1, [r0, #1]
    1cfe:	b141      	cbz	r1, 1d12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d00:	7800      	ldrb	r0, [r0, #0]
    1d02:	7e39      	ldrb	r1, [r7, #24]
    1d04:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d08:	4288      	cmp	r0, r1
    1d0a:	d102      	bne.n	1d12 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    1d0c:	2001      	movs	r0, #1
    1d0e:	7060      	strb	r0, [r4, #1]
    1d10:	e097      	b.n	1e42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf6>
    1d12:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d14:	7841      	ldrb	r1, [r0, #1]
    1d16:	8161      	strh	r1, [r4, #10]
    1d18:	b121      	cbz	r1, 1d24 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    1d1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1d1c:	f00b fc61 	bl	d5e2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1d20:	62a0      	str	r0, [r4, #40]	; 0x28
    1d22:	e000      	b.n	1d26 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    1d24:	62a5      	str	r5, [r4, #40]	; 0x28
    1d26:	89e0      	ldrh	r0, [r4, #14]
    1d28:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1d2c:	81e0      	strh	r0, [r4, #14]
    1d2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d30:	7df9      	ldrb	r1, [r7, #23]
    1d32:	7800      	ldrb	r0, [r0, #0]
    1d34:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1d38:	4288      	cmp	r0, r1
    1d3a:	d007      	beq.n	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1d3c:	a803      	add	r0, sp, #12
    1d3e:	f000 f98b 	bl	2058 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x58>
    1d42:	89e0      	ldrh	r0, [r4, #14]
    1d44:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1d48:	81e0      	strh	r0, [r4, #14]
    1d4a:	e000      	b.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d4c:	2601      	movs	r6, #1
    1d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1d50:	7e39      	ldrb	r1, [r7, #24]
    1d52:	7800      	ldrb	r0, [r0, #0]
    1d54:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1d58:	4288      	cmp	r0, r1
    1d5a:	d10d      	bne.n	1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d5c:	a802      	add	r0, sp, #8
    1d5e:	f000 f931 	bl	1fc4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x278>
    1d62:	e009      	b.n	1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d64:	b108      	cbz	r0, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d66:	f005 fd63 	bl	7830 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1d6a:	78a0      	ldrb	r0, [r4, #2]
    1d6c:	1c40      	adds	r0, r0, #1
    1d6e:	70a0      	strb	r0, [r4, #2]
    1d70:	89e0      	ldrh	r0, [r4, #14]
    1d72:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1d76:	81e0      	strh	r0, [r4, #14]
    1d78:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1d7c:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    1d80:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1d84:	b190      	cbz	r0, 1dac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x60>
    1d86:	f7ff ff17 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1d8a:	4931      	ldr	r1, [pc, #196]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1d8c:	760d      	strb	r5, [r1, #24]
    1d8e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1d92:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1d96:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1d9a:	f00b ff02 	bl	dba2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1d9e:	4603      	mov	r3, r0
    1da0:	22fb      	movs	r2, #251	; 0xfb
    1da2:	492b      	ldr	r1, [pc, #172]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1da4:	4628      	mov	r0, r5
    1da6:	9500      	str	r5, [sp, #0]
    1da8:	f005 fc7a 	bl	76a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1dac:	f04f 0800 	mov.w	r8, #0
    1db0:	f1bb 0f00 	cmp.w	fp, #0
    1db4:	d104      	bne.n	1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1db6:	78a1      	ldrb	r1, [r4, #2]
    1db8:	2001      	movs	r0, #1
    1dba:	f7ff ff0f 	bl	1bdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1dbe:	b120      	cbz	r0, 1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dc0:	f006 f8f4 	bl	7fac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1dc4:	f04f 0801 	mov.w	r8, #1
    1dc8:	e002      	b.n	1dd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1dca:	2000      	movs	r0, #0
    1dcc:	f000 f9d0 	bl	2170 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x170>
    1dd0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1dd4:	b118      	cbz	r0, 1dde <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x92>
    1dd6:	a901      	add	r1, sp, #4
    1dd8:	2002      	movs	r0, #2
    1dda:	f7ff fe69 	bl	1ab0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    1dde:	481c      	ldr	r0, [pc, #112]	; (1e50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x104>)
    1de0:	8aba      	ldrh	r2, [r7, #20]
    1de2:	304a      	adds	r0, #74	; 0x4a
    1de4:	b13e      	cbz	r6, 1df6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1de6:	b91a      	cbnz	r2, 1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1de8:	88c2      	ldrh	r2, [r0, #6]
    1dea:	b90a      	cbnz	r2, 1df0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1dec:	8902      	ldrh	r2, [r0, #8]
    1dee:	b112      	cbz	r2, 1df6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1df0:	8942      	ldrh	r2, [r0, #10]
    1df2:	1c52      	adds	r2, r2, #1
    1df4:	8142      	strh	r2, [r0, #10]
    1df6:	f1b9 0f00 	cmp.w	r9, #0
    1dfa:	d004      	beq.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dfc:	88c1      	ldrh	r1, [r0, #6]
    1dfe:	1c49      	adds	r1, r1, #1
    1e00:	80c1      	strh	r1, [r0, #6]
    1e02:	70a5      	strb	r5, [r4, #2]
    1e04:	e002      	b.n	1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1e06:	8901      	ldrh	r1, [r0, #8]
    1e08:	1c49      	adds	r1, r1, #1
    1e0a:	8101      	strh	r1, [r0, #8]
    1e0c:	480f      	ldr	r0, [pc, #60]	; (1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>)
    1e0e:	303c      	adds	r0, #60	; 0x3c
    1e10:	f001 f9f2 	bl	31f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1e14:	9803      	ldr	r0, [sp, #12]
    1e16:	b140      	cbz	r0, 1e2a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xde>
    1e18:	f00b fac3 	bl	d3a2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1e1c:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e20:	1c40      	adds	r0, r0, #1
    1e22:	7205      	strb	r5, [r0, #8]
    1e24:	2208      	movs	r2, #8
    1e26:	f00c fad9 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e2a:	9801      	ldr	r0, [sp, #4]
    1e2c:	b130      	cbz	r0, 1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1e2e:	f8da 1004 	ldr.w	r1, [sl, #4]
    1e32:	7205      	strb	r5, [r0, #8]
    1e34:	2210      	movs	r2, #16
    1e36:	9801      	ldr	r0, [sp, #4]
    1e38:	f00c fad0 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1e3c:	f1b8 0f00 	cmp.w	r8, #0
    1e40:	d001      	beq.n	1e46 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfa>
    1e42:	f000 f865 	bl	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1e46:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1e4a:	0000      	.short	0x0000
    1e4c:	20000084 	.word	0x20000084
    1e50:	20000d48 	.word	0x20000d48
    1e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e58:	4688      	mov	r8, r1
    1e5a:	4681      	mov	r9, r0
    1e5c:	f7ff feb2 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1e60:	4d29      	ldr	r5, [pc, #164]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1e62:	4604      	mov	r4, r0
    1e64:	7828      	ldrb	r0, [r5, #0]
    1e66:	2801      	cmp	r0, #1
    1e68:	d004      	beq.n	1e74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x128>
    1e6a:	f240 416b 	movw	r1, #1131	; 0x46b
    1e6e:	2027      	movs	r0, #39	; 0x27
    1e70:	f7fe fd8e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e74:	7c20      	ldrb	r0, [r4, #16]
    1e76:	2700      	movs	r7, #0
    1e78:	2601      	movs	r6, #1
    1e7a:	b128      	cbz	r0, 1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e7c:	7427      	strb	r7, [r4, #16]
    1e7e:	2100      	movs	r1, #0
    1e80:	2004      	movs	r0, #4
    1e82:	f7ff fe91 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1e86:	74a6      	strb	r6, [r4, #18]
    1e88:	6a29      	ldr	r1, [r5, #32]
    1e8a:	7808      	ldrb	r0, [r1, #0]
    1e8c:	43c0      	mvns	r0, r0
    1e8e:	0780      	lsls	r0, r0, #30
    1e90:	d109      	bne.n	1ea6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15a>
    1e92:	7da0      	ldrb	r0, [r4, #22]
    1e94:	bb88      	cbnz	r0, 1efa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1e96:	2002      	movs	r0, #2
    1e98:	f7ff fe86 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1e9c:	6a28      	ldr	r0, [r5, #32]
    1e9e:	7800      	ldrb	r0, [r0, #0]
    1ea0:	43c0      	mvns	r0, r0
    1ea2:	0780      	lsls	r0, r0, #30
    1ea4:	d029      	beq.n	1efa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1ea6:	6a28      	ldr	r0, [r5, #32]
    1ea8:	7840      	ldrb	r0, [r0, #1]
    1eaa:	b110      	cbz	r0, 1eb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x166>
    1eac:	2002      	movs	r0, #2
    1eae:	75a0      	strb	r0, [r4, #22]
    1eb0:	e000      	b.n	1eb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x168>
    1eb2:	75a6      	strb	r6, [r4, #22]
    1eb4:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1eb8:	b198      	cbz	r0, 1ee2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x196>
    1eba:	f7ff fe7d 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    1ebe:	4913      	ldr	r1, [pc, #76]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1ec0:	7a2d      	ldrb	r5, [r5, #8]
    1ec2:	760e      	strb	r6, [r1, #24]
    1ec4:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1ec8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1ecc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1ed0:	f00b fe67 	bl	dba2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    1ed4:	4603      	mov	r3, r0
    1ed6:	462a      	mov	r2, r5
    1ed8:	490c      	ldr	r1, [pc, #48]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1eda:	4630      	mov	r0, r6
    1edc:	9700      	str	r7, [sp, #0]
    1ede:	f005 fbdf 	bl	76a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ee2:	ea38 0009 	bics.w	r0, r8, r9
    1ee6:	d004      	beq.n	1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ee8:	2100      	movs	r1, #0
    1eea:	4608      	mov	r0, r1
    1eec:	f7ff fe76 	bl	1bdc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    1ef0:	b128      	cbz	r0, 1efe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b2>
    1ef2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1ef6:	f000 b80b 	b.w	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1efa:	2003      	movs	r0, #3
    1efc:	e7d7      	b.n	1eae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x162>
    1efe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f02:	2000      	movs	r0, #0
    1f04:	f000 b8f6 	b.w	20f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf4>
    1f08:	20000084 	.word	0x20000084
    1f0c:	20000d48 	.word	0x20000d48
    1f10:	b510      	push	{r4, lr}
    1f12:	f005 fd33 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1f16:	f005 fc57 	bl	77c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1f1a:	4c0d      	ldr	r4, [pc, #52]	; (1f50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x204>)
    1f1c:	89e0      	ldrh	r0, [r4, #14]
    1f1e:	f7ff fe57 	bl	1bd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    1f22:	480c      	ldr	r0, [pc, #48]	; (1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>)
    1f24:	7f00      	ldrb	r0, [r0, #28]
    1f26:	b158      	cbz	r0, 1f40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f4>
    1f28:	490a      	ldr	r1, [pc, #40]	; (1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>)
    1f2a:	220e      	movs	r2, #14
    1f2c:	f101 000e 	add.w	r0, r1, #14
    1f30:	f00e ff99 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1f34:	4807      	ldr	r0, [pc, #28]	; (1f54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>)
    1f36:	2202      	movs	r2, #2
    1f38:	4907      	ldr	r1, [pc, #28]	; (1f58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20c>)
    1f3a:	301d      	adds	r0, #29
    1f3c:	f00c fa62 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1f40:	69e2      	ldr	r2, [r4, #28]
    1f42:	7921      	ldrb	r1, [r4, #4]
    1f44:	7860      	ldrb	r0, [r4, #1]
    1f46:	4790      	blx	r2
    1f48:	2000      	movs	r0, #0
    1f4a:	7020      	strb	r0, [r4, #0]
    1f4c:	bd10      	pop	{r4, pc}
    1f4e:	0000      	.short	0x0000
    1f50:	20000084 	.word	0x20000084
    1f54:	20000d92 	.word	0x20000d92
    1f58:	00001b91 	.word	0x00001b91
    1f5c:	4808      	ldr	r0, [pc, #32]	; (1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f5e:	b510      	push	{r4, lr}
    1f60:	7800      	ldrb	r0, [r0, #0]
    1f62:	2802      	cmp	r0, #2
    1f64:	d004      	beq.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1f66:	f240 2149 	movw	r1, #585	; 0x249
    1f6a:	2027      	movs	r0, #39	; 0x27
    1f6c:	f7fe fd10 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f70:	4904      	ldr	r1, [pc, #16]	; (1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f72:	2001      	movs	r0, #1
    1f74:	7308      	strb	r0, [r1, #12]
    1f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f7a:	f7ff bfc9 	b.w	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1f7e:	0000      	.short	0x0000
    1f80:	20000084 	.word	0x20000084
    1f84:	20000d92 	.word	0x20000d92
    1f88:	b430      	push	{r4, r5}
    1f8a:	4604      	mov	r4, r0
    1f8c:	480c      	ldr	r0, [pc, #48]	; (1fc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x274>)
    1f8e:	7a00      	ldrb	r0, [r0, #8]
    1f90:	b10b      	cbz	r3, 1f96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24a>
    1f92:	1d00      	adds	r0, r0, #4
    1f94:	b2c0      	uxtb	r0, r0
    1f96:	b93a      	cbnz	r2, 1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1f98:	28ff      	cmp	r0, #255	; 0xff
    1f9a:	d105      	bne.n	1fa8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25c>
    1f9c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1fa0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1fa4:	429a      	cmp	r2, r3
    1fa6:	d009      	beq.n	1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>
    1fa8:	b121      	cbz	r1, 1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    1faa:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1fae:	bc30      	pop	{r4, r5}
    1fb0:	f006 b820 	b.w	7ff4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1fb4:	20ff      	movs	r0, #255	; 0xff
    1fb6:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1fba:	e7f8      	b.n	1fae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x262>
    1fbc:	bc30      	pop	{r4, r5}
    1fbe:	4770      	bx	lr
    1fc0:	20000084 	.word	0x20000084
    1fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc8:	4607      	mov	r7, r0
    1fca:	f7ff fdfb 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    1fce:	4c21      	ldr	r4, [pc, #132]	; (2054 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x54>)
    1fd0:	4605      	mov	r5, r0
    1fd2:	2601      	movs	r6, #1
    1fd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1fd6:	7808      	ldrb	r0, [r1, #0]
    1fd8:	f000 0003 	and.w	r0, r0, #3
    1fdc:	2801      	cmp	r0, #1
    1fde:	d00c      	beq.n	1ffa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ae>
    1fe0:	2802      	cmp	r0, #2
    1fe2:	d00a      	beq.n	1ffa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2ae>
    1fe4:	2803      	cmp	r0, #3
    1fe6:	d11b      	bne.n	2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
    1fe8:	742e      	strb	r6, [r5, #16]
    1fea:	89e0      	ldrh	r0, [r4, #14]
    1fec:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1ff0:	81e0      	strh	r0, [r4, #14]
    1ff2:	2001      	movs	r0, #1
    1ff4:	f7ff fdd8 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    1ff8:	e012      	b.n	2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
    1ffa:	7848      	ldrb	r0, [r1, #1]
    1ffc:	b180      	cbz	r0, 2020 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20>
    1ffe:	89e1      	ldrh	r1, [r4, #14]
    2000:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2004:	81e1      	strh	r1, [r4, #14]
    2006:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2008:	2900      	cmp	r1, #0
    200a:	d018      	beq.n	203e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e>
    200c:	28fb      	cmp	r0, #251	; 0xfb
    200e:	d818      	bhi.n	2042 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x42>
    2010:	7960      	ldrb	r0, [r4, #5]
    2012:	b120      	cbz	r0, 201e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1e>
    2014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2018:	2020      	movs	r0, #32
    201a:	f7ff bdd9 	b.w	1bd0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    201e:	703e      	strb	r6, [r7, #0]
    2020:	7e28      	ldrb	r0, [r5, #24]
    2022:	2801      	cmp	r0, #1
    2024:	d012      	beq.n	204c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x4c>
    2026:	762e      	strb	r6, [r5, #24]
    2028:	6a60      	ldr	r0, [r4, #36]	; 0x24
    202a:	7840      	ldrb	r0, [r0, #1]
    202c:	2800      	cmp	r0, #0
    202e:	d006      	beq.n	203e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e>
    2030:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2034:	1c40      	adds	r0, r0, #1
    2036:	f141 0100 	adc.w	r1, r1, #0
    203a:	e9c5 0100 	strd	r0, r1, [r5]
    203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2042:	7920      	ldrb	r0, [r4, #4]
    2044:	f040 0010 	orr.w	r0, r0, #16
    2048:	7120      	strb	r0, [r4, #4]
    204a:	e7f8      	b.n	203e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x3e>
    204c:	2000      	movs	r0, #0
    204e:	7628      	strb	r0, [r5, #24]
    2050:	e7ea      	b.n	2028 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x28>
    2052:	0000      	.short	0x0000
    2054:	20000084 	.word	0x20000084
    2058:	b570      	push	{r4, r5, r6, lr}
    205a:	4605      	mov	r5, r0
    205c:	f7ff fdb2 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2060:	4604      	mov	r4, r0
    2062:	7d80      	ldrb	r0, [r0, #22]
    2064:	2800      	cmp	r0, #0
    2066:	d02d      	beq.n	20c4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc4>
    2068:	2802      	cmp	r0, #2
    206a:	d10c      	bne.n	2086 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x86>
    206c:	481b      	ldr	r0, [pc, #108]	; (20dc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xdc>)
    206e:	4629      	mov	r1, r5
    2070:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2072:	f00b f925 	bl	d2c0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2076:	b330      	cbz	r0, 20c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xc6>
    2078:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    207c:	1c40      	adds	r0, r0, #1
    207e:	f141 0100 	adc.w	r1, r1, #0
    2082:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2086:	2500      	movs	r5, #0
    2088:	75a5      	strb	r5, [r4, #22]
    208a:	7ca0      	ldrb	r0, [r4, #18]
    208c:	b120      	cbz	r0, 2098 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x98>
    208e:	74a5      	strb	r5, [r4, #18]
    2090:	2100      	movs	r1, #0
    2092:	2010      	movs	r0, #16
    2094:	f7ff fd88 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2098:	7c60      	ldrb	r0, [r4, #17]
    209a:	b170      	cbz	r0, 20ba <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xba>
    209c:	7465      	strb	r5, [r4, #17]
    209e:	f7ff fb65 	bl	176c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    20a2:	b198      	cbz	r0, 20cc <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xcc>
    20a4:	2100      	movs	r1, #0
    20a6:	2008      	movs	r0, #8
    20a8:	f7ff fd7e 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    20ac:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    20b0:	1c40      	adds	r0, r0, #1
    20b2:	f141 0100 	adc.w	r1, r1, #0
    20b6:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    20ba:	7de0      	ldrb	r0, [r4, #23]
    20bc:	2801      	cmp	r0, #1
    20be:	d00a      	beq.n	20d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd6>
    20c0:	2001      	movs	r0, #1
    20c2:	75e0      	strb	r0, [r4, #23]
    20c4:	bd70      	pop	{r4, r5, r6, pc}
    20c6:	f240 31da 	movw	r1, #986	; 0x3da
    20ca:	e001      	b.n	20d0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xd0>
    20cc:	f240 31f1 	movw	r1, #1009	; 0x3f1
    20d0:	2027      	movs	r0, #39	; 0x27
    20d2:	f7fe fc5d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20d6:	75e5      	strb	r5, [r4, #23]
    20d8:	bd70      	pop	{r4, r5, r6, pc}
    20da:	0000      	.short	0x0000
    20dc:	20000084 	.word	0x20000084
    20e0:	4803      	ldr	r0, [pc, #12]	; (20f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xf0>)
    20e2:	7800      	ldrb	r0, [r0, #0]
    20e4:	2800      	cmp	r0, #0
    20e6:	d001      	beq.n	20ec <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0xec>
    20e8:	f7ff bf12 	b.w	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    20ec:	4770      	bx	lr
    20ee:	0000      	.short	0x0000
    20f0:	20000084 	.word	0x20000084
    20f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20f8:	4606      	mov	r6, r0
    20fa:	f7ff fd5d 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    20fe:	4680      	mov	r8, r0
    2100:	f7ff fd60 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2104:	4c18      	ldr	r4, [pc, #96]	; (2168 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x168>)
    2106:	4605      	mov	r5, r0
    2108:	4632      	mov	r2, r6
    210a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    210c:	6260      	str	r0, [r4, #36]	; 0x24
    210e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2112:	2101      	movs	r1, #1
    2114:	4640      	mov	r0, r8
    2116:	f7ff ff37 	bl	1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    211a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    211e:	2700      	movs	r7, #0
    2120:	b170      	cbz	r0, 2140 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x140>
    2122:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2124:	f005 fe9c 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2128:	4810      	ldr	r0, [pc, #64]	; (216c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x16c>)
    212a:	2101      	movs	r1, #1
    212c:	7601      	strb	r1, [r0, #24]
    212e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2132:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2136:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2138:	6a60      	ldr	r0, [r4, #36]	; 0x24
    213a:	f005 fb03 	bl	7744 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    213e:	e004      	b.n	214a <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x14a>
    2140:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2142:	f005 fe8d 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2146:	f005 fb3f 	bl	77c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    214a:	b916      	cbnz	r6, 2152 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x152>
    214c:	4638      	mov	r0, r7
    214e:	f005 fd37 	bl	7bc0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2152:	2100      	movs	r1, #0
    2154:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2158:	4608      	mov	r0, r1
    215a:	f005 ff09 	bl	7f70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    215e:	2002      	movs	r0, #2
    2160:	7020      	strb	r0, [r4, #0]
    2162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2166:	0000      	.short	0x0000
    2168:	20000084 	.word	0x20000084
    216c:	20000d48 	.word	0x20000d48
    2170:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2174:	4604      	mov	r4, r0
    2176:	f7ff fd25 	bl	1bc4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    217a:	4605      	mov	r5, r0
    217c:	f7ff fd1c 	bl	1bb8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2180:	2700      	movs	r7, #0
    2182:	f88d 7000 	strb.w	r7, [sp]
    2186:	4606      	mov	r6, r0
    2188:	f8df 9164 	ldr.w	r9, [pc, #356]	; 22f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f0>
    218c:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2190:	4622      	mov	r2, r4
    2192:	4639      	mov	r1, r7
    2194:	f7ff fef8 	bl	1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2198:	7da8      	ldrb	r0, [r5, #22]
    219a:	f04f 0801 	mov.w	r8, #1
    219e:	f1a9 0420 	sub.w	r4, r9, #32
    21a2:	b140      	cbz	r0, 21b6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1b6>
    21a4:	2801      	cmp	r0, #1
    21a6:	d020      	beq.n	21ea <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ea>
    21a8:	2802      	cmp	r0, #2
    21aa:	d02f      	beq.n	220c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x20c>
    21ac:	2803      	cmp	r0, #3
    21ae:	d03b      	beq.n	2228 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x228>
    21b0:	f240 21fb 	movw	r1, #763	; 0x2fb
    21b4:	e057      	b.n	2266 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x266>
    21b6:	79a0      	ldrb	r0, [r4, #6]
    21b8:	2150      	movs	r1, #80	; 0x50
    21ba:	f8ad 0004 	strh.w	r0, [sp, #4]
    21be:	5388      	strh	r0, [r1, r6]
    21c0:	4648      	mov	r0, r9
    21c2:	f7ff fafd 	bl	17c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    21c6:	b130      	cbz	r0, 21d6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1d6>
    21c8:	2080      	movs	r0, #128	; 0x80
    21ca:	6a21      	ldr	r1, [r4, #32]
    21cc:	f7ff fcec 	bl	1ba8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    21d0:	f885 8011 	strb.w	r8, [r5, #17]
    21d4:	e02c      	b.n	2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    21d6:	466a      	mov	r2, sp
    21d8:	a901      	add	r1, sp, #4
    21da:	6b60      	ldr	r0, [r4, #52]	; 0x34
    21dc:	f00b fcf9 	bl	dbd2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    21e0:	6220      	str	r0, [r4, #32]
    21e2:	b110      	cbz	r0, 21ea <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1ea>
    21e4:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    21e8:	b111      	cbz	r1, 21f0 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x1f0>
    21ea:	4842      	ldr	r0, [pc, #264]	; (22f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f4>)
    21ec:	6220      	str	r0, [r4, #32]
    21ee:	e01f      	b.n	2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    21f0:	f89d 1000 	ldrb.w	r1, [sp]
    21f4:	b921      	cbnz	r1, 2200 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x200>
    21f6:	8007      	strh	r7, [r0, #0]
    21f8:	7087      	strb	r7, [r0, #2]
    21fa:	2101      	movs	r1, #1
    21fc:	f00c f867 	bl	e2ce <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2200:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2204:	6a20      	ldr	r0, [r4, #32]
    2206:	f00b ffea 	bl	e1de <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    220a:	e011      	b.n	2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    220c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2210:	f8ad 0004 	strh.w	r0, [sp, #4]
    2214:	466a      	mov	r2, sp
    2216:	a901      	add	r1, sp, #4
    2218:	6b60      	ldr	r0, [r4, #52]	; 0x34
    221a:	f00b fcda 	bl	dbd2 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    221e:	6220      	str	r0, [r4, #32]
    2220:	b930      	cbnz	r0, 2230 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x230>
    2222:	f240 21e5 	movw	r1, #741	; 0x2e5
    2226:	e01e      	b.n	2266 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x266>
    2228:	4648      	mov	r0, r9
    222a:	f7ff fac9 	bl	17c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    222e:	b1c0      	cbz	r0, 2262 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x262>
    2230:	6a20      	ldr	r0, [r4, #32]
    2232:	2308      	movs	r3, #8
    2234:	7801      	ldrb	r1, [r0, #0]
    2236:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    223a:	7001      	strb	r1, [r0, #0]
    223c:	7dea      	ldrb	r2, [r5, #23]
    223e:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2242:	4311      	orrs	r1, r2
    2244:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2248:	7001      	strb	r1, [r0, #0]
    224a:	7e2a      	ldrb	r2, [r5, #24]
    224c:	2304      	movs	r3, #4
    224e:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2252:	4311      	orrs	r1, r2
    2254:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2258:	7001      	strb	r1, [r0, #0]
    225a:	43c9      	mvns	r1, r1
    225c:	0789      	lsls	r1, r1, #30
    225e:	d005      	beq.n	226c <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x26c>
    2260:	e007      	b.n	2272 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x272>
    2262:	f240 21ee 	movw	r1, #750	; 0x2ee
    2266:	2027      	movs	r0, #39	; 0x27
    2268:	f7fe fb92 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    226c:	78c0      	ldrb	r0, [r0, #3]
    226e:	2802      	cmp	r0, #2
    2270:	d00f      	beq.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    2272:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2274:	f00b f922 	bl	d4bc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2278:	b108      	cbz	r0, 227e <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x27e>
    227a:	2101      	movs	r1, #1
    227c:	e00a      	b.n	2294 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x294>
    227e:	6a20      	ldr	r0, [r4, #32]
    2280:	7800      	ldrb	r0, [r0, #0]
    2282:	43c0      	mvns	r0, r0
    2284:	0780      	lsls	r0, r0, #30
    2286:	d004      	beq.n	2292 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x292>
    2288:	f7ff fa58 	bl	173c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    228c:	f080 0101 	eor.w	r1, r0, #1
    2290:	e000      	b.n	2294 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x294>
    2292:	2100      	movs	r1, #0
    2294:	6a20      	ldr	r0, [r4, #32]
    2296:	7802      	ldrb	r2, [r0, #0]
    2298:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    229c:	7001      	strb	r1, [r0, #0]
    229e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    22a2:	b181      	cbz	r1, 22c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c6>
    22a4:	7841      	ldrb	r1, [r0, #1]
    22a6:	b171      	cbz	r1, 22c6 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2c6>
    22a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22aa:	f005 fdd9 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ae:	4811      	ldr	r0, [pc, #68]	; (22f4 <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2f4>)
    22b0:	3828      	subs	r0, #40	; 0x28
    22b2:	7607      	strb	r7, [r0, #24]
    22b4:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    22b8:	e9c0 1204 	strd	r1, r2, [r0, #16]
    22bc:	6a21      	ldr	r1, [r4, #32]
    22be:	6b20      	ldr	r0, [r4, #48]	; 0x30
    22c0:	f005 fa40 	bl	7744 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    22c4:	e003      	b.n	22ce <CONFIG_PM_PARTITION_SIZE_SETTINGS_STORAGE+0x2ce>
    22c6:	f005 fdcb 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    22ca:	f005 fa7d 	bl	77c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    22ce:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    22d2:	2101      	movs	r1, #1
    22d4:	2000      	movs	r0, #0
    22d6:	f005 fe4b 	bl	7f70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    22da:	f884 8003 	strb.w	r8, [r4, #3]
    22de:	6a21      	ldr	r1, [r4, #32]
    22e0:	880a      	ldrh	r2, [r1, #0]
    22e2:	8222      	strh	r2, [r4, #16]
    22e4:	7889      	ldrb	r1, [r1, #2]
    22e6:	74a1      	strb	r1, [r4, #18]
    22e8:	f884 8000 	strb.w	r8, [r4]
    22ec:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    22f0:	200000a4 	.word	0x200000a4
    22f4:	20000d70 	.word	0x20000d70
    22f8:	00001f5d 	.word	0x00001f5d
    22fc:	00001ca5 	.word	0x00001ca5
    2300:	00001e55 	.word	0x00001e55
    2304:	000020e1 	.word	0x000020e1

00002308 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2308:	4800      	ldr	r0, [pc, #0]	; (230c <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    230a:	4770      	bx	lr
    230c:	20001680 	.word	0x20001680

00002310 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2310:	4904      	ldr	r1, [pc, #16]	; (2324 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2312:	784a      	ldrb	r2, [r1, #1]
    2314:	4282      	cmp	r2, r0
    2316:	d903      	bls.n	2320 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2318:	4408      	add	r0, r1
    231a:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    231e:	4770      	bx	lr
    2320:	2000      	movs	r0, #0
    2322:	4770      	bx	lr
    2324:	200014f6 	.word	0x200014f6

00002328 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2328:	4904      	ldr	r1, [pc, #16]	; (233c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    232a:	784a      	ldrb	r2, [r1, #1]
    232c:	4282      	cmp	r2, r0
    232e:	d903      	bls.n	2338 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2330:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2334:	3082      	adds	r0, #130	; 0x82
    2336:	4770      	bx	lr
    2338:	2000      	movs	r0, #0
    233a:	4770      	bx	lr
    233c:	200014f6 	.word	0x200014f6

00002340 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2340:	4a05      	ldr	r2, [pc, #20]	; (2358 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2342:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2346:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    234a:	6802      	ldr	r2, [r0, #0]
    234c:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2350:	8880      	ldrh	r0, [r0, #4]
    2352:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2356:	4770      	bx	lr
    2358:	200014f6 	.word	0x200014f6

0000235c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2360:	460e      	mov	r6, r1
    2362:	4607      	mov	r7, r0
    2364:	4615      	mov	r5, r2
    2366:	2106      	movs	r1, #6
    2368:	4630      	mov	r0, r6
    236a:	f00b fdfb 	bl	df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    236e:	4c0d      	ldr	r4, [pc, #52]	; (23a4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    2370:	b160      	cbz	r0, 238c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    2372:	2000      	movs	r0, #0
    2374:	e004      	b.n	2380 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    2376:	1821      	adds	r1, r4, r0
    2378:	1c40      	adds	r0, r0, #1
    237a:	f881 513a 	strb.w	r5, [r1, #314]	; 0x13a
    237e:	b2c0      	uxtb	r0, r0
    2380:	7861      	ldrb	r1, [r4, #1]
    2382:	4281      	cmp	r1, r0
    2384:	d8f7      	bhi.n	2376 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    2386:	2001      	movs	r0, #1
    2388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    238c:	4631      	mov	r1, r6
    238e:	4638      	mov	r0, r7
    2390:	f00b fc2e 	bl	dbf0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    2394:	2808      	cmp	r0, #8
    2396:	d003      	beq.n	23a0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    2398:	4420      	add	r0, r4
    239a:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    239e:	e7f2      	b.n	2386 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    23a0:	2000      	movs	r0, #0
    23a2:	e7f1      	b.n	2388 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    23a4:	200014f6 	.word	0x200014f6

000023a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    23a8:	4904      	ldr	r1, [pc, #16]	; (23bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    23aa:	784a      	ldrb	r2, [r1, #1]
    23ac:	4282      	cmp	r2, r0
    23ae:	d903      	bls.n	23b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    23b0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    23b4:	1c80      	adds	r0, r0, #2
    23b6:	4770      	bx	lr
    23b8:	2000      	movs	r0, #0
    23ba:	4770      	bx	lr
    23bc:	200014f6 	.word	0x200014f6

000023c0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    23c0:	b510      	push	{r4, lr}
    23c2:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    23c6:	2100      	movs	r1, #0
    23c8:	4805      	ldr	r0, [pc, #20]	; (23e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    23ca:	f00e fdc6 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    23ce:	4805      	ldr	r0, [pc, #20]	; (23e4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    23d0:	2100      	movs	r1, #0
    23d2:	7001      	strb	r1, [r0, #0]
    23d4:	7041      	strb	r1, [r0, #1]
    23d6:	f44f 7161 	mov.w	r1, #900	; 0x384
    23da:	8041      	strh	r1, [r0, #2]
    23dc:	bd10      	pop	{r4, pc}
    23de:	0000      	.short	0x0000
    23e0:	200014f6 	.word	0x200014f6
    23e4:	2000035c 	.word	0x2000035c

000023e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    23e8:	4901      	ldr	r1, [pc, #4]	; (23f0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    23ea:	7008      	strb	r0, [r1, #0]
    23ec:	4770      	bx	lr
    23ee:	0000      	.short	0x0000
    23f0:	2000035c 	.word	0x2000035c

000023f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    23f4:	4801      	ldr	r0, [pc, #4]	; (23fc <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    23f6:	7800      	ldrb	r0, [r0, #0]
    23f8:	4770      	bx	lr
    23fa:	0000      	.short	0x0000
    23fc:	2000035c 	.word	0x2000035c

00002400 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2400:	4b0b      	ldr	r3, [pc, #44]	; (2430 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2402:	b510      	push	{r4, lr}
    2404:	785c      	ldrb	r4, [r3, #1]
    2406:	4284      	cmp	r4, r0
    2408:	d910      	bls.n	242c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    240a:	4418      	add	r0, r3
    240c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2410:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2414:	4418      	add	r0, r3
    2416:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    241a:	700b      	strb	r3, [r1, #0]
    241c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2420:	6011      	str	r1, [r2, #0]
    2422:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2426:	8090      	strh	r0, [r2, #4]
    2428:	2001      	movs	r0, #1
    242a:	bd10      	pop	{r4, pc}
    242c:	2000      	movs	r0, #0
    242e:	bd10      	pop	{r4, pc}
    2430:	200014f6 	.word	0x200014f6

00002434 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    2434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2438:	4698      	mov	r8, r3
    243a:	4691      	mov	r9, r2
    243c:	460f      	mov	r7, r1
    243e:	4606      	mov	r6, r0
    2440:	f000 f8b0 	bl	25a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    2444:	4604      	mov	r4, r0
    2446:	2808      	cmp	r0, #8
    2448:	d006      	beq.n	2458 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    244a:	f000 f897 	bl	257c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    244e:	2808      	cmp	r0, #8
    2450:	d002      	beq.n	2458 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    2452:	2012      	movs	r0, #18
    2454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2458:	4d1f      	ldr	r5, [pc, #124]	; (24d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0xa4>)
    245a:	7868      	ldrb	r0, [r5, #1]
    245c:	2808      	cmp	r0, #8
    245e:	d238      	bcs.n	24d2 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x9e>
    2460:	2c08      	cmp	r4, #8
    2462:	d113      	bne.n	248c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x58>
    2464:	782c      	ldrb	r4, [r5, #0]
    2466:	1c60      	adds	r0, r4, #1
    2468:	7028      	strb	r0, [r5, #0]
    246a:	2c08      	cmp	r4, #8
    246c:	d303      	bcc.n	2476 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x42>
    246e:	2144      	movs	r1, #68	; 0x44
    2470:	2028      	movs	r0, #40	; 0x28
    2472:	f7fe fa8d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2476:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    247a:	4428      	add	r0, r5
    247c:	6839      	ldr	r1, [r7, #0]
    247e:	f8c0 1153 	str.w	r1, [r0, #339]	; 0x153
    2482:	88b9      	ldrh	r1, [r7, #4]
    2484:	f8a0 1157 	strh.w	r1, [r0, #343]	; 0x157
    2488:	f880 6152 	strb.w	r6, [r0, #338]	; 0x152
    248c:	786e      	ldrb	r6, [r5, #1]
    248e:	2210      	movs	r2, #16
    2490:	1c70      	adds	r0, r6, #1
    2492:	7068      	strb	r0, [r5, #1]
    2494:	eb05 1706 	add.w	r7, r5, r6, lsl #4
    2498:	1cb8      	adds	r0, r7, #2
    249a:	4649      	mov	r1, r9
    249c:	f00b fcf4 	bl	de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24a0:	f107 0082 	add.w	r0, r7, #130	; 0x82
    24a4:	2210      	movs	r2, #16
    24a6:	4641      	mov	r1, r8
    24a8:	f00b fcee 	bl	de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    24ac:	2110      	movs	r1, #16
    24ae:	4640      	mov	r0, r8
    24b0:	f00b fd58 	bl	df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24b4:	4435      	add	r5, r6
    24b6:	2110      	movs	r1, #16
    24b8:	f885 0142 	strb.w	r0, [r5, #322]	; 0x142
    24bc:	4648      	mov	r0, r9
    24be:	f205 152b 	addw	r5, r5, #299	; 0x12b
    24c2:	f00b fd4f 	bl	df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    24c6:	77e8      	strb	r0, [r5, #31]
    24c8:	f805 4c29 	strb.w	r4, [r5, #-41]
    24cc:	2000      	movs	r0, #0
    24ce:	73e8      	strb	r0, [r5, #15]
    24d0:	e7c0      	b.n	2454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24d2:	2007      	movs	r0, #7
    24d4:	e7be      	b.n	2454 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    24d6:	0000      	.short	0x0000
    24d8:	200014f6 	.word	0x200014f6

000024dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    24dc:	4806      	ldr	r0, [pc, #24]	; (24f8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    24de:	b510      	push	{r4, lr}
    24e0:	7840      	ldrb	r0, [r0, #1]
    24e2:	1e40      	subs	r0, r0, #1
    24e4:	b244      	sxtb	r4, r0
    24e6:	e004      	b.n	24f2 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    24e8:	b2e0      	uxtb	r0, r4
    24ea:	f000 f8bd 	bl	2668 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    24ee:	1e64      	subs	r4, r4, #1
    24f0:	b264      	sxtb	r4, r4
    24f2:	2c00      	cmp	r4, #0
    24f4:	daf8      	bge.n	24e8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    24f6:	bd10      	pop	{r4, pc}
    24f8:	200014f6 	.word	0x200014f6

000024fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    24fc:	4801      	ldr	r0, [pc, #4]	; (2504 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    24fe:	8840      	ldrh	r0, [r0, #2]
    2500:	4770      	bx	lr
    2502:	0000      	.short	0x0000
    2504:	2000035c 	.word	0x2000035c

00002508 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    2508:	b138      	cbz	r0, 251a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    250a:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    250e:	4288      	cmp	r0, r1
    2510:	d803      	bhi.n	251a <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2512:	4903      	ldr	r1, [pc, #12]	; (2520 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    2514:	8048      	strh	r0, [r1, #2]
    2516:	2001      	movs	r0, #1
    2518:	4770      	bx	lr
    251a:	2000      	movs	r0, #0
    251c:	4770      	bx	lr
    251e:	0000      	.short	0x0000
    2520:	2000035c 	.word	0x2000035c

00002524 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2524:	4905      	ldr	r1, [pc, #20]	; (253c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2526:	784a      	ldrb	r2, [r1, #1]
    2528:	4282      	cmp	r2, r0
    252a:	d903      	bls.n	2534 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    252c:	4408      	add	r0, r1
    252e:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2532:	b108      	cbz	r0, 2538 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2534:	2000      	movs	r0, #0
    2536:	4770      	bx	lr
    2538:	2001      	movs	r0, #1
    253a:	4770      	bx	lr
    253c:	200014f6 	.word	0x200014f6

00002540 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2540:	4901      	ldr	r1, [pc, #4]	; (2548 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2542:	7048      	strb	r0, [r1, #1]
    2544:	4770      	bx	lr
    2546:	0000      	.short	0x0000
    2548:	2000035c 	.word	0x2000035c
    254c:	4602      	mov	r2, r0
    254e:	4809      	ldr	r0, [pc, #36]	; (2574 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2550:	b510      	push	{r4, lr}
    2552:	7800      	ldrb	r0, [r0, #0]
    2554:	460b      	mov	r3, r1
    2556:	b158      	cbz	r0, 2570 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2558:	4807      	ldr	r0, [pc, #28]	; (2578 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    255a:	7841      	ldrb	r1, [r0, #1]
    255c:	b141      	cbz	r1, 2570 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    255e:	b10b      	cbz	r3, 2564 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2560:	1c80      	adds	r0, r0, #2
    2562:	e001      	b.n	2568 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2564:	4804      	ldr	r0, [pc, #16]	; (2578 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2566:	3082      	adds	r0, #130	; 0x82
    2568:	f004 fff4 	bl	7554 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    256c:	2001      	movs	r0, #1
    256e:	bd10      	pop	{r4, pc}
    2570:	2000      	movs	r0, #0
    2572:	bd10      	pop	{r4, pc}
    2574:	2000035c 	.word	0x2000035c
    2578:	200014f6 	.word	0x200014f6
    257c:	4908      	ldr	r1, [pc, #32]	; (25a0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    257e:	b510      	push	{r4, lr}
    2580:	4603      	mov	r3, r0
    2582:	2000      	movs	r0, #0
    2584:	784a      	ldrb	r2, [r1, #1]
    2586:	e006      	b.n	2596 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2588:	180c      	adds	r4, r1, r0
    258a:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    258e:	429c      	cmp	r4, r3
    2590:	d004      	beq.n	259c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2592:	1c40      	adds	r0, r0, #1
    2594:	b2c0      	uxtb	r0, r0
    2596:	4282      	cmp	r2, r0
    2598:	d8f6      	bhi.n	2588 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    259a:	2008      	movs	r0, #8
    259c:	bd10      	pop	{r4, pc}
    259e:	0000      	.short	0x0000
    25a0:	200014f6 	.word	0x200014f6
    25a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    25a6:	4c1a      	ldr	r4, [pc, #104]	; (2610 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    25a8:	4603      	mov	r3, r0
    25aa:	2000      	movs	r0, #0
    25ac:	7825      	ldrb	r5, [r4, #0]
    25ae:	e02b      	b.n	2608 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    25b0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    25b4:	4422      	add	r2, r4
    25b6:	780f      	ldrb	r7, [r1, #0]
    25b8:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    25bc:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    25c0:	ea87 070c 	eor.w	r7, r7, ip
    25c4:	405e      	eors	r6, r3
    25c6:	443e      	add	r6, r7
    25c8:	784f      	ldrb	r7, [r1, #1]
    25ca:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    25ce:	ea87 070c 	eor.w	r7, r7, ip
    25d2:	443e      	add	r6, r7
    25d4:	788f      	ldrb	r7, [r1, #2]
    25d6:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    25da:	ea87 070c 	eor.w	r7, r7, ip
    25de:	443e      	add	r6, r7
    25e0:	78cf      	ldrb	r7, [r1, #3]
    25e2:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    25e6:	ea87 070c 	eor.w	r7, r7, ip
    25ea:	443e      	add	r6, r7
    25ec:	790f      	ldrb	r7, [r1, #4]
    25ee:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    25f2:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    25f6:	ea87 070c 	eor.w	r7, r7, ip
    25fa:	443e      	add	r6, r7
    25fc:	794f      	ldrb	r7, [r1, #5]
    25fe:	4057      	eors	r7, r2
    2600:	42f7      	cmn	r7, r6
    2602:	d004      	beq.n	260e <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2604:	1c40      	adds	r0, r0, #1
    2606:	b2c0      	uxtb	r0, r0
    2608:	4285      	cmp	r5, r0
    260a:	d8d1      	bhi.n	25b0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    260c:	2008      	movs	r0, #8
    260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2610:	200014f6 	.word	0x200014f6
    2614:	b570      	push	{r4, r5, r6, lr}
    2616:	4605      	mov	r5, r0
    2618:	f7ff ffb0 	bl	257c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    261c:	2808      	cmp	r0, #8
    261e:	d120      	bne.n	2662 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    2620:	4c10      	ldr	r4, [pc, #64]	; (2664 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x124>)
    2622:	7820      	ldrb	r0, [r4, #0]
    2624:	1e40      	subs	r0, r0, #1
    2626:	b2c0      	uxtb	r0, r0
    2628:	7020      	strb	r0, [r4, #0]
    262a:	42a8      	cmp	r0, r5
    262c:	d019      	beq.n	2662 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    262e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2632:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    2636:	4420      	add	r0, r4
    2638:	4421      	add	r1, r4
    263a:	f500 72ab 	add.w	r2, r0, #342	; 0x156
    263e:	f8d0 0152 	ldr.w	r0, [r0, #338]	; 0x152
    2642:	f8c1 0152 	str.w	r0, [r1, #338]	; 0x152
    2646:	8810      	ldrh	r0, [r2, #0]
    2648:	f8a1 0156 	strh.w	r0, [r1, #342]	; 0x156
    264c:	7890      	ldrb	r0, [r2, #2]
    264e:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
    2652:	7820      	ldrb	r0, [r4, #0]
    2654:	f7ff ff92 	bl	257c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    2658:	2808      	cmp	r0, #8
    265a:	d002      	beq.n	2662 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x122>
    265c:	4420      	add	r0, r4
    265e:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	200014f6 	.word	0x200014f6
    2668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    266c:	4c1d      	ldr	r4, [pc, #116]	; (26e4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x1a4>)
    266e:	4606      	mov	r6, r0
    2670:	19a7      	adds	r7, r4, r6
    2672:	7860      	ldrb	r0, [r4, #1]
    2674:	1e40      	subs	r0, r0, #1
    2676:	b2c5      	uxtb	r5, r0
    2678:	7065      	strb	r5, [r4, #1]
    267a:	f897 a102 	ldrb.w	sl, [r7, #258]	; 0x102
    267e:	42ae      	cmp	r6, r5
    2680:	d02a      	beq.n	26d8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x198>
    2682:	eb04 1905 	add.w	r9, r4, r5, lsl #4
    2686:	eb04 1806 	add.w	r8, r4, r6, lsl #4
    268a:	f109 0102 	add.w	r1, r9, #2
    268e:	f108 0002 	add.w	r0, r8, #2
    2692:	2210      	movs	r2, #16
    2694:	f00e fbe7 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2698:	f109 0182 	add.w	r1, r9, #130	; 0x82
    269c:	f108 0082 	add.w	r0, r8, #130	; 0x82
    26a0:	2210      	movs	r2, #16
    26a2:	f00e fbe0 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26a6:	1960      	adds	r0, r4, r5
    26a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    26ac:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    26b0:	f887 1102 	strb.w	r1, [r7, #258]	; 0x102
    26b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    26bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    26c0:	f8d2 310a 	ldr.w	r3, [r2, #266]	; 0x10a
    26c4:	f8c1 310a 	str.w	r3, [r1, #266]	; 0x10a
    26c8:	f8b2 210e 	ldrh.w	r2, [r2, #270]	; 0x10e
    26cc:	f8a1 210e 	strh.w	r2, [r1, #270]	; 0x10e
    26d0:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    26d4:	f887 013a 	strb.w	r0, [r7, #314]	; 0x13a
    26d8:	4650      	mov	r0, sl
    26da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26de:	f7ff bf99 	b.w	2614 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd4>
    26e2:	0000      	.short	0x0000
    26e4:	200014f6 	.word	0x200014f6

000026e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    26e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26ec:	4604      	mov	r4, r0
    26ee:	f100 0580 	add.w	r5, r0, #128	; 0x80
    26f2:	f04f 0901 	mov.w	r9, #1
    26f6:	b171      	cbz	r1, 2716 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    26f8:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    26fc:	1e7e      	subs	r6, r7, #1
    26fe:	2901      	cmp	r1, #1
    2700:	d029      	beq.n	2756 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2702:	2902      	cmp	r1, #2
    2704:	d04e      	beq.n	27a4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2706:	2903      	cmp	r1, #3
    2708:	d123      	bne.n	2752 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    270a:	4639      	mov	r1, r7
    270c:	4630      	mov	r0, r6
    270e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2712:	f00b bc89 	b.w	e028 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2716:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    271a:	2100      	movs	r1, #0
    271c:	f00e fc1d 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2720:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2724:	4924      	ldr	r1, [pc, #144]	; (27b8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2726:	66e9      	str	r1, [r5, #108]	; 0x6c
    2728:	4620      	mov	r0, r4
    272a:	2107      	movs	r1, #7
    272c:	6729      	str	r1, [r5, #112]	; 0x70
    272e:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2732:	f021 0104 	bic.w	r1, r1, #4
    2736:	7001      	strb	r1, [r0, #0]
    2738:	20fe      	movs	r0, #254	; 0xfe
    273a:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    273e:	207f      	movs	r0, #127	; 0x7f
    2740:	7668      	strb	r0, [r5, #25]
    2742:	481e      	ldr	r0, [pc, #120]	; (27bc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2744:	60a8      	str	r0, [r5, #8]
    2746:	2000      	movs	r0, #0
    2748:	e9c5 0000 	strd	r0, r0, [r5]
    274c:	2020      	movs	r0, #32
    274e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2756:	f04f 0800 	mov.w	r8, #0
    275a:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    275e:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2762:	6921      	ldr	r1, [r4, #16]
    2764:	4816      	ldr	r0, [pc, #88]	; (27c0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2766:	460a      	mov	r2, r1
    2768:	4408      	add	r0, r1
    276a:	fbb0 f0f1 	udiv	r0, r0, r1
    276e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2772:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2776:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    277a:	8b63      	ldrh	r3, [r4, #26]
    277c:	4628      	mov	r0, r5
    277e:	f000 f821 	bl	27c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2782:	4639      	mov	r1, r7
    2784:	4630      	mov	r0, r6
    2786:	f00b fc4f 	bl	e028 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    278a:	f00e faee 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    278e:	b118      	cbz	r0, 2798 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2790:	6960      	ldr	r0, [r4, #20]
    2792:	f000 fbbd 	bl	2f10 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2796:	b110      	cbz	r0, 279e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    2798:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    279c:	e7d9      	b.n	2752 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    279e:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    27a2:	e7d6      	b.n	2752 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    27a4:	6901      	ldr	r1, [r0, #16]
    27a6:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    27aa:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    27ae:	4628      	mov	r0, r5
    27b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27b4:	f000 b806 	b.w	27c4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    27b8:	c404492f 	.word	0xc404492f
    27bc:	fffce000 	.word	0xfffce000
    27c0:	01c9c37f 	.word	0x01c9c37f
    27c4:	b510      	push	{r4, lr}
    27c6:	2400      	movs	r4, #0
    27c8:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    27cc:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    27d0:	434c      	muls	r4, r1
    27d2:	fbb4 f4f2 	udiv	r4, r4, r2
    27d6:	f820 4910 	strh.w	r4, [r0], #-16
    27da:	f240 2471 	movw	r4, #625	; 0x271
    27de:	4363      	muls	r3, r4
    27e0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27e4:	1e5b      	subs	r3, r3, #1
    27e6:	fbb3 f3f2 	udiv	r3, r3, r2
    27ea:	81c3      	strh	r3, [r0, #14]
    27ec:	4b09      	ldr	r3, [pc, #36]	; (2814 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    27ee:	fbb3 f3f2 	udiv	r3, r3, r2
    27f2:	1c5b      	adds	r3, r3, #1
    27f4:	8283      	strh	r3, [r0, #20]
    27f6:	8903      	ldrh	r3, [r0, #8]
    27f8:	4363      	muls	r3, r4
    27fa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27fe:	1e5b      	subs	r3, r3, #1
    2800:	fbb3 f3f2 	udiv	r3, r3, r2
    2804:	6043      	str	r3, [r0, #4]
    2806:	6803      	ldr	r3, [r0, #0]
    2808:	434b      	muls	r3, r1
    280a:	fbb3 f1f2 	udiv	r1, r3, r2
    280e:	6001      	str	r1, [r0, #0]
    2810:	bd10      	pop	{r4, pc}
    2812:	0000      	.short	0x0000
    2814:	02625a00 	.word	0x02625a00

00002818 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2818:	4902      	ldr	r1, [pc, #8]	; (2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    281a:	f991 1000 	ldrsb.w	r1, [r1]
    281e:	f00b bbb4 	b.w	df8a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2822:	0000      	.short	0x0000
    2824:	20000374 	.word	0x20000374

00002828 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2828:	b508      	push	{r3, lr}
    282a:	207f      	movs	r0, #127	; 0x7f
    282c:	f88d 0000 	strb.w	r0, [sp]
    2830:	4668      	mov	r0, sp
    2832:	f005 fbc3 	bl	7fbc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2836:	b140      	cbz	r0, 284a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2838:	4805      	ldr	r0, [pc, #20]	; (2850 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    283a:	7840      	ldrb	r0, [r0, #1]
    283c:	4240      	negs	r0, r0
    283e:	b241      	sxtb	r1, r0
    2840:	f99d 0000 	ldrsb.w	r0, [sp]
    2844:	f00b fba1 	bl	df8a <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2848:	bd08      	pop	{r3, pc}
    284a:	f99d 0000 	ldrsb.w	r0, [sp]
    284e:	bd08      	pop	{r3, pc}
    2850:	20000374 	.word	0x20000374

00002854 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2854:	4a01      	ldr	r2, [pc, #4]	; (285c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2856:	7010      	strb	r0, [r2, #0]
    2858:	7051      	strb	r1, [r2, #1]
    285a:	4770      	bx	lr
    285c:	20000374 	.word	0x20000374
    2860:	b570      	push	{r4, r5, r6, lr}
    2862:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2866:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    286a:	2401      	movs	r4, #1
    286c:	fb03 2101 	mla	r1, r3, r1, r2
    2870:	2225      	movs	r2, #37	; 0x25
    2872:	fbb1 f3f2 	udiv	r3, r1, r2
    2876:	fb02 1113 	mls	r1, r2, r3, r1
    287a:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    287e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2882:	f001 0307 	and.w	r3, r1, #7
    2886:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    288a:	fa04 f303 	lsl.w	r3, r4, r3
    288e:	421a      	tst	r2, r3
    2890:	d004      	beq.n	289c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    2892:	bf00      	nop
    2894:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2898:	2000      	movs	r0, #0
    289a:	bd70      	pop	{r4, r5, r6, pc}
    289c:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    28a0:	fbb1 f3f2 	udiv	r3, r1, r2
    28a4:	fb02 1113 	mls	r1, r2, r3, r1
    28a8:	1c49      	adds	r1, r1, #1
    28aa:	b2c9      	uxtb	r1, r1
    28ac:	2300      	movs	r3, #0
    28ae:	18c5      	adds	r5, r0, r3
    28b0:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    28b4:	428a      	cmp	r2, r1
    28b6:	d312      	bcc.n	28de <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    28b8:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    28bc:	2200      	movs	r2, #0
    28be:	bf00      	nop
    28c0:	fa04 f602 	lsl.w	r6, r4, r2
    28c4:	4235      	tst	r5, r6
    28c6:	d001      	beq.n	28cc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    28c8:	1e49      	subs	r1, r1, #1
    28ca:	b2c9      	uxtb	r1, r1
    28cc:	b121      	cbz	r1, 28d8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    28ce:	1c52      	adds	r2, r2, #1
    28d0:	b2d2      	uxtb	r2, r2
    28d2:	2a08      	cmp	r2, #8
    28d4:	d3f4      	bcc.n	28c0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    28d6:	e004      	b.n	28e2 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    28d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    28dc:	e7da      	b.n	2894 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    28de:	1a89      	subs	r1, r1, r2
    28e0:	b2c9      	uxtb	r1, r1
    28e2:	1c5b      	adds	r3, r3, #1
    28e4:	b2db      	uxtb	r3, r3
    28e6:	2b05      	cmp	r3, #5
    28e8:	d3e1      	bcc.n	28ae <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    28ea:	201f      	movs	r0, #31
    28ec:	bd70      	pop	{r4, r5, r6, pc}
    28ee:	0000      	movs	r0, r0
    28f0:	b570      	push	{r4, r5, r6, lr}
    28f2:	1c49      	adds	r1, r1, #1
    28f4:	2300      	movs	r3, #0
    28f6:	b2c9      	uxtb	r1, r1
    28f8:	2401      	movs	r4, #1
    28fa:	18c5      	adds	r5, r0, r3
    28fc:	79aa      	ldrb	r2, [r5, #6]
    28fe:	428a      	cmp	r2, r1
    2900:	d312      	bcc.n	2928 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2902:	f895 5001 	ldrb.w	r5, [r5, #1]
    2906:	2200      	movs	r2, #0
    2908:	fa04 f602 	lsl.w	r6, r4, r2
    290c:	4235      	tst	r5, r6
    290e:	d001      	beq.n	2914 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2910:	1e49      	subs	r1, r1, #1
    2912:	b2c9      	uxtb	r1, r1
    2914:	b121      	cbz	r1, 2920 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    2916:	1c52      	adds	r2, r2, #1
    2918:	b2d2      	uxtb	r2, r2
    291a:	2a08      	cmp	r2, #8
    291c:	d3f4      	bcc.n	2908 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    291e:	e005      	b.n	292c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2920:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2924:	b2c0      	uxtb	r0, r0
    2926:	bd70      	pop	{r4, r5, r6, pc}
    2928:	1a89      	subs	r1, r1, r2
    292a:	b2c9      	uxtb	r1, r1
    292c:	1c5b      	adds	r3, r3, #1
    292e:	b2db      	uxtb	r3, r3
    2930:	2b05      	cmp	r3, #5
    2932:	d3e2      	bcc.n	28fa <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2934:	219d      	movs	r1, #157	; 0x9d
    2936:	2046      	movs	r0, #70	; 0x46
    2938:	f7fe f82a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000293c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    293c:	7841      	ldrb	r1, [r0, #1]
    293e:	b141      	cbz	r1, 2952 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2940:	78c0      	ldrb	r0, [r0, #3]
    2942:	282b      	cmp	r0, #43	; 0x2b
    2944:	d203      	bcs.n	294e <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2946:	4a04      	ldr	r2, [pc, #16]	; (2958 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2948:	5c10      	ldrb	r0, [r2, r0]
    294a:	4288      	cmp	r0, r1
    294c:	d101      	bne.n	2952 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    294e:	2001      	movs	r0, #1
    2950:	4770      	bx	lr
    2952:	2000      	movs	r0, #0
    2954:	4770      	bx	lr
    2956:	0000      	.short	0x0000
    2958:	000110a4 	.word	0x000110a4

0000295c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    295c:	b510      	push	{r4, lr}
    295e:	2201      	movs	r2, #1
    2960:	70c1      	strb	r1, [r0, #3]
    2962:	292b      	cmp	r1, #43	; 0x2b
    2964:	d202      	bcs.n	296c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2966:	4a06      	ldr	r2, [pc, #24]	; (2980 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2968:	5c52      	ldrb	r2, [r2, r1]
    296a:	e006      	b.n	297a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    296c:	29ff      	cmp	r1, #255	; 0xff
    296e:	d004      	beq.n	297a <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2970:	f240 4174 	movw	r1, #1140	; 0x474
    2974:	202a      	movs	r0, #42	; 0x2a
    2976:	f7fe f80b 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    297a:	7042      	strb	r2, [r0, #1]
    297c:	bd10      	pop	{r4, pc}
    297e:	0000      	.short	0x0000
    2980:	000110a4 	.word	0x000110a4

00002984 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2984:	4904      	ldr	r1, [pc, #16]	; (2998 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2986:	7c89      	ldrb	r1, [r1, #18]
    2988:	0749      	lsls	r1, r1, #29
    298a:	d400      	bmi.n	298e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    298c:	b108      	cbz	r0, 2992 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    298e:	2000      	movs	r0, #0
    2990:	4770      	bx	lr
    2992:	2001      	movs	r0, #1
    2994:	4770      	bx	lr
    2996:	0000      	.short	0x0000
    2998:	200013f8 	.word	0x200013f8

0000299c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    299c:	4803      	ldr	r0, [pc, #12]	; (29ac <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    299e:	7c80      	ldrb	r0, [r0, #18]
    29a0:	0780      	lsls	r0, r0, #30
    29a2:	d401      	bmi.n	29a8 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    29a4:	2001      	movs	r0, #1
    29a6:	4770      	bx	lr
    29a8:	2000      	movs	r0, #0
    29aa:	4770      	bx	lr
    29ac:	200013f8 	.word	0x200013f8

000029b0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    29b0:	4803      	ldr	r0, [pc, #12]	; (29c0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    29b2:	7c80      	ldrb	r0, [r0, #18]
    29b4:	07c0      	lsls	r0, r0, #31
    29b6:	d001      	beq.n	29bc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    29b8:	2000      	movs	r0, #0
    29ba:	4770      	bx	lr
    29bc:	2001      	movs	r0, #1
    29be:	4770      	bx	lr
    29c0:	200013f8 	.word	0x200013f8
    29c4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    29c8:	4688      	mov	r8, r1
    29ca:	4699      	mov	r9, r3
    29cc:	4615      	mov	r5, r2
    29ce:	4604      	mov	r4, r0
    29d0:	4669      	mov	r1, sp
    29d2:	f00b f944 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    29d6:	bbe0      	cbnz	r0, 2a52 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    29d8:	9e01      	ldr	r6, [sp, #4]
    29da:	2700      	movs	r7, #0
    29dc:	3680      	adds	r6, #128	; 0x80
    29de:	b17d      	cbz	r5, 2a00 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    29e0:	4620      	mov	r0, r4
    29e2:	f7fe fcad 	bl	1340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    29e6:	0004      	movs	r4, r0
    29e8:	d00e      	beq.n	2a08 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    29ea:	4629      	mov	r1, r5
    29ec:	f00a fd38 	bl	d460 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    29f0:	b118      	cbz	r0, 29fa <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    29f2:	491b      	ldr	r1, [pc, #108]	; (2a60 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    29f4:	8849      	ldrh	r1, [r1, #2]
    29f6:	42a9      	cmp	r1, r5
    29f8:	d208      	bcs.n	2a0c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    29fa:	2000      	movs	r0, #0
    29fc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a00:	2001      	movs	r0, #1
    2a02:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2a06:	e024      	b.n	2a52 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2a08:	2167      	movs	r1, #103	; 0x67
    2a0a:	e025      	b.n	2a58 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2a0c:	4601      	mov	r1, r0
    2a0e:	aa02      	add	r2, sp, #8
    2a10:	4620      	mov	r0, r4
    2a12:	f00a fd1e 	bl	d452 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a16:	9802      	ldr	r0, [sp, #8]
    2a18:	8007      	strh	r7, [r0, #0]
    2a1a:	7087      	strb	r7, [r0, #2]
    2a1c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2a20:	b109      	cbz	r1, 2a26 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2a22:	f04f 0802 	mov.w	r8, #2
    2a26:	4641      	mov	r1, r8
    2a28:	f00b fc51 	bl	e2ce <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2a2c:	9802      	ldr	r0, [sp, #8]
    2a2e:	462a      	mov	r2, r5
    2a30:	4649      	mov	r1, r9
    2a32:	1cc0      	adds	r0, r0, #3
    2a34:	f00e fa17 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a38:	4620      	mov	r0, r4
    2a3a:	4629      	mov	r1, r5
    2a3c:	f00a fcc7 	bl	d3ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2a40:	b148      	cbz	r0, 2a56 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2a42:	4668      	mov	r0, sp
    2a44:	f00b fc9e 	bl	e384 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2a48:	9801      	ldr	r0, [sp, #4]
    2a4a:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2a4e:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2a52:	2001      	movs	r0, #1
    2a54:	e7d2      	b.n	29fc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2a56:	217c      	movs	r1, #124	; 0x7c
    2a58:	202b      	movs	r0, #43	; 0x2b
    2a5a:	f7fd ff99 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a5e:	0000      	.short	0x0000
    2a60:	200013f8 	.word	0x200013f8

00002a64 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2a64:	4809      	ldr	r0, [pc, #36]	; (2a8c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2a66:	b082      	sub	sp, #8
    2a68:	7a00      	ldrb	r0, [r0, #8]
    2a6a:	f88d 0000 	strb.w	r0, [sp]
    2a6e:	9800      	ldr	r0, [sp, #0]
    2a70:	9000      	str	r0, [sp, #0]
    2a72:	f89d 0000 	ldrb.w	r0, [sp]
    2a76:	2800      	cmp	r0, #0
    2a78:	d105      	bne.n	2a86 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2a7a:	2202      	movs	r2, #2
    2a7c:	4904      	ldr	r1, [pc, #16]	; (2a90 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2a7e:	4803      	ldr	r0, [pc, #12]	; (2a8c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2a80:	b002      	add	sp, #8
    2a82:	f00b bcab 	b.w	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2a86:	b002      	add	sp, #8
    2a88:	4770      	bx	lr
    2a8a:	0000      	.short	0x0000
    2a8c:	20001410 	.word	0x20001410
    2a90:	0000e423 	.word	0x0000e423

00002a94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a98:	f8df 9178 	ldr.w	r9, [pc, #376]	; 2c14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    2a9c:	4f5e      	ldr	r7, [pc, #376]	; (2c18 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    2a9e:	4683      	mov	fp, r0
    2aa0:	f04f 0a01 	mov.w	sl, #1
    2aa4:	2600      	movs	r6, #0
    2aa6:	6878      	ldr	r0, [r7, #4]
    2aa8:	4635      	mov	r5, r6
    2aaa:	7a00      	ldrb	r0, [r0, #8]
    2aac:	f88d 0000 	strb.w	r0, [sp]
    2ab0:	9800      	ldr	r0, [sp, #0]
    2ab2:	9000      	str	r0, [sp, #0]
    2ab4:	f89d 1000 	ldrb.w	r1, [sp]
    2ab8:	2910      	cmp	r1, #16
    2aba:	d106      	bne.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2abc:	f899 1013 	ldrb.w	r1, [r9, #19]
    2ac0:	b119      	cbz	r1, 2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    2ac2:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    2ac6:	2800      	cmp	r0, #0
    2ac8:	d073      	beq.n	2bb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2aca:	f88d 6000 	strb.w	r6, [sp]
    2ace:	4668      	mov	r0, sp
    2ad0:	f000 f906 	bl	2ce0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    2ad4:	f89d 1000 	ldrb.w	r1, [sp]
    2ad8:	2900      	cmp	r1, #0
    2ada:	d1f8      	bne.n	2ace <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    2adc:	2800      	cmp	r0, #0
    2ade:	d068      	beq.n	2bb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2ae0:	4604      	mov	r4, r0
    2ae2:	7a00      	ldrb	r0, [r0, #8]
    2ae4:	f88d 0000 	strb.w	r0, [sp]
    2ae8:	9800      	ldr	r0, [sp, #0]
    2aea:	9000      	str	r0, [sp, #0]
    2aec:	f89d 8000 	ldrb.w	r8, [sp]
    2af0:	f104 0008 	add.w	r0, r4, #8
    2af4:	2105      	movs	r1, #5
    2af6:	9000      	str	r0, [sp, #0]
    2af8:	7001      	strb	r1, [r0, #0]
    2afa:	4640      	mov	r0, r8
    2afc:	f1b8 0f08 	cmp.w	r8, #8
    2b00:	d042      	beq.n	2b88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    2b02:	dc07      	bgt.n	2b14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    2b04:	2802      	cmp	r0, #2
    2b06:	d00d      	beq.n	2b24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    2b08:	2803      	cmp	r0, #3
    2b0a:	d017      	beq.n	2b3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    2b0c:	f1b8 0f04 	cmp.w	r8, #4
    2b10:	d105      	bne.n	2b1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    2b12:	e01d      	b.n	2b50 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    2b14:	280f      	cmp	r0, #15
    2b16:	d052      	beq.n	2bbe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2b18:	f1b8 0f10 	cmp.w	r8, #16
    2b1c:	d059      	beq.n	2bd2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    2b1e:	f240 214a 	movw	r1, #586	; 0x24a
    2b22:	e065      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b24:	6862      	ldr	r2, [r4, #4]
    2b26:	b132      	cbz	r2, 2b36 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    2b28:	4659      	mov	r1, fp
    2b2a:	4620      	mov	r0, r4
    2b2c:	4790      	blx	r2
    2b2e:	2004      	movs	r0, #4
    2b30:	f360 0507 	bfi	r5, r0, #0, #8
    2b34:	e010      	b.n	2b58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b36:	f240 11c3 	movw	r1, #451	; 0x1c3
    2b3a:	e059      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b3c:	6862      	ldr	r2, [r4, #4]
    2b3e:	b122      	cbz	r2, 2b4a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    2b40:	4659      	mov	r1, fp
    2b42:	4620      	mov	r0, r4
    2b44:	4790      	blx	r2
    2b46:	4605      	mov	r5, r0
    2b48:	e006      	b.n	2b58 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    2b4a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    2b4e:	e04f      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b50:	6861      	ldr	r1, [r4, #4]
    2b52:	b1b1      	cbz	r1, 2b82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    2b54:	4620      	mov	r0, r4
    2b56:	4788      	blx	r1
    2b58:	f3c5 2007 	ubfx	r0, r5, #8, #8
    2b5c:	2801      	cmp	r0, #1
    2b5e:	d04a      	beq.n	2bf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    2b60:	f3ef 8110 	mrs	r1, PRIMASK
    2b64:	b672      	cpsid	i
    2b66:	7a20      	ldrb	r0, [r4, #8]
    2b68:	f88d 0000 	strb.w	r0, [sp]
    2b6c:	9800      	ldr	r0, [sp, #0]
    2b6e:	9000      	str	r0, [sp, #0]
    2b70:	f89d 0000 	ldrb.w	r0, [sp]
    2b74:	2805      	cmp	r0, #5
    2b76:	d042      	beq.n	2bfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2b78:	b3b0      	cbz	r0, 2be8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    2b7a:	f366 0507 	bfi	r5, r6, #0, #8
    2b7e:	b3a1      	cbz	r1, 2bea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    2b80:	e041      	b.n	2c06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2b82:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    2b86:	e033      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2b88:	6860      	ldr	r0, [r4, #4]
    2b8a:	465d      	mov	r5, fp
    2b8c:	b198      	cbz	r0, 2bb6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    2b8e:	8804      	ldrh	r4, [r0, #0]
    2b90:	4620      	mov	r0, r4
    2b92:	f7fe fbd5 	bl	1340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2b96:	b180      	cbz	r0, 2bba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    2b98:	706e      	strb	r6, [r5, #1]
    2b9a:	210d      	movs	r1, #13
    2b9c:	7029      	strb	r1, [r5, #0]
    2b9e:	80ec      	strh	r4, [r5, #6]
    2ba0:	f8a5 a008 	strh.w	sl, [r5, #8]
    2ba4:	f885 a004 	strb.w	sl, [r5, #4]
    2ba8:	4631      	mov	r1, r6
    2baa:	f00a fcf0 	bl	d58e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2bae:	2004      	movs	r0, #4
    2bb0:	613e      	str	r6, [r7, #16]
    2bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb6:	21e5      	movs	r1, #229	; 0xe5
    2bb8:	e01a      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bba:	21c5      	movs	r1, #197	; 0xc5
    2bbc:	e018      	b.n	2bf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    2bbe:	f88b 6001 	strb.w	r6, [fp, #1]
    2bc2:	2116      	movs	r1, #22
    2bc4:	f88b 1000 	strb.w	r1, [fp]
    2bc8:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2bcc:	f8cb 1004 	str.w	r1, [fp, #4]
    2bd0:	e7ad      	b.n	2b2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    2bd2:	4812      	ldr	r0, [pc, #72]	; (2c1c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    2bd4:	6802      	ldr	r2, [r0, #0]
    2bd6:	b122      	cbz	r2, 2be2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2bd8:	6860      	ldr	r0, [r4, #4]
    2bda:	b138      	cbz	r0, 2bec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    2bdc:	8800      	ldrh	r0, [r0, #0]
    2bde:	4659      	mov	r1, fp
    2be0:	4790      	blx	r2
    2be2:	2002      	movs	r0, #2
    2be4:	613e      	str	r6, [r7, #16]
    2be6:	e7e4      	b.n	2bb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2be8:	e009      	b.n	2bfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    2bea:	e00b      	b.n	2c04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    2bec:	f44f 7110 	mov.w	r1, #576	; 0x240
    2bf0:	2010      	movs	r0, #16
    2bf2:	f7fd fecd 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2bf6:	9800      	ldr	r0, [sp, #0]
    2bf8:	4641      	mov	r1, r8
    2bfa:	7001      	strb	r1, [r0, #0]
    2bfc:	e003      	b.n	2c06 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    2bfe:	7226      	strb	r6, [r4, #8]
    2c00:	613e      	str	r6, [r7, #16]
    2c02:	e7bc      	b.n	2b7e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    2c04:	b662      	cpsie	i
    2c06:	f015 0fff 	tst.w	r5, #255	; 0xff
    2c0a:	f43f af4c 	beq.w	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    2c0e:	b2e8      	uxtb	r0, r5
    2c10:	e7cf      	b.n	2bb2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    2c12:	0000      	.short	0x0000
    2c14:	200013f8 	.word	0x200013f8
    2c18:	20001424 	.word	0x20001424
    2c1c:	200000c8 	.word	0x200000c8

00002c20 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2c20:	4901      	ldr	r1, [pc, #4]	; (2c28 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2c22:	7008      	strb	r0, [r1, #0]
    2c24:	f000 b8be 	b.w	2da4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    2c28:	20000376 	.word	0x20000376

00002c2c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    2c2c:	4902      	ldr	r1, [pc, #8]	; (2c38 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    2c2e:	4801      	ldr	r0, [pc, #4]	; (2c34 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    2c30:	6008      	str	r0, [r1, #0]
    2c32:	4770      	bx	lr
    2c34:	00002c3d 	.word	0x00002c3d
    2c38:	200000c8 	.word	0x200000c8
    2c3c:	b538      	push	{r3, r4, r5, lr}
    2c3e:	000d      	movs	r5, r1
    2c40:	d014      	beq.n	2c6c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    2c42:	80a8      	strh	r0, [r5, #4]
    2c44:	2100      	movs	r1, #0
    2c46:	7269      	strb	r1, [r5, #9]
    2c48:	f7fe fb64 	bl	1314 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2c4c:	4604      	mov	r4, r0
    2c4e:	f00a fbe2 	bl	d416 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2c52:	b170      	cbz	r0, 2c72 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    2c54:	4601      	mov	r1, r0
    2c56:	466a      	mov	r2, sp
    2c58:	4620      	mov	r0, r4
    2c5a:	f00a fbfa 	bl	d452 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2c5e:	80e8      	strh	r0, [r5, #6]
    2c60:	b150      	cbz	r0, 2c78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    2c62:	28fb      	cmp	r0, #251	; 0xfb
    2c64:	d90b      	bls.n	2c7e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    2c66:	f240 1123 	movw	r1, #291	; 0x123
    2c6a:	e033      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c6c:	f240 1113 	movw	r1, #275	; 0x113
    2c70:	e030      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c72:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2c76:	e02d      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c78:	f240 1121 	movw	r1, #289	; 0x121
    2c7c:	e02a      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c7e:	9800      	ldr	r0, [sp, #0]
    2c80:	f00b fad1 	bl	e226 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2c84:	2801      	cmp	r0, #1
    2c86:	d004      	beq.n	2c92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2c88:	2802      	cmp	r0, #2
    2c8a:	d002      	beq.n	2c92 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    2c8c:	f240 1133 	movw	r1, #307	; 0x133
    2c90:	e020      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2c92:	7228      	strb	r0, [r5, #8]
    2c94:	6828      	ldr	r0, [r5, #0]
    2c96:	b1a8      	cbz	r0, 2cc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    2c98:	9900      	ldr	r1, [sp, #0]
    2c9a:	88ea      	ldrh	r2, [r5, #6]
    2c9c:	1cc9      	adds	r1, r1, #3
    2c9e:	f00e f8e2 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ca2:	4620      	mov	r0, r4
    2ca4:	f00a fb7f 	bl	d3a6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2ca8:	b178      	cbz	r0, 2cca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    2caa:	4620      	mov	r0, r4
    2cac:	2100      	movs	r1, #0
    2cae:	f00a fc6e 	bl	d58e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2cb2:	b168      	cbz	r0, 2cd0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    2cb4:	4809      	ldr	r0, [pc, #36]	; (2cdc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    2cb6:	7cc1      	ldrb	r1, [r0, #19]
    2cb8:	2900      	cmp	r1, #0
    2cba:	d002      	beq.n	2cc2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    2cbc:	8a81      	ldrh	r1, [r0, #20]
    2cbe:	1e49      	subs	r1, r1, #1
    2cc0:	8281      	strh	r1, [r0, #20]
    2cc2:	bd38      	pop	{r3, r4, r5, pc}
    2cc4:	f44f 719d 	mov.w	r1, #314	; 0x13a
    2cc8:	e004      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cca:	f240 113f 	movw	r1, #319	; 0x13f
    2cce:	e001      	b.n	2cd4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    2cd0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    2cd4:	2010      	movs	r0, #16
    2cd6:	f7fd fe5b 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2cda:	0000      	.short	0x0000
    2cdc:	200013f8 	.word	0x200013f8
    2ce0:	b538      	push	{r3, r4, r5, lr}
    2ce2:	4603      	mov	r3, r0
    2ce4:	4917      	ldr	r1, [pc, #92]	; (2d44 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    2ce6:	2000      	movs	r0, #0
    2ce8:	7018      	strb	r0, [r3, #0]
    2cea:	6908      	ldr	r0, [r1, #16]
    2cec:	2401      	movs	r4, #1
    2cee:	b140      	cbz	r0, 2d02 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    2cf0:	7a02      	ldrb	r2, [r0, #8]
    2cf2:	f88d 2000 	strb.w	r2, [sp]
    2cf6:	9a00      	ldr	r2, [sp, #0]
    2cf8:	9200      	str	r2, [sp, #0]
    2cfa:	f89d 5000 	ldrb.w	r5, [sp]
    2cfe:	2d00      	cmp	r5, #0
    2d00:	d111      	bne.n	2d26 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    2d02:	6848      	ldr	r0, [r1, #4]
    2d04:	7a02      	ldrb	r2, [r0, #8]
    2d06:	f88d 2000 	strb.w	r2, [sp]
    2d0a:	9a00      	ldr	r2, [sp, #0]
    2d0c:	9200      	str	r2, [sp, #0]
    2d0e:	f89d 5000 	ldrb.w	r5, [sp]
    2d12:	2d01      	cmp	r5, #1
    2d14:	d006      	beq.n	2d24 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    2d16:	f3ef 8210 	mrs	r2, PRIMASK
    2d1a:	b672      	cpsid	i
    2d1c:	6805      	ldr	r5, [r0, #0]
    2d1e:	604d      	str	r5, [r1, #4]
    2d20:	b112      	cbz	r2, 2d28 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    2d22:	e002      	b.n	2d2a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    2d24:	2000      	movs	r0, #0
    2d26:	bd38      	pop	{r3, r4, r5, pc}
    2d28:	b662      	cpsie	i
    2d2a:	7a02      	ldrb	r2, [r0, #8]
    2d2c:	f88d 2000 	strb.w	r2, [sp]
    2d30:	9a00      	ldr	r2, [sp, #0]
    2d32:	9200      	str	r2, [sp, #0]
    2d34:	f89d 5000 	ldrb.w	r5, [sp]
    2d38:	b10d      	cbz	r5, 2d3e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    2d3a:	6108      	str	r0, [r1, #16]
    2d3c:	bd38      	pop	{r3, r4, r5, pc}
    2d3e:	701c      	strb	r4, [r3, #0]
    2d40:	bd38      	pop	{r3, r4, r5, pc}
    2d42:	0000      	.short	0x0000
    2d44:	20001424 	.word	0x20001424
    2d48:	b538      	push	{r3, r4, r5, lr}
    2d4a:	b1d0      	cbz	r0, 2d82 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    2d4c:	6041      	str	r1, [r0, #4]
    2d4e:	f100 0108 	add.w	r1, r0, #8
    2d52:	700a      	strb	r2, [r1, #0]
    2d54:	f3ef 8310 	mrs	r3, PRIMASK
    2d58:	b672      	cpsid	i
    2d5a:	4c10      	ldr	r4, [pc, #64]	; (2d9c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    2d5c:	6004      	str	r4, [r0, #0]
    2d5e:	1f21      	subs	r1, r4, #4
    2d60:	684a      	ldr	r2, [r1, #4]
    2d62:	b14a      	cbz	r2, 2d78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d64:	7a12      	ldrb	r2, [r2, #8]
    2d66:	f88d 2000 	strb.w	r2, [sp]
    2d6a:	9a00      	ldr	r2, [sp, #0]
    2d6c:	9200      	str	r2, [sp, #0]
    2d6e:	f89d 5000 	ldrb.w	r5, [sp]
    2d72:	2d01      	cmp	r5, #1
    2d74:	d100      	bne.n	2d78 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    2d76:	600c      	str	r4, [r1, #0]
    2d78:	680a      	ldr	r2, [r1, #0]
    2d7a:	6010      	str	r0, [r2, #0]
    2d7c:	6008      	str	r0, [r1, #0]
    2d7e:	b12b      	cbz	r3, 2d8c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    2d80:	e005      	b.n	2d8e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    2d82:	f240 2175 	movw	r1, #629	; 0x275
    2d86:	2010      	movs	r0, #16
    2d88:	f7fd fe02 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d8c:	b662      	cpsie	i
    2d8e:	4804      	ldr	r0, [pc, #16]	; (2da0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    2d90:	7800      	ldrb	r0, [r0, #0]
    2d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2d96:	f009 bc31 	b.w	c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2d9a:	0000      	.short	0x0000
    2d9c:	20001428 	.word	0x20001428
    2da0:	20000376 	.word	0x20000376
    2da4:	b510      	push	{r4, lr}
    2da6:	2214      	movs	r2, #20
    2da8:	2100      	movs	r1, #0
    2daa:	4808      	ldr	r0, [pc, #32]	; (2dcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dac:	f00e f8d5 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2db0:	4806      	ldr	r0, [pc, #24]	; (2dcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2db2:	2212      	movs	r2, #18
    2db4:	2100      	movs	r1, #0
    2db6:	3814      	subs	r0, #20
    2db8:	f00e f8cf 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2dbc:	4803      	ldr	r0, [pc, #12]	; (2dcc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    2dbe:	2101      	movs	r1, #1
    2dc0:	7301      	strb	r1, [r0, #12]
    2dc2:	1d01      	adds	r1, r0, #4
    2dc4:	6041      	str	r1, [r0, #4]
    2dc6:	6001      	str	r1, [r0, #0]
    2dc8:	bd10      	pop	{r4, pc}
    2dca:	0000      	.short	0x0000
    2dcc:	20001424 	.word	0x20001424

00002dd0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2dd0:	b4f0      	push	{r4, r5, r6, r7}
    2dd2:	8150      	strh	r0, [r2, #10]
    2dd4:	890c      	ldrh	r4, [r1, #8]
    2dd6:	8194      	strh	r4, [r2, #12]
    2dd8:	898b      	ldrh	r3, [r1, #12]
    2dda:	81d3      	strh	r3, [r2, #14]
    2ddc:	8948      	ldrh	r0, [r1, #10]
    2dde:	8210      	strh	r0, [r2, #16]
    2de0:	89cd      	ldrh	r5, [r1, #14]
    2de2:	8255      	strh	r5, [r2, #18]
    2de4:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2de6:	42ae      	cmp	r6, r5
    2de8:	d108      	bne.n	2dfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2dea:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2dec:	4285      	cmp	r5, r0
    2dee:	d105      	bne.n	2dfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2df0:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2df2:	429d      	cmp	r5, r3
    2df4:	d102      	bne.n	2dfc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    2df6:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    2df8:	42a3      	cmp	r3, r4
    2dfa:	d001      	beq.n	2e00 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    2dfc:	2301      	movs	r3, #1
    2dfe:	e000      	b.n	2e02 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2e00:	2300      	movs	r3, #0
    2e02:	7513      	strb	r3, [r2, #20]
    2e04:	8548      	strh	r0, [r1, #42]	; 0x2a
    2e06:	8a50      	ldrh	r0, [r2, #18]
    2e08:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2e0a:	8990      	ldrh	r0, [r2, #12]
    2e0c:	8588      	strh	r0, [r1, #44]	; 0x2c
    2e0e:	89d0      	ldrh	r0, [r2, #14]
    2e10:	8608      	strh	r0, [r1, #48]	; 0x30
    2e12:	bcf0      	pop	{r4, r5, r6, r7}
    2e14:	4901      	ldr	r1, [pc, #4]	; (2e1c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    2e16:	4610      	mov	r0, r2
    2e18:	f00b bada 	b.w	e3d0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    2e1c:	00002e41 	.word	0x00002e41

00002e20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2e20:	8150      	strh	r0, [r2, #10]
    2e22:	8a88      	ldrh	r0, [r1, #20]
    2e24:	8190      	strh	r0, [r2, #12]
    2e26:	8ac8      	ldrh	r0, [r1, #22]
    2e28:	81d0      	strh	r0, [r2, #14]
    2e2a:	8b08      	ldrh	r0, [r1, #24]
    2e2c:	8210      	strh	r0, [r2, #16]
    2e2e:	8b48      	ldrh	r0, [r1, #26]
    2e30:	8250      	strh	r0, [r2, #18]
    2e32:	4902      	ldr	r1, [pc, #8]	; (2e3c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    2e34:	4610      	mov	r0, r2
    2e36:	f00b bac8 	b.w	e3ca <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    2e3a:	0000      	.short	0x0000
    2e3c:	00002e81 	.word	0x00002e81
    2e40:	b538      	push	{r3, r4, r5, lr}
    2e42:	f1a0 0418 	sub.w	r4, r0, #24
    2e46:	7d00      	ldrb	r0, [r0, #20]
    2e48:	460d      	mov	r5, r1
    2e4a:	f000 0001 	and.w	r0, r0, #1
    2e4e:	f7ff fd99 	bl	2984 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2e52:	2100      	movs	r1, #0
    2e54:	b108      	cbz	r0, 2e5a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    2e56:	9100      	str	r1, [sp, #0]
    2e58:	e00c      	b.n	2e74 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    2e5a:	7069      	strb	r1, [r5, #1]
    2e5c:	2013      	movs	r0, #19
    2e5e:	7028      	strb	r0, [r5, #0]
    2e60:	f854 0f22 	ldr.w	r0, [r4, #34]!
    2e64:	6068      	str	r0, [r5, #4]
    2e66:	6860      	ldr	r0, [r4, #4]
    2e68:	60a8      	str	r0, [r5, #8]
    2e6a:	68a0      	ldr	r0, [r4, #8]
    2e6c:	60e8      	str	r0, [r5, #12]
    2e6e:	4803      	ldr	r0, [pc, #12]	; (2e7c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    2e70:	6840      	ldr	r0, [r0, #4]
    2e72:	9000      	str	r0, [sp, #0]
    2e74:	f8bd 0000 	ldrh.w	r0, [sp]
    2e78:	bd38      	pop	{r3, r4, r5, pc}
    2e7a:	0000      	.short	0x0000
    2e7c:	00002f08 	.word	0x00002f08
    2e80:	b570      	push	{r4, r5, r6, lr}
    2e82:	b086      	sub	sp, #24
    2e84:	460e      	mov	r6, r1
    2e86:	4604      	mov	r4, r0
    2e88:	f7ff fd88 	bl	299c <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2e8c:	2500      	movs	r5, #0
    2e8e:	b358      	cbz	r0, 2ee8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    2e90:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    2e94:	7225      	strb	r5, [r4, #8]
    2e96:	8804      	ldrh	r4, [r0, #0]
    2e98:	a903      	add	r1, sp, #12
    2e9a:	4620      	mov	r0, r4
    2e9c:	f00d f836 	bl	ff0c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    2ea0:	b108      	cbz	r0, 2ea6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    2ea2:	21fe      	movs	r1, #254	; 0xfe
    2ea4:	e017      	b.n	2ed6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    2ea6:	f8ad 4000 	strh.w	r4, [sp]
    2eaa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    2eae:	f8ad 0002 	strh.w	r0, [sp, #2]
    2eb2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    2eb6:	f8ad 0004 	strh.w	r0, [sp, #4]
    2eba:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    2ebe:	f8ad 0006 	strh.w	r0, [sp, #6]
    2ec2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    2ec6:	f8ad 0008 	strh.w	r0, [sp, #8]
    2eca:	4668      	mov	r0, sp
    2ecc:	f00d f85a 	bl	ff84 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    2ed0:	b120      	cbz	r0, 2edc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    2ed2:	f240 1107 	movw	r1, #263	; 0x107
    2ed6:	202c      	movs	r0, #44	; 0x2c
    2ed8:	f7fd fd5a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2edc:	f8cd 5000 	str.w	r5, [sp]
    2ee0:	f8bd 0000 	ldrh.w	r0, [sp]
    2ee4:	b006      	add	sp, #24
    2ee6:	bd70      	pop	{r4, r5, r6, pc}
    2ee8:	201b      	movs	r0, #27
    2eea:	7030      	strb	r0, [r6, #0]
    2eec:	7075      	strb	r5, [r6, #1]
    2eee:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    2ef2:	6070      	str	r0, [r6, #4]
    2ef4:	6860      	ldr	r0, [r4, #4]
    2ef6:	60b0      	str	r0, [r6, #8]
    2ef8:	8920      	ldrh	r0, [r4, #8]
    2efa:	81b0      	strh	r0, [r6, #12]
    2efc:	4801      	ldr	r0, [pc, #4]	; (2f04 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    2efe:	6800      	ldr	r0, [r0, #0]
    2f00:	9000      	str	r0, [sp, #0]
    2f02:	e7ed      	b.n	2ee0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    2f04:	00002f08 	.word	0x00002f08
    2f08:	00000004 	.word	0x00000004
    2f0c:	00000004 	.word	0x00000004

00002f10 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f12:	f06f 021f 	mvn.w	r2, #31
    2f16:	0c01      	lsrs	r1, r0, #16
    2f18:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2f1c:	251f      	movs	r5, #31
    2f1e:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f22:	3854      	subs	r0, #84	; 0x54
    2f24:	d00d      	beq.n	2f42 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f26:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2f2a:	3855      	subs	r0, #85	; 0x55
    2f2c:	d009      	beq.n	2f42 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f2e:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2f32:	38aa      	subs	r0, #170	; 0xaa
    2f34:	d005      	beq.n	2f42 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f36:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2f3a:	38aa      	subs	r0, #170	; 0xaa
    2f3c:	d001      	beq.n	2f42 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2f3e:	2001      	movs	r0, #1
    2f40:	e000      	b.n	2f44 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2f42:	2000      	movs	r0, #0
    2f44:	2200      	movs	r2, #0
    2f46:	4613      	mov	r3, r2
    2f48:	ea4f 0402 	mov.w	r4, r2
    2f4c:	ea82 0701 	eor.w	r7, r2, r1
    2f50:	43ff      	mvns	r7, r7
    2f52:	431f      	orrs	r7, r3
    2f54:	1c7f      	adds	r7, r7, #1
    2f56:	d00f      	beq.n	2f78 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2f58:	f006 0701 	and.w	r7, r6, #1
    2f5c:	0852      	lsrs	r2, r2, #1
    2f5e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2f62:	f005 0701 	and.w	r7, r5, #1
    2f66:	085b      	lsrs	r3, r3, #1
    2f68:	0876      	lsrs	r6, r6, #1
    2f6a:	086d      	lsrs	r5, r5, #1
    2f6c:	1c64      	adds	r4, r4, #1
    2f6e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f72:	2c16      	cmp	r4, #22
    2f74:	d3ea      	bcc.n	2f4c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f78:	2000      	movs	r0, #0
    2f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f7c:	b510      	push	{r4, lr}
    2f7e:	4804      	ldr	r0, [pc, #16]	; (2f90 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f80:	f00b fb47 	bl	e612 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2f84:	4802      	ldr	r0, [pc, #8]	; (2f90 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f8a:	3008      	adds	r0, #8
    2f8c:	f00b bb41 	b.w	e612 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    2f90:	200000cc 	.word	0x200000cc

00002f94 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    2f94:	4801      	ldr	r0, [pc, #4]	; (2f9c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    2f96:	f000 b809 	b.w	2fac <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2f9a:	0000      	.short	0x0000
    2f9c:	200000cc 	.word	0x200000cc

00002fa0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2fa0:	4801      	ldr	r0, [pc, #4]	; (2fa8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2fa2:	f000 b803 	b.w	2fac <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2fa6:	0000      	.short	0x0000
    2fa8:	200000d4 	.word	0x200000d4
    2fac:	b510      	push	{r4, lr}
    2fae:	e9d0 2100 	ldrd	r2, r1, [r0]
    2fb2:	4b09      	ldr	r3, [pc, #36]	; (2fd8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2fb4:	4c09      	ldr	r4, [pc, #36]	; (2fdc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2fb6:	4353      	muls	r3, r2
    2fb8:	4354      	muls	r4, r2
    2fba:	4051      	eors	r1, r2
    2fbc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fc0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fc4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fc8:	e9c0 2100 	strd	r2, r1, [r0]
    2fcc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2fd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fd4:	4618      	mov	r0, r3
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	c6ef3760 	.word	0xc6ef3760
    2fdc:	9e3779bb 	.word	0x9e3779bb

00002fe0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2fe0:	b570      	push	{r4, r5, r6, lr}
    2fe2:	6844      	ldr	r4, [r0, #4]
    2fe4:	1d09      	adds	r1, r1, #4
    2fe6:	2500      	movs	r5, #0
    2fe8:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    2fec:	3480      	adds	r4, #128	; 0x80
    2fee:	07c0      	lsls	r0, r0, #31
    2ff0:	d001      	beq.n	2ff6 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    2ff2:	2001      	movs	r0, #1
    2ff4:	bd70      	pop	{r4, r5, r6, pc}
    2ff6:	6848      	ldr	r0, [r1, #4]
    2ff8:	6809      	ldr	r1, [r1, #0]
    2ffa:	4b0c      	ldr	r3, [pc, #48]	; (302c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    2ffc:	f641 0207 	movw	r2, #6151	; 0x1807
    3000:	4019      	ands	r1, r3
    3002:	66e1      	str	r1, [r4, #108]	; 0x6c
    3004:	4010      	ands	r0, r2
    3006:	6720      	str	r0, [r4, #112]	; 0x70
    3008:	211b      	movs	r1, #27
    300a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    300e:	f00b fc26 	bl	e85e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3012:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    3016:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    301a:	1c40      	adds	r0, r0, #1
    301c:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3020:	68e0      	ldr	r0, [r4, #12]
    3022:	f040 0001 	orr.w	r0, r0, #1
    3026:	60e0      	str	r0, [r4, #12]
    3028:	2000      	movs	r0, #0
    302a:	bd70      	pop	{r4, r5, r6, pc}
    302c:	f704492f 	.word	0xf704492f

00003030 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    3030:	b510      	push	{r4, lr}
    3032:	1d04      	adds	r4, r0, #4
    3034:	f004 fa04 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3038:	4b03      	ldr	r3, [pc, #12]	; (3048 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    303a:	f641 0207 	movw	r2, #6151	; 0x1807
    303e:	4018      	ands	r0, r3
    3040:	4011      	ands	r1, r2
    3042:	6020      	str	r0, [r4, #0]
    3044:	6061      	str	r1, [r4, #4]
    3046:	bd10      	pop	{r4, pc}
    3048:	f704492f 	.word	0xf704492f

0000304c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3050:	7803      	ldrb	r3, [r0, #0]
    3052:	6840      	ldr	r0, [r0, #4]
    3054:	1d0f      	adds	r7, r1, #4
    3056:	f100 0580 	add.w	r5, r0, #128	; 0x80
    305a:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    305e:	4606      	mov	r6, r0
    3060:	f04f 0800 	mov.w	r8, #0
    3064:	7f6a      	ldrb	r2, [r5, #29]
    3066:	2107      	movs	r1, #7
    3068:	4628      	mov	r0, r5
    306a:	f00a fe0f 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    306e:	b1e0      	cbz	r0, 30aa <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3070:	6839      	ldr	r1, [r7, #0]
    3072:	4b18      	ldr	r3, [pc, #96]	; (30d4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    3074:	6878      	ldr	r0, [r7, #4]
    3076:	4019      	ands	r1, r3
    3078:	f641 0207 	movw	r2, #6151	; 0x1807
    307c:	66e9      	str	r1, [r5, #108]	; 0x6c
    307e:	4010      	ands	r0, r2
    3080:	6728      	str	r0, [r5, #112]	; 0x70
    3082:	211b      	movs	r1, #27
    3084:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3088:	f00b fbe9 	bl	e85e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    308c:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    3090:	f885 801d 	strb.w	r8, [r5, #29]
    3094:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3098:	4640      	mov	r0, r8
    309a:	f88d 1000 	strb.w	r1, [sp]
    309e:	9900      	ldr	r1, [sp, #0]
    30a0:	9100      	str	r1, [sp, #0]
    30a2:	f89d 1000 	ldrb.w	r1, [sp]
    30a6:	b991      	cbnz	r1, 30ce <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    30a8:	e002      	b.n	30b0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    30aa:	2001      	movs	r0, #1
    30ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30b0:	8831      	ldrh	r1, [r6, #0]
    30b2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    30b6:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    30ba:	6839      	ldr	r1, [r7, #0]
    30bc:	66e1      	str	r1, [r4, #108]	; 0x6c
    30be:	6879      	ldr	r1, [r7, #4]
    30c0:	6721      	str	r1, [r4, #112]	; 0x70
    30c2:	2202      	movs	r2, #2
    30c4:	4904      	ldr	r1, [pc, #16]	; (30d8 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    30c6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30ca:	f00b f987 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30ce:	2000      	movs	r0, #0
    30d0:	e7ec      	b.n	30ac <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    30d2:	0000      	.short	0x0000
    30d4:	f704492f 	.word	0xf704492f
    30d8:	0000e8cb 	.word	0x0000e8cb

000030dc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30dc:	b570      	push	{r4, r5, r6, lr}
    30de:	1d0d      	adds	r5, r1, #4
    30e0:	6844      	ldr	r4, [r0, #4]
    30e2:	f004 f9ad 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    30e6:	f641 0207 	movw	r2, #6151	; 0x1807
    30ea:	4b05      	ldr	r3, [pc, #20]	; (3100 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    30ec:	4011      	ands	r1, r2
    30ee:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    30f2:	4018      	ands	r0, r3
    30f4:	4002      	ands	r2, r0
    30f6:	f362 0007 	bfi	r0, r2, #0, #8
    30fa:	6028      	str	r0, [r5, #0]
    30fc:	6069      	str	r1, [r5, #4]
    30fe:	bd70      	pop	{r4, r5, r6, pc}
    3100:	f704492f 	.word	0xf704492f

00003104 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    3104:	6841      	ldr	r1, [r0, #4]
    3106:	b082      	sub	sp, #8
    3108:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    310c:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    3110:	f88d 2000 	strb.w	r2, [sp]
    3114:	9a00      	ldr	r2, [sp, #0]
    3116:	9200      	str	r2, [sp, #0]
    3118:	f89d 2000 	ldrb.w	r2, [sp]
    311c:	2a00      	cmp	r2, #0
    311e:	d10b      	bne.n	3138 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    3120:	8809      	ldrh	r1, [r1, #0]
    3122:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    3126:	211a      	movs	r1, #26
    3128:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    312c:	2202      	movs	r2, #2
    312e:	4903      	ldr	r1, [pc, #12]	; (313c <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    3130:	3060      	adds	r0, #96	; 0x60
    3132:	b002      	add	sp, #8
    3134:	f00b b952 	b.w	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3138:	b002      	add	sp, #8
    313a:	4770      	bx	lr
    313c:	0000e8cb 	.word	0x0000e8cb

00003140 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    3140:	b570      	push	{r4, r5, r6, lr}
    3142:	6844      	ldr	r4, [r0, #4]
    3144:	460d      	mov	r5, r1
    3146:	7803      	ldrb	r3, [r0, #0]
    3148:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    314c:	3480      	adds	r4, #128	; 0x80
    314e:	2600      	movs	r6, #0
    3150:	2108      	movs	r1, #8
    3152:	4620      	mov	r0, r4
    3154:	f00a fd9a 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3158:	b920      	cbnz	r0, 3164 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    315a:	7b20      	ldrb	r0, [r4, #12]
    315c:	0780      	lsls	r0, r0, #30
    315e:	d501      	bpl.n	3164 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3160:	2001      	movs	r0, #1
    3162:	bd70      	pop	{r4, r5, r6, pc}
    3164:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3168:	0780      	lsls	r0, r0, #30
    316a:	d419      	bmi.n	31a0 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    316c:	4628      	mov	r0, r5
    316e:	f00b f8c8 	bl	e302 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    3172:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3176:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    317a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    317e:	8868      	ldrh	r0, [r5, #2]
    3180:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3184:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3188:	f040 0002 	orr.w	r0, r0, #2
    318c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    3190:	07c0      	lsls	r0, r0, #31
    3192:	d009      	beq.n	31a8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    3194:	2202      	movs	r2, #2
    3196:	4911      	ldr	r1, [pc, #68]	; (31dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3198:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    319c:	f00b f932 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    31a0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    31a4:	07c0      	lsls	r0, r0, #31
    31a6:	d110      	bne.n	31ca <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    31a8:	68e0      	ldr	r0, [r4, #12]
    31aa:	0781      	lsls	r1, r0, #30
    31ac:	d503      	bpl.n	31b6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    31ae:	214f      	movs	r1, #79	; 0x4f
    31b0:	2040      	movs	r0, #64	; 0x40
    31b2:	f7fd fbed 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31b6:	f040 0002 	orr.w	r0, r0, #2
    31ba:	60e0      	str	r0, [r4, #12]
    31bc:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    31c0:	1c40      	adds	r0, r0, #1
    31c2:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    31c6:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    31ca:	7f60      	ldrb	r0, [r4, #29]
    31cc:	2801      	cmp	r0, #1
    31ce:	d102      	bne.n	31d6 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    31d0:	7766      	strb	r6, [r4, #29]
    31d2:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    31d6:	2000      	movs	r0, #0
    31d8:	bd70      	pop	{r4, r5, r6, pc}
    31da:	0000      	.short	0x0000
    31dc:	0000e979 	.word	0x0000e979

000031e0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    31e0:	4a04      	ldr	r2, [pc, #16]	; (31f4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    31e2:	6892      	ldr	r2, [r2, #8]
    31e4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    31e8:	434b      	muls	r3, r1
    31ea:	4342      	muls	r2, r0
    31ec:	eb03 3022 	add.w	r0, r3, r2, asr #12
    31f0:	4770      	bx	lr
    31f2:	0000      	.short	0x0000
    31f4:	200000dc 	.word	0x200000dc

000031f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    31f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31fa:	6844      	ldr	r4, [r0, #4]
    31fc:	4606      	mov	r6, r0
    31fe:	f104 0580 	add.w	r5, r4, #128	; 0x80
    3202:	f000 f87b 	bl	32fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    3206:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    320a:	2901      	cmp	r1, #1
    320c:	d11a      	bne.n	3244 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    320e:	2800      	cmp	r0, #0
    3210:	d018      	beq.n	3244 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3212:	6870      	ldr	r0, [r6, #4]
    3214:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    3218:	f88d 1000 	strb.w	r1, [sp]
    321c:	9900      	ldr	r1, [sp, #0]
    321e:	9100      	str	r1, [sp, #0]
    3220:	f89d 1000 	ldrb.w	r1, [sp]
    3224:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    3228:	2900      	cmp	r1, #0
    322a:	d10b      	bne.n	3244 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    322c:	8821      	ldrh	r1, [r4, #0]
    322e:	8141      	strh	r1, [r0, #10]
    3230:	7e69      	ldrb	r1, [r5, #25]
    3232:	7301      	strb	r1, [r0, #12]
    3234:	7ea9      	ldrb	r1, [r5, #26]
    3236:	7341      	strb	r1, [r0, #13]
    3238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    323c:	2202      	movs	r2, #2
    323e:	4902      	ldr	r1, [pc, #8]	; (3248 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3240:	f00b b8cc 	b.w	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3246:	0000      	.short	0x0000
    3248:	0000ea01 	.word	0x0000ea01
    324c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3250:	4a0d      	ldr	r2, [pc, #52]	; (3288 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3252:	b510      	push	{r4, lr}
    3254:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3258:	1309      	asrs	r1, r1, #12
    325a:	1300      	asrs	r0, r0, #12
    325c:	b24b      	sxtb	r3, r1
    325e:	f992 4000 	ldrsb.w	r4, [r2]
    3262:	4240      	negs	r0, r0
    3264:	2100      	movs	r1, #0
    3266:	b240      	sxtb	r0, r0
    3268:	42a3      	cmp	r3, r4
    326a:	da02      	bge.n	3272 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    326c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3270:	e005      	b.n	327e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3272:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3276:	42a3      	cmp	r3, r4
    3278:	dd04      	ble.n	3284 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    327a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    327e:	4408      	add	r0, r1
    3280:	f300 0107 	ssat	r1, #8, r0
    3284:	4608      	mov	r0, r1
    3286:	bd10      	pop	{r4, pc}
    3288:	200000dc 	.word	0x200000dc
    328c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3290:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3294:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3298:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    329c:	f00c fa68 	bl	f770 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    32a0:	4606      	mov	r6, r0
    32a2:	68a0      	ldr	r0, [r4, #8]
    32a4:	f7ff ffd2 	bl	324c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    32a8:	0007      	movs	r7, r0
    32aa:	d021      	beq.n	32f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32ac:	4620      	mov	r0, r4
    32ae:	f00b fbaf 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    32b2:	2800      	cmp	r0, #0
    32b4:	d01c      	beq.n	32f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32b6:	8828      	ldrh	r0, [r5, #0]
    32b8:	4669      	mov	r1, sp
    32ba:	f00a fcd0 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    32be:	b118      	cbz	r0, 32c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    32c0:	2185      	movs	r1, #133	; 0x85
    32c2:	207a      	movs	r0, #122	; 0x7a
    32c4:	f7fd fb64 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32c8:	1c76      	adds	r6, r6, #1
    32ca:	b2f1      	uxtb	r1, r6
    32cc:	2302      	movs	r3, #2
    32ce:	463a      	mov	r2, r7
    32d0:	4668      	mov	r0, sp
    32d2:	f00c fa6c 	bl	f7ae <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    32d6:	2800      	cmp	r0, #0
    32d8:	d10a      	bne.n	32f0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    32da:	4806      	ldr	r0, [pc, #24]	; (32f4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    32dc:	4906      	ldr	r1, [pc, #24]	; (32f8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    32de:	7900      	ldrb	r0, [r0, #4]
    32e0:	fba0 6501 	umull	r6, r5, r0, r1
    32e4:	f00d fc2d 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32e8:	1980      	adds	r0, r0, r6
    32ea:	4169      	adcs	r1, r5
    32ec:	e9c4 0100 	strd	r0, r1, [r4]
    32f0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    32f4:	200000dc 	.word	0x200000dc
    32f8:	000f4240 	.word	0x000f4240
    32fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3300:	4607      	mov	r7, r0
    3302:	f7ff fa91 	bl	2828 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3306:	687c      	ldr	r4, [r7, #4]
    3308:	4605      	mov	r5, r0
    330a:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    330e:	3480      	adds	r4, #128	; 0x80
    3310:	287f      	cmp	r0, #127	; 0x7f
    3312:	d042      	beq.n	339a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    3314:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3318:	687e      	ldr	r6, [r7, #4]
    331a:	76a0      	strb	r0, [r4, #26]
    331c:	4629      	mov	r1, r5
    331e:	68a0      	ldr	r0, [r4, #8]
    3320:	f7ff ff5e 	bl	31e0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3324:	60a0      	str	r0, [r4, #8]
    3326:	481e      	ldr	r0, [pc, #120]	; (33a0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3328:	7940      	ldrb	r0, [r0, #5]
    332a:	b1c0      	cbz	r0, 335e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    332c:	6878      	ldr	r0, [r7, #4]
    332e:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3332:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3336:	f7ff ff89 	bl	324c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    333a:	b180      	cbz	r0, 335e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    333c:	4640      	mov	r0, r8
    333e:	f00b fb67 	bl	ea10 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3342:	b160      	cbz	r0, 335e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3344:	6878      	ldr	r0, [r7, #4]
    3346:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    334a:	4607      	mov	r7, r0
    334c:	f004 fca2 	bl	7c94 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3350:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3354:	4913      	ldr	r1, [pc, #76]	; (33a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3356:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    335a:	f00b f83c 	bl	e3d6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    335e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3362:	2100      	movs	r1, #0
    3364:	1a28      	subs	r0, r5, r0
    3366:	d500      	bpl.n	336a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3368:	4240      	negs	r0, r0
    336a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    336e:	4282      	cmp	r2, r0
    3370:	dc10      	bgt.n	3394 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3372:	2aff      	cmp	r2, #255	; 0xff
    3374:	d00e      	beq.n	3394 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3376:	7f20      	ldrb	r0, [r4, #28]
    3378:	1c40      	adds	r0, r0, #1
    337a:	b2c0      	uxtb	r0, r0
    337c:	7720      	strb	r0, [r4, #28]
    337e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3382:	4290      	cmp	r0, r2
    3384:	d802      	bhi.n	338c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    3386:	7ee0      	ldrb	r0, [r4, #27]
    3388:	287f      	cmp	r0, #127	; 0x7f
    338a:	d103      	bne.n	3394 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    338c:	2000      	movs	r0, #0
    338e:	76e5      	strb	r5, [r4, #27]
    3390:	7720      	strb	r0, [r4, #28]
    3392:	2101      	movs	r1, #1
    3394:	4608      	mov	r0, r1
    3396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    339a:	2000      	movs	r0, #0
    339c:	e7fb      	b.n	3396 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    339e:	0000      	.short	0x0000
    33a0:	200000dc 	.word	0x200000dc
    33a4:	0000328d 	.word	0x0000328d

000033a8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    33a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33aa:	f00b fb4d 	bl	ea48 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    33ae:	4604      	mov	r4, r0
    33b0:	460d      	mov	r5, r1
    33b2:	466a      	mov	r2, sp
    33b4:	f000 f862 	bl	347c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    33b8:	b108      	cbz	r0, 33be <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    33ba:	2001      	movs	r0, #1
    33bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33be:	480f      	ldr	r0, [pc, #60]	; (33fc <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    33c0:	7803      	ldrb	r3, [r0, #0]
    33c2:	7841      	ldrb	r1, [r0, #1]
    33c4:	428b      	cmp	r3, r1
    33c6:	d101      	bne.n	33cc <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    33c8:	2000      	movs	r0, #0
    33ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33cc:	461a      	mov	r2, r3
    33ce:	6841      	ldr	r1, [r0, #4]
    33d0:	e008      	b.n	33e4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    33d2:	bf00      	nop
    33d4:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    33d8:	1e52      	subs	r2, r2, #1
    33da:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    33de:	e9c6 7c00 	strd	r7, ip, [r6]
    33e2:	b2d2      	uxtb	r2, r2
    33e4:	f89d 6000 	ldrb.w	r6, [sp]
    33e8:	42b2      	cmp	r2, r6
    33ea:	d8f3      	bhi.n	33d4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    33ec:	b2f2      	uxtb	r2, r6
    33ee:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    33f2:	1c5b      	adds	r3, r3, #1
    33f4:	e9c1 4500 	strd	r4, r5, [r1]
    33f8:	7003      	strb	r3, [r0, #0]
    33fa:	e7de      	b.n	33ba <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    33fc:	200000e8 	.word	0x200000e8

00003400 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    3400:	b510      	push	{r4, lr}
    3402:	0742      	lsls	r2, r0, #29
    3404:	d003      	beq.n	340e <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    3406:	2163      	movs	r1, #99	; 0x63
    3408:	2048      	movs	r0, #72	; 0x48
    340a:	f7fd fac1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    340e:	b120      	cbz	r0, 341a <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    3410:	4a03      	ldr	r2, [pc, #12]	; (3420 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    3412:	7051      	strb	r1, [r2, #1]
    3414:	6050      	str	r0, [r2, #4]
    3416:	2000      	movs	r0, #0
    3418:	7010      	strb	r0, [r2, #0]
    341a:	00c8      	lsls	r0, r1, #3
    341c:	bd10      	pop	{r4, pc}
    341e:	0000      	.short	0x0000
    3420:	200000e8 	.word	0x200000e8

00003424 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    3424:	b538      	push	{r3, r4, r5, lr}
    3426:	f00b fb0f 	bl	ea48 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    342a:	466a      	mov	r2, sp
    342c:	f000 f826 	bl	347c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3430:	2800      	cmp	r0, #0
    3432:	d014      	beq.n	345e <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    3434:	4a0a      	ldr	r2, [pc, #40]	; (3460 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    3436:	7810      	ldrb	r0, [r2, #0]
    3438:	1e40      	subs	r0, r0, #1
    343a:	b2c1      	uxtb	r1, r0
    343c:	7011      	strb	r1, [r2, #0]
    343e:	f89d 0000 	ldrb.w	r0, [sp]
    3442:	6852      	ldr	r2, [r2, #4]
    3444:	e008      	b.n	3458 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3446:	bf00      	nop
    3448:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    344c:	1c40      	adds	r0, r0, #1
    344e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3452:	e9c3 4500 	strd	r4, r5, [r3]
    3456:	b2c0      	uxtb	r0, r0
    3458:	4288      	cmp	r0, r1
    345a:	d3f5      	bcc.n	3448 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    345c:	2001      	movs	r0, #1
    345e:	bd38      	pop	{r3, r4, r5, pc}
    3460:	200000e8 	.word	0x200000e8

00003464 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3464:	4901      	ldr	r1, [pc, #4]	; (346c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3466:	2000      	movs	r0, #0
    3468:	7008      	strb	r0, [r1, #0]
    346a:	4770      	bx	lr
    346c:	200000e8 	.word	0x200000e8

00003470 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3470:	4801      	ldr	r0, [pc, #4]	; (3478 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3472:	7840      	ldrb	r0, [r0, #1]
    3474:	4770      	bx	lr
    3476:	0000      	.short	0x0000
    3478:	200000e8 	.word	0x200000e8
    347c:	b5f0      	push	{r4, r5, r6, r7, lr}
    347e:	4d20      	ldr	r5, [pc, #128]	; (3500 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3480:	2300      	movs	r3, #0
    3482:	7013      	strb	r3, [r2, #0]
    3484:	782b      	ldrb	r3, [r5, #0]
    3486:	b323      	cbz	r3, 34d2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3488:	2400      	movs	r4, #0
    348a:	1e5b      	subs	r3, r3, #1
    348c:	b2db      	uxtb	r3, r3
    348e:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3492:	e00b      	b.n	34ac <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3494:	18e5      	adds	r5, r4, r3
    3496:	086d      	lsrs	r5, r5, #1
    3498:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    349c:	e9d6 7600 	ldrd	r7, r6, [r6]
    34a0:	1a3f      	subs	r7, r7, r0
    34a2:	418e      	sbcs	r6, r1
    34a4:	d201      	bcs.n	34aa <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    34a6:	462c      	mov	r4, r5
    34a8:	e000      	b.n	34ac <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    34aa:	462b      	mov	r3, r5
    34ac:	1b1d      	subs	r5, r3, r4
    34ae:	2d01      	cmp	r5, #1
    34b0:	dcf0      	bgt.n	3494 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    34b2:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    34b6:	e9d6 5600 	ldrd	r5, r6, [r6]
    34ba:	ea80 0705 	eor.w	r7, r0, r5
    34be:	ea81 0e06 	eor.w	lr, r1, r6
    34c2:	ea57 070e 	orrs.w	r7, r7, lr
    34c6:	d005      	beq.n	34d4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    34c8:	1b45      	subs	r5, r0, r5
    34ca:	eb71 0506 	sbcs.w	r5, r1, r6
    34ce:	d203      	bcs.n	34d8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    34d0:	7014      	strb	r4, [r2, #0]
    34d2:	e010      	b.n	34f6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    34d4:	7014      	strb	r4, [r2, #0]
    34d6:	e011      	b.n	34fc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    34d8:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    34dc:	e9d5 4500 	ldrd	r4, r5, [r5]
    34e0:	ea80 0604 	eor.w	r6, r0, r4
    34e4:	ea81 0705 	eor.w	r7, r1, r5
    34e8:	433e      	orrs	r6, r7
    34ea:	d006      	beq.n	34fa <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    34ec:	1b00      	subs	r0, r0, r4
    34ee:	41a9      	sbcs	r1, r5
    34f0:	d300      	bcc.n	34f4 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    34f2:	1c5b      	adds	r3, r3, #1
    34f4:	7013      	strb	r3, [r2, #0]
    34f6:	2000      	movs	r0, #0
    34f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34fa:	7013      	strb	r3, [r2, #0]
    34fc:	2001      	movs	r0, #1
    34fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3500:	200000e8 	.word	0x200000e8

00003504 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3504:	b570      	push	{r4, r5, r6, lr}
    3506:	4604      	mov	r4, r0
    3508:	7c00      	ldrb	r0, [r0, #16]
    350a:	b300      	cbz	r0, 354e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    350c:	2802      	cmp	r0, #2
    350e:	d01e      	beq.n	354e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3510:	f05f 0001 	movs.w	r0, #1
    3514:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3518:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    351c:	460d      	mov	r5, r1
    351e:	b1c0      	cbz	r0, 3552 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3520:	7de0      	ldrb	r0, [r4, #23]
    3522:	b1f0      	cbz	r0, 3562 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3524:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3528:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    352c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3530:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3534:	7c20      	ldrb	r0, [r4, #16]
    3536:	f00b fab7 	bl	eaa8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    353a:	7620      	strb	r0, [r4, #24]
    353c:	2008      	movs	r0, #8
    353e:	7660      	strb	r0, [r4, #25]
    3540:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3544:	4629      	mov	r1, r5
    3546:	f00b fa9b 	bl	ea80 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    354a:	b9a8      	cbnz	r0, 3578 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    354c:	e00e      	b.n	356c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    354e:	2000      	movs	r0, #0
    3550:	e7e0      	b.n	3514 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3552:	2000      	movs	r0, #0
    3554:	f7fe f980 	bl	1858 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3558:	2800      	cmp	r0, #0
    355a:	d1eb      	bne.n	3534 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    355c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3560:	e001      	b.n	3566 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3562:	f240 41be 	movw	r1, #1214	; 0x4be
    3566:	202d      	movs	r0, #45	; 0x2d
    3568:	f7fd fa12 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    356c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3570:	4629      	mov	r1, r5
    3572:	f00b fa8e 	bl	ea92 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3576:	b100      	cbz	r0, 357a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3578:	2001      	movs	r0, #1
    357a:	76a0      	strb	r0, [r4, #26]
    357c:	7e20      	ldrb	r0, [r4, #24]
    357e:	b130      	cbz	r0, 358e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3580:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3584:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3588:	f00a fb32 	bl	dbf0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    358c:	7660      	strb	r0, [r4, #25]
    358e:	f7fe ffb5 	bl	24fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3592:	490c      	ldr	r1, [pc, #48]	; (35c4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3594:	fba0 2301 	umull	r2, r3, r0, r1
    3598:	f104 0048 	add.w	r0, r4, #72	; 0x48
    359c:	f00b fbf6 	bl	ed8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    35a0:	2100      	movs	r1, #0
    35a2:	4620      	mov	r0, r4
    35a4:	f00b fbab 	bl	ecfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    35a8:	2000      	movs	r0, #0
    35aa:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    35ae:	78a0      	ldrb	r0, [r4, #2]
    35b0:	0740      	lsls	r0, r0, #29
    35b2:	d505      	bpl.n	35c0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    35b4:	4620      	mov	r0, r4
    35b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    35ba:	2100      	movs	r1, #0
    35bc:	f000 bdf0 	b.w	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    35c0:	bd70      	pop	{r4, r5, r6, pc}
    35c2:	0000      	.short	0x0000
    35c4:	000f4240 	.word	0x000f4240

000035c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    35c8:	b530      	push	{r4, r5, lr}
    35ca:	460c      	mov	r4, r1
    35cc:	b08d      	sub	sp, #52	; 0x34
    35ce:	4605      	mov	r5, r0
    35d0:	4601      	mov	r1, r0
    35d2:	2224      	movs	r2, #36	; 0x24
    35d4:	a802      	add	r0, sp, #8
    35d6:	f00d fc46 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    35da:	a80b      	add	r0, sp, #44	; 0x2c
    35dc:	f00b fc33 	bl	ee46 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    35e0:	7aa0      	ldrb	r0, [r4, #10]
    35e2:	f88d 0018 	strb.w	r0, [sp, #24]
    35e6:	7820      	ldrb	r0, [r4, #0]
    35e8:	f88d 0008 	strb.w	r0, [sp, #8]
    35ec:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    35f0:	f8ad 0000 	strh.w	r0, [sp]
    35f4:	f89d 0000 	ldrb.w	r0, [sp]
    35f8:	f000 0101 	and.w	r1, r0, #1
    35fc:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3600:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3604:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3608:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    360c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3610:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3614:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3618:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    361c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3620:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3624:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3628:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    362c:	f8ad 000a 	strh.w	r0, [sp, #10]
    3630:	7d20      	ldrb	r0, [r4, #20]
    3632:	2801      	cmp	r0, #1
    3634:	d006      	beq.n	3644 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3636:	2802      	cmp	r0, #2
    3638:	d004      	beq.n	3644 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    363a:	f240 21e9 	movw	r1, #745	; 0x2e9
    363e:	2006      	movs	r0, #6
    3640:	f7fd f9a6 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3644:	f88d 000c 	strb.w	r0, [sp, #12]
    3648:	7a61      	ldrb	r1, [r4, #9]
    364a:	a80b      	add	r0, sp, #44	; 0x2c
    364c:	f00b fbe2 	bl	ee14 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3650:	7d20      	ldrb	r0, [r4, #20]
    3652:	2101      	movs	r1, #1
    3654:	2802      	cmp	r0, #2
    3656:	d102      	bne.n	365e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3658:	7d60      	ldrb	r0, [r4, #21]
    365a:	1c40      	adds	r0, r0, #1
    365c:	b2c1      	uxtb	r1, r0
    365e:	7ea0      	ldrb	r0, [r4, #26]
    3660:	1c40      	adds	r0, r0, #1
    3662:	b2c2      	uxtb	r2, r0
    3664:	a80b      	add	r0, sp, #44	; 0x2c
    3666:	f00b fb9c 	bl	eda2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    366a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    366e:	0700      	lsls	r0, r0, #28
    3670:	d501      	bpl.n	3676 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3672:	2000      	movs	r0, #0
    3674:	e020      	b.n	36b8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3676:	a80b      	add	r0, sp, #44	; 0x2c
    3678:	f00b fba5 	bl	edc6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    367c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3680:	2228      	movs	r2, #40	; 0x28
    3682:	f000 fe31 	bl	42e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3686:	f240 2171 	movw	r1, #625	; 0x271
    368a:	f200 20db 	addw	r0, r0, #731	; 0x2db
    368e:	fbb0 f0f1 	udiv	r0, r0, r1
    3692:	4348      	muls	r0, r1
    3694:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3698:	f240 2371 	movw	r3, #625	; 0x271
    369c:	0a0a      	lsrs	r2, r1, #8
    369e:	f240 2171 	movw	r1, #625	; 0x271
    36a2:	434a      	muls	r2, r1
    36a4:	f8d4 1005 	ldr.w	r1, [r4, #5]
    36a8:	0a09      	lsrs	r1, r1, #8
    36aa:	4359      	muls	r1, r3
    36ac:	4290      	cmp	r0, r2
    36ae:	d801      	bhi.n	36b4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    36b0:	9204      	str	r2, [sp, #16]
    36b2:	e004      	b.n	36be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36b4:	4288      	cmp	r0, r1
    36b6:	d801      	bhi.n	36bc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    36b8:	9004      	str	r0, [sp, #16]
    36ba:	e000      	b.n	36be <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    36bc:	9104      	str	r1, [sp, #16]
    36be:	7ca0      	ldrb	r0, [r4, #18]
    36c0:	f88d 0017 	strb.w	r0, [sp, #23]
    36c4:	7e20      	ldrb	r0, [r4, #24]
    36c6:	2801      	cmp	r0, #1
    36c8:	d000      	beq.n	36cc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    36ca:	2000      	movs	r0, #0
    36cc:	f88d 0014 	strb.w	r0, [sp, #20]
    36d0:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36d2:	f00a f8f5 	bl	d8c0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    36d6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    36d8:	f00a f99a 	bl	da10 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    36dc:	2224      	movs	r2, #36	; 0x24
    36de:	a902      	add	r1, sp, #8
    36e0:	4628      	mov	r0, r5
    36e2:	f00d fbc0 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    36e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    36e8:	62a8      	str	r0, [r5, #40]	; 0x28
    36ea:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    36ee:	85a8      	strh	r0, [r5, #44]	; 0x2c
    36f0:	7ae0      	ldrb	r0, [r4, #11]
    36f2:	b168      	cbz	r0, 3710 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    36f4:	2802      	cmp	r0, #2
    36f6:	d00b      	beq.n	3710 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    36f8:	f05f 0001 	movs.w	r0, #1
    36fc:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3700:	68e0      	ldr	r0, [r4, #12]
    3702:	65a8      	str	r0, [r5, #88]	; 0x58
    3704:	8a20      	ldrh	r0, [r4, #16]
    3706:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    370a:	b00d      	add	sp, #52	; 0x34
    370c:	2000      	movs	r0, #0
    370e:	bd30      	pop	{r4, r5, pc}
    3710:	2000      	movs	r0, #0
    3712:	e7f3      	b.n	36fc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003714 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3714:	4a0a      	ldr	r2, [pc, #40]	; (3740 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3716:	b510      	push	{r4, lr}
    3718:	2100      	movs	r1, #0
    371a:	7011      	strb	r1, [r2, #0]
    371c:	4c09      	ldr	r4, [pc, #36]	; (3744 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    371e:	6060      	str	r0, [r4, #4]
    3720:	f000 f822 	bl	3768 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3724:	b110      	cbz	r0, 372c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3726:	f240 312e 	movw	r1, #814	; 0x32e
    372a:	e004      	b.n	3736 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    372c:	68a0      	ldr	r0, [r4, #8]
    372e:	2800      	cmp	r0, #0
    3730:	d104      	bne.n	373c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3732:	f240 3131 	movw	r1, #817	; 0x331
    3736:	202d      	movs	r0, #45	; 0x2d
    3738:	f7fd f92a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    373c:	bd10      	pop	{r4, pc}
    373e:	0000      	.short	0x0000
    3740:	20001438 	.word	0x20001438
    3744:	200000f0 	.word	0x200000f0

00003748 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3748:	4902      	ldr	r1, [pc, #8]	; (3754 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    374a:	4801      	ldr	r0, [pc, #4]	; (3750 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    374c:	6088      	str	r0, [r1, #8]
    374e:	4770      	bx	lr
    3750:	000042d0 	.word	0x000042d0
    3754:	200000f0 	.word	0x200000f0

00003758 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3758:	4902      	ldr	r1, [pc, #8]	; (3764 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    375a:	6008      	str	r0, [r1, #0]
    375c:	6889      	ldr	r1, [r1, #8]
    375e:	6809      	ldr	r1, [r1, #0]
    3760:	4708      	bx	r1
    3762:	0000      	.short	0x0000
    3764:	200000f0 	.word	0x200000f0

00003768 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3768:	4808      	ldr	r0, [pc, #32]	; (378c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    376a:	b510      	push	{r4, lr}
    376c:	7800      	ldrb	r0, [r0, #0]
    376e:	b110      	cbz	r0, 3776 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3770:	240c      	movs	r4, #12
    3772:	4620      	mov	r0, r4
    3774:	bd10      	pop	{r4, pc}
    3776:	2400      	movs	r4, #0
    3778:	2218      	movs	r2, #24
    377a:	4621      	mov	r1, r4
    377c:	4803      	ldr	r0, [pc, #12]	; (378c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    377e:	f00d fbec 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3782:	f004 f8d9 	bl	7938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3786:	f003 fefd 	bl	7584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    378a:	e7f2      	b.n	3772 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    378c:	20001438 	.word	0x20001438

00003790 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3790:	4904      	ldr	r1, [pc, #16]	; (37a4 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3792:	b510      	push	{r4, lr}
    3794:	7809      	ldrb	r1, [r1, #0]
    3796:	2901      	cmp	r1, #1
    3798:	d101      	bne.n	379e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    379a:	f000 fbd5 	bl	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    379e:	2000      	movs	r0, #0
    37a0:	bd10      	pop	{r4, pc}
    37a2:	0000      	.short	0x0000
    37a4:	20001438 	.word	0x20001438

000037a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    37a8:	4902      	ldr	r1, [pc, #8]	; (37b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    37aa:	4801      	ldr	r0, [pc, #4]	; (37b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    37ac:	6008      	str	r0, [r1, #0]
    37ae:	4770      	bx	lr
    37b0:	00004075 	.word	0x00004075
    37b4:	200000fc 	.word	0x200000fc

000037b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    37b8:	b510      	push	{r4, lr}
    37ba:	4604      	mov	r4, r0
    37bc:	7880      	ldrb	r0, [r0, #2]
    37be:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    37c2:	b158      	cbz	r0, 37dc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    37c4:	233c      	movs	r3, #60	; 0x3c
    37c6:	22ff      	movs	r2, #255	; 0xff
    37c8:	4620      	mov	r0, r4
    37ca:	69e1      	ldr	r1, [r4, #28]
    37cc:	f000 fbe2 	bl	3f94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    37d0:	2202      	movs	r2, #2
    37d2:	4904      	ldr	r1, [pc, #16]	; (37e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    37d4:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    37d8:	f00a fe00 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    37dc:	2001      	movs	r0, #1
    37de:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    37e2:	bd10      	pop	{r4, pc}
    37e4:	0000ec97 	.word	0x0000ec97
    37e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37ec:	000f      	movs	r7, r1
    37ee:	4604      	mov	r4, r0
    37f0:	d023      	beq.n	383a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    37f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    37f6:	4605      	mov	r5, r0
    37f8:	f00b fb0e 	bl	ee18 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    37fc:	b9b0      	cbnz	r0, 382c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    37fe:	78a0      	ldrb	r0, [r4, #2]
    3800:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3804:	b350      	cbz	r0, 385c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3806:	4628      	mov	r0, r5
    3808:	f00b fadd 	bl	edc6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    380c:	4606      	mov	r6, r0
    380e:	4628      	mov	r0, r5
    3810:	f00b fb02 	bl	ee18 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3814:	1a30      	subs	r0, r6, r0
    3816:	b2c0      	uxtb	r0, r0
    3818:	f00b fb53 	bl	eec2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    381c:	4601      	mov	r1, r0
    381e:	4835      	ldr	r0, [pc, #212]	; (38f4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3820:	6842      	ldr	r2, [r0, #4]
    3822:	4411      	add	r1, r2
    3824:	6041      	str	r1, [r0, #4]
    3826:	4628      	mov	r0, r5
    3828:	f00b fb14 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    382c:	4628      	mov	r0, r5
    382e:	f00b fad6 	bl	edde <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3832:	4601      	mov	r1, r0
    3834:	4620      	mov	r0, r4
    3836:	f00b fa9e 	bl	ed76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    383a:	4d2f      	ldr	r5, [pc, #188]	; (38f8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    383c:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3840:	2100      	movs	r1, #0
    3842:	6868      	ldr	r0, [r5, #4]
    3844:	8001      	strh	r1, [r0, #0]
    3846:	f00b fa0f 	bl	ec68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    384a:	8860      	ldrh	r0, [r4, #2]
    384c:	2813      	cmp	r0, #19
    384e:	d013      	beq.n	3878 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3850:	dc09      	bgt.n	3866 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3852:	2810      	cmp	r0, #16
    3854:	d036      	beq.n	38c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3856:	2812      	cmp	r0, #18
    3858:	d109      	bne.n	386e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    385a:	e031      	b.n	38c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    385c:	4620      	mov	r0, r4
    385e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3862:	f000 bb71 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3866:	2815      	cmp	r0, #21
    3868:	d00f      	beq.n	388a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    386a:	281d      	cmp	r0, #29
    386c:	d00d      	beq.n	388a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    386e:	f240 6173 	movw	r1, #1651	; 0x673
    3872:	202d      	movs	r0, #45	; 0x2d
    3874:	f7fd f88c 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3878:	2100      	movs	r1, #0
    387a:	6868      	ldr	r0, [r5, #4]
    387c:	f00a fc2c 	bl	e0d8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3880:	2101      	movs	r1, #1
    3882:	6868      	ldr	r0, [r5, #4]
    3884:	f00b f9f0 	bl	ec68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3888:	e020      	b.n	38cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    388a:	2101      	movs	r1, #1
    388c:	6868      	ldr	r0, [r5, #4]
    388e:	f00a fc23 	bl	e0d8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3892:	2101      	movs	r1, #1
    3894:	6868      	ldr	r0, [r5, #4]
    3896:	f00b f9e7 	bl	ec68 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    389a:	b136      	cbz	r6, 38aa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    389c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    38a0:	6868      	ldr	r0, [r5, #4]
    38a2:	f00a fc34 	bl	e10e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38a6:	2101      	movs	r1, #1
    38a8:	e006      	b.n	38b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    38aa:	f104 0158 	add.w	r1, r4, #88	; 0x58
    38ae:	6868      	ldr	r0, [r5, #4]
    38b0:	f00a fc2d 	bl	e10e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    38b4:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    38b8:	6868      	ldr	r0, [r5, #4]
    38ba:	f00a fc2e 	bl	e11a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    38be:	e005      	b.n	38cc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    38c0:	2106      	movs	r1, #6
    38c2:	e000      	b.n	38c6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    38c4:	2102      	movs	r1, #2
    38c6:	6868      	ldr	r0, [r5, #4]
    38c8:	f00a fc06 	bl	e0d8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    38cc:	4620      	mov	r0, r4
    38ce:	f000 fcdd 	bl	428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>
    38d2:	8860      	ldrh	r0, [r4, #2]
    38d4:	281d      	cmp	r0, #29
    38d6:	d007      	beq.n	38e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38d8:	2815      	cmp	r0, #21
    38da:	d005      	beq.n	38e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    38dc:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    38e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    38e2:	6868      	ldr	r0, [r5, #4]
    38e4:	f00a fbe8 	bl	e0b8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    38e8:	4639      	mov	r1, r7
    38ea:	4620      	mov	r0, r4
    38ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38f0:	f000 b9f4 	b.w	3cdc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    38f4:	20001438 	.word	0x20001438
    38f8:	200000f0 	.word	0x200000f0
    38fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3900:	4d2f      	ldr	r5, [pc, #188]	; (39c0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3902:	4680      	mov	r8, r0
    3904:	7828      	ldrb	r0, [r5, #0]
    3906:	2802      	cmp	r0, #2
    3908:	d005      	beq.n	3916 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    390a:	7828      	ldrb	r0, [r5, #0]
    390c:	2803      	cmp	r0, #3
    390e:	d002      	beq.n	3916 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3910:	f640 512d 	movw	r1, #3373	; 0xd2d
    3914:	e02b      	b.n	396e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3916:	4c2b      	ldr	r4, [pc, #172]	; (39c4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3918:	6826      	ldr	r6, [r4, #0]
    391a:	7b30      	ldrb	r0, [r6, #12]
    391c:	b118      	cbz	r0, 3926 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    391e:	f7fe ff83 	bl	2828 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3922:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3926:	f8d4 c004 	ldr.w	ip, [r4, #4]
    392a:	2700      	movs	r7, #0
    392c:	f1b8 0f00 	cmp.w	r8, #0
    3930:	f89c 0000 	ldrb.w	r0, [ip]
    3934:	f000 060f 	and.w	r6, r0, #15
    3938:	d027      	beq.n	398a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    393a:	6821      	ldr	r1, [r4, #0]
    393c:	09c0      	lsrs	r0, r0, #7
    393e:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3942:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3946:	f10c 0109 	add.w	r1, ip, #9
    394a:	f00a f8b9 	bl	dac0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    394e:	b1e0      	cbz	r0, 398a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3950:	4639      	mov	r1, r7
    3952:	6860      	ldr	r0, [r4, #4]
    3954:	f00a fba0 	bl	e098 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3958:	b1b8      	cbz	r0, 398a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    395a:	782a      	ldrb	r2, [r5, #0]
    395c:	6820      	ldr	r0, [r4, #0]
    395e:	4631      	mov	r1, r6
    3960:	2a02      	cmp	r2, #2
    3962:	d007      	beq.n	3974 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3964:	782a      	ldrb	r2, [r5, #0]
    3966:	2a03      	cmp	r2, #3
    3968:	d004      	beq.n	3974 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    396a:	f640 5106 	movw	r1, #3334	; 0xd06
    396e:	202d      	movs	r0, #45	; 0x2d
    3970:	f7fd f80e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3974:	68a2      	ldr	r2, [r4, #8]
    3976:	782b      	ldrb	r3, [r5, #0]
    3978:	6952      	ldr	r2, [r2, #20]
    397a:	f06f 0607 	mvn.w	r6, #7
    397e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3982:	58d2      	ldr	r2, [r2, r3]
    3984:	4790      	blx	r2
    3986:	4606      	mov	r6, r0
    3988:	e000      	b.n	398c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    398a:	2601      	movs	r6, #1
    398c:	7ba8      	ldrb	r0, [r5, #14]
    398e:	b118      	cbz	r0, 3998 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3990:	f003 ffd2 	bl	7938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3994:	f003 fdf6 	bl	7584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3998:	2e00      	cmp	r6, #0
    399a:	d00f      	beq.n	39bc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    399c:	6820      	ldr	r0, [r4, #0]
    399e:	f00b faa6 	bl	eeee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    39a2:	b130      	cbz	r0, 39b2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    39a4:	f003 ffea 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39a8:	68a0      	ldr	r0, [r4, #8]
    39aa:	6880      	ldr	r0, [r0, #8]
    39ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39b0:	4700      	bx	r0
    39b2:	6820      	ldr	r0, [r4, #0]
    39b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39b8:	f000 bac6 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    39bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39c0:	20001438 	.word	0x20001438
    39c4:	200000f0 	.word	0x200000f0
    39c8:	b510      	push	{r4, lr}
    39ca:	2903      	cmp	r1, #3
    39cc:	d002      	beq.n	39d4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    39ce:	2905      	cmp	r1, #5
    39d0:	d10a      	bne.n	39e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    39d2:	e002      	b.n	39da <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    39d4:	f000 fbb2 	bl	413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>
    39d8:	e003      	b.n	39e2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    39da:	4904      	ldr	r1, [pc, #16]	; (39ec <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    39dc:	6809      	ldr	r1, [r1, #0]
    39de:	b109      	cbz	r1, 39e4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    39e0:	4788      	blx	r1
    39e2:	b108      	cbz	r0, 39e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    39e4:	2000      	movs	r0, #0
    39e6:	bd10      	pop	{r4, pc}
    39e8:	2001      	movs	r0, #1
    39ea:	bd10      	pop	{r4, pc}
    39ec:	200000fc 	.word	0x200000fc
    39f0:	4a09      	ldr	r2, [pc, #36]	; (3a18 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    39f2:	0003      	movs	r3, r0
    39f4:	6810      	ldr	r0, [r2, #0]
    39f6:	d001      	beq.n	39fc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    39f8:	f000 baa6 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    39fc:	2900      	cmp	r1, #0
    39fe:	d009      	beq.n	3a14 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3a00:	6891      	ldr	r1, [r2, #8]
    3a02:	4a06      	ldr	r2, [pc, #24]	; (3a1c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3a04:	6909      	ldr	r1, [r1, #16]
    3a06:	7812      	ldrb	r2, [r2, #0]
    3a08:	f06f 030f 	mvn.w	r3, #15
    3a0c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3a10:	5889      	ldr	r1, [r1, r2]
    3a12:	4708      	bx	r1
    3a14:	4770      	bx	lr
    3a16:	0000      	.short	0x0000
    3a18:	200000f0 	.word	0x200000f0
    3a1c:	20001438 	.word	0x20001438
    3a20:	b570      	push	{r4, r5, r6, lr}
    3a22:	4604      	mov	r4, r0
    3a24:	8840      	ldrh	r0, [r0, #2]
    3a26:	2810      	cmp	r0, #16
    3a28:	d019      	beq.n	3a5e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3a2a:	4d10      	ldr	r5, [pc, #64]	; (3a6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3a2c:	7ba8      	ldrb	r0, [r5, #14]
    3a2e:	b120      	cbz	r0, 3a3a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3a30:	f003 fdc8 	bl	75c4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3a34:	2040      	movs	r0, #64	; 0x40
    3a36:	f003 ff8d 	bl	7954 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3a3a:	480d      	ldr	r0, [pc, #52]	; (3a70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3a3c:	6840      	ldr	r0, [r0, #4]
    3a3e:	f004 fa0f 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3a42:	78a0      	ldrb	r0, [r4, #2]
    3a44:	0740      	lsls	r0, r0, #29
    3a46:	d404      	bmi.n	3a52 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3a48:	2100      	movs	r1, #0
    3a4a:	7922      	ldrb	r2, [r4, #4]
    3a4c:	4608      	mov	r0, r1
    3a4e:	f004 fa8f 	bl	7f70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3a52:	2000      	movs	r0, #0
    3a54:	f004 f8b4 	bl	7bc0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3a58:	2002      	movs	r0, #2
    3a5a:	7028      	strb	r0, [r5, #0]
    3a5c:	bd70      	pop	{r4, r5, r6, pc}
    3a5e:	4620      	mov	r0, r4
    3a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a64:	2101      	movs	r1, #1
    3a66:	f7ff bebf 	b.w	37e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3a6a:	0000      	.short	0x0000
    3a6c:	20001438 	.word	0x20001438
    3a70:	200000f0 	.word	0x200000f0
    3a74:	b510      	push	{r4, lr}
    3a76:	4c12      	ldr	r4, [pc, #72]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a78:	6820      	ldr	r0, [r4, #0]
    3a7a:	f000 f825 	bl	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    3a7e:	6820      	ldr	r0, [r4, #0]
    3a80:	f00b fa35 	bl	eeee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3a84:	2800      	cmp	r0, #0
    3a86:	6820      	ldr	r0, [r4, #0]
    3a88:	d00b      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
    3a8a:	490e      	ldr	r1, [pc, #56]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a8c:	780a      	ldrb	r2, [r1, #0]
    3a8e:	2a02      	cmp	r2, #2
    3a90:	d00b      	beq.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a92:	780a      	ldrb	r2, [r1, #0]
    3a94:	2a03      	cmp	r2, #3
    3a96:	d008      	beq.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3a98:	f640 4137 	movw	r1, #3127	; 0xc37
    3a9c:	202d      	movs	r0, #45	; 0x2d
    3a9e:	f7fc ff77 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3aa6:	f000 ba4f 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3aaa:	68a2      	ldr	r2, [r4, #8]
    3aac:	7809      	ldrb	r1, [r1, #0]
    3aae:	68d2      	ldr	r2, [r2, #12]
    3ab0:	f06f 0307 	mvn.w	r3, #7
    3ab4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3ab8:	5851      	ldr	r1, [r2, r1]
    3aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3abe:	4708      	bx	r1
    3ac0:	200000f0 	.word	0x200000f0
    3ac4:	20001438 	.word	0x20001438
    3ac8:	b510      	push	{r4, lr}
    3aca:	7b01      	ldrb	r1, [r0, #12]
    3acc:	b121      	cbz	r1, 3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3ace:	4604      	mov	r4, r0
    3ad0:	f7fe feaa 	bl	2828 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3ad4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3ad8:	4805      	ldr	r0, [pc, #20]	; (3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>)
    3ada:	7b80      	ldrb	r0, [r0, #14]
    3adc:	2800      	cmp	r0, #0
    3ade:	d005      	beq.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ae0:	f003 ff2a 	bl	7938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ae8:	f003 bd4c 	b.w	7584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3aec:	bd10      	pop	{r4, pc}
    3aee:	0000      	.short	0x0000
    3af0:	20001438 	.word	0x20001438

00003af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3af8:	4d5c      	ldr	r5, [pc, #368]	; (3c6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    3afa:	4604      	mov	r4, r0
    3afc:	b086      	sub	sp, #24
    3afe:	7828      	ldrb	r0, [r5, #0]
    3b00:	bbe8      	cbnz	r0, 3b7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    3b02:	7820      	ldrb	r0, [r4, #0]
    3b04:	28ff      	cmp	r0, #255	; 0xff
    3b06:	d04b      	beq.n	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3b08:	f04f 0800 	mov.w	r8, #0
    3b0c:	f8a5 800c 	strh.w	r8, [r5, #12]
    3b10:	f8c5 8004 	str.w	r8, [r5, #4]
    3b14:	f885 8001 	strb.w	r8, [r5, #1]
    3b18:	f885 8002 	strb.w	r8, [r5, #2]
    3b1c:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3b20:	4b53      	ldr	r3, [pc, #332]	; (3c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    3b22:	4e54      	ldr	r6, [pc, #336]	; (3c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    3b24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3b26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3b2a:	68b0      	ldr	r0, [r6, #8]
    3b2c:	6840      	ldr	r0, [r0, #4]
    3b2e:	9003      	str	r0, [sp, #12]
    3b30:	4668      	mov	r0, sp
    3b32:	f004 f819 	bl	7b68 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3b36:	f004 f8ed 	bl	7d14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3b3a:	f003 fefd 	bl	7938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3b3e:	f003 fd21 	bl	7584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3b42:	484d      	ldr	r0, [pc, #308]	; (3c78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    3b44:	f004 fa46 	bl	7fd4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3b48:	484c      	ldr	r0, [pc, #304]	; (3c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    3b4a:	f004 fa4d 	bl	7fe8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3b4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3b52:	4607      	mov	r7, r0
    3b54:	f00b f97e 	bl	ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3b58:	4638      	mov	r0, r7
    3b5a:	f00b f940 	bl	edde <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3b5e:	4601      	mov	r1, r0
    3b60:	4620      	mov	r0, r4
    3b62:	f00b f908 	bl	ed76 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3b66:	f994 000e 	ldrsb.w	r0, [r4, #14]
    3b6a:	f004 f957 	bl	7e1c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3b6e:	7921      	ldrb	r1, [r4, #4]
    3b70:	2000      	movs	r0, #0
    3b72:	f003 ff8d 	bl	7a90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3b76:	2101      	movs	r1, #1
    3b78:	60a8      	str	r0, [r5, #8]
    3b7a:	b1a8      	cbz	r0, 3ba8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    3b7c:	e000      	b.n	3b80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    3b7e:	e00f      	b.n	3ba0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    3b80:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3b84:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3b86:	f009 ff0a 	bl	d99e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    3b8a:	4607      	mov	r7, r0
    3b8c:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3b90:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3b92:	f009 ff07 	bl	d9a4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    3b96:	b14f      	cbz	r7, 3bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3b98:	f894 1020 	ldrb.w	r1, [r4, #32]
    3b9c:	b951      	cbnz	r1, 3bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    3b9e:	e005      	b.n	3bac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    3ba0:	200c      	movs	r0, #12
    3ba2:	b006      	add	sp, #24
    3ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ba8:	7029      	strb	r1, [r5, #0]
    3baa:	e05c      	b.n	3c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3bac:	b120      	cbz	r0, 3bb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bae:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    3bb2:	b108      	cbz	r0, 3bb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    3bb4:	2701      	movs	r7, #1
    3bb6:	e000      	b.n	3bba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    3bb8:	2700      	movs	r7, #0
    3bba:	7ea0      	ldrb	r0, [r4, #26]
    3bbc:	b920      	cbnz	r0, 3bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3bbe:	7e20      	ldrb	r0, [r4, #24]
    3bc0:	b910      	cbnz	r0, 3bc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    3bc2:	78a0      	ldrb	r0, [r4, #2]
    3bc4:	0740      	lsls	r0, r0, #29
    3bc6:	d523      	bpl.n	3c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3bc8:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    3bcc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3bd0:	4050      	eors	r0, r2
    3bd2:	ea70 0101 	orns	r1, r0, r1
    3bd6:	d006      	beq.n	3be6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    3bd8:	f00c ffb3 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3bdc:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    3be0:	1a80      	subs	r0, r0, r2
    3be2:	4199      	sbcs	r1, r3
    3be4:	d200      	bcs.n	3be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    3be6:	b19f      	cbz	r7, 3c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3be8:	f7fe fc88 	bl	24fc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3bec:	4924      	ldr	r1, [pc, #144]	; (3c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    3bee:	fba0 2301 	umull	r2, r3, r0, r1
    3bf2:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3bf6:	f00b f8c9 	bl	ed8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3bfa:	2101      	movs	r1, #1
    3bfc:	4620      	mov	r0, r4
    3bfe:	f00b f87e 	bl	ecfe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3c02:	78a0      	ldrb	r0, [r4, #2]
    3c04:	0740      	lsls	r0, r0, #29
    3c06:	d503      	bpl.n	3c10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    3c08:	2101      	movs	r1, #1
    3c0a:	4620      	mov	r0, r4
    3c0c:	f000 fac8 	bl	41a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a0>
    3c10:	6870      	ldr	r0, [r6, #4]
    3c12:	1cc0      	adds	r0, r0, #3
    3c14:	f009 ffdf 	bl	dbd6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    3c18:	73a8      	strb	r0, [r5, #14]
    3c1a:	78a0      	ldrb	r0, [r4, #2]
    3c1c:	07c0      	lsls	r0, r0, #31
    3c1e:	d022      	beq.n	3c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c20:	f8cd 8010 	str.w	r8, [sp, #16]
    3c24:	20ff      	movs	r0, #255	; 0xff
    3c26:	f8cd 8014 	str.w	r8, [sp, #20]
    3c2a:	73e8      	strb	r0, [r5, #15]
    3c2c:	69e6      	ldr	r6, [r4, #28]
    3c2e:	f106 070a 	add.w	r7, r6, #10
    3c32:	e013      	b.n	3c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c34:	9c04      	ldr	r4, [sp, #16]
    3c36:	42b4      	cmp	r4, r6
    3c38:	d010      	beq.n	3c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c3a:	7a72      	ldrb	r2, [r6, #9]
    3c3c:	7a60      	ldrb	r0, [r4, #9]
    3c3e:	463b      	mov	r3, r7
    3c40:	f104 010a 	add.w	r1, r4, #10
    3c44:	f009 ff3c 	bl	dac0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3c48:	b140      	cbz	r0, 3c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    3c4a:	78a0      	ldrb	r0, [r4, #2]
    3c4c:	73e8      	strb	r0, [r5, #15]
    3c4e:	f8d4 0003 	ldr.w	r0, [r4, #3]
    3c52:	6128      	str	r0, [r5, #16]
    3c54:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    3c58:	82a8      	strh	r0, [r5, #20]
    3c5a:	e004      	b.n	3c66 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    3c5c:	a804      	add	r0, sp, #16
    3c5e:	f7fd fa17 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    3c62:	2800      	cmp	r0, #0
    3c64:	d0e6      	beq.n	3c34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    3c66:	2000      	movs	r0, #0
    3c68:	e79b      	b.n	3ba2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    3c6a:	0000      	.short	0x0000
    3c6c:	20001438 	.word	0x20001438
    3c70:	000042b0 	.word	0x000042b0
    3c74:	200000f0 	.word	0x200000f0
    3c78:	8e89bed6 	.word	0x8e89bed6
    3c7c:	00555555 	.word	0x00555555
    3c80:	000f4240 	.word	0x000f4240
    3c84:	b510      	push	{r4, lr}
    3c86:	4604      	mov	r4, r0
    3c88:	f7ff ff34 	bl	3af4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    3c8c:	2800      	cmp	r0, #0
    3c8e:	d108      	bne.n	3ca2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    3c90:	4804      	ldr	r0, [pc, #16]	; (3ca4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    3c92:	7800      	ldrb	r0, [r0, #0]
    3c94:	2801      	cmp	r0, #1
    3c96:	d003      	beq.n	3ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    3c98:	2100      	movs	r1, #0
    3c9a:	4620      	mov	r0, r4
    3c9c:	f7ff fda4 	bl	37e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3ca0:	2000      	movs	r0, #0
    3ca2:	bd10      	pop	{r4, pc}
    3ca4:	20001438 	.word	0x20001438
    3ca8:	480a      	ldr	r0, [pc, #40]	; (3cd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    3caa:	b510      	push	{r4, lr}
    3cac:	490a      	ldr	r1, [pc, #40]	; (3cd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    3cae:	6804      	ldr	r4, [r0, #0]
    3cb0:	7808      	ldrb	r0, [r1, #0]
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d00d      	beq.n	3cd2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    3cb6:	7808      	ldrb	r0, [r1, #0]
    3cb8:	2802      	cmp	r0, #2
    3cba:	d002      	beq.n	3cc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    3cbc:	7808      	ldrb	r0, [r1, #0]
    3cbe:	2803      	cmp	r0, #3
    3cc0:	d102      	bne.n	3cc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    3cc2:	4620      	mov	r0, r4
    3cc4:	f7ff ff00 	bl	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
    3cc8:	4620      	mov	r0, r4
    3cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3cce:	f000 b93b 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3cd2:	bd10      	pop	{r4, pc}
    3cd4:	200000f0 	.word	0x200000f0
    3cd8:	20001438 	.word	0x20001438
    3cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ce0:	4604      	mov	r4, r0
    3ce2:	4829      	ldr	r0, [pc, #164]	; (3d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    3ce4:	460d      	mov	r5, r1
    3ce6:	6840      	ldr	r0, [r0, #4]
    3ce8:	f004 f8ba 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3cec:	4e27      	ldr	r6, [pc, #156]	; (3d8c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    3cee:	2004      	movs	r0, #4
    3cf0:	7030      	strb	r0, [r6, #0]
    3cf2:	b355      	cbz	r5, 3d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3cf4:	8860      	ldrh	r0, [r4, #2]
    3cf6:	2810      	cmp	r0, #16
    3cf8:	d023      	beq.n	3d42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    3cfa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3cfe:	4680      	mov	r8, r0
    3d00:	68b5      	ldr	r5, [r6, #8]
    3d02:	f00b f860 	bl	edc6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3d06:	4607      	mov	r7, r0
    3d08:	4640      	mov	r0, r8
    3d0a:	f00b f885 	bl	ee18 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3d0e:	1a38      	subs	r0, r7, r0
    3d10:	1e40      	subs	r0, r0, #1
    3d12:	b2c0      	uxtb	r0, r0
    3d14:	8861      	ldrh	r1, [r4, #2]
    3d16:	2228      	movs	r2, #40	; 0x28
    3d18:	f000 fb06 	bl	4328 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    3d1c:	4405      	add	r5, r0
    3d1e:	78a0      	ldrb	r0, [r4, #2]
    3d20:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d24:	b130      	cbz	r0, 3d34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    3d26:	6870      	ldr	r0, [r6, #4]
    3d28:	4405      	add	r5, r0
    3d2a:	f00b f8ce 	bl	eeca <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    3d2e:	4428      	add	r0, r5
    3d30:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    3d34:	7922      	ldrb	r2, [r4, #4]
    3d36:	4629      	mov	r1, r5
    3d38:	2000      	movs	r0, #0
    3d3a:	f004 f8a7 	bl	7e8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    3d3e:	b920      	cbnz	r0, 3d4a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    3d40:	e00c      	b.n	3d5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    3d42:	7921      	ldrb	r1, [r4, #4]
    3d44:	2000      	movs	r0, #0
    3d46:	f003 fe69 	bl	7a1c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3d4a:	8860      	ldrh	r0, [r4, #2]
    3d4c:	2813      	cmp	r0, #19
    3d4e:	d011      	beq.n	3d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d50:	dc07      	bgt.n	3d62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    3d52:	2810      	cmp	r0, #16
    3d54:	d015      	beq.n	3d82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    3d56:	2812      	cmp	r0, #18
    3d58:	d107      	bne.n	3d6a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    3d5a:	e00b      	b.n	3d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d5c:	f640 51a8 	movw	r1, #3496	; 0xda8
    3d60:	e005      	b.n	3d6e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    3d62:	2815      	cmp	r0, #21
    3d64:	d006      	beq.n	3d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d66:	281d      	cmp	r0, #29
    3d68:	d004      	beq.n	3d74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    3d6a:	f640 51bc 	movw	r1, #3516	; 0xdbc
    3d6e:	202d      	movs	r0, #45	; 0x2d
    3d70:	f7fc fe0e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3d74:	7922      	ldrb	r2, [r4, #4]
    3d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d7a:	2101      	movs	r1, #1
    3d7c:	2000      	movs	r0, #0
    3d7e:	f004 b8f7 	b.w	7f70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d86:	0000      	.short	0x0000
    3d88:	200000f0 	.word	0x200000f0
    3d8c:	20001438 	.word	0x20001438
    3d90:	b538      	push	{r3, r4, r5, lr}
    3d92:	4604      	mov	r4, r0
    3d94:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    3d98:	460b      	mov	r3, r1
    3d9a:	f88d 0000 	strb.w	r0, [sp]
    3d9e:	9800      	ldr	r0, [sp, #0]
    3da0:	9000      	str	r0, [sp, #0]
    3da2:	f89d 0000 	ldrb.w	r0, [sp]
    3da6:	2800      	cmp	r0, #0
    3da8:	d13a      	bne.n	3e20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    3daa:	7820      	ldrb	r0, [r4, #0]
    3dac:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    3db0:	2bff      	cmp	r3, #255	; 0xff
    3db2:	d010      	beq.n	3dd6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    3db4:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    3db8:	1e51      	subs	r1, r2, #1
    3dba:	4618      	mov	r0, r3
    3dbc:	f7fe fb20 	bl	2400 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3dc0:	b130      	cbz	r0, 3dd0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    3dc2:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    3dc6:	f040 0002 	orr.w	r0, r0, #2
    3dca:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    3dce:	e011      	b.n	3df4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    3dd0:	f241 0118 	movw	r1, #4120	; 0x1018
    3dd4:	e021      	b.n	3e1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    3dd6:	4813      	ldr	r0, [pc, #76]	; (3e24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    3dd8:	6840      	ldr	r0, [r0, #4]
    3dda:	7801      	ldrb	r1, [r0, #0]
    3ddc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    3de0:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    3de4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    3de8:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    3dec:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    3df0:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    3df4:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    3df8:	287f      	cmp	r0, #127	; 0x7f
    3dfa:	d00c      	beq.n	3e16 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    3dfc:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    3e00:	207f      	movs	r0, #127	; 0x7f
    3e02:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3e06:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    3e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3e0e:	2202      	movs	r2, #2
    3e10:	4905      	ldr	r1, [pc, #20]	; (3e28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    3e12:	f00a bae3 	b.w	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3e16:	f640 616c 	movw	r1, #3692	; 0xe6c
    3e1a:	202d      	movs	r0, #45	; 0x2d
    3e1c:	f7fc fdb8 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e20:	bd38      	pop	{r3, r4, r5, pc}
    3e22:	0000      	.short	0x0000
    3e24:	200000f0 	.word	0x200000f0
    3e28:	0000ece7 	.word	0x0000ece7
    3e2c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3e30:	4616      	mov	r6, r2
    3e32:	4604      	mov	r4, r0
    3e34:	2903      	cmp	r1, #3
    3e36:	d004      	beq.n	3e42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e38:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    3e3c:	b108      	cbz	r0, 3e42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    3e3e:	2001      	movs	r0, #1
    3e40:	e000      	b.n	3e44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    3e42:	2000      	movs	r0, #0
    3e44:	2500      	movs	r5, #0
    3e46:	2903      	cmp	r1, #3
    3e48:	d003      	beq.n	3e52 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    3e4a:	2701      	movs	r7, #1
    3e4c:	2905      	cmp	r1, #5
    3e4e:	d005      	beq.n	3e5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    3e50:	e008      	b.n	3e64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    3e52:	78a1      	ldrb	r1, [r4, #2]
    3e54:	2702      	movs	r7, #2
    3e56:	f3c1 0140 	ubfx	r1, r1, #1, #1
    3e5a:	e001      	b.n	3e60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    3e5c:	78a1      	ldrb	r1, [r4, #2]
    3e5e:	07c9      	lsls	r1, r1, #31
    3e60:	2900      	cmp	r1, #0
    3e62:	d06b      	beq.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e64:	2800      	cmp	r0, #0
    3e66:	d169      	bne.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3e68:	4835      	ldr	r0, [pc, #212]	; (3f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    3e6a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 3f44 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    3e6e:	7b80      	ldrb	r0, [r0, #14]
    3e70:	b180      	cbz	r0, 3e94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    3e72:	f009 feb3 	bl	dbdc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3e76:	7030      	strb	r0, [r6, #0]
    3e78:	28ff      	cmp	r0, #255	; 0xff
    3e7a:	d014      	beq.n	3ea6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3e7c:	b2c0      	uxtb	r0, r0
    3e7e:	466a      	mov	r2, sp
    3e80:	a902      	add	r1, sp, #8
    3e82:	f7fe fabd 	bl	2400 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3e86:	b148      	cbz	r0, 3e9c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    3e88:	4669      	mov	r1, sp
    3e8a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3e8e:	f00a fdd4 	bl	ea3a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3e92:	4605      	mov	r5, r0
    3e94:	7830      	ldrb	r0, [r6, #0]
    3e96:	28ff      	cmp	r0, #255	; 0xff
    3e98:	d005      	beq.n	3ea6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    3e9a:	e00d      	b.n	3eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    3e9c:	f640 719b 	movw	r1, #3995	; 0xf9b
    3ea0:	202d      	movs	r0, #45	; 0x2d
    3ea2:	f7fc fd75 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ea6:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3eaa:	f811 0b03 	ldrb.w	r0, [r1], #3
    3eae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3eb2:	f00a fdc2 	bl	ea3a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    3eb6:	4605      	mov	r5, r0
    3eb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3ebc:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    3ec0:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3ec4:	f811 0b03 	ldrb.w	r0, [r1], #3
    3ec8:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ecc:	f009 fdf8 	bl	dac0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3ed0:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3ed4:	4680      	mov	r8, r0
    3ed6:	f811 0b03 	ldrb.w	r0, [r1], #3
    3eda:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ede:	f009 fe87 	bl	dbf0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3ee2:	4681      	mov	r9, r0
    3ee4:	f7fe fb1e 	bl	2524 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    3ee8:	b138      	cbz	r0, 3efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3eea:	4648      	mov	r0, r9
    3eec:	f7fe fa5c 	bl	23a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    3ef0:	b118      	cbz	r0, 3efa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    3ef2:	2110      	movs	r1, #16
    3ef4:	f00a f836 	bl	df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    3ef8:	b138      	cbz	r0, 3f0a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    3efa:	2100      	movs	r1, #0
    3efc:	7830      	ldrb	r0, [r6, #0]
    3efe:	28ff      	cmp	r0, #255	; 0xff
    3f00:	d00c      	beq.n	3f1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    3f02:	f1b8 0f00 	cmp.w	r8, #0
    3f06:	d105      	bne.n	3f14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    3f08:	e001      	b.n	3f0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    3f0a:	2101      	movs	r1, #1
    3f0c:	e7f6      	b.n	3efc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    3f0e:	7e62      	ldrb	r2, [r4, #25]
    3f10:	4282      	cmp	r2, r0
    3f12:	d101      	bne.n	3f18 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    3f14:	2001      	movs	r0, #1
    3f16:	e003      	b.n	3f20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f18:	2000      	movs	r0, #0
    3f1a:	e001      	b.n	3f20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    3f1c:	ea28 0001 	bic.w	r0, r8, r1
    3f20:	78a2      	ldrb	r2, [r4, #2]
    3f22:	0752      	lsls	r2, r2, #29
    3f24:	d501      	bpl.n	3f2a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    3f26:	b930      	cbnz	r0, 3f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f28:	e008      	b.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f2a:	b939      	cbnz	r1, 3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f2c:	b91d      	cbnz	r5, 3f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f2e:	7be0      	ldrb	r0, [r4, #15]
    3f30:	b108      	cbz	r0, 3f36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    3f32:	42b8      	cmp	r0, r7
    3f34:	d102      	bne.n	3f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    3f36:	2001      	movs	r0, #1
    3f38:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    3f3c:	2000      	movs	r0, #0
    3f3e:	e7fb      	b.n	3f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    3f40:	20001438 	.word	0x20001438
    3f44:	200000f0 	.word	0x200000f0
    3f48:	b570      	push	{r4, r5, r6, lr}
    3f4a:	4604      	mov	r4, r0
    3f4c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    3f4e:	4d10      	ldr	r5, [pc, #64]	; (3f90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    3f50:	1c40      	adds	r0, r0, #1
    3f52:	8620      	strh	r0, [r4, #48]	; 0x30
    3f54:	7ba8      	ldrb	r0, [r5, #14]
    3f56:	2600      	movs	r6, #0
    3f58:	b120      	cbz	r0, 3f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    3f5a:	f003 fced 	bl	7938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f5e:	f003 fb11 	bl	7584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f62:	73ae      	strb	r6, [r5, #14]
    3f64:	702e      	strb	r6, [r5, #0]
    3f66:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    3f6a:	b108      	cbz	r0, 3f70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    3f6c:	2101      	movs	r1, #1
    3f6e:	e00a      	b.n	3f86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    3f70:	7b60      	ldrb	r0, [r4, #13]
    3f72:	b138      	cbz	r0, 3f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f74:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    3f76:	4288      	cmp	r0, r1
    3f78:	d804      	bhi.n	3f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    3f7a:	2101      	movs	r1, #1
    3f7c:	4620      	mov	r0, r4
    3f7e:	f00a ffc8 	bl	ef12 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3f82:	bd70      	pop	{r4, r5, r6, pc}
    3f84:	2100      	movs	r1, #0
    3f86:	4620      	mov	r0, r4
    3f88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f8c:	f00a bfc1 	b.w	ef12 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    3f90:	20001438 	.word	0x20001438
    3f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f98:	4604      	mov	r4, r0
    3f9a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    3f9e:	8808      	ldrh	r0, [r1, #0]
    3fa0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    3fa4:	20ff      	movs	r0, #255	; 0xff
    3fa6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    3faa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3fae:	4616      	mov	r6, r2
    3fb0:	460d      	mov	r5, r1
    3fb2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d14b      	bne.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    3fba:	6928      	ldr	r0, [r5, #16]
    3fbc:	f009 fe60 	bl	dc80 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3fc0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    3fc4:	8b28      	ldrh	r0, [r5, #24]
    3fc6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    3fca:	8b68      	ldrh	r0, [r5, #26]
    3fcc:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    3fd0:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    3fd4:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    3fd8:	7e20      	ldrb	r0, [r4, #24]
    3fda:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3fde:	460f      	mov	r7, r1
    3fe0:	2500      	movs	r5, #0
    3fe2:	b120      	cbz	r0, 3fee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    3fe4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3fe8:	f00a fd53 	bl	ea92 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3fec:	b940      	cbnz	r0, 4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
    3fee:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    3ff2:	b170      	cbz	r0, 4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    3ff4:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3ff8:	4639      	mov	r1, r7
    3ffa:	f00a fd41 	bl	ea80 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3ffe:	b140      	cbz	r0, 4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    4000:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4004:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4008:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    400c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    4010:	e003      	b.n	401a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a>
    4012:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4016:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    401a:	4815      	ldr	r0, [pc, #84]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    401c:	2eff      	cmp	r6, #255	; 0xff
    401e:	6840      	ldr	r0, [r0, #4]
    4020:	7801      	ldrb	r1, [r0, #0]
    4022:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4026:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    402a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    402e:	d017      	beq.n	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
    4030:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4034:	8880      	ldrh	r0, [r0, #4]
    4036:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    403a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    403e:	1e51      	subs	r1, r2, #1
    4040:	4630      	mov	r0, r6
    4042:	f7fe f9dd 	bl	2400 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4046:	b130      	cbz	r0, 4056 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56>
    4048:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    404c:	f040 0002 	orr.w	r0, r0, #2
    4050:	7020      	strb	r0, [r4, #0]
    4052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4056:	f640 418b 	movw	r1, #3211	; 0xc8b
    405a:	202d      	movs	r0, #45	; 0x2d
    405c:	f7fc fc98 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4060:	f844 1f7a 	str.w	r1, [r4, #122]!
    4064:	8880      	ldrh	r0, [r0, #4]
    4066:	80a0      	strh	r0, [r4, #4]
    4068:	60e5      	str	r5, [r4, #12]
    406a:	8225      	strh	r5, [r4, #16]
    406c:	e7f1      	b.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    406e:	0000      	.short	0x0000
    4070:	200000f0 	.word	0x200000f0
    4074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4076:	4604      	mov	r4, r0
    4078:	20ff      	movs	r0, #255	; 0xff
    407a:	f88d 0000 	strb.w	r0, [sp]
    407e:	2601      	movs	r6, #1
    4080:	466a      	mov	r2, sp
    4082:	2105      	movs	r1, #5
    4084:	4620      	mov	r0, r4
    4086:	f7ff fed1 	bl	3e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    408a:	b160      	cbz	r0, 40a6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa6>
    408c:	4d28      	ldr	r5, [pc, #160]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    408e:	4f27      	ldr	r7, [pc, #156]	; (412c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12c>)
    4090:	6869      	ldr	r1, [r5, #4]
    4092:	7bfa      	ldrb	r2, [r7, #15]
    4094:	f107 0310 	add.w	r3, r7, #16
    4098:	f811 0b03 	ldrb.w	r0, [r1], #3
    409c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    40a0:	f009 fd0e 	bl	dac0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    40a4:	b110      	cbz	r0, 40ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xac>
    40a6:	2600      	movs	r6, #0
    40a8:	4630      	mov	r0, r6
    40aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40ac:	686a      	ldr	r2, [r5, #4]
    40ae:	69e0      	ldr	r0, [r4, #28]
    40b0:	7812      	ldrb	r2, [r2, #0]
    40b2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    40b6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    40ba:	4011      	ands	r1, r2
    40bc:	7001      	strb	r1, [r0, #0]
    40be:	2201      	movs	r2, #1
    40c0:	4620      	mov	r0, r4
    40c2:	69e1      	ldr	r1, [r4, #28]
    40c4:	f000 f89a 	bl	41fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fc>
    40c8:	2300      	movs	r3, #0
    40ca:	f89d 2000 	ldrb.w	r2, [sp]
    40ce:	4620      	mov	r0, r4
    40d0:	69e1      	ldr	r1, [r4, #28]
    40d2:	f7ff ff5f 	bl	3f94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    40d6:	2202      	movs	r2, #2
    40d8:	4916      	ldr	r1, [pc, #88]	; (4134 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x134>)
    40da:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    40de:	f00a f97d 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    40e2:	69e0      	ldr	r0, [r4, #28]
    40e4:	2202      	movs	r2, #2
    40e6:	8801      	ldrh	r1, [r0, #0]
    40e8:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    40ec:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    40f0:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    40f4:	4910      	ldr	r1, [pc, #64]	; (4138 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x138>)
    40f6:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    40fa:	f00a f96f 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    40fe:	2100      	movs	r1, #0
    4100:	69e0      	ldr	r0, [r4, #28]
    4102:	7039      	strb	r1, [r7, #0]
    4104:	460a      	mov	r2, r1
    4106:	4621      	mov	r1, r4
    4108:	f000 fa7a 	bl	4600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    410c:	6868      	ldr	r0, [r5, #4]
    410e:	69e1      	ldr	r1, [r4, #28]
    4110:	f8d0 2003 	ldr.w	r2, [r0, #3]
    4114:	f841 2f03 	str.w	r2, [r1, #3]!
    4118:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    411c:	808a      	strh	r2, [r1, #4]
    411e:	7800      	ldrb	r0, [r0, #0]
    4120:	69e1      	ldr	r1, [r4, #28]
    4122:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4126:	7088      	strb	r0, [r1, #2]
    4128:	e7be      	b.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
    412a:	0000      	.short	0x0000
    412c:	20001438 	.word	0x20001438
    4130:	200000f0 	.word	0x200000f0
    4134:	0000ec97 	.word	0x0000ec97
    4138:	0000ec87 	.word	0x0000ec87
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    413e:	4604      	mov	r4, r0
    4140:	20ff      	movs	r0, #255	; 0xff
    4142:	f88d 0000 	strb.w	r0, [sp]
    4146:	2501      	movs	r5, #1
    4148:	466a      	mov	r2, sp
    414a:	2103      	movs	r1, #3
    414c:	4620      	mov	r0, r4
    414e:	f7ff fe6d 	bl	3e2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    4152:	b1e8      	cbz	r0, 4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
    4154:	7b20      	ldrb	r0, [r4, #12]
    4156:	b120      	cbz	r0, 4162 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x162>
    4158:	f89d 1000 	ldrb.w	r1, [sp]
    415c:	4620      	mov	r0, r4
    415e:	f7ff fe17 	bl	3d90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    4162:	4e0d      	ldr	r6, [pc, #52]	; (4198 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x198>)
    4164:	2100      	movs	r1, #0
    4166:	6870      	ldr	r0, [r6, #4]
    4168:	8001      	strh	r1, [r0, #0]
    416a:	2104      	movs	r1, #4
    416c:	f009 ffb4 	bl	e0d8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4170:	4620      	mov	r0, r4
    4172:	f000 f88b 	bl	428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>
    4176:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    417a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    417c:	6870      	ldr	r0, [r6, #4]
    417e:	f009 ffe2 	bl	e146 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    4182:	4906      	ldr	r1, [pc, #24]	; (419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>)
    4184:	2005      	movs	r0, #5
    4186:	7008      	strb	r0, [r1, #0]
    4188:	6870      	ldr	r0, [r6, #4]
    418a:	f003 fe69 	bl	7e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    418e:	e000      	b.n	4192 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x192>
    4190:	2500      	movs	r5, #0
    4192:	4628      	mov	r0, r5
    4194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4196:	0000      	.short	0x0000
    4198:	200000f0 	.word	0x200000f0
    419c:	20001438 	.word	0x20001438
    41a0:	b570      	push	{r4, r5, r6, lr}
    41a2:	4604      	mov	r4, r0
    41a4:	460e      	mov	r6, r1
    41a6:	7e40      	ldrb	r0, [r0, #25]
    41a8:	f7fe f8fe 	bl	23a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    41ac:	0005      	movs	r5, r0
    41ae:	d019      	beq.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41b0:	2110      	movs	r1, #16
    41b2:	f009 fed7 	bl	df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    41b6:	2800      	cmp	r0, #0
    41b8:	d114      	bne.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41ba:	2001      	movs	r0, #1
    41bc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    41c0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    41c4:	4632      	mov	r2, r6
    41c6:	460c      	mov	r4, r1
    41c8:	4628      	mov	r0, r5
    41ca:	f009 fca9 	bl	db20 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    41ce:	4621      	mov	r1, r4
    41d0:	4c05      	ldr	r4, [pc, #20]	; (41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>)
    41d2:	6860      	ldr	r0, [r4, #4]
    41d4:	f009 ff9b 	bl	e10e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    41d8:	6860      	ldr	r0, [r4, #4]
    41da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41de:	2101      	movs	r1, #1
    41e0:	f009 bf9b 	b.w	e11a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	0000      	.short	0x0000
    41e8:	200000f0 	.word	0x200000f0
    41ec:	4802      	ldr	r0, [pc, #8]	; (41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>)
    41ee:	2101      	movs	r1, #1
    41f0:	6800      	ldr	r0, [r0, #0]
    41f2:	f7ff baf9 	b.w	37e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    41f6:	0000      	.short	0x0000
    41f8:	200000f0 	.word	0x200000f0
    41fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4200:	4e21      	ldr	r6, [pc, #132]	; (4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>)
    4202:	4680      	mov	r8, r0
    4204:	460c      	mov	r4, r1
    4206:	6870      	ldr	r0, [r6, #4]
    4208:	4615      	mov	r5, r2
    420a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    420e:	6161      	str	r1, [r4, #20]
    4210:	6841      	ldr	r1, [r0, #4]
    4212:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4216:	61e1      	str	r1, [r4, #28]
    4218:	8940      	ldrh	r0, [r0, #10]
    421a:	f009 fd2d 	bl	dc78 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    421e:	4607      	mov	r7, r0
    4220:	6120      	str	r0, [r4, #16]
    4222:	6870      	ldr	r0, [r6, #4]
    4224:	4639      	mov	r1, r7
    4226:	7d80      	ldrb	r0, [r0, #22]
    4228:	f009 fe93 	bl	df52 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    422c:	84a0      	strh	r0, [r4, #36]	; 0x24
    422e:	6870      	ldr	r0, [r6, #4]
    4230:	4639      	mov	r1, r7
    4232:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4236:	f009 fe88 	bl	df4a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    423a:	6220      	str	r0, [r4, #32]
    423c:	6870      	ldr	r0, [r6, #4]
    423e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4242:	8321      	strh	r1, [r4, #24]
    4244:	8841      	ldrh	r1, [r0, #2]
    4246:	8361      	strh	r1, [r4, #26]
    4248:	6841      	ldr	r1, [r0, #4]
    424a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    424e:	7a01      	ldrb	r1, [r0, #8]
    4250:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4254:	7a41      	ldrb	r1, [r0, #9]
    4256:	f001 011f 	and.w	r1, r1, #31
    425a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    425e:	7a40      	ldrb	r0, [r0, #9]
    4260:	0940      	lsrs	r0, r0, #5
    4262:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4266:	f104 0062 	add.w	r0, r4, #98	; 0x62
    426a:	7205      	strb	r5, [r0, #8]
    426c:	7245      	strb	r5, [r0, #9]
    426e:	21ff      	movs	r1, #255	; 0xff
    4270:	7281      	strb	r1, [r0, #10]
    4272:	2100      	movs	r1, #0
    4274:	3836      	subs	r0, #54	; 0x36
    4276:	f00a f924 	bl	e4c2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    427a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    427e:	4620      	mov	r0, r4
    4280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4284:	f009 bdcc 	b.w	de20 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    4288:	200000f0 	.word	0x200000f0
    428c:	b570      	push	{r4, r5, r6, lr}
    428e:	4d07      	ldr	r5, [pc, #28]	; (42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>)
    4290:	4604      	mov	r4, r0
    4292:	f100 0151 	add.w	r1, r0, #81	; 0x51
    4296:	6868      	ldr	r0, [r5, #4]
    4298:	f009 ff46 	bl	e128 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    429c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    42a0:	6868      	ldr	r0, [r5, #4]
    42a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42a6:	f009 bf45 	b.w	e134 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    42aa:	0000      	.short	0x0000
    42ac:	200000f0 	.word	0x200000f0
    42b0:	00003a75 	.word	0x00003a75
    42b4:	000038fd 	.word	0x000038fd
    42b8:	000039f1 	.word	0x000039f1
    42bc:	00000000 	.word	0x00000000
    42c0:	000039c9 	.word	0x000039c9
    42c4:	00003a21 	.word	0x00003a21
    42c8:	0000ec7b 	.word	0x0000ec7b
    42cc:	0000ec81 	.word	0x0000ec81
    42d0:	00003c85 	.word	0x00003c85
    42d4:	00003ca9 	.word	0x00003ca9
    42d8:	000041ed 	.word	0x000041ed
    42dc:	000042cc 	.word	0x000042cc
    42e0:	000042c4 	.word	0x000042c4
    42e4:	000042c0 	.word	0x000042c0

000042e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    42e8:	b510      	push	{r4, lr}
    42ea:	1e42      	subs	r2, r0, #1
    42ec:	2a02      	cmp	r2, #2
    42ee:	d901      	bls.n	42f4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    42f0:	21ca      	movs	r1, #202	; 0xca
    42f2:	e009      	b.n	4308 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    42f4:	1e40      	subs	r0, r0, #1
    42f6:	2910      	cmp	r1, #16
    42f8:	d009      	beq.n	430e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    42fa:	2912      	cmp	r1, #18
    42fc:	d00c      	beq.n	4318 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    42fe:	2913      	cmp	r1, #19
    4300:	d00a      	beq.n	4318 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4302:	2915      	cmp	r1, #21
    4304:	d005      	beq.n	4312 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    4306:	21d8      	movs	r1, #216	; 0xd8
    4308:	202f      	movs	r0, #47	; 0x2f
    430a:	f7fc fb41 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    430e:	4905      	ldr	r1, [pc, #20]	; (4324 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4310:	e004      	b.n	431c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4312:	4904      	ldr	r1, [pc, #16]	; (4324 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4314:	1d89      	adds	r1, r1, #6
    4316:	e001      	b.n	431c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4318:	4902      	ldr	r1, [pc, #8]	; (4324 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    431a:	1f89      	subs	r1, r1, #6
    431c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4320:	bd10      	pop	{r4, pc}
    4322:	0000      	.short	0x0000
    4324:	0000eee2 	.word	0x0000eee2

00004328 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4328:	1e42      	subs	r2, r0, #1
    432a:	b510      	push	{r4, lr}
    432c:	b2d2      	uxtb	r2, r2
    432e:	2a01      	cmp	r2, #1
    4330:	d903      	bls.n	433a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4332:	291d      	cmp	r1, #29
    4334:	d001      	beq.n	433a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4336:	21ee      	movs	r1, #238	; 0xee
    4338:	e00d      	b.n	4356 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    433a:	2913      	cmp	r1, #19
    433c:	d013      	beq.n	4366 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    433e:	dc04      	bgt.n	434a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4340:	2910      	cmp	r1, #16
    4342:	d00b      	beq.n	435c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4344:	2912      	cmp	r1, #18
    4346:	d104      	bne.n	4352 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4348:	e00d      	b.n	4366 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    434a:	2915      	cmp	r1, #21
    434c:	d008      	beq.n	4360 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    434e:	291d      	cmp	r1, #29
    4350:	d00e      	beq.n	4370 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4352:	f44f 7181 	mov.w	r1, #258	; 0x102
    4356:	202f      	movs	r0, #47	; 0x2f
    4358:	f7fc fb1a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    435c:	4807      	ldr	r0, [pc, #28]	; (437c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    435e:	e004      	b.n	436a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4360:	4806      	ldr	r0, [pc, #24]	; (437c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4362:	3008      	adds	r0, #8
    4364:	e001      	b.n	436a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4366:	4805      	ldr	r0, [pc, #20]	; (437c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4368:	1d00      	adds	r0, r0, #4
    436a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    436e:	bd10      	pop	{r4, pc}
    4370:	f240 315a 	movw	r1, #858	; 0x35a
    4374:	fb10 f001 	smulbb	r0, r0, r1
    4378:	bd10      	pop	{r4, pc}
    437a:	0000      	.short	0x0000
    437c:	0000eed0 	.word	0x0000eed0

00004380 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4384:	4604      	mov	r4, r0
    4386:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    438a:	4616      	mov	r6, r2
    438c:	460f      	mov	r7, r1
    438e:	2800      	cmp	r0, #0
    4390:	d15e      	bne.n	4450 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4392:	4621      	mov	r1, r4
    4394:	484d      	ldr	r0, [pc, #308]	; (44cc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    4396:	f006 fd3b 	bl	ae10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    439a:	4605      	mov	r5, r0
    439c:	2820      	cmp	r0, #32
    439e:	d057      	beq.n	4450 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    43a0:	2250      	movs	r2, #80	; 0x50
    43a2:	2100      	movs	r1, #0
    43a4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    43a8:	f00c fdd7 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    43ac:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    43b0:	2501      	movs	r5, #1
    43b2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    43b6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    43ba:	b137      	cbz	r7, 43ca <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    43bc:	f7fe fdf0 	bl	2fa0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    43c0:	f000 0007 	and.w	r0, r0, #7
    43c4:	1c40      	adds	r0, r0, #1
    43c6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    43ca:	4620      	mov	r0, r4
    43cc:	f00a ff4e 	bl	f26c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    43d0:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    43d4:	2002      	movs	r0, #2
    43d6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    43da:	46a8      	mov	r8, r5
    43dc:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    43e0:	2500      	movs	r5, #0
    43e2:	f804 5fe8 	strb.w	r5, [r4, #232]!
    43e6:	f007 fe79 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    43ea:	4607      	mov	r7, r0
    43ec:	f00c fba0 	bl	10b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    43f0:	8921      	ldrh	r1, [r4, #8]
    43f2:	3ce8      	subs	r4, #232	; 0xe8
    43f4:	4288      	cmp	r0, r1
    43f6:	d800      	bhi.n	43fa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    43f8:	4608      	mov	r0, r1
    43fa:	4438      	add	r0, r7
    43fc:	30ce      	adds	r0, #206	; 0xce
    43fe:	b287      	uxth	r7, r0
    4400:	4620      	mov	r0, r4
    4402:	f00a fbf9 	bl	ebf8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4406:	b330      	cbz	r0, 4456 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4408:	f00c f982 	bl	10710 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    440c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4410:	b281      	uxth	r1, r0
    4412:	4630      	mov	r0, r6
    4414:	f007 ff82 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4418:	4430      	add	r0, r6
    441a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    441e:	3490      	adds	r4, #144	; 0x90
    4420:	f00c fb8f 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4424:	19c0      	adds	r0, r0, r7
    4426:	4169      	adcs	r1, r5
    4428:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    442c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4430:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4434:	2001      	movs	r0, #1
    4436:	f00a fd44 	bl	eec2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    443a:	f200 1015 	addw	r0, r0, #277	; 0x115
    443e:	1a30      	subs	r0, r6, r0
    4440:	6460      	str	r0, [r4, #68]	; 0x44
    4442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4446:	0841      	lsrs	r1, r0, #1
    4448:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    444c:	3c90      	subs	r4, #144	; 0x90
    444e:	e025      	b.n	449c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4450:	200c      	movs	r0, #12
    4452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4456:	2100      	movs	r1, #0
    4458:	4620      	mov	r0, r4
    445a:	f00a fe5b 	bl	f114 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    445e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 44d0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4462:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4466:	2000      	movs	r0, #0
    4468:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    446c:	b149      	cbz	r1, 4482 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    446e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4470:	b139      	cbz	r1, 4482 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4472:	f7fe fd95 	bl	2fa0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4476:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    447a:	fbb0 f2f1 	udiv	r2, r0, r1
    447e:	fb01 0012 	mls	r0, r1, r2, r0
    4482:	4407      	add	r7, r0
    4484:	f00c fb5d 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4488:	19c0      	adds	r0, r0, r7
    448a:	4169      	adcs	r1, r5
    448c:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4490:	b19e      	cbz	r6, 44ba <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4492:	1980      	adds	r0, r0, r6
    4494:	eb51 0105 	adcs.w	r1, r1, r5
    4498:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    449c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    44a0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    44a4:	f00a fee0 	bl	f268 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    44a8:	b158      	cbz	r0, 44c2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    44aa:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    44ae:	2100      	movs	r1, #0
    44b0:	4620      	mov	r0, r4
    44b2:	f00a fbd1 	bl	ec58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    44b6:	2000      	movs	r0, #0
    44b8:	e7cb      	b.n	4452 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    44ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44be:	0841      	lsrs	r1, r0, #1
    44c0:	e7ea      	b.n	4498 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    44c2:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    44c6:	2030      	movs	r0, #48	; 0x30
    44c8:	f7fc fa62 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44cc:	0000f34d 	.word	0x0000f34d
    44d0:	20000100 	.word	0x20000100

000044d4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    44d4:	4901      	ldr	r1, [pc, #4]	; (44dc <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    44d6:	8088      	strh	r0, [r1, #4]
    44d8:	4770      	bx	lr
    44da:	0000      	.short	0x0000
    44dc:	20000100 	.word	0x20000100

000044e0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    44e0:	4805      	ldr	r0, [pc, #20]	; (44f8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    44e2:	2100      	movs	r1, #0
    44e4:	7001      	strb	r1, [r0, #0]
    44e6:	2201      	movs	r2, #1
    44e8:	7082      	strb	r2, [r0, #2]
    44ea:	7041      	strb	r1, [r0, #1]
    44ec:	f242 7110 	movw	r1, #10000	; 0x2710
    44f0:	8081      	strh	r1, [r0, #4]
    44f2:	f000 b803 	b.w	44fc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    44f6:	0000      	.short	0x0000
    44f8:	20000100 	.word	0x20000100

000044fc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    44fc:	b51c      	push	{r2, r3, r4, lr}
    44fe:	4909      	ldr	r1, [pc, #36]	; (4524 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4500:	e9d1 0100 	ldrd	r0, r1, [r1]
    4504:	e9cd 0100 	strd	r0, r1, [sp]
    4508:	e002      	b.n	4510 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    450a:	9800      	ldr	r0, [sp, #0]
    450c:	f00a fd15 	bl	ef3a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4510:	4668      	mov	r0, sp
    4512:	f7fc fdbd 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4516:	2800      	cmp	r0, #0
    4518:	d0f7      	beq.n	450a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    451a:	f000 f8c7 	bl	46ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    451e:	2000      	movs	r0, #0
    4520:	bd1c      	pop	{r2, r3, r4, pc}
    4522:	0000      	.short	0x0000
    4524:	00004e44 	.word	0x00004e44

00004528 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4528:	4901      	ldr	r1, [pc, #4]	; (4530 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    452a:	7008      	strb	r0, [r1, #0]
    452c:	4770      	bx	lr
    452e:	0000      	.short	0x0000
    4530:	20000100 	.word	0x20000100

00004534 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4534:	4908      	ldr	r1, [pc, #32]	; (4558 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    453a:	fbb1 f1f2 	udiv	r1, r1, r2
    453e:	b510      	push	{r4, lr}
    4540:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4544:	f009 ffd6 	bl	e4f4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4548:	f640 0148 	movw	r1, #2120	; 0x848
    454c:	4288      	cmp	r0, r1
    454e:	d300      	bcc.n	4552 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4550:	4608      	mov	r0, r1
    4552:	b280      	uxth	r0, r0
    4554:	bd10      	pop	{r4, pc}
    4556:	0000      	.short	0x0000
    4558:	0001527d 	.word	0x0001527d

0000455c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    455c:	b510      	push	{r4, lr}
    455e:	f003 fb93 	bl	7c88 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4562:	4905      	ldr	r1, [pc, #20]	; (4578 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4564:	688a      	ldr	r2, [r1, #8]
    4566:	4290      	cmp	r0, r2
    4568:	d801      	bhi.n	456e <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    456a:	7848      	ldrb	r0, [r1, #1]
    456c:	b108      	cbz	r0, 4572 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    456e:	2000      	movs	r0, #0
    4570:	bd10      	pop	{r4, pc}
    4572:	2001      	movs	r0, #1
    4574:	bd10      	pop	{r4, pc}
    4576:	0000      	.short	0x0000
    4578:	20000100 	.word	0x20000100

0000457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    457c:	b510      	push	{r4, lr}
    457e:	4604      	mov	r4, r0
    4580:	2906      	cmp	r1, #6
    4582:	d238      	bcs.n	45f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4584:	e8df f001 	tbb	[pc, r1]
    4588:	14031105 	.word	0x14031105
    458c:	3215      	.short	0x3215
    458e:	2100      	movs	r1, #0
    4590:	e006      	b.n	45a0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4592:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4596:	b110      	cbz	r0, 459e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4598:	4620      	mov	r0, r4
    459a:	f00a fdf8 	bl	f18e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    459e:	2101      	movs	r1, #1
    45a0:	4620      	mov	r0, r4
    45a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45a6:	f000 b97f 	b.w	48a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    45aa:	2003      	movs	r0, #3
    45ac:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    45b0:	bd10      	pop	{r4, pc}
    45b2:	f003 fb75 	bl	7ca0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    45b6:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    45ba:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45be:	f003 fc33 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45c2:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    45c6:	4288      	cmp	r0, r1
    45c8:	d904      	bls.n	45d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    45ca:	f240 31e3 	movw	r1, #995	; 0x3e3
    45ce:	2030      	movs	r0, #48	; 0x30
    45d0:	f7fc f9de 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45d4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    45d8:	f003 fc26 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    45dc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    45e0:	1a08      	subs	r0, r1, r0
    45e2:	4906      	ldr	r1, [pc, #24]	; (45fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    45e4:	688a      	ldr	r2, [r1, #8]
    45e6:	4410      	add	r0, r2
    45e8:	6088      	str	r0, [r1, #8]
    45ea:	bd10      	pop	{r4, pc}
    45ec:	4620      	mov	r0, r4
    45ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45f2:	f00a bdb9 	b.w	f168 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    45f6:	f240 7199 	movw	r1, #1945	; 0x799
    45fa:	e7e8      	b.n	45ce <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    45fc:	20000100 	.word	0x20000100

00004600 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4604:	460c      	mov	r4, r1
    4606:	4680      	mov	r8, r0
    4608:	b112      	cbz	r2, 4610 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    460a:	f240 71c3 	movw	r1, #1987	; 0x7c3
    460e:	e037      	b.n	4680 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4610:	f003 fb3a 	bl	7c88 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4614:	4607      	mov	r7, r0
    4616:	2000      	movs	r0, #0
    4618:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    461c:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4620:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4624:	2001      	movs	r0, #1
    4626:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    462a:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    462e:	2101      	movs	r1, #1
    4630:	34c8      	adds	r4, #200	; 0xc8
    4632:	f7fe f859 	bl	26e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4636:	f854 0f04 	ldr.w	r0, [r4, #4]!
    463a:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    463e:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4642:	6821      	ldr	r1, [r4, #0]
    4644:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4648:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    464c:	6820      	ldr	r0, [r4, #0]
    464e:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4652:	6820      	ldr	r0, [r4, #0]
    4654:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4658:	f854 09cc 	ldr.w	r0, [r4], #-204
    465c:	f00a ff1f 	bl	f49e <__kernel_ram_size+0x1e6>
    4660:	b110      	cbz	r0, 4668 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4662:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4666:	e00b      	b.n	4680 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4668:	f00a fd8a 	bl	f180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    466c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4670:	4642      	mov	r2, r8
    4672:	4906      	ldr	r1, [pc, #24]	; (468c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4674:	f006 fa84 	bl	ab80 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4678:	2800      	cmp	r0, #0
    467a:	d104      	bne.n	4686 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    467c:	f240 71ac 	movw	r1, #1964	; 0x7ac
    4680:	2030      	movs	r0, #48	; 0x30
    4682:	f7fc f985 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    468a:	0000      	.short	0x0000
    468c:	0000f3b9 	.word	0x0000f3b9
    4690:	b510      	push	{r4, lr}
    4692:	280c      	cmp	r0, #12
    4694:	d304      	bcc.n	46a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    4696:	f240 318a 	movw	r1, #906	; 0x38a
    469a:	2006      	movs	r0, #6
    469c:	f7fc f978 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a0:	4901      	ldr	r1, [pc, #4]	; (46a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    46a2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    46a6:	bd10      	pop	{r4, pc}
    46a8:	00004e60 	.word	0x00004e60
    46ac:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    46b0:	4d16      	ldr	r5, [pc, #88]	; (470c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    46b2:	2001      	movs	r0, #1
    46b4:	7068      	strb	r0, [r5, #1]
    46b6:	2400      	movs	r4, #0
    46b8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    46bc:	e00b      	b.n	46d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    46be:	2100      	movs	r1, #0
    46c0:	f7fc fc94 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    46c4:	0007      	movs	r7, r0
    46c6:	d009      	beq.n	46dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    46c8:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    46cc:	f006 fa88 	bl	abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    46d0:	4638      	mov	r0, r7
    46d2:	f00a fe2e 	bl	f332 <__kernel_ram_size+0x7a>
    46d6:	9400      	str	r4, [sp, #0]
    46d8:	9401      	str	r4, [sp, #4]
    46da:	e00e      	b.n	46fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    46dc:	f44f 7191 	mov.w	r1, #290	; 0x122
    46e0:	2030      	movs	r0, #48	; 0x30
    46e2:	f7fc f955 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46e6:	9800      	ldr	r0, [sp, #0]
    46e8:	b138      	cbz	r0, 46fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    46ea:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    46ee:	2920      	cmp	r1, #32
    46f0:	d003      	beq.n	46fa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    46f2:	8800      	ldrh	r0, [r0, #0]
    46f4:	42b0      	cmp	r0, r6
    46f6:	d1e2      	bne.n	46be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    46f8:	e004      	b.n	4704 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    46fa:	4668      	mov	r0, sp
    46fc:	f7fc fcc8 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4700:	2800      	cmp	r0, #0
    4702:	d0f0      	beq.n	46e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4704:	706c      	strb	r4, [r5, #1]
    4706:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    470a:	0000      	.short	0x0000
    470c:	20000100 	.word	0x20000100
    4710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4714:	4604      	mov	r4, r0
    4716:	4839      	ldr	r0, [pc, #228]	; (47fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    4718:	461e      	mov	r6, r3
    471a:	4690      	mov	r8, r2
    471c:	7880      	ldrb	r0, [r0, #2]
    471e:	4689      	mov	r9, r1
    4720:	2500      	movs	r5, #0
    4722:	2800      	cmp	r0, #0
    4724:	d063      	beq.n	47ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4726:	f007 fdaf 	bl	c288 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    472a:	b3e0      	cbz	r0, 47a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    472c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4730:	2802      	cmp	r0, #2
    4732:	d35c      	bcc.n	47ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4734:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4738:	2802      	cmp	r0, #2
    473a:	d058      	beq.n	47ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    473c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4740:	bb88      	cbnz	r0, 47a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4742:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4746:	f7ff ffa3 	bl	4690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    474a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    474e:	b281      	uxth	r1, r0
    4750:	8031      	strh	r1, [r6, #0]
    4752:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4756:	2700      	movs	r7, #0
    4758:	2801      	cmp	r0, #1
    475a:	d00d      	beq.n	4778 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    475c:	6920      	ldr	r0, [r4, #16]
    475e:	f007 fddd 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4762:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4766:	4442      	add	r2, r8
    4768:	eba2 0109 	sub.w	r1, r2, r9
    476c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4770:	1a82      	subs	r2, r0, r2
    4772:	fb01 7502 	mla	r5, r1, r2, r7
    4776:	e035      	b.n	47e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4778:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    477c:	2803      	cmp	r0, #3
    477e:	d039      	beq.n	47f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    4780:	2101      	movs	r1, #1
    4782:	2000      	movs	r0, #0
    4784:	f009 fb3a 	bl	ddfc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4788:	6a21      	ldr	r1, [r4, #32]
    478a:	1847      	adds	r7, r0, r1
    478c:	8831      	ldrh	r1, [r6, #0]
    478e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4792:	f007 fdc3 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4796:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    479a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    479e:	1a82      	subs	r2, r0, r2
    47a0:	fb01 5502 	mla	r5, r1, r2, r5
    47a4:	e000      	b.n	47a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    47a6:	e022      	b.n	47ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    47a8:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    47ac:	8831      	ldrh	r1, [r6, #0]
    47ae:	4638      	mov	r0, r7
    47b0:	f007 fdb4 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47b4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    47b8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    47bc:	1a41      	subs	r1, r0, r1
    47be:	440d      	add	r5, r1
    47c0:	8831      	ldrh	r1, [r6, #0]
    47c2:	6920      	ldr	r0, [r4, #16]
    47c4:	f007 fdaa 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    47c8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    47cc:	4442      	add	r2, r8
    47ce:	eba2 0109 	sub.w	r1, r2, r9
    47d2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    47d6:	1a89      	subs	r1, r1, r2
    47d8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    47dc:	1a82      	subs	r2, r0, r2
    47de:	1e49      	subs	r1, r1, #1
    47e0:	fb01 5502 	mla	r5, r1, r2, r5
    47e4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    47e8:	2001      	movs	r0, #1
    47ea:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    47ee:	4628      	mov	r0, r5
    47f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47f4:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    47f8:	e7c6      	b.n	4788 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    47fa:	0000      	.short	0x0000
    47fc:	20000100 	.word	0x20000100
    4800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4804:	4605      	mov	r5, r0
    4806:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    480a:	2128      	movs	r1, #40	; 0x28
    480c:	f00a fc28 	bl	f060 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4810:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4814:	f00c f98c 	bl	10b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4818:	2869      	cmp	r0, #105	; 0x69
    481a:	d800      	bhi.n	481e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    481c:	2069      	movs	r0, #105	; 0x69
    481e:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4822:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4826:	692a      	ldr	r2, [r5, #16]
    4828:	440b      	add	r3, r1
    482a:	429a      	cmp	r2, r3
    482c:	d903      	bls.n	4836 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    482e:	1a51      	subs	r1, r2, r1
    4830:	1a0c      	subs	r4, r1, r0
    4832:	3469      	adds	r4, #105	; 0x69
    4834:	e000      	b.n	4838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4836:	2400      	movs	r4, #0
    4838:	4f1a      	ldr	r7, [pc, #104]	; (48a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    483a:	7838      	ldrb	r0, [r7, #0]
    483c:	b918      	cbnz	r0, 4846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    483e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4840:	42a0      	cmp	r0, r4
    4842:	d800      	bhi.n	4846 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4844:	4604      	mov	r4, r0
    4846:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    484a:	f009 fe5e 	bl	e50a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    484e:	4606      	mov	r6, r0
    4850:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4854:	f00a fe16 	bl	f484 <__kernel_ram_size+0x1cc>
    4858:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    485c:	4430      	add	r0, r6
    485e:	1846      	adds	r6, r0, r1
    4860:	1ba4      	subs	r4, r4, r6
    4862:	2c00      	cmp	r4, #0
    4864:	dc00      	bgt.n	4868 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4866:	2400      	movs	r4, #0
    4868:	2002      	movs	r0, #2
    486a:	f005 fa8b 	bl	9d84 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    486e:	4284      	cmp	r4, r0
    4870:	d300      	bcc.n	4874 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4872:	4604      	mov	r4, r0
    4874:	2102      	movs	r1, #2
    4876:	4620      	mov	r0, r4
    4878:	f005 f994 	bl	9ba4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    487c:	b900      	cbnz	r0, 4880 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    487e:	4426      	add	r6, r4
    4880:	4642      	mov	r2, r8
    4882:	4631      	mov	r1, r6
    4884:	4628      	mov	r0, r5
    4886:	f009 fde1 	bl	e44c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    488a:	60b8      	str	r0, [r7, #8]
    488c:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4890:	f00a fdf8 	bl	f484 <__kernel_ram_size+0x1cc>
    4894:	1a30      	subs	r0, r6, r0
    4896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    489a:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    489e:	f006 bbb7 	b.w	b010 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    48a2:	0000      	.short	0x0000
    48a4:	20000100 	.word	0x20000100
    48a8:	b538      	push	{r3, r4, r5, lr}
    48aa:	2500      	movs	r5, #0
    48ac:	4604      	mov	r4, r0
    48ae:	2901      	cmp	r1, #1
    48b0:	d102      	bne.n	48b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    48b2:	4810      	ldr	r0, [pc, #64]	; (48f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    48b4:	7840      	ldrb	r0, [r0, #1]
    48b6:	b170      	cbz	r0, 48d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    48b8:	2004      	movs	r0, #4
    48ba:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    48be:	bf00      	nop
    48c0:	f00a fc5e 	bl	f180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    48c4:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    48c8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    48cc:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    48d0:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    48d4:	bd38      	pop	{r3, r4, r5, pc}
    48d6:	9500      	str	r5, [sp, #0]
    48d8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    48dc:	2301      	movs	r3, #1
    48de:	2200      	movs	r2, #0
    48e0:	4620      	mov	r0, r4
    48e2:	f000 f809 	bl	48f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    48e6:	2800      	cmp	r0, #0
    48e8:	d0ea      	beq.n	48c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    48ea:	f240 710e 	movw	r1, #1806	; 0x70e
    48ee:	2030      	movs	r0, #48	; 0x30
    48f0:	f7fc f84e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f4:	20000100 	.word	0x20000100
    48f8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48fc:	b08b      	sub	sp, #44	; 0x2c
    48fe:	4604      	mov	r4, r0
    4900:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4904:	4699      	mov	r9, r3
    4906:	460f      	mov	r7, r1
    4908:	9307      	str	r3, [sp, #28]
    490a:	9005      	str	r0, [sp, #20]
    490c:	f00b ff00 	bl	10710 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4910:	4605      	mov	r5, r0
    4912:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4916:	f7ff febb 	bl	4690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    491a:	4428      	add	r0, r5
    491c:	f8ad 0004 	strh.w	r0, [sp, #4]
    4920:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4924:	280d      	cmp	r0, #13
    4926:	d004      	beq.n	4932 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4928:	2000      	movs	r0, #0
    492a:	9008      	str	r0, [sp, #32]
    492c:	980d      	ldr	r0, [sp, #52]	; 0x34
    492e:	b110      	cbz	r0, 4936 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4930:	e02e      	b.n	4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4932:	2001      	movs	r0, #1
    4934:	e7f9      	b.n	492a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4936:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    493a:	2803      	cmp	r0, #3
    493c:	d128      	bne.n	4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    493e:	9808      	ldr	r0, [sp, #32]
    4940:	b330      	cbz	r0, 4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4942:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4946:	42b8      	cmp	r0, r7
    4948:	d122      	bne.n	4990 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    494a:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    494e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4952:	6920      	ldr	r0, [r4, #16]
    4954:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4958:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    495c:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4960:	4408      	add	r0, r1
    4962:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4966:	4620      	mov	r0, r4
    4968:	f000 fa86 	bl	4e78 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    496c:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4970:	6220      	str	r0, [r4, #32]
    4972:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4976:	84a0      	strh	r0, [r4, #36]	; 0x24
    4978:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    497c:	6120      	str	r0, [r4, #16]
    497e:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4982:	8320      	strh	r0, [r4, #24]
    4984:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4988:	8360      	strh	r0, [r4, #26]
    498a:	2002      	movs	r0, #2
    498c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4990:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4994:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4998:	1a38      	subs	r0, r7, r0
    499a:	fa0f fa80 	sxth.w	sl, r0
    499e:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    49a2:	1a38      	subs	r0, r7, r0
    49a4:	fa0f f880 	sxth.w	r8, r0
    49a8:	f1b8 0f00 	cmp.w	r8, #0
    49ac:	da08      	bge.n	49c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    49ae:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    49b2:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    49b6:	46d0      	mov	r8, sl
    49b8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    49bc:	2001      	movs	r0, #1
    49be:	9007      	str	r0, [sp, #28]
    49c0:	ab01      	add	r3, sp, #4
    49c2:	4652      	mov	r2, sl
    49c4:	4641      	mov	r1, r8
    49c6:	4620      	mov	r0, r4
    49c8:	f7ff fea2 	bl	4710 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    49cc:	9004      	str	r0, [sp, #16]
    49ce:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    49d2:	f8df b334 	ldr.w	fp, [pc, #820]	; 4d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    49d6:	b140      	cbz	r0, 49ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    49d8:	2801      	cmp	r0, #1
    49da:	d07d      	beq.n	4ad8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    49dc:	2802      	cmp	r0, #2
    49de:	d051      	beq.n	4a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    49e0:	2803      	cmp	r0, #3
    49e2:	d07a      	beq.n	4ada <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    49e4:	f240 518e 	movw	r1, #1422	; 0x58e
    49e8:	e18a      	b.n	4d00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    49ea:	2101      	movs	r1, #1
    49ec:	2000      	movs	r0, #0
    49ee:	f009 fa05 	bl	ddfc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    49f2:	4606      	mov	r6, r0
    49f4:	6a20      	ldr	r0, [r4, #32]
    49f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    49fa:	4430      	add	r0, r6
    49fc:	f007 fc8e 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a00:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4a04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a08:	6920      	ldr	r0, [r4, #16]
    4a0a:	f007 fc87 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a0e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4a12:	a907      	add	r1, sp, #28
    4a14:	a806      	add	r0, sp, #24
    4a16:	f003 f89f 	bl	7b58 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4a1a:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4a22:	f006 fbc7 	bl	b1b4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4a26:	4682      	mov	sl, r0
    4a28:	4620      	mov	r0, r4
    4a2a:	f00a fb9d 	bl	f168 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4a2e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a32:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4a36:	f003 fa23 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4a3a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4a3e:	4401      	add	r1, r0
    4a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4a44:	fbb1 f0f0 	udiv	r0, r1, r0
    4a48:	6a21      	ldr	r1, [r4, #32]
    4a4a:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4a4e:	4431      	add	r1, r6
    4a50:	1a08      	subs	r0, r1, r0
    4a52:	1a81      	subs	r1, r0, r2
    4a54:	4441      	add	r1, r8
    4a56:	3920      	subs	r1, #32
    4a58:	eba1 060a 	sub.w	r6, r1, sl
    4a5c:	0050      	lsls	r0, r2, #1
    4a5e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4a60:	3060      	adds	r0, #96	; 0x60
    4a62:	4401      	add	r1, r0
    4a64:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a68:	f00a fbec 	bl	f244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4a6c:	3022      	adds	r0, #34	; 0x22
    4a6e:	f8cb 000c 	str.w	r0, [fp, #12]
    4a72:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4a76:	1a30      	subs	r0, r6, r0
    4a78:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    4a7c:	d258      	bcs.n	4b30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    4a7e:	f240 5127 	movw	r1, #1319	; 0x527
    4a82:	e13d      	b.n	4d00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4a84:	6a21      	ldr	r1, [r4, #32]
    4a86:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4a8a:	4408      	add	r0, r1
    4a8c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a90:	f007 fc44 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a94:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4a98:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4a9c:	6920      	ldr	r0, [r4, #16]
    4a9e:	f007 fc3d 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4aa2:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4aa6:	4620      	mov	r0, r4
    4aa8:	f00a fb5e 	bl	f168 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4aac:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4ab0:	bb10      	cbnz	r0, 4af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ab2:	f1b9 0f00 	cmp.w	r9, #0
    4ab6:	d01f      	beq.n	4af8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    4ab8:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4abc:	4640      	mov	r0, r8
    4abe:	f003 f9df 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4ac2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4ac6:	4401      	add	r1, r0
    4ac8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4acc:	fbb1 f0f0 	udiv	r0, r1, r0
    4ad0:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4ad4:	4408      	add	r0, r1
    4ad6:	e001      	b.n	4adc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    4ad8:	e02b      	b.n	4b32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    4ada:	e047      	b.n	4b6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    4adc:	6a22      	ldr	r2, [r4, #32]
    4ade:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4ae2:	4411      	add	r1, r2
    4ae4:	1a0e      	subs	r6, r1, r0
    4ae6:	4640      	mov	r0, r8
    4ae8:	f003 f99e 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4aec:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4af0:	1a08      	subs	r0, r1, r0
    4af2:	4406      	add	r6, r0
    4af4:	3e20      	subs	r6, #32
    4af6:	e006      	b.n	4b06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    4af8:	6a21      	ldr	r1, [r4, #32]
    4afa:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4afe:	4408      	add	r0, r1
    4b00:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4b04:	1a46      	subs	r6, r0, r1
    4b06:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4b0a:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4b0e:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4b12:	fb01 0002 	mla	r0, r1, r2, r0
    4b16:	0040      	lsls	r0, r0, #1
    4b18:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b1a:	3060      	adds	r0, #96	; 0x60
    4b1c:	4401      	add	r1, r0
    4b1e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b22:	f00a fb8f 	bl	f244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4b26:	f8cb 000c 	str.w	r0, [fp, #12]
    4b2a:	2001      	movs	r0, #1
    4b2c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b30:	e061      	b.n	4bf6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    4b32:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4b36:	6920      	ldr	r0, [r4, #16]
    4b38:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4b3c:	1a86      	subs	r6, r0, r2
    4b3e:	eb01 000a 	add.w	r0, r1, sl
    4b42:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4b46:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    4b4a:	1a40      	subs	r0, r0, r1
    4b4c:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4b50:	1e40      	subs	r0, r0, #1
    4b52:	fb0c 3101 	mla	r1, ip, r1, r3
    4b56:	fb00 1002 	mla	r0, r0, r2, r1
    4b5a:	0040      	lsls	r0, r0, #1
    4b5c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4b5e:	3060      	adds	r0, #96	; 0x60
    4b60:	4401      	add	r1, r0
    4b62:	fb06 f608 	mul.w	r6, r6, r8
    4b66:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b6a:	e040      	b.n	4bee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    4b6c:	6920      	ldr	r0, [r4, #16]
    4b6e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4b72:	fb00 f008 	mul.w	r0, r0, r8
    4b76:	fb08 0611 	mls	r6, r8, r1, r0
    4b7a:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    4b7e:	2825      	cmp	r0, #37	; 0x25
    4b80:	d003      	beq.n	4b8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    4b82:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4b86:	2825      	cmp	r0, #37	; 0x25
    4b88:	d109      	bne.n	4b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4b8a:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4b8e:	1a38      	subs	r0, r7, r0
    4b90:	b200      	sxth	r0, r0
    4b92:	2800      	cmp	r0, #0
    4b94:	db03      	blt.n	4b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4b96:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    4b9a:	b100      	cbz	r0, 4b9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4b9c:	9005      	str	r0, [sp, #20]
    4b9e:	9807      	ldr	r0, [sp, #28]
    4ba0:	b1d8      	cbz	r0, 4bda <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4ba2:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4ba6:	b9c0      	cbnz	r0, 4bda <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    4ba8:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4bac:	2800      	cmp	r0, #0
    4bae:	d07d      	beq.n	4cac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    4bb0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bb4:	f003 f964 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4bb8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4bbc:	4401      	add	r1, r0
    4bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4bc2:	fbb1 f0f0 	udiv	r0, r1, r0
    4bc6:	1a36      	subs	r6, r6, r0
    4bc8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4bcc:	f003 f92c 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4bd0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4bd4:	1a08      	subs	r0, r1, r0
    4bd6:	4406      	add	r6, r0
    4bd8:	3e20      	subs	r6, #32
    4bda:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4bde:	eb01 000a 	add.w	r0, r1, sl
    4be2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4be6:	4348      	muls	r0, r1
    4be8:	0041      	lsls	r1, r0, #1
    4bea:	3160      	adds	r1, #96	; 0x60
    4bec:	9805      	ldr	r0, [sp, #20]
    4bee:	f00a fb29 	bl	f244 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    4bf2:	f8cb 000c 	str.w	r0, [fp, #12]
    4bf6:	9804      	ldr	r0, [sp, #16]
    4bf8:	f8db 200c 	ldr.w	r2, [fp, #12]
    4bfc:	1a31      	subs	r1, r6, r0
    4bfe:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4c02:	6920      	ldr	r0, [r4, #16]
    4c04:	1b80      	subs	r0, r0, r6
    4c06:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    4c0a:	f8cb 0010 	str.w	r0, [fp, #16]
    4c0e:	4282      	cmp	r2, r0
    4c10:	d800      	bhi.n	4c14 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    4c12:	4610      	mov	r0, r2
    4c14:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    4c18:	2600      	movs	r6, #0
    4c1a:	702e      	strb	r6, [r5, #0]
    4c1c:	2069      	movs	r0, #105	; 0x69
    4c1e:	8128      	strh	r0, [r5, #8]
    4c20:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4c24:	1851      	adds	r1, r2, r1
    4c26:	4170      	adcs	r0, r6
    4c28:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4c2c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4c30:	f009 fc6b 	bl	e50a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4c34:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4c38:	4408      	add	r0, r1
    4c3a:	6068      	str	r0, [r5, #4]
    4c3c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4c40:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4c44:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4c48:	72ae      	strb	r6, [r5, #10]
    4c4a:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4c4e:	1bc0      	subs	r0, r0, r7
    4c50:	b200      	sxth	r0, r0
    4c52:	2800      	cmp	r0, #0
    4c54:	dd01      	ble.n	4c5a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    4c56:	2002      	movs	r0, #2
    4c58:	72a8      	strb	r0, [r5, #10]
    4c5a:	9808      	ldr	r0, [sp, #32]
    4c5c:	b338      	cbz	r0, 4cae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    4c5e:	f1b9 0f00 	cmp.w	r9, #0
    4c62:	d01c      	beq.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4c64:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4c68:	b3f1      	cbz	r1, 4ce8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    4c6a:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4c6e:	bf00      	nop
    4c70:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4c74:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4c78:	1c40      	adds	r0, r0, #1
    4c7a:	4342      	muls	r2, r0
    4c7c:	428a      	cmp	r2, r1
    4c7e:	d20e      	bcs.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4c80:	7aa8      	ldrb	r0, [r5, #10]
    4c82:	b160      	cbz	r0, 4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4c84:	72ae      	strb	r6, [r5, #10]
    4c86:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4c8a:	1c40      	adds	r0, r0, #1
    4c8c:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4c90:	f7fe f980 	bl	2f94 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4c94:	f000 0007 	and.w	r0, r0, #7
    4c98:	1c40      	adds	r0, r0, #1
    4c9a:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4c9e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4ca2:	4629      	mov	r1, r5
    4ca4:	f00a fae0 	bl	f268 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4ca8:	b340      	cbz	r0, 4cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    4caa:	e001      	b.n	4cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    4cac:	e009      	b.n	4cc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    4cae:	e00b      	b.n	4cc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    4cb0:	980d      	ldr	r0, [sp, #52]	; 0x34
    4cb2:	f080 0001 	eor.w	r0, r0, #1
    4cb6:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    4cba:	2000      	movs	r0, #0
    4cbc:	b00f      	add	sp, #60	; 0x3c
    4cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4cc2:	f240 5179 	movw	r1, #1401	; 0x579
    4cc6:	e01b      	b.n	4d00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4cc8:	f1b9 0f00 	cmp.w	r9, #0
    4ccc:	d1ca      	bne.n	4c64 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    4cce:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d0e3      	beq.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4cd6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4cda:	6920      	ldr	r0, [r4, #16]
    4cdc:	1a41      	subs	r1, r0, r1
    4cde:	4628      	mov	r0, r5
    4ce0:	f009 f8a2 	bl	de28 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4ce4:	0400      	lsls	r0, r0, #16
    4ce6:	e000      	b.n	4cea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    4ce8:	e006      	b.n	4cf8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    4cea:	0c00      	lsrs	r0, r0, #16
    4cec:	d0d7      	beq.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    4cee:	9918      	ldr	r1, [sp, #96]	; 0x60
    4cf0:	b101      	cbz	r1, 4cf4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    4cf2:	8008      	strh	r0, [r1, #0]
    4cf4:	2001      	movs	r0, #1
    4cf6:	e7e1      	b.n	4cbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    4cf8:	2000      	movs	r0, #0
    4cfa:	e7b9      	b.n	4c70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    4cfc:	f240 51d7 	movw	r1, #1495	; 0x5d7
    4d00:	2030      	movs	r0, #48	; 0x30
    4d02:	f7fb fe45 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d06:	0000      	.short	0x0000
    4d08:	20000100 	.word	0x20000100
    4d0c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4d0e:	4604      	mov	r4, r0
    4d10:	f00b ff17 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d14:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    4d18:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    4d1c:	1ac0      	subs	r0, r0, r3
    4d1e:	eb61 0102 	sbc.w	r1, r1, r2
    4d22:	2200      	movs	r2, #0
    4d24:	4613      	mov	r3, r2
    4d26:	1a12      	subs	r2, r2, r0
    4d28:	418b      	sbcs	r3, r1
    4d2a:	db02      	blt.n	4d32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    4d2c:	f240 6154 	movw	r1, #1620	; 0x654
    4d30:	e04d      	b.n	4dce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d32:	1c42      	adds	r2, r0, #1
    4d34:	f171 0100 	sbcs.w	r1, r1, #0
    4d38:	db02      	blt.n	4d40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    4d3a:	f240 6155 	movw	r1, #1621	; 0x655
    4d3e:	e046      	b.n	4dce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    4d40:	6922      	ldr	r2, [r4, #16]
    4d42:	2100      	movs	r1, #0
    4d44:	b10a      	cbz	r2, 4d4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    4d46:	fbb0 f1f2 	udiv	r1, r0, r2
    4d4a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4d4e:	280d      	cmp	r0, #13
    4d50:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4d54:	d01b      	beq.n	4d8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    4d56:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    4d5a:	1853      	adds	r3, r2, r1
    4d5c:	1ac3      	subs	r3, r0, r3
    4d5e:	b21b      	sxth	r3, r3
    4d60:	2b00      	cmp	r3, #0
    4d62:	db01      	blt.n	4d68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    4d64:	1c40      	adds	r0, r0, #1
    4d66:	e001      	b.n	4d6c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    4d68:	1c49      	adds	r1, r1, #1
    4d6a:	1850      	adds	r0, r2, r1
    4d6c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4d70:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    4d74:	f88d 0000 	strb.w	r0, [sp]
    4d78:	9800      	ldr	r0, [sp, #0]
    4d7a:	9000      	str	r0, [sp, #0]
    4d7c:	f89d 0000 	ldrb.w	r0, [sp]
    4d80:	b940      	cbnz	r0, 4d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4d82:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4d86:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4d8a:	4288      	cmp	r0, r1
    4d8c:	d102      	bne.n	4d94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    4d8e:	1c40      	adds	r0, r0, #1
    4d90:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4d94:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4d98:	1c40      	adds	r0, r0, #1
    4d9a:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    4d9e:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    4da2:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    4da6:	1a40      	subs	r0, r0, r1
    4da8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    4dac:	1e40      	subs	r0, r0, #1
    4dae:	4408      	add	r0, r1
    4db0:	b285      	uxth	r5, r0
    4db2:	e026      	b.n	4e02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4db4:	a801      	add	r0, sp, #4
    4db6:	2300      	movs	r3, #0
    4db8:	9000      	str	r0, [sp, #0]
    4dba:	461a      	mov	r2, r3
    4dbc:	4620      	mov	r0, r4
    4dbe:	f7ff fd9b 	bl	48f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d03a      	beq.n	4e3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    4dc6:	2801      	cmp	r0, #1
    4dc8:	d004      	beq.n	4dd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    4dca:	f240 6194 	movw	r1, #1684	; 0x694
    4dce:	2030      	movs	r0, #48	; 0x30
    4dd0:	f7fb fdde 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dd4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    4dd8:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    4ddc:	1a42      	subs	r2, r0, r1
    4dde:	b212      	sxth	r2, r2
    4de0:	2a00      	cmp	r2, #0
    4de2:	da09      	bge.n	4df8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4de4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    4de8:	4402      	add	r2, r0
    4dea:	1aaa      	subs	r2, r5, r2
    4dec:	b212      	sxth	r2, r2
    4dee:	2a00      	cmp	r2, #0
    4df0:	da02      	bge.n	4df8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    4df2:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    4df6:	e004      	b.n	4e02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    4df8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4dfc:	4408      	add	r0, r1
    4dfe:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e02:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    4e06:	1a68      	subs	r0, r5, r1
    4e08:	b200      	sxth	r0, r0
    4e0a:	2800      	cmp	r0, #0
    4e0c:	dad2      	bge.n	4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    4e0e:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4e12:	b188      	cbz	r0, 4e38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    4e14:	f05f 0008 	movs.w	r0, #8
    4e18:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4e1c:	2202      	movs	r2, #2
    4e1e:	4908      	ldr	r1, [pc, #32]	; (4e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    4e20:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    4e24:	f009 fada 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4e28:	4620      	mov	r0, r4
    4e2a:	f00a fbae 	bl	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    4e2e:	4620      	mov	r0, r4
    4e30:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    4e34:	f00a ba7d 	b.w	f332 <__kernel_ram_size+0x7a>
    4e38:	203e      	movs	r0, #62	; 0x3e
    4e3a:	e7ed      	b.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    4e3c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4e3e:	0000      	.short	0x0000
    4e40:	0000e699 	.word	0x0000e699
    4e44:	00000000 	.word	0x00000000
    4e48:	00010000 	.word	0x00010000
    4e4c:	00000000 	.word	0x00000000
    4e50:	00010000 	.word	0x00010000
    4e54:	00000000 	.word	0x00000000
    4e58:	00001e14 	.word	0x00001e14
    4e5c:	00001130 	.word	0x00001130
    4e60:	00fa01f4 	.word	0x00fa01f4
    4e64:	00640096 	.word	0x00640096
    4e68:	0032004b 	.word	0x0032004b
    4e6c:	0014001e 	.word	0x0014001e
    4e70:	0005000a 	.word	0x0005000a
    4e74:	00010002 	.word	0x00010002

00004e78 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    4e78:	b510      	push	{r4, lr}
    4e7a:	4604      	mov	r4, r0
    4e7c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    4e80:	6921      	ldr	r1, [r4, #16]
    4e82:	4288      	cmp	r0, r1
    4e84:	d109      	bne.n	4e9a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4e86:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    4e8a:	8b22      	ldrh	r2, [r4, #24]
    4e8c:	4291      	cmp	r1, r2
    4e8e:	d104      	bne.n	4e9a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    4e90:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    4e94:	8b62      	ldrh	r2, [r4, #26]
    4e96:	4291      	cmp	r1, r2
    4e98:	d014      	beq.n	4ec4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    4e9a:	8821      	ldrh	r1, [r4, #0]
    4e9c:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    4ea0:	f008 feee 	bl	dc80 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4ea4:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    4ea8:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4eac:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    4eb0:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4eb4:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    4eb8:	2202      	movs	r2, #2
    4eba:	4907      	ldr	r1, [pc, #28]	; (4ed8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    4ebc:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    4ec0:	f009 faa0 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    4ec4:	2102      	movs	r1, #2
    4ec6:	4620      	mov	r0, r4
    4ec8:	f7fd fc0e 	bl	26e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4ecc:	2000      	movs	r0, #0
    4ece:	f804 0f9e 	strb.w	r0, [r4, #158]!
    4ed2:	2003      	movs	r0, #3
    4ed4:	70e0      	strb	r0, [r4, #3]
    4ed6:	bd10      	pop	{r4, pc}
    4ed8:	0000e727 	.word	0x0000e727

00004edc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    4edc:	4806      	ldr	r0, [pc, #24]	; (4ef8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    4ede:	4905      	ldr	r1, [pc, #20]	; (4ef4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    4ee0:	6501      	str	r1, [r0, #80]	; 0x50
    4ee2:	4906      	ldr	r1, [pc, #24]	; (4efc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    4ee4:	6541      	str	r1, [r0, #84]	; 0x54
    4ee6:	4807      	ldr	r0, [pc, #28]	; (4f04 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    4ee8:	4905      	ldr	r1, [pc, #20]	; (4f00 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    4eea:	6501      	str	r1, [r0, #80]	; 0x50
    4eec:	4906      	ldr	r1, [pc, #24]	; (4f08 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    4eee:	6541      	str	r1, [r0, #84]	; 0x54
    4ef0:	4770      	bx	lr
    4ef2:	0000      	.short	0x0000
    4ef4:	000061d5 	.word	0x000061d5
    4ef8:	2000012c 	.word	0x2000012c
    4efc:	000062bd 	.word	0x000062bd
    4f00:	0000e749 	.word	0x0000e749
    4f04:	200001d8 	.word	0x200001d8
    4f08:	0000670d 	.word	0x0000670d

00004f0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    4f0c:	481e      	ldr	r0, [pc, #120]	; (4f88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    4f0e:	491d      	ldr	r1, [pc, #116]	; (4f84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    4f10:	6081      	str	r1, [r0, #8]
    4f12:	491e      	ldr	r1, [pc, #120]	; (4f8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    4f14:	6041      	str	r1, [r0, #4]
    4f16:	491e      	ldr	r1, [pc, #120]	; (4f90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    4f18:	6001      	str	r1, [r0, #0]
    4f1a:	491e      	ldr	r1, [pc, #120]	; (4f94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    4f1c:	6281      	str	r1, [r0, #40]	; 0x28
    4f1e:	491e      	ldr	r1, [pc, #120]	; (4f98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    4f20:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f22:	491e      	ldr	r1, [pc, #120]	; (4f9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    4f24:	60c1      	str	r1, [r0, #12]
    4f26:	491e      	ldr	r1, [pc, #120]	; (4fa0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    4f28:	6181      	str	r1, [r0, #24]
    4f2a:	491e      	ldr	r1, [pc, #120]	; (4fa4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    4f2c:	6301      	str	r1, [r0, #48]	; 0x30
    4f2e:	491e      	ldr	r1, [pc, #120]	; (4fa8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    4f30:	6201      	str	r1, [r0, #32]
    4f32:	491e      	ldr	r1, [pc, #120]	; (4fac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    4f34:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f36:	491e      	ldr	r1, [pc, #120]	; (4fb0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    4f38:	6481      	str	r1, [r0, #72]	; 0x48
    4f3a:	491e      	ldr	r1, [pc, #120]	; (4fb4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    4f3c:	6441      	str	r1, [r0, #68]	; 0x44
    4f3e:	491e      	ldr	r1, [pc, #120]	; (4fb8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    4f40:	6341      	str	r1, [r0, #52]	; 0x34
    4f42:	491e      	ldr	r1, [pc, #120]	; (4fbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    4f44:	61c1      	str	r1, [r0, #28]
    4f46:	491e      	ldr	r1, [pc, #120]	; (4fc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    4f48:	6241      	str	r1, [r0, #36]	; 0x24
    4f4a:	481f      	ldr	r0, [pc, #124]	; (4fc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    4f4c:	491d      	ldr	r1, [pc, #116]	; (4fc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    4f4e:	6081      	str	r1, [r0, #8]
    4f50:	491e      	ldr	r1, [pc, #120]	; (4fcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    4f52:	61c1      	str	r1, [r0, #28]
    4f54:	491e      	ldr	r1, [pc, #120]	; (4fd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    4f56:	6241      	str	r1, [r0, #36]	; 0x24
    4f58:	491e      	ldr	r1, [pc, #120]	; (4fd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    4f5a:	62c1      	str	r1, [r0, #44]	; 0x2c
    4f5c:	491e      	ldr	r1, [pc, #120]	; (4fd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    4f5e:	6101      	str	r1, [r0, #16]
    4f60:	491e      	ldr	r1, [pc, #120]	; (4fdc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    4f62:	6141      	str	r1, [r0, #20]
    4f64:	491e      	ldr	r1, [pc, #120]	; (4fe0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    4f66:	6441      	str	r1, [r0, #68]	; 0x44
    4f68:	491e      	ldr	r1, [pc, #120]	; (4fe4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    4f6a:	6341      	str	r1, [r0, #52]	; 0x34
    4f6c:	491e      	ldr	r1, [pc, #120]	; (4fe8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    4f6e:	6181      	str	r1, [r0, #24]
    4f70:	491e      	ldr	r1, [pc, #120]	; (4fec <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    4f72:	6301      	str	r1, [r0, #48]	; 0x30
    4f74:	491e      	ldr	r1, [pc, #120]	; (4ff0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    4f76:	6481      	str	r1, [r0, #72]	; 0x48
    4f78:	491e      	ldr	r1, [pc, #120]	; (4ff4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    4f7a:	64c1      	str	r1, [r0, #76]	; 0x4c
    4f7c:	491e      	ldr	r1, [pc, #120]	; (4ff8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    4f7e:	6381      	str	r1, [r0, #56]	; 0x38
    4f80:	4770      	bx	lr
    4f82:	0000      	.short	0x0000
    4f84:	00006621 	.word	0x00006621
    4f88:	2000012c 	.word	0x2000012c
    4f8c:	00005fbd 	.word	0x00005fbd
    4f90:	00006029 	.word	0x00006029
    4f94:	000062c9 	.word	0x000062c9
    4f98:	0000f603 	.word	0x0000f603
    4f9c:	000060e9 	.word	0x000060e9
    4fa0:	000065f9 	.word	0x000065f9
    4fa4:	000066b9 	.word	0x000066b9
    4fa8:	00006189 	.word	0x00006189
    4fac:	0000e941 	.word	0x0000e941
    4fb0:	0000e8f9 	.word	0x0000e8f9
    4fb4:	00006571 	.word	0x00006571
    4fb8:	000065a5 	.word	0x000065a5
    4fbc:	0000662d 	.word	0x0000662d
    4fc0:	00006195 	.word	0x00006195
    4fc4:	0000e709 	.word	0x0000e709
    4fc8:	200001d8 	.word	0x200001d8
    4fcc:	000067f9 	.word	0x000067f9
    4fd0:	0000f6d1 	.word	0x0000f6d1
    4fd4:	0000f6d5 	.word	0x0000f6d5
    4fd8:	0000f6ab 	.word	0x0000f6ab
    4fdc:	0000f73d 	.word	0x0000f73d
    4fe0:	0000674d 	.word	0x0000674d
    4fe4:	0000f71b 	.word	0x0000f71b
    4fe8:	00006785 	.word	0x00006785
    4fec:	0000f75b 	.word	0x0000f75b
    4ff0:	0000e91d 	.word	0x0000e91d
    4ff4:	0000e967 	.word	0x0000e967
    4ff8:	0000f739 	.word	0x0000f739

00004ffc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    4ffc:	4806      	ldr	r0, [pc, #24]	; (5018 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    4ffe:	4905      	ldr	r1, [pc, #20]	; (5014 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    5000:	6581      	str	r1, [r0, #88]	; 0x58
    5002:	4906      	ldr	r1, [pc, #24]	; (501c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    5004:	6601      	str	r1, [r0, #96]	; 0x60
    5006:	4807      	ldr	r0, [pc, #28]	; (5024 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    5008:	4905      	ldr	r1, [pc, #20]	; (5020 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    500a:	6581      	str	r1, [r0, #88]	; 0x58
    500c:	4906      	ldr	r1, [pc, #24]	; (5028 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    500e:	65c1      	str	r1, [r0, #92]	; 0x5c
    5010:	4770      	bx	lr
    5012:	0000      	.short	0x0000
    5014:	00006319 	.word	0x00006319
    5018:	2000012c 	.word	0x2000012c
    501c:	000063fd 	.word	0x000063fd
    5020:	00010745 	.word	0x00010745
    5024:	200001d8 	.word	0x200001d8
    5028:	0000f6fb 	.word	0x0000f6fb

0000502c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    502e:	4c7c      	ldr	r4, [pc, #496]	; (5220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    5030:	2101      	movs	r1, #1
    5032:	f1a4 0610 	sub.w	r6, r4, #16
    5036:	7021      	strb	r1, [r4, #0]
    5038:	2500      	movs	r5, #0
    503a:	6060      	str	r0, [r4, #4]
    503c:	8075      	strh	r5, [r6, #2]
    503e:	7075      	strb	r5, [r6, #1]
    5040:	7035      	strb	r5, [r6, #0]
    5042:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    5046:	8800      	ldrh	r0, [r0, #0]
    5048:	f7fc f97a 	bl	1340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    504c:	b180      	cbz	r0, 5070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    504e:	6860      	ldr	r0, [r4, #4]
    5050:	8800      	ldrh	r0, [r0, #0]
    5052:	f7fc fbdd 	bl	1810 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5056:	6860      	ldr	r0, [r4, #4]
    5058:	8800      	ldrh	r0, [r0, #0]
    505a:	f7fc fb81 	bl	1760 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    505e:	6860      	ldr	r0, [r4, #4]
    5060:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5064:	b1c9      	cbz	r1, 509a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5066:	3080      	adds	r0, #128	; 0x80
    5068:	f00a fa9e 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    506c:	b118      	cbz	r0, 5076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    506e:	e014      	b.n	509a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5070:	f640 419f 	movw	r1, #3231	; 0xc9f
    5074:	e06c      	b.n	5150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    5076:	6860      	ldr	r0, [r4, #4]
    5078:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    507c:	f88d 1000 	strb.w	r1, [sp]
    5080:	9900      	ldr	r1, [sp, #0]
    5082:	9100      	str	r1, [sp, #0]
    5084:	f89d 1000 	ldrb.w	r1, [sp]
    5088:	b139      	cbz	r1, 509a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    508a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    508e:	2301      	movs	r3, #1
    5090:	4619      	mov	r1, r3
    5092:	3080      	adds	r0, #128	; 0x80
    5094:	f008 fdfa 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5098:	b180      	cbz	r0, 50bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    509a:	6860      	ldr	r0, [r4, #4]
    509c:	3080      	adds	r0, #128	; 0x80
    509e:	f00a fa83 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    50a2:	b128      	cbz	r0, 50b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    50a4:	6860      	ldr	r0, [r4, #4]
    50a6:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    50aa:	bf00      	nop
    50ac:	f000 fb84 	bl	57b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    50b0:	6860      	ldr	r0, [r4, #4]
    50b2:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    50b6:	b189      	cbz	r1, 50dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    50b8:	80b5      	strh	r5, [r6, #4]
    50ba:	e01e      	b.n	50fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    50bc:	6860      	ldr	r0, [r4, #4]
    50be:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    50c2:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    50c6:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    50ca:	2100      	movs	r1, #0
    50cc:	2002      	movs	r0, #2
    50ce:	f000 fe39 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    50d2:	6860      	ldr	r0, [r4, #4]
    50d4:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    50d8:	2002      	movs	r0, #2
    50da:	e7e7      	b.n	50ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    50dc:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    50e0:	f88d 1000 	strb.w	r1, [sp]
    50e4:	9900      	ldr	r1, [sp, #0]
    50e6:	9100      	str	r1, [sp, #0]
    50e8:	f89d 1000 	ldrb.w	r1, [sp]
    50ec:	b919      	cbnz	r1, 50f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    50ee:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    50f0:	8b02      	ldrh	r2, [r0, #24]
    50f2:	4291      	cmp	r1, r2
    50f4:	d800      	bhi.n	50f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    50f6:	8b01      	ldrh	r1, [r0, #24]
    50f8:	80b1      	strh	r1, [r6, #4]
    50fa:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    50fe:	1e49      	subs	r1, r1, #1
    5100:	b28f      	uxth	r7, r1
    5102:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    5106:	4439      	add	r1, r7
    5108:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    510c:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    5110:	4439      	add	r1, r7
    5112:	8001      	strh	r1, [r0, #0]
    5114:	f001 fba0 	bl	6858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5118:	b120      	cbz	r0, 5124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    511a:	6860      	ldr	r0, [r4, #4]
    511c:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    5120:	4439      	add	r1, r7
    5122:	6001      	str	r1, [r0, #0]
    5124:	6861      	ldr	r1, [r4, #4]
    5126:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    512a:	2801      	cmp	r0, #1
    512c:	d802      	bhi.n	5134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    512e:	1c40      	adds	r0, r0, #1
    5130:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5134:	b10f      	cbz	r7, 513a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5136:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    513a:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    513e:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    5142:	f101 0080 	add.w	r0, r1, #128	; 0x80
    5146:	f008 ff4d 	bl	dfe4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    514a:	b120      	cbz	r0, 5156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    514c:	f640 41e6 	movw	r1, #3302	; 0xce6
    5150:	2031      	movs	r0, #49	; 0x31
    5152:	f7fb fc1d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5156:	6860      	ldr	r0, [r4, #4]
    5158:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    515c:	290a      	cmp	r1, #10
    515e:	d001      	beq.n	5164 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    5160:	290b      	cmp	r1, #11
    5162:	d119      	bne.n	5198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5164:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5168:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    516c:	1ad2      	subs	r2, r2, r3
    516e:	b212      	sxth	r2, r2
    5170:	2a00      	cmp	r2, #0
    5172:	db11      	blt.n	5198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5174:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5178:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    517c:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    5180:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    5184:	2103      	movs	r1, #3
    5186:	f7fd faaf 	bl	26e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    518a:	6860      	ldr	r0, [r4, #4]
    518c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5190:	21ff      	movs	r1, #255	; 0xff
    5192:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    5196:	e026      	b.n	51e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5198:	2925      	cmp	r1, #37	; 0x25
    519a:	d111      	bne.n	51c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    519c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51a0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51a4:	1a89      	subs	r1, r1, r2
    51a6:	b209      	sxth	r1, r1
    51a8:	2900      	cmp	r1, #0
    51aa:	db09      	blt.n	51c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    51ac:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    51b0:	f000 fe82 	bl	5eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    51b4:	2800      	cmp	r0, #0
    51b6:	6860      	ldr	r0, [r4, #4]
    51b8:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    51bc:	d029      	beq.n	5212 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    51be:	e012      	b.n	51e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51c0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    51c4:	2925      	cmp	r1, #37	; 0x25
    51c6:	d001      	beq.n	51cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    51c8:	2927      	cmp	r1, #39	; 0x27
    51ca:	d10c      	bne.n	51e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51cc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    51d0:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    51d4:	1a89      	subs	r1, r1, r2
    51d6:	b209      	sxth	r1, r1
    51d8:	2900      	cmp	r1, #0
    51da:	db04      	blt.n	51e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    51dc:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    51e0:	f000 fe6a 	bl	5eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    51e4:	b1a8      	cbz	r0, 5212 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    51e6:	480f      	ldr	r0, [pc, #60]	; (5224 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    51e8:	9000      	str	r0, [sp, #0]
    51ea:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    51ee:	4b0e      	ldr	r3, [pc, #56]	; (5228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    51f0:	4a0e      	ldr	r2, [pc, #56]	; (522c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    51f2:	f7fc fb9b 	bl	192c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    51f6:	6860      	ldr	r0, [r4, #4]
    51f8:	2301      	movs	r3, #1
    51fa:	2105      	movs	r1, #5
    51fc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5200:	3080      	adds	r0, #128	; 0x80
    5202:	f008 fd43 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5206:	2800      	cmp	r0, #0
    5208:	d009      	beq.n	521e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    520a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    520e:	f7fc bb87 	b.w	1920 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    5212:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5216:	2100      	movs	r1, #0
    5218:	4608      	mov	r0, r1
    521a:	f000 bb9f 	b.w	595c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    521e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5220:	20000124 	.word	0x20000124
    5224:	0000595d 	.word	0x0000595d
    5228:	000054ad 	.word	0x000054ad
    522c:	00005e05 	.word	0x00005e05
    5230:	491d      	ldr	r1, [pc, #116]	; (52a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5232:	b508      	push	{r3, lr}
    5234:	6849      	ldr	r1, [r1, #4]
    5236:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    523a:	b1c0      	cbz	r0, 526e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    523c:	2a11      	cmp	r2, #17
    523e:	d006      	beq.n	524e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    5240:	2a15      	cmp	r2, #21
    5242:	d007      	beq.n	5254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    5244:	2a16      	cmp	r2, #22
    5246:	d009      	beq.n	525c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    5248:	2a1c      	cmp	r2, #28
    524a:	d128      	bne.n	529e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    524c:	e009      	b.n	5262 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    524e:	2101      	movs	r1, #1
    5250:	200b      	movs	r0, #11
    5252:	e008      	b.n	5266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5254:	4814      	ldr	r0, [pc, #80]	; (52a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    5256:	f00a f9e0 	bl	f61a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    525a:	e006      	b.n	526a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    525c:	f000 fd90 	bl	5d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5260:	e003      	b.n	526a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5262:	2101      	movs	r1, #1
    5264:	2006      	movs	r0, #6
    5266:	f000 fd6d 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    526a:	2001      	movs	r0, #1
    526c:	bd08      	pop	{r3, pc}
    526e:	2a22      	cmp	r2, #34	; 0x22
    5270:	d004      	beq.n	527c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5272:	2a2f      	cmp	r2, #47	; 0x2f
    5274:	d113      	bne.n	529e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5276:	2101      	movs	r1, #1
    5278:	2011      	movs	r0, #17
    527a:	e7f4      	b.n	5266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    527c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5280:	2802      	cmp	r0, #2
    5282:	d00e      	beq.n	52a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5284:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5288:	2801      	cmp	r0, #1
    528a:	d108      	bne.n	529e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    528c:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5290:	f88d 0000 	strb.w	r0, [sp]
    5294:	9800      	ldr	r0, [sp, #0]
    5296:	9000      	str	r0, [sp, #0]
    5298:	f89d 0000 	ldrb.w	r0, [sp]
    529c:	b108      	cbz	r0, 52a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    529e:	2000      	movs	r0, #0
    52a0:	bd08      	pop	{r3, pc}
    52a2:	2101      	movs	r1, #1
    52a4:	2017      	movs	r0, #23
    52a6:	e7de      	b.n	5266 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    52a8:	20000124 	.word	0x20000124
    52ac:	b538      	push	{r3, r4, r5, lr}
    52ae:	2800      	cmp	r0, #0
    52b0:	d173      	bne.n	539a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    52b2:	4c3b      	ldr	r4, [pc, #236]	; (53a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    52b4:	6860      	ldr	r0, [r4, #4]
    52b6:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    52ba:	07ca      	lsls	r2, r1, #31
    52bc:	d002      	beq.n	52c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    52be:	2101      	movs	r1, #1
    52c0:	2009      	movs	r0, #9
    52c2:	e066      	b.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    52c4:	078a      	lsls	r2, r1, #30
    52c6:	d50a      	bpl.n	52de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    52c8:	2101      	movs	r1, #1
    52ca:	200c      	movs	r0, #12
    52cc:	f000 fd3a 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    52d0:	6860      	ldr	r0, [r4, #4]
    52d2:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    52d6:	f041 0101 	orr.w	r1, r1, #1
    52da:	7001      	strb	r1, [r0, #0]
    52dc:	e05b      	b.n	5396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    52de:	074a      	lsls	r2, r1, #29
    52e0:	d502      	bpl.n	52e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    52e2:	2101      	movs	r1, #1
    52e4:	2013      	movs	r0, #19
    52e6:	e054      	b.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    52e8:	070a      	lsls	r2, r1, #28
    52ea:	d506      	bpl.n	52fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    52ec:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    52f0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    52f4:	2101      	movs	r1, #1
    52f6:	2007      	movs	r0, #7
    52f8:	e04b      	b.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    52fa:	f011 0f30 	tst.w	r1, #48	; 0x30
    52fe:	d044      	beq.n	538a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    5300:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5304:	f88d 1000 	strb.w	r1, [sp]
    5308:	9900      	ldr	r1, [sp, #0]
    530a:	9100      	str	r1, [sp, #0]
    530c:	f89d 1000 	ldrb.w	r1, [sp]
    5310:	bbc1      	cbnz	r1, 5384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    5312:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5316:	2500      	movs	r5, #0
    5318:	f88d 1000 	strb.w	r1, [sp]
    531c:	9900      	ldr	r1, [sp, #0]
    531e:	9100      	str	r1, [sp, #0]
    5320:	f89d 1000 	ldrb.w	r1, [sp]
    5324:	b1c1      	cbz	r1, 5358 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    5326:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    532a:	2925      	cmp	r1, #37	; 0x25
    532c:	d02b      	beq.n	5386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    532e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5332:	2925      	cmp	r1, #37	; 0x25
    5334:	d027      	beq.n	5386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    5336:	2300      	movs	r3, #0
    5338:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    533c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5340:	f009 f876 	bl	e430 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5344:	6860      	ldr	r0, [r4, #4]
    5346:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    534a:	f021 0120 	bic.w	r1, r1, #32
    534e:	f041 0110 	orr.w	r1, r1, #16
    5352:	6001      	str	r1, [r0, #0]
    5354:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5358:	6860      	ldr	r0, [r4, #4]
    535a:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    535e:	06c9      	lsls	r1, r1, #27
    5360:	d51b      	bpl.n	539a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5362:	f009 f880 	bl	e466 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5366:	480e      	ldr	r0, [pc, #56]	; (53a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5368:	f009 fa3e 	bl	e7e8 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    536c:	6861      	ldr	r1, [r4, #4]
    536e:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5372:	8bc2      	ldrh	r2, [r0, #30]
    5374:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5378:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    537a:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    537e:	2101      	movs	r1, #1
    5380:	2015      	movs	r0, #21
    5382:	e006      	b.n	5392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5384:	e009      	b.n	539a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5386:	2301      	movs	r3, #1
    5388:	e7d6      	b.n	5338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    538a:	0648      	lsls	r0, r1, #25
    538c:	d505      	bpl.n	539a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    538e:	2101      	movs	r1, #1
    5390:	2024      	movs	r0, #36	; 0x24
    5392:	f000 fcd7 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5396:	2001      	movs	r0, #1
    5398:	bd38      	pop	{r3, r4, r5, pc}
    539a:	2000      	movs	r0, #0
    539c:	bd38      	pop	{r3, r4, r5, pc}
    539e:	0000      	.short	0x0000
    53a0:	20000124 	.word	0x20000124
    53a4:	b570      	push	{r4, r5, r6, lr}
    53a6:	460d      	mov	r5, r1
    53a8:	4606      	mov	r6, r0
    53aa:	f008 ff76 	bl	e29a <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    53ae:	4604      	mov	r4, r0
    53b0:	4630      	mov	r0, r6
    53b2:	f008 ff74 	bl	e29e <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    53b6:	4629      	mov	r1, r5
    53b8:	f000 f81e 	bl	53f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    53bc:	b1b8      	cbz	r0, 53ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    53be:	4620      	mov	r0, r4
    53c0:	f008 fd0e 	bl	dde0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    53c4:	0001      	movs	r1, r0
    53c6:	d00d      	beq.n	53e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53c8:	480a      	ldr	r0, [pc, #40]	; (53f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    53ca:	6840      	ldr	r0, [r0, #4]
    53cc:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    53d0:	428a      	cmp	r2, r1
    53d2:	d007      	beq.n	53e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    53d4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    53d8:	2901      	cmp	r1, #1
    53da:	d005      	beq.n	53e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    53dc:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    53e0:	4220      	tst	r0, r4
    53e2:	d004      	beq.n	53ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    53e4:	2001      	movs	r0, #1
    53e6:	bd70      	pop	{r4, r5, r6, pc}
    53e8:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    53ec:	e7f8      	b.n	53e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    53ee:	2000      	movs	r0, #0
    53f0:	bd70      	pop	{r4, r5, r6, pc}
    53f2:	0000      	.short	0x0000
    53f4:	20000124 	.word	0x20000124
    53f8:	b570      	push	{r4, r5, r6, lr}
    53fa:	460d      	mov	r5, r1
    53fc:	4604      	mov	r4, r0
    53fe:	f008 fcef 	bl	dde0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5402:	b350      	cbz	r0, 545a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5404:	4916      	ldr	r1, [pc, #88]	; (5460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    5406:	6849      	ldr	r1, [r1, #4]
    5408:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    540c:	4282      	cmp	r2, r0
    540e:	d024      	beq.n	545a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5410:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5414:	2b01      	cmp	r3, #1
    5416:	d005      	beq.n	5424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    5418:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    541c:	4223      	tst	r3, r4
    541e:	d013      	beq.n	5448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5420:	b11d      	cbz	r5, 542a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    5422:	e01a      	b.n	545a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5424:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5428:	e7f8      	b.n	541c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    542a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    542e:	4221      	tst	r1, r4
    5430:	d113      	bne.n	545a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5432:	b15a      	cbz	r2, 544c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    5434:	2a04      	cmp	r2, #4
    5436:	d00e      	beq.n	5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5438:	2804      	cmp	r0, #4
    543a:	d00c      	beq.n	5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    543c:	2a08      	cmp	r2, #8
    543e:	d00a      	beq.n	5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5440:	2808      	cmp	r0, #8
    5442:	d008      	beq.n	5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    5444:	4282      	cmp	r2, r0
    5446:	d908      	bls.n	545a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5448:	2000      	movs	r0, #0
    544a:	bd70      	pop	{r4, r5, r6, pc}
    544c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5450:	2006      	movs	r0, #6
    5452:	f7fb fa9d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5456:	4282      	cmp	r2, r0
    5458:	d3f6      	bcc.n	5448 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    545a:	2001      	movs	r0, #1
    545c:	bd70      	pop	{r4, r5, r6, pc}
    545e:	0000      	.short	0x0000
    5460:	20000124 	.word	0x20000124
    5464:	b510      	push	{r4, lr}
    5466:	4c10      	ldr	r4, [pc, #64]	; (54a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5468:	2301      	movs	r3, #1
    546a:	2100      	movs	r1, #0
    546c:	6860      	ldr	r0, [r4, #4]
    546e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5472:	3080      	adds	r0, #128	; 0x80
    5474:	f008 fc0a 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5478:	b140      	cbz	r0, 548c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    547a:	6860      	ldr	r0, [r4, #4]
    547c:	2301      	movs	r3, #1
    547e:	2104      	movs	r1, #4
    5480:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5484:	3080      	adds	r0, #128	; 0x80
    5486:	f008 fc01 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    548a:	b108      	cbz	r0, 5490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    548c:	2000      	movs	r0, #0
    548e:	bd10      	pop	{r4, pc}
    5490:	6860      	ldr	r0, [r4, #4]
    5492:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5496:	2800      	cmp	r0, #0
    5498:	d0f9      	beq.n	548e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    549a:	2100      	movs	r1, #0
    549c:	2012      	movs	r0, #18
    549e:	f000 fc51 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    54a2:	2001      	movs	r0, #1
    54a4:	bd10      	pop	{r4, pc}
    54a6:	0000      	.short	0x0000
    54a8:	20000124 	.word	0x20000124
    54ac:	490d      	ldr	r1, [pc, #52]	; (54e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    54ae:	4602      	mov	r2, r0
    54b0:	7848      	ldrb	r0, [r1, #1]
    54b2:	b9a0      	cbnz	r0, 54de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54b4:	f101 0010 	add.w	r0, r1, #16
    54b8:	6840      	ldr	r0, [r0, #4]
    54ba:	b142      	cbz	r2, 54ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    54bc:	7889      	ldrb	r1, [r1, #2]
    54be:	0709      	lsls	r1, r1, #28
    54c0:	d503      	bpl.n	54ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    54c2:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    54c6:	2807      	cmp	r0, #7
    54c8:	d009      	beq.n	54de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54ca:	2001      	movs	r0, #1
    54cc:	4770      	bx	lr
    54ce:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    54d2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    54d4:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    54d6:	428a      	cmp	r2, r1
    54d8:	d801      	bhi.n	54de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    54da:	f7ff b83f 	b.w	455c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    54de:	2000      	movs	r0, #0
    54e0:	4770      	bx	lr
    54e2:	0000      	.short	0x0000
    54e4:	20000114 	.word	0x20000114
    54e8:	b538      	push	{r3, r4, r5, lr}
    54ea:	4c32      	ldr	r4, [pc, #200]	; (55b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    54ec:	4605      	mov	r5, r0
    54ee:	6860      	ldr	r0, [r4, #4]
    54f0:	3080      	adds	r0, #128	; 0x80
    54f2:	f00a f859 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    54f6:	2800      	cmp	r0, #0
    54f8:	d15b      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    54fa:	2d00      	cmp	r5, #0
    54fc:	d159      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    54fe:	6860      	ldr	r0, [r4, #4]
    5500:	2301      	movs	r3, #1
    5502:	4619      	mov	r1, r3
    5504:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5508:	3080      	adds	r0, #128	; 0x80
    550a:	f008 fbbf 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    550e:	2800      	cmp	r0, #0
    5510:	d14f      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5512:	6860      	ldr	r0, [r4, #4]
    5514:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5518:	f88d 1000 	strb.w	r1, [sp]
    551c:	9900      	ldr	r1, [sp, #0]
    551e:	9100      	str	r1, [sp, #0]
    5520:	f89d 2000 	ldrb.w	r2, [sp]
    5524:	2100      	movs	r1, #0
    5526:	b142      	cbz	r2, 553a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5528:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    552c:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5530:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5534:	2100      	movs	r1, #0
    5536:	2002      	movs	r0, #2
    5538:	e030      	b.n	559c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    553a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    553e:	2301      	movs	r3, #1
    5540:	2104      	movs	r1, #4
    5542:	3080      	adds	r0, #128	; 0x80
    5544:	f008 fba2 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5548:	4605      	mov	r5, r0
    554a:	f7ff feaf 	bl	52ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    554e:	2800      	cmp	r0, #0
    5550:	d12f      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5552:	4628      	mov	r0, r5
    5554:	f7ff fe6c 	bl	5230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5558:	2800      	cmp	r0, #0
    555a:	d12a      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    555c:	f7ff ff82 	bl	5464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5560:	2800      	cmp	r0, #0
    5562:	d126      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5564:	6860      	ldr	r0, [r4, #4]
    5566:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    556a:	2909      	cmp	r1, #9
    556c:	d01a      	beq.n	55a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    556e:	2d00      	cmp	r5, #0
    5570:	d11f      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5572:	f000 fb13 	bl	5b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5576:	2800      	cmp	r0, #0
    5578:	d11b      	bne.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    557a:	6860      	ldr	r0, [r4, #4]
    557c:	2301      	movs	r3, #1
    557e:	2100      	movs	r1, #0
    5580:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5584:	3080      	adds	r0, #128	; 0x80
    5586:	f008 fb81 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    558a:	2800      	cmp	r0, #0
    558c:	d011      	beq.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    558e:	6860      	ldr	r0, [r4, #4]
    5590:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5594:	2800      	cmp	r0, #0
    5596:	d00c      	beq.n	55b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5598:	2100      	movs	r1, #0
    559a:	20ff      	movs	r0, #255	; 0xff
    559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    55a0:	f000 bbd0 	b.w	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    55a4:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    55a8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    55ac:	2100      	movs	r1, #0
    55ae:	2007      	movs	r0, #7
    55b0:	e7f4      	b.n	559c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    55b2:	bd38      	pop	{r3, r4, r5, pc}
    55b4:	20000124 	.word	0x20000124
    55b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55ba:	4d2b      	ldr	r5, [pc, #172]	; (5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    55bc:	0006      	movs	r6, r0
    55be:	f105 0410 	add.w	r4, r5, #16
    55c2:	d133      	bne.n	562c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55c4:	f000 f8aa 	bl	571c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    55c8:	f000 f852 	bl	5670 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    55cc:	0006      	movs	r6, r0
    55ce:	d12d      	bne.n	562c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    55d0:	8869      	ldrh	r1, [r5, #2]
    55d2:	0748      	lsls	r0, r1, #29
    55d4:	d506      	bpl.n	55e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    55d6:	6860      	ldr	r0, [r4, #4]
    55d8:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    55dc:	2806      	cmp	r0, #6
    55de:	d101      	bne.n	55e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    55e0:	2001      	movs	r0, #1
    55e2:	7028      	strb	r0, [r5, #0]
    55e4:	0788      	lsls	r0, r1, #30
    55e6:	d516      	bpl.n	5616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    55e8:	68a8      	ldr	r0, [r5, #8]
    55ea:	78c0      	ldrb	r0, [r0, #3]
    55ec:	282b      	cmp	r0, #43	; 0x2b
    55ee:	d207      	bcs.n	5600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    55f0:	491e      	ldr	r1, [pc, #120]	; (566c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    55f2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    55f6:	b119      	cbz	r1, 5600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    55f8:	481b      	ldr	r0, [pc, #108]	; (5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    55fa:	3010      	adds	r0, #16
    55fc:	4788      	blx	r1
    55fe:	e00a      	b.n	5616 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5600:	28ff      	cmp	r0, #255	; 0xff
    5602:	d004      	beq.n	560e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5604:	f640 0148 	movw	r1, #2120	; 0x848
    5608:	2031      	movs	r0, #49	; 0x31
    560a:	f7fb f9c1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    560e:	4816      	ldr	r0, [pc, #88]	; (5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5610:	3010      	adds	r0, #16
    5612:	f00a f841 	bl	f698 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5616:	78a8      	ldrb	r0, [r5, #2]
    5618:	06c0      	lsls	r0, r0, #27
    561a:	d507      	bpl.n	562c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    561c:	6860      	ldr	r0, [r4, #4]
    561e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5622:	290a      	cmp	r1, #10
    5624:	d102      	bne.n	562c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5626:	210b      	movs	r1, #11
    5628:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    562c:	7868      	ldrb	r0, [r5, #1]
    562e:	0700      	lsls	r0, r0, #28
    5630:	d518      	bpl.n	5664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5632:	6860      	ldr	r0, [r4, #4]
    5634:	2301      	movs	r3, #1
    5636:	2105      	movs	r1, #5
    5638:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    563c:	3080      	adds	r0, #128	; 0x80
    563e:	f008 fb25 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5642:	b108      	cbz	r0, 5648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5644:	2608      	movs	r6, #8
    5646:	e00d      	b.n	5664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5648:	2500      	movs	r5, #0
    564a:	4669      	mov	r1, sp
    564c:	2003      	movs	r0, #3
    564e:	9500      	str	r5, [sp, #0]
    5650:	f7fc fa2e 	bl	1ab0 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5654:	9800      	ldr	r0, [sp, #0]
    5656:	b128      	cbz	r0, 5664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5658:	7205      	strb	r5, [r0, #8]
    565a:	2210      	movs	r2, #16
    565c:	6861      	ldr	r1, [r4, #4]
    565e:	9800      	ldr	r0, [sp, #0]
    5660:	f008 febc 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5664:	4630      	mov	r0, r6
    5666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5668:	20000114 	.word	0x20000114
    566c:	200001d8 	.word	0x200001d8
    5670:	b570      	push	{r4, r5, r6, lr}
    5672:	4d28      	ldr	r5, [pc, #160]	; (5714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5674:	2000      	movs	r0, #0
    5676:	78a9      	ldrb	r1, [r5, #2]
    5678:	07c9      	lsls	r1, r1, #31
    567a:	d017      	beq.n	56ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    567c:	68e8      	ldr	r0, [r5, #12]
    567e:	f105 0410 	add.w	r4, r5, #16
    5682:	2301      	movs	r3, #1
    5684:	78c6      	ldrb	r6, [r0, #3]
    5686:	6860      	ldr	r0, [r4, #4]
    5688:	2105      	movs	r1, #5
    568a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    568e:	3080      	adds	r0, #128	; 0x80
    5690:	f008 fafc 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5694:	b158      	cbz	r0, 56ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    5696:	1eb6      	subs	r6, r6, #2
    5698:	2e0a      	cmp	r6, #10
    569a:	d206      	bcs.n	56aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    569c:	e8df f006 	tbb	[pc, r6]
    56a0:	05050707 	.word	0x05050707
    56a4:	05050707 	.word	0x05050707
    56a8:	0707      	.short	0x0707
    56aa:	2008      	movs	r0, #8
    56ac:	bd70      	pop	{r4, r5, r6, pc}
    56ae:	68e8      	ldr	r0, [r5, #12]
    56b0:	f7fd f944 	bl	293c <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    56b4:	b338      	cbz	r0, 5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    56b6:	68e8      	ldr	r0, [r5, #12]
    56b8:	78c5      	ldrb	r5, [r0, #3]
    56ba:	b11d      	cbz	r5, 56c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56bc:	2d01      	cmp	r5, #1
    56be:	d001      	beq.n	56c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    56c0:	2d16      	cmp	r5, #22
    56c2:	d113      	bne.n	56ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56c4:	6860      	ldr	r0, [r4, #4]
    56c6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    56ca:	f008 fb37 	bl	dd3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    56ce:	b168      	cbz	r0, 56ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56d0:	6861      	ldr	r1, [r4, #4]
    56d2:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    56d6:	2820      	cmp	r0, #32
    56d8:	d008      	beq.n	56ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    56da:	2821      	cmp	r0, #33	; 0x21
    56dc:	d003      	beq.n	56e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    56de:	2d16      	cmp	r5, #22
    56e0:	d00f      	beq.n	5702 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    56e2:	2002      	movs	r0, #2
    56e4:	bd70      	pop	{r4, r5, r6, pc}
    56e6:	202e      	movs	r0, #46	; 0x2e
    56e8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    56ec:	2d2b      	cmp	r5, #43	; 0x2b
    56ee:	d20a      	bcs.n	5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    56f0:	4809      	ldr	r0, [pc, #36]	; (5718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    56f2:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    56f6:	b131      	cbz	r1, 5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    56f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56fc:	4805      	ldr	r0, [pc, #20]	; (5714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    56fe:	3010      	adds	r0, #16
    5700:	4708      	bx	r1
    5702:	2020      	movs	r0, #32
    5704:	bd70      	pop	{r4, r5, r6, pc}
    5706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    570a:	4802      	ldr	r0, [pc, #8]	; (5714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    570c:	3010      	adds	r0, #16
    570e:	f000 bd47 	b.w	61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5712:	0000      	.short	0x0000
    5714:	20000114 	.word	0x20000114
    5718:	2000012c 	.word	0x2000012c
    571c:	b570      	push	{r4, r5, r6, lr}
    571e:	4e25      	ldr	r6, [pc, #148]	; (57b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5720:	78b0      	ldrb	r0, [r6, #2]
    5722:	0700      	lsls	r0, r0, #28
    5724:	d545      	bpl.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5726:	f106 0410 	add.w	r4, r6, #16
    572a:	6860      	ldr	r0, [r4, #4]
    572c:	3080      	adds	r0, #128	; 0x80
    572e:	f009 ff3b 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5732:	b148      	cbz	r0, 5748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5734:	6860      	ldr	r0, [r4, #4]
    5736:	21fe      	movs	r1, #254	; 0xfe
    5738:	2500      	movs	r5, #0
    573a:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    573e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5742:	291a      	cmp	r1, #26
    5744:	d10e      	bne.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5746:	e004      	b.n	5752 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5748:	f640 0154 	movw	r1, #2132	; 0x854
    574c:	2031      	movs	r0, #49	; 0x31
    574e:	f7fb f91f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5752:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5756:	4817      	ldr	r0, [pc, #92]	; (57b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5758:	3010      	adds	r0, #16
    575a:	f008 ff80 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    575e:	6860      	ldr	r0, [r4, #4]
    5760:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5764:	6860      	ldr	r0, [r4, #4]
    5766:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    576a:	2920      	cmp	r1, #32
    576c:	d002      	beq.n	5774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    576e:	2931      	cmp	r1, #49	; 0x31
    5770:	d116      	bne.n	57a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5772:	e00e      	b.n	5792 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5774:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5778:	2301      	movs	r3, #1
    577a:	210b      	movs	r1, #11
    577c:	3080      	adds	r0, #128	; 0x80
    577e:	f008 fa85 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5782:	b108      	cbz	r0, 5788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5784:	202e      	movs	r0, #46	; 0x2e
    5786:	e000      	b.n	578a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    5788:	2021      	movs	r0, #33	; 0x21
    578a:	6861      	ldr	r1, [r4, #4]
    578c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5790:	e006      	b.n	57a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5792:	2101      	movs	r1, #1
    5794:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5798:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    579c:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    57a0:	6860      	ldr	r0, [r4, #4]
    57a2:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    57a6:	2907      	cmp	r1, #7
    57a8:	d103      	bne.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    57aa:	2102      	movs	r1, #2
    57ac:	7031      	strb	r1, [r6, #0]
    57ae:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    57b2:	bd70      	pop	{r4, r5, r6, pc}
    57b4:	20000114 	.word	0x20000114
    57b8:	b538      	push	{r3, r4, r5, lr}
    57ba:	4605      	mov	r5, r0
    57bc:	4668      	mov	r0, sp
    57be:	f7fc f811 	bl	17e4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    57c2:	b308      	cbz	r0, 5808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    57c4:	2222      	movs	r2, #34	; 0x22
    57c6:	2100      	movs	r1, #0
    57c8:	9800      	ldr	r0, [sp, #0]
    57ca:	f00b fbc6 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    57ce:	2103      	movs	r1, #3
    57d0:	9800      	ldr	r0, [sp, #0]
    57d2:	f008 fd7c 	bl	e2ce <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    57d6:	9800      	ldr	r0, [sp, #0]
    57d8:	7801      	ldrb	r1, [r0, #0]
    57da:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    57de:	7001      	strb	r1, [r0, #0]
    57e0:	4629      	mov	r1, r5
    57e2:	f7fd f8bb 	bl	295c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    57e6:	4c5b      	ldr	r4, [pc, #364]	; (5954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    57e8:	2d11      	cmp	r5, #17
    57ea:	d032      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    57ec:	dc0f      	bgt.n	580e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    57ee:	f1a5 0502 	sub.w	r5, r5, #2
    57f2:	2d0d      	cmp	r5, #13
    57f4:	d21f      	bcs.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    57f6:	e8df f005 	tbb	[pc, r5]
    57fa:	1e21      	.short	0x1e21
    57fc:	26a3a355 	.word	0x26a3a355
    5800:	a31e621e 	.word	0xa31e621e
    5804:	0090393f 	.word	0x0090393f
    5808:	f640 21fe 	movw	r1, #2814	; 0xafe
    580c:	e09e      	b.n	594c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    580e:	2d17      	cmp	r5, #23
    5810:	d075      	beq.n	58fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5812:	dc08      	bgt.n	5826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5814:	f1a5 0512 	sub.w	r5, r5, #18
    5818:	2d05      	cmp	r5, #5
    581a:	d20c      	bcs.n	5836 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    581c:	e8df f005 	tbb	[pc, r5]
    5820:	54549090 	.word	0x54549090
    5824:	0038      	.short	0x0038
    5826:	2d23      	cmp	r5, #35	; 0x23
    5828:	d07b      	beq.n	5922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    582a:	2d24      	cmp	r5, #36	; 0x24
    582c:	d079      	beq.n	5922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    582e:	2d25      	cmp	r5, #37	; 0x25
    5830:	d077      	beq.n	5922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5832:	2dff      	cmp	r5, #255	; 0xff
    5834:	d07c      	beq.n	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5836:	f640 31aa 	movw	r1, #2986	; 0xbaa
    583a:	e087      	b.n	594c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    583c:	6861      	ldr	r1, [r4, #4]
    583e:	9800      	ldr	r0, [sp, #0]
    5840:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5844:	e016      	b.n	5874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5846:	6860      	ldr	r0, [r4, #4]
    5848:	9900      	ldr	r1, [sp, #0]
    584a:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    584e:	7108      	strb	r0, [r1, #4]
    5850:	e076      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5852:	6860      	ldr	r0, [r4, #4]
    5854:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5858:	9800      	ldr	r0, [sp, #0]
    585a:	f008 fd24 	bl	e2a6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    585e:	6860      	ldr	r0, [r4, #4]
    5860:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5864:	9800      	ldr	r0, [sp, #0]
    5866:	f008 fd22 	bl	e2ae <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    586a:	e069      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    586c:	6861      	ldr	r1, [r4, #4]
    586e:	9800      	ldr	r0, [sp, #0]
    5870:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5874:	7101      	strb	r1, [r0, #4]
    5876:	e063      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5878:	9800      	ldr	r0, [sp, #0]
    587a:	210d      	movs	r1, #13
    587c:	7101      	strb	r1, [r0, #4]
    587e:	2159      	movs	r1, #89	; 0x59
    5880:	7141      	strb	r1, [r0, #5]
    5882:	2100      	movs	r1, #0
    5884:	7181      	strb	r1, [r0, #6]
    5886:	2177      	movs	r1, #119	; 0x77
    5888:	71c1      	strb	r1, [r0, #7]
    588a:	2110      	movs	r1, #16
    588c:	7201      	strb	r1, [r0, #8]
    588e:	e057      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5890:	9800      	ldr	r0, [sp, #0]
    5892:	6861      	ldr	r1, [r4, #4]
    5894:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5898:	7101      	strb	r1, [r0, #4]
    589a:	6861      	ldr	r1, [r4, #4]
    589c:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    58a0:	7141      	strb	r1, [r0, #5]
    58a2:	e04d      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58a4:	6861      	ldr	r1, [r4, #4]
    58a6:	9800      	ldr	r0, [sp, #0]
    58a8:	f501 7110 	add.w	r1, r1, #576	; 0x240
    58ac:	f008 fcb6 	bl	e21c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    58b0:	6861      	ldr	r1, [r4, #4]
    58b2:	9800      	ldr	r0, [sp, #0]
    58b4:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    58b8:	f008 fcad 	bl	e216 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    58bc:	e040      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58be:	4825      	ldr	r0, [pc, #148]	; (5954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    58c0:	9900      	ldr	r1, [sp, #0]
    58c2:	f7fd fc0b 	bl	30dc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    58c6:	e03b      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58c8:	6860      	ldr	r0, [r4, #4]
    58ca:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    58ce:	9800      	ldr	r0, [sp, #0]
    58d0:	f008 fd05 	bl	e2de <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    58d4:	6860      	ldr	r0, [r4, #4]
    58d6:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    58da:	9800      	ldr	r0, [sp, #0]
    58dc:	f008 fd03 	bl	e2e6 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    58e0:	6860      	ldr	r0, [r4, #4]
    58e2:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    58e6:	9800      	ldr	r0, [sp, #0]
    58e8:	f008 fd01 	bl	e2ee <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    58ec:	6860      	ldr	r0, [r4, #4]
    58ee:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    58f2:	9800      	ldr	r0, [sp, #0]
    58f4:	f008 fcff 	bl	e2f6 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    58f8:	e022      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    58fa:	e000      	b.n	58fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    58fc:	e011      	b.n	5922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    58fe:	6861      	ldr	r1, [r4, #4]
    5900:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5904:	2801      	cmp	r0, #1
    5906:	9800      	ldr	r0, [sp, #0]
    5908:	d0c4      	beq.n	5894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    590a:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    590e:	7101      	strb	r1, [r0, #4]
    5910:	6861      	ldr	r1, [r4, #4]
    5912:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5916:	e7c3      	b.n	58a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5918:	e00a      	b.n	5930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    591a:	9800      	ldr	r0, [sp, #0]
    591c:	f7fd fb88 	bl	3030 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5920:	e00e      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5922:	4b0d      	ldr	r3, [pc, #52]	; (5958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5924:	4a0b      	ldr	r2, [pc, #44]	; (5954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5926:	4628      	mov	r0, r5
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	9900      	ldr	r1, [sp, #0]
    592c:	4798      	blx	r3
    592e:	e007      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5930:	6860      	ldr	r0, [r4, #4]
    5932:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5936:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    593a:	9800      	ldr	r0, [sp, #0]
    593c:	f008 fcb9 	bl	e2b2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5940:	f7fb ff2a 	bl	1798 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5944:	2800      	cmp	r0, #0
    5946:	d104      	bne.n	5952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5948:	f640 31ae 	movw	r1, #2990	; 0xbae
    594c:	2031      	movs	r0, #49	; 0x31
    594e:	f7fb f81f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5952:	bd38      	pop	{r3, r4, r5, pc}
    5954:	20000124 	.word	0x20000124
    5958:	20000284 	.word	0x20000284
    595c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5960:	4e8c      	ldr	r6, [pc, #560]	; (5b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5962:	468a      	mov	sl, r1
    5964:	6870      	ldr	r0, [r6, #4]
    5966:	8800      	ldrh	r0, [r0, #0]
    5968:	f7fb fcea 	bl	1340 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    596c:	0007      	movs	r7, r0
    596e:	d00c      	beq.n	598a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5970:	f1a6 0510 	sub.w	r5, r6, #16
    5974:	f04f 0400 	mov.w	r4, #0
    5978:	8868      	ldrh	r0, [r5, #2]
    597a:	05c0      	lsls	r0, r0, #23
    597c:	d50a      	bpl.n	5994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    597e:	6870      	ldr	r0, [r6, #4]
    5980:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5984:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5988:	e009      	b.n	599e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    598a:	f640 6189 	movw	r1, #3721	; 0xe89
    598e:	2031      	movs	r0, #49	; 0x31
    5990:	f7fa fffe 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5994:	6871      	ldr	r1, [r6, #4]
    5996:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    599a:	1c40      	adds	r0, r0, #1
    599c:	8008      	strh	r0, [r1, #0]
    599e:	f000 ff5b 	bl	6858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    59a2:	f04f 0901 	mov.w	r9, #1
    59a6:	b340      	cbz	r0, 59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59a8:	8868      	ldrh	r0, [r5, #2]
    59aa:	0500      	lsls	r0, r0, #20
    59ac:	d506      	bpl.n	59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59ae:	6870      	ldr	r0, [r6, #4]
    59b0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    59b4:	b111      	cbz	r1, 59bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    59b6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    59ba:	e01e      	b.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59bc:	6870      	ldr	r0, [r6, #4]
    59be:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    59c2:	1c49      	adds	r1, r1, #1
    59c4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    59c8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    59cc:	428a      	cmp	r2, r1
    59ce:	d301      	bcc.n	59d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    59d0:	1a53      	subs	r3, r2, r1
    59d2:	e000      	b.n	59d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    59d4:	2300      	movs	r3, #0
    59d6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    59da:	f10c 0c05 	add.w	ip, ip, #5
    59de:	4563      	cmp	r3, ip
    59e0:	d801      	bhi.n	59e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    59e2:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    59e6:	4291      	cmp	r1, r2
    59e8:	d307      	bcc.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    59ea:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    59ee:	2202      	movs	r2, #2
    59f0:	4969      	ldr	r1, [pc, #420]	; (5b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    59f2:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    59f6:	f008 fd05 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    59fa:	8868      	ldrh	r0, [r5, #2]
    59fc:	f04f 0b02 	mov.w	fp, #2
    5a00:	f410 7f40 	tst.w	r0, #768	; 0x300
    5a04:	d00e      	beq.n	5a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a06:	6870      	ldr	r0, [r6, #4]
    5a08:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a0c:	b111      	cbz	r1, 5a14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5a0e:	2903      	cmp	r1, #3
    5a10:	d108      	bne.n	5a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5a12:	e002      	b.n	5a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5a14:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5a18:	e001      	b.n	5a1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5a1a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a1e:	2101      	movs	r1, #1
    5a20:	f7fe fdac 	bl	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5a24:	6870      	ldr	r0, [r6, #4]
    5a26:	46b0      	mov	r8, r6
    5a28:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5a2c:	2901      	cmp	r1, #1
    5a2e:	d104      	bne.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a30:	8869      	ldrh	r1, [r5, #2]
    5a32:	0549      	lsls	r1, r1, #21
    5a34:	d501      	bpl.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5a36:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5a3a:	9900      	ldr	r1, [sp, #0]
    5a3c:	2900      	cmp	r1, #0
    5a3e:	d179      	bne.n	5b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5a40:	78a9      	ldrb	r1, [r5, #2]
    5a42:	0649      	lsls	r1, r1, #25
    5a44:	d502      	bpl.n	5a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5a46:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5a4a:	e004      	b.n	5a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5a4c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5a50:	1c49      	adds	r1, r1, #1
    5a52:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5a56:	4650      	mov	r0, sl
    5a58:	f7ff fdae 	bl	55b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    5a5c:	ea40 000a 	orr.w	r0, r0, sl
    5a60:	4682      	mov	sl, r0
    5a62:	f7ff fd41 	bl	54e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    5a66:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5a6a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    5a6e:	1c40      	adds	r0, r0, #1
    5a70:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5a74:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5a78:	b128      	cbz	r0, 5a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    5a7a:	f7fc f857 	bl	1b2c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    5a7e:	b1b0      	cbz	r0, 5aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5a80:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5a84:	e013      	b.n	5aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5a86:	f7fb ff2f 	bl	18e8 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    5a8a:	b108      	cbz	r0, 5a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    5a8c:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5a90:	f7fb ff24 	bl	18dc <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    5a94:	b158      	cbz	r0, 5aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5a96:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    5a9a:	1c40      	adds	r0, r0, #1
    5a9c:	b2c0      	uxtb	r0, r0
    5a9e:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    5aa2:	2802      	cmp	r0, #2
    5aa4:	d903      	bls.n	5aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    5aa6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5aaa:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    5aae:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ab2:	4646      	mov	r6, r8
    5ab4:	2301      	movs	r3, #1
    5ab6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5aba:	2100      	movs	r1, #0
    5abc:	3080      	adds	r0, #128	; 0x80
    5abe:	f008 f8e5 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ac2:	b920      	cbnz	r0, 5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    5ac4:	6870      	ldr	r0, [r6, #4]
    5ac6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5aca:	280b      	cmp	r0, #11
    5acc:	d15f      	bne.n	5b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5ace:	6870      	ldr	r0, [r6, #4]
    5ad0:	2301      	movs	r3, #1
    5ad2:	2100      	movs	r1, #0
    5ad4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5ad8:	3080      	adds	r0, #128	; 0x80
    5ada:	f008 f8d7 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ade:	b350      	cbz	r0, 5b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5ae0:	6870      	ldr	r0, [r6, #4]
    5ae2:	2301      	movs	r3, #1
    5ae4:	2100      	movs	r1, #0
    5ae6:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5aea:	3080      	adds	r0, #128	; 0x80
    5aec:	f008 f8ce 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5af0:	b308      	cbz	r0, 5b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5af2:	6870      	ldr	r0, [r6, #4]
    5af4:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5af8:	2902      	cmp	r1, #2
    5afa:	d148      	bne.n	5b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5afc:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    5b00:	b9c8      	cbnz	r0, 5b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b02:	4638      	mov	r0, r7
    5b04:	f007 fbd4 	bl	d2b0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5b08:	b1a8      	cbz	r0, 5b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b0a:	6870      	ldr	r0, [r6, #4]
    5b0c:	3080      	adds	r0, #128	; 0x80
    5b0e:	f009 fd4b 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b12:	b980      	cbnz	r0, 5b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    5b14:	6871      	ldr	r1, [r6, #4]
    5b16:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    5b1a:	2801      	cmp	r0, #1
    5b1c:	d937      	bls.n	5b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b1e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5b22:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5b26:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    5b2a:	1e93      	subs	r3, r2, #2
    5b2c:	4298      	cmp	r0, r3
    5b2e:	db03      	blt.n	5b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    5b30:	2001      	movs	r0, #1
    5b32:	e004      	b.n	5b3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    5b34:	e01c      	b.n	5b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    5b36:	e02a      	b.n	5b8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    5b38:	1a10      	subs	r0, r2, r0
    5b3a:	1e40      	subs	r0, r0, #1
    5b3c:	b280      	uxth	r0, r0
    5b3e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5b42:	88aa      	ldrh	r2, [r5, #4]
    5b44:	4293      	cmp	r3, r2
    5b46:	d301      	bcc.n	5b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    5b48:	2201      	movs	r2, #1
    5b4a:	e002      	b.n	5b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    5b4c:	1ad2      	subs	r2, r2, r3
    5b4e:	1c52      	adds	r2, r2, #1
    5b50:	b292      	uxth	r2, r2
    5b52:	4290      	cmp	r0, r2
    5b54:	d900      	bls.n	5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    5b56:	4610      	mov	r0, r2
    5b58:	2801      	cmp	r0, #1
    5b5a:	d101      	bne.n	5b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    5b5c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5b60:	6871      	ldr	r1, [r6, #4]
    5b62:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5b66:	4410      	add	r0, r2
    5b68:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5b6c:	f000 ff8e 	bl	6a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    5b70:	78a8      	ldrb	r0, [r5, #2]
    5b72:	4652      	mov	r2, sl
    5b74:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5b78:	9800      	ldr	r0, [sp, #0]
    5b7a:	f000 fe81 	bl	6880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    5b7e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5b82:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5b86:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5b8a:	f7fb bdef 	b.w	176c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5b8e:	2001      	movs	r0, #1
    5b90:	6871      	ldr	r1, [r6, #4]
    5b92:	e7e3      	b.n	5b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    5b94:	20000124 	.word	0x20000124
    5b98:	0000e8e7 	.word	0x0000e8e7
    5b9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5b9e:	4c68      	ldr	r4, [pc, #416]	; (5d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    5ba0:	2301      	movs	r3, #1
    5ba2:	2100      	movs	r1, #0
    5ba4:	6860      	ldr	r0, [r4, #4]
    5ba6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5baa:	3080      	adds	r0, #128	; 0x80
    5bac:	f008 f86e 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bb0:	2800      	cmp	r0, #0
    5bb2:	d07a      	beq.n	5caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    5bb4:	6860      	ldr	r0, [r4, #4]
    5bb6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    5bba:	2500      	movs	r5, #0
    5bbc:	b139      	cbz	r1, 5bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    5bbe:	2100      	movs	r1, #0
    5bc0:	200e      	movs	r0, #14
    5bc2:	f000 f8bf 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5bc6:	6860      	ldr	r0, [r4, #4]
    5bc8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    5bcc:	e0b5      	b.n	5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5bce:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    5bd2:	b119      	cbz	r1, 5bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    5bd4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    5bd8:	0789      	lsls	r1, r1, #30
    5bda:	d016      	beq.n	5c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    5bdc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5be0:	f88d 1004 	strb.w	r1, [sp, #4]
    5be4:	9901      	ldr	r1, [sp, #4]
    5be6:	9101      	str	r1, [sp, #4]
    5be8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5bec:	b141      	cbz	r1, 5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    5bee:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    5bf2:	f88d 1000 	strb.w	r1, [sp]
    5bf6:	9900      	ldr	r1, [sp, #0]
    5bf8:	9100      	str	r1, [sp, #0]
    5bfa:	f89d 1000 	ldrb.w	r1, [sp]
    5bfe:	b189      	cbz	r1, 5c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    5c00:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5c04:	2901      	cmp	r1, #1
    5c06:	d030      	beq.n	5c6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    5c08:	e040      	b.n	5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c0a:	2100      	movs	r1, #0
    5c0c:	200c      	movs	r0, #12
    5c0e:	f000 f899 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c12:	6860      	ldr	r0, [r4, #4]
    5c14:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    5c18:	f041 0101 	orr.w	r1, r1, #1
    5c1c:	7001      	strb	r1, [r0, #0]
    5c1e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    5c22:	e08a      	b.n	5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c24:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c28:	2925      	cmp	r1, #37	; 0x25
    5c2a:	d01c      	beq.n	5c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c2c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5c30:	2925      	cmp	r1, #37	; 0x25
    5c32:	d018      	beq.n	5c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    5c34:	f05f 0300 	movs.w	r3, #0
    5c38:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5c3c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5c40:	f008 fbf6 	bl	e430 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5c44:	6860      	ldr	r0, [r4, #4]
    5c46:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    5c4a:	2100      	movs	r1, #0
    5c4c:	2014      	movs	r0, #20
    5c4e:	f000 f879 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5c52:	6861      	ldr	r1, [r4, #4]
    5c54:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5c58:	8bc2      	ldrh	r2, [r0, #30]
    5c5a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5c5e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5c60:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5c64:	e069      	b.n	5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5c66:	2301      	movs	r3, #1
    5c68:	e7e6      	b.n	5c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    5c6a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    5c6e:	f88d 1000 	strb.w	r1, [sp]
    5c72:	9900      	ldr	r1, [sp, #0]
    5c74:	9100      	str	r1, [sp, #0]
    5c76:	f89d 1000 	ldrb.w	r1, [sp]
    5c7a:	b939      	cbnz	r1, 5c8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    5c7c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c80:	2301      	movs	r3, #1
    5c82:	210b      	movs	r1, #11
    5c84:	3080      	adds	r0, #128	; 0x80
    5c86:	f008 f801 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c8a:	b178      	cbz	r0, 5cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    5c8c:	6860      	ldr	r0, [r4, #4]
    5c8e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    5c92:	f88d 1000 	strb.w	r1, [sp]
    5c96:	9900      	ldr	r1, [sp, #0]
    5c98:	9100      	str	r1, [sp, #0]
    5c9a:	f89d 1000 	ldrb.w	r1, [sp]
    5c9e:	b3b9      	cbz	r1, 5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    5ca0:	2100      	movs	r1, #0
    5ca2:	2023      	movs	r0, #35	; 0x23
    5ca4:	f000 f84e 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5ca8:	e047      	b.n	5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    5caa:	e030      	b.n	5d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5cac:	6860      	ldr	r0, [r4, #4]
    5cae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5cb2:	f009 fc81 	bl	f5b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5cb6:	4605      	mov	r5, r0
    5cb8:	6860      	ldr	r0, [r4, #4]
    5cba:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5cbe:	f009 fc7b 	bl	f5b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    5cc2:	4606      	mov	r6, r0
    5cc4:	6860      	ldr	r0, [r4, #4]
    5cc6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    5cca:	4628      	mov	r0, r5
    5ccc:	f009 fc7f 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cd0:	b150      	cbz	r0, 5ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5cd2:	6860      	ldr	r0, [r4, #4]
    5cd4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    5cd8:	4630      	mov	r0, r6
    5cda:	f009 fc78 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    5cde:	b118      	cbz	r0, 5ce8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    5ce0:	2000      	movs	r0, #0
    5ce2:	f000 f943 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5ce6:	e011      	b.n	5d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5ce8:	6860      	ldr	r0, [r4, #4]
    5cea:	2301      	movs	r3, #1
    5cec:	2103      	movs	r1, #3
    5cee:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5cf2:	3080      	adds	r0, #128	; 0x80
    5cf4:	f007 ffca 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5cf8:	b940      	cbnz	r0, 5d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    5cfa:	6860      	ldr	r0, [r4, #4]
    5cfc:	2301      	movs	r3, #1
    5cfe:	2102      	movs	r1, #2
    5d00:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d04:	3080      	adds	r0, #128	; 0x80
    5d06:	f007 ffc1 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d0a:	b110      	cbz	r0, 5d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    5d0c:	2000      	movs	r0, #0
    5d0e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5d10:	e002      	b.n	5d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    5d12:	2100      	movs	r1, #0
    5d14:	2016      	movs	r0, #22
    5d16:	e7c5      	b.n	5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    5d18:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    5d1c:	f88d 0000 	strb.w	r0, [sp]
    5d20:	9800      	ldr	r0, [sp, #0]
    5d22:	9000      	str	r0, [sp, #0]
    5d24:	f89d 0000 	ldrb.w	r0, [sp]
    5d28:	2800      	cmp	r0, #0
    5d2a:	d0f0      	beq.n	5d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d2c:	2100      	movs	r1, #0
    5d2e:	2025      	movs	r0, #37	; 0x25
    5d30:	f000 f808 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5d34:	6860      	ldr	r0, [r4, #4]
    5d36:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    5d3a:	2001      	movs	r0, #1
    5d3c:	e7e7      	b.n	5d0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    5d3e:	0000      	.short	0x0000
    5d40:	20000124 	.word	0x20000124
    5d44:	b570      	push	{r4, r5, r6, lr}
    5d46:	4c0d      	ldr	r4, [pc, #52]	; (5d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    5d48:	4606      	mov	r6, r0
    5d4a:	460d      	mov	r5, r1
    5d4c:	6860      	ldr	r0, [r4, #4]
    5d4e:	3080      	adds	r0, #128	; 0x80
    5d50:	f009 fc2a 	bl	f5a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5d54:	b120      	cbz	r0, 5d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    5d56:	f640 31b3 	movw	r1, #2995	; 0xbb3
    5d5a:	2031      	movs	r0, #49	; 0x31
    5d5c:	f7fa fe18 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d60:	6862      	ldr	r2, [r4, #4]
    5d62:	2000      	movs	r0, #0
    5d64:	2d01      	cmp	r5, #1
    5d66:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    5d6a:	d004      	beq.n	5d76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    5d6c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    5d70:	2001      	movs	r0, #1
    5d72:	7110      	strb	r0, [r2, #4]
    5d74:	bd70      	pop	{r4, r5, r6, pc}
    5d76:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    5d7a:	bd70      	pop	{r4, r5, r6, pc}
    5d7c:	20000124 	.word	0x20000124
    5d80:	b538      	push	{r3, r4, r5, lr}
    5d82:	4c1f      	ldr	r4, [pc, #124]	; (5e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5d84:	2500      	movs	r5, #0
    5d86:	6860      	ldr	r0, [r4, #4]
    5d88:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    5d8c:	2901      	cmp	r1, #1
    5d8e:	d00a      	beq.n	5da6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    5d90:	2902      	cmp	r1, #2
    5d92:	d133      	bne.n	5dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5d94:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    5d98:	b1d9      	cbz	r1, 5dd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    5d9a:	2106      	movs	r1, #6
    5d9c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5da0:	2101      	movs	r1, #1
    5da2:	2002      	movs	r0, #2
    5da4:	e025      	b.n	5df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5da6:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    5daa:	f88d 1000 	strb.w	r1, [sp]
    5dae:	9900      	ldr	r1, [sp, #0]
    5db0:	9100      	str	r1, [sp, #0]
    5db2:	f89d 1000 	ldrb.w	r1, [sp]
    5db6:	2900      	cmp	r1, #0
    5db8:	d120      	bne.n	5dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    5dba:	f500 7384 	add.w	r3, r0, #264	; 0x108
    5dbe:	f500 710e 	add.w	r1, r0, #568	; 0x238
    5dc2:	2200      	movs	r2, #0
    5dc4:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    5dc8:	f007 ff2b 	bl	dc22 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    5dcc:	2101      	movs	r1, #1
    5dce:	2005      	movs	r0, #5
    5dd0:	e00f      	b.n	5df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    5dd2:	2103      	movs	r1, #3
    5dd4:	2206      	movs	r2, #6
    5dd6:	480a      	ldr	r0, [pc, #40]	; (5e00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    5dd8:	f008 fc4f 	bl	e67a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    5ddc:	6860      	ldr	r0, [r4, #4]
    5dde:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    5de2:	0880      	lsrs	r0, r0, #2
    5de4:	f010 0f01 	tst.w	r0, #1
    5de8:	d001      	beq.n	5dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    5dea:	2011      	movs	r0, #17
    5dec:	e000      	b.n	5df0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    5dee:	200d      	movs	r0, #13
    5df0:	2101      	movs	r1, #1
    5df2:	f7ff ffa7 	bl	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5df6:	6860      	ldr	r0, [r4, #4]
    5df8:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    5dfc:	bd38      	pop	{r3, r4, r5, pc}
    5dfe:	0000      	.short	0x0000
    5e00:	20000124 	.word	0x20000124
    5e04:	b570      	push	{r4, r5, r6, lr}
    5e06:	4b2b      	ldr	r3, [pc, #172]	; (5eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    5e08:	4602      	mov	r2, r0
    5e0a:	8858      	ldrh	r0, [r3, #2]
    5e0c:	4310      	orrs	r0, r2
    5e0e:	8058      	strh	r0, [r3, #2]
    5e10:	f103 0010 	add.w	r0, r3, #16
    5e14:	2a40      	cmp	r2, #64	; 0x40
    5e16:	6840      	ldr	r0, [r0, #4]
    5e18:	d00d      	beq.n	5e36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    5e1a:	0796      	lsls	r6, r2, #30
    5e1c:	f04f 0500 	mov.w	r5, #0
    5e20:	f04f 0401 	mov.w	r4, #1
    5e24:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    5e28:	d50c      	bpl.n	5e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    5e2a:	b14e      	cbz	r6, 5e40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    5e2c:	f640 51f6 	movw	r1, #3574	; 0xdf6
    5e30:	2031      	movs	r0, #49	; 0x31
    5e32:	f7fa fdad 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e3a:	2104      	movs	r1, #4
    5e3c:	f7fe bb9e 	b.w	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5e40:	6099      	str	r1, [r3, #8]
    5e42:	e01c      	b.n	5e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    5e44:	b1c6      	cbz	r6, 5e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e46:	60d9      	str	r1, [r3, #12]
    5e48:	78c9      	ldrb	r1, [r1, #3]
    5e4a:	2906      	cmp	r1, #6
    5e4c:	d002      	beq.n	5e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    5e4e:	290b      	cmp	r1, #11
    5e50:	d112      	bne.n	5e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e52:	e009      	b.n	5e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    5e54:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e58:	2918      	cmp	r1, #24
    5e5a:	d10d      	bne.n	5e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e5c:	2100      	movs	r1, #0
    5e5e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    5e62:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    5e66:	e007      	b.n	5e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e68:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e6c:	2912      	cmp	r1, #18
    5e6e:	d103      	bne.n	5e78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    5e70:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    5e74:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    5e78:	0791      	lsls	r1, r2, #30
    5e7a:	d516      	bpl.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e7c:	6899      	ldr	r1, [r3, #8]
    5e7e:	78c9      	ldrb	r1, [r1, #3]
    5e80:	2905      	cmp	r1, #5
    5e82:	d002      	beq.n	5e8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    5e84:	290b      	cmp	r1, #11
    5e86:	d110      	bne.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e88:	e009      	b.n	5e9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    5e8a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5e8e:	2916      	cmp	r1, #22
    5e90:	d10b      	bne.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e92:	2100      	movs	r1, #0
    5e94:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    5e98:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    5e9c:	e005      	b.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5e9e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5ea2:	2911      	cmp	r1, #17
    5ea4:	d101      	bne.n	5eaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    5ea6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    5eaa:	0690      	lsls	r0, r2, #26
    5eac:	d501      	bpl.n	5eb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    5eae:	2008      	movs	r0, #8
    5eb0:	7058      	strb	r0, [r3, #1]
    5eb2:	bd70      	pop	{r4, r5, r6, pc}
    5eb4:	20000114 	.word	0x20000114
    5eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ebc:	4c29      	ldr	r4, [pc, #164]	; (5f64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    5ebe:	2501      	movs	r5, #1
    5ec0:	6862      	ldr	r2, [r4, #4]
    5ec2:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    5ec6:	b109      	cbz	r1, 5ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    5ec8:	2701      	movs	r7, #1
    5eca:	e000      	b.n	5ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    5ecc:	2700      	movs	r7, #0
    5ece:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    5ed2:	b108      	cbz	r0, 5ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    5ed4:	2601      	movs	r6, #1
    5ed6:	e000      	b.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    5ed8:	2600      	movs	r6, #0
    5eda:	b90f      	cbnz	r7, 5ee0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    5edc:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    5ee0:	b90e      	cbnz	r6, 5ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    5ee2:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    5ee6:	f102 0362 	add.w	r3, r2, #98	; 0x62
    5eea:	7219      	strb	r1, [r3, #8]
    5eec:	7258      	strb	r0, [r3, #9]
    5eee:	20ff      	movs	r0, #255	; 0xff
    5ef0:	7298      	strb	r0, [r3, #10]
    5ef2:	481d      	ldr	r0, [pc, #116]	; (5f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    5ef4:	6803      	ldr	r3, [r0, #0]
    5ef6:	b10b      	cbz	r3, 5efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    5ef8:	4610      	mov	r0, r2
    5efa:	4798      	blx	r3
    5efc:	6860      	ldr	r0, [r4, #4]
    5efe:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    5f02:	2801      	cmp	r0, #1
    5f04:	d001      	beq.n	5f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f06:	b907      	cbnz	r7, 5f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    5f08:	b116      	cbz	r6, 5f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    5f0a:	2000      	movs	r0, #0
    5f0c:	f000 f82e 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5f10:	6860      	ldr	r0, [r4, #4]
    5f12:	302c      	adds	r0, #44	; 0x2c
    5f14:	f008 faf9 	bl	e50a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f18:	4606      	mov	r6, r0
    5f1a:	6860      	ldr	r0, [r4, #4]
    5f1c:	f008 faa3 	bl	e466 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5f20:	b130      	cbz	r0, 5f30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    5f22:	6861      	ldr	r1, [r4, #4]
    5f24:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    5f28:	f831 0b2c 	ldrh.w	r0, [r1], #44
    5f2c:	f7fc ff50 	bl	2dd0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5f30:	2105      	movs	r1, #5
    5f32:	6860      	ldr	r0, [r4, #4]
    5f34:	f7fe fb22 	bl	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5f38:	6860      	ldr	r0, [r4, #4]
    5f3a:	302c      	adds	r0, #44	; 0x2c
    5f3c:	f008 fae5 	bl	e50a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5f40:	4604      	mov	r4, r0
    5f42:	42a6      	cmp	r6, r4
    5f44:	d20a      	bcs.n	5f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f46:	f003 ff67 	bl	9e18 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    5f4a:	4601      	mov	r1, r0
    5f4c:	1ba0      	subs	r0, r4, r6
    5f4e:	2867      	cmp	r0, #103	; 0x67
    5f50:	d200      	bcs.n	5f54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    5f52:	2067      	movs	r0, #103	; 0x67
    5f54:	f003 fe26 	bl	9ba4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5f58:	b100      	cbz	r0, 5f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    5f5a:	2500      	movs	r5, #0
    5f5c:	4628      	mov	r0, r5
    5f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f62:	0000      	.short	0x0000
    5f64:	20000124 	.word	0x20000124
    5f68:	2000028c 	.word	0x2000028c
    5f6c:	4601      	mov	r1, r0
    5f6e:	4801      	ldr	r0, [pc, #4]	; (5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    5f70:	f001 ba96 	b.w	74a0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    5f74:	20000124 	.word	0x20000124
    5f78:	b570      	push	{r4, r5, r6, lr}
    5f7a:	4d0f      	ldr	r5, [pc, #60]	; (5fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    5f7c:	686c      	ldr	r4, [r5, #4]
    5f7e:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    5f82:	2921      	cmp	r1, #33	; 0x21
    5f84:	d002      	beq.n	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5f86:	292e      	cmp	r1, #46	; 0x2e
    5f88:	d003      	beq.n	5f92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    5f8a:	e011      	b.n	5fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    5f8c:	f7ff ffee 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    5f90:	e008      	b.n	5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    5f92:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    5f96:	f104 0080 	add.w	r0, r4, #128	; 0x80
    5f9a:	2301      	movs	r3, #1
    5f9c:	210b      	movs	r1, #11
    5f9e:	f007 fe75 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fa2:	b138      	cbz	r0, 5fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    5fa4:	6869      	ldr	r1, [r5, #4]
    5fa6:	2000      	movs	r0, #0
    5fa8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5fac:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    5fb0:	2000      	movs	r0, #0
    5fb2:	bd70      	pop	{r4, r5, r6, pc}
    5fb4:	202a      	movs	r0, #42	; 0x2a
    5fb6:	e7e9      	b.n	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    5fb8:	20000124 	.word	0x20000124
    5fbc:	b570      	push	{r4, r5, r6, lr}
    5fbe:	4604      	mov	r4, r0
    5fc0:	6840      	ldr	r0, [r0, #4]
    5fc2:	2301      	movs	r3, #1
    5fc4:	2100      	movs	r1, #0
    5fc6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5fca:	3080      	adds	r0, #128	; 0x80
    5fcc:	f007 fe5e 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fd0:	b1b8      	cbz	r0, 6002 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    5fd2:	4d13      	ldr	r5, [pc, #76]	; (6020 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    5fd4:	68e8      	ldr	r0, [r5, #12]
    5fd6:	f008 f8cc 	bl	e172 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    5fda:	6861      	ldr	r1, [r4, #4]
    5fdc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    5fe0:	6861      	ldr	r1, [r4, #4]
    5fe2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    5fe6:	f009 fb00 	bl	f5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    5fea:	b160      	cbz	r0, 6006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    5fec:	6861      	ldr	r1, [r4, #4]
    5fee:	2028      	movs	r0, #40	; 0x28
    5ff0:	2202      	movs	r2, #2
    5ff2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    5ff6:	6860      	ldr	r0, [r4, #4]
    5ff8:	490a      	ldr	r1, [pc, #40]	; (6024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    5ffa:	30b4      	adds	r0, #180	; 0xb4
    5ffc:	f008 f9ee 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6000:	e00b      	b.n	601a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    6002:	2001      	movs	r0, #1
    6004:	bd70      	pop	{r4, r5, r6, pc}
    6006:	6861      	ldr	r1, [r4, #4]
    6008:	68e8      	ldr	r0, [r5, #12]
    600a:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    600e:	f008 f8ab 	bl	e168 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    6012:	6861      	ldr	r1, [r4, #4]
    6014:	200a      	movs	r0, #10
    6016:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    601a:	2000      	movs	r0, #0
    601c:	bd70      	pop	{r4, r5, r6, pc}
    601e:	0000      	.short	0x0000
    6020:	20000114 	.word	0x20000114
    6024:	0000e699 	.word	0x0000e699
    6028:	b570      	push	{r4, r5, r6, lr}
    602a:	4604      	mov	r4, r0
    602c:	6840      	ldr	r0, [r0, #4]
    602e:	2301      	movs	r3, #1
    6030:	2100      	movs	r1, #0
    6032:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6036:	3080      	adds	r0, #128	; 0x80
    6038:	f007 fe28 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    603c:	b1e0      	cbz	r0, 6078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    603e:	4d28      	ldr	r5, [pc, #160]	; (60e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    6040:	2100      	movs	r1, #0
    6042:	68e8      	ldr	r0, [r5, #12]
    6044:	f008 f898 	bl	e178 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6048:	b1c0      	cbz	r0, 607c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    604a:	68e8      	ldr	r0, [r5, #12]
    604c:	6861      	ldr	r1, [r4, #4]
    604e:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    6052:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6056:	6861      	ldr	r1, [r4, #4]
    6058:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    605c:	f009 fac5 	bl	f5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6060:	b188      	cbz	r0, 6086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    6062:	6861      	ldr	r1, [r4, #4]
    6064:	2028      	movs	r0, #40	; 0x28
    6066:	2202      	movs	r2, #2
    6068:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    606c:	6860      	ldr	r0, [r4, #4]
    606e:	491d      	ldr	r1, [pc, #116]	; (60e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6070:	30b4      	adds	r0, #180	; 0xb4
    6072:	f008 f9b3 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6076:	e030      	b.n	60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    6078:	2001      	movs	r0, #1
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	4620      	mov	r0, r4
    607e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6082:	f000 b88d 	b.w	61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6086:	68e8      	ldr	r0, [r5, #12]
    6088:	f008 f8a0 	bl	e1cc <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    608c:	f007 fdf4 	bl	dc78 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6090:	4606      	mov	r6, r0
    6092:	6860      	ldr	r0, [r4, #4]
    6094:	4631      	mov	r1, r6
    6096:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    609a:	68e8      	ldr	r0, [r5, #12]
    609c:	7900      	ldrb	r0, [r0, #4]
    609e:	f007 ff58 	bl	df52 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    60a2:	6861      	ldr	r1, [r4, #4]
    60a4:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    60a8:	68e8      	ldr	r0, [r5, #12]
    60aa:	4631      	mov	r1, r6
    60ac:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    60b0:	f007 ff4b 	bl	df4a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    60b4:	6861      	ldr	r1, [r4, #4]
    60b6:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    60ba:	68e8      	ldr	r0, [r5, #12]
    60bc:	f008 f889 	bl	e1d2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    60c0:	6861      	ldr	r1, [r4, #4]
    60c2:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    60c6:	68e8      	ldr	r0, [r5, #12]
    60c8:	f008 f886 	bl	e1d8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    60cc:	6861      	ldr	r1, [r4, #4]
    60ce:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    60d2:	6861      	ldr	r1, [r4, #4]
    60d4:	200d      	movs	r0, #13
    60d6:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    60da:	2000      	movs	r0, #0
    60dc:	bd70      	pop	{r4, r5, r6, pc}
    60de:	0000      	.short	0x0000
    60e0:	20000114 	.word	0x20000114
    60e4:	0000e699 	.word	0x0000e699
    60e8:	b570      	push	{r4, r5, r6, lr}
    60ea:	4604      	mov	r4, r0
    60ec:	6840      	ldr	r0, [r0, #4]
    60ee:	2301      	movs	r3, #1
    60f0:	2100      	movs	r1, #0
    60f2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    60f6:	3080      	adds	r0, #128	; 0x80
    60f8:	f007 fdc8 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60fc:	b970      	cbnz	r0, 611c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    60fe:	6860      	ldr	r0, [r4, #4]
    6100:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6104:	2a13      	cmp	r2, #19
    6106:	d009      	beq.n	611c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    6108:	2301      	movs	r3, #1
    610a:	2105      	movs	r1, #5
    610c:	3080      	adds	r0, #128	; 0x80
    610e:	f007 fdbd 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6112:	b108      	cbz	r0, 6118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    6114:	2008      	movs	r0, #8
    6116:	bd70      	pop	{r4, r5, r6, pc}
    6118:	2001      	movs	r0, #1
    611a:	bd70      	pop	{r4, r5, r6, pc}
    611c:	6860      	ldr	r0, [r4, #4]
    611e:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    6122:	b910      	cbnz	r0, 612a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    6124:	4816      	ldr	r0, [pc, #88]	; (6180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    6126:	f008 fa92 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    612a:	4d15      	ldr	r5, [pc, #84]	; (6180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    612c:	6861      	ldr	r1, [r4, #4]
    612e:	3d10      	subs	r5, #16
    6130:	f501 710e 	add.w	r1, r1, #568	; 0x238
    6134:	68e8      	ldr	r0, [r5, #12]
    6136:	f008 f868 	bl	e20a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    613a:	6861      	ldr	r1, [r4, #4]
    613c:	68e8      	ldr	r0, [r5, #12]
    613e:	f501 718c 	add.w	r1, r1, #280	; 0x118
    6142:	f008 f859 	bl	e1f8 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    6146:	6860      	ldr	r0, [r4, #4]
    6148:	8801      	ldrh	r1, [r0, #0]
    614a:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    614e:	6861      	ldr	r1, [r4, #4]
    6150:	68e8      	ldr	r0, [r5, #12]
    6152:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    6156:	f008 f853 	bl	e200 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    615a:	6861      	ldr	r1, [r4, #4]
    615c:	68e8      	ldr	r0, [r5, #12]
    615e:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    6162:	f008 f846 	bl	e1f2 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    6166:	6860      	ldr	r0, [r4, #4]
    6168:	2202      	movs	r2, #2
    616a:	4906      	ldr	r1, [pc, #24]	; (6184 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    616c:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6170:	f008 f934 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6174:	6861      	ldr	r1, [r4, #4]
    6176:	2015      	movs	r0, #21
    6178:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    617c:	2000      	movs	r0, #0
    617e:	bd70      	pop	{r4, r5, r6, pc}
    6180:	20000124 	.word	0x20000124
    6184:	0000e83d 	.word	0x0000e83d
    6188:	4901      	ldr	r1, [pc, #4]	; (6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    618a:	68c9      	ldr	r1, [r1, #12]
    618c:	f7fc bf28 	b.w	2fe0 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6190:	20000114 	.word	0x20000114
    6194:	4901      	ldr	r1, [pc, #4]	; (619c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    6196:	68c9      	ldr	r1, [r1, #12]
    6198:	f7fc bf58 	b.w	304c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    619c:	20000114 	.word	0x20000114
    61a0:	b510      	push	{r4, lr}
    61a2:	6842      	ldr	r2, [r0, #4]
    61a4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    61a8:	070b      	lsls	r3, r1, #28
    61aa:	d501      	bpl.n	61b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    61ac:	2001      	movs	r0, #1
    61ae:	bd10      	pop	{r4, pc}
    61b0:	f041 0108 	orr.w	r1, r1, #8
    61b4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    61b8:	4905      	ldr	r1, [pc, #20]	; (61d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61ba:	6840      	ldr	r0, [r0, #4]
    61bc:	68c9      	ldr	r1, [r1, #12]
    61be:	78c9      	ldrb	r1, [r1, #3]
    61c0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    61c4:	4802      	ldr	r0, [pc, #8]	; (61d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    61c6:	3010      	adds	r0, #16
    61c8:	f008 fa41 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    61cc:	2000      	movs	r0, #0
    61ce:	bd10      	pop	{r4, pc}
    61d0:	20000114 	.word	0x20000114
    61d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    61d8:	4605      	mov	r5, r0
    61da:	6840      	ldr	r0, [r0, #4]
    61dc:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    61e0:	f010 0f30 	tst.w	r0, #48	; 0x30
    61e4:	d002      	beq.n	61ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    61e6:	2001      	movs	r0, #1
    61e8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    61ec:	4c32      	ldr	r4, [pc, #200]	; (62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    61ee:	68e0      	ldr	r0, [r4, #12]
    61f0:	f008 f825 	bl	e23e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    61f4:	b330      	cbz	r0, 6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    61f6:	68e0      	ldr	r0, [r4, #12]
    61f8:	f008 f81b 	bl	e232 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    61fc:	4680      	mov	r8, r0
    61fe:	68e0      	ldr	r0, [r4, #12]
    6200:	f008 f81b 	bl	e23a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6204:	4607      	mov	r7, r0
    6206:	68e0      	ldr	r0, [r4, #12]
    6208:	f008 f811 	bl	e22e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    620c:	4606      	mov	r6, r0
    620e:	68e0      	ldr	r0, [r4, #12]
    6210:	f008 f811 	bl	e236 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6214:	4601      	mov	r1, r0
    6216:	f8cd 8000 	str.w	r8, [sp]
    621a:	6868      	ldr	r0, [r5, #4]
    621c:	463b      	mov	r3, r7
    621e:	4632      	mov	r2, r6
    6220:	302c      	adds	r0, #44	; 0x2c
    6222:	f008 f97c 	bl	e51e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6226:	78a0      	ldrb	r0, [r4, #2]
    6228:	0781      	lsls	r1, r0, #30
    622a:	f04f 0001 	mov.w	r0, #1
    622e:	d503      	bpl.n	6238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    6230:	68a1      	ldr	r1, [r4, #8]
    6232:	78c9      	ldrb	r1, [r1, #3]
    6234:	2914      	cmp	r1, #20
    6236:	d00a      	beq.n	624e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6238:	6869      	ldr	r1, [r5, #4]
    623a:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    623e:	291d      	cmp	r1, #29
    6240:	d005      	beq.n	624e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    6242:	e007      	b.n	6254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    6244:	4628      	mov	r0, r5
    6246:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    624a:	f7ff bfa9 	b.w	61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    624e:	6869      	ldr	r1, [r5, #4]
    6250:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6254:	6868      	ldr	r0, [r5, #4]
    6256:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    625a:	2901      	cmp	r1, #1
    625c:	d011      	beq.n	6282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    625e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6262:	f88d 1004 	strb.w	r1, [sp, #4]
    6266:	9901      	ldr	r1, [sp, #4]
    6268:	9101      	str	r1, [sp, #4]
    626a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    626e:	b941      	cbnz	r1, 6282 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6270:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6274:	f88d 1000 	strb.w	r1, [sp]
    6278:	9900      	ldr	r1, [sp, #0]
    627a:	9100      	str	r1, [sp, #0]
    627c:	f89d 1000 	ldrb.w	r1, [sp]
    6280:	b151      	cbz	r1, 6298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    6282:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6286:	f041 0110 	orr.w	r1, r1, #16
    628a:	6001      	str	r1, [r0, #0]
    628c:	480a      	ldr	r0, [pc, #40]	; (62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    628e:	3010      	adds	r0, #16
    6290:	f008 f9dd 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6294:	2000      	movs	r0, #0
    6296:	e7a7      	b.n	61e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    6298:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    629c:	f041 0120 	orr.w	r1, r1, #32
    62a0:	6001      	str	r1, [r0, #0]
    62a2:	4805      	ldr	r0, [pc, #20]	; (62b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    62a4:	3010      	adds	r0, #16
    62a6:	6843      	ldr	r3, [r0, #4]
    62a8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    62ac:	8818      	ldrh	r0, [r3, #0]
    62ae:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    62b2:	f7fc fdb5 	bl	2e20 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    62b6:	e7e9      	b.n	628c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    62b8:	20000114 	.word	0x20000114
    62bc:	4901      	ldr	r1, [pc, #4]	; (62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    62be:	68c9      	ldr	r1, [r1, #12]
    62c0:	f008 ba54 	b.w	e76c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    62c4:	20000114 	.word	0x20000114
    62c8:	b510      	push	{r4, lr}
    62ca:	4604      	mov	r4, r0
    62cc:	6840      	ldr	r0, [r0, #4]
    62ce:	2301      	movs	r3, #1
    62d0:	2100      	movs	r1, #0
    62d2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62d6:	3080      	adds	r0, #128	; 0x80
    62d8:	f007 fcd8 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62dc:	2800      	cmp	r0, #0
    62de:	6860      	ldr	r0, [r4, #4]
    62e0:	d00c      	beq.n	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    62e2:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    62e6:	2800      	cmp	r0, #0
    62e8:	d007      	beq.n	62fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    62ea:	480a      	ldr	r0, [pc, #40]	; (6314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    62ec:	f008 f9af 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    62f0:	6861      	ldr	r1, [r4, #4]
    62f2:	2011      	movs	r0, #17
    62f4:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    62f8:	2000      	movs	r0, #0
    62fa:	bd10      	pop	{r4, pc}
    62fc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6300:	2301      	movs	r3, #1
    6302:	2105      	movs	r1, #5
    6304:	3080      	adds	r0, #128	; 0x80
    6306:	f007 fcc1 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    630a:	b108      	cbz	r0, 6310 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    630c:	2008      	movs	r0, #8
    630e:	bd10      	pop	{r4, pc}
    6310:	2001      	movs	r0, #1
    6312:	bd10      	pop	{r4, pc}
    6314:	20000124 	.word	0x20000124
    6318:	b538      	push	{r3, r4, r5, lr}
    631a:	4604      	mov	r4, r0
    631c:	6840      	ldr	r0, [r0, #4]
    631e:	2301      	movs	r3, #1
    6320:	210b      	movs	r1, #11
    6322:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6326:	3080      	adds	r0, #128	; 0x80
    6328:	f007 fcb0 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    632c:	bb60      	cbnz	r0, 6388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    632e:	6860      	ldr	r0, [r4, #4]
    6330:	2301      	movs	r3, #1
    6332:	2100      	movs	r1, #0
    6334:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6338:	3080      	adds	r0, #128	; 0x80
    633a:	f007 fca7 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    633e:	b308      	cbz	r0, 6384 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    6340:	6860      	ldr	r0, [r4, #4]
    6342:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6346:	2825      	cmp	r0, #37	; 0x25
    6348:	d01e      	beq.n	6388 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    634a:	4d2a      	ldr	r5, [pc, #168]	; (63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    634c:	68e8      	ldr	r0, [r5, #12]
    634e:	f007 ff88 	bl	e262 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    6352:	b1d8      	cbz	r0, 638c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    6354:	68e8      	ldr	r0, [r5, #12]
    6356:	6862      	ldr	r2, [r4, #4]
    6358:	7941      	ldrb	r1, [r0, #5]
    635a:	f001 0107 	and.w	r1, r1, #7
    635e:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6362:	7900      	ldrb	r0, [r0, #4]
    6364:	f000 0207 	and.w	r2, r0, #7
    6368:	6860      	ldr	r0, [r4, #4]
    636a:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    636e:	6860      	ldr	r0, [r4, #4]
    6370:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6374:	f88d 1000 	strb.w	r1, [sp]
    6378:	9900      	ldr	r1, [sp, #0]
    637a:	9100      	str	r1, [sp, #0]
    637c:	f89d 1000 	ldrb.w	r1, [sp]
    6380:	bb71      	cbnz	r1, 63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6382:	e008      	b.n	6396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    6384:	2001      	movs	r0, #1
    6386:	bd38      	pop	{r3, r4, r5, pc}
    6388:	2020      	movs	r0, #32
    638a:	bd38      	pop	{r3, r4, r5, pc}
    638c:	4620      	mov	r0, r4
    638e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6392:	f7ff bf05 	b.w	61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6396:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    639a:	2901      	cmp	r1, #1
    639c:	d020      	beq.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    639e:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    63a2:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    63a6:	784d      	ldrb	r5, [r1, #1]
    63a8:	4295      	cmp	r5, r2
    63aa:	d106      	bne.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63ac:	7809      	ldrb	r1, [r1, #0]
    63ae:	4299      	cmp	r1, r3
    63b0:	d103      	bne.n	63ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    63b2:	2102      	movs	r1, #2
    63b4:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    63b8:	e012      	b.n	63e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    63ba:	480e      	ldr	r0, [pc, #56]	; (63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    63bc:	3010      	adds	r0, #16
    63be:	6841      	ldr	r1, [r0, #4]
    63c0:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    63c4:	880a      	ldrh	r2, [r1, #0]
    63c6:	f820 2b02 	strh.w	r2, [r0], #2
    63ca:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    63ce:	f800 2b01 	strb.w	r2, [r0], #1
    63d2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    63d6:	f800 190d 	strb.w	r1, [r0], #-13
    63da:	4907      	ldr	r1, [pc, #28]	; (63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    63dc:	f007 fff5 	bl	e3ca <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    63e0:	6861      	ldr	r1, [r4, #4]
    63e2:	2022      	movs	r0, #34	; 0x22
    63e4:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    63e8:	4802      	ldr	r0, [pc, #8]	; (63f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    63ea:	3010      	adds	r0, #16
    63ec:	f008 f92f 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    63f0:	2000      	movs	r0, #0
    63f2:	bd38      	pop	{r3, r4, r5, pc}
    63f4:	20000114 	.word	0x20000114
    63f8:	000074e1 	.word	0x000074e1
    63fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6400:	6845      	ldr	r5, [r0, #4]
    6402:	4604      	mov	r4, r0
    6404:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6408:	2821      	cmp	r0, #33	; 0x21
    640a:	d008      	beq.n	641e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    640c:	f05f 0600 	movs.w	r6, #0
    6410:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6414:	2823      	cmp	r0, #35	; 0x23
    6416:	d004      	beq.n	6422 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    6418:	b35e      	cbz	r6, 6472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    641a:	359d      	adds	r5, #157	; 0x9d
    641c:	e002      	b.n	6424 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    641e:	2601      	movs	r6, #1
    6420:	e7f6      	b.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    6422:	359e      	adds	r5, #158	; 0x9e
    6424:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    6428:	f8d8 000c 	ldr.w	r0, [r8, #12]
    642c:	f007 ff25 	bl	e27a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6430:	2700      	movs	r7, #0
    6432:	b308      	cbz	r0, 6478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6434:	4631      	mov	r1, r6
    6436:	f8d8 000c 	ldr.w	r0, [r8, #12]
    643a:	f7fe ffb3 	bl	53a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    643e:	b1d8      	cbz	r0, 6478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    6440:	466a      	mov	r2, sp
    6442:	4646      	mov	r6, r8
    6444:	6860      	ldr	r0, [r4, #4]
    6446:	f8d8 100c 	ldr.w	r1, [r8, #12]
    644a:	f007 fd38 	bl	debe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    644e:	b388      	cbz	r0, 64b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6450:	68f0      	ldr	r0, [r6, #12]
    6452:	f007 ff10 	bl	e276 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6456:	6861      	ldr	r1, [r4, #4]
    6458:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    645c:	6861      	ldr	r1, [r4, #4]
    645e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6462:	f009 f8c2 	bl	f5ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6466:	b3e8      	cbz	r0, 64e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6468:	6861      	ldr	r1, [r4, #4]
    646a:	2028      	movs	r0, #40	; 0x28
    646c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6470:	e06e      	b.n	6550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6472:	2002      	movs	r0, #2
    6474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6478:	6860      	ldr	r0, [r4, #4]
    647a:	f04f 0900 	mov.w	r9, #0
    647e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6482:	2901      	cmp	r1, #1
    6484:	d017      	beq.n	64b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    6486:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    648a:	b306      	cbz	r6, 64ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    648c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6490:	6861      	ldr	r1, [r4, #4]
    6492:	2201      	movs	r2, #1
    6494:	78c0      	ldrb	r0, [r0, #3]
    6496:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    649a:	4082      	lsls	r2, r0
    649c:	6861      	ldr	r1, [r4, #4]
    649e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    64a2:	b160      	cbz	r0, 64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    64a4:	2009      	movs	r0, #9
    64a6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    64aa:	6860      	ldr	r0, [r4, #4]
    64ac:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    64b0:	b9b0      	cbnz	r0, 64e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    64b2:	e007      	b.n	64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    64b4:	e017      	b.n	64e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    64b6:	201e      	movs	r0, #30
    64b8:	f7ff fd58 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64bc:	e7e5      	b.n	648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    64be:	f240 414b 	movw	r1, #1099	; 0x44b
    64c2:	e001      	b.n	64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    64c4:	f240 4153 	movw	r1, #1107	; 0x453
    64c8:	2031      	movs	r0, #49	; 0x31
    64ca:	f7fa fa61 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64ce:	4826      	ldr	r0, [pc, #152]	; (6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    64d0:	702f      	strb	r7, [r5, #0]
    64d2:	3010      	adds	r0, #16
    64d4:	f008 f8c3 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    64d8:	4620      	mov	r0, r4
    64da:	f7ff fe61 	bl	61a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    64de:	4681      	mov	r9, r0
    64e0:	4648      	mov	r0, r9
    64e2:	e7c7      	b.n	6474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    64e4:	e013      	b.n	650e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    64e6:	6860      	ldr	r0, [r4, #4]
    64e8:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    64ec:	2901      	cmp	r1, #1
    64ee:	d009      	beq.n	6504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    64f0:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    64f4:	6860      	ldr	r0, [r4, #4]
    64f6:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    64fa:	42a9      	cmp	r1, r5
    64fc:	d11b      	bne.n	6536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    64fe:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6502:	e018      	b.n	6536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6504:	2000      	movs	r0, #0
    6506:	f7ff fd31 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    650a:	702f      	strb	r7, [r5, #0]
    650c:	e7f2      	b.n	64f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    650e:	6860      	ldr	r0, [r4, #4]
    6510:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6514:	290d      	cmp	r1, #13
    6516:	d018      	beq.n	654a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6518:	290b      	cmp	r1, #11
    651a:	d016      	beq.n	654a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    651c:	290a      	cmp	r1, #10
    651e:	d014      	beq.n	654a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6520:	f89d 1000 	ldrb.w	r1, [sp]
    6524:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6528:	6861      	ldr	r1, [r4, #4]
    652a:	f89d 0001 	ldrb.w	r0, [sp, #1]
    652e:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6532:	2025      	movs	r0, #37	; 0x25
    6534:	7028      	strb	r0, [r5, #0]
    6536:	6860      	ldr	r0, [r4, #4]
    6538:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    653c:	42a9      	cmp	r1, r5
    653e:	d10e      	bne.n	655e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6540:	4809      	ldr	r0, [pc, #36]	; (6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6542:	3010      	adds	r0, #16
    6544:	f008 f88b 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6548:	e00b      	b.n	6562 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    654a:	212a      	movs	r1, #42	; 0x2a
    654c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6550:	6860      	ldr	r0, [r4, #4]
    6552:	2202      	movs	r2, #2
    6554:	4905      	ldr	r1, [pc, #20]	; (656c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6556:	30b4      	adds	r0, #180	; 0xb4
    6558:	f007 ff40 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    655c:	e7eb      	b.n	6536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    655e:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6562:	2000      	movs	r0, #0
    6564:	e786      	b.n	6474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6566:	0000      	.short	0x0000
    6568:	20000114 	.word	0x20000114
    656c:	0000e699 	.word	0x0000e699
    6570:	b570      	push	{r4, r5, r6, lr}
    6572:	4604      	mov	r4, r0
    6574:	6840      	ldr	r0, [r0, #4]
    6576:	4d0a      	ldr	r5, [pc, #40]	; (65a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6578:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    657c:	f041 0104 	orr.w	r1, r1, #4
    6580:	7001      	strb	r1, [r0, #0]
    6582:	68e8      	ldr	r0, [r5, #12]
    6584:	f007 fe8d 	bl	e2a2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6588:	4606      	mov	r6, r0
    658a:	68e8      	ldr	r0, [r5, #12]
    658c:	f007 fe8d 	bl	e2aa <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6590:	4601      	mov	r1, r0
    6592:	4622      	mov	r2, r4
    6594:	4630      	mov	r0, r6
    6596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    659a:	f000 b893 	b.w	66c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    659e:	0000      	.short	0x0000
    65a0:	20000114 	.word	0x20000114
    65a4:	4602      	mov	r2, r0
    65a6:	4813      	ldr	r0, [pc, #76]	; (65f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65a8:	68c0      	ldr	r0, [r0, #12]
    65aa:	7901      	ldrb	r1, [r0, #4]
    65ac:	4811      	ldr	r0, [pc, #68]	; (65f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    65ae:	3010      	adds	r0, #16
    65b0:	6843      	ldr	r3, [r0, #4]
    65b2:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    65b6:	2821      	cmp	r0, #33	; 0x21
    65b8:	d010      	beq.n	65dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65ba:	282e      	cmp	r0, #46	; 0x2e
    65bc:	d00e      	beq.n	65dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    65be:	2828      	cmp	r0, #40	; 0x28
    65c0:	d00e      	beq.n	65e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    65c2:	2804      	cmp	r0, #4
    65c4:	d00e      	beq.n	65e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    65c6:	280f      	cmp	r0, #15
    65c8:	d00e      	beq.n	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    65ca:	281d      	cmp	r0, #29
    65cc:	d00e      	beq.n	65ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    65ce:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    65d2:	2823      	cmp	r0, #35	; 0x23
    65d4:	d00c      	beq.n	65f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    65d6:	20fe      	movs	r0, #254	; 0xfe
    65d8:	f000 b874 	b.w	66c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    65dc:	2016      	movs	r0, #22
    65de:	e7fb      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65e0:	2023      	movs	r0, #35	; 0x23
    65e2:	e7f9      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65e4:	200e      	movs	r0, #14
    65e6:	e7f7      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65e8:	2012      	movs	r0, #18
    65ea:	e7f5      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65ec:	2014      	movs	r0, #20
    65ee:	e7f3      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65f0:	2017      	movs	r0, #23
    65f2:	e7f1      	b.n	65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    65f4:	20000114 	.word	0x20000114
    65f8:	b510      	push	{r4, lr}
    65fa:	4604      	mov	r4, r0
    65fc:	6840      	ldr	r0, [r0, #4]
    65fe:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6602:	2818      	cmp	r0, #24
    6604:	d001      	beq.n	660a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6606:	2002      	movs	r0, #2
    6608:	bd10      	pop	{r4, pc}
    660a:	4804      	ldr	r0, [pc, #16]	; (661c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    660c:	f008 f827 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6610:	6861      	ldr	r1, [r4, #4]
    6612:	201c      	movs	r0, #28
    6614:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6618:	2000      	movs	r0, #0
    661a:	bd10      	pop	{r4, pc}
    661c:	20000124 	.word	0x20000124
    6620:	4901      	ldr	r1, [pc, #4]	; (6628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6622:	68c9      	ldr	r1, [r1, #12]
    6624:	f008 b85a 	b.w	e6dc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6628:	20000114 	.word	0x20000114
    662c:	b570      	push	{r4, r5, r6, lr}
    662e:	4604      	mov	r4, r0
    6630:	481f      	ldr	r0, [pc, #124]	; (66b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6632:	2500      	movs	r5, #0
    6634:	68c0      	ldr	r0, [r0, #12]
    6636:	7903      	ldrb	r3, [r0, #4]
    6638:	6860      	ldr	r0, [r4, #4]
    663a:	2b16      	cmp	r3, #22
    663c:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6640:	d013      	beq.n	666a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6642:	dc06      	bgt.n	6652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6644:	2b0e      	cmp	r3, #14
    6646:	d009      	beq.n	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6648:	2b12      	cmp	r3, #18
    664a:	d007      	beq.n	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    664c:	2b14      	cmp	r3, #20
    664e:	d12c      	bne.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6650:	e004      	b.n	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6652:	2b17      	cmp	r3, #23
    6654:	d002      	beq.n	665c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6656:	2b23      	cmp	r3, #35	; 0x23
    6658:	d127      	bne.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    665a:	e01f      	b.n	669c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    665c:	4622      	mov	r2, r4
    665e:	2101      	movs	r1, #1
    6660:	4618      	mov	r0, r3
    6662:	f000 f9c5 	bl	69f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6666:	4605      	mov	r5, r0
    6668:	e01f      	b.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    666a:	2821      	cmp	r0, #33	; 0x21
    666c:	d001      	beq.n	6672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    666e:	282e      	cmp	r0, #46	; 0x2e
    6670:	d11b      	bne.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6672:	4620      	mov	r0, r4
    6674:	f008 f807 	bl	e686 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6678:	6860      	ldr	r0, [r4, #4]
    667a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    667e:	2922      	cmp	r1, #34	; 0x22
    6680:	d013      	beq.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6682:	2108      	movs	r1, #8
    6684:	30ec      	adds	r0, #236	; 0xec
    6686:	f008 ff5c 	bl	f542 <__kernel_ram_size+0x28a>
    668a:	6860      	ldr	r0, [r4, #4]
    668c:	210b      	movs	r1, #11
    668e:	30ec      	adds	r0, #236	; 0xec
    6690:	f008 ff57 	bl	f542 <__kernel_ram_size+0x28a>
    6694:	201a      	movs	r0, #26
    6696:	f7ff fc69 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    669a:	e006      	b.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    669c:	2828      	cmp	r0, #40	; 0x28
    669e:	d104      	bne.n	66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66a0:	4804      	ldr	r0, [pc, #16]	; (66b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    66a2:	6801      	ldr	r1, [r0, #0]
    66a4:	b109      	cbz	r1, 66aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    66a6:	4620      	mov	r0, r4
    66a8:	4788      	blx	r1
    66aa:	4628      	mov	r0, r5
    66ac:	bd70      	pop	{r4, r5, r6, pc}
    66ae:	0000      	.short	0x0000
    66b0:	20000114 	.word	0x20000114
    66b4:	20000290 	.word	0x20000290
    66b8:	4901      	ldr	r1, [pc, #4]	; (66c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    66ba:	68c9      	ldr	r1, [r1, #12]
    66bc:	f7fc bd40 	b.w	3140 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    66c0:	20000114 	.word	0x20000114
    66c4:	4603      	mov	r3, r0
    66c6:	2000      	movs	r0, #0
    66c8:	2b17      	cmp	r3, #23
    66ca:	d017      	beq.n	66fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66cc:	dc0a      	bgt.n	66e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    66ce:	2b0e      	cmp	r3, #14
    66d0:	d014      	beq.n	66fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66d2:	2b12      	cmp	r3, #18
    66d4:	d012      	beq.n	66fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66d6:	2b14      	cmp	r3, #20
    66d8:	d010      	beq.n	66fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    66da:	2b16      	cmp	r3, #22
    66dc:	d112      	bne.n	6704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    66de:	4608      	mov	r0, r1
    66e0:	f7ff bc4a 	b.w	5f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    66e4:	2b23      	cmp	r3, #35	; 0x23
    66e6:	d003      	beq.n	66f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    66e8:	2b24      	cmp	r3, #36	; 0x24
    66ea:	d001      	beq.n	66f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    66ec:	2b25      	cmp	r3, #37	; 0x25
    66ee:	d109      	bne.n	6704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    66f0:	4a05      	ldr	r2, [pc, #20]	; (6708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    66f2:	6812      	ldr	r2, [r2, #0]
    66f4:	2a00      	cmp	r2, #0
    66f6:	d005      	beq.n	6704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    66f8:	4618      	mov	r0, r3
    66fa:	4710      	bx	r2
    66fc:	2100      	movs	r1, #0
    66fe:	4618      	mov	r0, r3
    6700:	f000 b976 	b.w	69f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6704:	4770      	bx	lr
    6706:	0000      	.short	0x0000
    6708:	20000288 	.word	0x20000288
    670c:	b510      	push	{r4, lr}
    670e:	6841      	ldr	r1, [r0, #4]
    6710:	4604      	mov	r4, r0
    6712:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6716:	06c2      	lsls	r2, r0, #27
    6718:	d402      	bmi.n	6720 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    671a:	f240 71db 	movw	r1, #2011	; 0x7db
    671e:	e003      	b.n	6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6720:	0682      	lsls	r2, r0, #26
    6722:	d504      	bpl.n	672e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6724:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6728:	2031      	movs	r0, #49	; 0x31
    672a:	f7fa f931 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    672e:	f020 0010 	bic.w	r0, r0, #16
    6732:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6736:	4804      	ldr	r0, [pc, #16]	; (6748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6738:	f007 ff91 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    673c:	6860      	ldr	r0, [r4, #4]
    673e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6742:	2105      	movs	r1, #5
    6744:	f7fd bf1a 	b.w	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6748:	20000124 	.word	0x20000124
    674c:	b510      	push	{r4, lr}
    674e:	6840      	ldr	r0, [r0, #4]
    6750:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6754:	292f      	cmp	r1, #47	; 0x2f
    6756:	d006      	beq.n	6766 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6758:	2916      	cmp	r1, #22
    675a:	d00c      	beq.n	6776 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    675c:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6760:	2031      	movs	r0, #49	; 0x31
    6762:	f7fa f915 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6766:	2100      	movs	r1, #0
    6768:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6770:	4803      	ldr	r0, [pc, #12]	; (6780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6772:	f007 bf74 	b.w	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6776:	211a      	movs	r1, #26
    6778:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    677c:	bd10      	pop	{r4, pc}
    677e:	0000      	.short	0x0000
    6780:	20000124 	.word	0x20000124
    6784:	b570      	push	{r4, r5, r6, lr}
    6786:	4604      	mov	r4, r0
    6788:	6840      	ldr	r0, [r0, #4]
    678a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    678e:	291c      	cmp	r1, #28
    6790:	d004      	beq.n	679c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6792:	f240 71b6 	movw	r1, #1974	; 0x7b6
    6796:	2031      	movs	r0, #49	; 0x31
    6798:	f7fa f8fa 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    679c:	2500      	movs	r5, #0
    679e:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    67a2:	6860      	ldr	r0, [r4, #4]
    67a4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    67a8:	b161      	cbz	r1, 67c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    67aa:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    67ae:	6860      	ldr	r0, [r4, #4]
    67b0:	2202      	movs	r2, #2
    67b2:	8801      	ldrh	r1, [r0, #0]
    67b4:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67b8:	6860      	ldr	r0, [r4, #4]
    67ba:	490d      	ldr	r1, [pc, #52]	; (67f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    67bc:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67c0:	6860      	ldr	r0, [r4, #4]
    67c2:	e00c      	b.n	67de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    67c4:	8801      	ldrh	r1, [r0, #0]
    67c6:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    67ca:	6860      	ldr	r0, [r4, #4]
    67cc:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    67d0:	6861      	ldr	r1, [r4, #4]
    67d2:	2001      	movs	r0, #1
    67d4:	2202      	movs	r2, #2
    67d6:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    67da:	4906      	ldr	r1, [pc, #24]	; (67f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    67dc:	6860      	ldr	r0, [r4, #4]
    67de:	f200 200a 	addw	r0, r0, #522	; 0x20a
    67e2:	f007 fdfb 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    67e6:	6860      	ldr	r0, [r4, #4]
    67e8:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    67ec:	bd70      	pop	{r4, r5, r6, pc}
    67ee:	0000      	.short	0x0000
    67f0:	0000e827 	.word	0x0000e827
    67f4:	0000e809 	.word	0x0000e809
    67f8:	4916      	ldr	r1, [pc, #88]	; (6854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    67fa:	b510      	push	{r4, lr}
    67fc:	6889      	ldr	r1, [r1, #8]
    67fe:	790a      	ldrb	r2, [r1, #4]
    6800:	6841      	ldr	r1, [r0, #4]
    6802:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6806:	2b09      	cmp	r3, #9
    6808:	d10a      	bne.n	6820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    680a:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    680e:	4293      	cmp	r3, r2
    6810:	d106      	bne.n	6820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6812:	2200      	movs	r2, #0
    6814:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6818:	6840      	ldr	r0, [r0, #4]
    681a:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    681e:	bd10      	pop	{r4, pc}
    6820:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6824:	071c      	lsls	r4, r3, #28
    6826:	d509      	bpl.n	683c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6828:	f023 0008 	bic.w	r0, r3, #8
    682c:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6830:	4808      	ldr	r0, [pc, #32]	; (6854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6836:	3010      	adds	r0, #16
    6838:	f007 bf11 	b.w	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    683c:	2aff      	cmp	r2, #255	; 0xff
    683e:	d004      	beq.n	684a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6840:	f240 7151 	movw	r1, #1873	; 0x751
    6844:	2031      	movs	r0, #49	; 0x31
    6846:	f7fa f8a3 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    684a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    684e:	f008 bf23 	b.w	f698 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6852:	0000      	.short	0x0000
    6854:	20000114 	.word	0x20000114
    6858:	4808      	ldr	r0, [pc, #32]	; (687c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    685a:	b510      	push	{r4, lr}
    685c:	6840      	ldr	r0, [r0, #4]
    685e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6862:	b941      	cbnz	r1, 6876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6864:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6868:	2301      	movs	r3, #1
    686a:	2106      	movs	r1, #6
    686c:	3080      	adds	r0, #128	; 0x80
    686e:	f007 fa0d 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6872:	2800      	cmp	r0, #0
    6874:	d000      	beq.n	6878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6876:	2001      	movs	r0, #1
    6878:	bd10      	pop	{r4, pc}
    687a:	0000      	.short	0x0000
    687c:	20000124 	.word	0x20000124
    6880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6882:	4c59      	ldr	r4, [pc, #356]	; (69e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6884:	4606      	mov	r6, r0
    6886:	4615      	mov	r5, r2
    6888:	6860      	ldr	r0, [r4, #4]
    688a:	2200      	movs	r2, #0
    688c:	b111      	cbz	r1, 6894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    688e:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6892:	e006      	b.n	68a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6894:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6898:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    689c:	4411      	add	r1, r2
    689e:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    68a2:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    68a6:	f88d 1000 	strb.w	r1, [sp]
    68aa:	9900      	ldr	r1, [sp, #0]
    68ac:	9100      	str	r1, [sp, #0]
    68ae:	f89d 1000 	ldrb.w	r1, [sp]
    68b2:	b939      	cbnz	r1, 68c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    68b4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    68b8:	2301      	movs	r3, #1
    68ba:	4619      	mov	r1, r3
    68bc:	3080      	adds	r0, #128	; 0x80
    68be:	f007 f9e5 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68c2:	b130      	cbz	r0, 68d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    68c4:	6860      	ldr	r0, [r4, #4]
    68c6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    68ca:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    68ce:	4411      	add	r1, r2
    68d0:	8001      	strh	r1, [r0, #0]
    68d2:	6860      	ldr	r0, [r4, #4]
    68d4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    68d8:	b132      	cbz	r2, 68e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    68da:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    68de:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    68e2:	4419      	add	r1, r3
    68e4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    68e8:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    68ec:	2b00      	cmp	r3, #0
    68ee:	dd06      	ble.n	68fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    68f0:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    68f4:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    68f8:	4439      	add	r1, r7
    68fa:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    68fe:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6902:	bb09      	cbnz	r1, 6948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6904:	b9be      	cbnz	r6, 6936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6906:	4938      	ldr	r1, [pc, #224]	; (69e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6908:	3910      	subs	r1, #16
    690a:	7809      	ldrb	r1, [r1, #0]
    690c:	2902      	cmp	r1, #2
    690e:	d006      	beq.n	691e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6910:	2901      	cmp	r1, #1
    6912:	d00a      	beq.n	692a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6914:	b1f5      	cbz	r5, 6954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6916:	06e9      	lsls	r1, r5, #27
    6918:	d50b      	bpl.n	6932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    691a:	211e      	movs	r1, #30
    691c:	e042      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    691e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6922:	2906      	cmp	r1, #6
    6924:	d03e      	beq.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6926:	2116      	movs	r1, #22
    6928:	e03c      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    692a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    692e:	b959      	cbnz	r1, 6948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6930:	e054      	b.n	69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6932:	0729      	lsls	r1, r5, #28
    6934:	d501      	bpl.n	693a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6936:	213d      	movs	r1, #61	; 0x3d
    6938:	e034      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    693a:	06a9      	lsls	r1, r5, #26
    693c:	d501      	bpl.n	6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    693e:	2123      	movs	r1, #35	; 0x23
    6940:	e030      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6942:	07a9      	lsls	r1, r5, #30
    6944:	d001      	beq.n	694a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6946:	212a      	movs	r1, #42	; 0x2a
    6948:	e02c      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    694a:	f640 51a3 	movw	r1, #3491	; 0xda3
    694e:	2031      	movs	r0, #49	; 0x31
    6950:	f7fa f81e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6954:	b12a      	cbz	r2, 6962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6956:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    695a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    695e:	4291      	cmp	r1, r2
    6960:	d216      	bcs.n	6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6962:	2b00      	cmp	r3, #0
    6964:	dd05      	ble.n	6972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6966:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    696a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    696e:	4291      	cmp	r1, r2
    6970:	d20e      	bcs.n	6990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6972:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6976:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    697a:	428a      	cmp	r2, r1
    697c:	d30a      	bcc.n	6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    697e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6982:	f88d 2000 	strb.w	r2, [sp]
    6986:	9a00      	ldr	r2, [sp, #0]
    6988:	9200      	str	r2, [sp, #0]
    698a:	f89d 2000 	ldrb.w	r2, [sp]
    698e:	b10a      	cbz	r2, 6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6990:	2122      	movs	r1, #34	; 0x22
    6992:	e007      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6994:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6998:	b172      	cbz	r2, 69b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    699a:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    699e:	428a      	cmp	r2, r1
    69a0:	d31c      	bcc.n	69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69a2:	2108      	movs	r1, #8
    69a4:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    69a8:	f88d 2000 	strb.w	r2, [sp]
    69ac:	9a00      	ldr	r2, [sp, #0]
    69ae:	9200      	str	r2, [sp, #0]
    69b0:	f89d 2000 	ldrb.w	r2, [sp]
    69b4:	b96a      	cbnz	r2, 69d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    69b6:	e005      	b.n	69c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    69b8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    69bc:	2906      	cmp	r1, #6
    69be:	d30d      	bcc.n	69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    69c0:	213e      	movs	r1, #62	; 0x3e
    69c2:	e7ef      	b.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    69c4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    69c8:	2202      	movs	r2, #2
    69ca:	4908      	ldr	r1, [pc, #32]	; (69ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    69cc:	30b4      	adds	r0, #180	; 0xb4
    69ce:	f007 fd05 	bl	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69d2:	6860      	ldr	r0, [r4, #4]
    69d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    69d8:	f008 bdd7 	b.w	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    69dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    69e0:	2100      	movs	r1, #0
    69e2:	f7fd bdcb 	b.w	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    69e6:	0000      	.short	0x0000
    69e8:	20000124 	.word	0x20000124
    69ec:	0000e699 	.word	0x0000e699
    69f0:	b570      	push	{r4, r5, r6, lr}
    69f2:	4614      	mov	r4, r2
    69f4:	460e      	mov	r6, r1
    69f6:	6861      	ldr	r1, [r4, #4]
    69f8:	4602      	mov	r2, r0
    69fa:	2500      	movs	r5, #0
    69fc:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6a00:	2a0e      	cmp	r2, #14
    6a02:	d00a      	beq.n	6a1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6a04:	2a12      	cmp	r2, #18
    6a06:	d011      	beq.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6a08:	2a14      	cmp	r2, #20
    6a0a:	d016      	beq.n	6a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6a0c:	2a17      	cmp	r2, #23
    6a0e:	d023      	beq.n	6a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6a10:	f240 31dd 	movw	r1, #989	; 0x3dd
    6a14:	2031      	movs	r0, #49	; 0x31
    6a16:	f7f9 ffbb 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a1a:	2804      	cmp	r0, #4
    6a1c:	d131      	bne.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a1e:	4620      	mov	r0, r4
    6a20:	f007 fe31 	bl	e686 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a24:	4620      	mov	r0, r4
    6a26:	f7fc fb6d 	bl	3104 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6a2a:	e02a      	b.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a2c:	280f      	cmp	r0, #15
    6a2e:	d128      	bne.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a30:	4620      	mov	r0, r4
    6a32:	f007 ff85 	bl	e940 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6a36:	4605      	mov	r5, r0
    6a38:	e023      	b.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a3a:	281d      	cmp	r0, #29
    6a3c:	d121      	bne.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a3e:	4620      	mov	r0, r4
    6a40:	f007 fe21 	bl	e686 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6a44:	b126      	cbz	r6, 6a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6a46:	6860      	ldr	r0, [r4, #4]
    6a48:	2105      	movs	r1, #5
    6a4a:	30ec      	adds	r0, #236	; 0xec
    6a4c:	f008 fd79 	bl	f542 <__kernel_ram_size+0x28a>
    6a50:	480d      	ldr	r0, [pc, #52]	; (6a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a52:	f007 fec9 	bl	e7e8 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6a56:	e014      	b.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a58:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    6a5c:	2823      	cmp	r0, #35	; 0x23
    6a5e:	d110      	bne.n	6a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6a60:	2600      	movs	r6, #0
    6a62:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    6a66:	4808      	ldr	r0, [pc, #32]	; (6a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    6a68:	f007 fdf9 	bl	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a6c:	6860      	ldr	r0, [r4, #4]
    6a6e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6a72:	2801      	cmp	r0, #1
    6a74:	d102      	bne.n	6a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    6a76:	2000      	movs	r0, #0
    6a78:	f7ff fa78 	bl	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a7c:	6860      	ldr	r0, [r4, #4]
    6a7e:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    6a82:	4628      	mov	r0, r5
    6a84:	bd70      	pop	{r4, r5, r6, pc}
    6a86:	0000      	.short	0x0000
    6a88:	20000124 	.word	0x20000124
    6a8c:	b570      	push	{r4, r5, r6, lr}
    6a8e:	4d2e      	ldr	r5, [pc, #184]	; (6b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    6a90:	6868      	ldr	r0, [r5, #4]
    6a92:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6a96:	b151      	cbz	r1, 6aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6a98:	2901      	cmp	r1, #1
    6a9a:	d008      	beq.n	6aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6a9c:	2902      	cmp	r1, #2
    6a9e:	d009      	beq.n	6ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6aa0:	2903      	cmp	r1, #3
    6aa2:	d007      	beq.n	6ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    6aa4:	f640 4118 	movw	r1, #3096	; 0xc18
    6aa8:	2031      	movs	r0, #49	; 0x31
    6aaa:	f7f9 ff71 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6aae:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6ab2:	e037      	b.n	6b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    6ab4:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6ab8:	2907      	cmp	r1, #7
    6aba:	d036      	beq.n	6b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    6abc:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6ac0:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6ac4:	2400      	movs	r4, #0
    6ac6:	1c93      	adds	r3, r2, #2
    6ac8:	4299      	cmp	r1, r3
    6aca:	d306      	bcc.n	6ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6acc:	1a89      	subs	r1, r1, r2
    6ace:	1e89      	subs	r1, r1, #2
    6ad0:	040c      	lsls	r4, r1, #16
    6ad2:	0c24      	lsrs	r4, r4, #16
    6ad4:	d001      	beq.n	6ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    6ad6:	1e64      	subs	r4, r4, #1
    6ad8:	b2a4      	uxth	r4, r4
    6ada:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6ade:	b139      	cbz	r1, 6af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    6ae0:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6ae4:	2301      	movs	r3, #1
    6ae6:	2109      	movs	r1, #9
    6ae8:	3080      	adds	r0, #128	; 0x80
    6aea:	f007 f8cf 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6aee:	b340      	cbz	r0, 6b42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    6af0:	f7ff feb2 	bl	6858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    6af4:	b178      	cbz	r0, 6b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6af6:	686a      	ldr	r2, [r5, #4]
    6af8:	2000      	movs	r0, #0
    6afa:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6afe:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6b02:	1c93      	adds	r3, r2, #2
    6b04:	4299      	cmp	r1, r3
    6b06:	d303      	bcc.n	6b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b08:	1a88      	subs	r0, r1, r2
    6b0a:	1e80      	subs	r0, r0, #2
    6b0c:	d000      	beq.n	6b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    6b0e:	1e40      	subs	r0, r0, #1
    6b10:	42a0      	cmp	r0, r4
    6b12:	d200      	bcs.n	6b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    6b14:	b284      	uxth	r4, r0
    6b16:	b10c      	cbz	r4, 6b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b18:	1e64      	subs	r4, r4, #1
    6b1a:	b2a4      	uxth	r4, r4
    6b1c:	6868      	ldr	r0, [r5, #4]
    6b1e:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6b22:	4421      	add	r1, r4
    6b24:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6b28:	bd70      	pop	{r4, r5, r6, pc}
    6b2a:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6b2e:	2903      	cmp	r1, #3
    6b30:	d3bd      	bcc.n	6aae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    6b32:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6b36:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6b38:	4411      	add	r1, r2
    6b3a:	1c49      	adds	r1, r1, #1
    6b3c:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6b40:	bd70      	pop	{r4, r5, r6, pc}
    6b42:	2400      	movs	r4, #0
    6b44:	e7ea      	b.n	6b1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    6b46:	0000      	.short	0x0000
    6b48:	20000124 	.word	0x20000124

00006b4c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	6844      	ldr	r4, [r0, #4]
    6b50:	220d      	movs	r2, #13
    6b52:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6b56:	2100      	movs	r1, #0
    6b58:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    6b5c:	f00a f9fd 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b60:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6b64:	2100      	movs	r1, #0
    6b66:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    6b6a:	5501      	strb	r1, [r0, r4]
    6b6c:	f8a5 1017 	strh.w	r1, [r5, #23]
    6b70:	7669      	strb	r1, [r5, #25]
    6b72:	4608      	mov	r0, r1
    6b74:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6b78:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6b7c:	1c40      	adds	r0, r0, #1
    6b7e:	b2c0      	uxtb	r0, r0
    6b80:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6b84:	2802      	cmp	r0, #2
    6b86:	d3f7      	bcc.n	6b78 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6b88:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6b8c:	4620      	mov	r0, r4
    6b8e:	f008 fe43 	bl	f818 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6b92:	2000      	movs	r0, #0
    6b94:	21ff      	movs	r1, #255	; 0xff
    6b96:	1822      	adds	r2, r4, r0
    6b98:	1c40      	adds	r0, r0, #1
    6b9a:	b2c0      	uxtb	r0, r0
    6b9c:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    6ba0:	2802      	cmp	r0, #2
    6ba2:	d3f8      	bcc.n	6b96 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6ba4:	bd70      	pop	{r4, r5, r6, pc}
	...

00006ba8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6ba8:	4903      	ldr	r1, [pc, #12]	; (6bb8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6baa:	884a      	ldrh	r2, [r1, #2]
    6bac:	8002      	strh	r2, [r0, #0]
    6bae:	7809      	ldrb	r1, [r1, #0]
    6bb0:	7081      	strb	r1, [r0, #2]
    6bb2:	2000      	movs	r0, #0
    6bb4:	4770      	bx	lr
    6bb6:	0000      	.short	0x0000
    6bb8:	200013f8 	.word	0x200013f8

00006bbc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6bbc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6bbe:	460c      	mov	r4, r1
    6bc0:	4605      	mov	r5, r0
    6bc2:	8800      	ldrh	r0, [r0, #0]
    6bc4:	4669      	mov	r1, sp
    6bc6:	f007 f84a 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6bca:	2200      	movs	r2, #0
    6bcc:	b128      	cbz	r0, 6bda <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    6bce:	f8c4 2002 	str.w	r2, [r4, #2]
    6bd2:	71a2      	strb	r2, [r4, #6]
    6bd4:	8022      	strh	r2, [r4, #0]
    6bd6:	2002      	movs	r0, #2
    6bd8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6bda:	9901      	ldr	r1, [sp, #4]
    6bdc:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    6be0:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    6be4:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    6be8:	f8c4 0002 	str.w	r0, [r4, #2]
    6bec:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    6bf0:	71a0      	strb	r0, [r4, #6]
    6bf2:	8828      	ldrh	r0, [r5, #0]
    6bf4:	8020      	strh	r0, [r4, #0]
    6bf6:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    6bfa:	f88d 0008 	strb.w	r0, [sp, #8]
    6bfe:	9802      	ldr	r0, [sp, #8]
    6c00:	9002      	str	r0, [sp, #8]
    6c02:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c06:	2800      	cmp	r0, #0
    6c08:	d1ea      	bne.n	6be0 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    6c0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006c0c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    6c0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6c0e:	460d      	mov	r5, r1
    6c10:	4606      	mov	r6, r0
    6c12:	8800      	ldrh	r0, [r0, #0]
    6c14:	4669      	mov	r1, sp
    6c16:	f007 f822 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6c1a:	2800      	cmp	r0, #0
    6c1c:	d11a      	bne.n	6c54 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    6c1e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6c22:	2700      	movs	r7, #0
    6c24:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6c28:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6c2c:	f009 fb71 	bl	10312 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c30:	70a8      	strb	r0, [r5, #2]
    6c32:	7860      	ldrb	r0, [r4, #1]
    6c34:	f009 fb6d 	bl	10312 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6c38:	70e8      	strb	r0, [r5, #3]
    6c3a:	78a0      	ldrb	r0, [r4, #2]
    6c3c:	f88d 0008 	strb.w	r0, [sp, #8]
    6c40:	9802      	ldr	r0, [sp, #8]
    6c42:	9002      	str	r0, [sp, #8]
    6c44:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c48:	3c6a      	subs	r4, #106	; 0x6a
    6c4a:	2800      	cmp	r0, #0
    6c4c:	d1ea      	bne.n	6c24 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6c4e:	8830      	ldrh	r0, [r6, #0]
    6c50:	8028      	strh	r0, [r5, #0]
    6c52:	2000      	movs	r0, #0
    6c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006c58 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6c58:	4903      	ldr	r1, [pc, #12]	; (6c68 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6c5a:	888a      	ldrh	r2, [r1, #4]
    6c5c:	8002      	strh	r2, [r0, #0]
    6c5e:	88c9      	ldrh	r1, [r1, #6]
    6c60:	8041      	strh	r1, [r0, #2]
    6c62:	2000      	movs	r0, #0
    6c64:	4770      	bx	lr
    6c66:	0000      	.short	0x0000
    6c68:	2000029c 	.word	0x2000029c

00006c6c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6c6c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6c6e:	2400      	movs	r4, #0
    6c70:	a902      	add	r1, sp, #8
    6c72:	f88d 4004 	strb.w	r4, [sp, #4]
    6c76:	f88d 4008 	strb.w	r4, [sp, #8]
    6c7a:	9100      	str	r1, [sp, #0]
    6c7c:	7882      	ldrb	r2, [r0, #2]
    6c7e:	7841      	ldrb	r1, [r0, #1]
    6c80:	7800      	ldrb	r0, [r0, #0]
    6c82:	ab01      	add	r3, sp, #4
    6c84:	f009 fcc0 	bl	10608 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    6c88:	2800      	cmp	r0, #0
    6c8a:	d112      	bne.n	6cb2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6c8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6c90:	f009 fbf3 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6c94:	b170      	cbz	r0, 6cb4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6c96:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6c9a:	f009 fbee 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6c9e:	b148      	cbz	r0, 6cb4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6ca0:	4805      	ldr	r0, [pc, #20]	; (6cb8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6ca2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6ca6:	7381      	strb	r1, [r0, #14]
    6ca8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6cac:	73c1      	strb	r1, [r0, #15]
    6cae:	8204      	strh	r4, [r0, #16]
    6cb0:	2000      	movs	r0, #0
    6cb2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cb4:	2011      	movs	r0, #17
    6cb6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6cb8:	200013f8 	.word	0x200013f8

00006cbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    6cbc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6cc0:	460f      	mov	r7, r1
    6cc2:	4605      	mov	r5, r0
    6cc4:	7806      	ldrb	r6, [r0, #0]
    6cc6:	f009 fb8b 	bl	103e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    6cca:	2800      	cmp	r0, #0
    6ccc:	d10e      	bne.n	6cec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cce:	4628      	mov	r0, r5
    6cd0:	f009 fb60 	bl	10394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    6cd4:	2800      	cmp	r0, #0
    6cd6:	d109      	bne.n	6cec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6cd8:	2101      	movs	r1, #1
    6cda:	4630      	mov	r0, r6
    6cdc:	f7fa f986 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6ce0:	0004      	movs	r4, r0
    6ce2:	d005      	beq.n	6cf0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    6ce4:	f008 f952 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6ce8:	b170      	cbz	r0, 6d08 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    6cea:	200c      	movs	r0, #12
    6cec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6cf0:	2101      	movs	r1, #1
    6cf2:	4630      	mov	r0, r6
    6cf4:	f7fa f942 	bl	f7c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    6cf8:	0004      	movs	r4, r0
    6cfa:	d013      	beq.n	6d24 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    6cfc:	4817      	ldr	r0, [pc, #92]	; (6d5c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    6cfe:	f990 1000 	ldrsb.w	r1, [r0]
    6d02:	4620      	mov	r0, r4
    6d04:	f007 ff17 	bl	eb36 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    6d08:	4620      	mov	r0, r4
    6d0a:	f007 ff7f 	bl	ec0c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    6d0e:	7038      	strb	r0, [r7, #0]
    6d10:	74e8      	strb	r0, [r5, #19]
    6d12:	4629      	mov	r1, r5
    6d14:	4620      	mov	r0, r4
    6d16:	f7fc fc57 	bl	35c8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    6d1a:	4606      	mov	r6, r0
    6d1c:	7e68      	ldrb	r0, [r5, #25]
    6d1e:	b1d0      	cbz	r0, 6d56 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d20:	b12e      	cbz	r6, 6d2e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    6d22:	e018      	b.n	6d56 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    6d24:	f241 512e 	movw	r1, #5422	; 0x152e
    6d28:	2039      	movs	r0, #57	; 0x39
    6d2a:	f7f9 fe31 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d2e:	2200      	movs	r2, #0
    6d30:	4668      	mov	r0, sp
    6d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d34:	f006 fdc7 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d38:	2200      	movs	r2, #0
    6d3a:	2101      	movs	r1, #1
    6d3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d3e:	f006 fe3c 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d42:	2204      	movs	r2, #4
    6d44:	4668      	mov	r0, sp
    6d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6d48:	f006 fdbd 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    6d4c:	2200      	movs	r2, #0
    6d4e:	4611      	mov	r1, r2
    6d50:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6d52:	f006 fe32 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    6d56:	4630      	mov	r0, r6
    6d58:	e7c8      	b.n	6cec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    6d5a:	0000      	.short	0x0000
    6d5c:	20000294 	.word	0x20000294

00006d60 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    6d60:	7801      	ldrb	r1, [r0, #0]
    6d62:	b171      	cbz	r1, 6d82 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d64:	7841      	ldrb	r1, [r0, #1]
    6d66:	b161      	cbz	r1, 6d82 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d68:	8841      	ldrh	r1, [r0, #2]
    6d6a:	291b      	cmp	r1, #27
    6d6c:	d309      	bcc.n	6d82 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d6e:	8881      	ldrh	r1, [r0, #4]
    6d70:	291b      	cmp	r1, #27
    6d72:	d306      	bcc.n	6d82 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    6d74:	4904      	ldr	r1, [pc, #16]	; (6d88 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    6d76:	6802      	ldr	r2, [r0, #0]
    6d78:	600a      	str	r2, [r1, #0]
    6d7a:	8880      	ldrh	r0, [r0, #4]
    6d7c:	8088      	strh	r0, [r1, #4]
    6d7e:	2000      	movs	r0, #0
    6d80:	4770      	bx	lr
    6d82:	2012      	movs	r0, #18
    6d84:	4770      	bx	lr
    6d86:	0000      	.short	0x0000
    6d88:	200013f8 	.word	0x200013f8

00006d8c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    6d8c:	6800      	ldr	r0, [r0, #0]
    6d8e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    6d92:	4288      	cmp	r0, r1
    6d94:	d303      	bcc.n	6d9e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    6d96:	4903      	ldr	r1, [pc, #12]	; (6da4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    6d98:	6088      	str	r0, [r1, #8]
    6d9a:	2000      	movs	r0, #0
    6d9c:	4770      	bx	lr
    6d9e:	2012      	movs	r0, #18
    6da0:	4770      	bx	lr
    6da2:	0000      	.short	0x0000
    6da4:	200013f8 	.word	0x200013f8

00006da8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    6da8:	4a03      	ldr	r2, [pc, #12]	; (6db8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    6daa:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    6dae:	6001      	str	r1, [r0, #0]
    6db0:	6042      	str	r2, [r0, #4]
    6db2:	2000      	movs	r0, #0
    6db4:	4770      	bx	lr
    6db6:	0000      	.short	0x0000
    6db8:	00007304 	.word	0x00007304

00006dbc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    6dbc:	b50e      	push	{r1, r2, r3, lr}
    6dbe:	8800      	ldrh	r0, [r0, #0]
    6dc0:	4669      	mov	r1, sp
    6dc2:	f006 ff4c 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6dc6:	b960      	cbnz	r0, 6de2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6dc8:	9801      	ldr	r0, [sp, #4]
    6dca:	f009 fbd2 	bl	10572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    6dce:	b140      	cbz	r0, 6de2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    6dd0:	9801      	ldr	r0, [sp, #4]
    6dd2:	4601      	mov	r1, r0
    6dd4:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    6dd8:	3080      	adds	r0, #128	; 0x80
    6dda:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    6dde:	b962      	cbnz	r2, 6dfa <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    6de0:	e001      	b.n	6de6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    6de2:	2002      	movs	r0, #2
    6de4:	bd0e      	pop	{r1, r2, r3, pc}
    6de6:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    6dea:	f88d 2008 	strb.w	r2, [sp, #8]
    6dee:	9a02      	ldr	r2, [sp, #8]
    6df0:	9202      	str	r2, [sp, #8]
    6df2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    6df6:	2201      	movs	r2, #1
    6df8:	b10b      	cbz	r3, 6dfe <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    6dfa:	203a      	movs	r0, #58	; 0x3a
    6dfc:	bd0e      	pop	{r1, r2, r3, pc}
    6dfe:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    6e02:	079b      	lsls	r3, r3, #30
    6e04:	d006      	beq.n	6e14 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    6e06:	2202      	movs	r2, #2
    6e08:	4905      	ldr	r1, [pc, #20]	; (6e20 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    6e0a:	305e      	adds	r0, #94	; 0x5e
    6e0c:	f007 fafa 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    6e10:	2000      	movs	r0, #0
    6e12:	bd0e      	pop	{r1, r2, r3, pc}
    6e14:	700a      	strb	r2, [r1, #0]
    6e16:	4668      	mov	r0, sp
    6e18:	f007 fab4 	bl	e384 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6e1c:	e7f8      	b.n	6e10 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    6e1e:	0000      	.short	0x0000
    6e20:	0000e979 	.word	0x0000e979

00006e24 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    6e24:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    6e28:	4613      	mov	r3, r2
    6e2a:	4a33      	ldr	r2, [pc, #204]	; (6ef8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    6e2c:	460f      	mov	r7, r1
    6e2e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    6e32:	8814      	ldrh	r4, [r2, #0]
    6e34:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    6e38:	428c      	cmp	r4, r1
    6e3a:	d200      	bcs.n	6e3e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    6e3c:	4621      	mov	r1, r4
    6e3e:	4688      	mov	r8, r1
    6e40:	8891      	ldrh	r1, [r2, #4]
    6e42:	42b1      	cmp	r1, r6
    6e44:	d200      	bcs.n	6e48 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    6e46:	460e      	mov	r6, r1
    6e48:	8851      	ldrh	r1, [r2, #2]
    6e4a:	f640 0448 	movw	r4, #2120	; 0x848
    6e4e:	42a1      	cmp	r1, r4
    6e50:	d300      	bcc.n	6e54 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    6e52:	4621      	mov	r1, r4
    6e54:	88d5      	ldrh	r5, [r2, #6]
    6e56:	42a5      	cmp	r5, r4
    6e58:	d300      	bcc.n	6e5c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    6e5a:	4625      	mov	r5, r4
    6e5c:	42a1      	cmp	r1, r4
    6e5e:	d200      	bcs.n	6e62 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    6e60:	460c      	mov	r4, r1
    6e62:	f44f 72a4 	mov.w	r2, #328	; 0x148
    6e66:	2e1b      	cmp	r6, #27
    6e68:	d001      	beq.n	6e6e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    6e6a:	4295      	cmp	r5, r2
    6e6c:	d104      	bne.n	6e78 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    6e6e:	f1b8 0f1b 	cmp.w	r8, #27
    6e72:	d03e      	beq.n	6ef2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e74:	4294      	cmp	r4, r2
    6e76:	d03c      	beq.n	6ef2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6e78:	466a      	mov	r2, sp
    6e7a:	4619      	mov	r1, r3
    6e7c:	f009 fb20 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    6e80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    6e84:	4641      	mov	r1, r8
    6e86:	4540      	cmp	r0, r8
    6e88:	d900      	bls.n	6e8c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    6e8a:	4608      	mov	r0, r1
    6e8c:	80f8      	strh	r0, [r7, #6]
    6e8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    6e92:	42a1      	cmp	r1, r4
    6e94:	d800      	bhi.n	6e98 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    6e96:	460c      	mov	r4, r1
    6e98:	813c      	strh	r4, [r7, #8]
    6e9a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    6e9e:	42b1      	cmp	r1, r6
    6ea0:	d800      	bhi.n	6ea4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    6ea2:	460e      	mov	r6, r1
    6ea4:	807e      	strh	r6, [r7, #2]
    6ea6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6eaa:	42a9      	cmp	r1, r5
    6eac:	d800      	bhi.n	6eb0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    6eae:	460d      	mov	r5, r1
    6eb0:	80bd      	strh	r5, [r7, #4]
    6eb2:	21ff      	movs	r1, #255	; 0xff
    6eb4:	7039      	strb	r1, [r7, #0]
    6eb6:	381b      	subs	r0, #27
    6eb8:	28e0      	cmp	r0, #224	; 0xe0
    6eba:	d902      	bls.n	6ec2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    6ebc:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    6ec0:	e014      	b.n	6eec <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ec2:	3e1b      	subs	r6, #27
    6ec4:	2ee0      	cmp	r6, #224	; 0xe0
    6ec6:	d902      	bls.n	6ece <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    6ec8:	f240 51b2 	movw	r1, #1458	; 0x5b2
    6ecc:	e00e      	b.n	6eec <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ece:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    6ed2:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    6ed6:	4284      	cmp	r4, r0
    6ed8:	d902      	bls.n	6ee0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    6eda:	f240 51b4 	movw	r1, #1460	; 0x5b4
    6ede:	e005      	b.n	6eec <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    6ee0:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    6ee4:	4285      	cmp	r5, r0
    6ee6:	d904      	bls.n	6ef2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    6ee8:	f240 51b6 	movw	r1, #1462	; 0x5b6
    6eec:	2039      	movs	r0, #57	; 0x39
    6eee:	f7f9 fd4f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ef2:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    6ef6:	0000      	.short	0x0000
    6ef8:	2000029c 	.word	0x2000029c

00006efc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    6efc:	b570      	push	{r4, r5, r6, lr}
    6efe:	b086      	sub	sp, #24
    6f00:	4604      	mov	r4, r0
    6f02:	f000 fa9d 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f06:	0940      	lsrs	r0, r0, #5
    6f08:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    6f0c:	4e2d      	ldr	r6, [pc, #180]	; (6fc4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    6f0e:	07c0      	lsls	r0, r0, #31
    6f10:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    6f14:	d002      	beq.n	6f1c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    6f16:	8871      	ldrh	r1, [r6, #2]
    6f18:	88b0      	ldrh	r0, [r6, #4]
    6f1a:	e001      	b.n	6f20 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    6f1c:	211b      	movs	r1, #27
    6f1e:	4608      	mov	r0, r1
    6f20:	84e9      	strh	r1, [r5, #38]	; 0x26
    6f22:	8528      	strh	r0, [r5, #40]	; 0x28
    6f24:	f000 fa8c 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6f28:	0788      	lsls	r0, r1, #30
    6f2a:	f04f 0501 	mov.w	r5, #1
    6f2e:	d505      	bpl.n	6f3c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    6f30:	f88d 5000 	strb.w	r5, [sp]
    6f34:	4668      	mov	r0, sp
    6f36:	9401      	str	r4, [sp, #4]
    6f38:	f7ff fe08 	bl	6b4c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    6f3c:	68b0      	ldr	r0, [r6, #8]
    6f3e:	62e0      	str	r0, [r4, #44]	; 0x2c
    6f40:	f641 514c 	movw	r1, #7500	; 0x1d4c
    6f44:	6121      	str	r1, [r4, #16]
    6f46:	8821      	ldrh	r1, [r4, #0]
    6f48:	f8ad 1004 	strh.w	r1, [sp, #4]
    6f4c:	7bb1      	ldrb	r1, [r6, #14]
    6f4e:	f88d 1006 	strb.w	r1, [sp, #6]
    6f52:	7bf1      	ldrb	r1, [r6, #15]
    6f54:	f88d 1007 	strb.w	r1, [sp, #7]
    6f58:	8a31      	ldrh	r1, [r6, #16]
    6f5a:	f8ad 1008 	strh.w	r1, [sp, #8]
    6f5e:	a904      	add	r1, sp, #16
    6f60:	9100      	str	r1, [sp, #0]
    6f62:	4628      	mov	r0, r5
    6f64:	ab03      	add	r3, sp, #12
    6f66:	aa01      	add	r2, sp, #4
    6f68:	4621      	mov	r1, r4
    6f6a:	f009 fadf 	bl	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    6f6e:	b138      	cbz	r0, 6f80 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    6f70:	8820      	ldrh	r0, [r4, #0]
    6f72:	2100      	movs	r1, #0
    6f74:	f7fa f8dc 	bl	1130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f78:	b308      	cbz	r0, 6fbe <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    6f7a:	f240 517d 	movw	r1, #1405	; 0x57d
    6f7e:	e01b      	b.n	6fb8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    6f80:	f89d 000c 	ldrb.w	r0, [sp, #12]
    6f84:	f88d 0014 	strb.w	r0, [sp, #20]
    6f88:	f89d 0010 	ldrb.w	r0, [sp, #16]
    6f8c:	f88d 0015 	strb.w	r0, [sp, #21]
    6f90:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    6f94:	f8ad 0016 	strh.w	r0, [sp, #22]
    6f98:	a905      	add	r1, sp, #20
    6f9a:	4620      	mov	r0, r4
    6f9c:	f006 ff1c 	bl	ddd8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    6fa0:	7870      	ldrb	r0, [r6, #1]
    6fa2:	9000      	str	r0, [sp, #0]
    6fa4:	7833      	ldrb	r3, [r6, #0]
    6fa6:	88b2      	ldrh	r2, [r6, #4]
    6fa8:	8871      	ldrh	r1, [r6, #2]
    6faa:	8820      	ldrh	r0, [r4, #0]
    6fac:	f7fa f8f2 	bl	1194 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    6fb0:	2800      	cmp	r0, #0
    6fb2:	d005      	beq.n	6fc0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    6fb4:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    6fb8:	2039      	movs	r0, #57	; 0x39
    6fba:	f7f9 fce9 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fbe:	2009      	movs	r0, #9
    6fc0:	b006      	add	sp, #24
    6fc2:	bd70      	pop	{r4, r5, r6, pc}
    6fc4:	200013f8 	.word	0x200013f8

00006fc8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    6fc8:	b510      	push	{r4, lr}
    6fca:	2005      	movs	r0, #5
    6fcc:	f000 fa2c 	bl	7428 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    6fd0:	f7fd ff84 	bl	4edc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    6fd4:	4902      	ldr	r1, [pc, #8]	; (6fe0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    6fd6:	4801      	ldr	r0, [pc, #4]	; (6fdc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    6fd8:	6048      	str	r0, [r1, #4]
    6fda:	bd10      	pop	{r4, pc}
    6fdc:	00006e25 	.word	0x00006e25
    6fe0:	20000294 	.word	0x20000294
    6fe4:	b51c      	push	{r2, r3, r4, lr}
    6fe6:	4909      	ldr	r1, [pc, #36]	; (700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    6fe8:	e9d1 0100 	ldrd	r0, r1, [r1]
    6fec:	e9cd 0100 	strd	r0, r1, [sp]
    6ff0:	e005      	b.n	6ffe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6ff2:	9800      	ldr	r0, [sp, #0]
    6ff4:	f007 ffca 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    6ff8:	b108      	cbz	r0, 6ffe <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    6ffa:	2001      	movs	r0, #1
    6ffc:	bd1c      	pop	{r2, r3, r4, pc}
    6ffe:	4668      	mov	r0, sp
    7000:	f7fa f846 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7004:	2800      	cmp	r0, #0
    7006:	d0f4      	beq.n	6ff2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    7008:	2000      	movs	r0, #0
    700a:	bd1c      	pop	{r2, r3, r4, pc}
    700c:	00007304 	.word	0x00007304
    7010:	b510      	push	{r4, lr}
    7012:	480d      	ldr	r0, [pc, #52]	; (7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    7014:	2100      	movs	r1, #0
    7016:	4b0d      	ldr	r3, [pc, #52]	; (704c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7018:	74c1      	strb	r1, [r0, #19]
    701a:	8281      	strh	r1, [r0, #20]
    701c:	221b      	movs	r2, #27
    701e:	801a      	strh	r2, [r3, #0]
    7020:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7024:	805c      	strh	r4, [r3, #2]
    7026:	809a      	strh	r2, [r3, #4]
    7028:	80dc      	strh	r4, [r3, #6]
    702a:	7381      	strb	r1, [r0, #14]
    702c:	73c1      	strb	r1, [r0, #15]
    702e:	2303      	movs	r3, #3
    7030:	7003      	strb	r3, [r0, #0]
    7032:	2302      	movs	r3, #2
    7034:	7043      	strb	r3, [r0, #1]
    7036:	8042      	strh	r2, [r0, #2]
    7038:	8082      	strh	r2, [r0, #4]
    703a:	f640 62a6 	movw	r2, #3750	; 0xea6
    703e:	6082      	str	r2, [r0, #8]
    7040:	7481      	strb	r1, [r0, #18]
    7042:	7301      	strb	r1, [r0, #12]
    7044:	bd10      	pop	{r4, pc}
    7046:	0000      	.short	0x0000
    7048:	200013f8 	.word	0x200013f8
    704c:	2000029c 	.word	0x2000029c
    7050:	b510      	push	{r4, lr}
    7052:	2101      	movs	r1, #1
    7054:	2000      	movs	r0, #0
    7056:	f7f9 ffc9 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    705a:	0004      	movs	r4, r0
    705c:	d10a      	bne.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    705e:	2101      	movs	r1, #1
    7060:	f7f9 ff8c 	bl	f7c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    7064:	0004      	movs	r4, r0
    7066:	d007      	beq.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    7068:	4806      	ldr	r0, [pc, #24]	; (7084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    706a:	f990 1000 	ldrsb.w	r1, [r0]
    706e:	4620      	mov	r0, r4
    7070:	f007 fd61 	bl	eb36 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    7074:	4620      	mov	r0, r4
    7076:	bd10      	pop	{r4, pc}
    7078:	f240 3113 	movw	r1, #787	; 0x313
    707c:	2039      	movs	r0, #57	; 0x39
    707e:	f7f9 fc87 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7082:	0000      	.short	0x0000
    7084:	20000294 	.word	0x20000294

00007088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    7088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    708a:	460c      	mov	r4, r1
    708c:	4605      	mov	r5, r0
    708e:	f007 fdc0 	bl	ec12 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    7092:	b158      	cbz	r0, 70ac <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    7094:	4628      	mov	r0, r5
    7096:	f007 fdaf 	bl	ebf8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    709a:	b148      	cbz	r0, 70b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    709c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    70a0:	2112      	movs	r1, #18
    70a2:	b108      	cbz	r0, 70a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70a4:	2880      	cmp	r0, #128	; 0x80
    70a6:	d903      	bls.n	70b0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    70a8:	4608      	mov	r0, r1
    70aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70ac:	2142      	movs	r1, #66	; 0x42
    70ae:	e7fb      	b.n	70a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70b0:	4628      	mov	r0, r5
    70b2:	f007 fd92 	bl	ebda <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    70b6:	b120      	cbz	r0, 70c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    70b8:	4628      	mov	r0, r5
    70ba:	f007 fcfd 	bl	eab8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    70be:	b110      	cbz	r0, 70c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    70c0:	e005      	b.n	70ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    70c2:	210c      	movs	r1, #12
    70c4:	e7f0      	b.n	70a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    70c6:	4628      	mov	r0, r5
    70c8:	f007 fd90 	bl	ebec <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    70cc:	b120      	cbz	r0, 70d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    70ce:	4628      	mov	r0, r5
    70d0:	f007 ff5c 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    70d4:	b930      	cbnz	r0, 70e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    70d6:	e001      	b.n	70dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    70d8:	2012      	movs	r0, #18
    70da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70dc:	4628      	mov	r0, r5
    70de:	f007 fd06 	bl	eaee <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    70e2:	b108      	cbz	r0, 70e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    70e4:	200c      	movs	r0, #12
    70e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70e8:	4628      	mov	r0, r5
    70ea:	f7fc fa0b 	bl	3504 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    70ee:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    70f2:	f242 7010 	movw	r0, #10000	; 0x2710
    70f6:	4346      	muls	r6, r0
    70f8:	78e1      	ldrb	r1, [r4, #3]
    70fa:	4628      	mov	r0, r5
    70fc:	f007 fd64 	bl	ebc8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7100:	4628      	mov	r0, r5
    7102:	f007 fd75 	bl	ebf0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7106:	b1a8      	cbz	r0, 7134 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    7108:	2100      	movs	r1, #0
    710a:	4668      	mov	r0, sp
    710c:	f7f9 ffe2 	bl	10d4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    7110:	0004      	movs	r4, r0
    7112:	d019      	beq.n	7148 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    7114:	2100      	movs	r1, #0
    7116:	f7fb fae7 	bl	26e8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    711a:	f8bd 0000 	ldrh.w	r0, [sp]
    711e:	8020      	strh	r0, [r4, #0]
    7120:	4621      	mov	r1, r4
    7122:	4628      	mov	r0, r5
    7124:	f007 fd8c 	bl	ec40 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    7128:	4628      	mov	r0, r5
    712a:	f007 fd69 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    712e:	b168      	cbz	r0, 714c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    7130:	2001      	movs	r0, #1
    7132:	e00e      	b.n	7152 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    7134:	4632      	mov	r2, r6
    7136:	2100      	movs	r1, #0
    7138:	4628      	mov	r0, r5
    713a:	f7fd f921 	bl	4380 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    713e:	2800      	cmp	r0, #0
    7140:	d0d1      	beq.n	70e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    7142:	f241 7168 	movw	r1, #5992	; 0x1768
    7146:	e012      	b.n	716e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    7148:	200d      	movs	r0, #13
    714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    714c:	4628      	mov	r0, r5
    714e:	f007 fd75 	bl	ec3c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    7152:	4601      	mov	r1, r0
    7154:	4620      	mov	r0, r4
    7156:	f7ff fed1 	bl	6efc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    715a:	2800      	cmp	r0, #0
    715c:	d1f5      	bne.n	714a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    715e:	4632      	mov	r2, r6
    7160:	4621      	mov	r1, r4
    7162:	4628      	mov	r0, r5
    7164:	f7fd f90c 	bl	4380 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7168:	b120      	cbz	r0, 7174 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    716a:	f241 718b 	movw	r1, #6027	; 0x178b
    716e:	2039      	movs	r0, #57	; 0x39
    7170:	f7f9 fc0e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7174:	4804      	ldr	r0, [pc, #16]	; (7188 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    7176:	6843      	ldr	r3, [r0, #4]
    7178:	b123      	cbz	r3, 7184 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    717a:	2200      	movs	r2, #0
    717c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    7180:	4620      	mov	r0, r4
    7182:	4798      	blx	r3
    7184:	2000      	movs	r0, #0
    7186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7188:	20000294 	.word	0x20000294
    718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7190:	b088      	sub	sp, #32
    7192:	4604      	mov	r4, r0
    7194:	8800      	ldrh	r0, [r0, #0]
    7196:	a906      	add	r1, sp, #24
    7198:	f006 fd61 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    719c:	2800      	cmp	r0, #0
    719e:	d147      	bne.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    71a0:	9807      	ldr	r0, [sp, #28]
    71a2:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    71a6:	f88d 1008 	strb.w	r1, [sp, #8]
    71aa:	9902      	ldr	r1, [sp, #8]
    71ac:	9102      	str	r1, [sp, #8]
    71ae:	f89d 1008 	ldrb.w	r1, [sp, #8]
    71b2:	3080      	adds	r0, #128	; 0x80
    71b4:	b101      	cbz	r1, 71b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    71b6:	2101      	movs	r1, #1
    71b8:	f88d 100c 	strb.w	r1, [sp, #12]
    71bc:	7b01      	ldrb	r1, [r0, #12]
    71be:	f04f 0800 	mov.w	r8, #0
    71c2:	0689      	lsls	r1, r1, #26
    71c4:	d502      	bpl.n	71cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    71c6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    71ca:	b149      	cbz	r1, 71e0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    71cc:	f05f 0100 	movs.w	r1, #0
    71d0:	f88d 1004 	strb.w	r1, [sp, #4]
    71d4:	2105      	movs	r1, #5
    71d6:	306c      	adds	r0, #108	; 0x6c
    71d8:	f008 fb6f 	bl	f8ba <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    71dc:	b110      	cbz	r0, 71e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    71de:	e004      	b.n	71ea <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    71e0:	2101      	movs	r1, #1
    71e2:	e7f5      	b.n	71d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    71e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    71e8:	b308      	cbz	r0, 722e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    71ea:	8921      	ldrh	r1, [r4, #8]
    71ec:	88e0      	ldrh	r0, [r4, #6]
    71ee:	f009 f959 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    71f2:	2800      	cmp	r0, #0
    71f4:	d11c      	bne.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    71f6:	88a1      	ldrh	r1, [r4, #4]
    71f8:	8860      	ldrh	r0, [r4, #2]
    71fa:	f009 f953 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    71fe:	2800      	cmp	r0, #0
    7200:	d116      	bne.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7202:	8921      	ldrh	r1, [r4, #8]
    7204:	88e0      	ldrh	r0, [r4, #6]
    7206:	f009 f943 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    720a:	2800      	cmp	r0, #0
    720c:	d110      	bne.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    720e:	88a1      	ldrh	r1, [r4, #4]
    7210:	8860      	ldrh	r0, [r4, #2]
    7212:	f009 f93d 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    7216:	0006      	movs	r6, r0
    7218:	d10a      	bne.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    721a:	9807      	ldr	r0, [sp, #28]
    721c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7220:	27ff      	movs	r7, #255	; 0xff
    7222:	706f      	strb	r7, [r5, #1]
    7224:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7228:	b129      	cbz	r1, 7236 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    722a:	263a      	movs	r6, #58	; 0x3a
    722c:	e02e      	b.n	728c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    722e:	201a      	movs	r0, #26
    7230:	b008      	add	sp, #32
    7232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7236:	4641      	mov	r1, r8
    7238:	aa03      	add	r2, sp, #12
    723a:	f009 f941 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    723e:	8861      	ldrh	r1, [r4, #2]
    7240:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7244:	4281      	cmp	r1, r0
    7246:	d200      	bcs.n	724a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    7248:	4608      	mov	r0, r1
    724a:	80e8      	strh	r0, [r5, #6]
    724c:	88a1      	ldrh	r1, [r4, #4]
    724e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7252:	4281      	cmp	r1, r0
    7254:	d200      	bcs.n	7258 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    7256:	4608      	mov	r0, r1
    7258:	8128      	strh	r0, [r5, #8]
    725a:	88e2      	ldrh	r2, [r4, #6]
    725c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7260:	428a      	cmp	r2, r1
    7262:	d200      	bcs.n	7266 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    7264:	4611      	mov	r1, r2
    7266:	8069      	strh	r1, [r5, #2]
    7268:	8922      	ldrh	r2, [r4, #8]
    726a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    726e:	428a      	cmp	r2, r1
    7270:	d200      	bcs.n	7274 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    7272:	4611      	mov	r1, r2
    7274:	f640 0248 	movw	r2, #2120	; 0x848
    7278:	80a9      	strh	r1, [r5, #4]
    727a:	4291      	cmp	r1, r2
    727c:	d300      	bcc.n	7280 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    727e:	4611      	mov	r1, r2
    7280:	80a9      	strh	r1, [r5, #4]
    7282:	4290      	cmp	r0, r2
    7284:	d200      	bcs.n	7288 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    7286:	4602      	mov	r2, r0
    7288:	812a      	strh	r2, [r5, #8]
    728a:	702f      	strb	r7, [r5, #0]
    728c:	f885 8001 	strb.w	r8, [r5, #1]
    7290:	4630      	mov	r0, r6
    7292:	e7cd      	b.n	7230 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7294:	b51c      	push	{r2, r3, r4, lr}
    7296:	490c      	ldr	r1, [pc, #48]	; (72c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    7298:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    729c:	e9cd 0100 	strd	r0, r1, [sp]
    72a0:	e00a      	b.n	72b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72a2:	9c00      	ldr	r4, [sp, #0]
    72a4:	4620      	mov	r0, r4
    72a6:	f007 fe71 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    72aa:	b128      	cbz	r0, 72b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72ac:	4620      	mov	r0, r4
    72ae:	f007 fcd6 	bl	ec5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    72b2:	b108      	cbz	r0, 72b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    72b4:	2001      	movs	r0, #1
    72b6:	bd1c      	pop	{r2, r3, r4, pc}
    72b8:	4668      	mov	r0, sp
    72ba:	f7f9 fee9 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72be:	2800      	cmp	r0, #0
    72c0:	d0ef      	beq.n	72a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    72c2:	2000      	movs	r0, #0
    72c4:	bd1c      	pop	{r2, r3, r4, pc}
    72c6:	0000      	.short	0x0000
    72c8:	00007304 	.word	0x00007304
    72cc:	b510      	push	{r4, lr}
    72ce:	4604      	mov	r4, r0
    72d0:	88c1      	ldrh	r1, [r0, #6]
    72d2:	8880      	ldrh	r0, [r0, #4]
    72d4:	f009 f8e6 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    72d8:	2800      	cmp	r0, #0
    72da:	d10f      	bne.n	72fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    72dc:	8861      	ldrh	r1, [r4, #2]
    72de:	8820      	ldrh	r0, [r4, #0]
    72e0:	f009 f8e0 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    72e4:	2800      	cmp	r0, #0
    72e6:	d109      	bne.n	72fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    72e8:	4805      	ldr	r0, [pc, #20]	; (7300 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    72ea:	88a1      	ldrh	r1, [r4, #4]
    72ec:	8081      	strh	r1, [r0, #4]
    72ee:	8821      	ldrh	r1, [r4, #0]
    72f0:	8001      	strh	r1, [r0, #0]
    72f2:	88e1      	ldrh	r1, [r4, #6]
    72f4:	80c1      	strh	r1, [r0, #6]
    72f6:	8861      	ldrh	r1, [r4, #2]
    72f8:	8041      	strh	r1, [r0, #2]
    72fa:	2000      	movs	r0, #0
    72fc:	bd10      	pop	{r4, pc}
    72fe:	0000      	.short	0x0000
    7300:	2000029c 	.word	0x2000029c
    7304:	00000000 	.word	0x00000000
    7308:	00010000 	.word	0x00010000
    730c:	00000000 	.word	0x00000000
    7310:	00010000 	.word	0x00010000
    7314:	0d10770d 	.word	0x0d10770d
    7318:	10770059 	.word	0x10770059
    731c:	00000000 	.word	0x00000000
    7320:	00010000 	.word	0x00010000
    7324:	00000000 	.word	0x00000000
    7328:	00010000 	.word	0x00010000

0000732c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    732c:	b510      	push	{r4, lr}
    732e:	f7fb fc77 	bl	2c20 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7332:	4c05      	ldr	r4, [pc, #20]	; (7348 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7334:	6860      	ldr	r0, [r4, #4]
    7336:	f009 f9c4 	bl	106c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    733a:	f008 ff58 	bl	101ee <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    733e:	f7fb fe1d 	bl	2f7c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7342:	2001      	movs	r0, #1
    7344:	7020      	strb	r0, [r4, #0]
    7346:	bd10      	pop	{r4, pc}
    7348:	200002a4 	.word	0x200002a4

0000734c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    734c:	4801      	ldr	r0, [pc, #4]	; (7354 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    734e:	7800      	ldrb	r0, [r0, #0]
    7350:	4770      	bx	lr
    7352:	0000      	.short	0x0000
    7354:	200002a4 	.word	0x200002a4

00007358 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7358:	b510      	push	{r4, lr}
    735a:	4c06      	ldr	r4, [pc, #24]	; (7374 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    735c:	68a0      	ldr	r0, [r4, #8]
    735e:	f009 f9b0 	bl	106c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7362:	68e0      	ldr	r0, [r4, #12]
    7364:	f009 f9ad 	bl	106c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3de>
    7368:	f008 ffab 	bl	102c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    736c:	2000      	movs	r0, #0
    736e:	7020      	strb	r0, [r4, #0]
    7370:	bd10      	pop	{r4, pc}
    7372:	0000      	.short	0x0000
    7374:	200002a4 	.word	0x200002a4

00007378 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7378:	b510      	push	{r4, lr}
    737a:	4905      	ldr	r1, [pc, #20]	; (7390 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    737c:	4805      	ldr	r0, [pc, #20]	; (7394 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    737e:	f009 f993 	bl	106a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    7382:	4804      	ldr	r0, [pc, #16]	; (7394 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7388:	4903      	ldr	r1, [pc, #12]	; (7398 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    738a:	1d00      	adds	r0, r0, #4
    738c:	f009 b98c 	b.w	106a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    7390:	200002b4 	.word	0x200002b4
    7394:	200002a8 	.word	0x200002a8
    7398:	200002bc 	.word	0x200002bc

0000739c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    739c:	b510      	push	{r4, lr}
    739e:	4908      	ldr	r1, [pc, #32]	; (73c0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    73a0:	4808      	ldr	r0, [pc, #32]	; (73c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73a2:	f009 f981 	bl	106a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73a6:	4807      	ldr	r0, [pc, #28]	; (73c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73a8:	4907      	ldr	r1, [pc, #28]	; (73c8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    73aa:	1d00      	adds	r0, r0, #4
    73ac:	f009 f97c 	bl	106a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73b0:	4804      	ldr	r0, [pc, #16]	; (73c4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    73b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73b6:	4905      	ldr	r1, [pc, #20]	; (73cc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    73b8:	3008      	adds	r0, #8
    73ba:	f009 b975 	b.w	106a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c4>
    73be:	0000      	.short	0x0000
    73c0:	200002cc 	.word	0x200002cc
    73c4:	200002a8 	.word	0x200002a8
    73c8:	200002d4 	.word	0x200002d4
    73cc:	200002c4 	.word	0x200002c4

000073d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    73d0:	4801      	ldr	r0, [pc, #4]	; (73d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    73d2:	7840      	ldrb	r0, [r0, #1]
    73d4:	4770      	bx	lr
    73d6:	0000      	.short	0x0000
    73d8:	200002a4 	.word	0x200002a4
    73dc:	b510      	push	{r4, lr}
    73de:	f7fc f9b3 	bl	3748 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    73e2:	f7fd f87d 	bl	44e0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    73e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73ea:	4801      	ldr	r0, [pc, #4]	; (73f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    73ec:	f7fc b992 	b.w	3714 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    73f0:	20001690 	.word	0x20001690
    73f4:	490a      	ldr	r1, [pc, #40]	; (7420 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    73f6:	b510      	push	{r4, lr}
    73f8:	2001      	movs	r0, #1
    73fa:	7048      	strb	r0, [r1, #1]
    73fc:	f7fc f9d4 	bl	37a8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7400:	f7fd fd84 	bl	4f0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7404:	f006 fb5a 	bl	dabc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7408:	4906      	ldr	r1, [pc, #24]	; (7424 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    740a:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    740e:	f7fa fa71 	bl	18f4 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    7412:	2000      	movs	r0, #0
    7414:	f006 f9a0 	bl	d758 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    741c:	f7fb bc06 	b.w	2c2c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7420:	200002a4 	.word	0x200002a4
    7424:	20001792 	.word	0x20001792

00007428 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7428:	4a04      	ldr	r2, [pc, #16]	; (743c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    742a:	08c1      	lsrs	r1, r0, #3
    742c:	f000 0307 	and.w	r3, r0, #7
    7430:	2001      	movs	r0, #1
    7432:	4098      	lsls	r0, r3
    7434:	5c53      	ldrb	r3, [r2, r1]
    7436:	4303      	orrs	r3, r0
    7438:	5453      	strb	r3, [r2, r1]
    743a:	4770      	bx	lr
    743c:	20000020 	.word	0x20000020

00007440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7440:	4901      	ldr	r1, [pc, #4]	; (7448 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7442:	e9d1 0100 	ldrd	r0, r1, [r1]
    7446:	4770      	bx	lr
    7448:	20000020 	.word	0x20000020

0000744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    744c:	4806      	ldr	r0, [pc, #24]	; (7468 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    744e:	8801      	ldrh	r1, [r0, #0]
    7450:	7900      	ldrb	r0, [r0, #4]
    7452:	0602      	lsls	r2, r0, #24
    7454:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7458:	f000 0001 	and.w	r0, r0, #1
    745c:	1800      	adds	r0, r0, r0
    745e:	b2c0      	uxtb	r0, r0
    7460:	f040 0001 	orr.w	r0, r0, #1
    7464:	4770      	bx	lr
    7466:	0000      	.short	0x0000
    7468:	20000020 	.word	0x20000020

0000746c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    746c:	b510      	push	{r4, lr}
    746e:	f004 fee7 	bl	c240 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7472:	2200      	movs	r2, #0
    7474:	4b08      	ldr	r3, [pc, #32]	; (7498 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7476:	4611      	mov	r1, r2
    7478:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    747c:	4284      	cmp	r4, r0
    747e:	d303      	bcc.n	7488 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7480:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7484:	7882      	ldrb	r2, [r0, #2]
    7486:	e003      	b.n	7490 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7488:	1c49      	adds	r1, r1, #1
    748a:	b2c9      	uxtb	r1, r1
    748c:	290c      	cmp	r1, #12
    748e:	d3f3      	bcc.n	7478 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7490:	4802      	ldr	r0, [pc, #8]	; (749c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7492:	7002      	strb	r2, [r0, #0]
    7494:	bd10      	pop	{r4, pc}
    7496:	0000      	.short	0x0000
    7498:	00010714 	.word	0x00010714
    749c:	20000377 	.word	0x20000377

000074a0 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    74a0:	b570      	push	{r4, r5, r6, lr}
    74a2:	6845      	ldr	r5, [r0, #4]
    74a4:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    74a8:	8828      	ldrh	r0, [r5, #0]
    74aa:	f826 0902 	strh.w	r0, [r6], #-2
    74ae:	f505 7498 	add.w	r4, r5, #304	; 0x130
    74b2:	7031      	strb	r1, [r6, #0]
    74b4:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    74b8:	f009 f960 	bl	1077c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74bc:	7130      	strb	r0, [r6, #4]
    74be:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    74c2:	f009 f95b 	bl	1077c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    74c6:	f806 0f05 	strb.w	r0, [r6, #5]!
    74ca:	2202      	movs	r2, #2
    74cc:	4903      	ldr	r1, [pc, #12]	; (74dc <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    74ce:	f1a6 000f 	sub.w	r0, r6, #15
    74d2:	f006 ff97 	bl	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    74d6:	2000      	movs	r0, #0
    74d8:	7320      	strb	r0, [r4, #12]
    74da:	bd70      	pop	{r4, r5, r6, pc}
    74dc:	00010769 	.word	0x00010769

000074e0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    74e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    74e2:	460e      	mov	r6, r1
    74e4:	4604      	mov	r4, r0
    74e6:	f7fb fa63 	bl	29b0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    74ea:	2500      	movs	r5, #0
    74ec:	b320      	cbz	r0, 7538 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    74ee:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    74f2:	a902      	add	r1, sp, #8
    74f4:	8820      	ldrh	r0, [r4, #0]
    74f6:	f8ad 0000 	strh.w	r0, [sp]
    74fa:	f006 fbb0 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    74fe:	b108      	cbz	r0, 7504 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7500:	2126      	movs	r1, #38	; 0x26
    7502:	e010      	b.n	7526 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7504:	9803      	ldr	r0, [sp, #12]
    7506:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    750a:	f88d 1002 	strb.w	r1, [sp, #2]
    750e:	7841      	ldrb	r1, [r0, #1]
    7510:	f88d 1003 	strb.w	r1, [sp, #3]
    7514:	8840      	ldrh	r0, [r0, #2]
    7516:	f8ad 0004 	strh.w	r0, [sp, #4]
    751a:	2102      	movs	r1, #2
    751c:	4668      	mov	r0, sp
    751e:	f008 fe68 	bl	101f2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7522:	b118      	cbz	r0, 752c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7524:	213c      	movs	r1, #60	; 0x3c
    7526:	207e      	movs	r0, #126	; 0x7e
    7528:	f7f9 fa32 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    752c:	f8cd 5000 	str.w	r5, [sp]
    7530:	f8bd 0000 	ldrh.w	r0, [sp]
    7534:	b004      	add	sp, #16
    7536:	bd70      	pop	{r4, r5, r6, pc}
    7538:	201c      	movs	r0, #28
    753a:	7030      	strb	r0, [r6, #0]
    753c:	7075      	strb	r5, [r6, #1]
    753e:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7542:	6070      	str	r0, [r6, #4]
    7544:	4801      	ldr	r0, [pc, #4]	; (754c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7546:	6800      	ldr	r0, [r0, #0]
    7548:	9000      	str	r0, [sp, #0]
    754a:	e7f1      	b.n	7530 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    754c:	00007550 	.word	0x00007550
    7550:	00000004 	.word	0x00000004

00007554 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7554:	b570      	push	{r4, r5, r6, lr}
    7556:	4605      	mov	r5, r0
    7558:	4616      	mov	r6, r2
    755a:	460c      	mov	r4, r1
    755c:	2002      	movs	r0, #2
    755e:	f000 f9b7 	bl	78d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7562:	4906      	ldr	r1, [pc, #24]	; (757c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7564:	2001      	movs	r0, #1
    7566:	1ef6      	subs	r6, r6, #3
    7568:	7008      	strb	r0, [r1, #0]
    756a:	4805      	ldr	r0, [pc, #20]	; (7580 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    756c:	6006      	str	r6, [r0, #0]
    756e:	4804      	ldr	r0, [pc, #16]	; (7580 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7570:	3808      	subs	r0, #8
    7572:	6005      	str	r5, [r0, #0]
    7574:	1f00      	subs	r0, r0, #4
    7576:	6004      	str	r4, [r0, #0]
    7578:	bd70      	pop	{r4, r5, r6, pc}
    757a:	0000      	.short	0x0000
    757c:	20000378 	.word	0x20000378
    7580:	4000f510 	.word	0x4000f510

00007584 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7584:	b510      	push	{r4, lr}
    7586:	4c0c      	ldr	r4, [pc, #48]	; (75b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7588:	7820      	ldrb	r0, [r4, #0]
    758a:	b180      	cbz	r0, 75ae <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    758c:	490b      	ldr	r1, [pc, #44]	; (75bc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    758e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7592:	6008      	str	r0, [r1, #0]
    7594:	f000 f86a 	bl	766c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7598:	2100      	movs	r1, #0
    759a:	b120      	cbz	r0, 75a6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    759c:	2001      	movs	r0, #1
    759e:	7060      	strb	r0, [r4, #1]
    75a0:	4807      	ldr	r0, [pc, #28]	; (75c0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    75a2:	6800      	ldr	r0, [r0, #0]
    75a4:	e001      	b.n	75aa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    75a6:	7061      	strb	r1, [r4, #1]
    75a8:	2010      	movs	r0, #16
    75aa:	70a0      	strb	r0, [r4, #2]
    75ac:	7021      	strb	r1, [r4, #0]
    75ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    75b2:	2000      	movs	r0, #0
    75b4:	f000 b98c 	b.w	78d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75b8:	20000378 	.word	0x20000378
    75bc:	4001f508 	.word	0x4001f508
    75c0:	4000f400 	.word	0x4000f400

000075c4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    75c4:	b510      	push	{r4, lr}
    75c6:	2002      	movs	r0, #2
    75c8:	f000 f982 	bl	78d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    75cc:	4904      	ldr	r1, [pc, #16]	; (75e0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    75ce:	2001      	movs	r0, #1
    75d0:	7008      	strb	r0, [r1, #0]
    75d2:	f000 f859 	bl	7688 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    75d6:	4903      	ldr	r1, [pc, #12]	; (75e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    75d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    75dc:	6008      	str	r0, [r1, #0]
    75de:	bd10      	pop	{r4, pc}
    75e0:	20000378 	.word	0x20000378
    75e4:	4001f504 	.word	0x4001f504

000075e8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    75e8:	4803      	ldr	r0, [pc, #12]	; (75f8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    75ea:	2100      	movs	r1, #0
    75ec:	7001      	strb	r1, [r0, #0]
    75ee:	7041      	strb	r1, [r0, #1]
    75f0:	2110      	movs	r1, #16
    75f2:	7081      	strb	r1, [r0, #2]
    75f4:	4770      	bx	lr
    75f6:	0000      	.short	0x0000
    75f8:	20000378 	.word	0x20000378

000075fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    75fc:	4807      	ldr	r0, [pc, #28]	; (761c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    75fe:	b510      	push	{r4, lr}
    7600:	7801      	ldrb	r1, [r0, #0]
    7602:	b141      	cbz	r1, 7616 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7604:	f000 f832 	bl	766c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7608:	b118      	cbz	r0, 7612 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    760a:	4805      	ldr	r0, [pc, #20]	; (7620 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    760c:	6800      	ldr	r0, [r0, #0]
    760e:	b2c0      	uxtb	r0, r0
    7610:	bd10      	pop	{r4, pc}
    7612:	2010      	movs	r0, #16
    7614:	bd10      	pop	{r4, pc}
    7616:	7880      	ldrb	r0, [r0, #2]
    7618:	bd10      	pop	{r4, pc}
    761a:	0000      	.short	0x0000
    761c:	20000378 	.word	0x20000378
    7620:	4000f400 	.word	0x4000f400

00007624 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7624:	4808      	ldr	r0, [pc, #32]	; (7648 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7626:	b510      	push	{r4, lr}
    7628:	7801      	ldrb	r1, [r0, #0]
    762a:	b159      	cbz	r1, 7644 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    762c:	4807      	ldr	r0, [pc, #28]	; (764c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    762e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7632:	b128      	cbz	r0, 7640 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7634:	f000 f80c 	bl	7650 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7638:	2800      	cmp	r0, #0
    763a:	d000      	beq.n	763e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    763c:	2001      	movs	r0, #1
    763e:	bd10      	pop	{r4, pc}
    7640:	2002      	movs	r0, #2
    7642:	bd10      	pop	{r4, pc}
    7644:	7840      	ldrb	r0, [r0, #1]
    7646:	bd10      	pop	{r4, pc}
    7648:	20000378 	.word	0x20000378
    764c:	4000f000 	.word	0x4000f000
    7650:	4805      	ldr	r0, [pc, #20]	; (7668 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7652:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7656:	b111      	cbz	r1, 765e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7658:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    765c:	b108      	cbz	r0, 7662 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    765e:	2000      	movs	r0, #0
    7660:	4770      	bx	lr
    7662:	2001      	movs	r0, #1
    7664:	4770      	bx	lr
    7666:	0000      	.short	0x0000
    7668:	4000f000 	.word	0x4000f000
    766c:	4805      	ldr	r0, [pc, #20]	; (7684 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    766e:	b510      	push	{r4, lr}
    7670:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7674:	b120      	cbz	r0, 7680 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7676:	f7ff ffeb 	bl	7650 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    767a:	b108      	cbz	r0, 7680 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    767c:	2001      	movs	r0, #1
    767e:	bd10      	pop	{r4, pc}
    7680:	2000      	movs	r0, #0
    7682:	bd10      	pop	{r4, pc}
    7684:	4000f000 	.word	0x4000f000
    7688:	4804      	ldr	r0, [pc, #16]	; (769c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    768a:	2100      	movs	r1, #0
    768c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7690:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7694:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7698:	4770      	bx	lr
    769a:	0000      	.short	0x0000
    769c:	4000f000 	.word	0x4000f000

000076a0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    76a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76a4:	4604      	mov	r4, r0
    76a6:	461e      	mov	r6, r3
    76a8:	4690      	mov	r8, r2
    76aa:	460f      	mov	r7, r1
    76ac:	2001      	movs	r0, #1
    76ae:	f000 f90f 	bl	78d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    76b2:	4d1e      	ldr	r5, [pc, #120]	; (772c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    76b4:	481e      	ldr	r0, [pc, #120]	; (7730 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    76b6:	f004 0103 	and.w	r1, r4, #3
    76ba:	712e      	strb	r6, [r5, #4]
    76bc:	6800      	ldr	r0, [r0, #0]
    76be:	0432      	lsls	r2, r6, #16
    76c0:	f361 0007 	bfi	r0, r1, #0, #8
    76c4:	f366 200f 	bfi	r0, r6, #8, #8
    76c8:	0c00      	lsrs	r0, r0, #16
    76ca:	4e1a      	ldr	r6, [pc, #104]	; (7734 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    76cc:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    76d0:	4308      	orrs	r0, r1
    76d2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    76d6:	4818      	ldr	r0, [pc, #96]	; (7738 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    76d8:	6007      	str	r7, [r0, #0]
    76da:	f009 fb2a 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    76de:	b938      	cbnz	r0, 76f0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    76e0:	4815      	ldr	r0, [pc, #84]	; (7738 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    76e2:	3010      	adds	r0, #16
    76e4:	6801      	ldr	r1, [r0, #0]
    76e6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    76ea:	ea41 0108 	orr.w	r1, r1, r8
    76ee:	6001      	str	r1, [r0, #0]
    76f0:	f000 f8e4 	bl	78bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    76f4:	b10c      	cbz	r4, 76fa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    76f6:	2c04      	cmp	r4, #4
    76f8:	d107      	bne.n	770a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    76fa:	4811      	ldr	r0, [pc, #68]	; (7740 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    76fc:	490d      	ldr	r1, [pc, #52]	; (7734 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    76fe:	4a0f      	ldr	r2, [pc, #60]	; (773c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7700:	1d09      	adds	r1, r1, #4
    7702:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7706:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    770a:	2001      	movs	r0, #1
    770c:	7068      	strb	r0, [r5, #1]
    770e:	70ec      	strb	r4, [r5, #3]
    7710:	b11c      	cbz	r4, 771a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7712:	2c01      	cmp	r4, #1
    7714:	d001      	beq.n	771a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7716:	2c02      	cmp	r4, #2
    7718:	d106      	bne.n	7728 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    771a:	7028      	strb	r0, [r5, #0]
    771c:	2100      	movs	r1, #0
    771e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7722:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7726:	6030      	str	r0, [r6, #0]
    7728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    772c:	2000037b 	.word	0x2000037b
    7730:	000078cc 	.word	0x000078cc
    7734:	4000f000 	.word	0x4000f000
    7738:	4000f508 	.word	0x4000f508
    773c:	4000f100 	.word	0x4000f100
    7740:	4001f088 	.word	0x4001f088

00007744 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7744:	b570      	push	{r4, r5, r6, lr}
    7746:	4a1c      	ldr	r2, [pc, #112]	; (77b8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7748:	7853      	ldrb	r3, [r2, #1]
    774a:	b1a3      	cbz	r3, 7776 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    774c:	4b1b      	ldr	r3, [pc, #108]	; (77bc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    774e:	6019      	str	r1, [r3, #0]
    7750:	1d19      	adds	r1, r3, #4
    7752:	6008      	str	r0, [r1, #0]
    7754:	2501      	movs	r5, #1
    7756:	7095      	strb	r5, [r2, #2]
    7758:	4610      	mov	r0, r2
    775a:	78d6      	ldrb	r6, [r2, #3]
    775c:	4b18      	ldr	r3, [pc, #96]	; (77c0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    775e:	7800      	ldrb	r0, [r0, #0]
    7760:	4c18      	ldr	r4, [pc, #96]	; (77c4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7762:	2100      	movs	r1, #0
    7764:	b156      	cbz	r6, 777c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7766:	2e04      	cmp	r6, #4
    7768:	d01b      	beq.n	77a2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    776a:	b308      	cbz	r0, 77b0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    776c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7770:	0668      	lsls	r0, r5, #25
    7772:	6018      	str	r0, [r3, #0]
    7774:	bd70      	pop	{r4, r5, r6, pc}
    7776:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    777a:	e01a      	b.n	77b2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    777c:	b178      	cbz	r0, 779e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    777e:	4620      	mov	r0, r4
    7780:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7784:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7788:	601e      	str	r6, [r3, #0]
    778a:	1271      	asrs	r1, r6, #9
    778c:	f009 f81e 	bl	107cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7790:	2800      	cmp	r0, #0
    7792:	d0ef      	beq.n	7774 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7794:	6065      	str	r5, [r4, #4]
    7796:	480a      	ldr	r0, [pc, #40]	; (77c0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7798:	1d00      	adds	r0, r0, #4
    779a:	6006      	str	r6, [r0, #0]
    779c:	bd70      	pop	{r4, r5, r6, pc}
    779e:	21d5      	movs	r1, #213	; 0xd5
    77a0:	e007      	b.n	77b2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    77a2:	7015      	strb	r5, [r2, #0]
    77a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    77a8:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    77ac:	6025      	str	r5, [r4, #0]
    77ae:	bd70      	pop	{r4, r5, r6, pc}
    77b0:	21e8      	movs	r1, #232	; 0xe8
    77b2:	203c      	movs	r0, #60	; 0x3c
    77b4:	f7f9 f8ec 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77b8:	2000037b 	.word	0x2000037b
    77bc:	4000f50c 	.word	0x4000f50c
    77c0:	4001f504 	.word	0x4001f504
    77c4:	4000f000 	.word	0x4000f000

000077c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    77c8:	b570      	push	{r4, r5, r6, lr}
    77ca:	4d05      	ldr	r5, [pc, #20]	; (77e0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    77cc:	2400      	movs	r4, #0
    77ce:	7828      	ldrb	r0, [r5, #0]
    77d0:	b110      	cbz	r0, 77d8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    77d2:	f000 f873 	bl	78bc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    77d6:	702c      	strb	r4, [r5, #0]
    77d8:	706c      	strb	r4, [r5, #1]
    77da:	70ac      	strb	r4, [r5, #2]
    77dc:	bd70      	pop	{r4, r5, r6, pc}
    77de:	0000      	.short	0x0000
    77e0:	2000037b 	.word	0x2000037b

000077e4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    77e4:	4802      	ldr	r0, [pc, #8]	; (77f0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    77e6:	2100      	movs	r1, #0
    77e8:	7001      	strb	r1, [r0, #0]
    77ea:	7041      	strb	r1, [r0, #1]
    77ec:	7081      	strb	r1, [r0, #2]
    77ee:	4770      	bx	lr
    77f0:	2000037b 	.word	0x2000037b

000077f4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    77f4:	480b      	ldr	r0, [pc, #44]	; (7824 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    77f6:	b510      	push	{r4, lr}
    77f8:	7800      	ldrb	r0, [r0, #0]
    77fa:	b158      	cbz	r0, 7814 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    77fc:	f44f 7182 	mov.w	r1, #260	; 0x104
    7800:	4809      	ldr	r0, [pc, #36]	; (7828 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7802:	f008 ffe3 	bl	107cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7806:	b140      	cbz	r0, 781a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7808:	4808      	ldr	r0, [pc, #32]	; (782c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    780a:	6800      	ldr	r0, [r0, #0]
    780c:	2800      	cmp	r0, #0
    780e:	d000      	beq.n	7812 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7810:	2001      	movs	r0, #1
    7812:	bd10      	pop	{r4, pc}
    7814:	f240 215e 	movw	r1, #606	; 0x25e
    7818:	e001      	b.n	781e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    781a:	f240 215f 	movw	r1, #607	; 0x25f
    781e:	203c      	movs	r0, #60	; 0x3c
    7820:	f7f9 f8b6 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7824:	2000037b 	.word	0x2000037b
    7828:	4000f000 	.word	0x4000f000
    782c:	4000f400 	.word	0x4000f400

00007830 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7830:	4801      	ldr	r0, [pc, #4]	; (7838 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7832:	2101      	movs	r1, #1
    7834:	6081      	str	r1, [r0, #8]
    7836:	4770      	bx	lr
    7838:	4000f000 	.word	0x4000f000

0000783c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7840:	481b      	ldr	r0, [pc, #108]	; (78b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7842:	7800      	ldrb	r0, [r0, #0]
    7844:	b1d8      	cbz	r0, 787e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7846:	f8df 806c 	ldr.w	r8, [pc, #108]	; 78b4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    784a:	f44f 7682 	mov.w	r6, #260	; 0x104
    784e:	4631      	mov	r1, r6
    7850:	4640      	mov	r0, r8
    7852:	f008 ffbb 	bl	107cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7856:	2800      	cmp	r0, #0
    7858:	d128      	bne.n	78ac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    785a:	2002      	movs	r0, #2
    785c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7860:	4c15      	ldr	r4, [pc, #84]	; (78b8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7862:	6820      	ldr	r0, [r4, #0]
    7864:	43c0      	mvns	r0, r0
    7866:	f340 1500 	sbfx	r5, r0, #4, #1
    786a:	6820      	ldr	r0, [r4, #0]
    786c:	f040 0010 	orr.w	r0, r0, #16
    7870:	6020      	str	r0, [r4, #0]
    7872:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7876:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    787a:	1c6d      	adds	r5, r5, #1
    787c:	e008      	b.n	7890 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    787e:	f240 216a 	movw	r1, #618	; 0x26a
    7882:	203c      	movs	r0, #60	; 0x3c
    7884:	f7f9 f884 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7888:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    788c:	f009 fa91 	bl	10db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7890:	4631      	mov	r1, r6
    7892:	4640      	mov	r0, r8
    7894:	f008 ff9a 	bl	107cc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7898:	2800      	cmp	r0, #0
    789a:	d0f5      	beq.n	7888 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    789c:	b91d      	cbnz	r5, 78a6 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    789e:	6820      	ldr	r0, [r4, #0]
    78a0:	f020 0010 	bic.w	r0, r0, #16
    78a4:	6020      	str	r0, [r4, #0]
    78a6:	2002      	movs	r0, #2
    78a8:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    78ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    78b0:	2000037b 	.word	0x2000037b
    78b4:	4000f000 	.word	0x4000f000
    78b8:	e000ed10 	.word	0xe000ed10
    78bc:	4902      	ldr	r1, [pc, #8]	; (78c8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    78be:	4801      	ldr	r0, [pc, #4]	; (78c4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    78c0:	6008      	str	r0, [r1, #0]
    78c2:	4770      	bx	lr
    78c4:	02020000 	.word	0x02020000
    78c8:	4001f508 	.word	0x4001f508
    78cc:	00010000 	.word	0x00010000

000078d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    78d0:	b510      	push	{r4, lr}
    78d2:	4604      	mov	r4, r0
    78d4:	f000 f820 	bl	7918 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    78d8:	2c00      	cmp	r4, #0
    78da:	d00e      	beq.n	78fa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    78dc:	4a0b      	ldr	r2, [pc, #44]	; (790c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    78de:	480b      	ldr	r0, [pc, #44]	; (790c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    78e0:	490b      	ldr	r1, [pc, #44]	; (7910 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    78e2:	3214      	adds	r2, #20
    78e4:	2c01      	cmp	r4, #1
    78e6:	d005      	beq.n	78f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    78e8:	2c02      	cmp	r4, #2
    78ea:	d007      	beq.n	78fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    78ec:	2182      	movs	r1, #130	; 0x82
    78ee:	203d      	movs	r0, #61	; 0x3d
    78f0:	f7f9 f84e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    78f4:	2302      	movs	r3, #2
    78f6:	6003      	str	r3, [r0, #0]
    78f8:	6011      	str	r1, [r2, #0]
    78fa:	bd10      	pop	{r4, pc}
    78fc:	2303      	movs	r3, #3
    78fe:	6003      	str	r3, [r0, #0]
    7900:	6011      	str	r1, [r2, #0]
    7902:	4904      	ldr	r1, [pc, #16]	; (7914 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7904:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7908:	6008      	str	r0, [r1, #0]
    790a:	bd10      	pop	{r4, pc}
    790c:	4000f500 	.word	0x4000f500
    7910:	20001894 	.word	0x20001894
    7914:	4001f504 	.word	0x4001f504
    7918:	4805      	ldr	r0, [pc, #20]	; (7930 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    791a:	b510      	push	{r4, lr}
    791c:	2100      	movs	r1, #0
    791e:	6001      	str	r1, [r0, #0]
    7920:	6001      	str	r1, [r0, #0]
    7922:	f7ff ff51 	bl	77c8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7926:	4903      	ldr	r1, [pc, #12]	; (7934 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7928:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    792c:	6008      	str	r0, [r1, #0]
    792e:	bd10      	pop	{r4, pc}
    7930:	4000f500 	.word	0x4000f500
    7934:	4001f508 	.word	0x4001f508

00007938 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7938:	4805      	ldr	r0, [pc, #20]	; (7950 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    793a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    793e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7942:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7946:	2100      	movs	r1, #0
    7948:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    794c:	4770      	bx	lr
    794e:	0000      	.short	0x0000
    7950:	40001000 	.word	0x40001000

00007954 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7954:	4904      	ldr	r1, [pc, #16]	; (7968 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7956:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    795a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    795e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7962:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7966:	4770      	bx	lr
    7968:	40001000 	.word	0x40001000

0000796c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    796c:	4902      	ldr	r1, [pc, #8]	; (7978 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    796e:	5c08      	ldrb	r0, [r1, r0]
    7970:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7974:	4770      	bx	lr
    7976:	0000      	.short	0x0000
    7978:	0000860e 	.word	0x0000860e

0000797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    797e:	4c24      	ldr	r4, [pc, #144]	; (7a10 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7980:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7984:	f010 0f10 	tst.w	r0, #16
    7988:	d001      	beq.n	798e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    798a:	2701      	movs	r7, #1
    798c:	e000      	b.n	7990 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    798e:	2700      	movs	r7, #0
    7990:	2010      	movs	r0, #16
    7992:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7996:	2002      	movs	r0, #2
    7998:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    799c:	481d      	ldr	r0, [pc, #116]	; (7a14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    799e:	2500      	movs	r5, #0
    79a0:	491d      	ldr	r1, [pc, #116]	; (7a18 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    79a2:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    79a6:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    79aa:	6008      	str	r0, [r1, #0]
    79ac:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    79b0:	f44f 7688 	mov.w	r6, #272	; 0x110
    79b4:	f010 0fff 	tst.w	r0, #255	; 0xff
    79b8:	d019      	beq.n	79ee <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    79ba:	20ff      	movs	r0, #255	; 0xff
    79bc:	f88d 0000 	strb.w	r0, [sp]
    79c0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    79c4:	2001      	movs	r0, #1
    79c6:	6120      	str	r0, [r4, #16]
    79c8:	e005      	b.n	79d6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    79ca:	bf00      	nop
    79cc:	f89d 0000 	ldrb.w	r0, [sp]
    79d0:	1e40      	subs	r0, r0, #1
    79d2:	f88d 0000 	strb.w	r0, [sp]
    79d6:	f89d 0000 	ldrb.w	r0, [sp]
    79da:	b128      	cbz	r0, 79e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    79dc:	4631      	mov	r1, r6
    79de:	4620      	mov	r0, r4
    79e0:	f008 ff23 	bl	1082a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    79e4:	2800      	cmp	r0, #0
    79e6:	d0f1      	beq.n	79cc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    79e8:	f89d 0000 	ldrb.w	r0, [sp]
    79ec:	b158      	cbz	r0, 7a06 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    79ee:	f000 fc23 	bl	8238 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    79f2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    79f6:	f000 fd8b 	bl	8510 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    79fa:	2f00      	cmp	r7, #0
    79fc:	d002      	beq.n	7a04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    79fe:	2010      	movs	r0, #16
    7a00:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a06:	f640 0194 	movw	r1, #2196	; 0x894
    7a0a:	203e      	movs	r0, #62	; 0x3e
    7a0c:	f7f8 ffc0 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a10:	40001000 	.word	0x40001000
    7a14:	20001460 	.word	0x20001460
    7a18:	4001f508 	.word	0x4001f508

00007a1c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a20:	4d18      	ldr	r5, [pc, #96]	; (7a84 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7a22:	4607      	mov	r7, r0
    7a24:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7a28:	07c2      	lsls	r2, r0, #31
    7a2a:	d00f      	beq.n	7a4c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7a2c:	4c16      	ldr	r4, [pc, #88]	; (7a88 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7a2e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7a32:	f042 0201 	orr.w	r2, r2, #1
    7a36:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7a3a:	f040 0002 	orr.w	r0, r0, #2
    7a3e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7a42:	2601      	movs	r6, #1
    7a44:	b13f      	cbz	r7, 7a56 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7a46:	2f01      	cmp	r7, #1
    7a48:	d00b      	beq.n	7a62 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7a4a:	e010      	b.n	7a6e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a4c:	f240 716f 	movw	r1, #1903	; 0x76f
    7a50:	203e      	movs	r0, #62	; 0x3e
    7a52:	f7f8 ff9d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a56:	4608      	mov	r0, r1
    7a58:	f000 fdb4 	bl	85c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7a5c:	726e      	strb	r6, [r5, #9]
    7a5e:	6026      	str	r6, [r4, #0]
    7a60:	e005      	b.n	7a6e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7a62:	4608      	mov	r0, r1
    7a64:	f000 fd94 	bl	8590 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7a68:	2002      	movs	r0, #2
    7a6a:	7268      	strb	r0, [r5, #9]
    7a6c:	6066      	str	r6, [r4, #4]
    7a6e:	4807      	ldr	r0, [pc, #28]	; (7a8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a70:	64c6      	str	r6, [r0, #76]	; 0x4c
    7a72:	4806      	ldr	r0, [pc, #24]	; (7a8c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7a74:	300c      	adds	r0, #12
    7a76:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7a7a:	4638      	mov	r0, r7
    7a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7a80:	f000 bd18 	b.w	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7a84:	20001460 	.word	0x20001460
    7a88:	40001000 	.word	0x40001000
    7a8c:	40008000 	.word	0x40008000

00007a90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a94:	4c2c      	ldr	r4, [pc, #176]	; (7b48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7a96:	0006      	movs	r6, r0
    7a98:	4d2c      	ldr	r5, [pc, #176]	; (7b4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7a9a:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    7a9e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7b50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7aa2:	f040 0002 	orr.w	r0, r0, #2
    7aa6:	4689      	mov	r9, r1
    7aa8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    7aac:	f04f 0700 	mov.w	r7, #0
    7ab0:	d002      	beq.n	7ab8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7ab2:	2e01      	cmp	r6, #1
    7ab4:	d020      	beq.n	7af8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7ab6:	e036      	b.n	7b26 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7ab8:	4608      	mov	r0, r1
    7aba:	f000 fd83 	bl	85c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7abe:	2001      	movs	r0, #1
    7ac0:	7260      	strb	r0, [r4, #9]
    7ac2:	79e0      	ldrb	r0, [r4, #7]
    7ac4:	2801      	cmp	r0, #1
    7ac6:	d105      	bne.n	7ad4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7ac8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7acc:	f040 0008 	orr.w	r0, r0, #8
    7ad0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7ad4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7ad6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7ada:	6260      	str	r0, [r4, #36]	; 0x24
    7adc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7ae0:	f8c8 0000 	str.w	r0, [r8]
    7ae4:	491b      	ldr	r1, [pc, #108]	; (7b54 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7ae6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7aee:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7af2:	fbb0 f7f1 	udiv	r7, r0, r1
    7af6:	e016      	b.n	7b26 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7af8:	4608      	mov	r0, r1
    7afa:	f000 fd49 	bl	8590 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7afe:	2002      	movs	r0, #2
    7b00:	7260      	strb	r0, [r4, #9]
    7b02:	79e0      	ldrb	r0, [r4, #7]
    7b04:	2801      	cmp	r0, #1
    7b06:	d105      	bne.n	7b14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7b08:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7b0c:	f040 0004 	orr.w	r0, r0, #4
    7b10:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7b14:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b16:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7b1a:	6260      	str	r0, [r4, #36]	; 0x24
    7b1c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7b20:	f8c8 0000 	str.w	r0, [r8]
    7b24:	2729      	movs	r7, #41	; 0x29
    7b26:	f000 fbf3 	bl	8310 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7b2a:	f008 fff8 	bl	10b1e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7b2e:	b120      	cbz	r0, 7b3a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7b30:	f7ff ff24 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7b34:	2000      	movs	r0, #0
    7b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b3a:	2100      	movs	r1, #0
    7b3c:	4630      	mov	r0, r6
    7b3e:	f000 fcb9 	bl	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7b42:	4638      	mov	r0, r7
    7b44:	e7f7      	b.n	7b36 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7b46:	0000      	.short	0x0000
    7b48:	20001460 	.word	0x20001460
    7b4c:	40001000 	.word	0x40001000
    7b50:	4001f504 	.word	0x4001f504
    7b54:	00008608 	.word	0x00008608

00007b58 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7b58:	4a02      	ldr	r2, [pc, #8]	; (7b64 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7b5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7b5c:	6003      	str	r3, [r0, #0]
    7b5e:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7b60:	6008      	str	r0, [r1, #0]
    7b62:	4770      	bx	lr
    7b64:	20001460 	.word	0x20001460

00007b68 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7b68:	b510      	push	{r4, lr}
    7b6a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7b6c:	4901      	ldr	r1, [pc, #4]	; (7b74 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7b6e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7b72:	bd10      	pop	{r4, pc}
    7b74:	20001450 	.word	0x20001450

00007b78 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7b78:	490f      	ldr	r1, [pc, #60]	; (7bb8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7b7a:	b510      	push	{r4, lr}
    7b7c:	69ca      	ldr	r2, [r1, #28]
    7b7e:	4282      	cmp	r2, r0
    7b80:	d302      	bcc.n	7b88 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7b82:	f640 1124 	movw	r1, #2340	; 0x924
    7b86:	e00b      	b.n	7ba0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7b88:	2201      	movs	r2, #1
    7b8a:	730a      	strb	r2, [r1, #12]
    7b8c:	6108      	str	r0, [r1, #16]
    7b8e:	490b      	ldr	r1, [pc, #44]	; (7bbc <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7b90:	644a      	str	r2, [r1, #68]	; 0x44
    7b92:	1d0a      	adds	r2, r1, #4
    7b94:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7b98:	4283      	cmp	r3, r0
    7b9a:	d304      	bcc.n	7ba6 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7b9c:	f640 112d 	movw	r1, #2349	; 0x92d
    7ba0:	203e      	movs	r0, #62	; 0x3e
    7ba2:	f7f8 fef5 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ba6:	2300      	movs	r3, #0
    7ba8:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7bac:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bb4:	f000 bc52 	b.w	845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    7bb8:	20001460 	.word	0x20001460
    7bbc:	40008000 	.word	0x40008000

00007bc0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7bc0:	b570      	push	{r4, r5, r6, lr}
    7bc2:	4c0f      	ldr	r4, [pc, #60]	; (7c00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7bc4:	4603      	mov	r3, r0
    7bc6:	2002      	movs	r0, #2
    7bc8:	7320      	strb	r0, [r4, #12]
    7bca:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7bce:	2096      	movs	r0, #150	; 0x96
    7bd0:	f894 1020 	ldrb.w	r1, [r4, #32]
    7bd4:	7d22      	ldrb	r2, [r4, #20]
    7bd6:	2d01      	cmp	r5, #1
    7bd8:	d00e      	beq.n	7bf8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7bda:	f000 fd51 	bl	8680 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7bde:	6120      	str	r0, [r4, #16]
    7be0:	4808      	ldr	r0, [pc, #32]	; (7c04 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7be2:	2100      	movs	r1, #0
    7be4:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7be8:	6921      	ldr	r1, [r4, #16]
    7bea:	69e0      	ldr	r0, [r4, #28]
    7bec:	4408      	add	r0, r1
    7bee:	4905      	ldr	r1, [pc, #20]	; (7c04 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7bf0:	1d09      	adds	r1, r1, #4
    7bf2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7bf6:	bd70      	pop	{r4, r5, r6, pc}
    7bf8:	f000 fd60 	bl	86bc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7bfc:	e7ef      	b.n	7bde <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7bfe:	0000      	.short	0x0000
    7c00:	20001460 	.word	0x20001460
    7c04:	40008000 	.word	0x40008000

00007c08 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    7c08:	b510      	push	{r4, lr}
    7c0a:	f009 f8ae 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7c0e:	2800      	cmp	r0, #0
    7c10:	d006      	beq.n	7c20 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7c12:	4804      	ldr	r0, [pc, #16]	; (7c24 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7c14:	6801      	ldr	r1, [r0, #0]
    7c16:	f021 0101 	bic.w	r1, r1, #1
    7c1a:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7c1e:	6001      	str	r1, [r0, #0]
    7c20:	bd10      	pop	{r4, pc}
    7c22:	0000      	.short	0x0000
    7c24:	40001774 	.word	0x40001774

00007c28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c2c:	2234      	movs	r2, #52	; 0x34
    7c2e:	2100      	movs	r1, #0
    7c30:	4813      	ldr	r0, [pc, #76]	; (7c80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7c32:	f009 f992 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c36:	f000 fc6b 	bl	8510 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7c3a:	f009 f84f 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7c3e:	4d11      	ldr	r5, [pc, #68]	; (7c84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c40:	4e10      	ldr	r6, [pc, #64]	; (7c84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c42:	2400      	movs	r4, #0
    7c44:	4f0f      	ldr	r7, [pc, #60]	; (7c84 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7c46:	3508      	adds	r5, #8
    7c48:	3610      	adds	r6, #16
    7c4a:	b928      	cbnz	r0, 7c58 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c4c:	f009 f85d 	bl	10d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7c50:	b910      	cbnz	r0, 7c58 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7c52:	f009 f864 	bl	10d1e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7c56:	b108      	cbz	r0, 7c5c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7c58:	2224      	movs	r2, #36	; 0x24
    7c5a:	e006      	b.n	7c6a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c5c:	f009 f89f 	bl	10d9e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7c60:	b910      	cbnz	r0, 7c68 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7c62:	f009 f892 	bl	10d8a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7c66:	b140      	cbz	r0, 7c7a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7c68:	2240      	movs	r2, #64	; 0x40
    7c6a:	21ff      	movs	r1, #255	; 0xff
    7c6c:	4638      	mov	r0, r7
    7c6e:	f009 f974 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c72:	602c      	str	r4, [r5, #0]
    7c74:	6034      	str	r4, [r6, #0]
    7c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c7a:	2238      	movs	r2, #56	; 0x38
    7c7c:	e7f5      	b.n	7c6a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7c7e:	0000      	.short	0x0000
    7c80:	20001460 	.word	0x20001460
    7c84:	40000e00 	.word	0x40000e00

00007c88 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7c88:	4801      	ldr	r0, [pc, #4]	; (7c90 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7c8a:	69c0      	ldr	r0, [r0, #28]
    7c8c:	4770      	bx	lr
    7c8e:	0000      	.short	0x0000
    7c90:	20001460 	.word	0x20001460

00007c94 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    7c94:	4801      	ldr	r0, [pc, #4]	; (7c9c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    7c96:	f890 0020 	ldrb.w	r0, [r0, #32]
    7c9a:	4770      	bx	lr
    7c9c:	20001460 	.word	0x20001460

00007ca0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7ca0:	4801      	ldr	r0, [pc, #4]	; (7ca8 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7ca2:	6980      	ldr	r0, [r0, #24]
    7ca4:	4770      	bx	lr
    7ca6:	0000      	.short	0x0000
    7ca8:	20001460 	.word	0x20001460

00007cac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7cac:	b510      	push	{r4, lr}
    7cae:	f000 fbe3 	bl	8478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7cb2:	f7ff fe63 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7cb6:	f004 fd5d 	bl	c774 <mpsl_fem_disable>
    7cba:	b130      	cbz	r0, 7cca <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7cbc:	1c40      	adds	r0, r0, #1
    7cbe:	d004      	beq.n	7cca <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7cc0:	f240 5165 	movw	r1, #1381	; 0x565
    7cc4:	203e      	movs	r0, #62	; 0x3e
    7cc6:	f7f8 fe63 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cca:	480f      	ldr	r0, [pc, #60]	; (7d08 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7ccc:	4a0f      	ldr	r2, [pc, #60]	; (7d0c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7cce:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7cd0:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7cd4:	6011      	str	r1, [r2, #0]
    7cd6:	2400      	movs	r4, #0
    7cd8:	6244      	str	r4, [r0, #36]	; 0x24
    7cda:	7304      	strb	r4, [r0, #12]
    7cdc:	61c4      	str	r4, [r0, #28]
    7cde:	6184      	str	r4, [r0, #24]
    7ce0:	f000 fbca 	bl	8478 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    7ce4:	480a      	ldr	r0, [pc, #40]	; (7d10 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7ce6:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7cea:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7cee:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7cf2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7cf6:	2001      	movs	r0, #1
    7cf8:	f008 fd86 	bl	10808 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7d00:	2001      	movs	r0, #1
    7d02:	f008 bd74 	b.w	107ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7d06:	0000      	.short	0x0000
    7d08:	20001460 	.word	0x20001460
    7d0c:	4001f508 	.word	0x4001f508
    7d10:	40008000 	.word	0x40008000

00007d14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7d14:	b570      	push	{r4, r5, r6, lr}
    7d16:	2001      	movs	r0, #1
    7d18:	f008 fd76 	bl	10808 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7d1c:	4c37      	ldr	r4, [pc, #220]	; (7dfc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    7d1e:	2000      	movs	r0, #0
    7d20:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d24:	2001      	movs	r0, #1
    7d26:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7d2a:	f009 f80e 	bl	10d4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7d2e:	4d34      	ldr	r5, [pc, #208]	; (7e00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d30:	b118      	cbz	r0, 7d3a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7d32:	6828      	ldr	r0, [r5, #0]
    7d34:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7d38:	6028      	str	r0, [r5, #0]
    7d3a:	f008 fffa 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7d3e:	b128      	cbz	r0, 7d4c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7d40:	6828      	ldr	r0, [r5, #0]
    7d42:	4930      	ldr	r1, [pc, #192]	; (7e04 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    7d44:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7d48:	4308      	orrs	r0, r1
    7d4a:	6028      	str	r0, [r5, #0]
    7d4c:	f009 f80d 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7d50:	b138      	cbz	r0, 7d62 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7d52:	482b      	ldr	r0, [pc, #172]	; (7e00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d54:	1d00      	adds	r0, r0, #4
    7d56:	6801      	ldr	r1, [r0, #0]
    7d58:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7d5c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7d60:	6001      	str	r1, [r0, #0]
    7d62:	4927      	ldr	r1, [pc, #156]	; (7e00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d64:	4828      	ldr	r0, [pc, #160]	; (7e08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    7d66:	313c      	adds	r1, #60	; 0x3c
    7d68:	6008      	str	r0, [r1, #0]
    7d6a:	f004 fd3d 	bl	c7e8 <mpsl_fem_device_config_254_apply_get>
    7d6e:	b140      	cbz	r0, 7d82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    7d74:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    7d78:	1c41      	adds	r1, r0, #1
    7d7a:	d002      	beq.n	7d82 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    7d7c:	4920      	ldr	r1, [pc, #128]	; (7e00 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    7d7e:	3110      	adds	r1, #16
    7d80:	6008      	str	r0, [r1, #0]
    7d82:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    7d86:	6e00      	ldr	r0, [r0, #96]	; 0x60
    7d88:	1c41      	adds	r1, r0, #1
    7d8a:	d004      	beq.n	7d96 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    7d8c:	491f      	ldr	r1, [pc, #124]	; (7e0c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    7d8e:	680a      	ldr	r2, [r1, #0]
    7d90:	f360 4217 	bfi	r2, r0, #16, #8
    7d94:	600a      	str	r2, [r1, #0]
    7d96:	f240 1103 	movw	r1, #259	; 0x103
    7d9a:	f240 605b 	movw	r0, #1627	; 0x65b
    7d9e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    7da2:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    7da6:	2001      	movs	r0, #1
    7da8:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    7dac:	f000 f842 	bl	7e34 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    7db0:	f240 2001 	movw	r0, #513	; 0x201
    7db4:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    7db8:	2002      	movs	r0, #2
    7dba:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7dbe:	4914      	ldr	r1, [pc, #80]	; (7e10 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    7dc0:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    7dc4:	6008      	str	r0, [r1, #0]
    7dc6:	4913      	ldr	r1, [pc, #76]	; (7e14 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    7dc8:	2000      	movs	r0, #0
    7dca:	8608      	strh	r0, [r1, #48]	; 0x30
    7dcc:	3110      	adds	r1, #16
    7dce:	61c8      	str	r0, [r1, #28]
    7dd0:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    7dd4:	2001      	movs	r0, #1
    7dd6:	f008 fd0a 	bl	107ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7dda:	2010      	movs	r0, #16
    7ddc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7de0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    7de4:	2002      	movs	r0, #2
    7de6:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7dea:	480b      	ldr	r0, [pc, #44]	; (7e18 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    7dec:	6800      	ldr	r0, [r0, #0]
    7dee:	2800      	cmp	r0, #0
    7df0:	d002      	beq.n	7df8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    7df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7df6:	4700      	bx	r0
    7df8:	bd70      	pop	{r4, r5, r6, pc}
    7dfa:	0000      	.short	0x0000
    7dfc:	40001000 	.word	0x40001000
    7e00:	4000173c 	.word	0x4000173c
    7e04:	80000096 	.word	0x80000096
    7e08:	8900002c 	.word	0x8900002c
    7e0c:	4000158c 	.word	0x4000158c
    7e10:	4001f504 	.word	0x4001f504
    7e14:	20001450 	.word	0x20001450
    7e18:	200002dc 	.word	0x200002dc

00007e1c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    7e1c:	4901      	ldr	r1, [pc, #4]	; (7e24 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    7e1e:	7548      	strb	r0, [r1, #21]
    7e20:	4770      	bx	lr
    7e22:	0000      	.short	0x0000
    7e24:	20001460 	.word	0x20001460

00007e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    7e28:	4901      	ldr	r1, [pc, #4]	; (7e30 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    7e2a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7e2e:	4770      	bx	lr
    7e30:	0000865c 	.word	0x0000865c

00007e34 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    7e34:	4908      	ldr	r1, [pc, #32]	; (7e58 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    7e36:	b510      	push	{r4, lr}
    7e38:	7508      	strb	r0, [r1, #20]
    7e3a:	4908      	ldr	r1, [pc, #32]	; (7e5c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    7e3c:	2801      	cmp	r0, #1
    7e3e:	d006      	beq.n	7e4e <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    7e40:	2802      	cmp	r0, #2
    7e42:	d006      	beq.n	7e52 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    7e44:	f640 516c 	movw	r1, #3436	; 0xd6c
    7e48:	203e      	movs	r0, #62	; 0x3e
    7e4a:	f7f8 fda1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e4e:	2003      	movs	r0, #3
    7e50:	e000      	b.n	7e54 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    7e52:	2004      	movs	r0, #4
    7e54:	6008      	str	r0, [r1, #0]
    7e56:	bd10      	pop	{r4, pc}
    7e58:	20001460 	.word	0x20001460
    7e5c:	40001510 	.word	0x40001510

00007e60 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    7e60:	4905      	ldr	r1, [pc, #20]	; (7e78 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    7e62:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    7e66:	4805      	ldr	r0, [pc, #20]	; (7e7c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    7e68:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    7e6c:	f041 0101 	orr.w	r1, r1, #1
    7e70:	7001      	strb	r1, [r0, #0]
    7e72:	f000 ba13 	b.w	829c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    7e76:	0000      	.short	0x0000
    7e78:	40001000 	.word	0x40001000
    7e7c:	20001460 	.word	0x20001460

00007e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    7e80:	4901      	ldr	r1, [pc, #4]	; (7e88 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    7e82:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    7e86:	4770      	bx	lr
    7e88:	00008668 	.word	0x00008668

00007e8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    7e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e90:	4e30      	ldr	r6, [pc, #192]	; (7f54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7e92:	4c31      	ldr	r4, [pc, #196]	; (7f58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    7e94:	4688      	mov	r8, r1
    7e96:	0007      	movs	r7, r0
    7e98:	4615      	mov	r5, r2
    7e9a:	f04f 0901 	mov.w	r9, #1
    7e9e:	d006      	beq.n	7eae <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    7ea0:	2f01      	cmp	r7, #1
    7ea2:	d012      	beq.n	7eca <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    7ea4:	f640 0117 	movw	r1, #2071	; 0x817
    7ea8:	203e      	movs	r0, #62	; 0x3e
    7eaa:	f7f8 fd71 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eae:	4610      	mov	r0, r2
    7eb0:	f000 fb88 	bl	85c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    7eb4:	4829      	ldr	r0, [pc, #164]	; (7f5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    7eb6:	f884 9009 	strb.w	r9, [r4, #9]
    7eba:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    7ebe:	4640      	mov	r0, r8
    7ec0:	f000 fb2e 	bl	8520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7ec4:	4605      	mov	r5, r0
    7ec6:	4630      	mov	r0, r6
    7ec8:	e00c      	b.n	7ee4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    7eca:	4610      	mov	r0, r2
    7ecc:	f000 fb60 	bl	8590 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    7ed0:	2002      	movs	r0, #2
    7ed2:	7260      	strb	r0, [r4, #9]
    7ed4:	f649 71ba 	movw	r1, #40890	; 0x9fba
    7ed8:	4640      	mov	r0, r8
    7eda:	f000 fb21 	bl	8520 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    7ede:	4605      	mov	r5, r0
    7ee0:	481c      	ldr	r0, [pc, #112]	; (7f54 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    7ee2:	1d00      	adds	r0, r0, #4
    7ee4:	f000 fada 	bl	849c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    7ee8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 7f60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    7eec:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    7ef0:	f8df a074 	ldr.w	sl, [pc, #116]	; 7f68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    7ef4:	481b      	ldr	r0, [pc, #108]	; (7f64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    7ef6:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    7efa:	2010      	movs	r0, #16
    7efc:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    7f00:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f02:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    7f06:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    7f0a:	6260      	str	r0, [r4, #36]	; 0x24
    7f0c:	4817      	ldr	r0, [pc, #92]	; (7f6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f0e:	6006      	str	r6, [r0, #0]
    7f10:	f000 f9fe 	bl	8310 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    7f14:	4641      	mov	r1, r8
    7f16:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    7f1a:	4811      	ldr	r0, [pc, #68]	; (7f60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    7f1c:	300c      	adds	r0, #12
    7f1e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    7f22:	42a8      	cmp	r0, r5
    7f24:	d310      	bcc.n	7f48 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    7f26:	2000      	movs	r0, #0
    7f28:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7f2c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    7f30:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f32:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    7f36:	6260      	str	r0, [r4, #36]	; 0x24
    7f38:	480c      	ldr	r0, [pc, #48]	; (7f6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    7f3a:	1d00      	adds	r0, r0, #4
    7f3c:	6006      	str	r6, [r0, #0]
    7f3e:	f7ff fd1d 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f42:	2000      	movs	r0, #0
    7f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7f48:	4629      	mov	r1, r5
    7f4a:	4638      	mov	r0, r7
    7f4c:	f000 fab2 	bl	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    7f50:	2001      	movs	r0, #1
    7f52:	e7f7      	b.n	7f44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    7f54:	40001000 	.word	0x40001000
    7f58:	20001460 	.word	0x20001460
    7f5c:	00008608 	.word	0x00008608
    7f60:	40008000 	.word	0x40008000
    7f64:	40008140 	.word	0x40008140
    7f68:	4001f098 	.word	0x4001f098
    7f6c:	4001f504 	.word	0x4001f504

00007f70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    7f70:	4b0d      	ldr	r3, [pc, #52]	; (7fa8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    7f72:	b510      	push	{r4, lr}
    7f74:	71d8      	strb	r0, [r3, #7]
    7f76:	729a      	strb	r2, [r3, #10]
    7f78:	b151      	cbz	r1, 7f90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    7f7a:	2002      	movs	r0, #2
    7f7c:	7218      	strb	r0, [r3, #8]
    7f7e:	2801      	cmp	r0, #1
    7f80:	d008      	beq.n	7f94 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    7f82:	2802      	cmp	r0, #2
    7f84:	d00f      	beq.n	7fa6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7f86:	f640 2144 	movw	r1, #2628	; 0xa44
    7f8a:	203e      	movs	r0, #62	; 0x3e
    7f8c:	f7f8 fd00 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f90:	2001      	movs	r0, #1
    7f92:	e7f3      	b.n	7f7c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    7f94:	7a58      	ldrb	r0, [r3, #9]
    7f96:	2802      	cmp	r0, #2
    7f98:	d105      	bne.n	7fa6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    7f9a:	f000 f943 	bl	8224 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    7f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa2:	f000 ba51 	b.w	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    7fa6:	bd10      	pop	{r4, pc}
    7fa8:	20001460 	.word	0x20001460

00007fac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    7fac:	4902      	ldr	r1, [pc, #8]	; (7fb8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    7fae:	2000      	movs	r0, #0
    7fb0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7fb4:	4770      	bx	lr
    7fb6:	0000      	.short	0x0000
    7fb8:	40008000 	.word	0x40008000

00007fbc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    7fbc:	4904      	ldr	r1, [pc, #16]	; (7fd0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    7fbe:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    7fc2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    7fc6:	4249      	negs	r1, r1
    7fc8:	7001      	strb	r1, [r0, #0]
    7fca:	2001      	movs	r0, #1
    7fcc:	4770      	bx	lr
    7fce:	0000      	.short	0x0000
    7fd0:	40001000 	.word	0x40001000

00007fd4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    7fd4:	4903      	ldr	r1, [pc, #12]	; (7fe4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    7fd6:	0e02      	lsrs	r2, r0, #24
    7fd8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    7fdc:	0200      	lsls	r0, r0, #8
    7fde:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    7fe2:	4770      	bx	lr
    7fe4:	40001000 	.word	0x40001000

00007fe8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    7fe8:	4901      	ldr	r1, [pc, #4]	; (7ff0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    7fea:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    7fee:	4770      	bx	lr
    7ff0:	40001000 	.word	0x40001000

00007ff4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    7ff4:	b510      	push	{r4, lr}
    7ff6:	2200      	movs	r2, #0
    7ff8:	2901      	cmp	r1, #1
    7ffa:	d006      	beq.n	800a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa>
    7ffc:	2902      	cmp	r1, #2
    7ffe:	d002      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    8000:	f240 21d2 	movw	r1, #722	; 0x2d2
    8004:	e014      	b.n	8030 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x30>
    8006:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    800a:	490b      	ldr	r1, [pc, #44]	; (8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>)
    800c:	430a      	orrs	r2, r1
    800e:	490b      	ldr	r1, [pc, #44]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    8010:	600a      	str	r2, [r1, #0]
    8012:	490b      	ldr	r1, [pc, #44]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    8014:	4308      	orrs	r0, r1
    8016:	4909      	ldr	r1, [pc, #36]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    8018:	1d09      	adds	r1, r1, #4
    801a:	6008      	str	r0, [r1, #0]
    801c:	4809      	ldr	r0, [pc, #36]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    801e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8022:	b2c0      	uxtb	r0, r0
    8024:	2803      	cmp	r0, #3
    8026:	d001      	beq.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    8028:	280b      	cmp	r0, #11
    802a:	d104      	bne.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
    802c:	f240 21ea 	movw	r1, #746	; 0x2ea
    8030:	203e      	movs	r0, #62	; 0x3e
    8032:	f7f8 fcad 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8036:	bd10      	pop	{r4, pc}
    8038:	00100108 	.word	0x00100108
    803c:	40001514 	.word	0x40001514
    8040:	02030000 	.word	0x02030000
    8044:	40001000 	.word	0x40001000

00008048 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8048:	4901      	ldr	r1, [pc, #4]	; (8050 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    804a:	7588      	strb	r0, [r1, #22]
    804c:	4770      	bx	lr
    804e:	0000      	.short	0x0000
    8050:	20001460 	.word	0x20001460

00008054 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8058:	4851      	ldr	r0, [pc, #324]	; (81a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    805a:	f04f 0a01 	mov.w	sl, #1
    805e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8062:	484f      	ldr	r0, [pc, #316]	; (81a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8064:	300c      	adds	r0, #12
    8066:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    806a:	f008 fd56 	bl	10b1a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    806e:	4c4d      	ldr	r4, [pc, #308]	; (81a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8070:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    8074:	f000 f8e0 	bl	8238 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8078:	494b      	ldr	r1, [pc, #300]	; (81a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    807a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    807c:	6008      	str	r0, [r1, #0]
    807e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 81ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    8082:	2000      	movs	r0, #0
    8084:	6260      	str	r0, [r4, #36]	; 0x24
    8086:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    808a:	f240 131d 	movw	r3, #285	; 0x11d
    808e:	439a      	bics	r2, r3
    8090:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8094:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8098:	f000 f94e 	bl	8338 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    809c:	4605      	mov	r5, r0
    809e:	4840      	ldr	r0, [pc, #256]	; (81a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80a0:	3008      	adds	r0, #8
    80a2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    80a6:	4e3e      	ldr	r6, [pc, #248]	; (81a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    80a8:	61e0      	str	r0, [r4, #28]
    80aa:	1d36      	adds	r6, r6, #4
    80ac:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    80b0:	61a0      	str	r0, [r4, #24]
    80b2:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    80b6:	7d21      	ldrb	r1, [r4, #20]
    80b8:	f884 1020 	strb.w	r1, [r4, #32]
    80bc:	7a61      	ldrb	r1, [r4, #9]
    80be:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    80c2:	46a1      	mov	r9, r4
    80c4:	2400      	movs	r4, #0
    80c6:	4639      	mov	r1, r7
    80c8:	4628      	mov	r0, r5
    80ca:	f000 f983 	bl	83d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    80ce:	b910      	cbnz	r0, 80d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    80d0:	f8c8 a010 	str.w	sl, [r8, #16]
    80d4:	2401      	movs	r4, #1
    80d6:	4f33      	ldr	r7, [pc, #204]	; (81a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    80d8:	07e8      	lsls	r0, r5, #31
    80da:	f1a7 0710 	sub.w	r7, r7, #16
    80de:	d120      	bne.n	8122 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    80e0:	07a8      	lsls	r0, r5, #30
    80e2:	d527      	bpl.n	8134 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    80e4:	f008 fe41 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    80e8:	b9f0      	cbnz	r0, 8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    80ea:	f008 fe2e 	bl	10d4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    80ee:	b9d8      	cbnz	r0, 8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    80f0:	482f      	ldr	r0, [pc, #188]	; (81b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    80f2:	6800      	ldr	r0, [r0, #0]
    80f4:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    80f8:	f3c0 6300 	ubfx	r3, r0, #24, #1
    80fc:	f000 020f 	and.w	r2, r0, #15
    8100:	f3c0 1103 	ubfx	r1, r0, #4, #4
    8104:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8108:	b173      	cbz	r3, 8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    810a:	b11a      	cbz	r2, 8114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    810c:	b111      	cbz	r1, 8114 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    810e:	f1b8 0f00 	cmp.w	r8, #0
    8112:	d109      	bne.n	8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8114:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8118:	2801      	cmp	r0, #1
    811a:	d105      	bne.n	8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    811c:	f1bc 0f03 	cmp.w	ip, #3
    8120:	d202      	bcs.n	8128 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    8122:	6838      	ldr	r0, [r7, #0]
    8124:	4780      	blx	r0
    8126:	e00e      	b.n	8146 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8128:	f345 0080 	sbfx	r0, r5, #2, #1
    812c:	4621      	mov	r1, r4
    812e:	1c40      	adds	r0, r0, #1
    8130:	687a      	ldr	r2, [r7, #4]
    8132:	e007      	b.n	8144 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    8134:	f015 0f28 	tst.w	r5, #40	; 0x28
    8138:	d005      	beq.n	8146 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    813a:	f345 1140 	sbfx	r1, r5, #5, #1
    813e:	68ba      	ldr	r2, [r7, #8]
    8140:	4620      	mov	r0, r4
    8142:	1c49      	adds	r1, r1, #1
    8144:	4790      	blx	r2
    8146:	06e8      	lsls	r0, r5, #27
    8148:	d501      	bpl.n	814e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    814a:	68f8      	ldr	r0, [r7, #12]
    814c:	4780      	blx	r0
    814e:	f899 1009 	ldrb.w	r1, [r9, #9]
    8152:	4648      	mov	r0, r9
    8154:	2902      	cmp	r1, #2
    8156:	d120      	bne.n	819a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8158:	7b01      	ldrb	r1, [r0, #12]
    815a:	2900      	cmp	r1, #0
    815c:	d01d      	beq.n	819a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    815e:	2902      	cmp	r1, #2
    8160:	d004      	beq.n	816c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    8162:	2901      	cmp	r1, #1
    8164:	d009      	beq.n	817a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    8166:	f640 4156 	movw	r1, #3158	; 0xc56
    816a:	e00d      	b.n	8188 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    816c:	69c1      	ldr	r1, [r0, #28]
    816e:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8172:	4408      	add	r0, r1
    8174:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8178:	e00b      	b.n	8192 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    817a:	6901      	ldr	r1, [r0, #16]
    817c:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8180:	4281      	cmp	r1, r0
    8182:	d804      	bhi.n	818e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    8184:	f640 4157 	movw	r1, #3159	; 0xc57
    8188:	203e      	movs	r0, #62	; 0x3e
    818a:	f7f8 fc01 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    818e:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8192:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8196:	f000 b961 	b.w	845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    819a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    819e:	0000      	.short	0x0000
    81a0:	40008000 	.word	0x40008000
    81a4:	20001460 	.word	0x20001460
    81a8:	4001f508 	.word	0x4001f508
    81ac:	40001000 	.word	0x40001000
    81b0:	40001450 	.word	0x40001450
    81b4:	480b      	ldr	r0, [pc, #44]	; (81e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    81b6:	7d81      	ldrb	r1, [r0, #22]
    81b8:	480b      	ldr	r0, [pc, #44]	; (81e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    81ba:	5c40      	ldrb	r0, [r0, r1]
    81bc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    81c0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    81c4:	d204      	bcs.n	81d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    81c6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    81ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    81ce:	e001      	b.n	81d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    81d0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    81d4:	4a05      	ldr	r2, [pc, #20]	; (81ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    81d6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    81da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    81de:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    81e2:	4770      	bx	lr
    81e4:	20001460 	.word	0x20001460
    81e8:	0000860e 	.word	0x0000860e
    81ec:	40001000 	.word	0x40001000
    81f0:	b508      	push	{r3, lr}
    81f2:	490b      	ldr	r1, [pc, #44]	; (8220 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    81f4:	466b      	mov	r3, sp
    81f6:	f991 2015 	ldrsb.w	r2, [r1, #21]
    81fa:	7d89      	ldrb	r1, [r1, #22]
    81fc:	f000 faaa 	bl	8754 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8200:	f99d 0000 	ldrsb.w	r0, [sp]
    8204:	f000 fa7a 	bl	86fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8208:	f10d 0001 	add.w	r0, sp, #1
    820c:	f004 fad6 	bl	c7bc <mpsl_fem_pa_gain_set>
    8210:	2800      	cmp	r0, #0
    8212:	d004      	beq.n	821e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    8214:	f240 51e6 	movw	r1, #1510	; 0x5e6
    8218:	203e      	movs	r0, #62	; 0x3e
    821a:	f7f8 fbb9 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    821e:	bd08      	pop	{r3, pc}
    8220:	20001460 	.word	0x20001460
    8224:	4803      	ldr	r0, [pc, #12]	; (8234 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    8226:	7a01      	ldrb	r1, [r0, #8]
    8228:	2901      	cmp	r1, #1
    822a:	d102      	bne.n	8232 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    822c:	7a80      	ldrb	r0, [r0, #10]
    822e:	f7ff bfdf 	b.w	81f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8232:	4770      	bx	lr
    8234:	20001460 	.word	0x20001460
    8238:	480d      	ldr	r0, [pc, #52]	; (8270 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    823a:	b510      	push	{r4, lr}
    823c:	7a40      	ldrb	r0, [r0, #9]
    823e:	2801      	cmp	r0, #1
    8240:	d00c      	beq.n	825c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    8242:	2802      	cmp	r0, #2
    8244:	d113      	bne.n	826e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8246:	f004 fa9b 	bl	c780 <mpsl_fem_lna_configuration_clear>
    824a:	2800      	cmp	r0, #0
    824c:	d00f      	beq.n	826e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    824e:	1c40      	adds	r0, r0, #1
    8250:	d00d      	beq.n	826e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8252:	f640 01ab 	movw	r1, #2219	; 0x8ab
    8256:	203e      	movs	r0, #62	; 0x3e
    8258:	f7f8 fb9a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    825c:	f004 faa2 	bl	c7a4 <mpsl_fem_pa_configuration_clear>
    8260:	2800      	cmp	r0, #0
    8262:	d004      	beq.n	826e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8264:	1c40      	adds	r0, r0, #1
    8266:	d002      	beq.n	826e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8268:	f640 01a5 	movw	r1, #2213	; 0x8a5
    826c:	e7f3      	b.n	8256 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    826e:	bd10      	pop	{r4, pc}
    8270:	20001460 	.word	0x20001460
    8274:	4808      	ldr	r0, [pc, #32]	; (8298 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    8276:	2100      	movs	r1, #0
    8278:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    827c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8280:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8284:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8288:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    828c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8290:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8294:	4770      	bx	lr
    8296:	0000      	.short	0x0000
    8298:	40001000 	.word	0x40001000
    829c:	4818      	ldr	r0, [pc, #96]	; (8300 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    829e:	b510      	push	{r4, lr}
    82a0:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    82a4:	07c1      	lsls	r1, r0, #31
    82a6:	d029      	beq.n	82fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82a8:	0781      	lsls	r1, r0, #30
    82aa:	d514      	bpl.n	82d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    82ac:	4815      	ldr	r0, [pc, #84]	; (8304 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    82b2:	f041 0101 	orr.w	r1, r1, #1
    82b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    82ba:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82be:	b2c0      	uxtb	r0, r0
    82c0:	280b      	cmp	r0, #11
    82c2:	d005      	beq.n	82d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82c4:	280a      	cmp	r0, #10
    82c6:	d003      	beq.n	82d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82c8:	2803      	cmp	r0, #3
    82ca:	d001      	beq.n	82d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    82cc:	2802      	cmp	r0, #2
    82ce:	d115      	bne.n	82fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82d0:	f240 610f 	movw	r1, #1551	; 0x60f
    82d4:	e00f      	b.n	82f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    82d6:	0740      	lsls	r0, r0, #29
    82d8:	d510      	bpl.n	82fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82da:	480a      	ldr	r0, [pc, #40]	; (8304 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    82dc:	490a      	ldr	r1, [pc, #40]	; (8308 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    82de:	3008      	adds	r0, #8
    82e0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    82e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    82e8:	4808      	ldr	r0, [pc, #32]	; (830c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    82ea:	f008 faa3 	bl	10834 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    82ee:	2800      	cmp	r0, #0
    82f0:	d004      	beq.n	82fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    82f2:	f240 6117 	movw	r1, #1559	; 0x617
    82f6:	203e      	movs	r0, #62	; 0x3e
    82f8:	f7f8 fb4a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82fc:	bd10      	pop	{r4, pc}
    82fe:	0000      	.short	0x0000
    8300:	20001460 	.word	0x20001460
    8304:	40001000 	.word	0x40001000
    8308:	4001f098 	.word	0x4001f098
    830c:	40008000 	.word	0x40008000
    8310:	4808      	ldr	r0, [pc, #32]	; (8334 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    8312:	4601      	mov	r1, r0
    8314:	79c2      	ldrb	r2, [r0, #7]
    8316:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    831a:	b112      	cbz	r2, 8322 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    831c:	2a01      	cmp	r2, #1
    831e:	d003      	beq.n	8328 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    8320:	e006      	b.n	8330 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    8322:	f041 0102 	orr.w	r1, r1, #2
    8326:	e001      	b.n	832c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    8328:	f041 0104 	orr.w	r1, r1, #4
    832c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    8330:	f7ff bfb4 	b.w	829c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    8334:	20001460 	.word	0x20001460
    8338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    833c:	4d22      	ldr	r5, [pc, #136]	; (83c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    833e:	2400      	movs	r4, #0
    8340:	7b28      	ldrb	r0, [r5, #12]
    8342:	b138      	cbz	r0, 8354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8344:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8348:	4820      	ldr	r0, [pc, #128]	; (83cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    834a:	f008 fa73 	bl	10834 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    834e:	b108      	cbz	r0, 8354 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8350:	2701      	movs	r7, #1
    8352:	e000      	b.n	8356 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    8354:	2700      	movs	r7, #0
    8356:	7a68      	ldrb	r0, [r5, #9]
    8358:	4e1d      	ldr	r6, [pc, #116]	; (83d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    835a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    835e:	2801      	cmp	r0, #1
    8360:	d002      	beq.n	8368 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    8362:	2802      	cmp	r0, #2
    8364:	d006      	beq.n	8374 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    8366:	e016      	b.n	8396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8368:	4630      	mov	r0, r6
    836a:	f008 fa5e 	bl	1082a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    836e:	b190      	cbz	r0, 8396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8370:	2408      	movs	r4, #8
    8372:	e010      	b.n	8396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8374:	4630      	mov	r0, r6
    8376:	f008 fa58 	bl	1082a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    837a:	b100      	cbz	r0, 837e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    837c:	2402      	movs	r4, #2
    837e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    8382:	43c0      	mvns	r0, r0
    8384:	f340 0000 	sbfx	r0, r0, #0, #1
    8388:	1c40      	adds	r0, r0, #1
    838a:	d101      	bne.n	8390 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    838c:	f044 0404 	orr.w	r4, r4, #4
    8390:	b10f      	cbz	r7, 8396 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8392:	f044 0401 	orr.w	r4, r4, #1
    8396:	f014 0f0b 	tst.w	r4, #11
    839a:	d107      	bne.n	83ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    839c:	f44f 7188 	mov.w	r1, #272	; 0x110
    83a0:	4630      	mov	r0, r6
    83a2:	f008 fa42 	bl	1082a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    83a6:	b108      	cbz	r0, 83ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    83a8:	f044 0410 	orr.w	r4, r4, #16
    83ac:	f7ff ff62 	bl	8274 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    83b0:	06e0      	lsls	r0, r4, #27
    83b2:	d506      	bpl.n	83c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83b4:	0720      	lsls	r0, r4, #28
    83b6:	d404      	bmi.n	83c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83b8:	7a68      	ldrb	r0, [r5, #9]
    83ba:	2801      	cmp	r0, #1
    83bc:	d101      	bne.n	83c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    83be:	f044 0420 	orr.w	r4, r4, #32
    83c2:	4620      	mov	r0, r4
    83c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83c8:	20001460 	.word	0x20001460
    83cc:	40008000 	.word	0x40008000
    83d0:	40001000 	.word	0x40001000
    83d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83d8:	4c1a      	ldr	r4, [pc, #104]	; (8444 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    83da:	460d      	mov	r5, r1
    83dc:	7a21      	ldrb	r1, [r4, #8]
    83de:	b129      	cbz	r1, 83ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    83e0:	f010 0f11 	tst.w	r0, #17
    83e4:	d007      	beq.n	83f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    83e6:	f7ff fac9 	bl	797c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    83ea:	e024      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    83ec:	f000 f890 	bl	8510 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    83f0:	2000      	movs	r0, #0
    83f2:	7320      	strb	r0, [r4, #12]
    83f4:	e01f      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    83f6:	2901      	cmp	r1, #1
    83f8:	d001      	beq.n	83fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    83fa:	2601      	movs	r6, #1
    83fc:	e000      	b.n	8400 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    83fe:	2600      	movs	r6, #0
    8400:	79e0      	ldrb	r0, [r4, #7]
    8402:	2801      	cmp	r0, #1
    8404:	d00e      	beq.n	8424 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    8406:	2700      	movs	r7, #0
    8408:	f000 f882 	bl	8510 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    840c:	2196      	movs	r1, #150	; 0x96
    840e:	4630      	mov	r0, r6
    8410:	f000 f894 	bl	853c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    8414:	4601      	mov	r1, r0
    8416:	b14f      	cbz	r7, 842c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    8418:	353b      	adds	r5, #59	; 0x3b
    841a:	428d      	cmp	r5, r1
    841c:	d904      	bls.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    841e:	2000      	movs	r0, #0
    8420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8424:	2701      	movs	r7, #1
    8426:	e7ef      	b.n	8408 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    8428:	2001      	movs	r0, #1
    842a:	71e0      	strb	r0, [r4, #7]
    842c:	7aa2      	ldrb	r2, [r4, #10]
    842e:	4630      	mov	r0, r6
    8430:	f7ff fd2c 	bl	7e8c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8434:	b108      	cbz	r0, 843a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    8436:	2001      	movs	r0, #1
    8438:	e7f2      	b.n	8420 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    843a:	f640 21a5 	movw	r1, #2725	; 0xaa5
    843e:	203e      	movs	r0, #62	; 0x3e
    8440:	f7f8 faa6 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8444:	20001460 	.word	0x20001460
    8448:	4803      	ldr	r0, [pc, #12]	; (8458 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    844a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    844e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8452:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8456:	4770      	bx	lr
    8458:	40001000 	.word	0x40001000
    845c:	4804      	ldr	r0, [pc, #16]	; (8470 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    845e:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8460:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8464:	6241      	str	r1, [r0, #36]	; 0x24
    8466:	4903      	ldr	r1, [pc, #12]	; (8474 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8468:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    846c:	6008      	str	r0, [r1, #0]
    846e:	4770      	bx	lr
    8470:	20001460 	.word	0x20001460
    8474:	4001f504 	.word	0x4001f504
    8478:	4a07      	ldr	r2, [pc, #28]	; (8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    847a:	2000      	movs	r0, #0
    847c:	3208      	adds	r2, #8
    847e:	4906      	ldr	r1, [pc, #24]	; (8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8480:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8484:	1d0a      	adds	r2, r1, #4
    8486:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    848a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    848e:	4902      	ldr	r1, [pc, #8]	; (8498 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8490:	310c      	adds	r1, #12
    8492:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8496:	4770      	bx	lr
    8498:	40008000 	.word	0x40008000
    849c:	4903      	ldr	r1, [pc, #12]	; (84ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    849e:	79c9      	ldrb	r1, [r1, #7]
    84a0:	2900      	cmp	r1, #0
    84a2:	d102      	bne.n	84aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    84a4:	4902      	ldr	r1, [pc, #8]	; (84b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    84a6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    84aa:	4770      	bx	lr
    84ac:	20001460 	.word	0x20001460
    84b0:	4001f098 	.word	0x4001f098
    84b4:	b510      	push	{r4, lr}
    84b6:	4a14      	ldr	r2, [pc, #80]	; (8508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84b8:	b120      	cbz	r0, 84c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    84ba:	2801      	cmp	r0, #1
    84bc:	d011      	beq.n	84e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    84be:	f240 7153 	movw	r1, #1875	; 0x753
    84c2:	e01c      	b.n	84fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    84c4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    84c8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    84cc:	490f      	ldr	r1, [pc, #60]	; (850c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    84ce:	480e      	ldr	r0, [pc, #56]	; (8508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84d0:	f004 f96e 	bl	c7b0 <mpsl_fem_pa_configuration_set>
    84d4:	2800      	cmp	r0, #0
    84d6:	d015      	beq.n	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84d8:	1c40      	adds	r0, r0, #1
    84da:	d013      	beq.n	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84dc:	f240 7142 	movw	r1, #1858	; 0x742
    84e0:	e00d      	b.n	84fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    84e2:	f101 0029 	add.w	r0, r1, #41	; 0x29
    84e6:	e9c2 1002 	strd	r1, r0, [r2, #8]
    84ea:	4908      	ldr	r1, [pc, #32]	; (850c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    84ec:	4806      	ldr	r0, [pc, #24]	; (8508 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    84ee:	f004 f94d 	bl	c78c <mpsl_fem_lna_configuration_set>
    84f2:	2800      	cmp	r0, #0
    84f4:	d006      	beq.n	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84f6:	1c40      	adds	r0, r0, #1
    84f8:	d004      	beq.n	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    84fa:	f240 714f 	movw	r1, #1871	; 0x74f
    84fe:	203e      	movs	r0, #62	; 0x3e
    8500:	f7f8 fa46 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8504:	bd10      	pop	{r4, pc}
    8506:	0000      	.short	0x0000
    8508:	200002e0 	.word	0x200002e0
    850c:	00008638 	.word	0x00008638
    8510:	4802      	ldr	r0, [pc, #8]	; (851c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8512:	2100      	movs	r1, #0
    8514:	71c1      	strb	r1, [r0, #7]
    8516:	7201      	strb	r1, [r0, #8]
    8518:	7241      	strb	r1, [r0, #9]
    851a:	4770      	bx	lr
    851c:	20001460 	.word	0x20001460
    8520:	4a05      	ldr	r2, [pc, #20]	; (8538 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8522:	79d2      	ldrb	r2, [r2, #7]
    8524:	2a01      	cmp	r2, #1
    8526:	d006      	beq.n	8536 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    852c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8530:	fbb1 f1f2 	udiv	r1, r1, r2
    8534:	1a40      	subs	r0, r0, r1
    8536:	4770      	bx	lr
    8538:	20001460 	.word	0x20001460
    853c:	b570      	push	{r4, r5, r6, lr}
    853e:	4c13      	ldr	r4, [pc, #76]	; (858c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8540:	4603      	mov	r3, r0
    8542:	460d      	mov	r5, r1
    8544:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8548:	2000      	movs	r0, #0
    854a:	b15a      	cbz	r2, 8564 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    854c:	4621      	mov	r1, r4
    854e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8552:	b163      	cbz	r3, 856e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8554:	2b01      	cmp	r3, #1
    8556:	d111      	bne.n	857c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8558:	2a01      	cmp	r2, #1
    855a:	4628      	mov	r0, r5
    855c:	d012      	beq.n	8584 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    855e:	f008 f96e 	bl	1083e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8562:	e009      	b.n	8578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8564:	f640 0158 	movw	r1, #2136	; 0x858
    8568:	203e      	movs	r0, #62	; 0x3e
    856a:	f7f8 fa11 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    856e:	2a01      	cmp	r2, #1
    8570:	4628      	mov	r0, r5
    8572:	d004      	beq.n	857e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8574:	f008 f971 	bl	1085a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8578:	69e1      	ldr	r1, [r4, #28]
    857a:	4408      	add	r0, r1
    857c:	bd70      	pop	{r4, r5, r6, pc}
    857e:	f000 f8d1 	bl	8724 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8582:	e7f9      	b.n	8578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8584:	f000 f8c0 	bl	8708 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8588:	e7f6      	b.n	8578 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    858a:	0000      	.short	0x0000
    858c:	20001460 	.word	0x20001460
    8590:	b510      	push	{r4, lr}
    8592:	f7ff fc4f 	bl	7e34 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8596:	f7ff fe0d 	bl	81b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    859a:	f7ff fe43 	bl	8224 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    859e:	f7ff ff53 	bl	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    85a2:	f008 fbe2 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85a6:	2800      	cmp	r0, #0
    85a8:	d108      	bne.n	85bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85aa:	f008 fbce 	bl	10d4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85ae:	2800      	cmp	r0, #0
    85b0:	d104      	bne.n	85bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    85b2:	4803      	ldr	r0, [pc, #12]	; (85c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    85b4:	6801      	ldr	r1, [r0, #0]
    85b6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    85ba:	6001      	str	r1, [r0, #0]
    85bc:	bd10      	pop	{r4, pc}
    85be:	0000      	.short	0x0000
    85c0:	40001568 	.word	0x40001568
    85c4:	b510      	push	{r4, lr}
    85c6:	4604      	mov	r4, r0
    85c8:	f7ff fc34 	bl	7e34 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    85cc:	f7ff fdf2 	bl	81b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    85d0:	4620      	mov	r0, r4
    85d2:	f7ff fe0d 	bl	81f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    85d6:	f008 fbc8 	bl	10d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85da:	2800      	cmp	r0, #0
    85dc:	d00d      	beq.n	85fa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    85de:	4a09      	ldr	r2, [pc, #36]	; (8604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    85e0:	6811      	ldr	r1, [r2, #0]
    85e2:	0650      	lsls	r0, r2, #25
    85e4:	2c02      	cmp	r4, #2
    85e6:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    85ea:	d007      	beq.n	85fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    85ec:	f3c0 2006 	ubfx	r0, r0, #8, #7
    85f0:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    85f4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    85f8:	6010      	str	r0, [r2, #0]
    85fa:	bd10      	pop	{r4, pc}
    85fc:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8600:	e7f6      	b.n	85f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8602:	0000      	.short	0x0000
    8604:	40001588 	.word	0x40001588
    8608:	a62c0000 	.word	0xa62c0000
    860c:	0604a1e0 	.word	0x0604a1e0
    8610:	0e0c0a08 	.word	0x0e0c0a08
    8614:	16141210 	.word	0x16141210
    8618:	201e1c18 	.word	0x201e1c18
    861c:	28262422 	.word	0x28262422
    8620:	302e2c2a 	.word	0x302e2c2a
    8624:	38363432 	.word	0x38363432
    8628:	403e3c3a 	.word	0x403e3c3a
    862c:	48464442 	.word	0x48464442
    8630:	024e4c4a 	.word	0x024e4c4a
    8634:	0000501a 	.word	0x0000501a
    8638:	00000001 	.word	0x00000001
    863c:	40001110 	.word	0x40001110
	...
    8654:	00001e14 	.word	0x00001e14
    8658:	00001130 	.word	0x00001130
    865c:	00000000 	.word	0x00000000
    8660:	00000028 	.word	0x00000028
    8664:	00000018 	.word	0x00000018
    8668:	00000000 	.word	0x00000000
    866c:	00001e14 	.word	0x00001e14
    8670:	00001130 	.word	0x00001130
    8674:	00000000 	.word	0x00000000
    8678:	00001770 	.word	0x00001770
    867c:	00000fa0 	.word	0x00000fa0

00008680 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8680:	b570      	push	{r4, r5, r6, lr}
    8682:	4605      	mov	r5, r0
    8684:	4614      	mov	r4, r2
    8686:	4608      	mov	r0, r1
    8688:	f7ff fbfa 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    868c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8690:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8694:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8698:	4807      	ldr	r0, [pc, #28]	; (86b8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    869a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    869e:	4408      	add	r0, r1
    86a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    86a4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    86a8:	fbb0 f5f1 	udiv	r5, r0, r1
    86ac:	4620      	mov	r0, r4
    86ae:	f7ff fbbb 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    86b2:	4428      	add	r0, r5
    86b4:	1d40      	adds	r0, r0, #5
    86b6:	bd70      	pop	{r4, r5, r6, pc}
    86b8:	00008748 	.word	0x00008748

000086bc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    86bc:	b570      	push	{r4, r5, r6, lr}
    86be:	4d0e      	ldr	r5, [pc, #56]	; (86f8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86c0:	461c      	mov	r4, r3
    86c2:	3d08      	subs	r5, #8
    86c4:	4b0c      	ldr	r3, [pc, #48]	; (86f8 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    86c6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    86ca:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    86ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    86d2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    86d6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    86da:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    86de:	4418      	add	r0, r3
    86e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    86e4:	fbb0 f5f1 	udiv	r5, r0, r1
    86e8:	4610      	mov	r0, r2
    86ea:	f7ff fb9d 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    86ee:	4428      	add	r0, r5
    86f0:	4420      	add	r0, r4
    86f2:	1d40      	adds	r0, r0, #5
    86f4:	bd70      	pop	{r4, r5, r6, pc}
    86f6:	0000      	.short	0x0000
    86f8:	00008748 	.word	0x00008748

000086fc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    86fc:	4901      	ldr	r1, [pc, #4]	; (8704 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    86fe:	b2c0      	uxtb	r0, r0
    8700:	6008      	str	r0, [r1, #0]
    8702:	4770      	bx	lr
    8704:	4000150c 	.word	0x4000150c

00008708 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8708:	4a05      	ldr	r2, [pc, #20]	; (8720 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    870a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    870e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8712:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8716:	fbb1 f1f2 	udiv	r1, r1, r2
    871a:	4408      	add	r0, r1
    871c:	1e80      	subs	r0, r0, #2
    871e:	4770      	bx	lr
    8720:	00008740 	.word	0x00008740

00008724 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8724:	4a05      	ldr	r2, [pc, #20]	; (873c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8726:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    872a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    872e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8732:	fbb1 f1f2 	udiv	r1, r1, r2
    8736:	4408      	add	r0, r1
    8738:	4770      	bx	lr
    873a:	0000      	.short	0x0000
    873c:	00008740 	.word	0x00008740
    8740:	05dc0000 	.word	0x05dc0000
    8744:	000003e8 	.word	0x000003e8
    8748:	00000000 	.word	0x00000000
    874c:	00001e14 	.word	0x00001e14
    8750:	00001130 	.word	0x00001130

00008754 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8758:	461e      	mov	r6, r3
    875a:	4617      	mov	r7, r2
    875c:	460c      	mov	r4, r1
    875e:	4605      	mov	r5, r0
    8760:	f000 f856 	bl	8810 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8764:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 880c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8768:	4680      	mov	r8, r0
    876a:	f899 0000 	ldrb.w	r0, [r9]
    876e:	42a8      	cmp	r0, r5
    8770:	d110      	bne.n	8794 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8772:	f899 1001 	ldrb.w	r1, [r9, #1]
    8776:	4648      	mov	r0, r9
    8778:	42a1      	cmp	r1, r4
    877a:	d10b      	bne.n	8794 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    877c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8780:	42b9      	cmp	r1, r7
    8782:	d107      	bne.n	8794 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8784:	78c2      	ldrb	r2, [r0, #3]
    8786:	4542      	cmp	r2, r8
    8788:	d104      	bne.n	8794 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    878a:	8881      	ldrh	r1, [r0, #4]
    878c:	8031      	strh	r1, [r6, #0]
    878e:	7980      	ldrb	r0, [r0, #6]
    8790:	70b0      	strb	r0, [r6, #2]
    8792:	e037      	b.n	8804 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8794:	463a      	mov	r2, r7
    8796:	4621      	mov	r1, r4
    8798:	2d01      	cmp	r5, #1
    879a:	d009      	beq.n	87b0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    879c:	2d02      	cmp	r5, #2
    879e:	d009      	beq.n	87b4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    87a0:	2d04      	cmp	r5, #4
    87a2:	d009      	beq.n	87b8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    87a4:	2d08      	cmp	r5, #8
    87a6:	d009      	beq.n	87bc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    87a8:	f240 4161 	movw	r1, #1121	; 0x461
    87ac:	2006      	movs	r0, #6
    87ae:	e00c      	b.n	87ca <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    87b0:	2000      	movs	r0, #0
    87b2:	e004      	b.n	87be <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87b4:	2001      	movs	r0, #1
    87b6:	e002      	b.n	87be <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87b8:	2003      	movs	r0, #3
    87ba:	e000      	b.n	87be <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    87bc:	2002      	movs	r0, #2
    87be:	466b      	mov	r3, sp
    87c0:	f000 f89e 	bl	8900 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    87c4:	b118      	cbz	r0, 87ce <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    87c6:	213d      	movs	r1, #61	; 0x3d
    87c8:	2075      	movs	r0, #117	; 0x75
    87ca:	f7f8 f8e1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87ce:	4620      	mov	r0, r4
    87d0:	f7ff f8cc 	bl	796c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    87d4:	4602      	mov	r2, r0
    87d6:	2300      	movs	r3, #0
    87d8:	4631      	mov	r1, r6
    87da:	f99d 0000 	ldrsb.w	r0, [sp]
    87de:	f003 fff9 	bl	c7d4 <mpsl_fem_tx_power_split>
    87e2:	4601      	mov	r1, r0
    87e4:	f889 1007 	strb.w	r1, [r9, #7]
    87e8:	8831      	ldrh	r1, [r6, #0]
    87ea:	f8a9 1004 	strh.w	r1, [r9, #4]
    87ee:	78b1      	ldrb	r1, [r6, #2]
    87f0:	f889 1006 	strb.w	r1, [r9, #6]
    87f4:	f889 5000 	strb.w	r5, [r9]
    87f8:	f889 4001 	strb.w	r4, [r9, #1]
    87fc:	f889 7002 	strb.w	r7, [r9, #2]
    8800:	f889 8003 	strb.w	r8, [r9, #3]
    8804:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    880c:	20000380 	.word	0x20000380

00008810 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8810:	4801      	ldr	r0, [pc, #4]	; (8818 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8812:	7800      	ldrb	r0, [r0, #0]
    8814:	4770      	bx	lr
    8816:	0000      	.short	0x0000
    8818:	200002f8 	.word	0x200002f8

0000881c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    881c:	b570      	push	{r4, r5, r6, lr}
    881e:	4c17      	ldr	r4, [pc, #92]	; (887c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8820:	7860      	ldrb	r0, [r4, #1]
    8822:	2800      	cmp	r0, #0
    8824:	d123      	bne.n	886e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8826:	2001      	movs	r0, #1
    8828:	7060      	strb	r0, [r4, #1]
    882a:	f008 fa78 	bl	10d1e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    882e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8832:	b928      	cbnz	r0, 8840 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8834:	f008 faa9 	bl	10d8a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8838:	b910      	cbnz	r0, 8840 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    883a:	f008 fab0 	bl	10d9e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    883e:	b120      	cbz	r0, 884a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8840:	480f      	ldr	r0, [pc, #60]	; (8880 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8842:	6060      	str	r0, [r4, #4]
    8844:	70a5      	strb	r5, [r4, #2]
    8846:	2008      	movs	r0, #8
    8848:	e010      	b.n	886c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    884a:	f008 fa3d 	bl	10cc8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    884e:	b940      	cbnz	r0, 8862 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8850:	f008 fa44 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8854:	b928      	cbnz	r0, 8862 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8856:	f008 fa58 	bl	10d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    885a:	b910      	cbnz	r0, 8862 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    885c:	f008 fa69 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8860:	b130      	cbz	r0, 8870 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8862:	4807      	ldr	r0, [pc, #28]	; (8880 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8864:	3031      	adds	r0, #49	; 0x31
    8866:	6060      	str	r0, [r4, #4]
    8868:	70a5      	strb	r5, [r4, #2]
    886a:	2004      	movs	r0, #4
    886c:	70e0      	strb	r0, [r4, #3]
    886e:	bd70      	pop	{r4, r5, r6, pc}
    8870:	f240 113f 	movw	r1, #319	; 0x13f
    8874:	2074      	movs	r0, #116	; 0x74
    8876:	f003 fdef 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    887a:	0000      	.short	0x0000
    887c:	200002f8 	.word	0x200002f8
    8880:	000110dd 	.word	0x000110dd

00008884 <mpsl_tx_power_radio_supported_power_adjust>:
    8884:	4a06      	ldr	r2, [pc, #24]	; (88a0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8886:	b500      	push	{lr}
    8888:	f992 2003 	ldrsb.w	r2, [r2, #3]
    888c:	4290      	cmp	r0, r2
    888e:	db01      	blt.n	8894 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8890:	4610      	mov	r0, r2
    8892:	bd00      	pop	{pc}
    8894:	f000 f808 	bl	88a8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8898:	4902      	ldr	r1, [pc, #8]	; (88a4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    889a:	5608      	ldrsb	r0, [r1, r0]
    889c:	bd00      	pop	{pc}
    889e:	0000      	.short	0x0000
    88a0:	200002f8 	.word	0x200002f8
    88a4:	000110cf 	.word	0x000110cf

000088a8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    88a8:	4602      	mov	r2, r0
    88aa:	4813      	ldr	r0, [pc, #76]	; (88f8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    88ac:	b510      	push	{r4, lr}
    88ae:	f990 3003 	ldrsb.w	r3, [r0, #3]
    88b2:	429a      	cmp	r2, r3
    88b4:	db01      	blt.n	88ba <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    88b6:	200d      	movs	r0, #13
    88b8:	bd10      	pop	{r4, pc}
    88ba:	f990 3002 	ldrsb.w	r3, [r0, #2]
    88be:	429a      	cmp	r2, r3
    88c0:	dc01      	bgt.n	88c6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    88c2:	2000      	movs	r0, #0
    88c4:	bd10      	pop	{r4, pc}
    88c6:	b101      	cbz	r1, 88ca <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    88c8:	2101      	movs	r1, #1
    88ca:	1ad4      	subs	r4, r2, r3
    88cc:	6843      	ldr	r3, [r0, #4]
    88ce:	5d18      	ldrb	r0, [r3, r4]
    88d0:	4c0a      	ldr	r4, [pc, #40]	; (88fc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88d2:	5624      	ldrsb	r4, [r4, r0]
    88d4:	4294      	cmp	r4, r2
    88d6:	d0f5      	beq.n	88c4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88d8:	4c08      	ldr	r4, [pc, #32]	; (88fc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    88da:	4408      	add	r0, r1
    88dc:	343f      	adds	r4, #63	; 0x3f
    88de:	b2c0      	uxtb	r0, r0
    88e0:	b2d2      	uxtb	r2, r2
    88e2:	42a3      	cmp	r3, r4
    88e4:	d1ee      	bne.n	88c4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88e6:	2900      	cmp	r1, #0
    88e8:	d0ec      	beq.n	88c4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88ea:	2a01      	cmp	r2, #1
    88ec:	d001      	beq.n	88f2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    88ee:	2a02      	cmp	r2, #2
    88f0:	d1e8      	bne.n	88c4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    88f2:	1c40      	adds	r0, r0, #1
    88f4:	b2c0      	uxtb	r0, r0
    88f6:	bd10      	pop	{r4, pc}
    88f8:	200002f8 	.word	0x200002f8
    88fc:	000110cf 	.word	0x000110cf

00008900 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8904:	461c      	mov	r4, r3
    8906:	4690      	mov	r8, r2
    8908:	460d      	mov	r5, r1
    890a:	4606      	mov	r6, r0
    890c:	f06f 0715 	mvn.w	r7, #21
    8910:	2804      	cmp	r0, #4
    8912:	d804      	bhi.n	891e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8914:	b11c      	cbz	r4, 891e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8916:	f007 ffab 	bl	10870 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    891a:	42a8      	cmp	r0, r5
    891c:	d802      	bhi.n	8924 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    891e:	4638      	mov	r0, r7
    8920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8924:	4805      	ldr	r0, [pc, #20]	; (893c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8926:	4642      	mov	r2, r8
    8928:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    892c:	b118      	cbz	r0, 8936 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    892e:	5740      	ldrsb	r0, [r0, r5]
    8930:	4282      	cmp	r2, r0
    8932:	dd00      	ble.n	8936 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8934:	4602      	mov	r2, r0
    8936:	7022      	strb	r2, [r4, #0]
    8938:	2000      	movs	r0, #0
    893a:	e7f1      	b.n	8920 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    893c:	20001494 	.word	0x20001494
    8940:	b570      	push	{r4, r5, r6, lr}
    8942:	460d      	mov	r5, r1
    8944:	0004      	movs	r4, r0
    8946:	d00c      	beq.n	8962 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    8948:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    894c:	2100      	movs	r1, #0
    894e:	2002      	movs	r0, #2
    8950:	2d09      	cmp	r5, #9
    8952:	d26e      	bcs.n	8a32 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    8954:	e8df f005 	tbb	[pc, r5]
    8958:	36361108 	.word	0x36361108
    895c:	a6897166 	.word	0xa6897166
    8960:	0094      	.short	0x0094
    8962:	f44f 71cb 	mov.w	r1, #406	; 0x196
    8966:	e0f7      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8968:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    896c:	2804      	cmp	r0, #4
    896e:	d07b      	beq.n	8a68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    8970:	2803      	cmp	r0, #3
    8972:	d0fc      	beq.n	896e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    8974:	f240 11a1 	movw	r1, #417	; 0x1a1
    8978:	e0ee      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    897a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    897e:	2804      	cmp	r0, #4
    8980:	d004      	beq.n	898c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8982:	2803      	cmp	r0, #3
    8984:	d002      	beq.n	898c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8986:	f240 11a5 	movw	r1, #421	; 0x1a5
    898a:	e0e5      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    898c:	2005      	movs	r0, #5
    898e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8992:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8996:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    899a:	bbb8      	cbnz	r0, 8a0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    899c:	2100      	movs	r1, #0
    899e:	4620      	mov	r0, r4
    89a0:	f007 ffc7 	bl	10932 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    89a4:	7820      	ldrb	r0, [r4, #0]
    89a6:	2801      	cmp	r0, #1
    89a8:	d007      	beq.n	89ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    89aa:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    89ae:	bf00      	nop
    89b0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    89b4:	2100      	movs	r1, #0
    89b6:	6a22      	ldr	r2, [r4, #32]
    89b8:	e048      	b.n	8a4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    89ba:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    89be:	f001 fa3b 	bl	9e38 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    89c2:	e7f5      	b.n	89b0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    89c4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    89c8:	2904      	cmp	r1, #4
    89ca:	d004      	beq.n	89d6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    89cc:	2903      	cmp	r1, #3
    89ce:	d002      	beq.n	89d6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    89d0:	f240 11c3 	movw	r1, #451	; 0x1c3
    89d4:	e0c0      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    89d6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    89da:	b122      	cbz	r2, 89e6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    89dc:	4621      	mov	r1, r4
    89de:	4630      	mov	r0, r6
    89e0:	f007 ffe7 	bl	109b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    89e4:	e0b0      	b.n	8b48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    89e6:	2904      	cmp	r1, #4
    89e8:	d000      	beq.n	89ec <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    89ea:	2001      	movs	r0, #1
    89ec:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    89f0:	6a22      	ldr	r2, [r4, #32]
    89f2:	2d02      	cmp	r5, #2
    89f4:	d00b      	beq.n	8a0e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    89f6:	2106      	movs	r1, #6
    89f8:	4630      	mov	r0, r6
    89fa:	4790      	blx	r2
    89fc:	2800      	cmp	r0, #0
    89fe:	d06d      	beq.n	8adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8a00:	7800      	ldrb	r0, [r0, #0]
    8a02:	2800      	cmp	r0, #0
    8a04:	d06a      	beq.n	8adc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8a06:	f240 11dd 	movw	r1, #477	; 0x1dd
    8a0a:	e0a5      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a0c:	e034      	b.n	8a78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8a0e:	2105      	movs	r1, #5
    8a10:	4630      	mov	r0, r6
    8a12:	4790      	blx	r2
    8a14:	2800      	cmp	r0, #0
    8a16:	d070      	beq.n	8afa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8a18:	7800      	ldrb	r0, [r0, #0]
    8a1a:	2800      	cmp	r0, #0
    8a1c:	d06d      	beq.n	8afa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8a1e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8a22:	e099      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a24:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a28:	2805      	cmp	r0, #5
    8a2a:	d003      	beq.n	8a34 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    8a2c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    8a30:	e092      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a32:	e080      	b.n	8b36 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    8a34:	2102      	movs	r1, #2
    8a36:	6a22      	ldr	r2, [r4, #32]
    8a38:	e008      	b.n	8a4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8a3a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a3e:	2805      	cmp	r0, #5
    8a40:	d002      	beq.n	8a48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    8a42:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8a46:	e087      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a48:	6a22      	ldr	r2, [r4, #32]
    8a4a:	2101      	movs	r1, #1
    8a4c:	4630      	mov	r0, r6
    8a4e:	4790      	blx	r2
    8a50:	4601      	mov	r1, r0
    8a52:	4620      	mov	r0, r4
    8a54:	f007 ff18 	bl	10888 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8a58:	2802      	cmp	r0, #2
    8a5a:	d075      	beq.n	8b48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8a5c:	b3e8      	cbz	r0, 8ada <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    8a5e:	2801      	cmp	r0, #1
    8a60:	d06c      	beq.n	8b3c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    8a62:	f240 212a 	movw	r1, #554	; 0x22a
    8a66:	e077      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a68:	e070      	b.n	8b4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    8a6a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a6e:	2805      	cmp	r0, #5
    8a70:	d002      	beq.n	8a78 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8a72:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8a76:	e06f      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a7c:	f000 b89e 	b.w	8bbc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    8a80:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8a84:	2805      	cmp	r0, #5
    8a86:	d002      	beq.n	8a8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    8a88:	f240 11f5 	movw	r1, #501	; 0x1f5
    8a8c:	e064      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8a8e:	6a22      	ldr	r2, [r4, #32]
    8a90:	210a      	movs	r1, #10
    8a92:	4630      	mov	r0, r6
    8a94:	4790      	blx	r2
    8a96:	4601      	mov	r1, r0
    8a98:	4620      	mov	r0, r4
    8a9a:	f007 fef5 	bl	10888 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8a9e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    8aa2:	e059      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8aa4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    8aa8:	2a05      	cmp	r2, #5
    8aaa:	d007      	beq.n	8abc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8aac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8ab0:	b10b      	cbz	r3, 8ab6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    8ab2:	2a03      	cmp	r2, #3
    8ab4:	d002      	beq.n	8abc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8ab6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    8aba:	e04d      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8abc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8ac0:	b12a      	cbz	r2, 8ace <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    8ac2:	4621      	mov	r1, r4
    8ac4:	4630      	mov	r0, r6
    8ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8aca:	f007 bf72 	b.w	109b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8ace:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8ad2:	b19a      	cbz	r2, 8afc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    8ad4:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8ad8:	e001      	b.n	8ade <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    8ada:	e032      	b.n	8b42 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    8adc:	e034      	b.n	8b48 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8ade:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8ae2:	6a22      	ldr	r2, [r4, #32]
    8ae4:	2108      	movs	r1, #8
    8ae6:	4630      	mov	r0, r6
    8ae8:	4790      	blx	r2
    8aea:	2800      	cmp	r0, #0
    8aec:	d037      	beq.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8aee:	7800      	ldrb	r0, [r0, #0]
    8af0:	2800      	cmp	r0, #0
    8af2:	d034      	beq.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8af4:	f44f 7102 	mov.w	r1, #520	; 0x208
    8af8:	e02e      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8afa:	e030      	b.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8afc:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    8b00:	b15a      	cbz	r2, 8b1a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    8b02:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    8b06:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    8b0a:	4621      	mov	r1, r4
    8b0c:	f007 ff0f 	bl	1092e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    8b10:	2800      	cmp	r0, #0
    8b12:	d124      	bne.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b14:	f240 210d 	movw	r1, #525	; 0x20d
    8b18:	e01e      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b1a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8b1e:	6a22      	ldr	r2, [r4, #32]
    8b20:	2107      	movs	r1, #7
    8b22:	4630      	mov	r0, r6
    8b24:	4790      	blx	r2
    8b26:	2800      	cmp	r0, #0
    8b28:	d019      	beq.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b2a:	7800      	ldrb	r0, [r0, #0]
    8b2c:	2800      	cmp	r0, #0
    8b2e:	d016      	beq.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b30:	f44f 7105 	mov.w	r1, #532	; 0x214
    8b34:	e010      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b36:	f240 2119 	movw	r1, #537	; 0x219
    8b3a:	e00d      	b.n	8b58 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8b3c:	2104      	movs	r1, #4
    8b3e:	6a22      	ldr	r2, [r4, #32]
    8b40:	e784      	b.n	8a4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8b42:	2103      	movs	r1, #3
    8b44:	6a22      	ldr	r2, [r4, #32]
    8b46:	e781      	b.n	8a4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8b48:	2d00      	cmp	r5, #0
    8b4a:	d108      	bne.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b4c:	f007 ffe7 	bl	10b1e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    8b50:	2800      	cmp	r0, #0
    8b52:	d004      	beq.n	8b5e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    8b54:	f240 2133 	movw	r1, #563	; 0x233
    8b58:	206a      	movs	r0, #106	; 0x6a
    8b5a:	f003 fc7d 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8b5e:	bd70      	pop	{r4, r5, r6, pc}
    8b60:	2800      	cmp	r0, #0
    8b62:	d019      	beq.n	8b98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    8b64:	7803      	ldrb	r3, [r0, #0]
    8b66:	4913      	ldr	r1, [pc, #76]	; (8bb4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    8b68:	4a13      	ldr	r2, [pc, #76]	; (8bb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    8b6a:	b113      	cbz	r3, 8b72 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    8b6c:	2b01      	cmp	r3, #1
    8b6e:	d00e      	beq.n	8b8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    8b70:	e011      	b.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b72:	7903      	ldrb	r3, [r0, #4]
    8b74:	2b01      	cmp	r3, #1
    8b76:	d000      	beq.n	8b7a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    8b78:	b96b      	cbnz	r3, 8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b7a:	7943      	ldrb	r3, [r0, #5]
    8b7c:	b10b      	cbz	r3, 8b82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    8b7e:	2b01      	cmp	r3, #1
    8b80:	d109      	bne.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b82:	6883      	ldr	r3, [r0, #8]
    8b84:	3b64      	subs	r3, #100	; 0x64
    8b86:	428b      	cmp	r3, r1
    8b88:	d205      	bcs.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8b8a:	68c0      	ldr	r0, [r0, #12]
    8b8c:	e00e      	b.n	8bac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    8b8e:	7903      	ldrb	r3, [r0, #4]
    8b90:	2b01      	cmp	r3, #1
    8b92:	d002      	beq.n	8b9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    8b94:	b10b      	cbz	r3, 8b9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    8b96:	2000      	movs	r0, #0
    8b98:	4770      	bx	lr
    8b9a:	7943      	ldrb	r3, [r0, #5]
    8b9c:	b10b      	cbz	r3, 8ba2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    8b9e:	2b01      	cmp	r3, #1
    8ba0:	d1f9      	bne.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8ba2:	68c3      	ldr	r3, [r0, #12]
    8ba4:	3b64      	subs	r3, #100	; 0x64
    8ba6:	428b      	cmp	r3, r1
    8ba8:	d2f5      	bcs.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8baa:	6880      	ldr	r0, [r0, #8]
    8bac:	4290      	cmp	r0, r2
    8bae:	d8f2      	bhi.n	8b96 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    8bb0:	2001      	movs	r0, #1
    8bb2:	4770      	bx	lr
    8bb4:	0001863d 	.word	0x0001863d
    8bb8:	0f423fff 	.word	0x0f423fff
    8bbc:	b510      	push	{r4, lr}
    8bbe:	4c05      	ldr	r4, [pc, #20]	; (8bd4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    8bc0:	6820      	ldr	r0, [r4, #0]
    8bc2:	b110      	cbz	r0, 8bca <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    8bc4:	4780      	blx	r0
    8bc6:	2000      	movs	r0, #0
    8bc8:	6020      	str	r0, [r4, #0]
    8bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bce:	f002 b943 	b.w	ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8bd2:	0000      	.short	0x0000
    8bd4:	20000300 	.word	0x20000300

00008bd8 <mpsl_timeslot_session_open>:
    8bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bdc:	460e      	mov	r6, r1
    8bde:	0005      	movs	r5, r0
    8be0:	d004      	beq.n	8bec <mpsl_timeslot_session_open+0x14>
    8be2:	f000 f847 	bl	8c74 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    8be6:	4607      	mov	r7, r0
    8be8:	2400      	movs	r4, #0
    8bea:	e00b      	b.n	8c04 <mpsl_timeslot_session_open+0x2c>
    8bec:	f06f 0015 	mvn.w	r0, #21
    8bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8bf4:	4620      	mov	r0, r4
    8bf6:	f000 f843 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    8bfa:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    8bfe:	b130      	cbz	r0, 8c0e <mpsl_timeslot_session_open+0x36>
    8c00:	1c64      	adds	r4, r4, #1
    8c02:	b2e4      	uxtb	r4, r4
    8c04:	42bc      	cmp	r4, r7
    8c06:	d3f5      	bcc.n	8bf4 <mpsl_timeslot_session_open+0x1c>
    8c08:	f06f 000b 	mvn.w	r0, #11
    8c0c:	e7f0      	b.n	8bf0 <mpsl_timeslot_session_open+0x18>
    8c0e:	4627      	mov	r7, r4
    8c10:	2cff      	cmp	r4, #255	; 0xff
    8c12:	d0f9      	beq.n	8c08 <mpsl_timeslot_session_open+0x30>
    8c14:	4620      	mov	r0, r4
    8c16:	f000 f833 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    8c1a:	4604      	mov	r4, r0
    8c1c:	f007 fee4 	bl	109e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    8c20:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    8c24:	4621      	mov	r1, r4
    8c26:	4808      	ldr	r0, [pc, #32]	; (8c48 <mpsl_timeslot_session_open+0x70>)
    8c28:	f002 f8f2 	bl	ae10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8c2c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    8c30:	2820      	cmp	r0, #32
    8c32:	d006      	beq.n	8c42 <mpsl_timeslot_session_open+0x6a>
    8c34:	2001      	movs	r0, #1
    8c36:	6225      	str	r5, [r4, #32]
    8c38:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8c3c:	7037      	strb	r7, [r6, #0]
    8c3e:	2000      	movs	r0, #0
    8c40:	e7d6      	b.n	8bf0 <mpsl_timeslot_session_open+0x18>
    8c42:	f06f 0022 	mvn.w	r0, #34	; 0x22
    8c46:	e7d3      	b.n	8bf0 <mpsl_timeslot_session_open+0x18>
    8c48:	00008941 	.word	0x00008941

00008c4c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    8c4c:	b510      	push	{r4, lr}
    8c4e:	0782      	lsls	r2, r0, #30
    8c50:	d002      	beq.n	8c58 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    8c52:	f06f 000d 	mvn.w	r0, #13
    8c56:	bd10      	pop	{r4, pc}
    8c58:	4a05      	ldr	r2, [pc, #20]	; (8c70 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    8c5a:	7011      	strb	r1, [r2, #0]
    8c5c:	6050      	str	r0, [r2, #4]
    8c5e:	b128      	cbz	r0, 8c6c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    8c60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8c64:	010a      	lsls	r2, r1, #4
    8c66:	2100      	movs	r1, #0
    8c68:	f008 f977 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c6c:	2000      	movs	r0, #0
    8c6e:	bd10      	pop	{r4, pc}
    8c70:	20000304 	.word	0x20000304

00008c74 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8c74:	4801      	ldr	r0, [pc, #4]	; (8c7c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8c76:	7800      	ldrb	r0, [r0, #0]
    8c78:	4770      	bx	lr
    8c7a:	0000      	.short	0x0000
    8c7c:	20000304 	.word	0x20000304

00008c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8c80:	4905      	ldr	r1, [pc, #20]	; (8c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8c82:	780a      	ldrb	r2, [r1, #0]
    8c84:	4290      	cmp	r0, r2
    8c86:	d301      	bcc.n	8c8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8c88:	2000      	movs	r0, #0
    8c8a:	4770      	bx	lr
    8c8c:	6849      	ldr	r1, [r1, #4]
    8c8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8c92:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8c96:	4770      	bx	lr
    8c98:	20000304 	.word	0x20000304

00008c9c <MPSL_IRQ_RADIO_Handler>:
    8c9c:	490d      	ldr	r1, [pc, #52]	; (8cd4 <MPSL_IRQ_RADIO_Handler+0x38>)
    8c9e:	b510      	push	{r4, lr}
    8ca0:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8ca4:	2820      	cmp	r0, #32
    8ca6:	d00f      	beq.n	8cc8 <MPSL_IRQ_RADIO_Handler+0x2c>
    8ca8:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8cac:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8cb0:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8cb4:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8cb8:	6840      	ldr	r0, [r0, #4]
    8cba:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    8cbe:	680a      	ldr	r2, [r1, #0]
    8cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cc4:	2104      	movs	r1, #4
    8cc6:	4710      	bx	r2
    8cc8:	f640 017f 	movw	r1, #2175	; 0x87f
    8ccc:	2070      	movs	r0, #112	; 0x70
    8cce:	f003 fbc3 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8cd2:	0000      	.short	0x0000
    8cd4:	20001238 	.word	0x20001238
    8cd8:	b570      	push	{r4, r5, r6, lr}
    8cda:	4605      	mov	r5, r0
    8cdc:	2a20      	cmp	r2, #32
    8cde:	d028      	beq.n	8d32 <MPSL_IRQ_RADIO_Handler+0x96>
    8ce0:	4819      	ldr	r0, [pc, #100]	; (8d48 <MPSL_IRQ_RADIO_Handler+0xac>)
    8ce2:	4c1a      	ldr	r4, [pc, #104]	; (8d4c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8ce4:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8ce8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8cec:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8cf0:	4423      	add	r3, r4
    8cf2:	2920      	cmp	r1, #32
    8cf4:	d022      	beq.n	8d3c <MPSL_IRQ_RADIO_Handler+0xa0>
    8cf6:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8cfa:	7840      	ldrb	r0, [r0, #1]
    8cfc:	784c      	ldrb	r4, [r1, #1]
    8cfe:	7048      	strb	r0, [r1, #1]
    8d00:	4620      	mov	r0, r4
    8d02:	4601      	mov	r1, r0
    8d04:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d08:	4291      	cmp	r1, r2
    8d0a:	7005      	strb	r5, [r0, #0]
    8d0c:	7840      	ldrb	r0, [r0, #1]
    8d0e:	d1f8      	bne.n	8d02 <MPSL_IRQ_RADIO_Handler+0x66>
    8d10:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8d14:	2a20      	cmp	r2, #32
    8d16:	bf1a      	itte	ne
    8d18:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d1c:	7054      	strbne	r4, [r2, #1]
    8d1e:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8d22:	2220      	movs	r2, #32
    8d24:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d28:	f88c 2001 	strb.w	r2, [ip, #1]
    8d2c:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8d30:	bd70      	pop	{r4, r5, r6, pc}
    8d32:	f240 2186 	movw	r1, #646	; 0x286
    8d36:	2070      	movs	r0, #112	; 0x70
    8d38:	f003 fb8e 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d3c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8d40:	7840      	ldrb	r0, [r0, #1]
    8d42:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8d46:	e7db      	b.n	8d00 <MPSL_IRQ_RADIO_Handler+0x64>
    8d48:	200011b8 	.word	0x200011b8
    8d4c:	20001238 	.word	0x20001238
    8d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d54:	b08f      	sub	sp, #60	; 0x3c
    8d56:	4615      	mov	r5, r2
    8d58:	461e      	mov	r6, r3
    8d5a:	460c      	mov	r4, r1
    8d5c:	f002 facc 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d60:	1828      	adds	r0, r5, r0
    8d62:	f146 0100 	adc.w	r1, r6, #0
    8d66:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8d6a:	e9d4 2300 	ldrd	r2, r3, [r4]
    8d6e:	1a80      	subs	r0, r0, r2
    8d70:	eb71 0003 	sbcs.w	r0, r1, r3
    8d74:	f0c0 80e5 	bcc.w	8f42 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8d78:	a808      	add	r0, sp, #32
    8d7a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    8d7e:	900a      	str	r0, [sp, #40]	; 0x28
    8d80:	48bc      	ldr	r0, [pc, #752]	; (9074 <MPSL_IRQ_RADIO_Handler+0x3d8>)
    8d82:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    8d86:	4408      	add	r0, r1
    8d88:	9009      	str	r0, [sp, #36]	; 0x24
    8d8a:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8d8e:	2020      	movs	r0, #32
    8d90:	f10d 091c 	add.w	r9, sp, #28
    8d94:	f88d 001c 	strb.w	r0, [sp, #28]
    8d98:	2d20      	cmp	r5, #32
    8d9a:	d036      	beq.n	8e0a <MPSL_IRQ_RADIO_Handler+0x16e>
    8d9c:	48b6      	ldr	r0, [pc, #728]	; (9078 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8d9e:	2600      	movs	r6, #0
    8da0:	eb00 1b8a 	add.w	fp, r0, sl, lsl #6
    8da4:	48b5      	ldr	r0, [pc, #724]	; (907c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8da6:	e9d4 7300 	ldrd	r7, r3, [r4]
    8daa:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    8dae:	f850 8f08 	ldr.w	r8, [r0, #8]!
    8db2:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
    8db6:	eb18 0101 	adds.w	r1, r8, r1
    8dba:	4172      	adcs	r2, r6
    8dbc:	1a79      	subs	r1, r7, r1
    8dbe:	eb73 0102 	sbcs.w	r1, r3, r2
    8dc2:	d322      	bcc.n	8e0a <MPSL_IRQ_RADIO_Handler+0x16e>
    8dc4:	89e1      	ldrh	r1, [r4, #14]
    8dc6:	b1c9      	cbz	r1, 8dfc <MPSL_IRQ_RADIO_Handler+0x160>
    8dc8:	89c0      	ldrh	r0, [r0, #14]
    8dca:	b9b8      	cbnz	r0, 8dfc <MPSL_IRQ_RADIO_Handler+0x160>
    8dcc:	f003 f986 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8dd0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8dd4:	bf08      	it	eq
    8dd6:	200d      	moveq	r0, #13
    8dd8:	d00b      	beq.n	8df2 <MPSL_IRQ_RADIO_Handler+0x156>
    8dda:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8dde:	3856      	subs	r0, #86	; 0x56
    8de0:	bf08      	it	eq
    8de2:	201c      	moveq	r0, #28
    8de4:	d005      	beq.n	8df2 <MPSL_IRQ_RADIO_Handler+0x156>
    8de6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8dea:	389f      	subs	r0, #159	; 0x9f
    8dec:	bf14      	ite	ne
    8dee:	4630      	movne	r0, r6
    8df0:	2032      	moveq	r0, #50	; 0x32
    8df2:	1c40      	adds	r0, r0, #1
    8df4:	ebb7 0108 	subs.w	r1, r7, r8
    8df8:	4281      	cmp	r1, r0
    8dfa:	db06      	blt.n	8e0a <MPSL_IRQ_RADIO_Handler+0x16e>
    8dfc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e00:	f889 5000 	strb.w	r5, [r9]
    8e04:	7845      	ldrb	r5, [r0, #1]
    8e06:	2d20      	cmp	r5, #32
    8e08:	d1cc      	bne.n	8da4 <MPSL_IRQ_RADIO_Handler+0x108>
    8e0a:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e0c:	f899 1000 	ldrb.w	r1, [r9]
    8e10:	2d20      	cmp	r5, #32
    8e12:	7001      	strb	r1, [r0, #0]
    8e14:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    8e18:	f000 8128 	beq.w	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e1c:	4896      	ldr	r0, [pc, #600]	; (9078 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8e1e:	4f97      	ldr	r7, [pc, #604]	; (907c <MPSL_IRQ_RADIO_Handler+0x3e0>)
    8e20:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    8e24:	2600      	movs	r6, #0
    8e26:	9004      	str	r0, [sp, #16]
    8e28:	eb07 1a45 	add.w	sl, r7, r5, lsl #5
    8e2c:	f10a 0008 	add.w	r0, sl, #8
    8e30:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8e34:	f8d4 b000 	ldr.w	fp, [r4]
    8e38:	e9d0 8300 	ldrd	r8, r3, [r0]
    8e3c:	eb1b 0202 	adds.w	r2, fp, r2
    8e40:	4171      	adcs	r1, r6
    8e42:	ebb8 0202 	subs.w	r2, r8, r2
    8e46:	eb73 0101 	sbcs.w	r1, r3, r1
    8e4a:	d320      	bcc.n	8e8e <MPSL_IRQ_RADIO_Handler+0x1f2>
    8e4c:	89c0      	ldrh	r0, [r0, #14]
    8e4e:	2800      	cmp	r0, #0
    8e50:	f000 810c 	beq.w	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e54:	89e0      	ldrh	r0, [r4, #14]
    8e56:	2800      	cmp	r0, #0
    8e58:	f040 8108 	bne.w	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e5c:	f003 f93e 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e60:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e64:	bf08      	it	eq
    8e66:	200d      	moveq	r0, #13
    8e68:	d00b      	beq.n	8e82 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8e6a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e6e:	3856      	subs	r0, #86	; 0x56
    8e70:	bf08      	it	eq
    8e72:	201c      	moveq	r0, #28
    8e74:	d005      	beq.n	8e82 <MPSL_IRQ_RADIO_Handler+0x1e6>
    8e76:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e7a:	389f      	subs	r0, #159	; 0x9f
    8e7c:	bf14      	ite	ne
    8e7e:	4630      	movne	r0, r6
    8e80:	2032      	moveq	r0, #50	; 0x32
    8e82:	1c41      	adds	r1, r0, #1
    8e84:	ebb8 000b 	subs.w	r0, r8, fp
    8e88:	4288      	cmp	r0, r1
    8e8a:	f280 80ef 	bge.w	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8e8e:	f889 5000 	strb.w	r5, [r9]
    8e92:	f89a 0018 	ldrb.w	r0, [sl, #24]
    8e96:	7c21      	ldrb	r1, [r4, #16]
    8e98:	4281      	cmp	r1, r0
    8e9a:	d207      	bcs.n	8eac <MPSL_IRQ_RADIO_Handler+0x210>
    8e9c:	9804      	ldr	r0, [sp, #16]
    8e9e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    8ea2:	7845      	ldrb	r5, [r0, #1]
    8ea4:	2d20      	cmp	r5, #32
    8ea6:	d1bf      	bne.n	8e28 <MPSL_IRQ_RADIO_Handler+0x18c>
    8ea8:	f000 b8e0 	b.w	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8eac:	f89d 0020 	ldrb.w	r0, [sp, #32]
    8eb0:	eb07 1040 	add.w	r0, r7, r0, lsl #5
    8eb4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    8eb8:	f8d0 9008 	ldr.w	r9, [r0, #8]
    8ebc:	8ac0      	ldrh	r0, [r0, #22]
    8ebe:	eb19 0502 	adds.w	r5, r9, r2
    8ec2:	eb41 0806 	adc.w	r8, r1, r6
    8ec6:	bbb0      	cbnz	r0, 8f36 <MPSL_IRQ_RADIO_Handler+0x29a>
    8ec8:	89e0      	ldrh	r0, [r4, #14]
    8eca:	b3a0      	cbz	r0, 8f36 <MPSL_IRQ_RADIO_Handler+0x29a>
    8ecc:	f003 f906 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ed0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ed4:	bf08      	it	eq
    8ed6:	200d      	moveq	r0, #13
    8ed8:	d00b      	beq.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x256>
    8eda:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ede:	3856      	subs	r0, #86	; 0x56
    8ee0:	bf08      	it	eq
    8ee2:	201c      	moveq	r0, #28
    8ee4:	d005      	beq.n	8ef2 <MPSL_IRQ_RADIO_Handler+0x256>
    8ee6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8eea:	389f      	subs	r0, #159	; 0x9f
    8eec:	bf14      	ite	ne
    8eee:	4630      	movne	r0, r6
    8ef0:	2032      	moveq	r0, #50	; 0x32
    8ef2:	1c41      	adds	r1, r0, #1
    8ef4:	ebb5 0009 	subs.w	r0, r5, r9
    8ef8:	4288      	cmp	r0, r1
    8efa:	da1c      	bge.n	8f36 <MPSL_IRQ_RADIO_Handler+0x29a>
    8efc:	f003 f8ee 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f04:	bf08      	it	eq
    8f06:	200d      	moveq	r0, #13
    8f08:	d00b      	beq.n	8f22 <MPSL_IRQ_RADIO_Handler+0x286>
    8f0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f0e:	3856      	subs	r0, #86	; 0x56
    8f10:	bf08      	it	eq
    8f12:	201c      	moveq	r0, #28
    8f14:	d005      	beq.n	8f22 <MPSL_IRQ_RADIO_Handler+0x286>
    8f16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f1a:	389f      	subs	r0, #159	; 0x9f
    8f1c:	bf14      	ite	ne
    8f1e:	4630      	movne	r0, r6
    8f20:	2032      	moveq	r0, #50	; 0x32
    8f22:	f89d 1020 	ldrb.w	r1, [sp, #32]
    8f26:	1c40      	adds	r0, r0, #1
    8f28:	eb07 1141 	add.w	r1, r7, r1, lsl #5
    8f2c:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    8f30:	1815      	adds	r5, r2, r0
    8f32:	eb43 0806 	adc.w	r8, r3, r6
    8f36:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    8f3a:	1b49      	subs	r1, r1, r5
    8f3c:	eb70 0008 	sbcs.w	r0, r0, r8
    8f40:	d203      	bcs.n	8f4a <MPSL_IRQ_RADIO_Handler+0x2ae>
    8f42:	b00f      	add	sp, #60	; 0x3c
    8f44:	2000      	movs	r0, #0
    8f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f4a:	e9c4 5800 	strd	r5, r8, [r4]
    8f4e:	9818      	ldr	r0, [sp, #96]	; 0x60
    8f50:	900b      	str	r0, [sp, #44]	; 0x2c
    8f52:	a808      	add	r0, sp, #32
    8f54:	900a      	str	r0, [sp, #40]	; 0x28
    8f56:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f58:	f10d 0a1c 	add.w	sl, sp, #28
    8f5c:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    8f60:	2020      	movs	r0, #32
    8f62:	f88d 001c 	strb.w	r0, [sp, #28]
    8f66:	2d20      	cmp	r5, #32
    8f68:	d037      	beq.n	8fda <MPSL_IRQ_RADIO_Handler+0x33e>
    8f6a:	4843      	ldr	r0, [pc, #268]	; (9078 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8f6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8f6e:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    8f72:	bf00      	nop
    8f74:	eb07 1045 	add.w	r0, r7, r5, lsl #5
    8f78:	e9d4 8300 	ldrd	r8, r3, [r4]
    8f7c:	f850 9f08 	ldr.w	r9, [r0, #8]!
    8f80:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    8f84:	eb19 0202 	adds.w	r2, r9, r2
    8f88:	4171      	adcs	r1, r6
    8f8a:	ebb8 0202 	subs.w	r2, r8, r2
    8f8e:	eb73 0101 	sbcs.w	r1, r3, r1
    8f92:	d322      	bcc.n	8fda <MPSL_IRQ_RADIO_Handler+0x33e>
    8f94:	89e1      	ldrh	r1, [r4, #14]
    8f96:	b1c9      	cbz	r1, 8fcc <MPSL_IRQ_RADIO_Handler+0x330>
    8f98:	89c0      	ldrh	r0, [r0, #14]
    8f9a:	b9b8      	cbnz	r0, 8fcc <MPSL_IRQ_RADIO_Handler+0x330>
    8f9c:	f003 f89e 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8fa0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8fa4:	bf08      	it	eq
    8fa6:	200d      	moveq	r0, #13
    8fa8:	d00b      	beq.n	8fc2 <MPSL_IRQ_RADIO_Handler+0x326>
    8faa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8fae:	3856      	subs	r0, #86	; 0x56
    8fb0:	bf08      	it	eq
    8fb2:	201c      	moveq	r0, #28
    8fb4:	d005      	beq.n	8fc2 <MPSL_IRQ_RADIO_Handler+0x326>
    8fb6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8fba:	389f      	subs	r0, #159	; 0x9f
    8fbc:	bf14      	ite	ne
    8fbe:	4630      	movne	r0, r6
    8fc0:	2032      	moveq	r0, #50	; 0x32
    8fc2:	1c41      	adds	r1, r0, #1
    8fc4:	ebb8 0009 	subs.w	r0, r8, r9
    8fc8:	4288      	cmp	r0, r1
    8fca:	db06      	blt.n	8fda <MPSL_IRQ_RADIO_Handler+0x33e>
    8fcc:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8fd0:	f88a 5000 	strb.w	r5, [sl]
    8fd4:	7845      	ldrb	r5, [r0, #1]
    8fd6:	2d20      	cmp	r5, #32
    8fd8:	d1cc      	bne.n	8f74 <MPSL_IRQ_RADIO_Handler+0x2d8>
    8fda:	980a      	ldr	r0, [sp, #40]	; 0x28
    8fdc:	f89a 1000 	ldrb.w	r1, [sl]
    8fe0:	2d20      	cmp	r5, #32
    8fe2:	7001      	strb	r1, [r0, #0]
    8fe4:	e9dd 800a 	ldrd	r8, r0, [sp, #40]	; 0x28
    8fe8:	d040      	beq.n	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    8fea:	4923      	ldr	r1, [pc, #140]	; (9078 <MPSL_IRQ_RADIO_Handler+0x3dc>)
    8fec:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    8ff0:	f8cd 000c 	str.w	r0, [sp, #12]
    8ff4:	eb07 1945 	add.w	r9, r7, r5, lsl #5
    8ff8:	f109 0008 	add.w	r0, r9, #8
    8ffc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9000:	f8d4 b000 	ldr.w	fp, [r4]
    9004:	e9d0 a300 	ldrd	sl, r3, [r0]
    9008:	eb1b 0202 	adds.w	r2, fp, r2
    900c:	4171      	adcs	r1, r6
    900e:	ebba 0202 	subs.w	r2, sl, r2
    9012:	eb73 0101 	sbcs.w	r1, r3, r1
    9016:	d31b      	bcc.n	9050 <MPSL_IRQ_RADIO_Handler+0x3b4>
    9018:	89c0      	ldrh	r0, [r0, #14]
    901a:	b338      	cbz	r0, 906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    901c:	89e0      	ldrh	r0, [r4, #14]
    901e:	bb28      	cbnz	r0, 906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9020:	f003 f85c 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9024:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9028:	bf08      	it	eq
    902a:	200d      	moveq	r0, #13
    902c:	d00b      	beq.n	9046 <MPSL_IRQ_RADIO_Handler+0x3aa>
    902e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9032:	3856      	subs	r0, #86	; 0x56
    9034:	bf08      	it	eq
    9036:	201c      	moveq	r0, #28
    9038:	d005      	beq.n	9046 <MPSL_IRQ_RADIO_Handler+0x3aa>
    903a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    903e:	389f      	subs	r0, #159	; 0x9f
    9040:	bf14      	ite	ne
    9042:	4630      	movne	r0, r6
    9044:	2032      	moveq	r0, #50	; 0x32
    9046:	1c41      	adds	r1, r0, #1
    9048:	ebba 000b 	subs.w	r0, sl, fp
    904c:	4288      	cmp	r0, r1
    904e:	da0d      	bge.n	906c <MPSL_IRQ_RADIO_Handler+0x3d0>
    9050:	f888 5000 	strb.w	r5, [r8]
    9054:	f899 1018 	ldrb.w	r1, [r9, #24]
    9058:	7c20      	ldrb	r0, [r4, #16]
    905a:	4288      	cmp	r0, r1
    905c:	f4bf af26 	bcs.w	8eac <MPSL_IRQ_RADIO_Handler+0x210>
    9060:	9803      	ldr	r0, [sp, #12]
    9062:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9066:	7845      	ldrb	r5, [r0, #1]
    9068:	2d20      	cmp	r5, #32
    906a:	d1c3      	bne.n	8ff4 <MPSL_IRQ_RADIO_Handler+0x358>
    906c:	b00f      	add	sp, #60	; 0x3c
    906e:	2001      	movs	r0, #1
    9070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9074:	20001238 	.word	0x20001238
    9078:	200011b8 	.word	0x200011b8
    907c:	20000db8 	.word	0x20000db8
    9080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9084:	b083      	sub	sp, #12
    9086:	4691      	mov	r9, r2
    9088:	4604      	mov	r4, r0
    908a:	460d      	mov	r5, r1
    908c:	4698      	mov	r8, r3
    908e:	aa01      	add	r2, sp, #4
    9090:	4669      	mov	r1, sp
    9092:	4618      	mov	r0, r3
    9094:	f002 f94c 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9098:	f002 fe48 	bl	bd2c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    909c:	f002 f92c 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    90a0:	4607      	mov	r7, r0
    90a2:	481e      	ldr	r0, [pc, #120]	; (911c <MPSL_IRQ_RADIO_Handler+0x480>)
    90a4:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    90a8:	2600      	movs	r6, #0
    90aa:	2920      	cmp	r1, #32
    90ac:	d009      	beq.n	90c2 <MPSL_IRQ_RADIO_Handler+0x426>
    90ae:	6882      	ldr	r2, [r0, #8]
    90b0:	68c1      	ldr	r1, [r0, #12]
    90b2:	6900      	ldr	r0, [r0, #16]
    90b4:	1d83      	adds	r3, r0, #6
    90b6:	f146 0000 	adc.w	r0, r6, #0
    90ba:	18d4      	adds	r4, r2, r3
    90bc:	eb41 0500 	adc.w	r5, r1, r0
    90c0:	e026      	b.n	9110 <MPSL_IRQ_RADIO_Handler+0x474>
    90c2:	340a      	adds	r4, #10
    90c4:	f145 0500 	adc.w	r5, r5, #0
    90c8:	f1b8 0f00 	cmp.w	r8, #0
    90cc:	d017      	beq.n	90fe <MPSL_IRQ_RADIO_Handler+0x462>
    90ce:	f003 f94b 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    90d2:	b9a0      	cbnz	r0, 90fe <MPSL_IRQ_RADIO_Handler+0x462>
    90d4:	f003 f802 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90dc:	bf08      	it	eq
    90de:	200d      	moveq	r0, #13
    90e0:	d00b      	beq.n	90fa <MPSL_IRQ_RADIO_Handler+0x45e>
    90e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90e6:	3856      	subs	r0, #86	; 0x56
    90e8:	bf08      	it	eq
    90ea:	201c      	moveq	r0, #28
    90ec:	d005      	beq.n	90fa <MPSL_IRQ_RADIO_Handler+0x45e>
    90ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90f2:	389f      	subs	r0, #159	; 0x9f
    90f4:	bf14      	ite	ne
    90f6:	4630      	movne	r0, r6
    90f8:	2032      	moveq	r0, #50	; 0x32
    90fa:	1904      	adds	r4, r0, r4
    90fc:	4175      	adcs	r5, r6
    90fe:	f1b9 0f00 	cmp.w	r9, #0
    9102:	d105      	bne.n	9110 <MPSL_IRQ_RADIO_Handler+0x474>
    9104:	9800      	ldr	r0, [sp, #0]
    9106:	4287      	cmp	r7, r0
    9108:	d902      	bls.n	9110 <MPSL_IRQ_RADIO_Handler+0x474>
    910a:	1a38      	subs	r0, r7, r0
    910c:	1904      	adds	r4, r0, r4
    910e:	4175      	adcs	r5, r6
    9110:	b003      	add	sp, #12
    9112:	4620      	mov	r0, r4
    9114:	4629      	mov	r1, r5
    9116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    911a:	0000      	.short	0x0000
    911c:	20001238 	.word	0x20001238
    9120:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9124:	b081      	sub	sp, #4
    9126:	4605      	mov	r5, r0
    9128:	9802      	ldr	r0, [sp, #8]
    912a:	494a      	ldr	r1, [pc, #296]	; (9254 <MPSL_IRQ_RADIO_Handler+0x5b8>)
    912c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9130:	4408      	add	r0, r1
    9132:	2600      	movs	r6, #0
    9134:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9138:	2020      	movs	r0, #32
    913a:	4692      	mov	sl, r2
    913c:	7010      	strb	r0, [r2, #0]
    913e:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    9142:	2c20      	cmp	r4, #32
    9144:	d036      	beq.n	91b4 <MPSL_IRQ_RADIO_Handler+0x518>
    9146:	9902      	ldr	r1, [sp, #8]
    9148:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    914c:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    9150:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    9154:	e9d5 7300 	ldrd	r7, r3, [r5]
    9158:	f850 8f08 	ldr.w	r8, [r0, #8]!
    915c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9160:	eb18 0202 	adds.w	r2, r8, r2
    9164:	4171      	adcs	r1, r6
    9166:	1aba      	subs	r2, r7, r2
    9168:	eb73 0101 	sbcs.w	r1, r3, r1
    916c:	d322      	bcc.n	91b4 <MPSL_IRQ_RADIO_Handler+0x518>
    916e:	89e9      	ldrh	r1, [r5, #14]
    9170:	b1c9      	cbz	r1, 91a6 <MPSL_IRQ_RADIO_Handler+0x50a>
    9172:	89c0      	ldrh	r0, [r0, #14]
    9174:	b9b8      	cbnz	r0, 91a6 <MPSL_IRQ_RADIO_Handler+0x50a>
    9176:	f002 ffb1 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    917a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    917e:	bf08      	it	eq
    9180:	200d      	moveq	r0, #13
    9182:	d00b      	beq.n	919c <MPSL_IRQ_RADIO_Handler+0x500>
    9184:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9188:	3856      	subs	r0, #86	; 0x56
    918a:	bf08      	it	eq
    918c:	201c      	moveq	r0, #28
    918e:	d005      	beq.n	919c <MPSL_IRQ_RADIO_Handler+0x500>
    9190:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9194:	389f      	subs	r0, #159	; 0x9f
    9196:	bf14      	ite	ne
    9198:	4630      	movne	r0, r6
    919a:	2032      	moveq	r0, #50	; 0x32
    919c:	1c41      	adds	r1, r0, #1
    919e:	ebb7 0008 	subs.w	r0, r7, r8
    91a2:	4288      	cmp	r0, r1
    91a4:	db06      	blt.n	91b4 <MPSL_IRQ_RADIO_Handler+0x518>
    91a6:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    91aa:	f88a 4000 	strb.w	r4, [sl]
    91ae:	7844      	ldrb	r4, [r0, #1]
    91b0:	2c20      	cmp	r4, #32
    91b2:	d1cd      	bne.n	9150 <MPSL_IRQ_RADIO_Handler+0x4b4>
    91b4:	9804      	ldr	r0, [sp, #16]
    91b6:	f89a 1000 	ldrb.w	r1, [sl]
    91ba:	2c20      	cmp	r4, #32
    91bc:	7001      	strb	r1, [r0, #0]
    91be:	9f04      	ldr	r7, [sp, #16]
    91c0:	9802      	ldr	r0, [sp, #8]
    91c2:	d042      	beq.n	924a <MPSL_IRQ_RADIO_Handler+0x5ae>
    91c4:	4924      	ldr	r1, [pc, #144]	; (9258 <MPSL_IRQ_RADIO_Handler+0x5bc>)
    91c6:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    91ca:	9000      	str	r0, [sp, #0]
    91cc:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    91d0:	f8d5 b000 	ldr.w	fp, [r5]
    91d4:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    91d8:	f108 0008 	add.w	r0, r8, #8
    91dc:	eb1b 0201 	adds.w	r2, fp, r1
    91e0:	eb43 0106 	adc.w	r1, r3, r6
    91e4:	e9d0 a300 	ldrd	sl, r3, [r0]
    91e8:	ebba 0202 	subs.w	r2, sl, r2
    91ec:	eb73 0101 	sbcs.w	r1, r3, r1
    91f0:	d31b      	bcc.n	922a <MPSL_IRQ_RADIO_Handler+0x58e>
    91f2:	89c0      	ldrh	r0, [r0, #14]
    91f4:	b348      	cbz	r0, 924a <MPSL_IRQ_RADIO_Handler+0x5ae>
    91f6:	89e8      	ldrh	r0, [r5, #14]
    91f8:	bb38      	cbnz	r0, 924a <MPSL_IRQ_RADIO_Handler+0x5ae>
    91fa:	f002 ff6f 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91fe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9202:	bf08      	it	eq
    9204:	200d      	moveq	r0, #13
    9206:	d00b      	beq.n	9220 <MPSL_IRQ_RADIO_Handler+0x584>
    9208:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    920c:	3856      	subs	r0, #86	; 0x56
    920e:	bf08      	it	eq
    9210:	201c      	moveq	r0, #28
    9212:	d005      	beq.n	9220 <MPSL_IRQ_RADIO_Handler+0x584>
    9214:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9218:	389f      	subs	r0, #159	; 0x9f
    921a:	bf14      	ite	ne
    921c:	4630      	movne	r0, r6
    921e:	2032      	moveq	r0, #50	; 0x32
    9220:	1c41      	adds	r1, r0, #1
    9222:	ebba 000b 	subs.w	r0, sl, fp
    9226:	4288      	cmp	r0, r1
    9228:	da0f      	bge.n	924a <MPSL_IRQ_RADIO_Handler+0x5ae>
    922a:	703c      	strb	r4, [r7, #0]
    922c:	f898 1018 	ldrb.w	r1, [r8, #24]
    9230:	7c28      	ldrb	r0, [r5, #16]
    9232:	4288      	cmp	r0, r1
    9234:	d303      	bcc.n	923e <MPSL_IRQ_RADIO_Handler+0x5a2>
    9236:	b005      	add	sp, #20
    9238:	2000      	movs	r0, #0
    923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    923e:	9800      	ldr	r0, [sp, #0]
    9240:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    9244:	7844      	ldrb	r4, [r0, #1]
    9246:	2c20      	cmp	r4, #32
    9248:	d1c0      	bne.n	91cc <MPSL_IRQ_RADIO_Handler+0x530>
    924a:	b005      	add	sp, #20
    924c:	2001      	movs	r0, #1
    924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9252:	0000      	.short	0x0000
    9254:	20001238 	.word	0x20001238
    9258:	200011b8 	.word	0x200011b8
    925c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9260:	b09c      	sub	sp, #112	; 0x70
    9262:	461f      	mov	r7, r3
    9264:	f002 fab4 	bl	b7d0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9268:	4604      	mov	r4, r0
    926a:	460d      	mov	r5, r1
    926c:	f002 fd5e 	bl	bd2c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9270:	4606      	mov	r6, r0
    9272:	981e      	ldr	r0, [sp, #120]	; 0x78
    9274:	2801      	cmp	r0, #1
    9276:	bf18      	it	ne
    9278:	2802      	cmpne	r0, #2
    927a:	d005      	beq.n	9288 <MPSL_IRQ_RADIO_Handler+0x5ec>
    927c:	f640 1156 	movw	r1, #2390	; 0x956
    9280:	f04f 0070 	mov.w	r0, #112	; 0x70
    9284:	f003 f8e8 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9288:	49fe      	ldr	r1, [pc, #1016]	; (9684 <MPSL_IRQ_RADIO_Handler+0x9e8>)
    928a:	2001      	movs	r0, #1
    928c:	6008      	str	r0, [r1, #0]
    928e:	49fe      	ldr	r1, [pc, #1016]	; (9688 <MPSL_IRQ_RADIO_Handler+0x9ec>)
    9290:	6889      	ldr	r1, [r1, #8]
    9292:	6008      	str	r0, [r1, #0]
    9294:	2000      	movs	r0, #0
    9296:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    929a:	900c      	str	r0, [sp, #48]	; 0x30
    929c:	1e40      	subs	r0, r0, #1
    929e:	900d      	str	r0, [sp, #52]	; 0x34
    92a0:	48fa      	ldr	r0, [pc, #1000]	; (968c <MPSL_IRQ_RADIO_Handler+0x9f0>)
    92a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    92a6:	eb00 1047 	add.w	r0, r0, r7, lsl #5
    92aa:	f100 0108 	add.w	r1, r0, #8
    92ae:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    92b2:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    92b6:	e9d0 1006 	ldrd	r1, r0, [r0, #24]
    92ba:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    92be:	980e      	ldr	r0, [sp, #56]	; 0x38
    92c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    92c4:	f007 fc3f 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    92c8:	4602      	mov	r2, r0
    92ca:	f8bd 8046 	ldrh.w	r8, [sp, #70]	; 0x46
    92ce:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    92d2:	4bef      	ldr	r3, [pc, #956]	; (9690 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    92d4:	4440      	add	r0, r8
    92d6:	1c41      	adds	r1, r0, #1
    92d8:	1850      	adds	r0, r2, r1
    92da:	429a      	cmp	r2, r3
    92dc:	d856      	bhi.n	938c <MPSL_IRQ_RADIO_Handler+0x6f0>
    92de:	4aed      	ldr	r2, [pc, #948]	; (9694 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    92e0:	4291      	cmp	r1, r2
    92e2:	dc5b      	bgt.n	939c <MPSL_IRQ_RADIO_Handler+0x700>
    92e4:	4252      	negs	r2, r2
    92e6:	4291      	cmp	r1, r2
    92e8:	db60      	blt.n	93ac <MPSL_IRQ_RADIO_Handler+0x710>
    92ea:	1c59      	adds	r1, r3, #1
    92ec:	4281      	cmp	r1, r0
    92ee:	bfdc      	itt	le
    92f0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92f4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92f8:	dd05      	ble.n	9306 <MPSL_IRQ_RADIO_Handler+0x66a>
    92fa:	2800      	cmp	r0, #0
    92fc:	bfbc      	itt	lt
    92fe:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9302:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9306:	9017      	str	r0, [sp, #92]	; 0x5c
    9308:	48e3      	ldr	r0, [pc, #908]	; (9698 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    930a:	f1b8 0f00 	cmp.w	r8, #0
    930e:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    9312:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    9316:	bf14      	ite	ne
    9318:	f04f 0a01 	movne.w	sl, #1
    931c:	f04f 0a00 	moveq.w	sl, #0
    9320:	f003 f822 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9324:	9019      	str	r0, [sp, #100]	; 0x64
    9326:	f1ba 0f00 	cmp.w	sl, #0
    932a:	d00b      	beq.n	9344 <MPSL_IRQ_RADIO_Handler+0x6a8>
    932c:	49db      	ldr	r1, [pc, #876]	; (969c <MPSL_IRQ_RADIO_Handler+0xa00>)
    932e:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    9332:	ea6f 0200 	mvn.w	r2, r0
    9336:	ea72 0001 	orns	r0, r2, r1
    933a:	bf02      	ittt	eq
    933c:	9819      	ldreq	r0, [sp, #100]	; 0x64
    933e:	2800      	cmpeq	r0, #0
    9340:	2701      	moveq	r7, #1
    9342:	d001      	beq.n	9348 <MPSL_IRQ_RADIO_Handler+0x6ac>
    9344:	f04f 0700 	mov.w	r7, #0
    9348:	f002 fec8 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    934c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9350:	bf08      	it	eq
    9352:	200d      	moveq	r0, #13
    9354:	d00b      	beq.n	936e <MPSL_IRQ_RADIO_Handler+0x6d2>
    9356:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    935a:	3856      	subs	r0, #86	; 0x56
    935c:	bf08      	it	eq
    935e:	201c      	moveq	r0, #28
    9360:	d005      	beq.n	936e <MPSL_IRQ_RADIO_Handler+0x6d2>
    9362:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9366:	389f      	subs	r0, #159	; 0x9f
    9368:	bf14      	ite	ne
    936a:	2000      	movne	r0, #0
    936c:	2032      	moveq	r0, #50	; 0x32
    936e:	f04f 0900 	mov.w	r9, #0
    9372:	46cb      	mov	fp, r9
    9374:	9016      	str	r0, [sp, #88]	; 0x58
    9376:	4546      	cmp	r6, r8
    9378:	d936      	bls.n	93e8 <MPSL_IRQ_RADIO_Handler+0x74c>
    937a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    937c:	43f3      	mvns	r3, r6
    937e:	f8df c310 	ldr.w	ip, [pc, #784]	; 9690 <MPSL_IRQ_RADIO_Handler+0x9f4>
    9382:	18c8      	adds	r0, r1, r3
    9384:	46e9      	mov	r9, sp
    9386:	aa1a      	add	r2, sp, #104	; 0x68
    9388:	4561      	cmp	r1, ip
    938a:	d904      	bls.n	9396 <MPSL_IRQ_RADIO_Handler+0x6fa>
    938c:	f240 517f 	movw	r1, #1407	; 0x57f
    9390:	2070      	movs	r0, #112	; 0x70
    9392:	f003 f861 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9396:	49bf      	ldr	r1, [pc, #764]	; (9694 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9398:	428b      	cmp	r3, r1
    939a:	dd04      	ble.n	93a6 <MPSL_IRQ_RADIO_Handler+0x70a>
    939c:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    93a0:	2070      	movs	r0, #112	; 0x70
    93a2:	f003 f859 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93a6:	49be      	ldr	r1, [pc, #760]	; (96a0 <MPSL_IRQ_RADIO_Handler+0xa04>)
    93a8:	428b      	cmp	r3, r1
    93aa:	da04      	bge.n	93b6 <MPSL_IRQ_RADIO_Handler+0x71a>
    93ac:	f240 5181 	movw	r1, #1409	; 0x581
    93b0:	2070      	movs	r0, #112	; 0x70
    93b2:	f003 f851 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    93b6:	49bb      	ldr	r1, [pc, #748]	; (96a4 <MPSL_IRQ_RADIO_Handler+0xa08>)
    93b8:	4281      	cmp	r1, r0
    93ba:	bfdc      	itt	le
    93bc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    93c0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    93c4:	dd05      	ble.n	93d2 <MPSL_IRQ_RADIO_Handler+0x736>
    93c6:	2800      	cmp	r0, #0
    93c8:	bfbc      	itt	lt
    93ca:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    93ce:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93d2:	4649      	mov	r1, r9
    93d4:	f001 ffac 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93d8:	9800      	ldr	r0, [sp, #0]
    93da:	990e      	ldr	r1, [sp, #56]	; 0x38
    93dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93e0:	9000      	str	r0, [sp, #0]
    93e2:	1a08      	subs	r0, r1, r0
    93e4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93e8:	2f00      	cmp	r7, #0
    93ea:	bf18      	it	ne
    93ec:	f8dd b058 	ldrne.w	fp, [sp, #88]	; 0x58
    93f0:	d105      	bne.n	93fe <MPSL_IRQ_RADIO_Handler+0x762>
    93f2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    93f6:	2800      	cmp	r0, #0
    93f8:	bf18      	it	ne
    93fa:	f04f 0b02 	movne.w	fp, #2
    93fe:	43e0      	mvns	r0, r4
    9400:	ea70 0005 	orns	r0, r0, r5
    9404:	d022      	beq.n	944c <MPSL_IRQ_RADIO_Handler+0x7b0>
    9406:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    940a:	1a22      	subs	r2, r4, r0
    940c:	eb75 0201 	sbcs.w	r2, r5, r1
    9410:	d20c      	bcs.n	942c <MPSL_IRQ_RADIO_Handler+0x790>
    9412:	1b02      	subs	r2, r0, r4
    9414:	eb61 0105 	sbc.w	r1, r1, r5
    9418:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    941c:	f171 0100 	sbcs.w	r1, r1, #0
    9420:	d311      	bcc.n	9446 <MPSL_IRQ_RADIO_Handler+0x7aa>
    9422:	f640 1195 	movw	r1, #2453	; 0x995
    9426:	2070      	movs	r0, #112	; 0x70
    9428:	f003 f816 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    942c:	1a22      	subs	r2, r4, r0
    942e:	eb65 0101 	sbc.w	r1, r5, r1
    9432:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9436:	f171 0100 	sbcs.w	r1, r1, #0
    943a:	d304      	bcc.n	9446 <MPSL_IRQ_RADIO_Handler+0x7aa>
    943c:	f640 1199 	movw	r1, #2457	; 0x999
    9440:	2070      	movs	r0, #112	; 0x70
    9442:	f003 f809 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9446:	1b00      	subs	r0, r0, r4
    9448:	2801      	cmp	r0, #1
    944a:	da03      	bge.n	9454 <MPSL_IRQ_RADIO_Handler+0x7b8>
    944c:	981c      	ldr	r0, [sp, #112]	; 0x70
    944e:	901a      	str	r0, [sp, #104]	; 0x68
    9450:	2003      	movs	r0, #3
    9452:	e00d      	b.n	9470 <MPSL_IRQ_RADIO_Handler+0x7d4>
    9454:	b157      	cbz	r7, 946c <MPSL_IRQ_RADIO_Handler+0x7d0>
    9456:	4891      	ldr	r0, [pc, #580]	; (969c <MPSL_IRQ_RADIO_Handler+0xa00>)
    9458:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    945c:	b130      	cbz	r0, 946c <MPSL_IRQ_RADIO_Handler+0x7d0>
    945e:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9462:	f110 0b00 	adds.w	fp, r0, #0
    9466:	bf18      	it	ne
    9468:	f04f 0b02 	movne.w	fp, #2
    946c:	2000      	movs	r0, #0
    946e:	941a      	str	r4, [sp, #104]	; 0x68
    9470:	4483      	add	fp, r0
    9472:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    9476:	ebb0 0009 	subs.w	r0, r0, r9
    947a:	f162 0100 	sbc.w	r1, r2, #0
    947e:	1e42      	subs	r2, r0, #1
    9480:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9482:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    9486:	1ad3      	subs	r3, r2, r3
    9488:	455b      	cmp	r3, fp
    948a:	db08      	blt.n	949e <MPSL_IRQ_RADIO_Handler+0x802>
    948c:	f1b9 0f00 	cmp.w	r9, #0
    9490:	d032      	beq.n	94f8 <MPSL_IRQ_RADIO_Handler+0x85c>
    9492:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9494:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    9498:	444b      	add	r3, r9
    949a:	9310      	str	r3, [sp, #64]	; 0x40
    949c:	e02c      	b.n	94f8 <MPSL_IRQ_RADIO_Handler+0x85c>
    949e:	f1b9 0f00 	cmp.w	r9, #0
    94a2:	d005      	beq.n	94b0 <MPSL_IRQ_RADIO_Handler+0x814>
    94a4:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    94a8:	b920      	cbnz	r0, 94b4 <MPSL_IRQ_RADIO_Handler+0x818>
    94aa:	f002 fc35 	bl	bd18 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    94ae:	b108      	cbz	r0, 94b4 <MPSL_IRQ_RADIO_Handler+0x818>
    94b0:	b9af      	cbnz	r7, 94de <MPSL_IRQ_RADIO_Handler+0x842>
    94b2:	e00c      	b.n	94ce <MPSL_IRQ_RADIO_Handler+0x832>
    94b4:	b92f      	cbnz	r7, 94c2 <MPSL_IRQ_RADIO_Handler+0x826>
    94b6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    94ba:	2800      	cmp	r0, #0
    94bc:	bf18      	it	ne
    94be:	f1ab 0b02 	subne.w	fp, fp, #2
    94c2:	f04f 0900 	mov.w	r9, #0
    94c6:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
    94ca:	464e      	mov	r6, r9
    94cc:	e007      	b.n	94de <MPSL_IRQ_RADIO_Handler+0x842>
    94ce:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    94d2:	b120      	cbz	r0, 94de <MPSL_IRQ_RADIO_Handler+0x842>
    94d4:	2000      	movs	r0, #0
    94d6:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    94da:	f1ab 0b02 	sub.w	fp, fp, #2
    94de:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    94e2:	ebb0 0009 	subs.w	r0, r0, r9
    94e6:	f162 0100 	sbc.w	r1, r2, #0
    94ea:	1e42      	subs	r2, r0, #1
    94ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    94ee:	f141 3eff 	adc.w	lr, r1, #4294967295	; 0xffffffff
    94f2:	1ad3      	subs	r3, r2, r3
    94f4:	455b      	cmp	r3, fp
    94f6:	db7d      	blt.n	95f4 <MPSL_IRQ_RADIO_Handler+0x958>
    94f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    94fa:	b99b      	cbnz	r3, 9524 <MPSL_IRQ_RADIO_Handler+0x888>
    94fc:	4b67      	ldr	r3, [pc, #412]	; (969c <MPSL_IRQ_RADIO_Handler+0xa00>)
    94fe:	e9d3 c30e 	ldrd	ip, r3, [r3, #56]	; 0x38
    9502:	ea6f 090c 	mvn.w	r9, ip
    9506:	ea79 0903 	orns	r9, r9, r3
    950a:	d00b      	beq.n	9524 <MPSL_IRQ_RADIO_Handler+0x888>
    950c:	ebb0 0c0c 	subs.w	ip, r0, ip
    9510:	9816      	ldr	r0, [sp, #88]	; 0x58
    9512:	eb61 0303 	sbc.w	r3, r1, r3
    9516:	ebbc 0000 	subs.w	r0, ip, r0
    951a:	f173 0000 	sbcs.w	r0, r3, #0
    951e:	bf38      	it	cc
    9520:	2000      	movcc	r0, #0
    9522:	d300      	bcc.n	9526 <MPSL_IRQ_RADIO_Handler+0x88a>
    9524:	2001      	movs	r0, #1
    9526:	ea3a 0000 	bics.w	r0, sl, r0
    952a:	d163      	bne.n	95f4 <MPSL_IRQ_RADIO_Handler+0x958>
    952c:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    9530:	e9cd 0107 	strd	r0, r1, [sp, #28]
    9534:	981e      	ldr	r0, [sp, #120]	; 0x78
    9536:	4691      	mov	r9, r2
    9538:	e9cd 7018 	strd	r7, r0, [sp, #96]	; 0x60
    953c:	46f3      	mov	fp, lr
    953e:	2700      	movs	r7, #0
    9540:	f002 fdcc 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9544:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9548:	bf08      	it	eq
    954a:	200d      	moveq	r0, #13
    954c:	d00b      	beq.n	9566 <MPSL_IRQ_RADIO_Handler+0x8ca>
    954e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9552:	3856      	subs	r0, #86	; 0x56
    9554:	bf08      	it	eq
    9556:	201c      	moveq	r0, #28
    9558:	d005      	beq.n	9566 <MPSL_IRQ_RADIO_Handler+0x8ca>
    955a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    955e:	389f      	subs	r0, #159	; 0x9f
    9560:	bf14      	ite	ne
    9562:	4638      	movne	r0, r7
    9564:	2032      	moveq	r0, #50	; 0x32
    9566:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    956a:	300b      	adds	r0, #11
    956c:	ebb9 0202 	subs.w	r2, r9, r2
    9570:	eb6b 0303 	sbc.w	r3, fp, r3
    9574:	1a10      	subs	r0, r2, r0
    9576:	f173 0000 	sbcs.w	r0, r3, #0
    957a:	d22a      	bcs.n	95d2 <MPSL_IRQ_RADIO_Handler+0x936>
    957c:	9819      	ldr	r0, [sp, #100]	; 0x64
    957e:	2801      	cmp	r0, #1
    9580:	d002      	beq.n	9588 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9582:	9818      	ldr	r0, [sp, #96]	; 0x60
    9584:	b148      	cbz	r0, 959a <MPSL_IRQ_RADIO_Handler+0x8fe>
    9586:	e017      	b.n	95b8 <MPSL_IRQ_RADIO_Handler+0x91c>
    9588:	43e0      	mvns	r0, r4
    958a:	ea70 0005 	orns	r0, r0, r5
    958e:	d127      	bne.n	95e0 <MPSL_IRQ_RADIO_Handler+0x944>
    9590:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9594:	2070      	movs	r0, #112	; 0x70
    9596:	f002 ff5f 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    959a:	43e0      	mvns	r0, r4
    959c:	ea70 0005 	orns	r0, r0, r5
    95a0:	d00a      	beq.n	95b8 <MPSL_IRQ_RADIO_Handler+0x91c>
    95a2:	d01d      	beq.n	95e0 <MPSL_IRQ_RADIO_Handler+0x944>
    95a4:	ebb4 0009 	subs.w	r0, r4, r9
    95a8:	eb65 010b 	sbc.w	r1, r5, fp
    95ac:	2300      	movs	r3, #0
    95ae:	f1d0 0204 	rsbs	r2, r0, #4
    95b2:	eb73 0201 	sbcs.w	r2, r3, r1
    95b6:	da06      	bge.n	95c6 <MPSL_IRQ_RADIO_Handler+0x92a>
    95b8:	464c      	mov	r4, r9
    95ba:	465d      	mov	r5, fp
    95bc:	4620      	mov	r0, r4
    95be:	4629      	mov	r1, r5
    95c0:	f001 ffe6 	bl	b590 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    95c4:	e00c      	b.n	95e0 <MPSL_IRQ_RADIO_Handler+0x944>
    95c6:	2200      	movs	r2, #0
    95c8:	1a10      	subs	r0, r2, r0
    95ca:	eb72 0001 	sbcs.w	r0, r2, r1
    95ce:	db11      	blt.n	95f4 <MPSL_IRQ_RADIO_Handler+0x958>
    95d0:	e006      	b.n	95e0 <MPSL_IRQ_RADIO_Handler+0x944>
    95d2:	464c      	mov	r4, r9
    95d4:	465d      	mov	r5, fp
    95d6:	4620      	mov	r0, r4
    95d8:	4629      	mov	r1, r5
    95da:	f001 ffd9 	bl	b590 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    95de:	4657      	mov	r7, sl
    95e0:	43e1      	mvns	r1, r4
    95e2:	ea71 0005 	orns	r0, r1, r5
    95e6:	d071      	beq.n	96cc <MPSL_IRQ_RADIO_Handler+0xa30>
    95e8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    95ec:	f04f 0b00 	mov.w	fp, #0
    95f0:	990e      	ldr	r1, [sp, #56]	; 0x38
    95f2:	e000      	b.n	95f6 <MPSL_IRQ_RADIO_Handler+0x95a>
    95f4:	e06f      	b.n	96d6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    95f6:	1a0b      	subs	r3, r1, r0
    95f8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    95fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9600:	eb11 010c 	adds.w	r1, r1, ip
    9604:	1a08      	subs	r0, r1, r0
    9606:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    960a:	2b01      	cmp	r3, #1
    960c:	d363      	bcc.n	96d6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    960e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    9612:	bf98      	it	ls
    9614:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9618:	d85d      	bhi.n	96d6 <MPSL_IRQ_RADIO_Handler+0xa3a>
    961a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    961e:	f007 fa92 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9622:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9624:	4a1b      	ldr	r2, [pc, #108]	; (9694 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9626:	1a0d      	subs	r5, r1, r0
    9628:	1aaa      	subs	r2, r5, r2
    962a:	f17b 0200 	sbcs.w	r2, fp, #0
    962e:	d316      	bcc.n	965e <MPSL_IRQ_RADIO_Handler+0x9c2>
    9630:	4b18      	ldr	r3, [pc, #96]	; (9694 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    9632:	1a42      	subs	r2, r0, r1
    9634:	1ad3      	subs	r3, r2, r3
    9636:	f17b 0300 	sbcs.w	r3, fp, #0
    963a:	d310      	bcc.n	965e <MPSL_IRQ_RADIO_Handler+0x9c2>
    963c:	4b14      	ldr	r3, [pc, #80]	; (9690 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    963e:	42ab      	cmp	r3, r5
    9640:	bf3e      	ittt	cc
    9642:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9646:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    964a:	1845      	addcc	r5, r0, r1
    964c:	d307      	bcc.n	965e <MPSL_IRQ_RADIO_Handler+0x9c2>
    964e:	4293      	cmp	r3, r2
    9650:	d245      	bcs.n	96de <MPSL_IRQ_RADIO_Handler+0xa42>
    9652:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9656:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    965a:	4408      	add	r0, r1
    965c:	4245      	negs	r5, r0
    965e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 969c <MPSL_IRQ_RADIO_Handler+0xa00>
    9662:	f899 0022 	ldrb.w	r0, [r9, #34]	; 0x22
    9666:	b378      	cbz	r0, 96c8 <MPSL_IRQ_RADIO_Handler+0xa2c>
    9668:	981e      	ldr	r0, [sp, #120]	; 0x78
    966a:	2801      	cmp	r0, #1
    966c:	d005      	beq.n	967a <MPSL_IRQ_RADIO_Handler+0x9de>
    966e:	2002      	movs	r0, #2
    9670:	f002 fa1a 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9674:	2001      	movs	r0, #1
    9676:	f002 fa17 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    967a:	45b0      	cmp	r8, r6
    967c:	d240      	bcs.n	9700 <MPSL_IRQ_RADIO_Handler+0xa64>
    967e:	eba5 0106 	sub.w	r1, r5, r6
    9682:	e011      	b.n	96a8 <MPSL_IRQ_RADIO_Handler+0xa0c>
    9684:	40000508 	.word	0x40000508
    9688:	2000030c 	.word	0x2000030c
    968c:	20000db8 	.word	0x20000db8
    9690:	1e847fff 	.word	0x1e847fff
    9694:	0f424000 	.word	0x0f424000
    9698:	200011b8 	.word	0x200011b8
    969c:	20001238 	.word	0x20001238
    96a0:	f0bdc000 	.word	0xf0bdc000
    96a4:	1e848000 	.word	0x1e848000
    96a8:	f04f 0002 	mov.w	r0, #2
    96ac:	f002 f942 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96b0:	b398      	cbz	r0, 971a <MPSL_IRQ_RADIO_Handler+0xa7e>
    96b2:	f1b8 0f00 	cmp.w	r8, #0
    96b6:	bf1c      	itt	ne
    96b8:	eba5 0108 	subne.w	r1, r5, r8
    96bc:	2001      	movne	r0, #1
    96be:	d035      	beq.n	972c <MPSL_IRQ_RADIO_Handler+0xa90>
    96c0:	f002 f938 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c4:	b348      	cbz	r0, 971a <MPSL_IRQ_RADIO_Handler+0xa7e>
    96c6:	e031      	b.n	972c <MPSL_IRQ_RADIO_Handler+0xa90>
    96c8:	e00e      	b.n	96e8 <MPSL_IRQ_RADIO_Handler+0xa4c>
    96ca:	e7ff      	b.n	96cc <MPSL_IRQ_RADIO_Handler+0xa30>
    96cc:	f640 2103 	movw	r1, #2563	; 0xa03
    96d0:	2070      	movs	r0, #112	; 0x70
    96d2:	f002 fec1 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96d6:	b020      	add	sp, #128	; 0x80
    96d8:	2000      	movs	r0, #0
    96da:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    96de:	f640 21d7 	movw	r1, #2775	; 0xad7
    96e2:	2070      	movs	r0, #112	; 0x70
    96e4:	f002 feb8 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96e8:	45b0      	cmp	r8, r6
    96ea:	bf34      	ite	cc
    96ec:	4630      	movcc	r0, r6
    96ee:	4640      	movcs	r0, r8
    96f0:	301e      	adds	r0, #30
    96f2:	42a8      	cmp	r0, r5
    96f4:	dbb8      	blt.n	9668 <MPSL_IRQ_RADIO_Handler+0x9cc>
    96f6:	f640 2117 	movw	r1, #2583	; 0xa17
    96fa:	2070      	movs	r0, #112	; 0x70
    96fc:	f002 feac 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9700:	d90c      	bls.n	971c <MPSL_IRQ_RADIO_Handler+0xa80>
    9702:	eba5 0108 	sub.w	r1, r5, r8
    9706:	2001      	movs	r0, #1
    9708:	f002 f914 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    970c:	b128      	cbz	r0, 971a <MPSL_IRQ_RADIO_Handler+0xa7e>
    970e:	2e00      	cmp	r6, #0
    9710:	bf1c      	itt	ne
    9712:	1ba9      	subne	r1, r5, r6
    9714:	2002      	movne	r0, #2
    9716:	d009      	beq.n	972c <MPSL_IRQ_RADIO_Handler+0xa90>
    9718:	e7d2      	b.n	96c0 <MPSL_IRQ_RADIO_Handler+0xa24>
    971a:	e034      	b.n	9786 <MPSL_IRQ_RADIO_Handler+0xaea>
    971c:	ea56 0008 	orrs.w	r0, r6, r8
    9720:	d004      	beq.n	972c <MPSL_IRQ_RADIO_Handler+0xa90>
    9722:	f640 113a 	movw	r1, #2362	; 0x93a
    9726:	2070      	movs	r0, #112	; 0x70
    9728:	f002 fe96 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    972c:	4629      	mov	r1, r5
    972e:	2000      	movs	r0, #0
    9730:	f002 f900 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9734:	b338      	cbz	r0, 9786 <MPSL_IRQ_RADIO_Handler+0xaea>
    9736:	2601      	movs	r6, #1
    9738:	f1ba 0f00 	cmp.w	sl, #0
    973c:	bf04      	itt	eq
    973e:	f899 0040 	ldrbeq.w	r0, [r9, #64]	; 0x40
    9742:	2800      	cmpeq	r0, #0
    9744:	d000      	beq.n	9748 <MPSL_IRQ_RADIO_Handler+0xaac>
    9746:	b347      	cbz	r7, 979a <MPSL_IRQ_RADIO_Handler+0xafe>
    9748:	e9d9 100e 	ldrd	r1, r0, [r9, #56]	; 0x38
    974c:	ea6f 0101 	mvn.w	r1, r1
    9750:	ea71 0000 	orns	r0, r1, r0
    9754:	d006      	beq.n	9764 <MPSL_IRQ_RADIO_Handler+0xac8>
    9756:	f002 fcc7 	bl	c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    975a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    975e:	4601      	mov	r1, r0
    9760:	e9c9 010e 	strd	r0, r1, [r9, #56]	; 0x38
    9764:	b1ff      	cbz	r7, 97a6 <MPSL_IRQ_RADIO_Handler+0xb0a>
    9766:	9816      	ldr	r0, [sp, #88]	; 0x58
    9768:	1a20      	subs	r0, r4, r0
    976a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    976e:	f04f 0005 	mov.w	r0, #5
    9772:	f002 f8df 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9776:	b370      	cbz	r0, 97d6 <MPSL_IRQ_RADIO_Handler+0xb3a>
    9778:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    977c:	2800      	cmp	r0, #0
    977e:	bf08      	it	eq
    9780:	f889 6040 	strbeq.w	r6, [r9, #64]	; 0x40
    9784:	e017      	b.n	97b6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    9786:	2002      	movs	r0, #2
    9788:	f002 f98e 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    978c:	2001      	movs	r0, #1
    978e:	f002 f98b 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9792:	b020      	add	sp, #128	; 0x80
    9794:	2000      	movs	r0, #0
    9796:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    979a:	e9d9 010e 	ldrd	r0, r1, [r9, #56]	; 0x38
    979e:	43c0      	mvns	r0, r0
    97a0:	ea70 0001 	orns	r0, r0, r1
    97a4:	d012      	beq.n	97cc <MPSL_IRQ_RADIO_Handler+0xb30>
    97a6:	f899 0040 	ldrb.w	r0, [r9, #64]	; 0x40
    97aa:	b120      	cbz	r0, 97b6 <MPSL_IRQ_RADIO_Handler+0xb1a>
    97ac:	2005      	movs	r0, #5
    97ae:	f002 f97b 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97b2:	f889 b040 	strb.w	fp, [r9, #64]	; 0x40
    97b6:	eba5 0008 	sub.w	r0, r5, r8
    97ba:	f1a0 0119 	sub.w	r1, r0, #25
    97be:	2900      	cmp	r1, #0
    97c0:	dc0f      	bgt.n	97e2 <MPSL_IRQ_RADIO_Handler+0xb46>
    97c2:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    97c6:	2070      	movs	r0, #112	; 0x70
    97c8:	f002 fe46 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97cc:	f002 fca8 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    97d0:	f002 f88e 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    97d4:	e7c4      	b.n	9760 <MPSL_IRQ_RADIO_Handler+0xac4>
    97d6:	e7ff      	b.n	97d8 <MPSL_IRQ_RADIO_Handler+0xb3c>
    97d8:	f240 21e6 	movw	r1, #742	; 0x2e6
    97dc:	2070      	movs	r0, #112	; 0x70
    97de:	f002 fe3b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97e2:	2003      	movs	r0, #3
    97e4:	f002 f8a6 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    97e8:	b338      	cbz	r0, 983a <MPSL_IRQ_RADIO_Handler+0xb9e>
    97ea:	4816      	ldr	r0, [pc, #88]	; (9844 <MPSL_IRQ_RADIO_Handler+0xba8>)
    97ec:	6880      	ldr	r0, [r0, #8]
    97ee:	f8c0 b000 	str.w	fp, [r0]
    97f2:	4815      	ldr	r0, [pc, #84]	; (9848 <MPSL_IRQ_RADIO_Handler+0xbac>)
    97f4:	f8c0 b000 	str.w	fp, [r0]
    97f8:	ac0c      	add	r4, sp, #48	; 0x30
    97fa:	4814      	ldr	r0, [pc, #80]	; (984c <MPSL_IRQ_RADIO_Handler+0xbb0>)
    97fc:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9800:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9804:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9808:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    980c:	f8c0 c08c 	str.w	ip, [r0, #140]	; 0x8c
    9810:	ac10      	add	r4, sp, #64	; 0x40
    9812:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9816:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
    981a:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    981e:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    9822:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9826:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    982a:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    982e:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9832:	b020      	add	sp, #128	; 0x80
    9834:	2001      	movs	r0, #1
    9836:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    983a:	f640 2148 	movw	r1, #2632	; 0xa48
    983e:	2070      	movs	r0, #112	; 0x70
    9840:	f002 fe0a 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9844:	2000030c 	.word	0x2000030c
    9848:	40000508 	.word	0x40000508
    984c:	200011b8 	.word	0x200011b8
    9850:	b570      	push	{r4, r5, r6, lr}
    9852:	4d1d      	ldr	r5, [pc, #116]	; (98c8 <MPSL_IRQ_RADIO_Handler+0xc2c>)
    9854:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9858:	2820      	cmp	r0, #32
    985a:	bf18      	it	ne
    985c:	bd70      	popne	{r4, r5, r6, pc}
    985e:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9862:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9866:	4428      	add	r0, r5
    9868:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    986c:	2c20      	cmp	r4, #32
    986e:	d026      	beq.n	98be <MPSL_IRQ_RADIO_Handler+0xc22>
    9870:	4b16      	ldr	r3, [pc, #88]	; (98cc <MPSL_IRQ_RADIO_Handler+0xc30>)
    9872:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9876:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    987a:	7849      	ldrb	r1, [r1, #1]
    987c:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9880:	20ff      	movs	r0, #255	; 0xff
    9882:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9886:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    988a:	4621      	mov	r1, r4
    988c:	2002      	movs	r0, #2
    988e:	f000 f88b 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9892:	2000      	movs	r0, #0
    9894:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9898:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    989c:	480c      	ldr	r0, [pc, #48]	; (98d0 <MPSL_IRQ_RADIO_Handler+0xc34>)
    989e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    98a2:	7e00      	ldrb	r0, [r0, #24]
    98a4:	2800      	cmp	r0, #0
    98a6:	bf08      	it	eq
    98a8:	f002 ff3e 	bleq	c728 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    98ac:	2000      	movs	r0, #0
    98ae:	4909      	ldr	r1, [pc, #36]	; (98d4 <MPSL_IRQ_RADIO_Handler+0xc38>)
    98b0:	6849      	ldr	r1, [r1, #4]
    98b2:	2900      	cmp	r1, #0
    98b4:	bf08      	it	eq
    98b6:	bd70      	popeq	{r4, r5, r6, pc}
    98b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98bc:	4708      	bx	r1
    98be:	f240 311d 	movw	r1, #797	; 0x31d
    98c2:	2070      	movs	r0, #112	; 0x70
    98c4:	f002 fdc8 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98c8:	20001238 	.word	0x20001238
    98cc:	200011b8 	.word	0x200011b8
    98d0:	20000db8 	.word	0x20000db8
    98d4:	2000030c 	.word	0x2000030c
    98d8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    98dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9998 <MPSL_IRQ_RADIO_Handler+0xcfc>
    98e0:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    98e4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    98e8:	4440      	add	r0, r8
    98ea:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    98ee:	2c20      	cmp	r4, #32
    98f0:	bf08      	it	eq
    98f2:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    98f6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 999c <MPSL_IRQ_RADIO_Handler+0xd00>
    98fa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 99a0 <MPSL_IRQ_RADIO_Handler+0xd04>
    98fe:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9902:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9906:	2607      	movs	r6, #7
    9908:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    990c:	2801      	cmp	r0, #1
    990e:	d00e      	beq.n	992e <MPSL_IRQ_RADIO_Handler+0xc92>
    9910:	2804      	cmp	r0, #4
    9912:	bf08      	it	eq
    9914:	2602      	moveq	r6, #2
    9916:	d00a      	beq.n	992e <MPSL_IRQ_RADIO_Handler+0xc92>
    9918:	2805      	cmp	r0, #5
    991a:	bf0c      	ite	eq
    991c:	2603      	moveq	r6, #3
    991e:	2806      	cmpne	r0, #6
    9920:	d005      	beq.n	992e <MPSL_IRQ_RADIO_Handler+0xc92>
    9922:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9926:	f04f 0070 	mov.w	r0, #112	; 0x70
    992a:	f002 fd95 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    992e:	f1bb 0f00 	cmp.w	fp, #0
    9932:	bf18      	it	ne
    9934:	f3af 8000 	nopne.w
    9938:	f3ef 8010 	mrs	r0, PRIMASK
    993c:	b672      	cpsid	i
    993e:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9942:	784a      	ldrb	r2, [r1, #1]
    9944:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9948:	4441      	add	r1, r8
    994a:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    994e:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9952:	42a2      	cmp	r2, r4
    9954:	bf04      	itt	eq
    9956:	2220      	moveq	r2, #32
    9958:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    995c:	b1a8      	cbz	r0, 998a <MPSL_IRQ_RADIO_Handler+0xcee>
    995e:	462a      	mov	r2, r5
    9960:	4621      	mov	r1, r4
    9962:	2001      	movs	r0, #1
    9964:	f000 f820 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    9968:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    996c:	e9d1 2000 	ldrd	r2, r0, [r1]
    9970:	4631      	mov	r1, r6
    9972:	4790      	blx	r2
    9974:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9978:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    997c:	4440      	add	r0, r8
    997e:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9982:	2c20      	cmp	r4, #32
    9984:	d1bd      	bne.n	9902 <MPSL_IRQ_RADIO_Handler+0xc66>
    9986:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    998a:	4806      	ldr	r0, [pc, #24]	; (99a4 <MPSL_IRQ_RADIO_Handler+0xd08>)
    998c:	2800      	cmp	r0, #0
    998e:	bf18      	it	ne
    9990:	f3af 8000 	nopne.w
    9994:	b662      	cpsie	i
    9996:	e7e2      	b.n	995e <MPSL_IRQ_RADIO_Handler+0xcc2>
    9998:	20001238 	.word	0x20001238
    999c:	00000000 	.word	0x00000000
    99a0:	200011b8 	.word	0x200011b8
    99a4:	00000000 	.word	0x00000000
    99a8:	f8df c058 	ldr.w	ip, [pc, #88]	; 9a04 <MPSL_IRQ_RADIO_Handler+0xd68>
    99ac:	b510      	push	{r4, lr}
    99ae:	2300      	movs	r3, #0
    99b0:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    99b4:	2807      	cmp	r0, #7
    99b6:	d21f      	bcs.n	99f8 <MPSL_IRQ_RADIO_Handler+0xd5c>
    99b8:	e8df f000 	tbb	[pc, r0]
    99bc:	05050505 	.word	0x05050505
    99c0:	00040404 	.word	0x00040404
    99c4:	2301      	movs	r3, #1
    99c6:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    99ca:	2b00      	cmp	r3, #0
    99cc:	bf08      	it	eq
    99ce:	bd10      	popeq	{r4, pc}
    99d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    99d4:	480c      	ldr	r0, [pc, #48]	; (9a08 <MPSL_IRQ_RADIO_Handler+0xd6c>)
    99d6:	4402      	add	r2, r0
    99d8:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    99dc:	2820      	cmp	r0, #32
    99de:	bf0e      	itee	eq
    99e0:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    99e4:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    99e8:	7041      	strbne	r1, [r0, #1]
    99ea:	2020      	movs	r0, #32
    99ec:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    99f0:	7058      	strb	r0, [r3, #1]
    99f2:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    99f6:	bd10      	pop	{r4, pc}
    99f8:	f44f 7117 	mov.w	r1, #604	; 0x25c
    99fc:	2070      	movs	r0, #112	; 0x70
    99fe:	f002 fd2b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a02:	0000      	.short	0x0000
    9a04:	200011b8 	.word	0x200011b8
    9a08:	20001238 	.word	0x20001238
    9a0c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9a10:	460f      	mov	r7, r1
    9a12:	4680      	mov	r8, r0
    9a14:	f8df b154 	ldr.w	fp, [pc, #340]	; 9b6c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a18:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9a1c:	4458      	add	r0, fp
    9a1e:	f1b8 0f01 	cmp.w	r8, #1
    9a22:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9a26:	4625      	mov	r5, r4
    9a28:	bf18      	it	ne
    9a2a:	f1b8 0f02 	cmpne.w	r8, #2
    9a2e:	d005      	beq.n	9a3c <MPSL_IRQ_RADIO_Handler+0xda0>
    9a30:	f640 217e 	movw	r1, #2686	; 0xa7e
    9a34:	f04f 0070 	mov.w	r0, #112	; 0x70
    9a38:	f002 fd0e 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a3c:	2d20      	cmp	r5, #32
    9a3e:	d041      	beq.n	9ac4 <MPSL_IRQ_RADIO_Handler+0xe28>
    9a40:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9a44:	2600      	movs	r6, #0
    9a46:	2800      	cmp	r0, #0
    9a48:	bf08      	it	eq
    9a4a:	2602      	moveq	r6, #2
    9a4c:	f001 fd9a 	bl	b584 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9a50:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9b70 <MPSL_IRQ_RADIO_Handler+0xed4>
    9a54:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9a58:	6899      	ldr	r1, [r3, #8]
    9a5a:	691b      	ldr	r3, [r3, #16]
    9a5c:	1a0a      	subs	r2, r1, r0
    9a5e:	18c9      	adds	r1, r1, r3
    9a60:	1a09      	subs	r1, r1, r0
    9a62:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9a66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9a6a:	4296      	cmp	r6, r2
    9a6c:	bf99      	ittee	ls
    9a6e:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9a72:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9a76:	4a3f      	ldrhi	r2, [pc, #252]	; (9b74 <MPSL_IRQ_RADIO_Handler+0xed8>)
    9a78:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9a7c:	d920      	bls.n	9ac0 <MPSL_IRQ_RADIO_Handler+0xe24>
    9a7e:	4622      	mov	r2, r4
    9a80:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9a84:	784c      	ldrb	r4, [r1, #1]
    9a86:	2c20      	cmp	r4, #32
    9a88:	d012      	beq.n	9ab0 <MPSL_IRQ_RADIO_Handler+0xe14>
    9a8a:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9a8e:	6899      	ldr	r1, [r3, #8]
    9a90:	691b      	ldr	r3, [r3, #16]
    9a92:	ebb1 0c00 	subs.w	ip, r1, r0
    9a96:	18c9      	adds	r1, r1, r3
    9a98:	1a09      	subs	r1, r1, r0
    9a9a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9a9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9aa2:	4566      	cmp	r6, ip
    9aa4:	bf9c      	itt	ls
    9aa6:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9aaa:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9aae:	d8e6      	bhi.n	9a7e <MPSL_IRQ_RADIO_Handler+0xde2>
    9ab0:	2a20      	cmp	r2, #32
    9ab2:	d005      	beq.n	9ac0 <MPSL_IRQ_RADIO_Handler+0xe24>
    9ab4:	463b      	mov	r3, r7
    9ab6:	2120      	movs	r1, #32
    9ab8:	2004      	movs	r0, #4
    9aba:	f7ff f90d 	bl	8cd8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9abe:	4604      	mov	r4, r0
    9ac0:	42ac      	cmp	r4, r5
    9ac2:	d113      	bne.n	9aec <MPSL_IRQ_RADIO_Handler+0xe50>
    9ac4:	482c      	ldr	r0, [pc, #176]	; (9b78 <MPSL_IRQ_RADIO_Handler+0xedc>)
    9ac6:	2800      	cmp	r0, #0
    9ac8:	bf18      	it	ne
    9aca:	f3af 8000 	nopne.w
    9ace:	f001 ff0f 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9ad2:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9ad6:	2a20      	cmp	r2, #32
    9ad8:	d00b      	beq.n	9af2 <MPSL_IRQ_RADIO_Handler+0xe56>
    9ada:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9ade:	1c84      	adds	r4, r0, #2
    9ae0:	f141 0c00 	adc.w	ip, r1, #0
    9ae4:	1b1b      	subs	r3, r3, r4
    9ae6:	eb72 020c 	sbcs.w	r2, r2, ip
    9aea:	d202      	bcs.n	9af2 <MPSL_IRQ_RADIO_Handler+0xe56>
    9aec:	2000      	movs	r0, #0
    9aee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9af2:	2d20      	cmp	r5, #32
    9af4:	d013      	beq.n	9b1e <MPSL_IRQ_RADIO_Handler+0xe82>
    9af6:	462b      	mov	r3, r5
    9af8:	4642      	mov	r2, r8
    9afa:	f7ff fbaf 	bl	925c <MPSL_IRQ_RADIO_Handler+0x5c0>
    9afe:	2800      	cmp	r0, #0
    9b00:	bf1e      	ittt	ne
    9b02:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    9b06:	2002      	movne	r0, #2
    9b08:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b0c:	463b      	mov	r3, r7
    9b0e:	462a      	mov	r2, r5
    9b10:	2120      	movs	r1, #32
    9b12:	2004      	movs	r0, #4
    9b14:	f7ff f8e0 	bl	8cd8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9b18:	2000      	movs	r0, #0
    9b1a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b1e:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    9b22:	43c0      	mvns	r0, r0
    9b24:	ea70 0001 	orns	r0, r0, r1
    9b28:	d005      	beq.n	9b36 <MPSL_IRQ_RADIO_Handler+0xe9a>
    9b2a:	f002 fadd 	bl	c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9b32:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9b36:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9b3a:	b128      	cbz	r0, 9b48 <MPSL_IRQ_RADIO_Handler+0xeac>
    9b3c:	2005      	movs	r0, #5
    9b3e:	f001 ffb3 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b42:	2000      	movs	r0, #0
    9b44:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9b48:	2004      	movs	r0, #4
    9b4a:	f001 ffad 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b4e:	f002 f813 	bl	bb78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9b52:	490a      	ldr	r1, [pc, #40]	; (9b7c <MPSL_IRQ_RADIO_Handler+0xee0>)
    9b54:	2020      	movs	r0, #32
    9b56:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9b5a:	6889      	ldr	r1, [r1, #8]
    9b5c:	2000      	movs	r0, #0
    9b5e:	6008      	str	r0, [r1, #0]
    9b60:	4907      	ldr	r1, [pc, #28]	; (9b80 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9b62:	6008      	str	r0, [r1, #0]
    9b64:	2001      	movs	r0, #1
    9b66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b6a:	0000      	.short	0x0000
    9b6c:	20001238 	.word	0x20001238
    9b70:	20000db8 	.word	0x20000db8
    9b74:	200011b8 	.word	0x200011b8
    9b78:	00000000 	.word	0x00000000
    9b7c:	2000030c 	.word	0x2000030c
    9b80:	40000508 	.word	0x40000508

00009b84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9b84:	4906      	ldr	r1, [pc, #24]	; (9ba0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9b86:	b510      	push	{r4, lr}
    9b88:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9b8c:	2a20      	cmp	r2, #32
    9b8e:	bf1c      	itt	ne
    9b90:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9b94:	bd10      	popne	{r4, pc}
    9b96:	f240 3177 	movw	r1, #887	; 0x377
    9b9a:	2070      	movs	r0, #112	; 0x70
    9b9c:	f002 fc5c 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ba0:	20001238 	.word	0x20001238

00009ba4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ba8:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9d70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9bac:	4606      	mov	r6, r0
    9bae:	b08f      	sub	sp, #60	; 0x3c
    9bb0:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9bb4:	468a      	mov	sl, r1
    9bb6:	2820      	cmp	r0, #32
    9bb8:	d061      	beq.n	9c7e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9bba:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    9bbe:	f10b 0408 	add.w	r4, fp, #8
    9bc2:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9bc6:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9bca:	2120      	movs	r1, #32
    9bcc:	f88d 1018 	strb.w	r1, [sp, #24]
    9bd0:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9bd4:	f8db 2008 	ldr.w	r2, [fp, #8]
    9bd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9bdc:	4459      	add	r1, fp
    9bde:	2700      	movs	r7, #0
    9be0:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9be4:	f8db 1010 	ldr.w	r1, [fp, #16]
    9be8:	1851      	adds	r1, r2, r1
    9bea:	910a      	str	r1, [sp, #40]	; 0x28
    9bec:	f8db 0000 	ldr.w	r0, [fp]
    9bf0:	aa09      	add	r2, sp, #36	; 0x24
    9bf2:	4430      	add	r0, r6
    9bf4:	a907      	add	r1, sp, #28
    9bf6:	f001 fb9b 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9bfa:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9bfe:	9907      	ldr	r1, [sp, #28]
    9c00:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9c04:	1840      	adds	r0, r0, r1
    9c06:	1810      	adds	r0, r2, r0
    9c08:	2e67      	cmp	r6, #103	; 0x67
    9c0a:	d33d      	bcc.n	9c88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c0c:	4959      	ldr	r1, [pc, #356]	; (9d74 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    9c0e:	2200      	movs	r2, #0
    9c10:	1b89      	subs	r1, r1, r6
    9c12:	eb72 0107 	sbcs.w	r1, r2, r7
    9c16:	d337      	bcc.n	9c88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c18:	6821      	ldr	r1, [r4, #0]
    9c1a:	4694      	mov	ip, r2
    9c1c:	1a40      	subs	r0, r0, r1
    9c1e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9c22:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9c26:	eb7c 010c 	sbcs.w	r1, ip, ip
    9c2a:	d32d      	bcc.n	9c88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9c2c:	60a0      	str	r0, [r4, #8]
    9c2e:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9c32:	f884 a010 	strb.w	sl, [r4, #16]
    9c36:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9c3a:	f10d 0b18 	add.w	fp, sp, #24
    9c3e:	2d20      	cmp	r5, #32
    9c40:	d055      	beq.n	9cee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9c42:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9c46:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9c4a:	9001      	str	r0, [sp, #4]
    9c4c:	484a      	ldr	r0, [pc, #296]	; (9d78 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    9c4e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9c52:	f8d4 a000 	ldr.w	sl, [r4]
    9c56:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9c5a:	f108 0008 	add.w	r0, r8, #8
    9c5e:	eb1a 0201 	adds.w	r2, sl, r1
    9c62:	eb43 0107 	adc.w	r1, r3, r7
    9c66:	e9d0 9300 	ldrd	r9, r3, [r0]
    9c6a:	ebb9 0202 	subs.w	r2, r9, r2
    9c6e:	eb73 0101 	sbcs.w	r1, r3, r1
    9c72:	d325      	bcc.n	9cc0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9c74:	89c0      	ldrh	r0, [r0, #14]
    9c76:	b398      	cbz	r0, 9ce0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9c78:	89e0      	ldrh	r0, [r4, #14]
    9c7a:	b148      	cbz	r0, 9c90 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9c7c:	e037      	b.n	9cee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9c7e:	f640 3135 	movw	r1, #2869	; 0xb35
    9c82:	2070      	movs	r0, #112	; 0x70
    9c84:	f002 fbe8 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c88:	b00f      	add	sp, #60	; 0x3c
    9c8a:	2001      	movs	r0, #1
    9c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c90:	f002 fa24 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9c94:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9c98:	bf08      	it	eq
    9c9a:	200d      	moveq	r0, #13
    9c9c:	d00b      	beq.n	9cb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9c9e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9ca2:	3856      	subs	r0, #86	; 0x56
    9ca4:	bf08      	it	eq
    9ca6:	201c      	moveq	r0, #28
    9ca8:	d005      	beq.n	9cb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9caa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9cae:	389f      	subs	r0, #159	; 0x9f
    9cb0:	bf14      	ite	ne
    9cb2:	4638      	movne	r0, r7
    9cb4:	2032      	moveq	r0, #50	; 0x32
    9cb6:	1c41      	adds	r1, r0, #1
    9cb8:	ebb9 000a 	subs.w	r0, r9, sl
    9cbc:	4288      	cmp	r0, r1
    9cbe:	da16      	bge.n	9cee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9cc0:	f88b 5000 	strb.w	r5, [fp]
    9cc4:	f898 0018 	ldrb.w	r0, [r8, #24]
    9cc8:	7c21      	ldrb	r1, [r4, #16]
    9cca:	4281      	cmp	r1, r0
    9ccc:	d309      	bcc.n	9ce2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    9cce:	6821      	ldr	r1, [r4, #0]
    9cd0:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cd2:	1a40      	subs	r0, r0, r1
    9cd4:	60a0      	str	r0, [r4, #8]
    9cd6:	b00f      	add	sp, #60	; 0x3c
    9cd8:	f04f 0002 	mov.w	r0, #2
    9cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ce0:	e005      	b.n	9cee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9ce2:	9801      	ldr	r0, [sp, #4]
    9ce4:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9ce8:	7845      	ldrb	r5, [r0, #1]
    9cea:	2d20      	cmp	r5, #32
    9cec:	d1ae      	bne.n	9c4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    9cee:	2005      	movs	r0, #5
    9cf0:	f001 feda 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9cf4:	4d1e      	ldr	r5, [pc, #120]	; (9d70 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    9cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9cfa:	6068      	str	r0, [r5, #4]
    9cfc:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    9d00:	f89d 2018 	ldrb.w	r2, [sp, #24]
    9d04:	2120      	movs	r1, #32
    9d06:	2a20      	cmp	r2, #32
    9d08:	d003      	beq.n	9d12 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    9d0a:	2005      	movs	r0, #5
    9d0c:	f7fe ffe4 	bl	8cd8 <MPSL_IRQ_RADIO_Handler+0x3c>
    9d10:	e004      	b.n	9d1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    9d12:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9d16:	4428      	add	r0, r5
    9d18:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9d1c:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9d20:	4916      	ldr	r1, [pc, #88]	; (9d7c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9d22:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9d26:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9d2a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9d2e:	7048      	strb	r0, [r1, #1]
    9d30:	6828      	ldr	r0, [r5, #0]
    9d32:	4430      	add	r0, r6
    9d34:	6028      	str	r0, [r5, #0]
    9d36:	20ff      	movs	r0, #255	; 0xff
    9d38:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9d3c:	7e68      	ldrb	r0, [r5, #25]
    9d3e:	2801      	cmp	r0, #1
    9d40:	d10a      	bne.n	9d58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9d42:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9d46:	6823      	ldr	r3, [r4, #0]
    9d48:	1818      	adds	r0, r3, r0
    9d4a:	f142 0100 	adc.w	r1, r2, #0
    9d4e:	1e40      	subs	r0, r0, #1
    9d50:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9d54:	f001 fcca 	bl	b6ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9d58:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9d5c:	2820      	cmp	r0, #32
    9d5e:	d003      	beq.n	9d68 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9d60:	4807      	ldr	r0, [pc, #28]	; (9d80 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9d62:	7840      	ldrb	r0, [r0, #1]
    9d64:	f002 fc4a 	bl	c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9d68:	b00f      	add	sp, #60	; 0x3c
    9d6a:	2000      	movs	r0, #0
    9d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d70:	20001238 	.word	0x20001238
    9d74:	0f424000 	.word	0x0f424000
    9d78:	20000db8 	.word	0x20000db8
    9d7c:	200011b8 	.word	0x200011b8
    9d80:	2000030c 	.word	0x2000030c

00009d84 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9d84:	b570      	push	{r4, r5, r6, lr}
    9d86:	4a23      	ldr	r2, [pc, #140]	; (9e14 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    9d88:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9d8c:	2920      	cmp	r1, #32
    9d8e:	d039      	beq.n	9e04 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    9d90:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    9d94:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    9d98:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    9d9c:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    9da0:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    9da4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9da8:	4411      	add	r1, r2
    9daa:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    9dae:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9db2:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9db6:	2920      	cmp	r1, #32
    9db8:	d029      	beq.n	9e0e <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    9dba:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    9dbe:	7e2d      	ldrb	r5, [r5, #24]
    9dc0:	42a8      	cmp	r0, r5
    9dc2:	bf3c      	itt	cc
    9dc4:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    9dc8:	7849      	ldrbcc	r1, [r1, #1]
    9dca:	d3f4      	bcc.n	9db6 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    9dcc:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    9dd0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    9dd4:	f8dc 5008 	ldr.w	r5, [ip, #8]
    9dd8:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    9ddc:	6814      	ldr	r4, [r2, #0]
    9dde:	1828      	adds	r0, r5, r0
    9de0:	f146 0200 	adc.w	r2, r6, #0
    9de4:	ebb1 0c00 	subs.w	ip, r1, r0
    9de8:	eb73 0202 	sbcs.w	r2, r3, r2
    9dec:	d308      	bcc.n	9e00 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    9dee:	1a08      	subs	r0, r1, r0
    9df0:	f006 fea9 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9df4:	f104 0167 	add.w	r1, r4, #103	; 0x67
    9df8:	4281      	cmp	r1, r0
    9dfa:	bf9c      	itt	ls
    9dfc:	1b00      	subls	r0, r0, r4
    9dfe:	bd70      	popls	{r4, r5, r6, pc}
    9e00:	2000      	movs	r0, #0
    9e02:	bd70      	pop	{r4, r5, r6, pc}
    9e04:	f640 3108 	movw	r1, #2824	; 0xb08
    9e08:	2070      	movs	r0, #112	; 0x70
    9e0a:	f002 fb25 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9e12:	bd70      	pop	{r4, r5, r6, pc}
    9e14:	20001238 	.word	0x20001238

00009e18 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9e18:	4806      	ldr	r0, [pc, #24]	; (9e34 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9e1a:	b510      	push	{r4, lr}
    9e1c:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9e20:	2920      	cmp	r1, #32
    9e22:	bf1c      	itt	ne
    9e24:	7e00      	ldrbne	r0, [r0, #24]
    9e26:	bd10      	popne	{r4, pc}
    9e28:	f640 312f 	movw	r1, #2863	; 0xb2f
    9e2c:	2070      	movs	r0, #112	; 0x70
    9e2e:	f002 fb13 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e32:	0000      	.short	0x0000
    9e34:	20001238 	.word	0x20001238

00009e38 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    9e38:	490a      	ldr	r1, [pc, #40]	; (9e64 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    9e3a:	b510      	push	{r4, lr}
    9e3c:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    9e40:	f100 0408 	add.w	r4, r0, #8
    9e44:	e9d4 0100 	ldrd	r0, r1, [r4]
    9e48:	f001 f9f4 	bl	b234 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    9e4c:	89e3      	ldrh	r3, [r4, #14]
    9e4e:	2200      	movs	r2, #0
    9e50:	18c3      	adds	r3, r0, r3
    9e52:	7b20      	ldrb	r0, [r4, #12]
    9e54:	4151      	adcs	r1, r2
    9e56:	1818      	adds	r0, r3, r0
    9e58:	4151      	adcs	r1, r2
    9e5a:	1c40      	adds	r0, r0, #1
    9e5c:	f141 0100 	adc.w	r1, r1, #0
    9e60:	bd10      	pop	{r4, pc}
    9e62:	0000      	.short	0x0000
    9e64:	20000db8 	.word	0x20000db8

00009e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9e6a:	4d6f      	ldr	r5, [pc, #444]	; (a028 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9e6c:	2600      	movs	r6, #0
    9e6e:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    9e72:	2701      	movs	r7, #1
    9e74:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    9e78:	4b6c      	ldr	r3, [pc, #432]	; (a02c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    9e7a:	2808      	cmp	r0, #8
    9e7c:	d273      	bcs.n	9f66 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    9e7e:	e8df f000 	tbb	[pc, r0]
    9e82:	7804      	.short	0x7804
    9e84:	47ceb3a0 	.word	0x47ceb3a0
    9e88:	bdb8      	.short	0xbdb8
    9e8a:	43c8      	mvns	r0, r1
    9e8c:	ea70 0002 	orns	r0, r0, r2
    9e90:	d105      	bne.n	9e9e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    9e92:	f002 f945 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9e96:	f001 fd2b 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9e9a:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9e9e:	8ae0      	ldrh	r0, [r4, #22]
    9ea0:	b110      	cbz	r0, 9ea8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    9ea2:	f002 fa61 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9ea6:	b180      	cbz	r0, 9eca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    9ea8:	f7ff fcd2 	bl	9850 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9eac:	20ff      	movs	r0, #255	; 0xff
    9eae:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    9eb2:	6861      	ldr	r1, [r4, #4]
    9eb4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    9eb8:	d003      	beq.n	9ec2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9eba:	2005      	movs	r0, #5
    9ebc:	f001 fd3a 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ec0:	b140      	cbz	r0, 9ed4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    9ec2:	7e60      	ldrb	r0, [r4, #25]
    9ec4:	2801      	cmp	r0, #1
    9ec6:	d114      	bne.n	9ef2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    9ec8:	e009      	b.n	9ede <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    9eca:	f640 012c 	movw	r1, #2092	; 0x82c
    9ece:	2070      	movs	r0, #112	; 0x70
    9ed0:	f002 fac2 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ed4:	f640 0131 	movw	r1, #2097	; 0x831
    9ed8:	2070      	movs	r0, #112	; 0x70
    9eda:	f002 fabd 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ede:	68a2      	ldr	r2, [r4, #8]
    9ee0:	6920      	ldr	r0, [r4, #16]
    9ee2:	68e1      	ldr	r1, [r4, #12]
    9ee4:	1810      	adds	r0, r2, r0
    9ee6:	4171      	adcs	r1, r6
    9ee8:	1e40      	subs	r0, r0, #1
    9eea:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    9eee:	f001 fbfd 	bl	b6ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9ef2:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9ef6:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9efa:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9efe:	6840      	ldr	r0, [r0, #4]
    9f00:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9f04:	680a      	ldr	r2, [r1, #0]
    9f06:	b001      	add	sp, #4
    9f08:	2101      	movs	r1, #1
    9f0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f0e:	4710      	bx	r2
    9f10:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    9f14:	b160      	cbz	r0, 9f30 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    9f16:	43c8      	mvns	r0, r1
    9f18:	ea70 0002 	orns	r0, r0, r2
    9f1c:	d105      	bne.n	9f2a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    9f1e:	f002 f8ff 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9f22:	f001 fce5 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9f26:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9f2a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    9f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9f30:	f7ff fc8e 	bl	9850 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9f38:	6060      	str	r0, [r4, #4]
    9f3a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    9f3e:	f88d 0000 	strb.w	r0, [sp]
    9f42:	f89d 0000 	ldrb.w	r0, [sp]
    9f46:	b178      	cbz	r0, 9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    9f48:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9f4c:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9f50:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9f54:	6840      	ldr	r0, [r0, #4]
    9f56:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9f5a:	680a      	ldr	r2, [r1, #0]
    9f5c:	b001      	add	sp, #4
    9f5e:	2106      	movs	r1, #6
    9f60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9f64:	4710      	bx	r2
    9f66:	e05a      	b.n	a01e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    9f68:	f640 0148 	movw	r1, #2120	; 0x848
    9f6c:	2070      	movs	r0, #112	; 0x70
    9f6e:	f002 fa73 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f72:	f7ff fc6d 	bl	9850 <MPSL_IRQ_RADIO_Handler+0xbb4>
    9f76:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    9f7a:	f002 f9f5 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9f7e:	b130      	cbz	r0, 9f8e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    9f80:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    9f84:	43c9      	mvns	r1, r1
    9f86:	ea71 0000 	orns	r0, r1, r0
    9f8a:	d005      	beq.n	9f98 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    9f8c:	e00a      	b.n	9fa4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    9f8e:	f640 0156 	movw	r1, #2134	; 0x856
    9f92:	2070      	movs	r0, #112	; 0x70
    9f94:	f002 fa60 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f98:	f002 f8c2 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9f9c:	f001 fca8 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9fa0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    9fa4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    9fa8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    9fac:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    9fb0:	6840      	ldr	r0, [r0, #4]
    9fb2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    9fb6:	680a      	ldr	r2, [r1, #0]
    9fb8:	b001      	add	sp, #4
    9fba:	2100      	movs	r1, #0
    9fbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    9fc0:	4710      	bx	r2
    9fc2:	f001 fe95 	bl	bcf0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    9fc6:	8ae0      	ldrh	r0, [r4, #22]
    9fc8:	b110      	cbz	r0, 9fd0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    9fca:	f002 f9cd 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9fce:	b130      	cbz	r0, 9fde <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    9fd0:	f001 fea2 	bl	bd18 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9fd4:	2800      	cmp	r0, #0
    9fd6:	bf18      	it	ne
    9fd8:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    9fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9fde:	f44f 6106 	mov.w	r1, #2144	; 0x860
    9fe2:	2070      	movs	r0, #112	; 0x70
    9fe4:	f002 fa38 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fe8:	4811      	ldr	r0, [pc, #68]	; (a030 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    9fea:	6007      	str	r7, [r0, #0]
    9fec:	6898      	ldr	r0, [r3, #8]
    9fee:	6007      	str	r7, [r0, #0]
    9ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9ff2:	7818      	ldrb	r0, [r3, #0]
    9ff4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9ff8:	f002 bb00 	b.w	c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9ffc:	f7ff fc28 	bl	9850 <MPSL_IRQ_RADIO_Handler+0xbb4>
    a000:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a004:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a008:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a00c:	6840      	ldr	r0, [r0, #4]
    a00e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a012:	680a      	ldr	r2, [r1, #0]
    a014:	b001      	add	sp, #4
    a016:	2105      	movs	r1, #5
    a018:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a01c:	4710      	bx	r2
    a01e:	f640 0173 	movw	r1, #2163	; 0x873
    a022:	2070      	movs	r0, #112	; 0x70
    a024:	f002 fa18 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a028:	20000db8 	.word	0x20000db8
    a02c:	2000030c 	.word	0x2000030c
    a030:	40000508 	.word	0x40000508

0000a034 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a034:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a038:	48f7      	ldr	r0, [pc, #988]	; (a418 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e4>)
    a03a:	b097      	sub	sp, #92	; 0x5c
    a03c:	460c      	mov	r4, r1
    a03e:	6800      	ldr	r0, [r0, #0]
    a040:	4ff6      	ldr	r7, [pc, #984]	; (a41c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e8>)
    a042:	05c0      	lsls	r0, r0, #23
    a044:	0dc0      	lsrs	r0, r0, #23
    a046:	d00e      	beq.n	a066 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a048:	3810      	subs	r0, #16
    a04a:	b240      	sxtb	r0, r0
    a04c:	2800      	cmp	r0, #0
    a04e:	bfb8      	it	lt
    a050:	f000 000f 	andlt.w	r0, r0, #15
    a054:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a058:	bfac      	ite	ge
    a05a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a05e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a062:	0940      	lsrs	r0, r0, #5
    a064:	d00c      	beq.n	a080 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a066:	7820      	ldrb	r0, [r4, #0]
    a068:	f04f 0a00 	mov.w	sl, #0
    a06c:	2800      	cmp	r0, #0
    a06e:	bf18      	it	ne
    a070:	2801      	cmpne	r0, #1
    a072:	d017      	beq.n	a0a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a074:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a078:	f04f 0070 	mov.w	r0, #112	; 0x70
    a07c:	f002 f9ec 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a080:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a084:	f04f 0a01 	mov.w	sl, #1
    a088:	2820      	cmp	r0, #32
    a08a:	d006      	beq.n	a09a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a08c:	7820      	ldrb	r0, [r4, #0]
    a08e:	b148      	cbz	r0, a0a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a090:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a094:	2070      	movs	r0, #112	; 0x70
    a096:	f002 f9df 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a09a:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a09e:	2070      	movs	r0, #112	; 0x70
    a0a0:	f002 f9da 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0a4:	f8df b378 	ldr.w	fp, [pc, #888]	; a420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>
    a0a8:	f1bb 0f00 	cmp.w	fp, #0
    a0ac:	d004      	beq.n	a0b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x84>
    a0ae:	2100      	movs	r1, #0
    a0b0:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a0b4:	f3af 8000 	nop.w
    a0b8:	2000      	movs	r0, #0
    a0ba:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a0be:	a905      	add	r1, sp, #20
    a0c0:	9112      	str	r1, [sp, #72]	; 0x48
    a0c2:	49d8      	ldr	r1, [pc, #864]	; (a424 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>)
    a0c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a0c6:	f04f 0801 	mov.w	r8, #1
    a0ca:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a0ce:	9001      	str	r0, [sp, #4]
    a0d0:	f1bb 0f00 	cmp.w	fp, #0
    a0d4:	d004      	beq.n	a0e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a0d6:	2100      	movs	r1, #0
    a0d8:	f240 7007 	movw	r0, #1799	; 0x707
    a0dc:	f3af 8000 	nop.w
    a0e0:	f1b8 0f00 	cmp.w	r8, #0
    a0e4:	d009      	beq.n	a0fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    a0e6:	bf00      	nop
    a0e8:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a0ec:	2500      	movs	r5, #0
    a0ee:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a0f2:	f1ba 0f00 	cmp.w	sl, #0
    a0f6:	d007      	beq.n	a108 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    a0f8:	e03e      	b.n	a178 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x144>
    a0fa:	48cb      	ldr	r0, [pc, #812]	; (a428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a0fc:	2800      	cmp	r0, #0
    a0fe:	bf18      	it	ne
    a100:	f3af 8000 	nopne.w
    a104:	b662      	cpsie	i
    a106:	e7ef      	b.n	a0e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    a108:	46b1      	mov	r9, r6
    a10a:	2001      	movs	r0, #1
    a10c:	ea20 0609 	bic.w	r6, r0, r9
    a110:	48c6      	ldr	r0, [pc, #792]	; (a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a112:	2240      	movs	r2, #64	; 0x40
    a114:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a118:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a11c:	f006 fea3 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a120:	f1bb 0f00 	cmp.w	fp, #0
    a124:	d004      	beq.n	a130 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    a126:	2100      	movs	r1, #0
    a128:	f240 503c 	movw	r0, #1340	; 0x53c
    a12c:	f3af 8000 	nop.w
    a130:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a134:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a138:	4439      	add	r1, r7
    a13a:	4438      	add	r0, r7
    a13c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a13e:	8502      	strh	r2, [r0, #40]	; 0x28
    a140:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a144:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a148:	f1bb 0f00 	cmp.w	fp, #0
    a14c:	d004      	beq.n	a158 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x124>
    a14e:	2100      	movs	r1, #0
    a150:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a154:	f3af 8000 	nop.w
    a158:	f1bb 0f00 	cmp.w	fp, #0
    a15c:	d004      	beq.n	a168 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x134>
    a15e:	2100      	movs	r1, #0
    a160:	f240 7011 	movw	r0, #1809	; 0x711
    a164:	f3af 8000 	nop.w
    a168:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a16c:	f88d 0020 	strb.w	r0, [sp, #32]
    a170:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a174:	2800      	cmp	r0, #0
    a176:	d1ab      	bne.n	a0d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a178:	f1bb 0f00 	cmp.w	fp, #0
    a17c:	d004      	beq.n	a188 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x154>
    a17e:	2100      	movs	r1, #0
    a180:	f240 701b 	movw	r0, #1819	; 0x71b
    a184:	f3af 8000 	nop.w
    a188:	f001 fbb2 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a18c:	4681      	mov	r9, r0
    a18e:	a802      	add	r0, sp, #8
    a190:	900a      	str	r0, [sp, #40]	; 0x28
    a192:	4688      	mov	r8, r1
    a194:	8921      	ldrh	r1, [r4, #8]
    a196:	4628      	mov	r0, r5
    a198:	f361 401f 	bfi	r0, r1, #16, #16
    a19c:	4601      	mov	r1, r0
    a19e:	7aa2      	ldrb	r2, [r4, #10]
    a1a0:	4628      	mov	r0, r5
    a1a2:	f362 0007 	bfi	r0, r2, #0, #8
    a1a6:	7ae2      	ldrb	r2, [r4, #11]
    a1a8:	f362 200f 	bfi	r0, r2, #8, #8
    a1ac:	7822      	ldrb	r2, [r4, #0]
    a1ae:	9502      	str	r5, [sp, #8]
    a1b0:	f362 4017 	bfi	r0, r2, #16, #8
    a1b4:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a1b8:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a1bc:	9503      	str	r5, [sp, #12]
    a1be:	7820      	ldrb	r0, [r4, #0]
    a1c0:	b380      	cbz	r0, a224 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    a1c2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a1c6:	499a      	ldr	r1, [pc, #616]	; (a430 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    a1c8:	1a08      	subs	r0, r1, r0
    a1ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    a1cc:	f101 020c 	add.w	r2, r1, #12
    a1d0:	a914      	add	r1, sp, #80	; 0x50
    a1d2:	f001 f8ad 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a1d6:	2200      	movs	r2, #0
    a1d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a1dc:	4648      	mov	r0, r9
    a1de:	4641      	mov	r1, r8
    a1e0:	f7fe ff4e 	bl	9080 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a1e4:	468c      	mov	ip, r1
    a1e6:	7ae1      	ldrb	r1, [r4, #11]
    a1e8:	2900      	cmp	r1, #0
    a1ea:	bf0c      	ite	eq
    a1ec:	217a      	moveq	r1, #122	; 0x7a
    a1ee:	214a      	movne	r1, #74	; 0x4a
    a1f0:	6862      	ldr	r2, [r4, #4]
    a1f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a1f6:	4411      	add	r1, r2
    a1f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a1fc:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a200:	441a      	add	r2, r3
    a202:	4411      	add	r1, r2
    a204:	1c88      	adds	r0, r1, #2
    a206:	f001 f877 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a20a:	9600      	str	r6, [sp, #0]
    a20c:	9004      	str	r0, [sp, #16]
    a20e:	464a      	mov	r2, r9
    a210:	4643      	mov	r3, r8
    a212:	6920      	ldr	r0, [r4, #16]
    a214:	990a      	ldr	r1, [sp, #40]	; 0x28
    a216:	f7fe fd9b 	bl	8d50 <MPSL_IRQ_RADIO_Handler+0xb4>
    a21a:	2800      	cmp	r0, #0
    a21c:	bf08      	it	eq
    a21e:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a222:	e046      	b.n	a2b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27e>
    a224:	e7ff      	b.n	a226 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    a226:	4648      	mov	r0, r9
    a228:	4641      	mov	r1, r8
    a22a:	f001 f803 	bl	b234 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a22e:	f8df c204 	ldr.w	ip, [pc, #516]	; a434 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a232:	4602      	mov	r2, r0
    a234:	eb10 0c0c 	adds.w	ip, r0, ip
    a238:	460b      	mov	r3, r1
    a23a:	f141 0e00 	adc.w	lr, r1, #0
    a23e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a242:	ebb0 0c0c 	subs.w	ip, r0, ip
    a246:	eb71 0c0e 	sbcs.w	ip, r1, lr
    a24a:	d229      	bcs.n	a2a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a24c:	3229      	adds	r2, #41	; 0x29
    a24e:	f143 0300 	adc.w	r3, r3, #0
    a252:	1a82      	subs	r2, r0, r2
    a254:	eb71 0203 	sbcs.w	r2, r1, r3
    a258:	d322      	bcc.n	a2a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x26c>
    a25a:	8922      	ldrh	r2, [r4, #8]
    a25c:	ab0a      	add	r3, sp, #40	; 0x28
    a25e:	1a80      	subs	r0, r0, r2
    a260:	eb61 0105 	sbc.w	r1, r1, r5
    a264:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a266:	1e40      	subs	r0, r0, #1
    a268:	9200      	str	r2, [sp, #0]
    a26a:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    a26e:	aa0d      	add	r2, sp, #52	; 0x34
    a270:	f001 f804 	bl	b27c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a274:	7ae0      	ldrb	r0, [r4, #11]
    a276:	2800      	cmp	r0, #0
    a278:	bf0c      	ite	eq
    a27a:	207a      	moveq	r0, #122	; 0x7a
    a27c:	204a      	movne	r0, #74	; 0x4a
    a27e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a280:	8922      	ldrh	r2, [r4, #8]
    a282:	4408      	add	r0, r1
    a284:	6861      	ldr	r1, [r4, #4]
    a286:	4411      	add	r1, r2
    a288:	4408      	add	r0, r1
    a28a:	1c80      	adds	r0, r0, #2
    a28c:	f001 f834 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a290:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    a294:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a298:	1a40      	subs	r0, r0, r1
    a29a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a29e:	e007      	b.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a2a0:	f1b9 0101 	subs.w	r1, r9, #1
    a2a4:	f148 30ff 	adc.w	r0, r8, #4294967295	; 0xffffffff
    a2a8:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a2ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a2b0:	9004      	str	r0, [sp, #16]
    a2b2:	f1bb 0f00 	cmp.w	fp, #0
    a2b6:	d004      	beq.n	a2c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28e>
    a2b8:	2100      	movs	r1, #0
    a2ba:	f240 7022 	movw	r0, #1826	; 0x722
    a2be:	f3af 8000 	nop.w
    a2c2:	495a      	ldr	r1, [pc, #360]	; (a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a2c4:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a2c8:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a2cc:	9108      	str	r1, [sp, #32]
    a2ce:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a2d2:	a802      	add	r0, sp, #8
    a2d4:	2901      	cmp	r1, #1
    a2d6:	bf18      	it	ne
    a2d8:	2902      	cmpne	r1, #2
    a2da:	d141      	bne.n	a360 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a2dc:	9511      	str	r5, [sp, #68]	; 0x44
    a2de:	9a02      	ldr	r2, [sp, #8]
    a2e0:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a2e4:	1a53      	subs	r3, r2, r1
    a2e6:	f8dd c010 	ldr.w	ip, [sp, #16]
    a2ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a2ee:	eb12 020c 	adds.w	r2, r2, ip
    a2f2:	1a51      	subs	r1, r2, r1
    a2f4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a2f8:	2b02      	cmp	r3, #2
    a2fa:	d374      	bcc.n	a3e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a2fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a300:	bf98      	it	ls
    a302:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a306:	d86e      	bhi.n	a3e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a308:	2501      	movs	r5, #1
    a30a:	ab14      	add	r3, sp, #80	; 0x50
    a30c:	aa0e      	add	r2, sp, #56	; 0x38
    a30e:	4631      	mov	r1, r6
    a310:	f7fe ff06 	bl	9120 <MPSL_IRQ_RADIO_Handler+0x484>
    a314:	2800      	cmp	r0, #0
    a316:	d06d      	beq.n	a3f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a318:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a31c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a320:	4633      	mov	r3, r6
    a322:	428a      	cmp	r2, r1
    a324:	d06a      	beq.n	a3fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    a326:	2005      	movs	r0, #5
    a328:	f7fe fcd6 	bl	8cd8 <MPSL_IRQ_RADIO_Handler+0x3c>
    a32c:	9908      	ldr	r1, [sp, #32]
    a32e:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a332:	7048      	strb	r0, [r1, #1]
    a334:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a338:	2820      	cmp	r0, #32
    a33a:	bf01      	itttt	eq
    a33c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a340:	4438      	addeq	r0, r7
    a342:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a346:	9511      	streq	r5, [sp, #68]	; 0x44
    a348:	bf1e      	ittt	ne
    a34a:	9908      	ldrne	r1, [sp, #32]
    a34c:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a350:	f880 8001 	strbne.w	r8, [r0, #1]
    a354:	4632      	mov	r2, r6
    a356:	4641      	mov	r1, r8
    a358:	f05f 0003 	movs.w	r0, #3
    a35c:	f7ff fb24 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a360:	f1bb 0f00 	cmp.w	fp, #0
    a364:	d004      	beq.n	a370 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33c>
    a366:	2100      	movs	r1, #0
    a368:	f240 7027 	movw	r0, #1831	; 0x727
    a36c:	f3af 8000 	nop.w
    a370:	4831      	ldr	r0, [pc, #196]	; (a438 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a372:	2800      	cmp	r0, #0
    a374:	bf18      	it	ne
    a376:	f3af 8000 	nopne.w
    a37a:	f3ef 8810 	mrs	r8, PRIMASK
    a37e:	b672      	cpsid	i
    a380:	f1bb 0f00 	cmp.w	fp, #0
    a384:	d004      	beq.n	a390 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a386:	2100      	movs	r1, #0
    a388:	f240 702d 	movw	r0, #1837	; 0x72d
    a38c:	f3af 8000 	nop.w
    a390:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a394:	f88d 0020 	strb.w	r0, [sp, #32]
    a398:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a39c:	2800      	cmp	r0, #0
    a39e:	f47f ae97 	bne.w	a0d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a3a2:	f1bb 0f00 	cmp.w	fp, #0
    a3a6:	d004      	beq.n	a3b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37e>
    a3a8:	2100      	movs	r1, #0
    a3aa:	f240 7035 	movw	r0, #1845	; 0x735
    a3ae:	f3af 8000 	nop.w
    a3b2:	f10d 0e04 	add.w	lr, sp, #4
    a3b6:	e89e 100f 	ldmia.w	lr, {r0, r1, r2, r3, ip}
    a3ba:	f100 0e08 	add.w	lr, r0, #8
    a3be:	e88e 100e 	stmia.w	lr, {r1, r2, r3, ip}
    a3c2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    a3c6:	e9c0 1206 	strd	r1, r2, [r0, #24]
    a3ca:	b325      	cbz	r5, a416 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e2>
    a3cc:	f1bb 0f00 	cmp.w	fp, #0
    a3d0:	d004      	beq.n	a3dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a8>
    a3d2:	2100      	movs	r1, #0
    a3d4:	f240 7042 	movw	r0, #1858	; 0x742
    a3d8:	f3af 8000 	nop.w
    a3dc:	f1ba 0f00 	cmp.w	sl, #0
    a3e0:	d146      	bne.n	a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a3e2:	e02b      	b.n	a43c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>
    a3e4:	e7ff      	b.n	a3e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b2>
    a3e6:	4632      	mov	r2, r6
    a3e8:	4641      	mov	r1, r8
    a3ea:	2004      	movs	r0, #4
    a3ec:	f7ff fadc 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a3f0:	2501      	movs	r5, #1
    a3f2:	e7b5      	b.n	a360 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32c>
    a3f4:	4632      	mov	r2, r6
    a3f6:	4641      	mov	r1, r8
    a3f8:	2004      	movs	r0, #4
    a3fa:	e7af      	b.n	a35c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a3fc:	2920      	cmp	r1, #32
    a3fe:	bf1d      	ittte	ne
    a400:	9808      	ldrne	r0, [sp, #32]
    a402:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a406:	7840      	ldrbne	r0, [r0, #1]
    a408:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a40c:	bf04      	itt	eq
    a40e:	4438      	addeq	r0, r7
    a410:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a414:	e78a      	b.n	a32c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f8>
    a416:	e03b      	b.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a418:	e000ed04 	.word	0xe000ed04
    a41c:	20001238 	.word	0x20001238
    a420:	00000000 	.word	0x00000000
    a424:	20000db8 	.word	0x20000db8
    a428:	00000000 	.word	0x00000000
    a42c:	200011b8 	.word	0x200011b8
    a430:	1e847fff 	.word	0x1e847fff
    a434:	0f424000 	.word	0x0f424000
    a438:	00000000 	.word	0x00000000
    a43c:	9811      	ldr	r0, [sp, #68]	; 0x44
    a43e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a442:	d015      	beq.n	a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a444:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a448:	2820      	cmp	r0, #32
    a44a:	d111      	bne.n	a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a44c:	f1bb 0f00 	cmp.w	fp, #0
    a450:	d004      	beq.n	a45c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a452:	2100      	movs	r1, #0
    a454:	f240 7047 	movw	r0, #1863	; 0x747
    a458:	f3af 8000 	nop.w
    a45c:	4631      	mov	r1, r6
    a45e:	2002      	movs	r0, #2
    a460:	f7ff fad4 	bl	9a0c <MPSL_IRQ_RADIO_Handler+0xd70>
    a464:	9010      	str	r0, [sp, #64]	; 0x40
    a466:	b918      	cbnz	r0, a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x43c>
    a468:	7820      	ldrb	r0, [r4, #0]
    a46a:	b300      	cbz	r0, a4ae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a46c:	2801      	cmp	r0, #1
    a46e:	d02e      	beq.n	a4ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49a>
    a470:	f1bb 0f00 	cmp.w	fp, #0
    a474:	d004      	beq.n	a480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44c>
    a476:	2100      	movs	r1, #0
    a478:	f240 7064 	movw	r0, #1892	; 0x764
    a47c:	f3af 8000 	nop.w
    a480:	20ff      	movs	r0, #255	; 0xff
    a482:	f1ba 0f00 	cmp.w	sl, #0
    a486:	bf18      	it	ne
    a488:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a48c:	d029      	beq.n	a4e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ae>
    a48e:	2501      	movs	r5, #1
    a490:	f1bb 0f00 	cmp.w	fp, #0
    a494:	d004      	beq.n	a4a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a496:	2100      	movs	r1, #0
    a498:	f240 7075 	movw	r0, #1909	; 0x775
    a49c:	f3af 8000 	nop.w
    a4a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    a4a2:	4c34      	ldr	r4, [pc, #208]	; (a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x540>)
    a4a4:	2802      	cmp	r0, #2
    a4a6:	d025      	beq.n	a4f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a4a8:	2801      	cmp	r0, #1
    a4aa:	d02b      	beq.n	a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a4ac:	e02f      	b.n	a50e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a4ae:	f1bb 0f00 	cmp.w	fp, #0
    a4b2:	d004      	beq.n	a4be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48a>
    a4b4:	2100      	movs	r1, #0
    a4b6:	f240 704f 	movw	r0, #1871	; 0x74f
    a4ba:	f3af 8000 	nop.w
    a4be:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a4c2:	2004      	movs	r0, #4
    a4c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a4c6:	f7ff fa6f 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    a4ca:	2501      	movs	r5, #1
    a4cc:	e7e0      	b.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a4ce:	f1bb 0f00 	cmp.w	fp, #0
    a4d2:	f43f adfd 	beq.w	a0d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a4d6:	2100      	movs	r1, #0
    a4d8:	f240 705a 	movw	r0, #1882	; 0x75a
    a4dc:	f3af 8000 	nop.w
    a4e0:	e5f6      	b.n	a0d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9c>
    a4e2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a4e6:	2101      	movs	r1, #1
    a4e8:	4391      	bics	r1, r2
    a4ea:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a4ee:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a4f2:	e7cc      	b.n	a48e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45a>
    a4f4:	68b8      	ldr	r0, [r7, #8]
    a4f6:	ebb0 0009 	subs.w	r0, r0, r9
    a4fa:	f006 fb24 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a4fe:	6861      	ldr	r1, [r4, #4]
    a500:	b921      	cbnz	r1, a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d8>
    a502:	e004      	b.n	a50e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a504:	6861      	ldr	r1, [r4, #4]
    a506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a50a:	b101      	cbz	r1, a50e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4da>
    a50c:	4788      	blx	r1
    a50e:	f1b8 0f00 	cmp.w	r8, #0
    a512:	d028      	beq.n	a566 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x532>
    a514:	f1bb 0f00 	cmp.w	fp, #0
    a518:	d004      	beq.n	a524 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4f0>
    a51a:	2100      	movs	r1, #0
    a51c:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a520:	f3af 8000 	nop.w
    a524:	b19d      	cbz	r5, a54e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a526:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a52a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a52e:	4438      	add	r0, r7
    a530:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a534:	2820      	cmp	r0, #32
    a536:	d00a      	beq.n	a54e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a538:	f1bb 0f00 	cmp.w	fp, #0
    a53c:	d004      	beq.n	a548 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x514>
    a53e:	2100      	movs	r1, #0
    a540:	f240 708f 	movw	r0, #1935	; 0x78f
    a544:	f3af 8000 	nop.w
    a548:	7860      	ldrb	r0, [r4, #1]
    a54a:	f002 f857 	bl	c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a54e:	f1bb 0f00 	cmp.w	fp, #0
    a552:	d004      	beq.n	a55e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52a>
    a554:	2100      	movs	r1, #0
    a556:	f240 7094 	movw	r0, #1940	; 0x794
    a55a:	f3af 8000 	nop.w
    a55e:	b019      	add	sp, #100	; 0x64
    a560:	4628      	mov	r0, r5
    a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a566:	4804      	ldr	r0, [pc, #16]	; (a578 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x544>)
    a568:	2800      	cmp	r0, #0
    a56a:	bf18      	it	ne
    a56c:	f3af 8000 	nopne.w
    a570:	b662      	cpsie	i
    a572:	e7cf      	b.n	a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e0>
    a574:	2000030c 	.word	0x2000030c
    a578:	00000000 	.word	0x00000000

0000a57c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a580:	4604      	mov	r4, r0
    a582:	7800      	ldrb	r0, [r0, #0]
    a584:	b095      	sub	sp, #84	; 0x54
    a586:	b118      	cbz	r0, a590 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a588:	b015      	add	sp, #84	; 0x54
    a58a:	2000      	movs	r0, #0
    a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a590:	48d1      	ldr	r0, [pc, #836]	; (a8d8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>)
    a592:	6800      	ldr	r0, [r0, #0]
    a594:	05c0      	lsls	r0, r0, #23
    a596:	0dc0      	lsrs	r0, r0, #23
    a598:	d00e      	beq.n	a5b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a59a:	3810      	subs	r0, #16
    a59c:	b240      	sxtb	r0, r0
    a59e:	2800      	cmp	r0, #0
    a5a0:	bfb8      	it	lt
    a5a2:	f000 000f 	andlt.w	r0, r0, #15
    a5a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a5aa:	bfac      	ite	ge
    a5ac:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a5b0:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a5b4:	0940      	lsrs	r0, r0, #5
    a5b6:	d0e7      	beq.n	a588 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a5b8:	a80d      	add	r0, sp, #52	; 0x34
    a5ba:	f8df 9320 	ldr.w	r9, [pc, #800]	; a8dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a5be:	9009      	str	r0, [sp, #36]	; 0x24
    a5c0:	f1b9 0f00 	cmp.w	r9, #0
    a5c4:	d004      	beq.n	a5d0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a5c6:	2100      	movs	r1, #0
    a5c8:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a5cc:	f3af 8000 	nop.w
    a5d0:	f8df 830c 	ldr.w	r8, [pc, #780]	; a8e0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>
    a5d4:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a5d8:	2500      	movs	r5, #0
    a5da:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a5de:	9503      	str	r5, [sp, #12]
    a5e0:	f1b9 0f00 	cmp.w	r9, #0
    a5e4:	d004      	beq.n	a5f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a5e6:	2100      	movs	r1, #0
    a5e8:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a5ec:	f3af 8000 	nop.w
    a5f0:	2001      	movs	r0, #1
    a5f2:	ea20 0a06 	bic.w	sl, r0, r6
    a5f6:	48bb      	ldr	r0, [pc, #748]	; (a8e4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a5f8:	2240      	movs	r2, #64	; 0x40
    a5fa:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a5fe:	eb00 108a 	add.w	r0, r0, sl, lsl #6
    a602:	f006 fc30 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a606:	f1b9 0f00 	cmp.w	r9, #0
    a60a:	d004      	beq.n	a616 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a60c:	2100      	movs	r1, #0
    a60e:	f240 503c 	movw	r0, #1340	; 0x53c
    a612:	f3af 8000 	nop.w
    a616:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a61a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    a61e:	eb01 0208 	add.w	r2, r1, r8
    a622:	4440      	add	r0, r8
    a624:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    a626:	8501      	strh	r1, [r0, #40]	; 0x28
    a628:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
    a62c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a630:	f1b9 0f00 	cmp.w	r9, #0
    a634:	d004      	beq.n	a640 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a636:	2100      	movs	r1, #0
    a638:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a63c:	f3af 8000 	nop.w
    a640:	f1b9 0f00 	cmp.w	r9, #0
    a644:	d004      	beq.n	a650 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a646:	2100      	movs	r1, #0
    a648:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a64c:	f3af 8000 	nop.w
    a650:	f001 f94e 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a654:	460f      	mov	r7, r1
    a656:	4606      	mov	r6, r0
    a658:	8921      	ldrh	r1, [r4, #8]
    a65a:	4628      	mov	r0, r5
    a65c:	f361 401f 	bfi	r0, r1, #16, #16
    a660:	4601      	mov	r1, r0
    a662:	7aa2      	ldrb	r2, [r4, #10]
    a664:	4628      	mov	r0, r5
    a666:	f362 0007 	bfi	r0, r2, #0, #8
    a66a:	7ae2      	ldrb	r2, [r4, #11]
    a66c:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    a670:	f362 200f 	bfi	r0, r2, #8, #8
    a674:	7822      	ldrb	r2, [r4, #0]
    a676:	950a      	str	r5, [sp, #40]	; 0x28
    a678:	f362 4017 	bfi	r0, r2, #16, #8
    a67c:	e9cd 510c 	strd	r5, r1, [sp, #48]	; 0x30
    a680:	e9cd 050e 	strd	r0, r5, [sp, #56]	; 0x38
    a684:	950b      	str	r5, [sp, #44]	; 0x2c
    a686:	7820      	ldrb	r0, [r4, #0]
    a688:	b388      	cbz	r0, a6ee <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a68a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a68e:	4896      	ldr	r0, [pc, #600]	; (a8e8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a690:	f10b 020c 	add.w	r2, fp, #12
    a694:	1a40      	subs	r0, r0, r1
    a696:	a911      	add	r1, sp, #68	; 0x44
    a698:	f000 fe4a 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a69c:	2200      	movs	r2, #0
    a69e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    a6a2:	4630      	mov	r0, r6
    a6a4:	4639      	mov	r1, r7
    a6a6:	f7fe fceb 	bl	9080 <MPSL_IRQ_RADIO_Handler+0x3e4>
    a6aa:	4684      	mov	ip, r0
    a6ac:	7ae0      	ldrb	r0, [r4, #11]
    a6ae:	460b      	mov	r3, r1
    a6b0:	2800      	cmp	r0, #0
    a6b2:	bf0c      	ite	eq
    a6b4:	207a      	moveq	r0, #122	; 0x7a
    a6b6:	204a      	movne	r0, #74	; 0x4a
    a6b8:	6861      	ldr	r1, [r4, #4]
    a6ba:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
    a6be:	4408      	add	r0, r1
    a6c0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
    a6c4:	e9cd c30a 	strd	ip, r3, [sp, #40]	; 0x28
    a6c8:	4411      	add	r1, r2
    a6ca:	4408      	add	r0, r1
    a6cc:	1c80      	adds	r0, r0, #2
    a6ce:	f000 fe13 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a6d2:	f8cd a000 	str.w	sl, [sp]
    a6d6:	900c      	str	r0, [sp, #48]	; 0x30
    a6d8:	4632      	mov	r2, r6
    a6da:	463b      	mov	r3, r7
    a6dc:	4659      	mov	r1, fp
    a6de:	6920      	ldr	r0, [r4, #16]
    a6e0:	f7fe fb36 	bl	8d50 <MPSL_IRQ_RADIO_Handler+0xb4>
    a6e4:	2800      	cmp	r0, #0
    a6e6:	bf08      	it	eq
    a6e8:	e9cd 670a 	strdeq	r6, r7, [sp, #40]	; 0x28
    a6ec:	e045      	b.n	a77a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fe>
    a6ee:	e7ff      	b.n	a6f0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x174>
    a6f0:	4630      	mov	r0, r6
    a6f2:	4639      	mov	r1, r7
    a6f4:	f000 fd9e 	bl	b234 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a6f8:	4b7c      	ldr	r3, [pc, #496]	; (a8ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a6fa:	4602      	mov	r2, r0
    a6fc:	eb10 0c03 	adds.w	ip, r0, r3
    a700:	468b      	mov	fp, r1
    a702:	f141 0300 	adc.w	r3, r1, #0
    a706:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a70a:	ebb0 0c0c 	subs.w	ip, r0, ip
    a70e:	eb71 0303 	sbcs.w	r3, r1, r3
    a712:	d22a      	bcs.n	a76a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a714:	3229      	adds	r2, #41	; 0x29
    a716:	f14b 0300 	adc.w	r3, fp, #0
    a71a:	1a82      	subs	r2, r0, r2
    a71c:	eb71 0203 	sbcs.w	r2, r1, r3
    a720:	d323      	bcc.n	a76a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ee>
    a722:	8922      	ldrh	r2, [r4, #8]
    a724:	ab12      	add	r3, sp, #72	; 0x48
    a726:	1a80      	subs	r0, r0, r2
    a728:	eb61 0105 	sbc.w	r1, r1, r5
    a72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a72e:	1e40      	subs	r0, r0, #1
    a730:	9200      	str	r2, [sp, #0]
    a732:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    a736:	aa07      	add	r2, sp, #28
    a738:	f000 fda0 	bl	b27c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a73c:	7ae0      	ldrb	r0, [r4, #11]
    a73e:	2800      	cmp	r0, #0
    a740:	bf0c      	ite	eq
    a742:	207a      	moveq	r0, #122	; 0x7a
    a744:	204a      	movne	r0, #74	; 0x4a
    a746:	9907      	ldr	r1, [sp, #28]
    a748:	8922      	ldrh	r2, [r4, #8]
    a74a:	4408      	add	r0, r1
    a74c:	6861      	ldr	r1, [r4, #4]
    a74e:	4411      	add	r1, r2
    a750:	4408      	add	r0, r1
    a752:	1c80      	adds	r0, r0, #2
    a754:	f000 fdd0 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a758:	4601      	mov	r1, r0
    a75a:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    a75e:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
    a762:	1a08      	subs	r0, r1, r0
    a764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a768:	e006      	b.n	a778 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a76a:	1e70      	subs	r0, r6, #1
    a76c:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    a770:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a778:	900c      	str	r0, [sp, #48]	; 0x30
    a77a:	f1b9 0f00 	cmp.w	r9, #0
    a77e:	d004      	beq.n	a78a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20e>
    a780:	2100      	movs	r1, #0
    a782:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a786:	f3af 8000 	nop.w
    a78a:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a78e:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a792:	1808      	adds	r0, r1, r0
    a794:	eb42 0105 	adc.w	r1, r2, r5
    a798:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a79c:	2a20      	cmp	r2, #32
    a79e:	d009      	beq.n	a7b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a7a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    a7a4:	1a12      	subs	r2, r2, r0
    a7a6:	eb73 0201 	sbcs.w	r2, r3, r1
    a7aa:	d203      	bcs.n	a7b4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x238>
    a7ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a7b0:	2001      	movs	r0, #1
    a7b2:	9003      	str	r0, [sp, #12]
    a7b4:	f1b9 0f00 	cmp.w	r9, #0
    a7b8:	d004      	beq.n	a7c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>
    a7ba:	2100      	movs	r1, #0
    a7bc:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    a7c0:	f3af 8000 	nop.w
    a7c4:	990a      	ldr	r1, [sp, #40]	; 0x28
    a7c6:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    a7ca:	1a0a      	subs	r2, r1, r0
    a7cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a7d2:	18c9      	adds	r1, r1, r3
    a7d4:	1a08      	subs	r0, r1, r0
    a7d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7da:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a7de:	bf98      	it	ls
    a7e0:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a7e4:	d80b      	bhi.n	a7fe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    a7e6:	4632      	mov	r2, r6
    a7e8:	463b      	mov	r3, r7
    a7ea:	a90a      	add	r1, sp, #40	; 0x28
    a7ec:	483f      	ldr	r0, [pc, #252]	; (a8ec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>)
    a7ee:	f8cd a000 	str.w	sl, [sp]
    a7f2:	f7fe faad 	bl	8d50 <MPSL_IRQ_RADIO_Handler+0xb4>
    a7f6:	9903      	ldr	r1, [sp, #12]
    a7f8:	4308      	orrs	r0, r1
    a7fa:	d145      	bne.n	a888 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30c>
    a7fc:	e05f      	b.n	a8be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a7fe:	f8bd b036 	ldrh.w	fp, [sp, #54]	; 0x36
    a802:	aa05      	add	r2, sp, #20
    a804:	a903      	add	r1, sp, #12
    a806:	4658      	mov	r0, fp
    a808:	f000 fd92 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a80c:	f001 fa8e 	bl	bd2c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a810:	f000 fd72 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a814:	4682      	mov	sl, r0
    a816:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    a81a:	2820      	cmp	r0, #32
    a81c:	d00a      	beq.n	a834 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>
    a81e:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a822:	f8d8 3008 	ldr.w	r3, [r8, #8]
    a826:	1d80      	adds	r0, r0, #6
    a828:	f145 0100 	adc.w	r1, r5, #0
    a82c:	181e      	adds	r6, r3, r0
    a82e:	eb42 0701 	adc.w	r7, r2, r1
    a832:	e024      	b.n	a87e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a834:	360a      	adds	r6, #10
    a836:	f147 0700 	adc.w	r7, r7, #0
    a83a:	f1bb 0f00 	cmp.w	fp, #0
    a83e:	d017      	beq.n	a870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a840:	f001 fd92 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a844:	b9a0      	cbnz	r0, a870 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f4>
    a846:	f001 fc49 	bl	c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a84a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a84e:	bf08      	it	eq
    a850:	200d      	moveq	r0, #13
    a852:	d00b      	beq.n	a86c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a854:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a858:	3856      	subs	r0, #86	; 0x56
    a85a:	bf08      	it	eq
    a85c:	201c      	moveq	r0, #28
    a85e:	d005      	beq.n	a86c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f0>
    a860:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a864:	389f      	subs	r0, #159	; 0x9f
    a866:	bf14      	ite	ne
    a868:	4628      	movne	r0, r5
    a86a:	2032      	moveq	r0, #50	; 0x32
    a86c:	1986      	adds	r6, r0, r6
    a86e:	416f      	adcs	r7, r5
    a870:	9803      	ldr	r0, [sp, #12]
    a872:	4582      	cmp	sl, r0
    a874:	d903      	bls.n	a87e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    a876:	ebaa 0000 	sub.w	r0, sl, r0
    a87a:	1986      	adds	r6, r0, r6
    a87c:	416f      	adcs	r7, r5
    a87e:	201f      	movs	r0, #31
    a880:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
    a884:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    a888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    a88c:	f000 fcd2 	bl	b234 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a890:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
    a894:	1880      	adds	r0, r0, r2
    a896:	eb41 0205 	adc.w	r2, r1, r5
    a89a:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
    a89e:	1840      	adds	r0, r0, r1
    a8a0:	eb42 0105 	adc.w	r1, r2, r5
    a8a4:	1c40      	adds	r0, r0, #1
    a8a6:	f141 0100 	adc.w	r1, r1, #0
    a8aa:	f1b9 0f00 	cmp.w	r9, #0
    a8ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
    a8b2:	d004      	beq.n	a8be <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x342>
    a8b4:	2100      	movs	r1, #0
    a8b6:	f240 50fa 	movw	r0, #1530	; 0x5fa
    a8ba:	f3af 8000 	nop.w
    a8be:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    a8c2:	f88d 0000 	strb.w	r0, [sp]
    a8c6:	f89d 0000 	ldrb.w	r0, [sp]
    a8ca:	2800      	cmp	r0, #0
    a8cc:	f47f ae78 	bne.w	a5c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    a8d0:	b015      	add	sp, #84	; 0x54
    a8d2:	2001      	movs	r0, #1
    a8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8d8:	e000ed04 	.word	0xe000ed04
    a8dc:	00000000 	.word	0x00000000
    a8e0:	20001238 	.word	0x20001238
    a8e4:	200011b8 	.word	0x200011b8
    a8e8:	1e847fff 	.word	0x1e847fff
    a8ec:	0f424000 	.word	0x0f424000

0000a8f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a8f0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8f4:	4d9d      	ldr	r5, [pc, #628]	; (ab6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    a8f6:	b08c      	sub	sp, #48	; 0x30
    a8f8:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    a8fc:	2000      	movs	r0, #0
    a8fe:	9007      	str	r0, [sp, #28]
    a900:	9008      	str	r0, [sp, #32]
    a902:	2001      	movs	r0, #1
    a904:	4c9a      	ldr	r4, [pc, #616]	; (ab70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    a906:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a90a:	f04f 0800 	mov.w	r8, #0
    a90e:	4607      	mov	r7, r0
    a910:	9006      	str	r0, [sp, #24]
    a912:	b124      	cbz	r4, a91e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a914:	2100      	movs	r1, #0
    a916:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a91a:	f3af 8000 	nop.w
    a91e:	9806      	ldr	r0, [sp, #24]
    a920:	2800      	cmp	r0, #0
    a922:	d03c      	beq.n	a99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a924:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    a928:	b124      	cbz	r4, a934 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a92a:	2100      	movs	r1, #0
    a92c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    a930:	f3af 8000 	nop.w
    a934:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    a938:	2240      	movs	r2, #64	; 0x40
    a93a:	ea27 060a 	bic.w	r6, r7, sl
    a93e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a942:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a946:	4683      	mov	fp, r0
    a948:	f006 fa8d 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a94c:	b124      	cbz	r4, a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a94e:	2100      	movs	r1, #0
    a950:	f240 503c 	movw	r0, #1340	; 0x53c
    a954:	f3af 8000 	nop.w
    a958:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a95c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a960:	4428      	add	r0, r5
    a962:	4429      	add	r1, r5
    a964:	9000      	str	r0, [sp, #0]
    a966:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a968:	8502      	strh	r2, [r0, #40]	; 0x28
    a96a:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a96e:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a972:	b124      	cbz	r4, a97e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a974:	2100      	movs	r1, #0
    a976:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a97a:	f3af 8000 	nop.w
    a97e:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a982:	f88d 0008 	strb.w	r0, [sp, #8]
    a986:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a98a:	b178      	cbz	r0, a9ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a98c:	2c00      	cmp	r4, #0
    a98e:	bf1c      	itt	ne
    a990:	2100      	movne	r1, #0
    a992:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    a996:	d0bc      	beq.n	a912 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a998:	f3af 8000 	nop.w
    a99c:	e7b9      	b.n	a912 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a99e:	4875      	ldr	r0, [pc, #468]	; (ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    a9a0:	2800      	cmp	r0, #0
    a9a2:	bf18      	it	ne
    a9a4:	f3af 8000 	nopne.w
    a9a8:	b662      	cpsie	i
    a9aa:	e7bb      	b.n	a924 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a9ac:	b124      	cbz	r4, a9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a9ae:	2100      	movs	r1, #0
    a9b0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    a9b4:	f3af 8000 	nop.w
    a9b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    a9ba:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a9be:	2803      	cmp	r0, #3
    a9c0:	d17e      	bne.n	aac0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a9c2:	9a00      	ldr	r2, [sp, #0]
    a9c4:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9c6:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    a9ca:	4288      	cmp	r0, r1
    a9cc:	bf14      	ite	ne
    a9ce:	f04f 0a00 	movne.w	sl, #0
    a9d2:	f04f 0a01 	moveq.w	sl, #1
    a9d6:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    a9da:	4683      	mov	fp, r0
    a9dc:	2220      	movs	r2, #32
    a9de:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a9e2:	e003      	b.n	a9ec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a9e4:	4602      	mov	r2, r0
    a9e6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a9ea:	7840      	ldrb	r0, [r0, #1]
    a9ec:	4288      	cmp	r0, r1
    a9ee:	d002      	beq.n	a9f6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a9f0:	2820      	cmp	r0, #32
    a9f2:	d00a      	beq.n	aa0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a9f4:	e7f6      	b.n	a9e4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a9f6:	2820      	cmp	r0, #32
    a9f8:	d007      	beq.n	aa0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a9fa:	4583      	cmp	fp, r0
    a9fc:	d107      	bne.n	aa0e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a9fe:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    aa02:	7840      	ldrb	r0, [r0, #1]
    aa04:	f88c 0000 	strb.w	r0, [ip]
    aa08:	e007      	b.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    aa0a:	4640      	mov	r0, r8
    aa0c:	e00c      	b.n	aa28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    aa0e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    aa12:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    aa16:	7840      	ldrb	r0, [r0, #1]
    aa18:	7048      	strb	r0, [r1, #1]
    aa1a:	b124      	cbz	r4, aa26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    aa1c:	2100      	movs	r1, #0
    aa1e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    aa22:	f3af 8000 	nop.w
    aa26:	4638      	mov	r0, r7
    aa28:	46c3      	mov	fp, r8
    aa2a:	ea10 0f0a 	tst.w	r0, sl
    aa2e:	bf18      	it	ne
    aa30:	46bb      	movne	fp, r7
    aa32:	2800      	cmp	r0, #0
    aa34:	d04e      	beq.n	aad4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa36:	b124      	cbz	r4, aa42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    aa38:	2100      	movs	r1, #0
    aa3a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    aa3e:	f3af 8000 	nop.w
    aa42:	4632      	mov	r2, r6
    aa44:	2001      	movs	r0, #1
    aa46:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa48:	f7fe ffae 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    aa4c:	b124      	cbz	r4, aa58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aa4e:	2100      	movs	r1, #0
    aa50:	f240 70c2 	movw	r0, #1986	; 0x7c2
    aa54:	f3af 8000 	nop.w
    aa58:	4847      	ldr	r0, [pc, #284]	; (ab78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    aa5a:	2800      	cmp	r0, #0
    aa5c:	bf18      	it	ne
    aa5e:	f3af 8000 	nopne.w
    aa62:	f3ef 8010 	mrs	r0, PRIMASK
    aa66:	b672      	cpsid	i
    aa68:	9006      	str	r0, [sp, #24]
    aa6a:	b124      	cbz	r4, aa76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aa6c:	2100      	movs	r1, #0
    aa6e:	f240 70c7 	movw	r0, #1991	; 0x7c7
    aa72:	f3af 8000 	nop.w
    aa76:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa7a:	f88d 0008 	strb.w	r0, [sp, #8]
    aa7e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aa82:	b138      	cbz	r0, aa94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aa84:	2c00      	cmp	r4, #0
    aa86:	bf1c      	itt	ne
    aa88:	2100      	movne	r1, #0
    aa8a:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    aa8e:	f43f af40 	beq.w	a912 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aa92:	e781      	b.n	a998 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa94:	f1bb 0f00 	cmp.w	fp, #0
    aa98:	d009      	beq.n	aaae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa9a:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    aa9e:	2820      	cmp	r0, #32
    aaa0:	d105      	bne.n	aaae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aaa2:	4631      	mov	r1, r6
    aaa4:	2002      	movs	r0, #2
    aaa6:	f7fe ffb1 	bl	9a0c <MPSL_IRQ_RADIO_Handler+0xd70>
    aaaa:	9008      	str	r0, [sp, #32]
    aaac:	b1f8      	cbz	r0, aaee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aaae:	b124      	cbz	r4, aaba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aab0:	2100      	movs	r1, #0
    aab2:	f240 70df 	movw	r0, #2015	; 0x7df
    aab6:	f3af 8000 	nop.w
    aaba:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    aabe:	e000      	b.n	aac2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aac0:	e008      	b.n	aad4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aac2:	ea27 0000 	bic.w	r0, r7, r0
    aac6:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    aaca:	20ff      	movs	r0, #255	; 0xff
    aacc:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aad0:	2001      	movs	r0, #1
    aad2:	9007      	str	r0, [sp, #28]
    aad4:	b124      	cbz	r4, aae0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aad6:	2100      	movs	r1, #0
    aad8:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    aadc:	f3af 8000 	nop.w
    aae0:	9808      	ldr	r0, [sp, #32]
    aae2:	4e26      	ldr	r6, [pc, #152]	; (ab7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    aae4:	2802      	cmp	r0, #2
    aae6:	d009      	beq.n	aafc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aae8:	2801      	cmp	r0, #1
    aaea:	d027      	beq.n	ab3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    aaec:	e02b      	b.n	ab46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    aaee:	b354      	cbz	r4, ab46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    aaf0:	2100      	movs	r1, #0
    aaf2:	f240 70da 	movw	r0, #2010	; 0x7da
    aaf6:	f3af 8000 	nop.w
    aafa:	e7ec      	b.n	aad6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aafc:	f000 fef8 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ab00:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    ab04:	ebb3 0c00 	subs.w	ip, r3, r0
    ab08:	eb72 0c01 	sbcs.w	ip, r2, r1
    ab0c:	d204      	bcs.n	ab18 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab0e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ab12:	2070      	movs	r0, #112	; 0x70
    ab14:	f001 fca0 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab18:	1a18      	subs	r0, r3, r0
    ab1a:	eb62 0101 	sbc.w	r1, r2, r1
    ab1e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    ab22:	f171 0100 	sbcs.w	r1, r1, #0
    ab26:	d304      	bcc.n	ab32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    ab28:	f240 71ef 	movw	r1, #2031	; 0x7ef
    ab2c:	2070      	movs	r0, #112	; 0x70
    ab2e:	f001 fc93 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab32:	f006 f808 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ab36:	6871      	ldr	r1, [r6, #4]
    ab38:	b129      	cbz	r1, ab46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab3a:	e003      	b.n	ab44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    ab3c:	6871      	ldr	r1, [r6, #4]
    ab3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ab42:	b101      	cbz	r1, ab46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ab44:	4788      	blx	r1
    ab46:	9806      	ldr	r0, [sp, #24]
    ab48:	b148      	cbz	r0, ab5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    ab4a:	b124      	cbz	r4, ab56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    ab4c:	2100      	movs	r1, #0
    ab4e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    ab52:	f3af 8000 	nop.w
    ab56:	9807      	ldr	r0, [sp, #28]
    ab58:	b00d      	add	sp, #52	; 0x34
    ab5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab5e:	4805      	ldr	r0, [pc, #20]	; (ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ab60:	2800      	cmp	r0, #0
    ab62:	bf18      	it	ne
    ab64:	f3af 8000 	nopne.w
    ab68:	b662      	cpsie	i
    ab6a:	e7ee      	b.n	ab4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    ab6c:	20001238 	.word	0x20001238
	...
    ab7c:	2000030c 	.word	0x2000030c

0000ab80 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    ab80:	2820      	cmp	r0, #32
    ab82:	bf24      	itt	cs
    ab84:	2000      	movcs	r0, #0
    ab86:	4770      	bxcs	lr
    ab88:	4b03      	ldr	r3, [pc, #12]	; (ab98 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    ab8a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    ab8e:	e9c0 1200 	strd	r1, r2, [r0]
    ab92:	2001      	movs	r0, #1
    ab94:	4770      	bx	lr
    ab96:	0000      	.short	0x0000
    ab98:	20000db8 	.word	0x20000db8

0000ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ab9c:	b510      	push	{r4, lr}
    ab9e:	2820      	cmp	r0, #32
    aba0:	d211      	bcs.n	abc6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aba2:	490e      	ldr	r1, [pc, #56]	; (abdc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aba4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    aba8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    abac:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    abb0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    abb4:	b13b      	cbz	r3, abc6 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    abb6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    abba:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    abbe:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    abc2:	2a01      	cmp	r2, #1
    abc4:	d001      	beq.n	abca <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    abc6:	2000      	movs	r0, #0
    abc8:	bd10      	pop	{r4, pc}
    abca:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    abce:	4601      	mov	r1, r0
    abd0:	2000      	movs	r0, #0
    abd2:	f7fe fee9 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    abd6:	2001      	movs	r0, #1
    abd8:	bd10      	pop	{r4, pc}
    abda:	0000      	.short	0x0000
    abdc:	20001238 	.word	0x20001238

0000abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    abe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    abe4:	4e86      	ldr	r6, [pc, #536]	; (ae00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    abe6:	4680      	mov	r8, r0
    abe8:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    abec:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    abf0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    abf4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    abf8:	2800      	cmp	r0, #0
    abfa:	d071      	beq.n	ace0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    abfc:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    ac00:	4d80      	ldr	r5, [pc, #512]	; (ae04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ac02:	b125      	cbz	r5, ac0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ac04:	2100      	movs	r1, #0
    ac06:	f640 307b 	movw	r0, #2939	; 0xb7b
    ac0a:	f3af 8000 	nop.w
    ac0e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ac12:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac16:	2801      	cmp	r0, #1
    ac18:	d018      	beq.n	ac4c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ac1a:	b2c0      	uxtb	r0, r0
    ac1c:	2804      	cmp	r0, #4
    ac1e:	bf1c      	itt	ne
    ac20:	2805      	cmpne	r0, #5
    ac22:	2806      	cmpne	r0, #6
    ac24:	d061      	beq.n	acea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ac26:	b12d      	cbz	r5, ac34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ac28:	f04f 0100 	mov.w	r1, #0
    ac2c:	f640 3087 	movw	r0, #2951	; 0xb87
    ac30:	f3af 8000 	nop.w
    ac34:	f006 f8bd 	bl	10db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ac38:	b125      	cbz	r5, ac44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ac3a:	2100      	movs	r1, #0
    ac3c:	f640 308b 	movw	r0, #2955	; 0xb8b
    ac40:	f3af 8000 	nop.w
    ac44:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac48:	2801      	cmp	r0, #1
    ac4a:	d1e6      	bne.n	ac1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ac4c:	2401      	movs	r4, #1
    ac4e:	b125      	cbz	r5, ac5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ac50:	2100      	movs	r1, #0
    ac52:	f640 3092 	movw	r0, #2962	; 0xb92
    ac56:	f3af 8000 	nop.w
    ac5a:	2c00      	cmp	r4, #0
    ac5c:	d04b      	beq.n	acf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ac5e:	2000      	movs	r0, #0
    ac60:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    ac64:	b125      	cbz	r5, ac70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ac66:	2100      	movs	r1, #0
    ac68:	f640 3097 	movw	r0, #2967	; 0xb97
    ac6c:	f3af 8000 	nop.w
    ac70:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    ac74:	2001      	movs	r0, #1
    ac76:	ea20 090b 	bic.w	r9, r0, fp
    ac7a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    ac7e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    ac82:	2240      	movs	r2, #64	; 0x40
    ac84:	f006 f8ef 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ac88:	b125      	cbz	r5, ac94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ac8a:	2100      	movs	r1, #0
    ac8c:	f240 503c 	movw	r0, #1340	; 0x53c
    ac90:	f3af 8000 	nop.w
    ac94:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    ac98:	eb00 0a06 	add.w	sl, r0, r6
    ac9c:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    aca0:	4430      	add	r0, r6
    aca2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    aca4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    aca8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    acac:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    acb0:	b125      	cbz	r5, acbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    acb2:	2100      	movs	r1, #0
    acb4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    acb8:	f3af 8000 	nop.w
    acbc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    acc0:	f88d 0000 	strb.w	r0, [sp]
    acc4:	f89d 0000 	ldrb.w	r0, [sp]
    acc8:	b1e0      	cbz	r0, ad04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    acca:	2d00      	cmp	r5, #0
    accc:	bf1c      	itt	ne
    acce:	2100      	movne	r1, #0
    acd0:	f640 309d 	movwne	r0, #2973	; 0xb9d
    acd4:	d0bb      	beq.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acd6:	bf00      	nop
    acd8:	f3af 8000 	nop.w
    acdc:	e7b7      	b.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acde:	e7ff      	b.n	ace0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ace0:	f640 3172 	movw	r1, #2930	; 0xb72
    ace4:	2070      	movs	r0, #112	; 0x70
    ace6:	f001 fbb7 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    acea:	464a      	mov	r2, r9
    acec:	4641      	mov	r1, r8
    acee:	2001      	movs	r0, #1
    acf0:	f7fe fe5a 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    acf4:	e7a0      	b.n	ac38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    acf6:	4844      	ldr	r0, [pc, #272]	; (ae08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    acf8:	2800      	cmp	r0, #0
    acfa:	bf18      	it	ne
    acfc:	f3af 8000 	nopne.w
    ad00:	b662      	cpsie	i
    ad02:	e7ac      	b.n	ac5e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ad04:	b125      	cbz	r5, ad10 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ad06:	2100      	movs	r1, #0
    ad08:	f640 30a1 	movw	r0, #2977	; 0xba1
    ad0c:	f3af 8000 	nop.w
    ad10:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    ad14:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    ad18:	4640      	mov	r0, r8
    ad1a:	461c      	mov	r4, r3
    ad1c:	f04f 0b20 	mov.w	fp, #32
    ad20:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ad24:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    ad28:	e004      	b.n	ad34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ad2a:	46a3      	mov	fp, r4
    ad2c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ad30:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ad34:	4284      	cmp	r4, r0
    ad36:	d002      	beq.n	ad3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ad38:	2c20      	cmp	r4, #32
    ad3a:	d02b      	beq.n	ad94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad3c:	e7f5      	b.n	ad2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ad3e:	2c20      	cmp	r4, #32
    ad40:	d028      	beq.n	ad94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ad42:	42a3      	cmp	r3, r4
    ad44:	d104      	bne.n	ad50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ad46:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ad4a:	7840      	ldrb	r0, [r0, #1]
    ad4c:	7008      	strb	r0, [r1, #0]
    ad4e:	e005      	b.n	ad5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ad50:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ad54:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ad58:	7840      	ldrb	r0, [r0, #1]
    ad5a:	7048      	strb	r0, [r1, #1]
    ad5c:	f1ba 0f00 	cmp.w	sl, #0
    ad60:	d011      	beq.n	ad86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad62:	b125      	cbz	r5, ad6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ad64:	2100      	movs	r1, #0
    ad66:	f240 409c 	movw	r0, #1180	; 0x49c
    ad6a:	f3af 8000 	nop.w
    ad6e:	f89a 0000 	ldrb.w	r0, [sl]
    ad72:	42a0      	cmp	r0, r4
    ad74:	d107      	bne.n	ad86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ad76:	b125      	cbz	r5, ad82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ad78:	2100      	movs	r1, #0
    ad7a:	f240 409f 	movw	r0, #1183	; 0x49f
    ad7e:	f3af 8000 	nop.w
    ad82:	f88a b000 	strb.w	fp, [sl]
    ad86:	b15d      	cbz	r5, ada0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad88:	2100      	movs	r1, #0
    ad8a:	f240 40a4 	movw	r0, #1188	; 0x4a4
    ad8e:	f3af 8000 	nop.w
    ad92:	e000      	b.n	ad96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    ad94:	b125      	cbz	r5, ada0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ad96:	2100      	movs	r1, #0
    ad98:	f640 30a5 	movw	r0, #2981	; 0xba5
    ad9c:	f3af 8000 	nop.w
    ada0:	481a      	ldr	r0, [pc, #104]	; (ae0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ada2:	2800      	cmp	r0, #0
    ada4:	bf18      	it	ne
    ada6:	f3af 8000 	nopne.w
    adaa:	f3ef 8410 	mrs	r4, PRIMASK
    adae:	b672      	cpsid	i
    adb0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    adb4:	f88d 0000 	strb.w	r0, [sp]
    adb8:	f89d 0000 	ldrb.w	r0, [sp]
    adbc:	b138      	cbz	r0, adce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    adbe:	2d00      	cmp	r5, #0
    adc0:	bf1c      	itt	ne
    adc2:	2100      	movne	r1, #0
    adc4:	f640 30ab 	movwne	r0, #2987	; 0xbab
    adc8:	f43f af41 	beq.w	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    adcc:	e784      	b.n	acd8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    adce:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    add2:	20ff      	movs	r0, #255	; 0xff
    add4:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    add8:	b154      	cbz	r4, adf0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    adda:	2d00      	cmp	r5, #0
    addc:	bf08      	it	eq
    adde:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ade2:	2100      	movs	r1, #0
    ade4:	f640 30b8 	movw	r0, #3000	; 0xbb8
    ade8:	f3af 8000 	nop.w
    adec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adf0:	4805      	ldr	r0, [pc, #20]	; (ae08 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    adf2:	2800      	cmp	r0, #0
    adf4:	bf18      	it	ne
    adf6:	f3af 8000 	nopne.w
    adfa:	b662      	cpsie	i
    adfc:	e7ed      	b.n	adda <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    adfe:	0000      	.short	0x0000
    ae00:	20001238 	.word	0x20001238
	...

0000ae10 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ae10:	b570      	push	{r4, r5, r6, lr}
    ae12:	460d      	mov	r5, r1
    ae14:	4606      	mov	r6, r0
    ae16:	f001 fa95 	bl	c344 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ae1a:	480d      	ldr	r0, [pc, #52]	; (ae50 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    ae1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    ae20:	2400      	movs	r4, #0
    ae22:	3880      	subs	r0, #128	; 0x80
    ae24:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ae28:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ae2c:	b129      	cbz	r1, ae3a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ae2e:	1c61      	adds	r1, r4, #1
    ae30:	b2cc      	uxtb	r4, r1
    ae32:	2c20      	cmp	r4, #32
    ae34:	d3f8      	bcc.n	ae28 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ae36:	2020      	movs	r0, #32
    ae38:	bd70      	pop	{r4, r5, r6, pc}
    ae3a:	4806      	ldr	r0, [pc, #24]	; (ae54 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    ae3c:	4621      	mov	r1, r4
    ae3e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    ae42:	e9c0 6500 	strd	r6, r5, [r0]
    ae46:	2001      	movs	r0, #1
    ae48:	f7fe fdae 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    ae4c:	4620      	mov	r0, r4
    ae4e:	bd70      	pop	{r4, r5, r6, pc}
    ae50:	20001238 	.word	0x20001238
    ae54:	20000db8 	.word	0x20000db8

0000ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ae58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae5c:	f000 fd48 	bl	b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ae60:	4606      	mov	r6, r0
    ae62:	460f      	mov	r7, r1
    ae64:	f000 fe88 	bl	bb78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ae68:	4c65      	ldr	r4, [pc, #404]	; (b000 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    ae6a:	6860      	ldr	r0, [r4, #4]
    ae6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ae70:	bf1c      	itt	ne
    ae72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ae76:	6060      	strne	r0, [r4, #4]
    ae78:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    ae7c:	f8df b184 	ldr.w	fp, [pc, #388]	; b004 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    ae80:	2500      	movs	r5, #0
    ae82:	bb10      	cbnz	r0, aeca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    ae84:	f44f 710c 	mov.w	r1, #560	; 0x230
    ae88:	6920      	ldr	r0, [r4, #16]
    ae8a:	f001 fa47 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    ae8e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ae92:	68a1      	ldr	r1, [r4, #8]
    ae94:	1818      	adds	r0, r3, r0
    ae96:	eb45 0305 	adc.w	r3, r5, r5
    ae9a:	1809      	adds	r1, r1, r0
    ae9c:	eb42 0003 	adc.w	r0, r2, r3
    aea0:	1a71      	subs	r1, r6, r1
    aea2:	eb77 0000 	sbcs.w	r0, r7, r0
    aea6:	d310      	bcc.n	aeca <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    aea8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    aeac:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    aeb0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    aeb4:	6840      	ldr	r0, [r0, #4]
    aeb6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    aeba:	680a      	ldr	r2, [r1, #0]
    aebc:	2108      	movs	r1, #8
    aebe:	4790      	blx	r2
    aec0:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    aec4:	2070      	movs	r0, #112	; 0x70
    aec6:	f001 fac7 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aeca:	7e60      	ldrb	r0, [r4, #25]
    aecc:	b180      	cbz	r0, aef0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    aece:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    aed2:	f88d 0000 	strb.w	r0, [sp]
    aed6:	f89d 0000 	ldrb.w	r0, [sp]
    aeda:	b148      	cbz	r0, aef0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    aedc:	f000 fc7e 	bl	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    aee0:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    aee4:	b150      	cbz	r0, aefc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    aee6:	f240 31cd 	movw	r1, #973	; 0x3cd
    aeea:	2070      	movs	r0, #112	; 0x70
    aeec:	f001 fab4 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    aef0:	1cf0      	adds	r0, r6, #3
    aef2:	f147 0100 	adc.w	r1, r7, #0
    aef6:	f000 fb4b 	bl	b590 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    aefa:	e7f1      	b.n	aee0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    aefc:	2001      	movs	r0, #1
    aefe:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    af02:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    af06:	2820      	cmp	r0, #32
    af08:	d020      	beq.n	af4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    af0a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    af0e:	2020      	movs	r0, #32
    af10:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    af14:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    af18:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    af1c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    af20:	6025      	str	r5, [r4, #0]
    af22:	f000 ff09 	bl	bd38 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    af26:	f884 0020 	strb.w	r0, [r4, #32]
    af2a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    af2e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    af32:	eb00 0a04 	add.w	sl, r0, r4
    af36:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    af3a:	2820      	cmp	r0, #32
    af3c:	d01c      	beq.n	af78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    af3e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    af42:	f89b 001a 	ldrb.w	r0, [fp, #26]
    af46:	2801      	cmp	r0, #1
    af48:	d005      	beq.n	af56 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    af4a:	e015      	b.n	af78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    af4c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    af50:	2070      	movs	r0, #112	; 0x70
    af52:	f001 fa81 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af56:	2201      	movs	r2, #1
    af58:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    af5c:	4630      	mov	r0, r6
    af5e:	4639      	mov	r1, r7
    af60:	f7fe f88e 	bl	9080 <MPSL_IRQ_RADIO_Handler+0x3e4>
    af64:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    af68:	1a12      	subs	r2, r2, r0
    af6a:	eb73 0201 	sbcs.w	r2, r3, r1
    af6e:	bf24      	itt	cs
    af70:	f10b 0208 	addcs.w	r2, fp, #8
    af74:	e9c2 0100 	strdcs	r0, r1, [r2]
    af78:	4641      	mov	r1, r8
    af7a:	2001      	movs	r0, #1
    af7c:	f7fe fd46 	bl	9a0c <MPSL_IRQ_RADIO_Handler+0xd70>
    af80:	0007      	movs	r7, r0
    af82:	d0f9      	beq.n	af78 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    af84:	4820      	ldr	r0, [pc, #128]	; (b008 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    af86:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    af8a:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    af8e:	2802      	cmp	r0, #2
    af90:	d104      	bne.n	af9c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    af92:	4642      	mov	r2, r8
    af94:	4649      	mov	r1, r9
    af96:	2006      	movs	r0, #6
    af98:	f7fe fd06 	bl	99a8 <MPSL_IRQ_RADIO_Handler+0xd0c>
    af9c:	20ff      	movs	r0, #255	; 0xff
    af9e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    afa2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    afa6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b00c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    afaa:	2820      	cmp	r0, #32
    afac:	bf1c      	itt	ne
    afae:	f898 0001 	ldrbne.w	r0, [r8, #1]
    afb2:	f001 fb23 	blne	c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    afb6:	f894 0020 	ldrb.w	r0, [r4, #32]
    afba:	b128      	cbz	r0, afc8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    afbc:	f000 fe98 	bl	bcf0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    afc0:	f884 5020 	strb.w	r5, [r4, #32]
    afc4:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    afc8:	2f02      	cmp	r7, #2
    afca:	d00f      	beq.n	afec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    afcc:	2f01      	cmp	r7, #1
    afce:	bf18      	it	ne
    afd0:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    afd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    afdc:	2900      	cmp	r1, #0
    afde:	bf08      	it	eq
    afe0:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afe4:	b001      	add	sp, #4
    afe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    afea:	4708      	bx	r1
    afec:	68a0      	ldr	r0, [r4, #8]
    afee:	1b80      	subs	r0, r0, r6
    aff0:	f005 fda9 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aff4:	f8d8 1004 	ldr.w	r1, [r8, #4]
    aff8:	2900      	cmp	r1, #0
    affa:	d1f3      	bne.n	afe4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    affc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b000:	20001238 	.word	0x20001238
    b004:	20000db8 	.word	0x20000db8
    b008:	200011b8 	.word	0x200011b8
    b00c:	2000030c 	.word	0x2000030c

0000b010 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b010:	b570      	push	{r4, r5, r6, lr}
    b012:	4c42      	ldr	r4, [pc, #264]	; (b11c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b014:	4605      	mov	r5, r0
    b016:	b082      	sub	sp, #8
    b018:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b01c:	2820      	cmp	r0, #32
    b01e:	d008      	beq.n	b032 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b020:	6860      	ldr	r0, [r4, #4]
    b022:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    b026:	d009      	beq.n	b03c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b028:	f640 21b6 	movw	r1, #2742	; 0xab6
    b02c:	2070      	movs	r0, #112	; 0x70
    b02e:	f001 fa13 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b032:	f640 21b5 	movw	r1, #2741	; 0xab5
    b036:	2070      	movs	r0, #112	; 0x70
    b038:	f001 fa0e 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b03c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b040:	4937      	ldr	r1, [pc, #220]	; (b120 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b042:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b046:	68b0      	ldr	r0, [r6, #8]
    b048:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b04c:	f005 fd7b 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b050:	4602      	mov	r2, r0
    b052:	8af0      	ldrh	r0, [r6, #22]
    b054:	7d31      	ldrb	r1, [r6, #20]
    b056:	4b33      	ldr	r3, [pc, #204]	; (b124 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b058:	4408      	add	r0, r1
    b05a:	1c40      	adds	r0, r0, #1
    b05c:	1811      	adds	r1, r2, r0
    b05e:	429a      	cmp	r2, r3
    b060:	d817      	bhi.n	b092 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b062:	4a31      	ldr	r2, [pc, #196]	; (b128 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b064:	4290      	cmp	r0, r2
    b066:	dc1b      	bgt.n	b0a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b068:	f1c2 0c00 	rsb	ip, r2, #0
    b06c:	4560      	cmp	r0, ip
    b06e:	db1e      	blt.n	b0ae <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b070:	0056      	lsls	r6, r2, #1
    b072:	428e      	cmp	r6, r1
    b074:	bfdc      	itt	le
    b076:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b07a:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b07e:	dd05      	ble.n	b08c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b080:	2900      	cmp	r1, #0
    b082:	bfbc      	itt	lt
    b084:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b088:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b08c:	1948      	adds	r0, r1, r5
    b08e:	4299      	cmp	r1, r3
    b090:	d904      	bls.n	b09c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b092:	f240 517f 	movw	r1, #1407	; 0x57f
    b096:	2070      	movs	r0, #112	; 0x70
    b098:	f001 f9de 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b09c:	4295      	cmp	r5, r2
    b09e:	dd04      	ble.n	b0aa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b0a0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b0a4:	2070      	movs	r0, #112	; 0x70
    b0a6:	f001 f9d7 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0aa:	4565      	cmp	r5, ip
    b0ac:	da04      	bge.n	b0b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b0ae:	f240 5181 	movw	r1, #1409	; 0x581
    b0b2:	2070      	movs	r0, #112	; 0x70
    b0b4:	f001 f9d0 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0b8:	4286      	cmp	r6, r0
    b0ba:	bfdc      	itt	le
    b0bc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b0c0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b0c4:	dd05      	ble.n	b0d2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b0c6:	2800      	cmp	r0, #0
    b0c8:	bfbc      	itt	lt
    b0ca:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b0ce:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b0d2:	aa01      	add	r2, sp, #4
    b0d4:	4669      	mov	r1, sp
    b0d6:	f000 f92b 	bl	b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b0da:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0de:	280f      	cmp	r0, #15
    b0e0:	bf8c      	ite	hi
    b0e2:	2001      	movhi	r0, #1
    b0e4:	2000      	movls	r0, #0
    b0e6:	9900      	ldr	r1, [sp, #0]
    b0e8:	4408      	add	r0, r1
    b0ea:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b0ee:	6061      	str	r1, [r4, #4]
    b0f0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b0f4:	f88d 0000 	strb.w	r0, [sp]
    b0f8:	f89d 0000 	ldrb.w	r0, [sp]
    b0fc:	2800      	cmp	r0, #0
    b0fe:	bf04      	itt	eq
    b100:	b002      	addeq	sp, #8
    b102:	bd70      	popeq	{r4, r5, r6, pc}
    b104:	2005      	movs	r0, #5
    b106:	f000 fc15 	bl	b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b10a:	2800      	cmp	r0, #0
    b10c:	bf1c      	itt	ne
    b10e:	b002      	addne	sp, #8
    b110:	bd70      	popne	{r4, r5, r6, pc}
    b112:	f640 21bd 	movw	r1, #2749	; 0xabd
    b116:	2070      	movs	r0, #112	; 0x70
    b118:	f001 f99e 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b11c:	20001238 	.word	0x20001238
    b120:	20000db8 	.word	0x20000db8
    b124:	1e847fff 	.word	0x1e847fff
    b128:	0f424000 	.word	0x0f424000

0000b12c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b12c:	b570      	push	{r4, r5, r6, lr}
    b12e:	4c1e      	ldr	r4, [pc, #120]	; (b1a8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b130:	2120      	movs	r1, #32
    b132:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b136:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b13a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b13e:	2000      	movs	r0, #0
    b140:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b144:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b148:	1e42      	subs	r2, r0, #1
    b14a:	e9c4 0200 	strd	r0, r2, [r4]
    b14e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b152:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b156:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b15a:	f884 0020 	strb.w	r0, [r4, #32]
    b15e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b166:	1e41      	subs	r1, r0, #1
    b168:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b16c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b170:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b174:	2210      	movs	r2, #16
    b176:	7088      	strb	r0, [r1, #2]
    b178:	f801 0f04 	strb.w	r0, [r1, #4]!
    b17c:	1e52      	subs	r2, r2, #1
    b17e:	d1fa      	bne.n	b176 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b180:	f000 fde4 	bl	bd4c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b184:	4d09      	ldr	r5, [pc, #36]	; (b1ac <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b186:	2601      	movs	r6, #1
    b188:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b18c:	20ff      	movs	r0, #255	; 0xff
    b18e:	7028      	strb	r0, [r5, #0]
    b190:	4807      	ldr	r0, [pc, #28]	; (b1b0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b192:	f001 fa15 	bl	c5c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b196:	7068      	strb	r0, [r5, #1]
    b198:	f001 fa80 	bl	c69c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b19c:	60a8      	str	r0, [r5, #8]
    b19e:	f000 fd67 	bl	bc70 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b1a2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b1a6:	bd70      	pop	{r4, r5, r6, pc}
    b1a8:	20001238 	.word	0x20001238
    b1ac:	2000030c 	.word	0x2000030c
    b1b0:	000098d9 	.word	0x000098d9

0000b1b4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1b6:	4607      	mov	r7, r0
    b1b8:	b087      	sub	sp, #28
    b1ba:	461d      	mov	r5, r3
    b1bc:	460e      	mov	r6, r1
    b1be:	4610      	mov	r0, r2
    b1c0:	f005 fcc1 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1c4:	4604      	mov	r4, r0
    b1c6:	a803      	add	r0, sp, #12
    b1c8:	9000      	str	r0, [sp, #0]
    b1ca:	ab04      	add	r3, sp, #16
    b1cc:	aa02      	add	r2, sp, #8
    b1ce:	4638      	mov	r0, r7
    b1d0:	4631      	mov	r1, r6
    b1d2:	f000 f853 	bl	b27c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b1d6:	9902      	ldr	r1, [sp, #8]
    b1d8:	4a14      	ldr	r2, [pc, #80]	; (b22c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    b1da:	1a60      	subs	r0, r4, r1
    b1dc:	2300      	movs	r3, #0
    b1de:	1a82      	subs	r2, r0, r2
    b1e0:	f173 0200 	sbcs.w	r2, r3, #0
    b1e4:	d318      	bcc.n	b218 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b1e6:	f8df c044 	ldr.w	ip, [pc, #68]	; b22c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    b1ea:	1b0a      	subs	r2, r1, r4
    b1ec:	ebb2 0c0c 	subs.w	ip, r2, ip
    b1f0:	f173 0300 	sbcs.w	r3, r3, #0
    b1f4:	d310      	bcc.n	b218 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b1f6:	4b0e      	ldr	r3, [pc, #56]	; (b230 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    b1f8:	4283      	cmp	r3, r0
    b1fa:	bf3e      	ittt	cc
    b1fc:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    b200:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b204:	4420      	addcc	r0, r4
    b206:	d307      	bcc.n	b218 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b208:	4293      	cmp	r3, r2
    b20a:	d209      	bcs.n	b220 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    b20c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    b210:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    b214:	4408      	add	r0, r1
    b216:	4240      	negs	r0, r0
    b218:	300f      	adds	r0, #15
    b21a:	b007      	add	sp, #28
    b21c:	1a28      	subs	r0, r5, r0
    b21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b220:	f640 21d7 	movw	r1, #2775	; 0xad7
    b224:	2070      	movs	r0, #112	; 0x70
    b226:	f001 f917 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b22a:	0000      	.short	0x0000
    b22c:	0f424000 	.word	0x0f424000
    b230:	1e847fff 	.word	0x1e847fff

0000b234 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b234:	0e03      	lsrs	r3, r0, #24
    b236:	b430      	push	{r4, r5}
    b238:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b23c:	f8df c038 	ldr.w	ip, [pc, #56]	; b278 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b240:	0e09      	lsrs	r1, r1, #24
    b242:	fba3 250c 	umull	r2, r5, r3, ip
    b246:	fb01 510c 	mla	r1, r1, ip, r5
    b24a:	2400      	movs	r4, #0
    b24c:	fb03 1104 	mla	r1, r3, r4, r1
    b250:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b254:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b258:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b25c:	fb13 f30c 	smulbb	r3, r3, ip
    b260:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b264:	fb10 f00c 	smulbb	r0, r0, ip
    b268:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b26c:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b270:	1880      	adds	r0, r0, r2
    b272:	4161      	adcs	r1, r4
    b274:	bc30      	pop	{r4, r5}
    b276:	4770      	bx	lr
    b278:	1e848000 	.word	0x1e848000

0000b27c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b27c:	b570      	push	{r4, r5, r6, lr}
    b27e:	b084      	sub	sp, #16
    b280:	4615      	mov	r5, r2
    b282:	aa01      	add	r2, sp, #4
    b284:	461c      	mov	r4, r3
    b286:	9200      	str	r2, [sp, #0]
    b288:	9e08      	ldr	r6, [sp, #32]
    b28a:	ab02      	add	r3, sp, #8
    b28c:	4a17      	ldr	r2, [pc, #92]	; (b2ec <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b28e:	f005 fddb 	bl	10e48 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b292:	9801      	ldr	r0, [sp, #4]
    b294:	f248 6237 	movw	r2, #34359	; 0x8637
    b298:	0b41      	lsrs	r1, r0, #13
    b29a:	4351      	muls	r1, r2
    b29c:	0c09      	lsrs	r1, r1, #16
    b29e:	4a14      	ldr	r2, [pc, #80]	; (b2f0 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b2a0:	024b      	lsls	r3, r1, #9
    b2a2:	fb01 0102 	mla	r1, r1, r2, r0
    b2a6:	4813      	ldr	r0, [pc, #76]	; (b2f4 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b2a8:	4348      	muls	r0, r1
    b2aa:	0d42      	lsrs	r2, r0, #21
    b2ac:	1898      	adds	r0, r3, r2
    b2ae:	f643 5309 	movw	r3, #15625	; 0x3d09
    b2b2:	fb12 f303 	smulbb	r3, r2, r3
    b2b6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b2ba:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b2be:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b2c2:	4463      	add	r3, ip
    b2c4:	b2d2      	uxtb	r2, r2
    b2c6:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b2ca:	bf84      	itt	hi
    b2cc:	2200      	movhi	r2, #0
    b2ce:	1c40      	addhi	r0, r0, #1
    b2d0:	7032      	strb	r2, [r6, #0]
    b2d2:	9b02      	ldr	r3, [sp, #8]
    b2d4:	0a19      	lsrs	r1, r3, #8
    b2d6:	061b      	lsls	r3, r3, #24
    b2d8:	1818      	adds	r0, r3, r0
    b2da:	f141 0100 	adc.w	r1, r1, #0
    b2de:	e9c4 0100 	strd	r0, r1, [r4]
    b2e2:	9801      	ldr	r0, [sp, #4]
    b2e4:	6028      	str	r0, [r5, #0]
    b2e6:	b004      	add	sp, #16
    b2e8:	bd70      	pop	{r4, r5, r6, pc}
    b2ea:	0000      	.short	0x0000
    b2ec:	1e848000 	.word	0x1e848000
    b2f0:	ffffc2f7 	.word	0xffffc2f7
    b2f4:	00010c6f 	.word	0x00010c6f

0000b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b2f8:	0b41      	lsrs	r1, r0, #13
    b2fa:	f248 6237 	movw	r2, #34359	; 0x8637
    b2fe:	4351      	muls	r1, r2
    b300:	0c0a      	lsrs	r2, r1, #16
    b302:	4b09      	ldr	r3, [pc, #36]	; (b328 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b304:	0251      	lsls	r1, r2, #9
    b306:	fb02 0203 	mla	r2, r2, r3, r0
    b30a:	4808      	ldr	r0, [pc, #32]	; (b32c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b30c:	4350      	muls	r0, r2
    b30e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b312:	306e      	adds	r0, #110	; 0x6e
    b314:	0d40      	lsrs	r0, r0, #21
    b316:	425b      	negs	r3, r3
    b318:	fb10 f303 	smulbb	r3, r0, r3
    b31c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b320:	bf88      	it	hi
    b322:	1c49      	addhi	r1, r1, #1
    b324:	4408      	add	r0, r1
    b326:	4770      	bx	lr
    b328:	ffffc2f7 	.word	0xffffc2f7
    b32c:	00010c6f 	.word	0x00010c6f

0000b330 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b330:	0b43      	lsrs	r3, r0, #13
    b332:	f248 6c37 	movw	ip, #34359	; 0x8637
    b336:	fb03 f30c 	mul.w	r3, r3, ip
    b33a:	b430      	push	{r4, r5}
    b33c:	0c1b      	lsrs	r3, r3, #16
    b33e:	f8df c044 	ldr.w	ip, [pc, #68]	; b384 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b342:	025c      	lsls	r4, r3, #9
    b344:	fb03 030c 	mla	r3, r3, ip, r0
    b348:	480f      	ldr	r0, [pc, #60]	; (b388 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b34a:	4358      	muls	r0, r3
    b34c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b350:	eb04 000c 	add.w	r0, r4, ip
    b354:	f643 5409 	movw	r4, #15625	; 0x3d09
    b358:	fb1c f404 	smulbb	r4, ip, r4
    b35c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b360:	f643 5508 	movw	r5, #15624	; 0x3d08
    b364:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b368:	442c      	add	r4, r5
    b36a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b36e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b372:	bf84      	itt	hi
    b374:	f04f 0c00 	movhi.w	ip, #0
    b378:	1c40      	addhi	r0, r0, #1
    b37a:	6008      	str	r0, [r1, #0]
    b37c:	f882 c000 	strb.w	ip, [r2]
    b380:	bc30      	pop	{r4, r5}
    b382:	4770      	bx	lr
    b384:	ffffc2f7 	.word	0xffffc2f7
    b388:	00010c6f 	.word	0x00010c6f

0000b38c <MPSL_IRQ_RTC0_Handler>:
    b38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b390:	2400      	movs	r4, #0
    b392:	f8df 9080 	ldr.w	r9, [pc, #128]	; b414 <MPSL_IRQ_RTC0_Handler+0x88>
    b396:	4d20      	ldr	r5, [pc, #128]	; (b418 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b398:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b39c:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b3a0:	ea4f 0604 	mov.w	r6, r4
    b3a4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b3a8:	fa07 f004 	lsl.w	r0, r7, r4
    b3ac:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b3b0:	4202      	tst	r2, r0
    b3b2:	d01a      	beq.n	b3ea <MPSL_IRQ_RTC0_Handler+0x5e>
    b3b4:	4a18      	ldr	r2, [pc, #96]	; (b418 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b3b6:	5852      	ldr	r2, [r2, r1]
    b3b8:	b1ba      	cbz	r2, b3ea <MPSL_IRQ_RTC0_Handler+0x5e>
    b3ba:	506e      	str	r6, [r5, r1]
    b3bc:	00a1      	lsls	r1, r4, #2
    b3be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b3c2:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b3c6:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b3ca:	f8d9 2000 	ldr.w	r2, [r9]
    b3ce:	1a89      	subs	r1, r1, r2
    b3d0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b3d4:	2902      	cmp	r1, #2
    b3d6:	d302      	bcc.n	b3de <MPSL_IRQ_RTC0_Handler+0x52>
    b3d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b3dc:	d905      	bls.n	b3ea <MPSL_IRQ_RTC0_Handler+0x5e>
    b3de:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b3e2:	1d20      	adds	r0, r4, #4
    b3e4:	b2c0      	uxtb	r0, r0
    b3e6:	f7fe fd3f 	bl	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3ea:	1c60      	adds	r0, r4, #1
    b3ec:	b2c4      	uxtb	r4, r0
    b3ee:	2c03      	cmp	r4, #3
    b3f0:	d3d8      	bcc.n	b3a4 <MPSL_IRQ_RTC0_Handler+0x18>
    b3f2:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b3f6:	b128      	cbz	r0, b404 <MPSL_IRQ_RTC0_Handler+0x78>
    b3f8:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b3fc:	4807      	ldr	r0, [pc, #28]	; (b41c <MPSL_IRQ_RTC0_Handler+0x90>)
    b3fe:	6881      	ldr	r1, [r0, #8]
    b400:	1c49      	adds	r1, r1, #1
    b402:	6081      	str	r1, [r0, #8]
    b404:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b408:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b40c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b414:	4000b504 	.word	0x4000b504
    b418:	4000b000 	.word	0x4000b000
    b41c:	20000028 	.word	0x20000028

0000b420 <MPSL_IRQ_TIMER0_Handler>:
    b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b424:	4d38      	ldr	r5, [pc, #224]	; (b508 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b426:	7828      	ldrb	r0, [r5, #0]
    b428:	2804      	cmp	r0, #4
    b42a:	d068      	beq.n	b4fe <MPSL_IRQ_TIMER0_Handler+0xde>
    b42c:	1ca8      	adds	r0, r5, #2
    b42e:	2201      	movs	r2, #1
    b430:	7801      	ldrb	r1, [r0, #0]
    b432:	b159      	cbz	r1, b44c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b434:	2901      	cmp	r1, #1
    b436:	bf08      	it	eq
    b438:	706a      	strbeq	r2, [r5, #1]
    b43a:	d002      	beq.n	b442 <MPSL_IRQ_TIMER0_Handler+0x22>
    b43c:	7869      	ldrb	r1, [r5, #1]
    b43e:	2900      	cmp	r1, #0
    b440:	d058      	beq.n	b4f4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b442:	2102      	movs	r1, #2
    b444:	7001      	strb	r1, [r0, #0]
    b446:	7840      	ldrb	r0, [r0, #1]
    b448:	f000 fb2e 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b44c:	4c2f      	ldr	r4, [pc, #188]	; (b50c <MPSL_IRQ_TIMER0_Handler+0xec>)
    b44e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b452:	f04f 0800 	mov.w	r8, #0
    b456:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b45a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b45e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b462:	d00a      	beq.n	b47a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b464:	482a      	ldr	r0, [pc, #168]	; (b510 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b466:	6800      	ldr	r0, [r0, #0]
    b468:	b138      	cbz	r0, b47a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b46a:	2003      	movs	r0, #3
    b46c:	f000 fb1c 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b470:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b474:	2003      	movs	r0, #3
    b476:	f7fe fcf7 	bl	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b47a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b47e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b482:	d00a      	beq.n	b49a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b484:	4823      	ldr	r0, [pc, #140]	; (b514 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b486:	6800      	ldr	r0, [r0, #0]
    b488:	b138      	cbz	r0, b49a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b48a:	2002      	movs	r0, #2
    b48c:	f000 fb0c 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b490:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b494:	2002      	movs	r0, #2
    b496:	f7fe fce7 	bl	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b49a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b49e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b4a2:	d00a      	beq.n	b4ba <MPSL_IRQ_TIMER0_Handler+0x9a>
    b4a4:	481c      	ldr	r0, [pc, #112]	; (b518 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b4a6:	6800      	ldr	r0, [r0, #0]
    b4a8:	b138      	cbz	r0, b4ba <MPSL_IRQ_TIMER0_Handler+0x9a>
    b4aa:	2001      	movs	r0, #1
    b4ac:	f000 fafc 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4b4:	2001      	movs	r0, #1
    b4b6:	f7fe fcd7 	bl	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b4be:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b4c2:	bf08      	it	eq
    b4c4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4c8:	4814      	ldr	r0, [pc, #80]	; (b51c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b4ca:	6800      	ldr	r0, [r0, #0]
    b4cc:	2800      	cmp	r0, #0
    b4ce:	bf08      	it	eq
    b4d0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4d4:	2000      	movs	r0, #0
    b4d6:	f000 fae7 	bl	baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b4da:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b4de:	2004      	movs	r0, #4
    b4e0:	7028      	strb	r0, [r5, #0]
    b4e2:	f8c5 8004 	str.w	r8, [r5, #4]
    b4e6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b4ee:	2000      	movs	r0, #0
    b4f0:	f7fe bcba 	b.w	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4f4:	f240 5169 	movw	r1, #1385	; 0x569
    b4f8:	206c      	movs	r0, #108	; 0x6c
    b4fa:	f000 ffad 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b502:	2007      	movs	r0, #7
    b504:	f7fe bcb0 	b.w	9e68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b508:	20000028 	.word	0x20000028
    b50c:	40008000 	.word	0x40008000
    b510:	4000814c 	.word	0x4000814c
    b514:	40008148 	.word	0x40008148
    b518:	40008144 	.word	0x40008144
    b51c:	40008140 	.word	0x40008140
    b520:	2201      	movs	r2, #1
    b522:	0211      	lsls	r1, r2, #8
    b524:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b528:	2000      	movs	r0, #0
    b52a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b52e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b532:	f3bf 8f4f 	dsb	sy
    b536:	f3bf 8f6f 	isb	sy
    b53a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b53e:	490e      	ldr	r1, [pc, #56]	; (b578 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b540:	f841 2f04 	str.w	r2, [r1, #4]!
    b544:	1e43      	subs	r3, r0, #1
    b546:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b54a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b54e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b552:	4b0a      	ldr	r3, [pc, #40]	; (b57c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b554:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b558:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b55c:	1d1b      	adds	r3, r3, #4
    b55e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b562:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b566:	1d1b      	adds	r3, r3, #4
    b568:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b56c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b570:	60ca      	str	r2, [r1, #12]
    b572:	4903      	ldr	r1, [pc, #12]	; (b580 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b574:	7048      	strb	r0, [r1, #1]
    b576:	4770      	bx	lr
    b578:	40008000 	.word	0x40008000
    b57c:	40008004 	.word	0x40008004
    b580:	20000028 	.word	0x20000028

0000b584 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b584:	4801      	ldr	r0, [pc, #4]	; (b58c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b586:	6800      	ldr	r0, [r0, #0]
    b588:	4770      	bx	lr
    b58a:	0000      	.short	0x0000
    b58c:	4000b504 	.word	0x4000b504

0000b590 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b590:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b594:	f8df 8130 	ldr.w	r8, [pc, #304]	; b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b598:	4604      	mov	r4, r0
    b59a:	f1a8 0702 	sub.w	r7, r8, #2
    b59e:	460e      	mov	r6, r1
    b5a0:	f898 c000 	ldrb.w	ip, [r8]
    b5a4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b5a8:	f1bc 0f01 	cmp.w	ip, #1
    b5ac:	d106      	bne.n	b5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b5ae:	ea81 0204 	eor.w	r2, r1, r4
    b5b2:	4070      	eors	r0, r6
    b5b4:	4310      	orrs	r0, r2
    b5b6:	bf08      	it	eq
    b5b8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b5bc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b5c0:	4a42      	ldr	r2, [pc, #264]	; (b6cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b5c2:	6010      	str	r0, [r2, #0]
    b5c4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b5c8:	f1bc 0f00 	cmp.w	ip, #0
    b5cc:	bf07      	ittee	eq
    b5ce:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b5d2:	2200      	moveq	r2, #0
    b5d4:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b5d8:	2201      	movne	r2, #1
    b5da:	483d      	ldr	r0, [pc, #244]	; (b6d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b5dc:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b5e0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b5e4:	2500      	movs	r5, #0
    b5e6:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b5ea:	2a02      	cmp	r2, #2
    b5ec:	d207      	bcs.n	b5fe <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b5ee:	bf00      	nop
    b5f0:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b5f4:	50c5      	str	r5, [r0, r3]
    b5f6:	1c52      	adds	r2, r2, #1
    b5f8:	b2d2      	uxtb	r2, r2
    b5fa:	2a02      	cmp	r2, #2
    b5fc:	d3f8      	bcc.n	b5f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b5fe:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b602:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b606:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b60a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b60e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b612:	4a30      	ldr	r2, [pc, #192]	; (b6d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b614:	f8d2 9000 	ldr.w	r9, [r2]
    b618:	eba3 0909 	sub.w	r9, r3, r9
    b61c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b620:	f04f 0901 	mov.w	r9, #1
    b624:	f1ba 0f02 	cmp.w	sl, #2
    b628:	d32e      	bcc.n	b688 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b62a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b62e:	d82b      	bhi.n	b688 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b630:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b634:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b638:	f1bc 0f00 	cmp.w	ip, #0
    b63c:	d005      	beq.n	b64a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b63e:	6810      	ldr	r0, [r2, #0]
    b640:	1a08      	subs	r0, r1, r0
    b642:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b646:	2802      	cmp	r0, #2
    b648:	d3f9      	bcc.n	b63e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b64a:	f8c7 9004 	str.w	r9, [r7, #4]
    b64e:	703d      	strb	r5, [r7, #0]
    b650:	f7ff ff66 	bl	b520 <MPSL_IRQ_TIMER0_Handler+0x100>
    b654:	4820      	ldr	r0, [pc, #128]	; (b6d8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b656:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b65a:	f365 0101 	bfi	r1, r5, #0, #2
    b65e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b662:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b666:	2102      	movs	r1, #2
    b668:	f361 0201 	bfi	r2, r1, #0, #2
    b66c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b670:	2110      	movs	r1, #16
    b672:	fa91 f1a1 	rbit	r1, r1
    b676:	fab1 f181 	clz	r1, r1
    b67a:	2909      	cmp	r1, #9
    b67c:	d909      	bls.n	b692 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b67e:	f240 3155 	movw	r1, #853	; 0x355
    b682:	a016      	add	r0, pc, #88	; (adr r0, b6dc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b684:	f000 febc 	bl	c400 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b688:	f240 31b2 	movw	r1, #946	; 0x3b2
    b68c:	206c      	movs	r0, #108	; 0x6c
    b68e:	f000 fee3 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b692:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b696:	f8c0 900c 	str.w	r9, [r0, #12]
    b69a:	6879      	ldr	r1, [r7, #4]
    b69c:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b6a0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b6a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b6a8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b6ac:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b6b0:	490d      	ldr	r1, [pc, #52]	; (b6e8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b6b2:	0480      	lsls	r0, r0, #18
    b6b4:	6008      	str	r0, [r1, #0]
    b6b6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b6ba:	2004      	movs	r0, #4
    b6bc:	f888 0001 	strb.w	r0, [r8, #1]
    b6c0:	f888 9000 	strb.w	r9, [r8]
    b6c4:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b6c8:	2000002a 	.word	0x2000002a
    b6cc:	4001f508 	.word	0x4001f508
    b6d0:	4000b000 	.word	0x4000b000
    b6d4:	4000b504 	.word	0x4000b504
    b6d8:	40008000 	.word	0x40008000
    b6dc:	5f66726e 	.word	0x5f66726e
    b6e0:	656d6974 	.word	0x656d6974
    b6e4:	00682e72 	.word	0x00682e72
    b6e8:	4001f504 	.word	0x4001f504

0000b6ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6f0:	4c31      	ldr	r4, [pc, #196]	; (b7b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b6f2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b6f6:	ea82 0c00 	eor.w	ip, r2, r0
    b6fa:	404b      	eors	r3, r1
    b6fc:	ea5c 0303 	orrs.w	r3, ip, r3
    b700:	bf14      	ite	ne
    b702:	2301      	movne	r3, #1
    b704:	2300      	moveq	r3, #0
    b706:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b7bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b70a:	f89c 8000 	ldrb.w	r8, [ip]
    b70e:	f1b8 0f02 	cmp.w	r8, #2
    b712:	d002      	beq.n	b71a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b714:	2b00      	cmp	r3, #0
    b716:	d03f      	beq.n	b798 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b718:	e003      	b.n	b722 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b71a:	2b00      	cmp	r3, #0
    b71c:	bf08      	it	eq
    b71e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b722:	7863      	ldrb	r3, [r4, #1]
    b724:	b3bb      	cbz	r3, b796 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b726:	4d26      	ldr	r5, [pc, #152]	; (b7c0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b728:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b72c:	602b      	str	r3, [r5, #0]
    b72e:	4e25      	ldr	r6, [pc, #148]	; (b7c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b730:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b734:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b738:	462f      	mov	r7, r5
    b73a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b73e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b742:	2500      	movs	r5, #0
    b744:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b748:	4d1f      	ldr	r5, [pc, #124]	; (b7c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b74a:	f8d5 9000 	ldr.w	r9, [r5]
    b74e:	eba3 0909 	sub.w	r9, r3, r9
    b752:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b756:	f1b9 0f02 	cmp.w	r9, #2
    b75a:	d327      	bcc.n	b7ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b75c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b760:	d824      	bhi.n	b7ac <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b762:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b766:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b76a:	f1b8 0f00 	cmp.w	r8, #0
    b76e:	d005      	beq.n	b77c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b770:	682b      	ldr	r3, [r5, #0]
    b772:	1ad3      	subs	r3, r2, r3
    b774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b778:	2b02      	cmp	r3, #2
    b77a:	d3f9      	bcc.n	b770 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b77c:	4d13      	ldr	r5, [pc, #76]	; (b7cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b77e:	2202      	movs	r2, #2
    b780:	0753      	lsls	r3, r2, #29
    b782:	602b      	str	r3, [r5, #0]
    b784:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b788:	2004      	movs	r0, #4
    b78a:	f88c 0001 	strb.w	r0, [ip, #1]
    b78e:	f88c 2000 	strb.w	r2, [ip]
    b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b796:	e004      	b.n	b7a2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b798:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b79c:	206c      	movs	r0, #108	; 0x6c
    b79e:	f000 fe5b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7a2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b7a6:	206c      	movs	r0, #108	; 0x6c
    b7a8:	f000 fe56 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7ac:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b7b0:	206c      	movs	r0, #108	; 0x6c
    b7b2:	f000 fe51 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b6:	0000      	.short	0x0000
    b7b8:	20000028 	.word	0x20000028
    b7bc:	2000002a 	.word	0x2000002a
    b7c0:	4001f508 	.word	0x4001f508
    b7c4:	4000b000 	.word	0x4000b000
    b7c8:	4000b504 	.word	0x4000b504
    b7cc:	4001f504 	.word	0x4001f504

0000b7d0 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b7d0:	4901      	ldr	r1, [pc, #4]	; (b7d8 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b7d2:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    b7d6:	4770      	bx	lr
    b7d8:	20000028 	.word	0x20000028

0000b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7e0:	f8df c0f4 	ldr.w	ip, [pc, #244]	; b8d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    b7e4:	f89c 4000 	ldrb.w	r4, [ip]
    b7e8:	2c00      	cmp	r4, #0
    b7ea:	bf07      	ittee	eq
    b7ec:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    b7f0:	2100      	moveq	r1, #0
    b7f2:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    b7f6:	2101      	movne	r1, #1
    b7f8:	4838      	ldr	r0, [pc, #224]	; (b8dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    b7fa:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b7fe:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b802:	2300      	movs	r3, #0
    b804:	2902      	cmp	r1, #2
    b806:	bf38      	it	cc
    b808:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    b80c:	d207      	bcs.n	b81e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    b80e:	bf00      	nop
    b810:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    b814:	5083      	str	r3, [r0, r2]
    b816:	1c49      	adds	r1, r1, #1
    b818:	b2c9      	uxtb	r1, r1
    b81a:	2902      	cmp	r1, #2
    b81c:	d3f8      	bcc.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    b81e:	2c02      	cmp	r4, #2
    b820:	d004      	beq.n	b82c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    b822:	f240 31db 	movw	r1, #987	; 0x3db
    b826:	206c      	movs	r0, #108	; 0x6c
    b828:	f000 fe16 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b82c:	f3ef 8210 	mrs	r2, PRIMASK
    b830:	b672      	cpsid	i
    b832:	4c2b      	ldr	r4, [pc, #172]	; (b8e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    b834:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b838:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    b83c:	b12d      	cbz	r5, b84a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    b83e:	68a1      	ldr	r1, [r4, #8]
    b840:	1c49      	adds	r1, r1, #1
    b842:	60a1      	str	r1, [r4, #8]
    b844:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    b848:	e7f4      	b.n	b834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    b84a:	68a0      	ldr	r0, [r4, #8]
    b84c:	b902      	cbnz	r2, b850 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    b84e:	b662      	cpsie	i
    b850:	0a02      	lsrs	r2, r0, #8
    b852:	0600      	lsls	r0, r0, #24
    b854:	1840      	adds	r0, r0, r1
    b856:	eb42 0103 	adc.w	r1, r2, r3
    b85a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    b85e:	1cc0      	adds	r0, r0, #3
    b860:	f141 0100 	adc.w	r1, r1, #0
    b864:	4f1f      	ldr	r7, [pc, #124]	; (b8e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    b866:	2601      	movs	r6, #1
    b868:	4d1f      	ldr	r5, [pc, #124]	; (b8e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    b86a:	ea80 0902 	eor.w	r9, r0, r2
    b86e:	ea81 0808 	eor.w	r8, r1, r8
    b872:	ea59 0808 	orrs.w	r8, r9, r8
    b876:	d00e      	beq.n	b896 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b878:	f8d7 8000 	ldr.w	r8, [r7]
    b87c:	eba2 0808 	sub.w	r8, r2, r8
    b880:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    b884:	f1b8 0f04 	cmp.w	r8, #4
    b888:	d305      	bcc.n	b896 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b88a:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    b88e:	d802      	bhi.n	b896 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    b890:	f7ff fe7e 	bl	b590 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b894:	e01b      	b.n	b8ce <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b896:	6838      	ldr	r0, [r7, #0]
    b898:	1a10      	subs	r0, r2, r0
    b89a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b89e:	2802      	cmp	r0, #2
    b8a0:	d313      	bcc.n	b8ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b8a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b8a6:	d810      	bhi.n	b8ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    b8a8:	4910      	ldr	r1, [pc, #64]	; (b8ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    b8aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b8ae:	6008      	str	r0, [r1, #0]
    b8b0:	6066      	str	r6, [r4, #4]
    b8b2:	7023      	strb	r3, [r4, #0]
    b8b4:	606e      	str	r6, [r5, #4]
    b8b6:	60ee      	str	r6, [r5, #12]
    b8b8:	0040      	lsls	r0, r0, #1
    b8ba:	1f09      	subs	r1, r1, #4
    b8bc:	6008      	str	r0, [r1, #0]
    b8be:	2004      	movs	r0, #4
    b8c0:	f88c 0001 	strb.w	r0, [ip, #1]
    b8c4:	f88c 6000 	strb.w	r6, [ip]
    b8c8:	e001      	b.n	b8ce <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    b8ca:	6066      	str	r6, [r4, #4]
    b8cc:	7023      	strb	r3, [r4, #0]
    b8ce:	6860      	ldr	r0, [r4, #4]
    b8d0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8d8:	2000002a 	.word	0x2000002a
    b8dc:	4000b000 	.word	0x4000b000
    b8e0:	20000028 	.word	0x20000028
    b8e4:	4000b504 	.word	0x4000b504
    b8e8:	40008000 	.word	0x40008000
    b8ec:	4001f508 	.word	0x4001f508

0000b8f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    b8f0:	b410      	push	{r4}
    b8f2:	f3ef 8410 	mrs	r4, PRIMASK
    b8f6:	b672      	cpsid	i
    b8f8:	4a0c      	ldr	r2, [pc, #48]	; (b92c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    b8fa:	490d      	ldr	r1, [pc, #52]	; (b930 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    b8fc:	f04f 0c00 	mov.w	ip, #0
    b900:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    b904:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    b908:	b12b      	cbz	r3, b916 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    b90a:	6888      	ldr	r0, [r1, #8]
    b90c:	1c40      	adds	r0, r0, #1
    b90e:	6088      	str	r0, [r1, #8]
    b910:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    b914:	e7f4      	b.n	b900 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    b916:	6889      	ldr	r1, [r1, #8]
    b918:	b904      	cbnz	r4, b91c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    b91a:	b662      	cpsie	i
    b91c:	0a0a      	lsrs	r2, r1, #8
    b91e:	0609      	lsls	r1, r1, #24
    b920:	1808      	adds	r0, r1, r0
    b922:	bc10      	pop	{r4}
    b924:	eb42 010c 	adc.w	r1, r2, ip
    b928:	4770      	bx	lr
    b92a:	0000      	.short	0x0000
    b92c:	4000b000 	.word	0x4000b000
    b930:	20000028 	.word	0x20000028

0000b934 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b938:	4a56      	ldr	r2, [pc, #344]	; (ba94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    b93a:	2501      	movs	r5, #1
    b93c:	2400      	movs	r4, #0
    b93e:	f892 c000 	ldrb.w	ip, [r2]
    b942:	7852      	ldrb	r2, [r2, #1]
    b944:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b948:	2807      	cmp	r0, #7
    b94a:	d27d      	bcs.n	ba48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b94c:	e8df f000 	tbb	[pc, r0]
    b950:	04040404 	.word	0x04040404
    b954:	00606060 	.word	0x00606060
    b958:	4b4f      	ldr	r3, [pc, #316]	; (ba98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    b95a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    b95e:	43ff      	mvns	r7, r7
    b960:	ea77 0708 	orns	r7, r7, r8
    b964:	bf04      	itt	eq
    b966:	785b      	ldrbeq	r3, [r3, #1]
    b968:	2b00      	cmpeq	r3, #0
    b96a:	d003      	beq.n	b974 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    b96c:	f1bc 0f02 	cmp.w	ip, #2
    b970:	d005      	beq.n	b97e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    b972:	e026      	b.n	b9c2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    b974:	f44f 6186 	mov.w	r1, #1072	; 0x430
    b978:	206c      	movs	r0, #108	; 0x6c
    b97a:	f000 fd6d 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b97e:	1f13      	subs	r3, r2, #4
    b980:	b2db      	uxtb	r3, r3
    b982:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b986:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    b98a:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b98e:	2300      	movs	r3, #0
    b990:	f1bc 0f01 	cmp.w	ip, #1
    b994:	d003      	beq.n	b99e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    b996:	f1bc 0f02 	cmp.w	ip, #2
    b99a:	d008      	beq.n	b9ae <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    b99c:	e00e      	b.n	b9bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b99e:	2a04      	cmp	r2, #4
    b9a0:	bf24      	itt	cs
    b9a2:	6837      	ldrcs	r7, [r6, #0]
    b9a4:	2f00      	cmpcs	r7, #0
    b9a6:	bf08      	it	eq
    b9a8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    b9ac:	e006      	b.n	b9bc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    b9ae:	2a04      	cmp	r2, #4
    b9b0:	bf24      	itt	cs
    b9b2:	6837      	ldrcs	r7, [r6, #0]
    b9b4:	2f00      	cmpcs	r7, #0
    b9b6:	bf08      	it	eq
    b9b8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    b9bc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    b9c0:	d1e5      	bne.n	b98e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    b9c2:	4b36      	ldr	r3, [pc, #216]	; (ba9c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b9c4:	f100 0210 	add.w	r2, r0, #16
    b9c8:	fa05 f202 	lsl.w	r2, r5, r2
    b9cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b9d0:	f04f 0c40 	mov.w	ip, #64	; 0x40
    b9d4:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    b9d8:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b9dc:	449c      	add	ip, r3
    b9de:	f8cc 5000 	str.w	r5, [ip]
    b9e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b9e6:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    b9ea:	eba1 0c0c 	sub.w	ip, r1, ip
    b9ee:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b9f2:	f1bc 0f03 	cmp.w	ip, #3
    b9f6:	bf3e      	ittt	cc
    b9f8:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    b9fc:	2000      	movcc	r0, #0
    b9fe:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba02:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    ba06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    ba0a:	2001      	movs	r0, #1
    ba0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba10:	f1bc 0f00 	cmp.w	ip, #0
    ba14:	d006      	beq.n	ba24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ba16:	4282      	cmp	r2, r0
    ba18:	d104      	bne.n	ba24 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    ba1a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    ba1e:	206c      	movs	r0, #108	; 0x6c
    ba20:	f000 fd1a 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba24:	1f00      	subs	r0, r0, #4
    ba26:	b2c2      	uxtb	r2, r0
    ba28:	2a03      	cmp	r2, #3
    ba2a:	d304      	bcc.n	ba36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    ba2c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    ba30:	206c      	movs	r0, #108	; 0x6c
    ba32:	f000 fd11 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba36:	4b1a      	ldr	r3, [pc, #104]	; (baa0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    ba38:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    ba3c:	4090      	lsls	r0, r2
    ba3e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    ba42:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    ba46:	e000      	b.n	ba4a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    ba48:	e01f      	b.n	ba8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    ba4a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    ba4e:	f843 400c 	str.w	r4, [r3, ip]
    ba52:	f8df c050 	ldr.w	ip, [pc, #80]	; baa4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    ba56:	f8dc c000 	ldr.w	ip, [ip]
    ba5a:	eba1 0c0c 	sub.w	ip, r1, ip
    ba5e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ba62:	f1bc 0f02 	cmp.w	ip, #2
    ba66:	d30d      	bcc.n	ba84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ba68:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ba6c:	d80a      	bhi.n	ba84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    ba6e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    ba72:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    ba76:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    ba7a:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    ba7e:	4628      	mov	r0, r5
    ba80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba84:	4620      	mov	r0, r4
    ba86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba8a:	f240 4154 	movw	r1, #1108	; 0x454
    ba8e:	206c      	movs	r0, #108	; 0x6c
    ba90:	f000 fce2 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba94:	2000002a 	.word	0x2000002a
    ba98:	20000028 	.word	0x20000028
    ba9c:	40008000 	.word	0x40008000
    baa0:	4000b000 	.word	0x4000b000
    baa4:	4000b504 	.word	0x4000b504

0000baa8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    baaa:	2101      	movs	r1, #1
    baac:	2600      	movs	r6, #0
    baae:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bab2:	2807      	cmp	r0, #7
    bab4:	d24a      	bcs.n	bb4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bab6:	e8df f000 	tbb	[pc, r0]
    baba:	0404      	.short	0x0404
    babc:	18180404 	.word	0x18180404
    bac0:	0018      	.short	0x0018
    bac2:	f100 0210 	add.w	r2, r0, #16
    bac6:	fa01 f202 	lsl.w	r2, r1, r2
    baca:	4923      	ldr	r1, [pc, #140]	; (bb58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    bacc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bad0:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bad4:	2200      	movs	r2, #0
    bad6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bada:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bade:	508e      	str	r6, [r1, r2]
    bae0:	491e      	ldr	r1, [pc, #120]	; (bb5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bae2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bae6:	9000      	str	r0, [sp, #0]
    bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    baea:	4d1d      	ldr	r5, [pc, #116]	; (bb60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    baec:	1f01      	subs	r1, r0, #4
    baee:	b2cc      	uxtb	r4, r1
    baf0:	7829      	ldrb	r1, [r5, #0]
    baf2:	b181      	cbz	r1, bb16 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    baf4:	786a      	ldrb	r2, [r5, #1]
    baf6:	4282      	cmp	r2, r0
    baf8:	d10d      	bne.n	bb16 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bafa:	4a1a      	ldr	r2, [pc, #104]	; (bb64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bafc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bb00:	6010      	str	r0, [r2, #0]
    bb02:	2901      	cmp	r1, #1
    bb04:	bf08      	it	eq
    bb06:	f7ff fd0b 	bleq	b520 <MPSL_IRQ_TIMER0_Handler+0x100>
    bb0a:	702e      	strb	r6, [r5, #0]
    bb0c:	4a16      	ldr	r2, [pc, #88]	; (bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bb0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bb12:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bb16:	4915      	ldr	r1, [pc, #84]	; (bb6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bb18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bb1c:	40a0      	lsls	r0, r4
    bb1e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bb22:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bb26:	00a0      	lsls	r0, r4, #2
    bb28:	4408      	add	r0, r1
    bb2a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bb2e:	4a10      	ldr	r2, [pc, #64]	; (bb70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bb30:	6812      	ldr	r2, [r2, #0]
    bb32:	1a80      	subs	r0, r0, r2
    bb34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bb38:	2802      	cmp	r0, #2
    bb3a:	bf24      	itt	cs
    bb3c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bb40:	500e      	strcs	r6, [r1, r0]
    bb42:	480c      	ldr	r0, [pc, #48]	; (bb74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bb44:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bb48:	9000      	str	r0, [sp, #0]
    bb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb4c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bb50:	206c      	movs	r0, #108	; 0x6c
    bb52:	f000 fc81 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb56:	0000      	.short	0x0000
    bb58:	40008000 	.word	0x40008000
    bb5c:	40008140 	.word	0x40008140
    bb60:	2000002a 	.word	0x2000002a
    bb64:	4001f508 	.word	0x4001f508
    bb68:	20000028 	.word	0x20000028
    bb6c:	4000b000 	.word	0x4000b000
    bb70:	4000b504 	.word	0x4000b504
    bb74:	4000b140 	.word	0x4000b140

0000bb78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bb78:	481a      	ldr	r0, [pc, #104]	; (bbe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    bb7a:	7800      	ldrb	r0, [r0, #0]
    bb7c:	2800      	cmp	r0, #0
    bb7e:	bf07      	ittee	eq
    bb80:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    bb84:	2100      	moveq	r1, #0
    bb86:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    bb8a:	2101      	movne	r1, #1
    bb8c:	4a16      	ldr	r2, [pc, #88]	; (bbe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    bb8e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bb92:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bb96:	2000      	movs	r0, #0
    bb98:	2902      	cmp	r1, #2
    bb9a:	bf38      	it	cc
    bb9c:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bba0:	d207      	bcs.n	bbb2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bba2:	bf00      	nop
    bba4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    bba8:	50d0      	str	r0, [r2, r3]
    bbaa:	1c49      	adds	r1, r1, #1
    bbac:	b2c9      	uxtb	r1, r1
    bbae:	2902      	cmp	r1, #2
    bbb0:	d3f8      	bcc.n	bba4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    bbb2:	490e      	ldr	r1, [pc, #56]	; (bbec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    bbb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bbb8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bbbc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bbc0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    bbc4:	1d0a      	adds	r2, r1, #4
    bbc6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbca:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bbce:	1d12      	adds	r2, r2, #4
    bbd0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbd4:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    bbd8:	1d12      	adds	r2, r2, #4
    bbda:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bbde:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    bbe2:	4770      	bx	lr
    bbe4:	2000002a 	.word	0x2000002a
    bbe8:	4000b000 	.word	0x4000b000
    bbec:	40008000 	.word	0x40008000

0000bbf0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    bbf0:	b570      	push	{r4, r5, r6, lr}
    bbf2:	f3ef 8110 	mrs	r1, PRIMASK
    bbf6:	b672      	cpsid	i
    bbf8:	2400      	movs	r4, #0
    bbfa:	4b0d      	ldr	r3, [pc, #52]	; (bc30 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    bbfc:	4a0d      	ldr	r2, [pc, #52]	; (bc34 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    bbfe:	bf00      	nop
    bc00:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    bc04:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    bc08:	f1bc 0f00 	cmp.w	ip, #0
    bc0c:	d005      	beq.n	bc1a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    bc0e:	6890      	ldr	r0, [r2, #8]
    bc10:	1c40      	adds	r0, r0, #1
    bc12:	6090      	str	r0, [r2, #8]
    bc14:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    bc18:	e7f2      	b.n	bc00 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    bc1a:	6895      	ldr	r5, [r2, #8]
    bc1c:	b901      	cbnz	r1, bc20 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    bc1e:	b662      	cpsie	i
    bc20:	f004 ff91 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    bc24:	4a04      	ldr	r2, [pc, #16]	; (bc38 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    bc26:	4621      	mov	r1, r4
    bc28:	fbe5 0102 	umlal	r0, r1, r5, r2
    bc2c:	bd70      	pop	{r4, r5, r6, pc}
    bc2e:	0000      	.short	0x0000
    bc30:	4000b000 	.word	0x4000b000
    bc34:	20000028 	.word	0x20000028
    bc38:	1e848000 	.word	0x1e848000

0000bc3c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bc3c:	b510      	push	{r4, lr}
    bc3e:	2807      	cmp	r0, #7
    bc40:	d20d      	bcs.n	bc5e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bc42:	e8df f000 	tbb	[pc, r0]
    bc46:	0404      	.short	0x0404
    bc48:	06060404 	.word	0x06060404
    bc4c:	0006      	.short	0x0006
    bc4e:	4906      	ldr	r1, [pc, #24]	; (bc68 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bc50:	e002      	b.n	bc58 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bc52:	1f00      	subs	r0, r0, #4
    bc54:	4905      	ldr	r1, [pc, #20]	; (bc6c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bc56:	b2c0      	uxtb	r0, r0
    bc58:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bc5c:	bd10      	pop	{r4, pc}
    bc5e:	f240 417b 	movw	r1, #1147	; 0x47b
    bc62:	206c      	movs	r0, #108	; 0x6c
    bc64:	f000 fbf8 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc68:	40008140 	.word	0x40008140
    bc6c:	4000b140 	.word	0x4000b140

0000bc70 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bc70:	b570      	push	{r4, r5, r6, lr}
    bc72:	481b      	ldr	r0, [pc, #108]	; (bce0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    bc74:	2400      	movs	r4, #0
    bc76:	2104      	movs	r1, #4
    bc78:	7004      	strb	r4, [r0, #0]
    bc7a:	1e80      	subs	r0, r0, #2
    bc7c:	7001      	strb	r1, [r0, #0]
    bc7e:	1f49      	subs	r1, r1, #5
    bc80:	e9c0 1104 	strd	r1, r1, [r0, #16]
    bc84:	6084      	str	r4, [r0, #8]
    bc86:	f7ff fc4b 	bl	b520 <MPSL_IRQ_TIMER0_Handler+0x100>
    bc8a:	2501      	movs	r5, #1
    bc8c:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bc90:	02eb      	lsls	r3, r5, #11
    bc92:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bc96:	f3bf 8f4f 	dsb	sy
    bc9a:	f3bf 8f6f 	isb	sy
    bc9e:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bca2:	4a10      	ldr	r2, [pc, #64]	; (bce4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    bca4:	6055      	str	r5, [r2, #4]
    bca6:	6095      	str	r5, [r2, #8]
    bca8:	480f      	ldr	r0, [pc, #60]	; (bce8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    bcaa:	6801      	ldr	r1, [r0, #0]
    bcac:	2900      	cmp	r1, #0
    bcae:	d1fc      	bne.n	bcaa <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    bcb0:	480e      	ldr	r0, [pc, #56]	; (bcec <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    bcb2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bcb6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bcba:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    bcbe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    bcc2:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    bcc6:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    bcca:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bcce:	6015      	str	r5, [r2, #0]
    bcd0:	f44f 7082 	mov.w	r0, #260	; 0x104
    bcd4:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    bcd8:	2002      	movs	r0, #2
    bcda:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    bcde:	bd70      	pop	{r4, r5, r6, pc}
    bce0:	2000002a 	.word	0x2000002a
    bce4:	4000b000 	.word	0x4000b000
    bce8:	4000b504 	.word	0x4000b504
    bcec:	00070002 	.word	0x00070002

0000bcf0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bcf0:	4808      	ldr	r0, [pc, #32]	; (bd14 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bcf2:	f990 0000 	ldrsb.w	r0, [r0]
    bcf6:	2800      	cmp	r0, #0
    bcf8:	bfb8      	it	lt
    bcfa:	4770      	bxlt	lr
    bcfc:	f000 011f 	and.w	r1, r0, #31
    bd00:	2201      	movs	r2, #1
    bd02:	fa02 f101 	lsl.w	r1, r2, r1
    bd06:	0940      	lsrs	r0, r0, #5
    bd08:	0080      	lsls	r0, r0, #2
    bd0a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bd0e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bd12:	4770      	bx	lr
    bd14:	20000388 	.word	0x20000388

0000bd18 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bd18:	4803      	ldr	r0, [pc, #12]	; (bd28 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bd1a:	7800      	ldrb	r0, [r0, #0]
    bd1c:	2803      	cmp	r0, #3
    bd1e:	bf0c      	ite	eq
    bd20:	2001      	moveq	r0, #1
    bd22:	2000      	movne	r0, #0
    bd24:	4770      	bx	lr
    bd26:	0000      	.short	0x0000
    bd28:	20000360 	.word	0x20000360

0000bd2c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bd2c:	4801      	ldr	r0, [pc, #4]	; (bd34 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bd2e:	8840      	ldrh	r0, [r0, #2]
    bd30:	4770      	bx	lr
    bd32:	0000      	.short	0x0000
    bd34:	20000360 	.word	0x20000360

0000bd38 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bd38:	4803      	ldr	r0, [pc, #12]	; (bd48 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bd3a:	7800      	ldrb	r0, [r0, #0]
    bd3c:	2802      	cmp	r0, #2
    bd3e:	bf16      	itet	ne
    bd40:	2803      	cmpne	r0, #3
    bd42:	2001      	moveq	r0, #1
    bd44:	2000      	movne	r0, #0
    bd46:	4770      	bx	lr
    bd48:	20000360 	.word	0x20000360

0000bd4c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bd4c:	4802      	ldr	r0, [pc, #8]	; (bd58 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bd4e:	2100      	movs	r1, #0
    bd50:	7001      	strb	r1, [r0, #0]
    bd52:	8041      	strh	r1, [r0, #2]
    bd54:	4770      	bx	lr
    bd56:	0000      	.short	0x0000
    bd58:	20000360 	.word	0x20000360

0000bd5c <MPSL_IRQ_CLOCK_Handler>:
    bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd60:	4c16      	ldr	r4, [pc, #88]	; (bdbc <MPSL_IRQ_CLOCK_Handler+0x60>)
    bd62:	7a60      	ldrb	r0, [r4, #9]
    bd64:	2800      	cmp	r0, #0
    bd66:	d027      	beq.n	bdb8 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bd68:	f44f 7180 	mov.w	r1, #256	; 0x100
    bd6c:	058d      	lsls	r5, r1, #22
    bd6e:	4628      	mov	r0, r5
    bd70:	f004 ff14 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd74:	4680      	mov	r8, r0
    bd76:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd7a:	4628      	mov	r0, r5
    bd7c:	f004 ff0e 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd80:	2600      	movs	r6, #0
    bd82:	4607      	mov	r7, r0
    bd84:	f1b8 0f00 	cmp.w	r8, #0
    bd88:	d009      	beq.n	bd9e <MPSL_IRQ_CLOCK_Handler+0x42>
    bd8a:	2001      	movs	r0, #1
    bd8c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bd90:	7920      	ldrb	r0, [r4, #4]
    bd92:	b120      	cbz	r0, bd9e <MPSL_IRQ_CLOCK_Handler+0x42>
    bd94:	7126      	strb	r6, [r4, #4]
    bd96:	69e0      	ldr	r0, [r4, #28]
    bd98:	b108      	cbz	r0, bd9e <MPSL_IRQ_CLOCK_Handler+0x42>
    bd9a:	4780      	blx	r0
    bd9c:	61e6      	str	r6, [r4, #28]
    bd9e:	b137      	cbz	r7, bdae <MPSL_IRQ_CLOCK_Handler+0x52>
    bda0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bda4:	2002      	movs	r0, #2
    bda6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdaa:	f000 fa75 	bl	c298 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bdae:	4640      	mov	r0, r8
    bdb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bdb4:	f000 b858 	b.w	be68 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdbc:	20000318 	.word	0x20000318
    bdc0:	b510      	push	{r4, lr}
    bdc2:	f004 ff95 	bl	10cf0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bdc6:	b930      	cbnz	r0, bdd6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bdc8:	f004 ffb3 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bdcc:	b918      	cbnz	r0, bdd6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bdce:	f004 ffe6 	bl	10d9e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bdd2:	2800      	cmp	r0, #0
    bdd4:	d002      	beq.n	bddc <MPSL_IRQ_CLOCK_Handler+0x80>
    bdd6:	4902      	ldr	r1, [pc, #8]	; (bde0 <MPSL_IRQ_CLOCK_Handler+0x84>)
    bdd8:	2002      	movs	r0, #2
    bdda:	6008      	str	r0, [r1, #0]
    bddc:	bd10      	pop	{r4, pc}
    bdde:	0000      	.short	0x0000
    bde0:	40000c34 	.word	0x40000c34
    bde4:	b570      	push	{r4, r5, r6, lr}
    bde6:	f000 f99b 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bdea:	f000 fabd 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bdee:	4c09      	ldr	r4, [pc, #36]	; (be14 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bdf0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdf4:	b130      	cbz	r0, be04 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bdf6:	f7ff ffe3 	bl	bdc0 <MPSL_IRQ_CLOCK_Handler+0x64>
    bdfa:	2001      	movs	r0, #1
    bdfc:	6128      	str	r0, [r5, #16]
    bdfe:	2004      	movs	r0, #4
    be00:	72a0      	strb	r0, [r4, #10]
    be02:	e004      	b.n	be0e <MPSL_IRQ_CLOCK_Handler+0xb2>
    be04:	2003      	movs	r0, #3
    be06:	72a0      	strb	r0, [r4, #10]
    be08:	2001      	movs	r0, #1
    be0a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    be0e:	2000      	movs	r0, #0
    be10:	71e0      	strb	r0, [r4, #7]
    be12:	bd70      	pop	{r4, r5, r6, pc}
    be14:	20000318 	.word	0x20000318
    be18:	b570      	push	{r4, r5, r6, lr}
    be1a:	4c12      	ldr	r4, [pc, #72]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x108>)
    be1c:	79a0      	ldrb	r0, [r4, #6]
    be1e:	b1e0      	cbz	r0, be5a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be20:	79e1      	ldrb	r1, [r4, #7]
    be22:	1e40      	subs	r0, r0, #1
    be24:	4281      	cmp	r1, r0
    be26:	da18      	bge.n	be5a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be28:	f000 fa9e 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    be2c:	4605      	mov	r5, r0
    be2e:	f000 fb87 	bl	c540 <mpsl_temperature_get>
    be32:	79a1      	ldrb	r1, [r4, #6]
    be34:	2901      	cmp	r1, #1
    be36:	d902      	bls.n	be3e <MPSL_IRQ_CLOCK_Handler+0xe2>
    be38:	79e1      	ldrb	r1, [r4, #7]
    be3a:	1c49      	adds	r1, r1, #1
    be3c:	71e1      	strb	r1, [r4, #7]
    be3e:	b10d      	cbz	r5, be44 <MPSL_IRQ_CLOCK_Handler+0xe8>
    be40:	6961      	ldr	r1, [r4, #20]
    be42:	e000      	b.n	be46 <MPSL_IRQ_CLOCK_Handler+0xea>
    be44:	6921      	ldr	r1, [r4, #16]
    be46:	1a41      	subs	r1, r0, r1
    be48:	2902      	cmp	r1, #2
    be4a:	da02      	bge.n	be52 <MPSL_IRQ_CLOCK_Handler+0xf6>
    be4c:	f111 0f02 	cmn.w	r1, #2
    be50:	dc07      	bgt.n	be62 <MPSL_IRQ_CLOCK_Handler+0x106>
    be52:	b10d      	cbz	r5, be58 <MPSL_IRQ_CLOCK_Handler+0xfc>
    be54:	6160      	str	r0, [r4, #20]
    be56:	e000      	b.n	be5a <MPSL_IRQ_CLOCK_Handler+0xfe>
    be58:	6120      	str	r0, [r4, #16]
    be5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    be5e:	f7ff bfc1 	b.w	bde4 <MPSL_IRQ_CLOCK_Handler+0x88>
    be62:	bd70      	pop	{r4, r5, r6, pc}
    be64:	20000318 	.word	0x20000318
    be68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be6c:	4606      	mov	r6, r0
    be6e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be72:	f44f 7186 	mov.w	r1, #268	; 0x10c
    be76:	4628      	mov	r0, r5
    be78:	f004 fe90 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be7c:	4680      	mov	r8, r0
    be7e:	f44f 7188 	mov.w	r1, #272	; 0x110
    be82:	4628      	mov	r0, r5
    be84:	f004 fe8a 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be88:	4c27      	ldr	r4, [pc, #156]	; (bf28 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be8a:	4682      	mov	sl, r0
    be8c:	7827      	ldrb	r7, [r4, #0]
    be8e:	f104 0008 	add.w	r0, r4, #8
    be92:	f004 fef7 	bl	10c84 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    be96:	b110      	cbz	r0, be9e <MPSL_IRQ_CLOCK_Handler+0x142>
    be98:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    be9c:	e016      	b.n	becc <MPSL_IRQ_CLOCK_Handler+0x170>
    be9e:	f04f 0901 	mov.w	r9, #1
    bea2:	b146      	cbz	r6, beb6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bea4:	7aa0      	ldrb	r0, [r4, #10]
    bea6:	2803      	cmp	r0, #3
    bea8:	d105      	bne.n	beb6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    beaa:	2004      	movs	r0, #4
    beac:	72a0      	strb	r0, [r4, #10]
    beae:	f7ff ff87 	bl	bdc0 <MPSL_IRQ_CLOCK_Handler+0x64>
    beb2:	f8c5 9010 	str.w	r9, [r5, #16]
    beb6:	2600      	movs	r6, #0
    beb8:	f1b8 0f00 	cmp.w	r8, #0
    bebc:	d018      	beq.n	bef0 <MPSL_IRQ_CLOCK_Handler+0x194>
    bebe:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bec2:	7aa0      	ldrb	r0, [r4, #10]
    bec4:	2804      	cmp	r0, #4
    bec6:	d004      	beq.n	bed2 <MPSL_IRQ_CLOCK_Handler+0x176>
    bec8:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    becc:	206d      	movs	r0, #109	; 0x6d
    bece:	f000 fac3 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bed2:	f004 ff0d 	bl	10cf0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bed6:	b928      	cbnz	r0, bee4 <MPSL_IRQ_CLOCK_Handler+0x188>
    bed8:	f004 ff2b 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bedc:	b910      	cbnz	r0, bee4 <MPSL_IRQ_CLOCK_Handler+0x188>
    bede:	f004 ff5e 	bl	10d9e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bee2:	b108      	cbz	r0, bee8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    bee4:	4811      	ldr	r0, [pc, #68]	; (bf2c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bee6:	6006      	str	r6, [r0, #0]
    bee8:	2002      	movs	r0, #2
    beea:	72a0      	strb	r0, [r4, #10]
    beec:	f000 f8fc 	bl	c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bef0:	f1ba 0f00 	cmp.w	sl, #0
    bef4:	d008      	beq.n	bf08 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bef6:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    befa:	7aa0      	ldrb	r0, [r4, #10]
    befc:	2802      	cmp	r0, #2
    befe:	d101      	bne.n	bf04 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bf00:	f7ff ff8a 	bl	be18 <MPSL_IRQ_CLOCK_Handler+0xbc>
    bf04:	f8c5 9014 	str.w	r9, [r5, #20]
    bf08:	b13f      	cbz	r7, bf1a <MPSL_IRQ_CLOCK_Handler+0x1be>
    bf0a:	7026      	strb	r6, [r4, #0]
    bf0c:	7aa0      	ldrb	r0, [r4, #10]
    bf0e:	2802      	cmp	r0, #2
    bf10:	d101      	bne.n	bf16 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bf12:	f7ff ff67 	bl	bde4 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf16:	f000 f8e7 	bl	c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bf1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf1e:	4802      	ldr	r0, [pc, #8]	; (bf28 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bf20:	3008      	adds	r0, #8
    bf22:	f004 bec6 	b.w	10cb2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bf26:	0000      	.short	0x0000
    bf28:	20000318 	.word	0x20000318
    bf2c:	40000c34 	.word	0x40000c34
    bf30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf34:	4c49      	ldr	r4, [pc, #292]	; (c05c <MPSL_IRQ_CLOCK_Handler+0x300>)
    bf36:	2700      	movs	r7, #0
    bf38:	4606      	mov	r6, r0
    bf3a:	61a7      	str	r7, [r4, #24]
    bf3c:	7842      	ldrb	r2, [r0, #1]
    bf3e:	7881      	ldrb	r1, [r0, #2]
    bf40:	7800      	ldrb	r0, [r0, #0]
    bf42:	72e0      	strb	r0, [r4, #11]
    bf44:	7162      	strb	r2, [r4, #5]
    bf46:	71a1      	strb	r1, [r4, #6]
    bf48:	71e7      	strb	r7, [r4, #7]
    bf4a:	f04f 0801 	mov.w	r8, #1
    bf4e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf52:	2805      	cmp	r0, #5
    bf54:	d225      	bcs.n	bfa2 <MPSL_IRQ_CLOCK_Handler+0x246>
    bf56:	e8df f000 	tbb	[pc, r0]
    bf5a:	0310      	.short	0x0310
    bf5c:	00222006 	.word	0x00222006
    bf60:	f8c4 8018 	str.w	r8, [r4, #24]
    bf64:	e009      	b.n	bf7a <MPSL_IRQ_CLOCK_Handler+0x21e>
    bf66:	f000 f8db 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bf6a:	2101      	movs	r1, #1
    bf6c:	4628      	mov	r0, r5
    bf6e:	f004 fe1a 	bl	10ba6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf72:	2800      	cmp	r0, #0
    bf74:	d0f9      	beq.n	bf6a <MPSL_IRQ_CLOCK_Handler+0x20e>
    bf76:	2002      	movs	r0, #2
    bf78:	61a0      	str	r0, [r4, #24]
    bf7a:	f004 fe40 	bl	10bfe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    bf7e:	b1c0      	cbz	r0, bfb2 <MPSL_IRQ_CLOCK_Handler+0x256>
    bf80:	f000 fa0c 	bl	c39c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bf84:	7e21      	ldrb	r1, [r4, #24]
    bf86:	f001 0103 	and.w	r1, r1, #3
    bf8a:	4288      	cmp	r0, r1
    bf8c:	d111      	bne.n	bfb2 <MPSL_IRQ_CLOCK_Handler+0x256>
    bf8e:	79b0      	ldrb	r0, [r6, #6]
    bf90:	b160      	cbz	r0, bfac <MPSL_IRQ_CLOCK_Handler+0x250>
    bf92:	2002      	movs	r0, #2
    bf94:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf98:	e044      	b.n	c024 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf9a:	4831      	ldr	r0, [pc, #196]	; (c060 <MPSL_IRQ_CLOCK_Handler+0x304>)
    bf9c:	e7ec      	b.n	bf78 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bf9e:	4831      	ldr	r0, [pc, #196]	; (c064 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bfa0:	e7ea      	b.n	bf78 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bfa2:	f240 313d 	movw	r1, #829	; 0x33d
    bfa6:	206d      	movs	r0, #109	; 0x6d
    bfa8:	f000 fa56 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfac:	f000 f9ca 	bl	c344 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bfb0:	e038      	b.n	c024 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bfb2:	f8c5 800c 	str.w	r8, [r5, #12]
    bfb6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bfba:	69a0      	ldr	r0, [r4, #24]
    bfbc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    bfc0:	f004 fe82 	bl	10cc8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bfc4:	b940      	cbnz	r0, bfd8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bfc6:	f004 fe89 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bfca:	b928      	cbnz	r0, bfd8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bfcc:	f004 fe9d 	bl	10d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bfd0:	b910      	cbnz	r0, bfd8 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bfd2:	f004 feae 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bfd6:	b138      	cbz	r0, bfe8 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bfd8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bfdc:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bfe0:	4921      	ldr	r1, [pc, #132]	; (c068 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bfe2:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bfe6:	6008      	str	r0, [r1, #0]
    bfe8:	f004 fe6e 	bl	10cc8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bfec:	b940      	cbnz	r0, c000 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bfee:	f004 fe75 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bff2:	b928      	cbnz	r0, c000 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bff4:	f004 fe89 	bl	10d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bff8:	b910      	cbnz	r0, c000 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bffa:	f004 fe9a 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bffe:	b118      	cbz	r0, c008 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c000:	4919      	ldr	r1, [pc, #100]	; (c068 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c002:	3110      	adds	r1, #16
    c004:	f8c1 8000 	str.w	r8, [r1]
    c008:	f8c5 8008 	str.w	r8, [r5, #8]
    c00c:	2002      	movs	r0, #2
    c00e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c012:	79b0      	ldrb	r0, [r6, #6]
    c014:	b930      	cbnz	r0, c024 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c016:	f000 f829 	bl	c06c <MPSL_IRQ_CLOCK_Handler+0x310>
    c01a:	2002      	movs	r0, #2
    c01c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c020:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c024:	79a0      	ldrb	r0, [r4, #6]
    c026:	b170      	cbz	r0, c046 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c028:	7830      	ldrb	r0, [r6, #0]
    c02a:	b960      	cbnz	r0, c046 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c02c:	f000 f99c 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c030:	4606      	mov	r6, r0
    c032:	f000 fa85 	bl	c540 <mpsl_temperature_get>
    c036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c03a:	b116      	cbz	r6, c042 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c03c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c040:	e001      	b.n	c046 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c042:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c046:	2101      	movs	r1, #1
    c048:	4628      	mov	r0, r5
    c04a:	f004 fdac 	bl	10ba6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c04e:	b108      	cbz	r0, c054 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c050:	f000 f984 	bl	c35c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c054:	72a7      	strb	r7, [r4, #10]
    c056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c05a:	0000      	.short	0x0000
    c05c:	20000318 	.word	0x20000318
    c060:	00020001 	.word	0x00020001
    c064:	00030001 	.word	0x00030001
    c068:	4000053c 	.word	0x4000053c
    c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c070:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c074:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c078:	f010 0f02 	tst.w	r0, #2
    c07c:	d011      	beq.n	c0a2 <MPSL_IRQ_CLOCK_Handler+0x346>
    c07e:	4c16      	ldr	r4, [pc, #88]	; (c0d8 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c080:	6820      	ldr	r0, [r4, #0]
    c082:	43c0      	mvns	r0, r0
    c084:	f340 1600 	sbfx	r6, r0, #4, #1
    c088:	6820      	ldr	r0, [r4, #0]
    c08a:	f040 0010 	orr.w	r0, r0, #16
    c08e:	6020      	str	r0, [r4, #0]
    c090:	f44f 7782 	mov.w	r7, #260	; 0x104
    c094:	4639      	mov	r1, r7
    c096:	4628      	mov	r0, r5
    c098:	1c76      	adds	r6, r6, #1
    c09a:	f004 fd7f 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c09e:	b128      	cbz	r0, c0ac <MPSL_IRQ_CLOCK_Handler+0x350>
    c0a0:	e00a      	b.n	c0b8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0a2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c0a6:	206d      	movs	r0, #109	; 0x6d
    c0a8:	f000 f9d6 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0ac:	f004 fe83 	bl	10db6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c0b0:	e002      	b.n	c0b8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c0b2:	bf00      	nop
    c0b4:	f004 fe7d 	bl	10db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c0b8:	4639      	mov	r1, r7
    c0ba:	4628      	mov	r0, r5
    c0bc:	f004 fd6e 	bl	10b9c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0c0:	2800      	cmp	r0, #0
    c0c2:	d0f7      	beq.n	c0b4 <MPSL_IRQ_CLOCK_Handler+0x358>
    c0c4:	f000 f93e 	bl	c344 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c0c8:	2e00      	cmp	r6, #0
    c0ca:	d103      	bne.n	c0d4 <MPSL_IRQ_CLOCK_Handler+0x378>
    c0cc:	6820      	ldr	r0, [r4, #0]
    c0ce:	f020 0010 	bic.w	r0, r0, #16
    c0d2:	6020      	str	r0, [r4, #0]
    c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0d8:	e000ed10 	.word	0xe000ed10

0000c0dc <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c0dc:	4801      	ldr	r0, [pc, #4]	; (c0e4 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c0de:	89c0      	ldrh	r0, [r0, #14]
    c0e0:	4770      	bx	lr
    c0e2:	0000      	.short	0x0000
    c0e4:	20000318 	.word	0x20000318

0000c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c0e8:	b510      	push	{r4, lr}
    c0ea:	f3ef 8410 	mrs	r4, PRIMASK
    c0ee:	b672      	cpsid	i
    c0f0:	480a      	ldr	r0, [pc, #40]	; (c11c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c0f2:	7841      	ldrb	r1, [r0, #1]
    c0f4:	b129      	cbz	r1, c102 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c0f6:	7841      	ldrb	r1, [r0, #1]
    c0f8:	1e49      	subs	r1, r1, #1
    c0fa:	7041      	strb	r1, [r0, #1]
    c0fc:	7841      	ldrb	r1, [r0, #1]
    c0fe:	b129      	cbz	r1, c10c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c100:	e008      	b.n	c114 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c102:	f240 1119 	movw	r1, #281	; 0x119
    c106:	206d      	movs	r0, #109	; 0x6d
    c108:	f000 f9a6 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c10c:	7880      	ldrb	r0, [r0, #2]
    c10e:	b908      	cbnz	r0, c114 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c110:	f000 f938 	bl	c384 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c114:	2c00      	cmp	r4, #0
    c116:	d100      	bne.n	c11a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c118:	b662      	cpsie	i
    c11a:	bd10      	pop	{r4, pc}
    c11c:	20000318 	.word	0x20000318

0000c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c120:	b510      	push	{r4, lr}
    c122:	f3ef 8410 	mrs	r4, PRIMASK
    c126:	b672      	cpsid	i
    c128:	4806      	ldr	r0, [pc, #24]	; (c144 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c12a:	7841      	ldrb	r1, [r0, #1]
    c12c:	1c49      	adds	r1, r1, #1
    c12e:	7041      	strb	r1, [r0, #1]
    c130:	7840      	ldrb	r0, [r0, #1]
    c132:	2801      	cmp	r0, #1
    c134:	d101      	bne.n	c13a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c136:	f004 fd4d 	bl	10bd4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c13a:	2c00      	cmp	r4, #0
    c13c:	d100      	bne.n	c140 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c13e:	b662      	cpsie	i
    c140:	bd10      	pop	{r4, pc}
    c142:	0000      	.short	0x0000
    c144:	20000318 	.word	0x20000318

0000c148 <mpsl_clock_hfclk_release>:
    c148:	4805      	ldr	r0, [pc, #20]	; (c160 <mpsl_clock_hfclk_release+0x18>)
    c14a:	b510      	push	{r4, lr}
    c14c:	78c1      	ldrb	r1, [r0, #3]
    c14e:	b121      	cbz	r1, c15a <mpsl_clock_hfclk_release+0x12>
    c150:	2100      	movs	r1, #0
    c152:	7101      	strb	r1, [r0, #4]
    c154:	70c1      	strb	r1, [r0, #3]
    c156:	f7ff ffc7 	bl	c0e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c15a:	2000      	movs	r0, #0
    c15c:	bd10      	pop	{r4, pc}
    c15e:	0000      	.short	0x0000
    c160:	20000318 	.word	0x20000318

0000c164 <mpsl_clock_hfclk_request>:
    c164:	b570      	push	{r4, r5, r6, lr}
    c166:	4c0c      	ldr	r4, [pc, #48]	; (c198 <mpsl_clock_hfclk_request+0x34>)
    c168:	78e1      	ldrb	r1, [r4, #3]
    c16a:	b961      	cbnz	r1, c186 <mpsl_clock_hfclk_request+0x22>
    c16c:	2501      	movs	r5, #1
    c16e:	70e5      	strb	r5, [r4, #3]
    c170:	61e0      	str	r0, [r4, #28]
    c172:	f7ff ffd5 	bl	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c176:	f000 f8f7 	bl	c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c17a:	b130      	cbz	r0, c18a <mpsl_clock_hfclk_request+0x26>
    c17c:	69e0      	ldr	r0, [r4, #28]
    c17e:	b110      	cbz	r0, c186 <mpsl_clock_hfclk_request+0x22>
    c180:	4780      	blx	r0
    c182:	2000      	movs	r0, #0
    c184:	61e0      	str	r0, [r4, #28]
    c186:	2000      	movs	r0, #0
    c188:	bd70      	pop	{r4, r5, r6, pc}
    c18a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c18e:	7125      	strb	r5, [r4, #4]
    c190:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c194:	e7f7      	b.n	c186 <mpsl_clock_hfclk_request+0x22>
    c196:	0000      	.short	0x0000
    c198:	20000318 	.word	0x20000318

0000c19c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1a0:	0005      	movs	r5, r0
    c1a2:	f06f 0015 	mvn.w	r0, #21
    c1a6:	d03f      	beq.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1a8:	7829      	ldrb	r1, [r5, #0]
    c1aa:	2904      	cmp	r1, #4
    c1ac:	d83c      	bhi.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1ae:	2900      	cmp	r1, #0
    c1b0:	7869      	ldrb	r1, [r5, #1]
    c1b2:	d03b      	beq.n	c22c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c1b4:	2900      	cmp	r1, #0
    c1b6:	d137      	bne.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1b8:	78a9      	ldrb	r1, [r5, #2]
    c1ba:	2900      	cmp	r1, #0
    c1bc:	d134      	bne.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c1be:	2000      	movs	r0, #0
    c1c0:	f004 fcdb 	bl	10b7a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c1c4:	2000      	movs	r0, #0
    c1c6:	f004 fccb 	bl	10b60 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c1ca:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c1ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    c1d2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c1d6:	2600      	movs	r6, #0
    c1d8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c1dc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c1e0:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c1e4:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c1e8:	4c14      	ldr	r4, [pc, #80]	; (c23c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c1ea:	7066      	strb	r6, [r4, #1]
    c1ec:	88a8      	ldrh	r0, [r5, #4]
    c1ee:	81a0      	strh	r0, [r4, #12]
    c1f0:	f004 fce7 	bl	10bc2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c1f4:	2701      	movs	r7, #1
    c1f6:	b108      	cbz	r0, c1fc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c1f8:	70e7      	strb	r7, [r4, #3]
    c1fa:	7067      	strb	r7, [r4, #1]
    c1fc:	2101      	movs	r1, #1
    c1fe:	4640      	mov	r0, r8
    c200:	f004 fcd1 	bl	10ba6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c204:	b108      	cbz	r0, c20a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c206:	f000 f8a9 	bl	c35c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c20a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c20e:	81e0      	strh	r0, [r4, #14]
    c210:	4628      	mov	r0, r5
    c212:	f7ff fe8d 	bl	bf30 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c216:	7267      	strb	r7, [r4, #9]
    c218:	2000      	movs	r0, #0
    c21a:	f004 fca1 	bl	10b60 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c21e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c222:	4630      	mov	r0, r6
    c224:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c22c:	2900      	cmp	r1, #0
    c22e:	d0fb      	beq.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c230:	2920      	cmp	r1, #32
    c232:	d8f9      	bhi.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c234:	78a9      	ldrb	r1, [r5, #2]
    c236:	2921      	cmp	r1, #33	; 0x21
    c238:	d9c1      	bls.n	c1be <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c23a:	e7f5      	b.n	c228 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c23c:	20000318 	.word	0x20000318

0000c240 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c240:	4801      	ldr	r0, [pc, #4]	; (c248 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c242:	8980      	ldrh	r0, [r0, #12]
    c244:	4770      	bx	lr
    c246:	0000      	.short	0x0000
    c248:	20000318 	.word	0x20000318

0000c24c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c24c:	b510      	push	{r4, lr}
    c24e:	480d      	ldr	r0, [pc, #52]	; (c284 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c250:	f004 fd18 	bl	10c84 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c254:	490b      	ldr	r1, [pc, #44]	; (c284 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c256:	3908      	subs	r1, #8
    c258:	b148      	cbz	r0, c26e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c25a:	2001      	movs	r0, #1
    c25c:	7008      	strb	r0, [r1, #0]
    c25e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c262:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c26a:	f7ff bf59 	b.w	c120 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c26e:	7a88      	ldrb	r0, [r1, #10]
    c270:	2802      	cmp	r0, #2
    c272:	d101      	bne.n	c278 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c274:	f7ff fdb6 	bl	bde4 <MPSL_IRQ_CLOCK_Handler+0x88>
    c278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c27c:	4801      	ldr	r0, [pc, #4]	; (c284 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c27e:	f004 bd18 	b.w	10cb2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c282:	0000      	.short	0x0000
    c284:	20000320 	.word	0x20000320

0000c288 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c288:	4802      	ldr	r0, [pc, #8]	; (c294 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c28a:	7a80      	ldrb	r0, [r0, #10]
    c28c:	2800      	cmp	r0, #0
    c28e:	d000      	beq.n	c292 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c290:	2001      	movs	r0, #1
    c292:	4770      	bx	lr
    c294:	20000318 	.word	0x20000318

0000c298 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c29a:	4d1f      	ldr	r5, [pc, #124]	; (c318 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c29c:	7ae8      	ldrb	r0, [r5, #11]
    c29e:	2800      	cmp	r0, #0
    c2a0:	d10f      	bne.n	c2c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2a2:	7e28      	ldrb	r0, [r5, #24]
    c2a4:	f000 0003 	and.w	r0, r0, #3
    c2a8:	f004 fc99 	bl	10bde <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c2ac:	2800      	cmp	r0, #0
    c2ae:	d008      	beq.n	c2c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2b0:	f3ef 8110 	mrs	r1, PRIMASK
    c2b4:	b672      	cpsid	i
    c2b6:	f7ff ffe7 	bl	c288 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c2ba:	b118      	cbz	r0, c2c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c2bc:	2900      	cmp	r1, #0
    c2be:	d100      	bne.n	c2c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c2c0:	b662      	cpsie	i
    c2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c2c4:	2601      	movs	r6, #1
    c2c6:	72ae      	strb	r6, [r5, #10]
    c2c8:	b901      	cbnz	r1, c2cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c2ca:	b662      	cpsie	i
    c2cc:	2018      	movs	r0, #24
    c2ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c2d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c2d6:	61a6      	str	r6, [r4, #24]
    c2d8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c2dc:	f8ad 0000 	strh.w	r0, [sp]
    c2e0:	f8bd 0000 	ldrh.w	r0, [sp]
    c2e4:	1e41      	subs	r1, r0, #1
    c2e6:	f8ad 1000 	strh.w	r1, [sp]
    c2ea:	d2f9      	bcs.n	c2e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c2ec:	2700      	movs	r7, #0
    c2ee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c2f2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c2f6:	4808      	ldr	r0, [pc, #32]	; (c318 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c2f8:	3008      	adds	r0, #8
    c2fa:	f004 fcd6 	bl	10caa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c2fe:	702f      	strb	r7, [r5, #0]
    c300:	f7ff fd70 	bl	bde4 <MPSL_IRQ_CLOCK_Handler+0x88>
    c304:	6166      	str	r6, [r4, #20]
    c306:	7968      	ldrb	r0, [r5, #5]
    c308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c30c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c310:	2018      	movs	r0, #24
    c312:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c318:	20000318 	.word	0x20000318

0000c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c31c:	4602      	mov	r2, r0
    c31e:	b510      	push	{r4, lr}
    c320:	2000      	movs	r0, #0
    c322:	2900      	cmp	r1, #0
    c324:	d00a      	beq.n	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c326:	2a00      	cmp	r2, #0
    c328:	d008      	beq.n	c33c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c32a:	fba2 0101 	umull	r0, r1, r2, r1
    c32e:	1e40      	subs	r0, r0, #1
    c330:	4a03      	ldr	r2, [pc, #12]	; (c340 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c332:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    c336:	f004 fd40 	bl	10dba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c33a:	1c40      	adds	r0, r0, #1
    c33c:	bd10      	pop	{r4, pc}
    c33e:	0000      	.short	0x0000
    c340:	000f4240 	.word	0x000f4240

0000c344 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c344:	b510      	push	{r4, lr}
    c346:	4c04      	ldr	r4, [pc, #16]	; (c358 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c348:	7e20      	ldrb	r0, [r4, #24]
    c34a:	f000 0003 	and.w	r0, r0, #3
    c34e:	f004 fc46 	bl	10bde <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c352:	2800      	cmp	r0, #0
    c354:	d0f8      	beq.n	c348 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c356:	bd10      	pop	{r4, pc}
    c358:	20000318 	.word	0x20000318

0000c35c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c35c:	4901      	ldr	r1, [pc, #4]	; (c364 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c35e:	2001      	movs	r0, #1
    c360:	7008      	strb	r0, [r1, #0]
    c362:	4770      	bx	lr
    c364:	20000389 	.word	0x20000389

0000c368 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c368:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c36c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c370:	b918      	cbnz	r0, c37a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c372:	4803      	ldr	r0, [pc, #12]	; (c380 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c374:	7800      	ldrb	r0, [r0, #0]
    c376:	2800      	cmp	r0, #0
    c378:	d000      	beq.n	c37c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c37a:	2001      	movs	r0, #1
    c37c:	4770      	bx	lr
    c37e:	0000      	.short	0x0000
    c380:	20000389 	.word	0x20000389

0000c384 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c384:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c388:	2101      	movs	r1, #1
    c38a:	6041      	str	r1, [r0, #4]
    c38c:	2100      	movs	r1, #0
    c38e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c392:	4801      	ldr	r0, [pc, #4]	; (c398 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c394:	7001      	strb	r1, [r0, #0]
    c396:	4770      	bx	lr
    c398:	20000389 	.word	0x20000389

0000c39c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c39c:	4802      	ldr	r0, [pc, #8]	; (c3a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c39e:	6800      	ldr	r0, [r0, #0]
    c3a0:	f000 0003 	and.w	r0, r0, #3
    c3a4:	4770      	bx	lr
    c3a6:	0000      	.short	0x0000
    c3a8:	4000041c 	.word	0x4000041c
    c3ac:	b510      	push	{r4, lr}
    c3ae:	b131      	cbz	r1, c3be <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c3b0:	2901      	cmp	r1, #1
    c3b2:	d007      	beq.n	c3c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c3b4:	f240 3102 	movw	r1, #770	; 0x302
    c3b8:	a005      	add	r0, pc, #20	; (adr r0, c3d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c3ba:	f000 f821 	bl	c400 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c3be:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c3c2:	e001      	b.n	c3c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c3c4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c3c8:	f000 0001 	and.w	r0, r0, #1
    c3cc:	bd10      	pop	{r4, pc}
    c3ce:	0000      	.short	0x0000
    c3d0:	5f66726e 	.word	0x5f66726e
    c3d4:	636f6c63 	.word	0x636f6c63
    c3d8:	00682e6b 	.word	0x00682e6b
    c3dc:	f3bf 8f4f 	dsb	sy
    c3e0:	4805      	ldr	r0, [pc, #20]	; (c3f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c3e2:	6801      	ldr	r1, [r0, #0]
    c3e4:	4a05      	ldr	r2, [pc, #20]	; (c3fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c3e6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c3ea:	4311      	orrs	r1, r2
    c3ec:	6001      	str	r1, [r0, #0]
    c3ee:	f3bf 8f4f 	dsb	sy
    c3f2:	bf00      	nop
    c3f4:	e7fd      	b.n	c3f2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c3f6:	0000      	.short	0x0000
    c3f8:	e000ed0c 	.word	0xe000ed0c
    c3fc:	05fa0004 	.word	0x05fa0004

0000c400 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c400:	b672      	cpsid	i
    c402:	4a03      	ldr	r2, [pc, #12]	; (c410 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c404:	6852      	ldr	r2, [r2, #4]
    c406:	b102      	cbz	r2, c40a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c408:	4790      	blx	r2
    c40a:	f7ff ffe7 	bl	c3dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c40e:	0000      	.short	0x0000
    c410:	20000338 	.word	0x20000338
    c414:	4806      	ldr	r0, [pc, #24]	; (c430 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c416:	b510      	push	{r4, lr}
    c418:	2100      	movs	r1, #0
    c41a:	6001      	str	r1, [r0, #0]
    c41c:	2101      	movs	r1, #1
    c41e:	6001      	str	r1, [r0, #0]
    c420:	4608      	mov	r0, r1
    c422:	f004 fc03 	bl	10c2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c42a:	2001      	movs	r0, #1
    c42c:	f004 bbf1 	b.w	10c12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c430:	40001ffc 	.word	0x40001ffc
    c434:	4807      	ldr	r0, [pc, #28]	; (c454 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c436:	b510      	push	{r4, lr}
    c438:	2101      	movs	r1, #1
    c43a:	6041      	str	r1, [r0, #4]
    c43c:	1e89      	subs	r1, r1, #2
    c43e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c442:	200c      	movs	r0, #12
    c444:	f004 fbf2 	bl	10c2c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c44c:	200c      	movs	r0, #12
    c44e:	f004 bbe0 	b.w	10c12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c452:	0000      	.short	0x0000
    c454:	4000c000 	.word	0x4000c000

0000c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c458:	b50e      	push	{r1, r2, r3, lr}
    c45a:	b672      	cpsid	i
    c45c:	4a0f      	ldr	r2, [pc, #60]	; (c49c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c45e:	6855      	ldr	r5, [r2, #4]
    c460:	b1d5      	cbz	r5, c498 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c462:	2200      	movs	r2, #0
    c464:	4603      	mov	r3, r0
    c466:	466e      	mov	r6, sp
    c468:	240a      	movs	r4, #10
    c46a:	e003      	b.n	c474 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c46c:	fbb0 f0f4 	udiv	r0, r0, r4
    c470:	1c52      	adds	r2, r2, #1
    c472:	b2d2      	uxtb	r2, r2
    c474:	2800      	cmp	r0, #0
    c476:	d1f9      	bne.n	c46c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c478:	54b0      	strb	r0, [r6, r2]
    c47a:	e009      	b.n	c490 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c47c:	fbb3 f0f4 	udiv	r0, r3, r4
    c480:	fb04 3010 	mls	r0, r4, r0, r3
    c484:	fbb3 f3f4 	udiv	r3, r3, r4
    c488:	1e52      	subs	r2, r2, #1
    c48a:	b2d2      	uxtb	r2, r2
    c48c:	3030      	adds	r0, #48	; 0x30
    c48e:	54b0      	strb	r0, [r6, r2]
    c490:	2a00      	cmp	r2, #0
    c492:	d1f3      	bne.n	c47c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c494:	4630      	mov	r0, r6
    c496:	47a8      	blx	r5
    c498:	f7ff ffa0 	bl	c3dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c49c:	20000338 	.word	0x20000338

0000c4a0 <mpsl_init>:
    c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c4a4:	4c18      	ldr	r4, [pc, #96]	; (c508 <mpsl_init+0x68>)
    c4a6:	4606      	mov	r6, r0
    c4a8:	4617      	mov	r7, r2
    c4aa:	7860      	ldrb	r0, [r4, #1]
    c4ac:	460d      	mov	r5, r1
    c4ae:	b118      	cbz	r0, c4b8 <mpsl_init+0x18>
    c4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4b8:	f7fc f9b0 	bl	881c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c4bc:	b906      	cbnz	r6, c4c0 <mpsl_init+0x20>
    c4be:	4e13      	ldr	r6, [pc, #76]	; (c50c <mpsl_init+0x6c>)
    c4c0:	6067      	str	r7, [r4, #4]
    c4c2:	7025      	strb	r5, [r4, #0]
    c4c4:	f7ff ffa6 	bl	c414 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c4c8:	f7ff ffb4 	bl	c434 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c4cc:	4630      	mov	r0, r6
    c4ce:	f7ff fe65 	bl	c19c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c4d2:	0006      	movs	r6, r0
    c4d4:	d1ee      	bne.n	c4b4 <mpsl_init+0x14>
    c4d6:	f7fe fe29 	bl	b12c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c4da:	f7ff fedd 	bl	c298 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c4de:	f004 fa8a 	bl	109f6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c4e2:	4628      	mov	r0, r5
    c4e4:	f004 fb95 	bl	10c12 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c4e8:	2001      	movs	r0, #1
    c4ea:	2d00      	cmp	r5, #0
    c4ec:	db09      	blt.n	c502 <mpsl_init+0x62>
    c4ee:	f005 011f 	and.w	r1, r5, #31
    c4f2:	fa00 f101 	lsl.w	r1, r0, r1
    c4f6:	096a      	lsrs	r2, r5, #5
    c4f8:	0092      	lsls	r2, r2, #2
    c4fa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c4fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c502:	7060      	strb	r0, [r4, #1]
    c504:	4630      	mov	r0, r6
    c506:	e7d5      	b.n	c4b4 <mpsl_init+0x14>
    c508:	20000338 	.word	0x20000338
    c50c:	00010c4e 	.word	0x00010c4e

0000c510 <mpsl_is_initialized>:
    c510:	4801      	ldr	r0, [pc, #4]	; (c518 <mpsl_is_initialized+0x8>)
    c512:	7840      	ldrb	r0, [r0, #1]
    c514:	4770      	bx	lr
    c516:	0000      	.short	0x0000
    c518:	20000338 	.word	0x20000338

0000c51c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c51c:	4807      	ldr	r0, [pc, #28]	; (c53c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c51e:	f990 0000 	ldrsb.w	r0, [r0]
    c522:	2800      	cmp	r0, #0
    c524:	db09      	blt.n	c53a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c526:	f000 021f 	and.w	r2, r0, #31
    c52a:	2101      	movs	r1, #1
    c52c:	4091      	lsls	r1, r2
    c52e:	0940      	lsrs	r0, r0, #5
    c530:	0080      	lsls	r0, r0, #2
    c532:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c536:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c53a:	4770      	bx	lr
    c53c:	20000338 	.word	0x20000338

0000c540 <mpsl_temperature_get>:
    c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c544:	2501      	movs	r5, #1
    c546:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c54a:	0329      	lsls	r1, r5, #12
    c54c:	f04f 0800 	mov.w	r8, #0
    c550:	4640      	mov	r0, r8
    c552:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c556:	f3bf 8f4f 	dsb	sy
    c55a:	f3bf 8f6f 	isb	sy
    c55e:	4c16      	ldr	r4, [pc, #88]	; (c5b8 <mpsl_temperature_get+0x78>)
    c560:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c564:	200c      	movs	r0, #12
    c566:	f004 fb80 	bl	10c6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c56a:	4e14      	ldr	r6, [pc, #80]	; (c5bc <mpsl_temperature_get+0x7c>)
    c56c:	6830      	ldr	r0, [r6, #0]
    c56e:	43c0      	mvns	r0, r0
    c570:	f340 1700 	sbfx	r7, r0, #4, #1
    c574:	6830      	ldr	r0, [r6, #0]
    c576:	f040 0010 	orr.w	r0, r0, #16
    c57a:	6030      	str	r0, [r6, #0]
    c57c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c580:	6025      	str	r5, [r4, #0]
    c582:	1c7f      	adds	r7, r7, #1
    c584:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c588:	b108      	cbz	r0, c58e <mpsl_temperature_get+0x4e>
    c58a:	b11f      	cbz	r7, c594 <mpsl_temperature_get+0x54>
    c58c:	e006      	b.n	c59c <mpsl_temperature_get+0x5c>
    c58e:	f004 fc10 	bl	10db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c592:	e7f7      	b.n	c584 <mpsl_temperature_get+0x44>
    c594:	6830      	ldr	r0, [r6, #0]
    c596:	f020 0010 	bic.w	r0, r0, #16
    c59a:	6030      	str	r0, [r6, #0]
    c59c:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c5a0:	6065      	str	r5, [r4, #4]
    c5a2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c5a6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c5aa:	200c      	movs	r0, #12
    c5ac:	f004 fb5d 	bl	10c6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c5b0:	4630      	mov	r0, r6
    c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5b6:	0000      	.short	0x0000
    c5b8:	4000c000 	.word	0x4000c000
    c5bc:	e000ed10 	.word	0xe000ed10

0000c5c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c5c0:	b510      	push	{r4, lr}
    c5c2:	4602      	mov	r2, r0
    c5c4:	2005      	movs	r0, #5
    c5c6:	490c      	ldr	r1, [pc, #48]	; (c5f8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c5c8:	e004      	b.n	c5d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c5ca:	bf00      	nop
    c5cc:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c5d0:	791b      	ldrb	r3, [r3, #4]
    c5d2:	b133      	cbz	r3, c5e2 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c5d4:	1e40      	subs	r0, r0, #1
    c5d6:	b2c0      	uxtb	r0, r0
    c5d8:	d2f8      	bcs.n	c5cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c5da:	2148      	movs	r1, #72	; 0x48
    c5dc:	2069      	movs	r0, #105	; 0x69
    c5de:	f7ff ff3b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c5e2:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c5e6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c5ea:	2200      	movs	r2, #0
    c5ec:	714a      	strb	r2, [r1, #5]
    c5ee:	718a      	strb	r2, [r1, #6]
    c5f0:	2201      	movs	r2, #1
    c5f2:	710a      	strb	r2, [r1, #4]
    c5f4:	bd10      	pop	{r4, pc}
    c5f6:	0000      	.short	0x0000
    c5f8:	200014a8 	.word	0x200014a8

0000c5fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c5fc:	b510      	push	{r4, lr}
    c5fe:	2805      	cmp	r0, #5
    c600:	d301      	bcc.n	c606 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c602:	2158      	movs	r1, #88	; 0x58
    c604:	e006      	b.n	c614 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c606:	490a      	ldr	r1, [pc, #40]	; (c630 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c608:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c60c:	7901      	ldrb	r1, [r0, #4]
    c60e:	2901      	cmp	r1, #1
    c610:	d003      	beq.n	c61a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c612:	2159      	movs	r1, #89	; 0x59
    c614:	2069      	movs	r0, #105	; 0x69
    c616:	f7ff ff1f 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c61a:	7941      	ldrb	r1, [r0, #5]
    c61c:	7982      	ldrb	r2, [r0, #6]
    c61e:	1c49      	adds	r1, r1, #1
    c620:	b2c9      	uxtb	r1, r1
    c622:	428a      	cmp	r2, r1
    c624:	d000      	beq.n	c628 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c626:	7141      	strb	r1, [r0, #5]
    c628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c62c:	f7ff bf76 	b.w	c51c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c630:	200014a8 	.word	0x200014a8

0000c634 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c634:	b510      	push	{r4, lr}
    c636:	2805      	cmp	r0, #5
    c638:	d303      	bcc.n	c642 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c63a:	214f      	movs	r1, #79	; 0x4f
    c63c:	2069      	movs	r0, #105	; 0x69
    c63e:	f7ff ff0b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c642:	4a03      	ldr	r2, [pc, #12]	; (c650 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c644:	2100      	movs	r1, #0
    c646:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c64a:	7101      	strb	r1, [r0, #4]
    c64c:	bd10      	pop	{r4, pc}
    c64e:	0000      	.short	0x0000
    c650:	200014a8 	.word	0x200014a8

0000c654 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c654:	b570      	push	{r4, r5, r6, lr}
    c656:	2505      	movs	r5, #5
    c658:	4e0e      	ldr	r6, [pc, #56]	; (c694 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c65a:	4c0f      	ldr	r4, [pc, #60]	; (c698 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c65c:	e016      	b.n	c68c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c65e:	7821      	ldrb	r1, [r4, #0]
    c660:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c664:	7902      	ldrb	r2, [r0, #4]
    c666:	2a01      	cmp	r2, #1
    c668:	d108      	bne.n	c67c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c66a:	7942      	ldrb	r2, [r0, #5]
    c66c:	7983      	ldrb	r3, [r0, #6]
    c66e:	429a      	cmp	r2, r3
    c670:	d004      	beq.n	c67c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c672:	7942      	ldrb	r2, [r0, #5]
    c674:	7182      	strb	r2, [r0, #6]
    c676:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c67a:	4780      	blx	r0
    c67c:	7820      	ldrb	r0, [r4, #0]
    c67e:	1c40      	adds	r0, r0, #1
    c680:	b2c0      	uxtb	r0, r0
    c682:	7020      	strb	r0, [r4, #0]
    c684:	2805      	cmp	r0, #5
    c686:	d301      	bcc.n	c68c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c688:	2000      	movs	r0, #0
    c68a:	7020      	strb	r0, [r4, #0]
    c68c:	1e6d      	subs	r5, r5, #1
    c68e:	b2ed      	uxtb	r5, r5
    c690:	d2e5      	bcs.n	c65e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c692:	bd70      	pop	{r4, r5, r6, pc}
    c694:	200014a8 	.word	0x200014a8
    c698:	2000038a 	.word	0x2000038a

0000c69c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c69c:	b500      	push	{lr}
    c69e:	f004 fb13 	bl	10cc8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c6a2:	b940      	cbnz	r0, c6b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6a4:	f004 fb1a 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c6a8:	b928      	cbnz	r0, c6b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6aa:	f004 fb2e 	bl	10d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c6ae:	b910      	cbnz	r0, c6b6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c6b0:	f004 fb3f 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6b4:	b108      	cbz	r0, c6ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c6b6:	4802      	ldr	r0, [pc, #8]	; (c6c0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c6b8:	bd00      	pop	{pc}
    c6ba:	4802      	ldr	r0, [pc, #8]	; (c6c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c6bc:	bd00      	pop	{pc}
    c6be:	0000      	.short	0x0000
    c6c0:	4000050c 	.word	0x4000050c
    c6c4:	4001e700 	.word	0x4001e700
    c6c8:	b510      	push	{r4, lr}
    c6ca:	f004 fb32 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c6ce:	b330      	cbz	r0, c71e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c6d0:	f3ef 8010 	mrs	r0, PRIMASK
    c6d4:	b1c8      	cbz	r0, c70a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c6d6:	2100      	movs	r1, #0
    c6d8:	b672      	cpsid	i
    c6da:	4812      	ldr	r0, [pc, #72]	; (c724 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c6dc:	6802      	ldr	r2, [r0, #0]
    c6de:	6803      	ldr	r3, [r0, #0]
    c6e0:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c6e4:	f043 0310 	orr.w	r3, r3, #16
    c6e8:	6003      	str	r3, [r0, #0]
    c6ea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c6ee:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c6f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c6f6:	431c      	orrs	r4, r3
    c6f8:	d000      	beq.n	c6fc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c6fa:	bf40      	sev
    c6fc:	bf20      	wfe
    c6fe:	bf00      	nop
    c700:	bf00      	nop
    c702:	bf00      	nop
    c704:	bf00      	nop
    c706:	b112      	cbz	r2, c70e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c708:	e005      	b.n	c716 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c70a:	2101      	movs	r1, #1
    c70c:	e7e4      	b.n	c6d8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c70e:	6802      	ldr	r2, [r0, #0]
    c710:	f022 0210 	bic.w	r2, r2, #16
    c714:	6002      	str	r2, [r0, #0]
    c716:	2900      	cmp	r1, #0
    c718:	d000      	beq.n	c71c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c71a:	b662      	cpsie	i
    c71c:	bd10      	pop	{r4, pc}
    c71e:	bf20      	wfe
    c720:	bd10      	pop	{r4, pc}
    c722:	0000      	.short	0x0000
    c724:	e000ed10 	.word	0xe000ed10

0000c728 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c728:	4901      	ldr	r1, [pc, #4]	; (c730 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c72a:	2001      	movs	r0, #1
    c72c:	7088      	strb	r0, [r1, #2]
    c72e:	4770      	bx	lr
    c730:	20000340 	.word	0x20000340

0000c734 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c734:	00011033 0001106b 00011055 00011043     3...k...U...C...
    c744:	0001104f 0001103d 00011031 0001102f     O...=...1.../...
    c754:	00011067 0001105b 00011049 00011037     g...[...I...7...
    c764:	00011029 00011021 00011025 0001101b     )...!...%.......

0000c774 <mpsl_fem_disable>:
    c774:	4801      	ldr	r0, [pc, #4]	; (c77c <mpsl_fem_disable+0x8>)
    c776:	6800      	ldr	r0, [r0, #0]
    c778:	6800      	ldr	r0, [r0, #0]
    c77a:	4700      	bx	r0
    c77c:	20000354 	.word	0x20000354

0000c780 <mpsl_fem_lna_configuration_clear>:
    c780:	4801      	ldr	r0, [pc, #4]	; (c788 <mpsl_fem_lna_configuration_clear+0x8>)
    c782:	6800      	ldr	r0, [r0, #0]
    c784:	6940      	ldr	r0, [r0, #20]
    c786:	4700      	bx	r0
    c788:	20000354 	.word	0x20000354

0000c78c <mpsl_fem_lna_configuration_set>:
    c78c:	4a01      	ldr	r2, [pc, #4]	; (c794 <mpsl_fem_lna_configuration_set+0x8>)
    c78e:	6812      	ldr	r2, [r2, #0]
    c790:	68d2      	ldr	r2, [r2, #12]
    c792:	4710      	bx	r2
    c794:	20000354 	.word	0x20000354

0000c798 <mpsl_fem_lna_is_configured>:
    c798:	4901      	ldr	r1, [pc, #4]	; (c7a0 <mpsl_fem_lna_is_configured+0x8>)
    c79a:	6809      	ldr	r1, [r1, #0]
    c79c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c79e:	4708      	bx	r1
    c7a0:	20000354 	.word	0x20000354

0000c7a4 <mpsl_fem_pa_configuration_clear>:
    c7a4:	4801      	ldr	r0, [pc, #4]	; (c7ac <mpsl_fem_pa_configuration_clear+0x8>)
    c7a6:	6800      	ldr	r0, [r0, #0]
    c7a8:	6900      	ldr	r0, [r0, #16]
    c7aa:	4700      	bx	r0
    c7ac:	20000354 	.word	0x20000354

0000c7b0 <mpsl_fem_pa_configuration_set>:
    c7b0:	4a01      	ldr	r2, [pc, #4]	; (c7b8 <mpsl_fem_pa_configuration_set+0x8>)
    c7b2:	6812      	ldr	r2, [r2, #0]
    c7b4:	6892      	ldr	r2, [r2, #8]
    c7b6:	4710      	bx	r2
    c7b8:	20000354 	.word	0x20000354

0000c7bc <mpsl_fem_pa_gain_set>:
    c7bc:	4901      	ldr	r1, [pc, #4]	; (c7c4 <mpsl_fem_pa_gain_set+0x8>)
    c7be:	6809      	ldr	r1, [r1, #0]
    c7c0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c7c2:	4708      	bx	r1
    c7c4:	20000354 	.word	0x20000354

0000c7c8 <mpsl_fem_pa_is_configured>:
    c7c8:	4901      	ldr	r1, [pc, #4]	; (c7d0 <mpsl_fem_pa_is_configured+0x8>)
    c7ca:	6809      	ldr	r1, [r1, #0]
    c7cc:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c7ce:	4708      	bx	r1
    c7d0:	20000354 	.word	0x20000354

0000c7d4 <mpsl_fem_tx_power_split>:
    c7d4:	b430      	push	{r4, r5}
    c7d6:	4c03      	ldr	r4, [pc, #12]	; (c7e4 <mpsl_fem_tx_power_split+0x10>)
    c7d8:	6824      	ldr	r4, [r4, #0]
    c7da:	6864      	ldr	r4, [r4, #4]
    c7dc:	46a4      	mov	ip, r4
    c7de:	bc30      	pop	{r4, r5}
    c7e0:	4760      	bx	ip
    c7e2:	0000      	.short	0x0000
    c7e4:	20000354 	.word	0x20000354

0000c7e8 <mpsl_fem_device_config_254_apply_get>:
    c7e8:	4801      	ldr	r0, [pc, #4]	; (c7f0 <mpsl_fem_device_config_254_apply_get+0x8>)
    c7ea:	7800      	ldrb	r0, [r0, #0]
    c7ec:	4770      	bx	lr
    c7ee:	0000      	.short	0x0000
    c7f0:	2000038b 	.word	0x2000038b

0000c7f4 <__udivmoddi4>:
    c7f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7f8:	4686      	mov	lr, r0
    c7fa:	468c      	mov	ip, r1
    c7fc:	4608      	mov	r0, r1
    c7fe:	9e08      	ldr	r6, [sp, #32]
    c800:	4615      	mov	r5, r2
    c802:	4674      	mov	r4, lr
    c804:	4619      	mov	r1, r3
    c806:	2b00      	cmp	r3, #0
    c808:	f040 80c2 	bne.w	c990 <__udivmoddi4+0x19c>
    c80c:	4285      	cmp	r5, r0
    c80e:	fab2 f282 	clz	r2, r2
    c812:	d945      	bls.n	c8a0 <__udivmoddi4+0xac>
    c814:	b14a      	cbz	r2, c82a <__udivmoddi4+0x36>
    c816:	f1c2 0320 	rsb	r3, r2, #32
    c81a:	fa00 fc02 	lsl.w	ip, r0, r2
    c81e:	fa2e f303 	lsr.w	r3, lr, r3
    c822:	4095      	lsls	r5, r2
    c824:	ea43 0c0c 	orr.w	ip, r3, ip
    c828:	4094      	lsls	r4, r2
    c82a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c82e:	b2a8      	uxth	r0, r5
    c830:	fbbc f8fe 	udiv	r8, ip, lr
    c834:	0c23      	lsrs	r3, r4, #16
    c836:	fb0e cc18 	mls	ip, lr, r8, ip
    c83a:	fb08 f900 	mul.w	r9, r8, r0
    c83e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c842:	4599      	cmp	r9, r3
    c844:	d928      	bls.n	c898 <__udivmoddi4+0xa4>
    c846:	18eb      	adds	r3, r5, r3
    c848:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
    c84c:	d204      	bcs.n	c858 <__udivmoddi4+0x64>
    c84e:	4599      	cmp	r9, r3
    c850:	d902      	bls.n	c858 <__udivmoddi4+0x64>
    c852:	f1a8 0702 	sub.w	r7, r8, #2
    c856:	442b      	add	r3, r5
    c858:	eba3 0309 	sub.w	r3, r3, r9
    c85c:	b2a4      	uxth	r4, r4
    c85e:	fbb3 fcfe 	udiv	ip, r3, lr
    c862:	fb0e 331c 	mls	r3, lr, ip, r3
    c866:	fb0c f000 	mul.w	r0, ip, r0
    c86a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c86e:	42a0      	cmp	r0, r4
    c870:	d914      	bls.n	c89c <__udivmoddi4+0xa8>
    c872:	192c      	adds	r4, r5, r4
    c874:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c878:	d204      	bcs.n	c884 <__udivmoddi4+0x90>
    c87a:	42a0      	cmp	r0, r4
    c87c:	d902      	bls.n	c884 <__udivmoddi4+0x90>
    c87e:	f1ac 0302 	sub.w	r3, ip, #2
    c882:	442c      	add	r4, r5
    c884:	1a24      	subs	r4, r4, r0
    c886:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c88a:	b11e      	cbz	r6, c894 <__udivmoddi4+0xa0>
    c88c:	40d4      	lsrs	r4, r2
    c88e:	2300      	movs	r3, #0
    c890:	6034      	str	r4, [r6, #0]
    c892:	6073      	str	r3, [r6, #4]
    c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c898:	4647      	mov	r7, r8
    c89a:	e7dd      	b.n	c858 <__udivmoddi4+0x64>
    c89c:	4663      	mov	r3, ip
    c89e:	e7f1      	b.n	c884 <__udivmoddi4+0x90>
    c8a0:	bb92      	cbnz	r2, c908 <__udivmoddi4+0x114>
    c8a2:	1b43      	subs	r3, r0, r5
    c8a4:	2101      	movs	r1, #1
    c8a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8aa:	b2af      	uxth	r7, r5
    c8ac:	fbb3 fcfe 	udiv	ip, r3, lr
    c8b0:	0c20      	lsrs	r0, r4, #16
    c8b2:	fb0e 331c 	mls	r3, lr, ip, r3
    c8b6:	fb0c f807 	mul.w	r8, ip, r7
    c8ba:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c8be:	4598      	cmp	r8, r3
    c8c0:	d962      	bls.n	c988 <__udivmoddi4+0x194>
    c8c2:	18eb      	adds	r3, r5, r3
    c8c4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c8c8:	d204      	bcs.n	c8d4 <__udivmoddi4+0xe0>
    c8ca:	4598      	cmp	r8, r3
    c8cc:	d902      	bls.n	c8d4 <__udivmoddi4+0xe0>
    c8ce:	f1ac 0002 	sub.w	r0, ip, #2
    c8d2:	442b      	add	r3, r5
    c8d4:	eba3 0308 	sub.w	r3, r3, r8
    c8d8:	b2a4      	uxth	r4, r4
    c8da:	fbb3 fcfe 	udiv	ip, r3, lr
    c8de:	fb0e 331c 	mls	r3, lr, ip, r3
    c8e2:	fb0c f707 	mul.w	r7, ip, r7
    c8e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c8ea:	42a7      	cmp	r7, r4
    c8ec:	d94e      	bls.n	c98c <__udivmoddi4+0x198>
    c8ee:	192c      	adds	r4, r5, r4
    c8f0:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
    c8f4:	d204      	bcs.n	c900 <__udivmoddi4+0x10c>
    c8f6:	42a7      	cmp	r7, r4
    c8f8:	d902      	bls.n	c900 <__udivmoddi4+0x10c>
    c8fa:	f1ac 0302 	sub.w	r3, ip, #2
    c8fe:	442c      	add	r4, r5
    c900:	1be4      	subs	r4, r4, r7
    c902:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c906:	e7c0      	b.n	c88a <__udivmoddi4+0x96>
    c908:	f1c2 0320 	rsb	r3, r2, #32
    c90c:	fa20 f103 	lsr.w	r1, r0, r3
    c910:	4095      	lsls	r5, r2
    c912:	4090      	lsls	r0, r2
    c914:	fa2e f303 	lsr.w	r3, lr, r3
    c918:	4303      	orrs	r3, r0
    c91a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c91e:	b2af      	uxth	r7, r5
    c920:	fbb1 fcfe 	udiv	ip, r1, lr
    c924:	fb0e 101c 	mls	r0, lr, ip, r1
    c928:	0c19      	lsrs	r1, r3, #16
    c92a:	fb0c f807 	mul.w	r8, ip, r7
    c92e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c932:	4588      	cmp	r8, r1
    c934:	fa04 f402 	lsl.w	r4, r4, r2
    c938:	d922      	bls.n	c980 <__udivmoddi4+0x18c>
    c93a:	1869      	adds	r1, r5, r1
    c93c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x158>
    c942:	4588      	cmp	r8, r1
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x158>
    c946:	f1ac 0002 	sub.w	r0, ip, #2
    c94a:	4429      	add	r1, r5
    c94c:	eba1 0108 	sub.w	r1, r1, r8
    c950:	b29b      	uxth	r3, r3
    c952:	fbb1 fcfe 	udiv	ip, r1, lr
    c956:	fb0e 111c 	mls	r1, lr, ip, r1
    c95a:	fb0c f707 	mul.w	r7, ip, r7
    c95e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c962:	429f      	cmp	r7, r3
    c964:	d90e      	bls.n	c984 <__udivmoddi4+0x190>
    c966:	18eb      	adds	r3, r5, r3
    c968:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    c96c:	d204      	bcs.n	c978 <__udivmoddi4+0x184>
    c96e:	429f      	cmp	r7, r3
    c970:	d902      	bls.n	c978 <__udivmoddi4+0x184>
    c972:	f1ac 0102 	sub.w	r1, ip, #2
    c976:	442b      	add	r3, r5
    c978:	1bdb      	subs	r3, r3, r7
    c97a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c97e:	e792      	b.n	c8a6 <__udivmoddi4+0xb2>
    c980:	4660      	mov	r0, ip
    c982:	e7e3      	b.n	c94c <__udivmoddi4+0x158>
    c984:	4661      	mov	r1, ip
    c986:	e7f7      	b.n	c978 <__udivmoddi4+0x184>
    c988:	4660      	mov	r0, ip
    c98a:	e7a3      	b.n	c8d4 <__udivmoddi4+0xe0>
    c98c:	4663      	mov	r3, ip
    c98e:	e7b7      	b.n	c900 <__udivmoddi4+0x10c>
    c990:	4283      	cmp	r3, r0
    c992:	d906      	bls.n	c9a2 <__udivmoddi4+0x1ae>
    c994:	b916      	cbnz	r6, c99c <__udivmoddi4+0x1a8>
    c996:	2100      	movs	r1, #0
    c998:	4608      	mov	r0, r1
    c99a:	e77b      	b.n	c894 <__udivmoddi4+0xa0>
    c99c:	e9c6 e000 	strd	lr, r0, [r6]
    c9a0:	e7f9      	b.n	c996 <__udivmoddi4+0x1a2>
    c9a2:	fab3 f783 	clz	r7, r3
    c9a6:	b98f      	cbnz	r7, c9cc <__udivmoddi4+0x1d8>
    c9a8:	4283      	cmp	r3, r0
    c9aa:	d301      	bcc.n	c9b0 <__udivmoddi4+0x1bc>
    c9ac:	4572      	cmp	r2, lr
    c9ae:	d808      	bhi.n	c9c2 <__udivmoddi4+0x1ce>
    c9b0:	ebbe 0402 	subs.w	r4, lr, r2
    c9b4:	eb60 0303 	sbc.w	r3, r0, r3
    c9b8:	2001      	movs	r0, #1
    c9ba:	469c      	mov	ip, r3
    c9bc:	b91e      	cbnz	r6, c9c6 <__udivmoddi4+0x1d2>
    c9be:	2100      	movs	r1, #0
    c9c0:	e768      	b.n	c894 <__udivmoddi4+0xa0>
    c9c2:	4638      	mov	r0, r7
    c9c4:	e7fa      	b.n	c9bc <__udivmoddi4+0x1c8>
    c9c6:	e9c6 4c00 	strd	r4, ip, [r6]
    c9ca:	e7f8      	b.n	c9be <__udivmoddi4+0x1ca>
    c9cc:	f1c7 0c20 	rsb	ip, r7, #32
    c9d0:	40bb      	lsls	r3, r7
    c9d2:	fa22 f40c 	lsr.w	r4, r2, ip
    c9d6:	431c      	orrs	r4, r3
    c9d8:	fa2e f10c 	lsr.w	r1, lr, ip
    c9dc:	fa20 f30c 	lsr.w	r3, r0, ip
    c9e0:	40b8      	lsls	r0, r7
    c9e2:	4301      	orrs	r1, r0
    c9e4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c9e8:	fa0e f507 	lsl.w	r5, lr, r7
    c9ec:	fbb3 f8f9 	udiv	r8, r3, r9
    c9f0:	fa1f fe84 	uxth.w	lr, r4
    c9f4:	fb09 3018 	mls	r0, r9, r8, r3
    c9f8:	0c0b      	lsrs	r3, r1, #16
    c9fa:	fb08 fa0e 	mul.w	sl, r8, lr
    c9fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    ca02:	459a      	cmp	sl, r3
    ca04:	fa02 f207 	lsl.w	r2, r2, r7
    ca08:	d940      	bls.n	ca8c <__udivmoddi4+0x298>
    ca0a:	18e3      	adds	r3, r4, r3
    ca0c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    ca10:	d204      	bcs.n	ca1c <__udivmoddi4+0x228>
    ca12:	459a      	cmp	sl, r3
    ca14:	d902      	bls.n	ca1c <__udivmoddi4+0x228>
    ca16:	f1a8 0002 	sub.w	r0, r8, #2
    ca1a:	4423      	add	r3, r4
    ca1c:	eba3 030a 	sub.w	r3, r3, sl
    ca20:	b289      	uxth	r1, r1
    ca22:	fbb3 f8f9 	udiv	r8, r3, r9
    ca26:	fb09 3318 	mls	r3, r9, r8, r3
    ca2a:	fb08 fe0e 	mul.w	lr, r8, lr
    ca2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ca32:	458e      	cmp	lr, r1
    ca34:	d92c      	bls.n	ca90 <__udivmoddi4+0x29c>
    ca36:	1861      	adds	r1, r4, r1
    ca38:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    ca3c:	d204      	bcs.n	ca48 <__udivmoddi4+0x254>
    ca3e:	458e      	cmp	lr, r1
    ca40:	d902      	bls.n	ca48 <__udivmoddi4+0x254>
    ca42:	f1a8 0302 	sub.w	r3, r8, #2
    ca46:	4421      	add	r1, r4
    ca48:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ca4c:	fba0 9802 	umull	r9, r8, r0, r2
    ca50:	eba1 010e 	sub.w	r1, r1, lr
    ca54:	4541      	cmp	r1, r8
    ca56:	46ce      	mov	lr, r9
    ca58:	4643      	mov	r3, r8
    ca5a:	d302      	bcc.n	ca62 <__udivmoddi4+0x26e>
    ca5c:	d106      	bne.n	ca6c <__udivmoddi4+0x278>
    ca5e:	454d      	cmp	r5, r9
    ca60:	d204      	bcs.n	ca6c <__udivmoddi4+0x278>
    ca62:	ebb9 0e02 	subs.w	lr, r9, r2
    ca66:	eb68 0304 	sbc.w	r3, r8, r4
    ca6a:	3801      	subs	r0, #1
    ca6c:	2e00      	cmp	r6, #0
    ca6e:	d0a6      	beq.n	c9be <__udivmoddi4+0x1ca>
    ca70:	ebb5 020e 	subs.w	r2, r5, lr
    ca74:	eb61 0103 	sbc.w	r1, r1, r3
    ca78:	fa01 fc0c 	lsl.w	ip, r1, ip
    ca7c:	fa22 f307 	lsr.w	r3, r2, r7
    ca80:	ea4c 0303 	orr.w	r3, ip, r3
    ca84:	40f9      	lsrs	r1, r7
    ca86:	e9c6 3100 	strd	r3, r1, [r6]
    ca8a:	e798      	b.n	c9be <__udivmoddi4+0x1ca>
    ca8c:	4640      	mov	r0, r8
    ca8e:	e7c5      	b.n	ca1c <__udivmoddi4+0x228>
    ca90:	4643      	mov	r3, r8
    ca92:	e7d9      	b.n	ca48 <__udivmoddi4+0x254>
    ca94:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ca98:	4681      	mov	r9, r0
    ca9a:	f100 0007 	add.w	r0, r0, #7
    ca9e:	f020 0007 	bic.w	r0, r0, #7
    caa2:	ea5f 0802 	movs.w	r8, r2
    caa6:	9000      	str	r0, [sp, #0]
    caa8:	784a      	ldrb	r2, [r1, #1]
    caaa:	f88d 2004 	strb.w	r2, [sp, #4]
    caae:	788a      	ldrb	r2, [r1, #2]
    cab0:	460c      	mov	r4, r1
    cab2:	f88d 2005 	strb.w	r2, [sp, #5]
    cab6:	d000      	beq.n	caba <__udivmoddi4+0x2c6>
    cab8:	2000      	movs	r0, #0
    caba:	a901      	add	r1, sp, #4
    cabc:	f7f4 faaa 	bl	1014 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cac0:	9900      	ldr	r1, [sp, #0]
    cac2:	2600      	movs	r6, #0
    cac4:	4408      	add	r0, r1
    cac6:	9000      	str	r0, [sp, #0]
    cac8:	7820      	ldrb	r0, [r4, #0]
    caca:	7861      	ldrb	r1, [r4, #1]
    cacc:	4635      	mov	r5, r6
    cace:	4408      	add	r0, r1
    cad0:	b2c7      	uxtb	r7, r0
    cad2:	e008      	b.n	cae6 <__udivmoddi4+0x2f2>
    cad4:	7a23      	ldrb	r3, [r4, #8]
    cad6:	79e2      	ldrb	r2, [r4, #7]
    cad8:	79a1      	ldrb	r1, [r4, #6]
    cada:	7960      	ldrb	r0, [r4, #5]
    cadc:	f000 fe55 	bl	d78a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cae0:	1c6d      	adds	r5, r5, #1
    cae2:	4406      	add	r6, r0
    cae4:	b2ed      	uxtb	r5, r5
    cae6:	42bd      	cmp	r5, r7
    cae8:	d3f4      	bcc.n	cad4 <__udivmoddi4+0x2e0>
    caea:	9800      	ldr	r0, [sp, #0]
    caec:	1cc0      	adds	r0, r0, #3
    caee:	f020 0003 	bic.w	r0, r0, #3
    caf2:	9000      	str	r0, [sp, #0]
    caf4:	f1b8 0f00 	cmp.w	r8, #0
    caf8:	d000      	beq.n	cafc <__udivmoddi4+0x308>
    cafa:	2000      	movs	r0, #0
    cafc:	4632      	mov	r2, r6
    cafe:	4639      	mov	r1, r7
    cb00:	f7f4 fbc2 	bl	1288 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cb04:	9900      	ldr	r1, [sp, #0]
    cb06:	4642      	mov	r2, r8
    cb08:	4408      	add	r0, r1
    cb0a:	9000      	str	r0, [sp, #0]
    cb0c:	4621      	mov	r1, r4
    cb0e:	4668      	mov	r0, sp
    cb10:	f000 f805 	bl	cb1e <__udivmoddi4+0x32a>
    cb14:	9900      	ldr	r1, [sp, #0]
    cb16:	eba1 0009 	sub.w	r0, r1, r9
    cb1a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    cb1e:	b570      	push	{r4, r5, r6, lr}
    cb20:	4605      	mov	r5, r0
    cb22:	7888      	ldrb	r0, [r1, #2]
    cb24:	4616      	mov	r6, r2
    cb26:	460c      	mov	r4, r1
    cb28:	b188      	cbz	r0, cb4e <__udivmoddi4+0x35a>
    cb2a:	6828      	ldr	r0, [r5, #0]
    cb2c:	1cc0      	adds	r0, r0, #3
    cb2e:	f020 0003 	bic.w	r0, r0, #3
    cb32:	6028      	str	r0, [r5, #0]
    cb34:	7de1      	ldrb	r1, [r4, #23]
    cb36:	78e2      	ldrb	r2, [r4, #3]
    cb38:	8a63      	ldrh	r3, [r4, #18]
    cb3a:	4411      	add	r1, r2
    cb3c:	b2ca      	uxtb	r2, r1
    cb3e:	78a1      	ldrb	r1, [r4, #2]
    cb40:	b106      	cbz	r6, cb44 <__udivmoddi4+0x350>
    cb42:	2000      	movs	r0, #0
    cb44:	f7f4 fc54 	bl	13f0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb48:	6829      	ldr	r1, [r5, #0]
    cb4a:	4408      	add	r0, r1
    cb4c:	6028      	str	r0, [r5, #0]
    cb4e:	7d20      	ldrb	r0, [r4, #20]
    cb50:	2800      	cmp	r0, #0
    cb52:	d00f      	beq.n	cb74 <__udivmoddi4+0x380>
    cb54:	78a0      	ldrb	r0, [r4, #2]
    cb56:	2800      	cmp	r0, #0
    cb58:	d00c      	beq.n	cb74 <__udivmoddi4+0x380>
    cb5a:	6828      	ldr	r0, [r5, #0]
    cb5c:	1dc0      	adds	r0, r0, #7
    cb5e:	f020 0007 	bic.w	r0, r0, #7
    cb62:	6028      	str	r0, [r5, #0]
    cb64:	7d21      	ldrb	r1, [r4, #20]
    cb66:	b106      	cbz	r6, cb6a <__udivmoddi4+0x376>
    cb68:	2000      	movs	r0, #0
    cb6a:	f7f6 fc49 	bl	3400 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    cb6e:	6829      	ldr	r1, [r5, #0]
    cb70:	4408      	add	r0, r1
    cb72:	6028      	str	r0, [r5, #0]
    cb74:	bd70      	pop	{r4, r5, r6, pc}

0000cb76 <sdc_soc_ecb_block_encrypt>:
    cb76:	b530      	push	{r4, r5, lr}
    cb78:	460d      	mov	r5, r1
    cb7a:	b08d      	sub	sp, #52	; 0x34
    cb7c:	4614      	mov	r4, r2
    cb7e:	4601      	mov	r1, r0
    cb80:	2210      	movs	r2, #16
    cb82:	4668      	mov	r0, sp
    cb84:	f004 f96f 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb88:	2210      	movs	r2, #16
    cb8a:	4629      	mov	r1, r5
    cb8c:	a804      	add	r0, sp, #16
    cb8e:	f004 f96a 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb92:	4668      	mov	r0, sp
    cb94:	f000 ff7e 	bl	da94 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cb98:	b118      	cbz	r0, cba2 <sdc_soc_ecb_block_encrypt+0x2c>
    cb9a:	f06f 0015 	mvn.w	r0, #21
    cb9e:	b00d      	add	sp, #52	; 0x34
    cba0:	bd30      	pop	{r4, r5, pc}
    cba2:	2210      	movs	r2, #16
    cba4:	4620      	mov	r0, r4
    cba6:	a908      	add	r1, sp, #32
    cba8:	f004 f95d 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbac:	2000      	movs	r0, #0
    cbae:	e7f6      	b.n	cb9e <sdc_soc_ecb_block_encrypt+0x28>

0000cbb0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cbb0:	b50e      	push	{r1, r2, r3, lr}
    cbb2:	4601      	mov	r1, r0
    cbb4:	4668      	mov	r0, sp
    cbb6:	f000 f818 	bl	cbea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cbba:	4668      	mov	r0, sp
    cbbc:	f001 fbee 	bl	e39c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cbc0:	bd0e      	pop	{r1, r2, r3, pc}
    cbc2:	b570      	push	{r4, r5, r6, lr}
    cbc4:	460c      	mov	r4, r1
    cbc6:	4605      	mov	r5, r0
    cbc8:	f7f4 f862 	bl	c90 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cbcc:	2800      	cmp	r0, #0
    cbce:	d002      	beq.n	cbd6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cbd0:	2d3e      	cmp	r5, #62	; 0x3e
    cbd2:	d001      	beq.n	cbd8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cbd4:	2001      	movs	r0, #1
    cbd6:	bd70      	pop	{r4, r5, r6, pc}
    cbd8:	2c12      	cmp	r4, #18
    cbda:	d004      	beq.n	cbe6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cbdc:	4620      	mov	r0, r4
    cbde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cbe2:	f7f4 b867 	b.w	cb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbe6:	2000      	movs	r0, #0
    cbe8:	bd70      	pop	{r4, r5, r6, pc}

0000cbea <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cbea:	880a      	ldrh	r2, [r1, #0]
    cbec:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cbf0:	8082      	strh	r2, [r0, #4]
    cbf2:	884a      	ldrh	r2, [r1, #2]
    cbf4:	80c2      	strh	r2, [r0, #6]
    cbf6:	784a      	ldrb	r2, [r1, #1]
    cbf8:	0993      	lsrs	r3, r2, #6
    cbfa:	2200      	movs	r2, #0
    cbfc:	7242      	strb	r2, [r0, #9]
    cbfe:	784b      	ldrb	r3, [r1, #1]
    cc00:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cc04:	b11b      	cbz	r3, cc0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc06:	2b01      	cmp	r3, #1
    cc08:	d005      	beq.n	cc16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cc0a:	2b02      	cmp	r3, #2
    cc0c:	d005      	beq.n	cc1a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cc0e:	7202      	strb	r2, [r0, #8]
    cc10:	1d09      	adds	r1, r1, #4
    cc12:	6001      	str	r1, [r0, #0]
    cc14:	4770      	bx	lr
    cc16:	2201      	movs	r2, #1
    cc18:	e7f9      	b.n	cc0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc1a:	2202      	movs	r2, #2
    cc1c:	e7f7      	b.n	cc0e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cc1e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cc1e:	b510      	push	{r4, lr}
    cc20:	460c      	mov	r4, r1
    cc22:	7909      	ldrb	r1, [r1, #4]
    cc24:	7001      	strb	r1, [r0, #0]
    cc26:	7841      	ldrb	r1, [r0, #1]
    cc28:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cc2c:	7041      	strb	r1, [r0, #1]
    cc2e:	88a2      	ldrh	r2, [r4, #4]
    cc30:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cc34:	4311      	orrs	r1, r2
    cc36:	7041      	strb	r1, [r0, #1]
    cc38:	79a2      	ldrb	r2, [r4, #6]
    cc3a:	7082      	strb	r2, [r0, #2]
    cc3c:	88e2      	ldrh	r2, [r4, #6]
    cc3e:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cc42:	0a12      	lsrs	r2, r2, #8
    cc44:	70c2      	strb	r2, [r0, #3]
    cc46:	7041      	strb	r1, [r0, #1]
    cc48:	7a22      	ldrb	r2, [r4, #8]
    cc4a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cc4e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cc52:	7041      	strb	r1, [r0, #1]
    cc54:	7a62      	ldrb	r2, [r4, #9]
    cc56:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cc5a:	7041      	strb	r1, [r0, #1]
    cc5c:	6821      	ldr	r1, [r4, #0]
    cc5e:	1d02      	adds	r2, r0, #4
    cc60:	4291      	cmp	r1, r2
    cc62:	d006      	beq.n	cc72 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cc64:	88e2      	ldrh	r2, [r4, #6]
    cc66:	2afb      	cmp	r2, #251	; 0xfb
    cc68:	d300      	bcc.n	cc6c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cc6a:	22fb      	movs	r2, #251	; 0xfb
    cc6c:	1d00      	adds	r0, r0, #4
    cc6e:	f004 f8fa 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc72:	79a0      	ldrb	r0, [r4, #6]
    cc74:	1d00      	adds	r0, r0, #4
    cc76:	b2c0      	uxtb	r0, r0
    cc78:	bd10      	pop	{r4, pc}

0000cc7a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cc7a:	b430      	push	{r4, r5}
    cc7c:	790a      	ldrb	r2, [r1, #4]
    cc7e:	7002      	strb	r2, [r0, #0]
    cc80:	7842      	ldrb	r2, [r0, #1]
    cc82:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cc86:	7042      	strb	r2, [r0, #1]
    cc88:	888b      	ldrh	r3, [r1, #4]
    cc8a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cc8e:	431a      	orrs	r2, r3
    cc90:	7042      	strb	r2, [r0, #1]
    cc92:	798b      	ldrb	r3, [r1, #6]
    cc94:	7083      	strb	r3, [r0, #2]
    cc96:	78c3      	ldrb	r3, [r0, #3]
    cc98:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cc9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cca0:	70c3      	strb	r3, [r0, #3]
    cca2:	88cc      	ldrh	r4, [r1, #6]
    cca4:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cca8:	4323      	orrs	r3, r4
    ccaa:	70c3      	strb	r3, [r0, #3]
    ccac:	7042      	strb	r2, [r0, #1]
    ccae:	7a0c      	ldrb	r4, [r1, #8]
    ccb0:	f004 0403 	and.w	r4, r4, #3
    ccb4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ccb8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ccbc:	7042      	strb	r2, [r0, #1]
    ccbe:	7a4c      	ldrb	r4, [r1, #9]
    ccc0:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ccc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ccc8:	7042      	strb	r2, [r0, #1]
    ccca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ccce:	70c2      	strb	r2, [r0, #3]
    ccd0:	680b      	ldr	r3, [r1, #0]
    ccd2:	1d02      	adds	r2, r0, #4
    ccd4:	4293      	cmp	r3, r2
    ccd6:	d005      	beq.n	cce4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ccd8:	88ca      	ldrh	r2, [r1, #6]
    ccda:	bc30      	pop	{r4, r5}
    ccdc:	4619      	mov	r1, r3
    ccde:	1d00      	adds	r0, r0, #4
    cce0:	f004 b8c1 	b.w	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cce4:	bc30      	pop	{r4, r5}
    cce6:	4770      	bx	lr

0000cce8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccec:	460d      	mov	r5, r1
    ccee:	4604      	mov	r4, r0
    ccf0:	f891 c000 	ldrb.w	ip, [r1]
    ccf4:	2000      	movs	r0, #0
    ccf6:	230c      	movs	r3, #12
    ccf8:	2705      	movs	r7, #5
    ccfa:	2203      	movs	r2, #3
    ccfc:	263e      	movs	r6, #62	; 0x3e
    ccfe:	21ff      	movs	r1, #255	; 0xff
    cd00:	f1bc 0f1e 	cmp.w	ip, #30
    cd04:	d27e      	bcs.n	ce04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    cd06:	e8df f00c 	tbb	[pc, ip]
    cd0a:	29e7      	.short	0x29e7
    cd0c:	63e74240 	.word	0x63e74240
    cd10:	ac99806d 	.word	0xac99806d
    cd14:	dfc4b9ae 	.word	0xdfc4b9ae
    cd18:	e7e70ff3 	.word	0xe7e70ff3
    cd1c:	fcd2cf48 	.word	0xfcd2cf48
    cd20:	edeeeff0 	.word	0xedeeeff0
    cd24:	e9eaebec 	.word	0xe9eaebec
    cd28:	200e      	movs	r0, #14
    cd2a:	7020      	strb	r0, [r4, #0]
    cd2c:	7968      	ldrb	r0, [r5, #5]
    cd2e:	70e0      	strb	r0, [r4, #3]
    cd30:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd34:	0a00      	lsrs	r0, r0, #8
    cd36:	7120      	strb	r0, [r4, #4]
    cd38:	7928      	ldrb	r0, [r5, #4]
    cd3a:	70a0      	strb	r0, [r4, #2]
    cd3c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd40:	3883      	subs	r0, #131	; 0x83
    cd42:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cd46:	d003      	beq.n	cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    cd48:	2136      	movs	r1, #54	; 0x36
    cd4a:	20c7      	movs	r0, #199	; 0xc7
    cd4c:	f7f3 fe20 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd50:	1de9      	adds	r1, r5, #7
    cd52:	1d60      	adds	r0, r4, #5
    cd54:	f004 f887 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd58:	2007      	movs	r0, #7
    cd5a:	e0bb      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cd5c:	7023      	strb	r3, [r4, #0]
    cd5e:	7928      	ldrb	r0, [r5, #4]
    cd60:	70a0      	strb	r0, [r4, #2]
    cd62:	7968      	ldrb	r0, [r5, #5]
    cd64:	70e0      	strb	r0, [r4, #3]
    cd66:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd6a:	0a00      	lsrs	r0, r0, #8
    cd6c:	7120      	strb	r0, [r4, #4]
    cd6e:	79e8      	ldrb	r0, [r5, #7]
    cd70:	7160      	strb	r0, [r4, #5]
    cd72:	7a28      	ldrb	r0, [r5, #8]
    cd74:	71a0      	strb	r0, [r4, #6]
    cd76:	8928      	ldrh	r0, [r5, #8]
    cd78:	0a00      	lsrs	r0, r0, #8
    cd7a:	71e0      	strb	r0, [r4, #7]
    cd7c:	7aa8      	ldrb	r0, [r5, #10]
    cd7e:	7220      	strb	r0, [r4, #8]
    cd80:	8968      	ldrh	r0, [r5, #10]
    cd82:	0a00      	lsrs	r0, r0, #8
    cd84:	7260      	strb	r0, [r4, #9]
    cd86:	2008      	movs	r0, #8
    cd88:	e0a4      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cd8a:	2010      	movs	r0, #16
    cd8c:	e000      	b.n	cd90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cd8e:	201a      	movs	r0, #26
    cd90:	7020      	strb	r0, [r4, #0]
    cd92:	7928      	ldrb	r0, [r5, #4]
    cd94:	70a0      	strb	r0, [r4, #2]
    cd96:	2001      	movs	r0, #1
    cd98:	e09c      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cd9a:	2029      	movs	r0, #41	; 0x29
    cd9c:	f7f3 ff8a 	bl	cb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cda0:	b148      	cbz	r0, cdb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    cda2:	7026      	strb	r6, [r4, #0]
    cda4:	2029      	movs	r0, #41	; 0x29
    cda6:	70a0      	strb	r0, [r4, #2]
    cda8:	2221      	movs	r2, #33	; 0x21
    cdaa:	1d29      	adds	r1, r5, #4
    cdac:	1ce0      	adds	r0, r4, #3
    cdae:	f004 f85a 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cdb2:	2022      	movs	r0, #34	; 0x22
    cdb4:	e08e      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cdb6:	200a      	movs	r0, #10
    cdb8:	f7f3 ff7c 	bl	cb4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdbc:	2800      	cmp	r0, #0
    cdbe:	4629      	mov	r1, r5
    cdc0:	4620      	mov	r0, r4
    cdc2:	d002      	beq.n	cdca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    cdc4:	f000 f95b 	bl	d07e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cdc8:	e082      	b.n	ced0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cdca:	f000 f92f 	bl	d02c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cdce:	e07f      	b.n	ced0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cdd0:	7026      	strb	r6, [r4, #0]
    cdd2:	2014      	movs	r0, #20
    cdd4:	70a0      	strb	r0, [r4, #2]
    cdd6:	7928      	ldrb	r0, [r5, #4]
    cdd8:	70e0      	strb	r0, [r4, #3]
    cdda:	88a8      	ldrh	r0, [r5, #4]
    cddc:	0a00      	lsrs	r0, r0, #8
    cdde:	7120      	strb	r0, [r4, #4]
    cde0:	79a8      	ldrb	r0, [r5, #6]
    cde2:	e0c0      	b.n	cf66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cde4:	223e      	movs	r2, #62	; 0x3e
    cde6:	7022      	strb	r2, [r4, #0]
    cde8:	2204      	movs	r2, #4
    cdea:	70a2      	strb	r2, [r4, #2]
    cdec:	6868      	ldr	r0, [r5, #4]
    cdee:	f8c4 0003 	str.w	r0, [r4, #3]
    cdf2:	68a8      	ldr	r0, [r5, #8]
    cdf4:	f8c4 0007 	str.w	r0, [r4, #7]
    cdf8:	89a8      	ldrh	r0, [r5, #12]
    cdfa:	f8a4 000b 	strh.w	r0, [r4, #11]
    cdfe:	7ba8      	ldrb	r0, [r5, #14]
    ce00:	7360      	strb	r0, [r4, #13]
    ce02:	e000      	b.n	ce06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    ce04:	e068      	b.n	ced8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    ce06:	200c      	movs	r0, #12
    ce08:	e064      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    ce0a:	7026      	strb	r6, [r4, #0]
    ce0c:	70a2      	strb	r2, [r4, #2]
    ce0e:	7928      	ldrb	r0, [r5, #4]
    ce10:	70e0      	strb	r0, [r4, #3]
    ce12:	79a8      	ldrb	r0, [r5, #6]
    ce14:	7120      	strb	r0, [r4, #4]
    ce16:	88e8      	ldrh	r0, [r5, #6]
    ce18:	0a00      	lsrs	r0, r0, #8
    ce1a:	7160      	strb	r0, [r4, #5]
    ce1c:	7a28      	ldrb	r0, [r5, #8]
    ce1e:	71a0      	strb	r0, [r4, #6]
    ce20:	8928      	ldrh	r0, [r5, #8]
    ce22:	0a00      	lsrs	r0, r0, #8
    ce24:	71e0      	strb	r0, [r4, #7]
    ce26:	7aa8      	ldrb	r0, [r5, #10]
    ce28:	7220      	strb	r0, [r4, #8]
    ce2a:	8968      	ldrh	r0, [r5, #10]
    ce2c:	0a00      	lsrs	r0, r0, #8
    ce2e:	7260      	strb	r0, [r4, #9]
    ce30:	7b28      	ldrb	r0, [r5, #12]
    ce32:	72a0      	strb	r0, [r4, #10]
    ce34:	89a8      	ldrh	r0, [r5, #12]
    ce36:	0a00      	lsrs	r0, r0, #8
    ce38:	72e0      	strb	r0, [r4, #11]
    ce3a:	e0d1      	b.n	cfe0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    ce3c:	7026      	strb	r6, [r4, #0]
    ce3e:	70a7      	strb	r7, [r4, #2]
    ce40:	7928      	ldrb	r0, [r5, #4]
    ce42:	70e0      	strb	r0, [r4, #3]
    ce44:	88a8      	ldrh	r0, [r5, #4]
    ce46:	0a00      	lsrs	r0, r0, #8
    ce48:	7120      	strb	r0, [r4, #4]
    ce4a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce4e:	f8c4 0005 	str.w	r0, [r4, #5]
    ce52:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ce56:	f8c4 0009 	str.w	r0, [r4, #9]
    ce5a:	89e8      	ldrh	r0, [r5, #14]
    ce5c:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce60:	e0e2      	b.n	d028 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    ce62:	2011      	movs	r0, #17
    ce64:	e045      	b.n	cef2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    ce66:	7027      	strb	r7, [r4, #0]
    ce68:	7928      	ldrb	r0, [r5, #4]
    ce6a:	70a0      	strb	r0, [r4, #2]
    ce6c:	7968      	ldrb	r0, [r5, #5]
    ce6e:	70e0      	strb	r0, [r4, #3]
    ce70:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    ce74:	0a00      	lsrs	r0, r0, #8
    ce76:	7120      	strb	r0, [r4, #4]
    ce78:	79e8      	ldrb	r0, [r5, #7]
    ce7a:	e074      	b.n	cf66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ce7c:	2008      	movs	r0, #8
    ce7e:	7020      	strb	r0, [r4, #0]
    ce80:	7928      	ldrb	r0, [r5, #4]
    ce82:	70a0      	strb	r0, [r4, #2]
    ce84:	79a8      	ldrb	r0, [r5, #6]
    ce86:	70e0      	strb	r0, [r4, #3]
    ce88:	88e8      	ldrh	r0, [r5, #6]
    ce8a:	0a00      	lsrs	r0, r0, #8
    ce8c:	7120      	strb	r0, [r4, #4]
    ce8e:	7a28      	ldrb	r0, [r5, #8]
    ce90:	e069      	b.n	cf66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    ce92:	2030      	movs	r0, #48	; 0x30
    ce94:	7020      	strb	r0, [r4, #0]
    ce96:	7928      	ldrb	r0, [r5, #4]
    ce98:	70a0      	strb	r0, [r4, #2]
    ce9a:	79a8      	ldrb	r0, [r5, #6]
    ce9c:	70e0      	strb	r0, [r4, #3]
    ce9e:	88e8      	ldrh	r0, [r5, #6]
    cea0:	0a00      	lsrs	r0, r0, #8
    cea2:	7120      	strb	r0, [r4, #4]
    cea4:	2003      	movs	r0, #3
    cea6:	e015      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cea8:	7026      	strb	r6, [r4, #0]
    ceaa:	2007      	movs	r0, #7
    ceac:	e060      	b.n	cf70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    ceae:	7026      	strb	r6, [r4, #0]
    ceb0:	70a3      	strb	r3, [r4, #2]
    ceb2:	7928      	ldrb	r0, [r5, #4]
    ceb4:	70e0      	strb	r0, [r4, #3]
    ceb6:	79a8      	ldrb	r0, [r5, #6]
    ceb8:	7120      	strb	r0, [r4, #4]
    ceba:	88e8      	ldrh	r0, [r5, #6]
    cebc:	0a00      	lsrs	r0, r0, #8
    cebe:	7160      	strb	r0, [r4, #5]
    cec0:	7a28      	ldrb	r0, [r5, #8]
    cec2:	71a0      	strb	r0, [r4, #6]
    cec4:	7a68      	ldrb	r0, [r5, #9]
    cec6:	e029      	b.n	cf1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cec8:	1d29      	adds	r1, r5, #4
    ceca:	4620      	mov	r0, r4
    cecc:	f7f3 feb2 	bl	c34 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xac>
    ced0:	2800      	cmp	r0, #0
    ced2:	d001      	beq.n	ced8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    ced4:	7060      	strb	r0, [r4, #1]
    ced6:	1c80      	adds	r0, r0, #2
    ced8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cedc:	e08f      	b.n	cffe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    cede:	e063      	b.n	cfa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cee0:	e044      	b.n	cf6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cee2:	e06f      	b.n	cfc4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cee4:	e07e      	b.n	cfe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    cee6:	e036      	b.n	cf56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    cee8:	e01e      	b.n	cf28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    ceea:	e01a      	b.n	cf22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    ceec:	e009      	b.n	cf02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    ceee:	e7ff      	b.n	cef0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    cef0:	2057      	movs	r0, #87	; 0x57
    cef2:	7020      	strb	r0, [r4, #0]
    cef4:	7928      	ldrb	r0, [r5, #4]
    cef6:	70a0      	strb	r0, [r4, #2]
    cef8:	88a8      	ldrh	r0, [r5, #4]
    cefa:	0a00      	lsrs	r0, r0, #8
    cefc:	70e0      	strb	r0, [r4, #3]
    cefe:	2002      	movs	r0, #2
    cf00:	e7e8      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf02:	7026      	strb	r6, [r4, #0]
    cf04:	2012      	movs	r0, #18
    cf06:	70a0      	strb	r0, [r4, #2]
    cf08:	7928      	ldrb	r0, [r5, #4]
    cf0a:	70e0      	strb	r0, [r4, #3]
    cf0c:	7968      	ldrb	r0, [r5, #5]
    cf0e:	7120      	strb	r0, [r4, #4]
    cf10:	79a8      	ldrb	r0, [r5, #6]
    cf12:	7160      	strb	r0, [r4, #5]
    cf14:	88e8      	ldrh	r0, [r5, #6]
    cf16:	0a00      	lsrs	r0, r0, #8
    cf18:	71a0      	strb	r0, [r4, #6]
    cf1a:	7a28      	ldrb	r0, [r5, #8]
    cf1c:	71e0      	strb	r0, [r4, #7]
    cf1e:	2006      	movs	r0, #6
    cf20:	e7d8      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf22:	7026      	strb	r6, [r4, #0]
    cf24:	2020      	movs	r0, #32
    cf26:	e041      	b.n	cfac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    cf28:	7026      	strb	r6, [r4, #0]
    cf2a:	2021      	movs	r0, #33	; 0x21
    cf2c:	70a0      	strb	r0, [r4, #2]
    cf2e:	7928      	ldrb	r0, [r5, #4]
    cf30:	70e0      	strb	r0, [r4, #3]
    cf32:	7968      	ldrb	r0, [r5, #5]
    cf34:	7120      	strb	r0, [r4, #4]
    cf36:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf3a:	0a00      	lsrs	r0, r0, #8
    cf3c:	7160      	strb	r0, [r4, #5]
    cf3e:	79e8      	ldrb	r0, [r5, #7]
    cf40:	71a0      	strb	r0, [r4, #6]
    cf42:	7a28      	ldrb	r0, [r5, #8]
    cf44:	71e0      	strb	r0, [r4, #7]
    cf46:	7a68      	ldrb	r0, [r5, #9]
    cf48:	7220      	strb	r0, [r4, #8]
    cf4a:	7aa8      	ldrb	r0, [r5, #10]
    cf4c:	7260      	strb	r0, [r4, #9]
    cf4e:	7ae8      	ldrb	r0, [r5, #11]
    cf50:	72a0      	strb	r0, [r4, #10]
    cf52:	2009      	movs	r0, #9
    cf54:	e7be      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf56:	7021      	strb	r1, [r4, #0]
    cf58:	20a1      	movs	r0, #161	; 0xa1
    cf5a:	70a0      	strb	r0, [r4, #2]
    cf5c:	7928      	ldrb	r0, [r5, #4]
    cf5e:	70e0      	strb	r0, [r4, #3]
    cf60:	7968      	ldrb	r0, [r5, #5]
    cf62:	7120      	strb	r0, [r4, #4]
    cf64:	2000      	movs	r0, #0
    cf66:	7160      	strb	r0, [r4, #5]
    cf68:	2004      	movs	r0, #4
    cf6a:	e7b3      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf6c:	7021      	strb	r1, [r4, #0]
    cf6e:	20a2      	movs	r0, #162	; 0xa2
    cf70:	70a0      	strb	r0, [r4, #2]
    cf72:	7928      	ldrb	r0, [r5, #4]
    cf74:	70e0      	strb	r0, [r4, #3]
    cf76:	88a8      	ldrh	r0, [r5, #4]
    cf78:	0a00      	lsrs	r0, r0, #8
    cf7a:	7120      	strb	r0, [r4, #4]
    cf7c:	79a8      	ldrb	r0, [r5, #6]
    cf7e:	7160      	strb	r0, [r4, #5]
    cf80:	88e8      	ldrh	r0, [r5, #6]
    cf82:	0a00      	lsrs	r0, r0, #8
    cf84:	71a0      	strb	r0, [r4, #6]
    cf86:	7a28      	ldrb	r0, [r5, #8]
    cf88:	71e0      	strb	r0, [r4, #7]
    cf8a:	8928      	ldrh	r0, [r5, #8]
    cf8c:	0a00      	lsrs	r0, r0, #8
    cf8e:	7220      	strb	r0, [r4, #8]
    cf90:	7aa8      	ldrb	r0, [r5, #10]
    cf92:	7260      	strb	r0, [r4, #9]
    cf94:	8968      	ldrh	r0, [r5, #10]
    cf96:	0a00      	lsrs	r0, r0, #8
    cf98:	72a0      	strb	r0, [r4, #10]
    cf9a:	7b28      	ldrb	r0, [r5, #12]
    cf9c:	72e0      	strb	r0, [r4, #11]
    cf9e:	89a8      	ldrh	r0, [r5, #12]
    cfa0:	0a00      	lsrs	r0, r0, #8
    cfa2:	7320      	strb	r0, [r4, #12]
    cfa4:	200b      	movs	r0, #11
    cfa6:	e795      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfa8:	7021      	strb	r1, [r4, #0]
    cfaa:	20a3      	movs	r0, #163	; 0xa3
    cfac:	70a0      	strb	r0, [r4, #2]
    cfae:	7928      	ldrb	r0, [r5, #4]
    cfb0:	70e0      	strb	r0, [r4, #3]
    cfb2:	88a8      	ldrh	r0, [r5, #4]
    cfb4:	0a00      	lsrs	r0, r0, #8
    cfb6:	7120      	strb	r0, [r4, #4]
    cfb8:	79a8      	ldrb	r0, [r5, #6]
    cfba:	7160      	strb	r0, [r4, #5]
    cfbc:	79e8      	ldrb	r0, [r5, #7]
    cfbe:	71a0      	strb	r0, [r4, #6]
    cfc0:	2005      	movs	r0, #5
    cfc2:	e787      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfc4:	7026      	strb	r6, [r4, #0]
    cfc6:	2013      	movs	r0, #19
    cfc8:	70a0      	strb	r0, [r4, #2]
    cfca:	7928      	ldrb	r0, [r5, #4]
    cfcc:	70e0      	strb	r0, [r4, #3]
    cfce:	7968      	ldrb	r0, [r5, #5]
    cfd0:	7120      	strb	r0, [r4, #4]
    cfd2:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cfd6:	f8c4 0005 	str.w	r0, [r4, #5]
    cfda:	8968      	ldrh	r0, [r5, #10]
    cfdc:	f8a4 0009 	strh.w	r0, [r4, #9]
    cfe0:	200a      	movs	r0, #10
    cfe2:	e777      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfe4:	7021      	strb	r1, [r4, #0]
    cfe6:	20a4      	movs	r0, #164	; 0xa4
    cfe8:	70a0      	strb	r0, [r4, #2]
    cfea:	7928      	ldrb	r0, [r5, #4]
    cfec:	70e0      	strb	r0, [r4, #3]
    cfee:	88a8      	ldrh	r0, [r5, #4]
    cff0:	0a00      	lsrs	r0, r0, #8
    cff2:	7120      	strb	r0, [r4, #4]
    cff4:	79a8      	ldrb	r0, [r5, #6]
    cff6:	7160      	strb	r0, [r4, #5]
    cff8:	79e8      	ldrb	r0, [r5, #7]
    cffa:	71a0      	strb	r0, [r4, #6]
    cffc:	e6ac      	b.n	cd58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    cffe:	7021      	strb	r1, [r4, #0]
    d000:	2080      	movs	r0, #128	; 0x80
    d002:	70a0      	strb	r0, [r4, #2]
    d004:	88a9      	ldrh	r1, [r5, #4]
    d006:	f8a4 1003 	strh.w	r1, [r4, #3]
    d00a:	88e9      	ldrh	r1, [r5, #6]
    d00c:	f8a4 1005 	strh.w	r1, [r4, #5]
    d010:	7a29      	ldrb	r1, [r5, #8]
    d012:	71e1      	strb	r1, [r4, #7]
    d014:	8969      	ldrh	r1, [r5, #10]
    d016:	8121      	strh	r1, [r4, #8]
    d018:	89a9      	ldrh	r1, [r5, #12]
    d01a:	8161      	strh	r1, [r4, #10]
    d01c:	89e9      	ldrh	r1, [r5, #14]
    d01e:	81a1      	strh	r1, [r4, #12]
    d020:	7c29      	ldrb	r1, [r5, #16]
    d022:	f001 0101 	and.w	r1, r1, #1
    d026:	73a1      	strb	r1, [r4, #14]
    d028:	200d      	movs	r0, #13
    d02a:	e753      	b.n	ced4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000d02c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d02c:	223e      	movs	r2, #62	; 0x3e
    d02e:	7002      	strb	r2, [r0, #0]
    d030:	2201      	movs	r2, #1
    d032:	7082      	strb	r2, [r0, #2]
    d034:	790a      	ldrb	r2, [r1, #4]
    d036:	70c2      	strb	r2, [r0, #3]
    d038:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d03c:	7102      	strb	r2, [r0, #4]
    d03e:	880a      	ldrh	r2, [r1, #0]
    d040:	0a12      	lsrs	r2, r2, #8
    d042:	7142      	strb	r2, [r0, #5]
    d044:	788a      	ldrb	r2, [r1, #2]
    d046:	7182      	strb	r2, [r0, #6]
    d048:	78ca      	ldrb	r2, [r1, #3]
    d04a:	71c2      	strb	r2, [r0, #7]
    d04c:	684a      	ldr	r2, [r1, #4]
    d04e:	6082      	str	r2, [r0, #8]
    d050:	890a      	ldrh	r2, [r1, #8]
    d052:	8182      	strh	r2, [r0, #12]
    d054:	7d8a      	ldrb	r2, [r1, #22]
    d056:	7382      	strb	r2, [r0, #14]
    d058:	8aca      	ldrh	r2, [r1, #22]
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	73c2      	strb	r2, [r0, #15]
    d05e:	7e0a      	ldrb	r2, [r1, #24]
    d060:	7402      	strb	r2, [r0, #16]
    d062:	8b0a      	ldrh	r2, [r1, #24]
    d064:	0a12      	lsrs	r2, r2, #8
    d066:	7442      	strb	r2, [r0, #17]
    d068:	7e8a      	ldrb	r2, [r1, #26]
    d06a:	7482      	strb	r2, [r0, #18]
    d06c:	8b4a      	ldrh	r2, [r1, #26]
    d06e:	0a12      	lsrs	r2, r2, #8
    d070:	74c2      	strb	r2, [r0, #19]
    d072:	7f09      	ldrb	r1, [r1, #28]
    d074:	7501      	strb	r1, [r0, #20]
    d076:	2113      	movs	r1, #19
    d078:	7041      	strb	r1, [r0, #1]
    d07a:	4608      	mov	r0, r1
    d07c:	4770      	bx	lr
    d07e:	223e      	movs	r2, #62	; 0x3e
    d080:	7002      	strb	r2, [r0, #0]
    d082:	220a      	movs	r2, #10
    d084:	7082      	strb	r2, [r0, #2]
    d086:	790a      	ldrb	r2, [r1, #4]
    d088:	70c2      	strb	r2, [r0, #3]
    d08a:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d08e:	7102      	strb	r2, [r0, #4]
    d090:	880a      	ldrh	r2, [r1, #0]
    d092:	0a12      	lsrs	r2, r2, #8
    d094:	7142      	strb	r2, [r0, #5]
    d096:	788a      	ldrb	r2, [r1, #2]
    d098:	7182      	strb	r2, [r0, #6]
    d09a:	78ca      	ldrb	r2, [r1, #3]
    d09c:	71c2      	strb	r2, [r0, #7]
    d09e:	684a      	ldr	r2, [r1, #4]
    d0a0:	6082      	str	r2, [r0, #8]
    d0a2:	890a      	ldrh	r2, [r1, #8]
    d0a4:	8182      	strh	r2, [r0, #12]
    d0a6:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d0aa:	f8c0 200e 	str.w	r2, [r0, #14]
    d0ae:	89ca      	ldrh	r2, [r1, #14]
    d0b0:	8242      	strh	r2, [r0, #18]
    d0b2:	690a      	ldr	r2, [r1, #16]
    d0b4:	6142      	str	r2, [r0, #20]
    d0b6:	8a8a      	ldrh	r2, [r1, #20]
    d0b8:	8302      	strh	r2, [r0, #24]
    d0ba:	7d8a      	ldrb	r2, [r1, #22]
    d0bc:	7682      	strb	r2, [r0, #26]
    d0be:	8aca      	ldrh	r2, [r1, #22]
    d0c0:	0a12      	lsrs	r2, r2, #8
    d0c2:	76c2      	strb	r2, [r0, #27]
    d0c4:	7e0a      	ldrb	r2, [r1, #24]
    d0c6:	7702      	strb	r2, [r0, #28]
    d0c8:	8b0a      	ldrh	r2, [r1, #24]
    d0ca:	0a12      	lsrs	r2, r2, #8
    d0cc:	7742      	strb	r2, [r0, #29]
    d0ce:	7e8a      	ldrb	r2, [r1, #26]
    d0d0:	7782      	strb	r2, [r0, #30]
    d0d2:	8b4a      	ldrh	r2, [r1, #26]
    d0d4:	0a12      	lsrs	r2, r2, #8
    d0d6:	77c2      	strb	r2, [r0, #31]
    d0d8:	7f09      	ldrb	r1, [r1, #28]
    d0da:	f880 1020 	strb.w	r1, [r0, #32]
    d0de:	211f      	movs	r1, #31
    d0e0:	7041      	strb	r1, [r0, #1]
    d0e2:	4608      	mov	r0, r1
    d0e4:	4770      	bx	lr
    d0e6:	094a      	lsrs	r2, r1, #5
    d0e8:	f001 011f 	and.w	r1, r1, #31
    d0ec:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d0f0:	40c8      	lsrs	r0, r1
    d0f2:	f000 0001 	and.w	r0, r0, #1
    d0f6:	4770      	bx	lr

0000d0f8 <sdc_hci_data_put>:
    d0f8:	b510      	push	{r4, lr}
    d0fa:	f06f 0415 	mvn.w	r4, #21
    d0fe:	b120      	cbz	r0, d10a <sdc_hci_data_put+0x12>
    d100:	f7ff fd56 	bl	cbb0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d104:	b108      	cbz	r0, d10a <sdc_hci_data_put+0x12>
    d106:	2000      	movs	r0, #0
    d108:	bd10      	pop	{r4, pc}
    d10a:	4620      	mov	r0, r4
    d10c:	bd10      	pop	{r4, pc}

0000d10e <sdc_hci_get>:
    d10e:	b510      	push	{r4, lr}
    d110:	460c      	mov	r4, r1
    d112:	b130      	cbz	r0, d122 <sdc_hci_get+0x14>
    d114:	b12c      	cbz	r4, d122 <sdc_hci_get+0x14>
    d116:	f7f3 fd37 	bl	b88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d11a:	b128      	cbz	r0, d128 <sdc_hci_get+0x1a>
    d11c:	7020      	strb	r0, [r4, #0]
    d11e:	2000      	movs	r0, #0
    d120:	bd10      	pop	{r4, pc}
    d122:	f06f 0015 	mvn.w	r0, #21
    d126:	bd10      	pop	{r4, pc}
    d128:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d12c:	bd10      	pop	{r4, pc}

0000d12e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d12e:	f003 b800 	b.w	10132 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d132 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d132:	f003 b81b 	b.w	1016c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d136 <sdc_hci_cmd_cb_set_event_mask>:
    d136:	b510      	push	{r4, lr}
    d138:	f7f3 fdcc 	bl	cd4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d13c:	2000      	movs	r0, #0
    d13e:	bd10      	pop	{r4, pc}

0000d140 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d140:	b510      	push	{r4, lr}
    d142:	f7f3 fdd7 	bl	cf4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d146:	2000      	movs	r0, #0
    d148:	bd10      	pop	{r4, pc}

0000d14a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d14a:	f003 b830 	b.w	101ae <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d14e <sdc_hci_cmd_vs_conn_event_extend>:
    d14e:	b508      	push	{r3, lr}
    d150:	7800      	ldrb	r0, [r0, #0]
    d152:	f88d 0000 	strb.w	r0, [sp]
    d156:	4668      	mov	r0, sp
    d158:	f002 ff0c 	bl	ff74 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d15c:	bd08      	pop	{r3, pc}

0000d15e <sdc_hci_cmd_vs_conn_update>:
    d15e:	2001      	movs	r0, #1
    d160:	4770      	bx	lr

0000d162 <sdc_hci_cmd_vs_event_length_set>:
    d162:	f7f9 be13 	b.w	6d8c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d166 <sdc_hci_cmd_vs_llpm_mode_set>:
    d166:	2001      	movs	r0, #1
    d168:	4770      	bx	lr

0000d16a <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d16a:	7881      	ldrb	r1, [r0, #2]
    d16c:	8800      	ldrh	r0, [r0, #0]
    d16e:	f002 beb1 	b.w	fed4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d172 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d172:	7800      	ldrb	r0, [r0, #0]
    d174:	b100      	cbz	r0, d178 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d176:	2001      	movs	r0, #1
    d178:	f002 bea7 	b.w	feca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d17c <sdc_hci_cmd_vs_set_adv_randomness>:
    d17c:	f002 bed4 	b.w	ff28 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d180 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d180:	b510      	push	{r4, lr}
    d182:	4604      	mov	r4, r0
    d184:	f7ff f9dc 	bl	c540 <mpsl_temperature_get>
    d188:	17c1      	asrs	r1, r0, #31
    d18a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d18e:	1080      	asrs	r0, r0, #2
    d190:	287f      	cmp	r0, #127	; 0x7f
    d192:	dd01      	ble.n	d198 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d194:	207f      	movs	r0, #127	; 0x7f
    d196:	e004      	b.n	d1a2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d198:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d19c:	4288      	cmp	r0, r1
    d19e:	da00      	bge.n	d1a2 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d1a0:	4608      	mov	r0, r1
    d1a2:	7020      	strb	r0, [r4, #0]
    d1a4:	2000      	movs	r0, #0
    d1a6:	bd10      	pop	{r4, pc}

0000d1a8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1a8:	f002 bed3 	b.w	ff52 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1ac <sdc_hci_cmd_ip_read_bd_addr>:
    d1ac:	f002 bfd2 	b.w	10154 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1b0 <sdc_hci_cmd_ip_read_local_version_information>:
    d1b0:	f7f9 bdfa 	b.w	6da8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1b4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1b4:	f002 bc09 	b.w	f9ca <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1b8 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d1b8:	f002 bbdd 	b.w	f976 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d1bc <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1bc:	f002 bc29 	b.w	fa12 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1c0 <sdc_hci_cmd_le_clear_resolving_list>:
    d1c0:	f002 bc1a 	b.w	f9f8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d1c4 <sdc_hci_cmd_le_encrypt>:
    d1c4:	f002 bc32 	b.w	fa2c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1c8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d1c8:	8802      	ldrh	r2, [r0, #0]
    d1ca:	800a      	strh	r2, [r1, #0]
    d1cc:	f002 bc37 	b.w	fa3e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d1d0 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d1d0:	8802      	ldrh	r2, [r0, #0]
    d1d2:	800a      	strh	r2, [r1, #0]
    d1d4:	f002 bc4c 	b.w	fa70 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d1d8 <sdc_hci_cmd_le_rand>:
    d1d8:	f002 bc74 	b.w	fac4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1dc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d1dc:	f002 bc78 	b.w	fad0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d1e0 <sdc_hci_cmd_le_read_buffer_size>:
    d1e0:	f7f9 bce2 	b.w	6ba8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d1e4 <sdc_hci_cmd_le_read_channel_map>:
    d1e4:	f7f9 bcea 	b.w	6bbc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d1e8 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d1e8:	f002 bcb6 	b.w	fb58 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d1ec <sdc_hci_cmd_le_read_max_data_length>:
    d1ec:	f002 bc7b 	b.w	fae6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d1f0 <sdc_hci_cmd_le_read_phy>:
    d1f0:	f7f9 bd0c 	b.w	6c0c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d1f4 <sdc_hci_cmd_le_read_remote_features>:
    d1f4:	f002 bc80 	b.w	faf8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d1f8 <sdc_hci_cmd_le_read_resolving_list_size>:
    d1f8:	f002 bc9a 	b.w	fb30 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d1fc <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d1fc:	f7f9 bd2c 	b.w	6c58 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d200 <sdc_hci_cmd_le_read_transmit_power>:
    d200:	f002 bc9a 	b.w	fb38 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d204 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d204:	f002 bcc8 	b.w	fb98 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d208 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d208:	f002 bcad 	b.w	fb66 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d20c <sdc_hci_cmd_le_set_address_resolution_enable>:
    d20c:	f002 bcd9 	b.w	fbc2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d210 <sdc_hci_cmd_le_set_adv_data>:
    d210:	f002 bce5 	b.w	fbde <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d214 <sdc_hci_cmd_le_set_adv_enable>:
    d214:	f002 bcf8 	b.w	fc08 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d218 <sdc_hci_cmd_le_set_adv_params>:
    d218:	f002 bd29 	b.w	fc6e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d21c <sdc_hci_cmd_le_set_data_length>:
    d21c:	f002 bdbc 	b.w	fd98 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d220 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d220:	f002 bdda 	b.w	fdd8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d224 <sdc_hci_cmd_le_set_default_phy>:
    d224:	f7f9 bd22 	b.w	6c6c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d228 <sdc_hci_cmd_le_set_event_mask>:
    d228:	b510      	push	{r4, lr}
    d22a:	f7f3 fd4b 	bl	cc4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d22e:	2000      	movs	r0, #0
    d230:	bd10      	pop	{r4, pc}

0000d232 <sdc_hci_cmd_le_set_phy>:
    d232:	f002 bdde 	b.w	fdf2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d236 <sdc_hci_cmd_le_set_privacy_mode>:
    d236:	f002 bdf5 	b.w	fe24 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d23a <sdc_hci_cmd_le_set_random_address>:
    d23a:	f002 be09 	b.w	fe50 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d23e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d23e:	f002 be15 	b.w	fe6c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d242 <sdc_hci_cmd_le_set_scan_response_data>:
    d242:	f002 be1c 	b.w	fe7e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d246 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d246:	f002 be2f 	b.w	fea8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d24a <sdc_hci_cmd_lc_disconnect>:
    d24a:	f002 bb46 	b.w	f8da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d24e <sdc_hci_cmd_lc_read_remote_version_information>:
    d24e:	f7f9 bdb5 	b.w	6dbc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d252:	b570      	push	{r4, r5, r6, lr}
    d254:	880b      	ldrh	r3, [r1, #0]
    d256:	7cc4      	ldrb	r4, [r0, #19]
    d258:	f100 0518 	add.w	r5, r0, #24
    d25c:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d260:	8802      	ldrh	r2, [r0, #0]
    d262:	4435      	add	r5, r6
    d264:	1d64      	adds	r4, r4, #5
    d266:	882d      	ldrh	r5, [r5, #0]
    d268:	4422      	add	r2, r4
    d26a:	b292      	uxth	r2, r2
    d26c:	4425      	add	r5, r4
    d26e:	1e54      	subs	r4, r2, #1
    d270:	442c      	add	r4, r5
    d272:	fb94 f4f2 	sdiv	r4, r4, r2
    d276:	fb02 6204 	mla	r2, r2, r4, r6
    d27a:	8840      	ldrh	r0, [r0, #2]
    d27c:	b292      	uxth	r2, r2
    d27e:	4290      	cmp	r0, r2
    d280:	d903      	bls.n	d28a <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d282:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d286:	4310      	orrs	r0, r2
    d288:	e002      	b.n	d290 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d28a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d28e:	4398      	bics	r0, r3
    d290:	8008      	strh	r0, [r1, #0]
    d292:	bd70      	pop	{r4, r5, r6, pc}
    d294:	0442      	lsls	r2, r0, #17
    d296:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d29a:	d107      	bne.n	d2ac <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d29c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2a0:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2a4:	4288      	cmp	r0, r1
    d2a6:	d001      	beq.n	d2ac <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2a8:	2001      	movs	r0, #1
    d2aa:	4770      	bx	lr
    d2ac:	2000      	movs	r0, #0
    d2ae:	4770      	bx	lr

0000d2b0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2b0:	8881      	ldrh	r1, [r0, #4]
    d2b2:	88c0      	ldrh	r0, [r0, #6]
    d2b4:	4288      	cmp	r0, r1
    d2b6:	d101      	bne.n	d2bc <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2b8:	2001      	movs	r0, #1
    d2ba:	4770      	bx	lr
    d2bc:	2000      	movs	r0, #0
    d2be:	4770      	bx	lr

0000d2c0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c4:	460f      	mov	r7, r1
    d2c6:	4604      	mov	r4, r0
    d2c8:	f100 0118 	add.w	r1, r0, #24
    d2cc:	8880      	ldrh	r0, [r0, #4]
    d2ce:	2600      	movs	r6, #0
    d2d0:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2d4:	1845      	adds	r5, r0, r1
    d2d6:	603e      	str	r6, [r7, #0]
    d2d8:	89e0      	ldrh	r0, [r4, #14]
    d2da:	2800      	cmp	r0, #0
    d2dc:	d016      	beq.n	d30c <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2de:	8961      	ldrh	r1, [r4, #10]
    d2e0:	4408      	add	r0, r1
    d2e2:	b280      	uxth	r0, r0
    d2e4:	8160      	strh	r0, [r4, #10]
    d2e6:	8829      	ldrh	r1, [r5, #0]
    d2e8:	4288      	cmp	r0, r1
    d2ea:	d905      	bls.n	d2f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d2ec:	f240 1151 	movw	r1, #337	; 0x151
    d2f0:	f04f 0014 	mov.w	r0, #20
    d2f4:	f7f3 fb4c 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2f8:	d106      	bne.n	d308 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2fa:	f104 0104 	add.w	r1, r4, #4
    d2fe:	4620      	mov	r0, r4
    d300:	f7ff ffa7 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d304:	8166      	strh	r6, [r4, #10]
    d306:	603d      	str	r5, [r7, #0]
    d308:	81e6      	strh	r6, [r4, #14]
    d30a:	2001      	movs	r0, #1
    d30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d310 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d314:	4604      	mov	r4, r0
    d316:	f100 0318 	add.w	r3, r0, #24
    d31a:	88c0      	ldrh	r0, [r0, #6]
    d31c:	460e      	mov	r6, r1
    d31e:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d322:	8a20      	ldrh	r0, [r4, #16]
    d324:	19d9      	adds	r1, r3, r7
    d326:	b108      	cbz	r0, d32c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d328:	42b0      	cmp	r0, r6
    d32a:	d202      	bcs.n	d332 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d32c:	2000      	movs	r0, #0
    d32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d332:	89a0      	ldrh	r0, [r4, #12]
    d334:	2500      	movs	r5, #0
    d336:	b140      	cbz	r0, d34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d338:	f8b1 c000 	ldrh.w	ip, [r1]
    d33c:	4560      	cmp	r0, ip
    d33e:	d006      	beq.n	d34e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d340:	f44f 7101 	mov.w	r1, #516	; 0x204
    d344:	2014      	movs	r0, #20
    d346:	f7f3 fb23 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34a:	800d      	strh	r5, [r1, #0]
    d34c:	e00e      	b.n	d36c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d34e:	f894 c013 	ldrb.w	ip, [r4, #19]
    d352:	4418      	add	r0, r3
    d354:	f10c 0c05 	add.w	ip, ip, #5
    d358:	44bc      	add	ip, r7
    d35a:	4460      	add	r0, ip
    d35c:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d360:	f820 cc03 	strh.w	ip, [r0, #-3]
    d364:	f894 c016 	ldrb.w	ip, [r4, #22]
    d368:	f800 cc01 	strb.w	ip, [r0, #-1]
    d36c:	89a0      	ldrh	r0, [r4, #12]
    d36e:	4430      	add	r0, r6
    d370:	81a0      	strh	r0, [r4, #12]
    d372:	8808      	ldrh	r0, [r1, #0]
    d374:	4430      	add	r0, r6
    d376:	8008      	strh	r0, [r1, #0]
    d378:	b12a      	cbz	r2, d386 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d37a:	1da1      	adds	r1, r4, #6
    d37c:	4620      	mov	r0, r4
    d37e:	f7ff ff68 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d382:	81a5      	strh	r5, [r4, #12]
    d384:	e00a      	b.n	d39c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d386:	7ce0      	ldrb	r0, [r4, #19]
    d388:	89a1      	ldrh	r1, [r4, #12]
    d38a:	1d40      	adds	r0, r0, #5
    d38c:	4438      	add	r0, r7
    d38e:	4419      	add	r1, r3
    d390:	4408      	add	r0, r1
    d392:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d396:	82a1      	strh	r1, [r4, #20]
    d398:	7880      	ldrb	r0, [r0, #2]
    d39a:	75a0      	strb	r0, [r4, #22]
    d39c:	8225      	strh	r5, [r4, #16]
    d39e:	2001      	movs	r0, #1
    d3a0:	e7c5      	b.n	d32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3a2 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3a2:	1c80      	adds	r0, r0, #2
    d3a4:	4770      	bx	lr

0000d3a6 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3a6:	b510      	push	{r4, lr}
    d3a8:	4604      	mov	r4, r0
    d3aa:	88c0      	ldrh	r0, [r0, #6]
    d3ac:	88a1      	ldrh	r1, [r4, #4]
    d3ae:	4281      	cmp	r1, r0
    d3b0:	d003      	beq.n	d3ba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3b2:	8960      	ldrh	r0, [r4, #10]
    d3b4:	b908      	cbnz	r0, d3ba <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3b6:	89e0      	ldrh	r0, [r4, #14]
    d3b8:	b108      	cbz	r0, d3be <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3ba:	2000      	movs	r0, #0
    d3bc:	bd10      	pop	{r4, pc}
    d3be:	1d21      	adds	r1, r4, #4
    d3c0:	4620      	mov	r0, r4
    d3c2:	f7ff ff46 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3c6:	2000      	movs	r0, #0
    d3c8:	81e0      	strh	r0, [r4, #14]
    d3ca:	2001      	movs	r0, #1
    d3cc:	bd10      	pop	{r4, pc}

0000d3ce <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d3ce:	b510      	push	{r4, lr}
    d3d0:	4604      	mov	r4, r0
    d3d2:	f100 0218 	add.w	r2, r0, #24
    d3d6:	88c0      	ldrh	r0, [r0, #6]
    d3d8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d3dc:	4402      	add	r2, r0
    d3de:	8820      	ldrh	r0, [r4, #0]
    d3e0:	2845      	cmp	r0, #69	; 0x45
    d3e2:	d200      	bcs.n	d3e6 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d3e4:	2045      	movs	r0, #69	; 0x45
    d3e6:	4288      	cmp	r0, r1
    d3e8:	d204      	bcs.n	d3f4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d3ea:	f44f 7182 	mov.w	r1, #260	; 0x104
    d3ee:	2014      	movs	r0, #20
    d3f0:	f7f3 face 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3f4:	7ca0      	ldrb	r0, [r4, #18]
    d3f6:	2800      	cmp	r0, #0
    d3f8:	d003      	beq.n	d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d3fa:	8810      	ldrh	r0, [r2, #0]
    d3fc:	4288      	cmp	r0, r1
    d3fe:	d201      	bcs.n	d404 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d400:	2000      	movs	r0, #0
    d402:	bd10      	pop	{r4, pc}
    d404:	8011      	strh	r1, [r2, #0]
    d406:	1da1      	adds	r1, r4, #6
    d408:	4620      	mov	r0, r4
    d40a:	f7ff ff22 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d40e:	2000      	movs	r0, #0
    d410:	74a0      	strb	r0, [r4, #18]
    d412:	2001      	movs	r0, #1
    d414:	bd10      	pop	{r4, pc}

0000d416 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d416:	b510      	push	{r4, lr}
    d418:	88c4      	ldrh	r4, [r0, #6]
    d41a:	8883      	ldrh	r3, [r0, #4]
    d41c:	4601      	mov	r1, r0
    d41e:	f100 0218 	add.w	r2, r0, #24
    d422:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d426:	4410      	add	r0, r2
    d428:	42a3      	cmp	r3, r4
    d42a:	d002      	beq.n	d432 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d42c:	8949      	ldrh	r1, [r1, #10]
    d42e:	2900      	cmp	r1, #0
    d430:	d000      	beq.n	d434 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d432:	2000      	movs	r0, #0
    d434:	bd10      	pop	{r4, pc}

0000d436 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d436:	8803      	ldrh	r3, [r0, #0]
    d438:	2b45      	cmp	r3, #69	; 0x45
    d43a:	d200      	bcs.n	d43e <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d43c:	2345      	movs	r3, #69	; 0x45
    d43e:	8013      	strh	r3, [r2, #0]
    d440:	88c2      	ldrh	r2, [r0, #6]
    d442:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d446:	f100 0218 	add.w	r2, r0, #24
    d44a:	441a      	add	r2, r3
    d44c:	600a      	str	r2, [r1, #0]
    d44e:	8980      	ldrh	r0, [r0, #12]
    d450:	4770      	bx	lr

0000d452 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d452:	7cc0      	ldrb	r0, [r0, #19]
    d454:	1d40      	adds	r0, r0, #5
    d456:	4408      	add	r0, r1
    d458:	1ec0      	subs	r0, r0, #3
    d45a:	6010      	str	r0, [r2, #0]
    d45c:	8808      	ldrh	r0, [r1, #0]
    d45e:	4770      	bx	lr

0000d460 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d464:	460e      	mov	r6, r1
    d466:	88c1      	ldrh	r1, [r0, #6]
    d468:	8902      	ldrh	r2, [r0, #8]
    d46a:	4604      	mov	r4, r0
    d46c:	f100 0818 	add.w	r8, r0, #24
    d470:	8800      	ldrh	r0, [r0, #0]
    d472:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d476:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d47a:	2845      	cmp	r0, #69	; 0x45
    d47c:	d200      	bcs.n	d480 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d47e:	2045      	movs	r0, #69	; 0x45
    d480:	42b0      	cmp	r0, r6
    d482:	d203      	bcs.n	d48c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d484:	21c6      	movs	r1, #198	; 0xc6
    d486:	2014      	movs	r0, #20
    d488:	f7f3 fa82 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d48c:	4610      	mov	r0, r2
    d48e:	f7ff ff01 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d492:	b110      	cbz	r0, d49a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d494:	2000      	movs	r0, #0
    d496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d49a:	42af      	cmp	r7, r5
    d49c:	d908      	bls.n	d4b0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d49e:	7ce1      	ldrb	r1, [r4, #19]
    d4a0:	1b78      	subs	r0, r7, r5
    d4a2:	1a40      	subs	r0, r0, r1
    d4a4:	1f40      	subs	r0, r0, #5
    d4a6:	4286      	cmp	r6, r0
    d4a8:	dd02      	ble.n	d4b0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4aa:	2000      	movs	r0, #0
    d4ac:	74a0      	strb	r0, [r4, #18]
    d4ae:	e7f1      	b.n	d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4b0:	eb08 0005 	add.w	r0, r8, r5
    d4b4:	2101      	movs	r1, #1
    d4b6:	8006      	strh	r6, [r0, #0]
    d4b8:	74a1      	strb	r1, [r4, #18]
    d4ba:	e7ec      	b.n	d496 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4bc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4bc:	b538      	push	{r3, r4, r5, lr}
    d4be:	88c4      	ldrh	r4, [r0, #6]
    d4c0:	8881      	ldrh	r1, [r0, #4]
    d4c2:	f100 0218 	add.w	r2, r0, #24
    d4c6:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4ca:	441a      	add	r2, r3
    d4cc:	42a1      	cmp	r1, r4
    d4ce:	d010      	beq.n	d4f2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d4d0:	8943      	ldrh	r3, [r0, #10]
    d4d2:	89c5      	ldrh	r5, [r0, #14]
    d4d4:	8812      	ldrh	r2, [r2, #0]
    d4d6:	442b      	add	r3, r5
    d4d8:	4293      	cmp	r3, r2
    d4da:	d308      	bcc.n	d4ee <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d4dc:	f8ad 1000 	strh.w	r1, [sp]
    d4e0:	4669      	mov	r1, sp
    d4e2:	f7ff feb6 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4e6:	f8bd 0000 	ldrh.w	r0, [sp]
    d4ea:	42a0      	cmp	r0, r4
    d4ec:	d001      	beq.n	d4f2 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d4ee:	2001      	movs	r0, #1
    d4f0:	bd38      	pop	{r3, r4, r5, pc}
    d4f2:	2000      	movs	r0, #0
    d4f4:	bd38      	pop	{r3, r4, r5, pc}

0000d4f6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d4f6:	b570      	push	{r4, r5, r6, lr}
    d4f8:	88c6      	ldrh	r6, [r0, #6]
    d4fa:	8885      	ldrh	r5, [r0, #4]
    d4fc:	4603      	mov	r3, r0
    d4fe:	f100 0418 	add.w	r4, r0, #24
    d502:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d506:	4420      	add	r0, r4
    d508:	42b5      	cmp	r5, r6
    d50a:	d102      	bne.n	d512 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d50c:	2000      	movs	r0, #0
    d50e:	81d8      	strh	r0, [r3, #14]
    d510:	bd70      	pop	{r4, r5, r6, pc}
    d512:	8804      	ldrh	r4, [r0, #0]
    d514:	895d      	ldrh	r5, [r3, #10]
    d516:	7cde      	ldrb	r6, [r3, #19]
    d518:	1b64      	subs	r4, r4, r5
    d51a:	4435      	add	r5, r6
    d51c:	4428      	add	r0, r5
    d51e:	880d      	ldrh	r5, [r1, #0]
    d520:	b2a4      	uxth	r4, r4
    d522:	1c80      	adds	r0, r0, #2
    d524:	42a5      	cmp	r5, r4
    d526:	d900      	bls.n	d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d528:	800c      	strh	r4, [r1, #0]
    d52a:	895c      	ldrh	r4, [r3, #10]
    d52c:	b124      	cbz	r4, d538 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d52e:	2400      	movs	r4, #0
    d530:	7014      	strb	r4, [r2, #0]
    d532:	8809      	ldrh	r1, [r1, #0]
    d534:	81d9      	strh	r1, [r3, #14]
    d536:	bd70      	pop	{r4, r5, r6, pc}
    d538:	2401      	movs	r4, #1
    d53a:	e7f9      	b.n	d530 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d53c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d540:	461d      	mov	r5, r3
    d542:	4616      	mov	r6, r2
    d544:	9f06      	ldr	r7, [sp, #24]
    d546:	460b      	mov	r3, r1
    d548:	4604      	mov	r4, r0
    d54a:	463a      	mov	r2, r7
    d54c:	4629      	mov	r1, r5
    d54e:	4630      	mov	r0, r6
    d550:	f000 f839 	bl	d5c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d554:	4283      	cmp	r3, r0
    d556:	d201      	bcs.n	d55c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d558:	219e      	movs	r1, #158	; 0x9e
    d55a:	e012      	b.n	d582 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d55c:	07a0      	lsls	r0, r4, #30
    d55e:	d001      	beq.n	d564 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d560:	219f      	movs	r1, #159	; 0x9f
    d562:	e00e      	b.n	d582 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d564:	2218      	movs	r2, #24
    d566:	2100      	movs	r1, #0
    d568:	4620      	mov	r0, r4
    d56a:	f003 fcf6 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d56e:	19a8      	adds	r0, r5, r6
    d570:	1d40      	adds	r0, r0, #5
    d572:	4378      	muls	r0, r7
    d574:	b280      	uxth	r0, r0
    d576:	74e5      	strb	r5, [r4, #19]
    d578:	8060      	strh	r0, [r4, #2]
    d57a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d57e:	d903      	bls.n	d588 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d580:	21a4      	movs	r1, #164	; 0xa4
    d582:	2014      	movs	r0, #20
    d584:	f7f3 fa04 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d588:	8026      	strh	r6, [r4, #0]
    d58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d58e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d58e:	b570      	push	{r4, r5, r6, lr}
    d590:	460b      	mov	r3, r1
    d592:	4604      	mov	r4, r0
    d594:	f100 0118 	add.w	r1, r0, #24
    d598:	8902      	ldrh	r2, [r0, #8]
    d59a:	8880      	ldrh	r0, [r0, #4]
    d59c:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5a0:	440d      	add	r5, r1
    d5a2:	4282      	cmp	r2, r0
    d5a4:	d101      	bne.n	d5aa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5a6:	2000      	movs	r0, #0
    d5a8:	bd70      	pop	{r4, r5, r6, pc}
    d5aa:	b123      	cbz	r3, d5b6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5ac:	7ce2      	ldrb	r2, [r4, #19]
    d5ae:	1ca9      	adds	r1, r5, #2
    d5b0:	4618      	mov	r0, r3
    d5b2:	f003 fc58 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5b6:	882d      	ldrh	r5, [r5, #0]
    d5b8:	f104 0108 	add.w	r1, r4, #8
    d5bc:	4620      	mov	r0, r4
    d5be:	f7ff fe48 	bl	d252 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5c2:	4628      	mov	r0, r5
    d5c4:	bd70      	pop	{r4, r5, r6, pc}

0000d5c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5c6:	4401      	add	r1, r0
    d5c8:	1d49      	adds	r1, r1, #5
    d5ca:	4351      	muls	r1, r2
    d5cc:	b28a      	uxth	r2, r1
    d5ce:	2100      	movs	r1, #0
    d5d0:	2845      	cmp	r0, #69	; 0x45
    d5d2:	d202      	bcs.n	d5da <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d5d4:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d5d8:	b281      	uxth	r1, r0
    d5da:	3218      	adds	r2, #24
    d5dc:	1850      	adds	r0, r2, r1
    d5de:	b280      	uxth	r0, r0
    d5e0:	4770      	bx	lr

0000d5e2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d5e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d5e6:	4688      	mov	r8, r1
    d5e8:	88c1      	ldrh	r1, [r0, #6]
    d5ea:	4604      	mov	r4, r0
    d5ec:	8900      	ldrh	r0, [r0, #8]
    d5ee:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d5f2:	f104 0518 	add.w	r5, r4, #24
    d5f6:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d5fa:	eb05 0906 	add.w	r9, r5, r6
    d5fe:	f7ff fe49 	bl	d294 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d602:	2200      	movs	r2, #0
    d604:	b998      	cbnz	r0, d62e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d606:	8820      	ldrh	r0, [r4, #0]
    d608:	2845      	cmp	r0, #69	; 0x45
    d60a:	d200      	bcs.n	d60e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d60c:	2045      	movs	r0, #69	; 0x45
    d60e:	42b7      	cmp	r7, r6
    d610:	d906      	bls.n	d620 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d612:	7ce3      	ldrb	r3, [r4, #19]
    d614:	1bb9      	subs	r1, r7, r6
    d616:	1ac9      	subs	r1, r1, r3
    d618:	1f49      	subs	r1, r1, #5
    d61a:	4281      	cmp	r1, r0
    d61c:	da00      	bge.n	d620 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d61e:	4608      	mov	r0, r1
    d620:	89a1      	ldrh	r1, [r4, #12]
    d622:	b111      	cbz	r1, d62a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d624:	f8b9 3000 	ldrh.w	r3, [r9]
    d628:	1ac0      	subs	r0, r0, r3
    d62a:	4540      	cmp	r0, r8
    d62c:	da03      	bge.n	d636 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d62e:	8222      	strh	r2, [r4, #16]
    d630:	2000      	movs	r0, #0
    d632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d636:	7ce0      	ldrb	r0, [r4, #19]
    d638:	4429      	add	r1, r5
    d63a:	1d40      	adds	r0, r0, #5
    d63c:	4430      	add	r0, r6
    d63e:	4408      	add	r0, r1
    d640:	f8a4 8010 	strh.w	r8, [r4, #16]
    d644:	1ec0      	subs	r0, r0, #3
    d646:	e7f4      	b.n	d632 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d648 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d648:	b570      	push	{r4, r5, r6, lr}
    d64a:	2300      	movs	r3, #0
    d64c:	f1a1 0208 	sub.w	r2, r1, #8
    d650:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d654:	42a2      	cmp	r2, r4
    d656:	d304      	bcc.n	d662 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d658:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d65c:	2015      	movs	r0, #21
    d65e:	f7f3 f997 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d662:	6802      	ldr	r2, [r0, #0]
    d664:	b90a      	cbnz	r2, d66a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d666:	e01e      	b.n	d6a6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d668:	4610      	mov	r0, r2
    d66a:	6802      	ldr	r2, [r0, #0]
    d66c:	8893      	ldrh	r3, [r2, #4]
    d66e:	428b      	cmp	r3, r1
    d670:	d002      	beq.n	d678 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d672:	6813      	ldr	r3, [r2, #0]
    d674:	2b00      	cmp	r3, #0
    d676:	d1f7      	bne.n	d668 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d678:	8894      	ldrh	r4, [r2, #4]
    d67a:	4613      	mov	r3, r2
    d67c:	428c      	cmp	r4, r1
    d67e:	d101      	bne.n	d684 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d680:	6811      	ldr	r1, [r2, #0]
    d682:	e00d      	b.n	d6a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d684:	f101 0508 	add.w	r5, r1, #8
    d688:	b2ae      	uxth	r6, r5
    d68a:	2500      	movs	r5, #0
    d68c:	42b4      	cmp	r4, r6
    d68e:	d309      	bcc.n	d6a4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d690:	1a64      	subs	r4, r4, r1
    d692:	4411      	add	r1, r2
    d694:	600d      	str	r5, [r1, #0]
    d696:	808c      	strh	r4, [r1, #4]
    d698:	6802      	ldr	r2, [r0, #0]
    d69a:	6812      	ldr	r2, [r2, #0]
    d69c:	6002      	str	r2, [r0, #0]
    d69e:	600a      	str	r2, [r1, #0]
    d6a0:	6001      	str	r1, [r0, #0]
    d6a2:	e000      	b.n	d6a6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6a4:	2300      	movs	r3, #0
    d6a6:	4618      	mov	r0, r3
    d6a8:	bd70      	pop	{r4, r5, r6, pc}

0000d6aa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6aa:	b510      	push	{r4, lr}
    d6ac:	000c      	movs	r4, r1
    d6ae:	d004      	beq.n	d6ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6b0:	2c08      	cmp	r4, #8
    d6b2:	d207      	bcs.n	d6c4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6b4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d6b8:	e00a      	b.n	d6d0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6ba:	b108      	cbz	r0, d6c0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6bc:	2100      	movs	r1, #0
    d6be:	6001      	str	r1, [r0, #0]
    d6c0:	2000      	movs	r0, #0
    d6c2:	bd10      	pop	{r4, pc}
    d6c4:	b158      	cbz	r0, d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6c6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6ca:	d304      	bcc.n	d6d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d6cc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d6d0:	2015      	movs	r0, #21
    d6d2:	f7f3 f95d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6d6:	b2a1      	uxth	r1, r4
    d6d8:	6800      	ldr	r0, [r0, #0]
    d6da:	f000 f814 	bl	d706 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d6de:	1d20      	adds	r0, r4, #4
    d6e0:	bd10      	pop	{r4, pc}

0000d6e2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d6e2:	2100      	movs	r1, #0
    d6e4:	6802      	ldr	r2, [r0, #0]
    d6e6:	e003      	b.n	d6f0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d6e8:	8893      	ldrh	r3, [r2, #4]
    d6ea:	6812      	ldr	r2, [r2, #0]
    d6ec:	4419      	add	r1, r3
    d6ee:	b289      	uxth	r1, r1
    d6f0:	2a00      	cmp	r2, #0
    d6f2:	d1f9      	bne.n	d6e8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d6f4:	f000 b807 	b.w	d706 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d6f8 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d6f8:	2300      	movs	r3, #0
    d6fa:	600b      	str	r3, [r1, #0]
    d6fc:	808a      	strh	r2, [r1, #4]
    d6fe:	6802      	ldr	r2, [r0, #0]
    d700:	600a      	str	r2, [r1, #0]
    d702:	6001      	str	r1, [r0, #0]
    d704:	4770      	bx	lr
    d706:	2300      	movs	r3, #0
    d708:	6043      	str	r3, [r0, #4]
    d70a:	1d02      	adds	r2, r0, #4
    d70c:	8101      	strh	r1, [r0, #8]
    d70e:	6002      	str	r2, [r0, #0]
    d710:	4770      	bx	lr
    d712:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d716:	8159      	strh	r1, [r3, #10]
    d718:	4611      	mov	r1, r2
    d71a:	f000 b814 	b.w	d746 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d71e:	b170      	cbz	r0, d73e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d720:	7882      	ldrb	r2, [r0, #2]
    d722:	fbb1 f3f2 	udiv	r3, r1, r2
    d726:	fb02 1213 	mls	r2, r2, r3, r1
    d72a:	b2d2      	uxtb	r2, r2
    d72c:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d730:	895b      	ldrh	r3, [r3, #10]
    d732:	428b      	cmp	r3, r1
    d734:	d101      	bne.n	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d736:	4610      	mov	r0, r2
    d738:	4770      	bx	lr
    d73a:	78c3      	ldrb	r3, [r0, #3]
    d73c:	b10b      	cbz	r3, d742 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d73e:	20ff      	movs	r0, #255	; 0xff
    d740:	4770      	bx	lr
    d742:	f7f3 bc07 	b.w	f54 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d746:	8802      	ldrh	r2, [r0, #0]
    d748:	fb01 0102 	mla	r1, r1, r2, r0
    d74c:	7880      	ldrb	r0, [r0, #2]
    d74e:	220a      	movs	r2, #10
    d750:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d754:	4408      	add	r0, r1
    d756:	4770      	bx	lr

0000d758 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d758:	b51c      	push	{r2, r3, r4, lr}
    d75a:	4604      	mov	r4, r0
    d75c:	2000      	movs	r0, #0
    d75e:	9001      	str	r0, [sp, #4]
    d760:	9000      	str	r0, [sp, #0]
    d762:	f88d 4006 	strb.w	r4, [sp, #6]
    d766:	e00a      	b.n	d77e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d768:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d76c:	4621      	mov	r1, r4
    d76e:	f7f3 fcdf 	bl	1130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d772:	b120      	cbz	r0, d77e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d774:	f240 217e 	movw	r1, #638	; 0x27e
    d778:	2017      	movs	r0, #23
    d77a:	f7f3 f909 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d77e:	4668      	mov	r0, sp
    d780:	f7f3 fc86 	bl	1090 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d784:	2800      	cmp	r0, #0
    d786:	d0ef      	beq.n	d768 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d788:	bd1c      	pop	{r2, r3, r4, pc}

0000d78a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d78a:	b570      	push	{r4, r5, r6, lr}
    d78c:	460e      	mov	r6, r1
    d78e:	461d      	mov	r5, r3
    d790:	4611      	mov	r1, r2
    d792:	f000 f813 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d796:	4604      	mov	r4, r0
    d798:	4629      	mov	r1, r5
    d79a:	4630      	mov	r0, r6
    d79c:	f000 f804 	bl	d7a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7a0:	4420      	add	r0, r4
    d7a2:	1d00      	adds	r0, r0, #4
    d7a4:	b280      	uxth	r0, r0
    d7a6:	bd70      	pop	{r4, r5, r6, pc}
    d7a8:	b510      	push	{r4, lr}
    d7aa:	460a      	mov	r2, r1
    d7ac:	2109      	movs	r1, #9
    d7ae:	f7ff ff0a 	bl	d5c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7b2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7b6:	1cc0      	adds	r0, r0, #3
    d7b8:	4008      	ands	r0, r1
    d7ba:	bd10      	pop	{r4, pc}
    d7bc:	b510      	push	{r4, lr}
    d7be:	460a      	mov	r2, r1
    d7c0:	210a      	movs	r1, #10
    d7c2:	f7ff ff00 	bl	d5c6 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ca:	1cc0      	adds	r0, r0, #3
    d7cc:	4008      	ands	r0, r1
    d7ce:	bd10      	pop	{r4, pc}
    d7d0:	b109      	cbz	r1, d7d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d7d2:	2100      	movs	r1, #0
    d7d4:	e000      	b.n	d7d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d7d6:	2102      	movs	r1, #2
    d7d8:	1843      	adds	r3, r0, r1
    d7da:	7d1a      	ldrb	r2, [r3, #20]
    d7dc:	2a02      	cmp	r2, #2
    d7de:	d008      	beq.n	d7f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d7e0:	7d5b      	ldrb	r3, [r3, #21]
    d7e2:	2b02      	cmp	r3, #2
    d7e4:	d009      	beq.n	d7fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d7e6:	2a03      	cmp	r2, #3
    d7e8:	d003      	beq.n	d7f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d7ea:	2b03      	cmp	r3, #3
    d7ec:	d005      	beq.n	d7fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d7ee:	2000      	movs	r0, #0
    d7f0:	4770      	bx	lr
    d7f2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7f6:	8b00      	ldrh	r0, [r0, #24]
    d7f8:	4770      	bx	lr
    d7fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7fe:	8b40      	ldrh	r0, [r0, #26]
    d800:	4770      	bx	lr
    d802:	b109      	cbz	r1, d808 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d804:	2100      	movs	r1, #0
    d806:	e000      	b.n	d80a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d808:	2102      	movs	r1, #2
    d80a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d80e:	8b01      	ldrh	r1, [r0, #24]
    d810:	b911      	cbnz	r1, d818 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d812:	8b40      	ldrh	r0, [r0, #26]
    d814:	2800      	cmp	r0, #0
    d816:	d000      	beq.n	d81a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d818:	2001      	movs	r0, #1
    d81a:	4770      	bx	lr
    d81c:	b538      	push	{r3, r4, r5, lr}
    d81e:	7883      	ldrb	r3, [r0, #2]
    d820:	f88d 3000 	strb.w	r3, [sp]
    d824:	9b00      	ldr	r3, [sp, #0]
    d826:	9300      	str	r3, [sp, #0]
    d828:	f89d 3000 	ldrb.w	r3, [sp]
    d82c:	b95b      	cbnz	r3, d846 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d82e:	2400      	movs	r4, #0
    d830:	b10a      	cbz	r2, d836 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d832:	2300      	movs	r3, #0
    d834:	e000      	b.n	d838 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d836:	2302      	movs	r3, #2
    d838:	18c2      	adds	r2, r0, r3
    d83a:	7d15      	ldrb	r5, [r2, #20]
    d83c:	2d02      	cmp	r5, #2
    d83e:	d004      	beq.n	d84a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d840:	7d52      	ldrb	r2, [r2, #21]
    d842:	2a02      	cmp	r2, #2
    d844:	d004      	beq.n	d850 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d846:	2000      	movs	r0, #0
    d848:	bd38      	pop	{r3, r4, r5, pc}
    d84a:	461a      	mov	r2, r3
    d84c:	1c5b      	adds	r3, r3, #1
    d84e:	e000      	b.n	d852 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d850:	1c5a      	adds	r2, r3, #1
    d852:	b179      	cbz	r1, d874 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d854:	18c5      	adds	r5, r0, r3
    d856:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d85a:	752c      	strb	r4, [r5, #20]
    d85c:	831c      	strh	r4, [r3, #24]
    d85e:	2303      	movs	r3, #3
    d860:	1884      	adds	r4, r0, r2
    d862:	7523      	strb	r3, [r4, #20]
    d864:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d868:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d86c:	685b      	ldr	r3, [r3, #4]
    d86e:	600b      	str	r3, [r1, #0]
    d870:	8b00      	ldrh	r0, [r0, #24]
    d872:	8088      	strh	r0, [r1, #4]
    d874:	2001      	movs	r0, #1
    d876:	bd38      	pop	{r3, r4, r5, pc}
    d878:	b510      	push	{r4, lr}
    d87a:	b109      	cbz	r1, d880 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d87c:	2100      	movs	r1, #0
    d87e:	e000      	b.n	d882 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d880:	2102      	movs	r1, #2
    d882:	1843      	adds	r3, r0, r1
    d884:	7d1c      	ldrb	r4, [r3, #20]
    d886:	4294      	cmp	r4, r2
    d888:	d103      	bne.n	d892 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d88a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d88e:	8b00      	ldrh	r0, [r0, #24]
    d890:	bd10      	pop	{r4, pc}
    d892:	7d5b      	ldrb	r3, [r3, #21]
    d894:	4293      	cmp	r3, r2
    d896:	d103      	bne.n	d8a0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d898:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d89c:	8b40      	ldrh	r0, [r0, #26]
    d89e:	bd10      	pop	{r4, pc}
    d8a0:	2000      	movs	r0, #0
    d8a2:	bd10      	pop	{r4, pc}
    d8a4:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d8a8:	d201      	bcs.n	d8ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d8aa:	0841      	lsrs	r1, r0, #1
    d8ac:	e000      	b.n	d8b0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d8ae:	21ff      	movs	r1, #255	; 0xff
    d8b0:	1a40      	subs	r0, r0, r1
    d8b2:	f240 6172 	movw	r1, #1650	; 0x672
    d8b6:	4288      	cmp	r0, r1
    d8b8:	db00      	blt.n	d8bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d8ba:	4608      	mov	r0, r1
    d8bc:	b280      	uxth	r0, r0
    d8be:	4770      	bx	lr

0000d8c0 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d8c0:	2101      	movs	r1, #1
    d8c2:	f7ff bf85 	b.w	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8ca:	4606      	mov	r6, r0
    d8cc:	f342 0780 	sbfx	r7, r2, #2, #1
    d8d0:	7848      	ldrb	r0, [r1, #1]
    d8d2:	460c      	mov	r4, r1
    d8d4:	f022 0504 	bic.w	r5, r2, #4
    d8d8:	1c7f      	adds	r7, r7, #1
    d8da:	b100      	cbz	r0, d8de <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d8dc:	b90d      	cbnz	r5, d8e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d8de:	4328      	orrs	r0, r5
    d8e0:	d104      	bne.n	d8ec <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d8e2:	b145      	cbz	r5, d8f6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d8e4:	2100      	movs	r1, #0
    d8e6:	4620      	mov	r0, r4
    d8e8:	f7f3 fd42 	bl	1370 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d8ec:	20ff      	movs	r0, #255	; 0xff
    d8ee:	70a0      	strb	r0, [r4, #2]
    d8f0:	b11f      	cbz	r7, d8fa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d8f2:	2000      	movs	r0, #0
    d8f4:	e002      	b.n	d8fc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d8f6:	2101      	movs	r1, #1
    d8f8:	e7f5      	b.n	d8e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d8fa:	2002      	movs	r0, #2
    d8fc:	1821      	adds	r1, r4, r0
    d8fe:	7d09      	ldrb	r1, [r1, #20]
    d900:	2903      	cmp	r1, #3
    d902:	d102      	bne.n	d90a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d904:	2d02      	cmp	r5, #2
    d906:	d000      	beq.n	d90a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d908:	1c40      	adds	r0, r0, #1
    d90a:	1822      	adds	r2, r4, r0
    d90c:	2101      	movs	r1, #1
    d90e:	7511      	strb	r1, [r2, #20]
    d910:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d914:	2200      	movs	r2, #0
    d916:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d91a:	830a      	strh	r2, [r1, #24]
    d91c:	6840      	ldr	r0, [r0, #4]
    d91e:	70a2      	strb	r2, [r4, #2]
    d920:	4631      	mov	r1, r6
    d922:	f362 010f 	bfi	r1, r2, #0, #16
    d926:	e9c6 0100 	strd	r0, r1, [r6]
    d92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d92e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d932:	461e      	mov	r6, r3
    d934:	4613      	mov	r3, r2
    d936:	4604      	mov	r4, r0
    d938:	b109      	cbz	r1, d93e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d93a:	2000      	movs	r0, #0
    d93c:	e000      	b.n	d940 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d93e:	2002      	movs	r0, #2
    d940:	21ff      	movs	r1, #255	; 0xff
    d942:	70a1      	strb	r1, [r4, #2]
    d944:	1821      	adds	r1, r4, r0
    d946:	7d0a      	ldrb	r2, [r1, #20]
    d948:	2a01      	cmp	r2, #1
    d94a:	d003      	beq.n	d954 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d94c:	7d49      	ldrb	r1, [r1, #21]
    d94e:	2901      	cmp	r1, #1
    d950:	d10c      	bne.n	d96c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d952:	1c40      	adds	r0, r0, #1
    d954:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d958:	2700      	movs	r7, #0
    d95a:	8b29      	ldrh	r1, [r5, #24]
    d95c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d960:	198a      	adds	r2, r1, r6
    d962:	4562      	cmp	r2, ip
    d964:	d905      	bls.n	d972 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d966:	4420      	add	r0, r4
    d968:	832f      	strh	r7, [r5, #24]
    d96a:	7507      	strb	r7, [r0, #20]
    d96c:	2000      	movs	r0, #0
    d96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d972:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d976:	4632      	mov	r2, r6
    d978:	6840      	ldr	r0, [r0, #4]
    d97a:	4408      	add	r0, r1
    d97c:	4619      	mov	r1, r3
    d97e:	f003 fa72 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d982:	8b28      	ldrh	r0, [r5, #24]
    d984:	4430      	add	r0, r6
    d986:	8328      	strh	r0, [r5, #24]
    d988:	70a7      	strb	r7, [r4, #2]
    d98a:	2001      	movs	r0, #1
    d98c:	e7ef      	b.n	d96e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d98e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d98e:	b510      	push	{r4, lr}
    d990:	2101      	movs	r1, #1
    d992:	f7ff ff36 	bl	d802 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d996:	2800      	cmp	r0, #0
    d998:	d000      	beq.n	d99c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d99a:	2001      	movs	r0, #1
    d99c:	bd10      	pop	{r4, pc}

0000d99e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d99e:	2201      	movs	r2, #1
    d9a0:	f7ff bf3c 	b.w	d81c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d9a4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d9a4:	2200      	movs	r2, #0
    d9a6:	f7ff bf39 	b.w	d81c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d9aa <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d9aa:	b510      	push	{r4, lr}
    d9ac:	2100      	movs	r1, #0
    d9ae:	f7ff ff28 	bl	d802 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d9b2:	2800      	cmp	r0, #0
    d9b4:	d000      	beq.n	d9b8 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d9b6:	2001      	movs	r0, #1
    d9b8:	bd10      	pop	{r4, pc}

0000d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d9ba:	b570      	push	{r4, r5, r6, lr}
    d9bc:	b109      	cbz	r1, d9c2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d9be:	2300      	movs	r3, #0
    d9c0:	e000      	b.n	d9c4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d9c2:	2302      	movs	r3, #2
    d9c4:	21ff      	movs	r1, #255	; 0xff
    d9c6:	7081      	strb	r1, [r0, #2]
    d9c8:	18c1      	adds	r1, r0, r3
    d9ca:	2402      	movs	r4, #2
    d9cc:	7d0d      	ldrb	r5, [r1, #20]
    d9ce:	2d01      	cmp	r5, #1
    d9d0:	d007      	beq.n	d9e2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d9d2:	7d4d      	ldrb	r5, [r1, #21]
    d9d4:	2d01      	cmp	r5, #1
    d9d6:	d009      	beq.n	d9ec <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d9d8:	f44f 718b 	mov.w	r1, #278	; 0x116
    d9dc:	2009      	movs	r0, #9
    d9de:	f7f2 ffd7 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d9e6:	831a      	strh	r2, [r3, #24]
    d9e8:	750c      	strb	r4, [r1, #20]
    d9ea:	e003      	b.n	d9f4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d9ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d9f0:	835a      	strh	r2, [r3, #26]
    d9f2:	754c      	strb	r4, [r1, #21]
    d9f4:	2100      	movs	r1, #0
    d9f6:	7081      	strb	r1, [r0, #2]
    d9f8:	bd70      	pop	{r4, r5, r6, pc}

0000d9fa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d9fa:	2101      	movs	r1, #1
    d9fc:	7001      	strb	r1, [r0, #0]
    d9fe:	4770      	bx	lr

0000da00 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    da00:	2201      	movs	r2, #1
    da02:	4611      	mov	r1, r2
    da04:	f7ff bf38 	b.w	d878 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000da08 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    da08:	2201      	movs	r2, #1
    da0a:	2100      	movs	r1, #0
    da0c:	f7ff bf34 	b.w	d878 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000da10 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    da10:	2100      	movs	r1, #0
    da12:	f7ff bedd 	b.w	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    da16:	2800      	cmp	r0, #0
    da18:	db09      	blt.n	da2e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    da1a:	f000 021f 	and.w	r2, r0, #31
    da1e:	2101      	movs	r1, #1
    da20:	4091      	lsls	r1, r2
    da22:	0940      	lsrs	r0, r0, #5
    da24:	0080      	lsls	r0, r0, #2
    da26:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da2a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da2e:	4770      	bx	lr
    da30:	2800      	cmp	r0, #0
    da32:	db0d      	blt.n	da50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    da34:	f000 021f 	and.w	r2, r0, #31
    da38:	2101      	movs	r1, #1
    da3a:	4091      	lsls	r1, r2
    da3c:	0940      	lsrs	r0, r0, #5
    da3e:	0080      	lsls	r0, r0, #2
    da40:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da44:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    da48:	f3bf 8f4f 	dsb	sy
    da4c:	f3bf 8f6f 	isb	sy
    da50:	4770      	bx	lr
    da52:	b510      	push	{r4, lr}
    da54:	200e      	movs	r0, #14
    da56:	f7ff ffeb 	bl	da30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    da5a:	200e      	movs	r0, #14
    da5c:	f7ff ffdb 	bl	da16 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    da60:	200f      	movs	r0, #15
    da62:	f7ff ffe5 	bl	da30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    da66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da6a:	200f      	movs	r0, #15
    da6c:	f7ff bfd3 	b.w	da16 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    da70:	2800      	cmp	r0, #0
    da72:	db09      	blt.n	da88 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    da74:	f000 021f 	and.w	r2, r0, #31
    da78:	2101      	movs	r1, #1
    da7a:	4091      	lsls	r1, r2
    da7c:	0940      	lsrs	r0, r0, #5
    da7e:	0080      	lsls	r0, r0, #2
    da80:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    da84:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    da88:	4770      	bx	lr
    da8a:	5840      	ldr	r0, [r0, r1]
    da8c:	2800      	cmp	r0, #0
    da8e:	d000      	beq.n	da92 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    da90:	2001      	movs	r0, #1
    da92:	4770      	bx	lr

0000da94 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    da94:	b510      	push	{r4, lr}
    da96:	4604      	mov	r4, r0
    da98:	4620      	mov	r0, r4
    da9a:	f7f3 fd71 	bl	1580 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    da9e:	2811      	cmp	r0, #17
    daa0:	d0fa      	beq.n	da98 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    daa2:	bd10      	pop	{r4, pc}

0000daa4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    daa4:	b510      	push	{r4, lr}
    daa6:	f7ff fff5 	bl	da94 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    daaa:	2800      	cmp	r0, #0
    daac:	d003      	beq.n	dab6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    daae:	21a9      	movs	r1, #169	; 0xa9
    dab0:	201d      	movs	r0, #29
    dab2:	f7f2 ff6d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dab6:	bd10      	pop	{r4, pc}

0000dab8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dab8:	f7f3 bec0 	b.w	183c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dabc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dabc:	f7f3 beae 	b.w	181c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dac0 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dac0:	b510      	push	{r4, lr}
    dac2:	4050      	eors	r0, r2
    dac4:	780a      	ldrb	r2, [r1, #0]
    dac6:	781c      	ldrb	r4, [r3, #0]
    dac8:	4062      	eors	r2, r4
    daca:	4410      	add	r0, r2
    dacc:	784a      	ldrb	r2, [r1, #1]
    dace:	785c      	ldrb	r4, [r3, #1]
    dad0:	4062      	eors	r2, r4
    dad2:	4410      	add	r0, r2
    dad4:	788a      	ldrb	r2, [r1, #2]
    dad6:	789c      	ldrb	r4, [r3, #2]
    dad8:	4062      	eors	r2, r4
    dada:	4410      	add	r0, r2
    dadc:	78ca      	ldrb	r2, [r1, #3]
    dade:	78dc      	ldrb	r4, [r3, #3]
    dae0:	4062      	eors	r2, r4
    dae2:	4410      	add	r0, r2
    dae4:	790a      	ldrb	r2, [r1, #4]
    dae6:	791c      	ldrb	r4, [r3, #4]
    dae8:	7949      	ldrb	r1, [r1, #5]
    daea:	4062      	eors	r2, r4
    daec:	4410      	add	r0, r2
    daee:	795a      	ldrb	r2, [r3, #5]
    daf0:	4051      	eors	r1, r2
    daf2:	42c1      	cmn	r1, r0
    daf4:	d101      	bne.n	dafa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    daf6:	2001      	movs	r0, #1
    daf8:	bd10      	pop	{r4, pc}
    dafa:	2000      	movs	r0, #0
    dafc:	bd10      	pop	{r4, pc}

0000dafe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dafe:	b510      	push	{r4, lr}
    db00:	2900      	cmp	r1, #0
    db02:	4604      	mov	r4, r0
    db04:	f04f 0106 	mov.w	r1, #6
    db08:	d002      	beq.n	db10 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    db0a:	f7f2 ffe3 	bl	ad4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    db0e:	e001      	b.n	db14 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    db10:	f7f2 ffee 	bl	af0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    db14:	7960      	ldrb	r0, [r4, #5]
    db16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    db1a:	7160      	strb	r0, [r4, #5]
    db1c:	bd10      	pop	{r4, pc}

0000db1e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    db1e:	4770      	bx	lr

0000db20 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    db20:	b530      	push	{r4, r5, lr}
    db22:	460c      	mov	r4, r1
    db24:	4605      	mov	r5, r0
    db26:	b08d      	sub	sp, #52	; 0x34
    db28:	f04f 0103 	mov.w	r1, #3
    db2c:	f104 0003 	add.w	r0, r4, #3
    db30:	b112      	cbz	r2, db38 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    db32:	f7f2 ffcf 	bl	ad4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    db36:	e001      	b.n	db3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    db38:	f7f2 ffda 	bl	af0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    db3c:	7960      	ldrb	r0, [r4, #5]
    db3e:	220d      	movs	r2, #13
    db40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    db44:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    db48:	7160      	strb	r0, [r4, #5]
    db4a:	2100      	movs	r1, #0
    db4c:	a804      	add	r0, sp, #16
    db4e:	f003 fa04 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    db52:	78e0      	ldrb	r0, [r4, #3]
    db54:	f88d 001f 	strb.w	r0, [sp, #31]
    db58:	7920      	ldrb	r0, [r4, #4]
    db5a:	f88d 001e 	strb.w	r0, [sp, #30]
    db5e:	7960      	ldrb	r0, [r4, #5]
    db60:	f88d 001d 	strb.w	r0, [sp, #29]
    db64:	2210      	movs	r2, #16
    db66:	4629      	mov	r1, r5
    db68:	4668      	mov	r0, sp
    db6a:	f003 f97c 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db6e:	4668      	mov	r0, sp
    db70:	f7ff ff98 	bl	daa4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    db74:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    db78:	7020      	strb	r0, [r4, #0]
    db7a:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    db7e:	7060      	strb	r0, [r4, #1]
    db80:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    db84:	70a0      	strb	r0, [r4, #2]
    db86:	b00d      	add	sp, #52	; 0x34
    db88:	bd30      	pop	{r4, r5, pc}

0000db8a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    db8a:	f7f4 b9c1 	b.w	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    db8e:	07c1      	lsls	r1, r0, #31
    db90:	d001      	beq.n	db96 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    db92:	2001      	movs	r0, #1
    db94:	4770      	bx	lr
    db96:	0780      	lsls	r0, r0, #30
    db98:	d501      	bpl.n	db9e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    db9a:	2002      	movs	r0, #2
    db9c:	4770      	bx	lr
    db9e:	2000      	movs	r0, #0
    dba0:	4770      	bx	lr
    dba2:	b510      	push	{r4, lr}
    dba4:	2801      	cmp	r0, #1
    dba6:	d008      	beq.n	dbba <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dba8:	2802      	cmp	r0, #2
    dbaa:	d004      	beq.n	dbb6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    dbac:	f240 4121 	movw	r1, #1057	; 0x421
    dbb0:	2006      	movs	r0, #6
    dbb2:	f7f2 feed 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbb6:	2001      	movs	r0, #1
    dbb8:	bd10      	pop	{r4, pc}
    dbba:	2000      	movs	r0, #0
    dbbc:	bd10      	pop	{r4, pc}
    dbbe:	2900      	cmp	r1, #0
    dbc0:	d004      	beq.n	dbcc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    dbc2:	2801      	cmp	r0, #1
    dbc4:	d003      	beq.n	dbce <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dbc6:	2901      	cmp	r1, #1
    dbc8:	d001      	beq.n	dbce <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dbca:	2002      	movs	r0, #2
    dbcc:	4770      	bx	lr
    dbce:	2001      	movs	r0, #1
    dbd0:	4770      	bx	lr
    dbd2:	f7ff bc90 	b.w	d4f6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dbd6 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dbd6:	2101      	movs	r1, #1
    dbd8:	f7f4 bcb8 	b.w	254c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000dbdc <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dbdc:	b510      	push	{r4, lr}
    dbde:	f002 fde3 	bl	107a8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dbe2:	b118      	cbz	r0, dbec <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbe8:	f7f9 bd08 	b.w	75fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dbec:	20ff      	movs	r0, #255	; 0xff
    dbee:	bd10      	pop	{r4, pc}

0000dbf0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dbf0:	b510      	push	{r4, lr}
    dbf2:	f7f4 fcd7 	bl	25a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dbf6:	2808      	cmp	r0, #8
    dbf8:	d003      	beq.n	dc02 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbfe:	f7f4 bcbd 	b.w	257c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc02:	bd10      	pop	{r4, pc}

0000dc04 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dc04:	b510      	push	{r4, lr}
    dc06:	f7f4 fccd 	bl	25a4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dc0a:	2808      	cmp	r0, #8
    dc0c:	d007      	beq.n	dc1e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc0e:	f7f4 fcb5 	bl	257c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dc12:	2808      	cmp	r0, #8
    dc14:	d003      	beq.n	dc1e <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dc16:	f7f4 fd27 	bl	2668 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x128>
    dc1a:	2001      	movs	r0, #1
    dc1c:	bd10      	pop	{r4, pc}
    dc1e:	2000      	movs	r0, #0
    dc20:	bd10      	pop	{r4, pc}

0000dc22 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dc22:	b570      	push	{r4, r5, r6, lr}
    dc24:	460e      	mov	r6, r1
    dc26:	b08c      	sub	sp, #48	; 0x30
    dc28:	4614      	mov	r4, r2
    dc2a:	4601      	mov	r1, r0
    dc2c:	461d      	mov	r5, r3
    dc2e:	2210      	movs	r2, #16
    dc30:	4668      	mov	r0, sp
    dc32:	f000 f929 	bl	de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc36:	2210      	movs	r2, #16
    dc38:	4631      	mov	r1, r6
    dc3a:	a804      	add	r0, sp, #16
    dc3c:	f000 f924 	bl	de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc40:	4668      	mov	r0, sp
    dc42:	f7ff ff2f 	bl	daa4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dc46:	a908      	add	r1, sp, #32
    dc48:	f04f 0210 	mov.w	r2, #16
    dc4c:	4628      	mov	r0, r5
    dc4e:	b11c      	cbz	r4, dc58 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dc50:	f000 f91a 	bl	de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dc54:	b00c      	add	sp, #48	; 0x30
    dc56:	bd70      	pop	{r4, r5, r6, pc}
    dc58:	f003 f905 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dc5c:	e7fa      	b.n	dc54 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dc5e:	b510      	push	{r4, lr}
    dc60:	460c      	mov	r4, r1
    dc62:	2100      	movs	r1, #0
    dc64:	f7f3 f9c2 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dc68:	6060      	str	r0, [r4, #4]
    dc6a:	b118      	cbz	r0, dc74 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dc6c:	2001      	movs	r0, #1
    dc6e:	7020      	strb	r0, [r4, #0]
    dc70:	2000      	movs	r0, #0
    dc72:	bd10      	pop	{r4, pc}
    dc74:	2002      	movs	r0, #2
    dc76:	bd10      	pop	{r4, pc}

0000dc78 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dc78:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc7c:	4348      	muls	r0, r1
    dc7e:	4770      	bx	lr

0000dc80 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dc80:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dc84:	fbb0 f0f1 	udiv	r0, r0, r1
    dc88:	b280      	uxth	r0, r0
    dc8a:	4770      	bx	lr

0000dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dc8c:	b510      	push	{r4, lr}
    dc8e:	f1a2 0310 	sub.w	r3, r2, #16
    dc92:	290d      	cmp	r1, #13
    dc94:	d24d      	bcs.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc96:	e8df f001 	tbb	[pc, r1]
    dc9a:	0907      	.short	0x0907
    dc9c:	1d1a150e 	.word	0x1d1a150e
    dca0:	4e2c2921 	.word	0x4e2c2921
    dca4:	0048362f 	.word	0x0048362f
    dca8:	b3f2      	cbz	r2, dd28 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    dcaa:	e042      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcac:	2a06      	cmp	r2, #6
    dcae:	d03e      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcb0:	2a07      	cmp	r2, #7
    dcb2:	d03c      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcb4:	e03d      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcb6:	2a0b      	cmp	r2, #11
    dcb8:	d039      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcba:	2a0c      	cmp	r2, #12
    dcbc:	d037      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcbe:	2a0a      	cmp	r2, #10
    dcc0:	d035      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcc2:	e036      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcc4:	2a0d      	cmp	r2, #13
    dcc6:	d032      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcc8:	2a0e      	cmp	r2, #14
    dcca:	d030      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dccc:	e031      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcce:	2b0c      	cmp	r3, #12
    dcd0:	d92d      	bls.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcd2:	e02e      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcd4:	3a11      	subs	r2, #17
    dcd6:	2a0b      	cmp	r2, #11
    dcd8:	d929      	bls.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcda:	e02a      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcdc:	2b03      	cmp	r3, #3
    dcde:	d926      	bls.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dce0:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    dce4:	b1f8      	cbz	r0, dd26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    dce6:	2a1c      	cmp	r2, #28
    dce8:	d921      	bls.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcea:	e022      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcec:	2a04      	cmp	r2, #4
    dcee:	d01e      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcf0:	e01f      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcf2:	2a01      	cmp	r2, #1
    dcf4:	d01b      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcf6:	e01c      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dcf8:	2a1d      	cmp	r2, #29
    dcfa:	d018      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dcfc:	2a1e      	cmp	r2, #30
    dcfe:	d016      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd00:	2a1f      	cmp	r2, #31
    dd02:	d014      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd04:	e015      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd06:	2a20      	cmp	r2, #32
    dd08:	d011      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd0a:	2a21      	cmp	r2, #33	; 0x21
    dd0c:	d00f      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd0e:	2a22      	cmp	r2, #34	; 0x22
    dd10:	d00d      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd12:	2a23      	cmp	r2, #35	; 0x23
    dd14:	d00b      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd16:	2a24      	cmp	r2, #36	; 0x24
    dd18:	d009      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd1a:	2a25      	cmp	r2, #37	; 0x25
    dd1c:	d007      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd1e:	2a26      	cmp	r2, #38	; 0x26
    dd20:	d005      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd22:	2a2e      	cmp	r2, #46	; 0x2e
    dd24:	d003      	beq.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd26:	e004      	b.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd28:	e001      	b.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dd2a:	2a28      	cmp	r2, #40	; 0x28
    dd2c:	d101      	bne.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd2e:	2001      	movs	r0, #1
    dd30:	bd10      	pop	{r4, pc}
    dd32:	2000      	movs	r0, #0
    dd34:	bd10      	pop	{r4, pc}
    dd36:	2a0f      	cmp	r2, #15
    dd38:	d1fb      	bne.n	dd32 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dd3a:	e7f8      	b.n	dd2e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000dd3c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dd3c:	280b      	cmp	r0, #11
    dd3e:	d019      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd40:	280c      	cmp	r0, #12
    dd42:	d017      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd44:	280a      	cmp	r0, #10
    dd46:	d015      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd48:	280d      	cmp	r0, #13
    dd4a:	d013      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd4c:	280e      	cmp	r0, #14
    dd4e:	d011      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd50:	2820      	cmp	r0, #32
    dd52:	d00f      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd54:	2821      	cmp	r0, #33	; 0x21
    dd56:	d00d      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd58:	2822      	cmp	r0, #34	; 0x22
    dd5a:	d00b      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd5c:	2823      	cmp	r0, #35	; 0x23
    dd5e:	d009      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd60:	2824      	cmp	r0, #36	; 0x24
    dd62:	d007      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd64:	2825      	cmp	r0, #37	; 0x25
    dd66:	d005      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd68:	2826      	cmp	r0, #38	; 0x26
    dd6a:	d003      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd6c:	282e      	cmp	r0, #46	; 0x2e
    dd6e:	d001      	beq.n	dd74 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dd70:	2000      	movs	r0, #0
    dd72:	4770      	bx	lr
    dd74:	2001      	movs	r0, #1
    dd76:	4770      	bx	lr

0000dd78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dd78:	f011 0f0c 	tst.w	r1, #12
    dd7c:	d018      	beq.n	ddb0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dd7e:	074a      	lsls	r2, r1, #29
    dd80:	f44f 7116 	mov.w	r1, #600	; 0x258
    dd84:	2a00      	cmp	r2, #0
    dd86:	da02      	bge.n	dd8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dd88:	f04f 0210 	mov.w	r2, #16
    dd8c:	e001      	b.n	dd92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dd8e:	f04f 0240 	mov.w	r2, #64	; 0x40
    dd92:	da01      	bge.n	dd98 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dd94:	f04f 0196 	mov.w	r1, #150	; 0x96
    dd98:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dd9c:	eba0 0301 	sub.w	r3, r0, r1
    dda0:	4288      	cmp	r0, r1
    dda2:	d903      	bls.n	ddac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dda4:	fb93 f0f2 	sdiv	r0, r3, r2
    dda8:	b280      	uxth	r0, r0
    ddaa:	4770      	bx	lr
    ddac:	2000      	movs	r0, #0
    ddae:	4770      	bx	lr
    ddb0:	2902      	cmp	r1, #2
    ddb2:	d008      	beq.n	ddc6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ddb4:	2870      	cmp	r0, #112	; 0x70
    ddb6:	d9f9      	bls.n	ddac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ddb8:	3870      	subs	r0, #112	; 0x70
    ddba:	17c1      	asrs	r1, r0, #31
    ddbc:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ddc0:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    ddc4:	4770      	bx	lr
    ddc6:	283c      	cmp	r0, #60	; 0x3c
    ddc8:	d9f0      	bls.n	ddac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ddca:	383c      	subs	r0, #60	; 0x3c
    ddcc:	17c1      	asrs	r1, r0, #31
    ddce:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ddd2:	f3c0 008f 	ubfx	r0, r0, #2, #16
    ddd6:	4770      	bx	lr

0000ddd8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ddd8:	6809      	ldr	r1, [r1, #0]
    ddda:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    ddde:	4770      	bx	lr

0000dde0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dde0:	07c1      	lsls	r1, r0, #31
    dde2:	d001      	beq.n	dde8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    dde4:	2001      	movs	r0, #1
    dde6:	4770      	bx	lr
    dde8:	0781      	lsls	r1, r0, #30
    ddea:	d501      	bpl.n	ddf0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    ddec:	2002      	movs	r0, #2
    ddee:	4770      	bx	lr
    ddf0:	0740      	lsls	r0, r0, #29
    ddf2:	d501      	bpl.n	ddf8 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    ddf4:	2008      	movs	r0, #8
    ddf6:	4770      	bx	lr
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr

0000ddfc <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ddfc:	b510      	push	{r4, lr}
    ddfe:	f640 12c4 	movw	r2, #2500	; 0x9c4
    de02:	2901      	cmp	r1, #1
    de04:	d006      	beq.n	de14 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    de06:	2902      	cmp	r1, #2
    de08:	d005      	beq.n	de16 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    de0a:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    de0e:	2029      	movs	r0, #41	; 0x29
    de10:	f7f2 fdbe 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de14:	b108      	cbz	r0, de1a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    de16:	4610      	mov	r0, r2
    de18:	bd10      	pop	{r4, pc}
    de1a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    de1e:	bd10      	pop	{r4, pc}

0000de20 <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    de20:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    de24:	f001 bcf8 	b.w	f818 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000de28 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    de2c:	4607      	mov	r7, r0
    de2e:	460e      	mov	r6, r1
    de30:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    de34:	f7fc fba2 	bl	a57c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    de38:	b198      	cbz	r0, de62 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    de3a:	b31e      	cbz	r6, de84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    de3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    de40:	1b40      	subs	r0, r0, r5
    de42:	2300      	movs	r3, #0
    de44:	eb61 0104 	sbc.w	r1, r1, r4
    de48:	461a      	mov	r2, r3
    de4a:	1a1b      	subs	r3, r3, r0
    de4c:	418a      	sbcs	r2, r1
    de4e:	da19      	bge.n	de84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    de50:	1c42      	adds	r2, r0, #1
    de52:	f171 0100 	sbcs.w	r1, r1, #0
    de56:	db07      	blt.n	de68 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    de58:	f240 211a 	movw	r1, #538	; 0x21a
    de5c:	2029      	movs	r0, #41	; 0x29
    de5e:	f7f2 fd97 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de62:	f44f 7104 	mov.w	r1, #528	; 0x210
    de66:	e7f9      	b.n	de5c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    de68:	4430      	add	r0, r6
    de6a:	1e40      	subs	r0, r0, #1
    de6c:	fbb0 f1f6 	udiv	r1, r0, r6
    de70:	fb01 f006 	mul.w	r0, r1, r6
    de74:	1828      	adds	r0, r5, r0
    de76:	f144 0400 	adc.w	r4, r4, #0
    de7a:	e9c7 0404 	strd	r0, r4, [r7, #16]
    de7e:	4608      	mov	r0, r1
    de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    de84:	2000      	movs	r0, #0
    de86:	e7fb      	b.n	de80 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000de88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    de88:	b530      	push	{r4, r5, lr}
    de8a:	4613      	mov	r3, r2
    de8c:	e006      	b.n	de9c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    de8e:	18cc      	adds	r4, r1, r3
    de90:	1ad5      	subs	r5, r2, r3
    de92:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    de96:	1e5b      	subs	r3, r3, #1
    de98:	5544      	strb	r4, [r0, r5]
    de9a:	b2db      	uxtb	r3, r3
    de9c:	2b00      	cmp	r3, #0
    de9e:	d1f6      	bne.n	de8e <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dea0:	bd30      	pop	{r4, r5, pc}

0000dea2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dea2:	2300      	movs	r3, #0
    dea4:	6403      	str	r3, [r0, #64]	; 0x40
    dea6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    deaa:	f240 2371 	movw	r3, #625	; 0x271
    deae:	435a      	muls	r2, r3
    deb0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    deb4:	1e52      	subs	r2, r2, #1
    deb6:	fbb2 f1f1 	udiv	r1, r2, r1
    deba:	6441      	str	r1, [r0, #68]	; 0x44
    debc:	4770      	bx	lr

0000debe <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    debe:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    dec2:	4607      	mov	r7, r0
    dec4:	4690      	mov	r8, r2
    dec6:	468b      	mov	fp, r1
    dec8:	2601      	movs	r6, #1
    deca:	4608      	mov	r0, r1
    decc:	f000 f9e5 	bl	e29a <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    ded0:	4682      	mov	sl, r0
    ded2:	4658      	mov	r0, fp
    ded4:	f000 f9e3 	bl	e29e <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    ded8:	4681      	mov	r9, r0
    deda:	f7ff ff81 	bl	dde0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dede:	4604      	mov	r4, r0
    dee0:	4650      	mov	r0, sl
    dee2:	f7ff ff7d 	bl	dde0 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    dee6:	4605      	mov	r5, r0
    dee8:	ea54 0005 	orrs.w	r0, r4, r5
    deec:	d100      	bne.n	def0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    deee:	2600      	movs	r6, #0
    def0:	f7f9 faac 	bl	744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    def4:	ea10 0f09 	tst.w	r0, r9
    def8:	d100      	bne.n	defc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    defa:	2400      	movs	r4, #0
    defc:	f7f9 faa6 	bl	744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    df00:	ea10 0f0a 	tst.w	r0, sl
    df04:	d100      	bne.n	df08 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    df06:	2500      	movs	r5, #0
    df08:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    df0c:	42a0      	cmp	r0, r4
    df0e:	d100      	bne.n	df12 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    df10:	2400      	movs	r4, #0
    df12:	f888 4000 	strb.w	r4, [r8]
    df16:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    df1a:	42a8      	cmp	r0, r5
    df1c:	d100      	bne.n	df20 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    df1e:	2500      	movs	r5, #0
    df20:	f888 5001 	strb.w	r5, [r8, #1]
    df24:	b974      	cbnz	r4, df44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df26:	b96d      	cbnz	r5, df44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df28:	4658      	mov	r0, fp
    df2a:	f000 f9a4 	bl	e276 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    df2e:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    df32:	1a40      	subs	r0, r0, r1
    df34:	b200      	sxth	r0, r0
    df36:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    df3a:	4288      	cmp	r0, r1
    df3c:	dc01      	bgt.n	df42 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    df3e:	2800      	cmp	r0, #0
    df40:	dc00      	bgt.n	df44 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    df42:	2600      	movs	r6, #0
    df44:	4630      	mov	r0, r6
    df46:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000df4a <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    df4a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df4e:	4348      	muls	r0, r1
    df50:	4770      	bx	lr

0000df52 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    df52:	f240 2171 	movw	r1, #625	; 0x271
    df56:	fb10 f001 	smulbb	r0, r0, r1
    df5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    df5e:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    df62:	4770      	bx	lr

0000df64 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    df64:	b510      	push	{r4, lr}
    df66:	2300      	movs	r3, #0
    df68:	461a      	mov	r2, r3
    df6a:	e003      	b.n	df74 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    df6c:	5c84      	ldrb	r4, [r0, r2]
    df6e:	4323      	orrs	r3, r4
    df70:	1c52      	adds	r2, r2, #1
    df72:	b2d2      	uxtb	r2, r2
    df74:	428a      	cmp	r2, r1
    df76:	d3f9      	bcc.n	df6c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    df78:	b10b      	cbz	r3, df7e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    df7a:	2000      	movs	r0, #0
    df7c:	bd10      	pop	{r4, pc}
    df7e:	2001      	movs	r0, #1
    df80:	bd10      	pop	{r4, pc}

0000df82 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    df82:	2100      	movs	r1, #0
    df84:	4608      	mov	r0, r1
    df86:	f7f4 bc65 	b.w	2854 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    df8a:	4401      	add	r1, r0
    df8c:	2914      	cmp	r1, #20
    df8e:	dd01      	ble.n	df94 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    df90:	2014      	movs	r0, #20
    df92:	4770      	bx	lr
    df94:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    df98:	4281      	cmp	r1, r0
    df9a:	dbfa      	blt.n	df92 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    df9c:	b248      	sxtb	r0, r1
    df9e:	4770      	bx	lr

0000dfa0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dfa0:	b570      	push	{r4, r5, r6, lr}
    dfa2:	4605      	mov	r5, r0
    dfa4:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    dfa8:	b286      	uxth	r6, r0
    dfaa:	4610      	mov	r0, r2
    dfac:	7aec      	ldrb	r4, [r5, #11]
    dfae:	4631      	mov	r1, r6
    dfb0:	f000 f863 	bl	e07a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    dfb4:	4070      	eors	r0, r6
    dfb6:	2125      	movs	r1, #37	; 0x25
    dfb8:	fbb0 f2f1 	udiv	r2, r0, r1
    dfbc:	fb01 0112 	mls	r1, r1, r2, r0
    dfc0:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    dfc4:	f001 0307 	and.w	r3, r1, #7
    dfc8:	7852      	ldrb	r2, [r2, #1]
    dfca:	2601      	movs	r6, #1
    dfcc:	409e      	lsls	r6, r3
    dfce:	4232      	tst	r2, r6
    dfd0:	d001      	beq.n	dfd6 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    dfd2:	4608      	mov	r0, r1
    dfd4:	bd70      	pop	{r4, r5, r6, pc}
    dfd6:	4344      	muls	r4, r0
    dfd8:	0c21      	lsrs	r1, r4, #16
    dfda:	4628      	mov	r0, r5
    dfdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dfe0:	f7f4 bc86 	b.w	28f0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000dfe4 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    dfe4:	b510      	push	{r4, lr}
    dfe6:	4604      	mov	r4, r0
    dfe8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    dfec:	b108      	cbz	r0, dff2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    dfee:	2825      	cmp	r0, #37	; 0x25
    dff0:	d901      	bls.n	dff6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    dff2:	2012      	movs	r0, #18
    dff4:	bd10      	pop	{r4, pc}
    dff6:	b132      	cbz	r2, e006 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    dff8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    dffc:	b128      	cbz	r0, e00a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    dffe:	2801      	cmp	r0, #1
    e000:	d009      	beq.n	e016 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e002:	201f      	movs	r0, #31
    e004:	bd10      	pop	{r4, pc}
    e006:	2000      	movs	r0, #0
    e008:	bd10      	pop	{r4, pc}
    e00a:	4620      	mov	r0, r4
    e00c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e010:	4611      	mov	r1, r2
    e012:	f7f4 bc25 	b.w	2860 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    e016:	8aa2      	ldrh	r2, [r4, #20]
    e018:	6949      	ldr	r1, [r1, #20]
    e01a:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e01e:	f7ff ffbf 	bl	dfa0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e022:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e026:	e7ee      	b.n	e006 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e028 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e028:	b570      	push	{r4, r5, r6, lr}
    e02a:	4604      	mov	r4, r0
    e02c:	1c40      	adds	r0, r0, #1
    e02e:	4288      	cmp	r0, r1
    e030:	d004      	beq.n	e03c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e032:	6808      	ldr	r0, [r1, #0]
    e034:	f8c4 0001 	str.w	r0, [r4, #1]
    e038:	7908      	ldrb	r0, [r1, #4]
    e03a:	7160      	strb	r0, [r4, #5]
    e03c:	7960      	ldrb	r0, [r4, #5]
    e03e:	f000 001f 	and.w	r0, r0, #31
    e042:	7160      	strb	r0, [r4, #5]
    e044:	2000      	movs	r0, #0
    e046:	72e0      	strb	r0, [r4, #11]
    e048:	4605      	mov	r5, r0
    e04a:	1966      	adds	r6, r4, r5
    e04c:	7870      	ldrb	r0, [r6, #1]
    e04e:	f000 faed 	bl	e62c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e052:	71b0      	strb	r0, [r6, #6]
    e054:	7ae1      	ldrb	r1, [r4, #11]
    e056:	1c6d      	adds	r5, r5, #1
    e058:	4408      	add	r0, r1
    e05a:	b2ed      	uxtb	r5, r5
    e05c:	72e0      	strb	r0, [r4, #11]
    e05e:	2d05      	cmp	r5, #5
    e060:	d3f3      	bcc.n	e04a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e062:	bd70      	pop	{r4, r5, r6, pc}
    e064:	b2c1      	uxtb	r1, r0
    e066:	fa91 f1a1 	rbit	r1, r1
    e06a:	0a00      	lsrs	r0, r0, #8
    e06c:	0e09      	lsrs	r1, r1, #24
    e06e:	fa90 f0a0 	rbit	r0, r0
    e072:	0e00      	lsrs	r0, r0, #24
    e074:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e078:	4770      	bx	lr
    e07a:	b570      	push	{r4, r5, r6, lr}
    e07c:	460d      	mov	r5, r1
    e07e:	4048      	eors	r0, r1
    e080:	2400      	movs	r4, #0
    e082:	f7ff ffef 	bl	e064 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e086:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e08a:	1c64      	adds	r4, r4, #1
    e08c:	4428      	add	r0, r5
    e08e:	b2e4      	uxtb	r4, r4
    e090:	b280      	uxth	r0, r0
    e092:	2c03      	cmp	r4, #3
    e094:	d3f5      	bcc.n	e082 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e096:	bd70      	pop	{r4, r5, r6, pc}

0000e098 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e098:	7802      	ldrb	r2, [r0, #0]
    e09a:	f002 020f 	and.w	r2, r2, #15
    e09e:	2a03      	cmp	r2, #3
    e0a0:	d003      	beq.n	e0aa <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e0a2:	2a05      	cmp	r2, #5
    e0a4:	d104      	bne.n	e0b0 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e0a6:	f000 b92e 	b.w	e306 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e0aa:	7840      	ldrb	r0, [r0, #1]
    e0ac:	280c      	cmp	r0, #12
    e0ae:	d001      	beq.n	e0b4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e0b0:	2000      	movs	r0, #0
    e0b2:	4770      	bx	lr
    e0b4:	2001      	movs	r0, #1
    e0b6:	4770      	bx	lr

0000e0b8 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e0b8:	b570      	push	{r4, r5, r6, lr}
    e0ba:	4614      	mov	r4, r2
    e0bc:	4605      	mov	r5, r0
    e0be:	2a1f      	cmp	r2, #31
    e0c0:	d903      	bls.n	e0ca <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e0c2:	21ee      	movs	r1, #238	; 0xee
    e0c4:	202a      	movs	r0, #42	; 0x2a
    e0c6:	f7f2 fc63 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ca:	f105 0009 	add.w	r0, r5, #9
    e0ce:	f002 feca 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0d2:	1da4      	adds	r4, r4, #6
    e0d4:	706c      	strb	r4, [r5, #1]
    e0d6:	bd70      	pop	{r4, r5, r6, pc}

0000e0d8 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e0d8:	b510      	push	{r4, lr}
    e0da:	7802      	ldrb	r2, [r0, #0]
    e0dc:	f001 030f 	and.w	r3, r1, #15
    e0e0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e0e4:	431a      	orrs	r2, r3
    e0e6:	7002      	strb	r2, [r0, #0]
    e0e8:	2907      	cmp	r1, #7
    e0ea:	d20c      	bcs.n	e106 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e0ec:	e8df f001 	tbb	[pc, r1]
    e0f0:	06040604 	.word	0x06040604
    e0f4:	00040804 	.word	0x00040804
    e0f8:	2106      	movs	r1, #6
    e0fa:	e002      	b.n	e102 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e0fc:	210c      	movs	r1, #12
    e0fe:	e000      	b.n	e102 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e100:	2122      	movs	r1, #34	; 0x22
    e102:	7041      	strb	r1, [r0, #1]
    e104:	bd10      	pop	{r4, pc}
    e106:	21a8      	movs	r1, #168	; 0xa8
    e108:	202a      	movs	r0, #42	; 0x2a
    e10a:	f7f2 fc41 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e10e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e10e:	680a      	ldr	r2, [r1, #0]
    e110:	f840 2f09 	str.w	r2, [r0, #9]!
    e114:	8889      	ldrh	r1, [r1, #4]
    e116:	8081      	strh	r1, [r0, #4]
    e118:	4770      	bx	lr

0000e11a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e11a:	7802      	ldrb	r2, [r0, #0]
    e11c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e120:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e124:	7002      	strb	r2, [r0, #0]
    e126:	4770      	bx	lr

0000e128 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e128:	680a      	ldr	r2, [r1, #0]
    e12a:	f840 2f03 	str.w	r2, [r0, #3]!
    e12e:	8889      	ldrh	r1, [r1, #4]
    e130:	8081      	strh	r1, [r0, #4]
    e132:	4770      	bx	lr

0000e134 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e134:	7802      	ldrb	r2, [r0, #0]
    e136:	2340      	movs	r3, #64	; 0x40
    e138:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e13c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e140:	430a      	orrs	r2, r1
    e142:	7002      	strb	r2, [r0, #0]
    e144:	4770      	bx	lr

0000e146 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e146:	b570      	push	{r4, r5, r6, lr}
    e148:	4614      	mov	r4, r2
    e14a:	4605      	mov	r5, r0
    e14c:	2a1f      	cmp	r2, #31
    e14e:	d904      	bls.n	e15a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e150:	f44f 7188 	mov.w	r1, #272	; 0x110
    e154:	202a      	movs	r0, #42	; 0x2a
    e156:	f7f2 fc1b 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e15a:	f105 0009 	add.w	r0, r5, #9
    e15e:	f002 fe82 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e162:	1da4      	adds	r4, r4, #6
    e164:	706c      	strb	r4, [r5, #1]
    e166:	bd70      	pop	{r4, r5, r6, pc}

0000e168 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e168:	6842      	ldr	r2, [r0, #4]
    e16a:	600a      	str	r2, [r1, #0]
    e16c:	7a00      	ldrb	r0, [r0, #8]
    e16e:	7108      	strb	r0, [r1, #4]
    e170:	4770      	bx	lr

0000e172 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e172:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e176:	4770      	bx	lr

0000e178 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e178:	b570      	push	{r4, r5, r6, lr}
    e17a:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e17e:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e182:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e186:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e18a:	88c0      	ldrh	r0, [r0, #6]
    e18c:	b131      	cbz	r1, e19c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e18e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e192:	d903      	bls.n	e19c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e194:	f640 5107 	movw	r1, #3335	; 0xd07
    e198:	428a      	cmp	r2, r1
    e19a:	d90b      	bls.n	e1b4 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e19c:	1f91      	subs	r1, r2, #6
    e19e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e1a2:	42b1      	cmp	r1, r6
    e1a4:	d810      	bhi.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1a6:	b17b      	cbz	r3, e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1a8:	2b08      	cmp	r3, #8
    e1aa:	d80d      	bhi.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1ac:	4293      	cmp	r3, r2
    e1ae:	d20b      	bcs.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1b0:	4295      	cmp	r5, r2
    e1b2:	d809      	bhi.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1b4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e1b8:	d206      	bcs.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1ba:	f640 4176 	movw	r1, #3190	; 0xc76
    e1be:	380a      	subs	r0, #10
    e1c0:	4288      	cmp	r0, r1
    e1c2:	d801      	bhi.n	e1c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1c4:	2001      	movs	r0, #1
    e1c6:	bd70      	pop	{r4, r5, r6, pc}
    e1c8:	2000      	movs	r0, #0
    e1ca:	bd70      	pop	{r4, r5, r6, pc}

0000e1cc <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e1cc:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e1d0:	4770      	bx	lr

0000e1d2 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e1d2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e1d6:	4770      	bx	lr

0000e1d8 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e1d8:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e1dc:	4770      	bx	lr

0000e1de <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e1de:	b510      	push	{r4, lr}
    e1e0:	29fb      	cmp	r1, #251	; 0xfb
    e1e2:	d904      	bls.n	e1ee <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e1e4:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e1e8:	202a      	movs	r0, #42	; 0x2a
    e1ea:	f7f2 fbd1 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1ee:	7041      	strb	r1, [r0, #1]
    e1f0:	bd10      	pop	{r4, pc}

0000e1f2 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e1f2:	8980      	ldrh	r0, [r0, #12]
    e1f4:	8008      	strh	r0, [r1, #0]
    e1f6:	4770      	bx	lr

0000e1f8 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e1f8:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e1fc:	6008      	str	r0, [r1, #0]
    e1fe:	4770      	bx	lr

0000e200 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e200:	6842      	ldr	r2, [r0, #4]
    e202:	600a      	str	r2, [r1, #0]
    e204:	6880      	ldr	r0, [r0, #8]
    e206:	6048      	str	r0, [r1, #4]
    e208:	4770      	bx	lr

0000e20a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e20a:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e20e:	600a      	str	r2, [r1, #0]
    e210:	6840      	ldr	r0, [r0, #4]
    e212:	6048      	str	r0, [r1, #4]
    e214:	4770      	bx	lr

0000e216 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e216:	6809      	ldr	r1, [r1, #0]
    e218:	60c1      	str	r1, [r0, #12]
    e21a:	4770      	bx	lr

0000e21c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e21c:	680a      	ldr	r2, [r1, #0]
    e21e:	6042      	str	r2, [r0, #4]
    e220:	6849      	ldr	r1, [r1, #4]
    e222:	6081      	str	r1, [r0, #8]
    e224:	4770      	bx	lr

0000e226 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e226:	7800      	ldrb	r0, [r0, #0]
    e228:	f000 0003 	and.w	r0, r0, #3
    e22c:	4770      	bx	lr

0000e22e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e22e:	8880      	ldrh	r0, [r0, #4]
    e230:	4770      	bx	lr

0000e232 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e232:	88c0      	ldrh	r0, [r0, #6]
    e234:	4770      	bx	lr

0000e236 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e236:	8900      	ldrh	r0, [r0, #8]
    e238:	4770      	bx	lr

0000e23a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e23a:	8940      	ldrh	r0, [r0, #10]
    e23c:	4770      	bx	lr

0000e23e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e23e:	8901      	ldrh	r1, [r0, #8]
    e240:	291b      	cmp	r1, #27
    e242:	d30c      	bcc.n	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e244:	8941      	ldrh	r1, [r0, #10]
    e246:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e24a:	4291      	cmp	r1, r2
    e24c:	d307      	bcc.n	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e24e:	8881      	ldrh	r1, [r0, #4]
    e250:	291b      	cmp	r1, #27
    e252:	d304      	bcc.n	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e254:	88c0      	ldrh	r0, [r0, #6]
    e256:	4290      	cmp	r0, r2
    e258:	d301      	bcc.n	e25e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e25a:	2001      	movs	r0, #1
    e25c:	4770      	bx	lr
    e25e:	2000      	movs	r0, #0
    e260:	4770      	bx	lr

0000e262 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e262:	7901      	ldrb	r1, [r0, #4]
    e264:	0749      	lsls	r1, r1, #29
    e266:	d004      	beq.n	e272 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e268:	7940      	ldrb	r0, [r0, #5]
    e26a:	0740      	lsls	r0, r0, #29
    e26c:	d001      	beq.n	e272 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e26e:	2001      	movs	r0, #1
    e270:	4770      	bx	lr
    e272:	2000      	movs	r0, #0
    e274:	4770      	bx	lr

0000e276 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e276:	88c0      	ldrh	r0, [r0, #6]
    e278:	4770      	bx	lr

0000e27a <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e27a:	7901      	ldrb	r1, [r0, #4]
    e27c:	7940      	ldrb	r0, [r0, #5]
    e27e:	f001 0107 	and.w	r1, r1, #7
    e282:	1e4a      	subs	r2, r1, #1
    e284:	f000 0007 	and.w	r0, r0, #7
    e288:	4011      	ands	r1, r2
    e28a:	1e42      	subs	r2, r0, #1
    e28c:	4010      	ands	r0, r2
    e28e:	4301      	orrs	r1, r0
    e290:	d001      	beq.n	e296 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e292:	2000      	movs	r0, #0
    e294:	4770      	bx	lr
    e296:	2001      	movs	r0, #1
    e298:	4770      	bx	lr

0000e29a <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e29a:	7900      	ldrb	r0, [r0, #4]
    e29c:	4770      	bx	lr

0000e29e <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e29e:	7940      	ldrb	r0, [r0, #5]
    e2a0:	4770      	bx	lr

0000e2a2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e2a2:	7900      	ldrb	r0, [r0, #4]
    e2a4:	4770      	bx	lr

0000e2a6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e2a6:	7101      	strb	r1, [r0, #4]
    e2a8:	4770      	bx	lr

0000e2aa <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e2aa:	7940      	ldrb	r0, [r0, #5]
    e2ac:	4770      	bx	lr

0000e2ae <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e2ae:	7141      	strb	r1, [r0, #5]
    e2b0:	4770      	bx	lr

0000e2b2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e2b2:	b510      	push	{r4, lr}
    e2b4:	2a1b      	cmp	r2, #27
    e2b6:	d904      	bls.n	e2c2 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e2b8:	f240 417e 	movw	r1, #1150	; 0x47e
    e2bc:	202a      	movs	r0, #42	; 0x2a
    e2be:	f7f2 fb67 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2c2:	7042      	strb	r2, [r0, #1]
    e2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2c8:	1cc0      	adds	r0, r0, #3
    e2ca:	f002 bdcc 	b.w	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e2ce <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e2ce:	7802      	ldrb	r2, [r0, #0]
    e2d0:	f001 0103 	and.w	r1, r1, #3
    e2d4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e2d8:	430a      	orrs	r2, r1
    e2da:	7002      	strb	r2, [r0, #0]
    e2dc:	4770      	bx	lr

0000e2de <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e2de:	7101      	strb	r1, [r0, #4]
    e2e0:	0a09      	lsrs	r1, r1, #8
    e2e2:	7141      	strb	r1, [r0, #5]
    e2e4:	4770      	bx	lr

0000e2e6 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e2e6:	7181      	strb	r1, [r0, #6]
    e2e8:	0a09      	lsrs	r1, r1, #8
    e2ea:	71c1      	strb	r1, [r0, #7]
    e2ec:	4770      	bx	lr

0000e2ee <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e2ee:	7201      	strb	r1, [r0, #8]
    e2f0:	0a09      	lsrs	r1, r1, #8
    e2f2:	7241      	strb	r1, [r0, #9]
    e2f4:	4770      	bx	lr

0000e2f6 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e2f6:	7281      	strb	r1, [r0, #10]
    e2f8:	0a09      	lsrs	r1, r1, #8
    e2fa:	72c1      	strb	r1, [r0, #11]
    e2fc:	4770      	bx	lr

0000e2fe <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e2fe:	7900      	ldrb	r0, [r0, #4]
    e300:	4770      	bx	lr

0000e302 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e302:	7900      	ldrb	r0, [r0, #4]
    e304:	4770      	bx	lr
    e306:	b570      	push	{r4, r5, r6, lr}
    e308:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e30c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e310:	f012 0fff 	tst.w	r2, #255	; 0xff
    e314:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e318:	d108      	bne.n	e32c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e31a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e31e:	b92c      	cbnz	r4, e32c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e320:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e324:	b914      	cbnz	r4, e32c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e326:	0e12      	lsrs	r2, r2, #24
    e328:	d100      	bne.n	e32c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e32a:	b34b      	cbz	r3, e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e32c:	7846      	ldrb	r6, [r0, #1]
    e32e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e332:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e336:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e33a:	7d83      	ldrb	r3, [r0, #22]
    e33c:	2e22      	cmp	r6, #34	; 0x22
    e33e:	d11f      	bne.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e340:	b131      	cbz	r1, e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e342:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e346:	d903      	bls.n	e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e348:	f640 5107 	movw	r1, #3335	; 0xd07
    e34c:	428a      	cmp	r2, r1
    e34e:	d90b      	bls.n	e368 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e350:	1f91      	subs	r1, r2, #6
    e352:	f640 467a 	movw	r6, #3194	; 0xc7a
    e356:	42b1      	cmp	r1, r6
    e358:	d812      	bhi.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e35a:	b18b      	cbz	r3, e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e35c:	2b08      	cmp	r3, #8
    e35e:	d80f      	bhi.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e360:	4293      	cmp	r3, r2
    e362:	d20d      	bcs.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e364:	4295      	cmp	r5, r2
    e366:	d80b      	bhi.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e368:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e36c:	d208      	bcs.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e36e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e372:	f640 4176 	movw	r1, #3190	; 0xc76
    e376:	380a      	subs	r0, #10
    e378:	4288      	cmp	r0, r1
    e37a:	d801      	bhi.n	e380 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e37c:	2001      	movs	r0, #1
    e37e:	bd70      	pop	{r4, r5, r6, pc}
    e380:	2000      	movs	r0, #0
    e382:	bd70      	pop	{r4, r5, r6, pc}

0000e384 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e384:	6841      	ldr	r1, [r0, #4]
    e386:	2200      	movs	r2, #0
    e388:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e38c:	2b00      	cmp	r3, #0
    e38e:	d004      	beq.n	e39a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e390:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e394:	6840      	ldr	r0, [r0, #4]
    e396:	f000 bdfc 	b.w	ef92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e39a:	4770      	bx	lr

0000e39c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e39c:	b510      	push	{r4, lr}
    e39e:	7a01      	ldrb	r1, [r0, #8]
    e3a0:	b119      	cbz	r1, e3aa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e3a2:	2901      	cmp	r1, #1
    e3a4:	d006      	beq.n	e3b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e3a6:	2000      	movs	r0, #0
    e3a8:	bd10      	pop	{r4, pc}
    e3aa:	88c2      	ldrh	r2, [r0, #6]
    e3ac:	6803      	ldr	r3, [r0, #0]
    e3ae:	8880      	ldrh	r0, [r0, #4]
    e3b0:	2102      	movs	r1, #2
    e3b2:	e003      	b.n	e3bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e3b4:	88c2      	ldrh	r2, [r0, #6]
    e3b6:	6803      	ldr	r3, [r0, #0]
    e3b8:	8880      	ldrh	r0, [r0, #4]
    e3ba:	2101      	movs	r1, #1
    e3bc:	f7f4 fb02 	bl	29c4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e3c0:	b908      	cbnz	r0, e3c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e3c2:	f7f4 fb4f 	bl	2a64 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e3c6:	2001      	movs	r0, #1
    e3c8:	bd10      	pop	{r4, pc}

0000e3ca <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e3ca:	2203      	movs	r2, #3
    e3cc:	f000 b806 	b.w	e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e3d0 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e3d0:	2203      	movs	r2, #3
    e3d2:	f000 b817 	b.w	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e3d6 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e3d6:	2204      	movs	r2, #4
    e3d8:	f000 b814 	b.w	e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e3dc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e3dc:	b508      	push	{r3, lr}
    e3de:	7a03      	ldrb	r3, [r0, #8]
    e3e0:	f88d 3000 	strb.w	r3, [sp]
    e3e4:	9b00      	ldr	r3, [sp, #0]
    e3e6:	9300      	str	r3, [sp, #0]
    e3e8:	f89d 3000 	ldrb.w	r3, [sp]
    e3ec:	b123      	cbz	r3, e3f8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e3ee:	f240 21c2 	movw	r1, #706	; 0x2c2
    e3f2:	2010      	movs	r0, #16
    e3f4:	f7f2 facc 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e3fc:	f7f4 bca4 	b.w	2d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e400 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e400:	f7f4 bcd0 	b.w	2da4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e404 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e404:	7a03      	ldrb	r3, [r0, #8]
    e406:	b082      	sub	sp, #8
    e408:	f88d 3000 	strb.w	r3, [sp]
    e40c:	9b00      	ldr	r3, [sp, #0]
    e40e:	9300      	str	r3, [sp, #0]
    e410:	f89d 3000 	ldrb.w	r3, [sp]
    e414:	b113      	cbz	r3, e41c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e416:	7202      	strb	r2, [r0, #8]
    e418:	b002      	add	sp, #8
    e41a:	4770      	bx	lr
    e41c:	b002      	add	sp, #8
    e41e:	f7f4 bc93 	b.w	2d48 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e422:	2000      	movs	r0, #0
    e424:	7048      	strb	r0, [r1, #1]
    e426:	2003      	movs	r0, #3
    e428:	7008      	strb	r0, [r1, #0]
    e42a:	2001      	movs	r0, #1
    e42c:	7108      	strb	r0, [r1, #4]
    e42e:	4770      	bx	lr

0000e430 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e430:	b510      	push	{r4, lr}
    e432:	888c      	ldrh	r4, [r1, #4]
    e434:	890a      	ldrh	r2, [r1, #8]
    e436:	884b      	ldrh	r3, [r1, #2]
    e438:	88c9      	ldrh	r1, [r1, #6]
    e43a:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e43e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e442:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e446:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e44a:	bd10      	pop	{r4, pc}

0000e44c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e44c:	b570      	push	{r4, r5, r6, lr}
    e44e:	4615      	mov	r5, r2
    e450:	460c      	mov	r4, r1
    e452:	f000 f8b8 	bl	e5c6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e456:	3096      	adds	r0, #150	; 0x96
    e458:	4428      	add	r0, r5
    e45a:	42a0      	cmp	r0, r4
    e45c:	d801      	bhi.n	e462 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e45e:	1a20      	subs	r0, r4, r0
    e460:	bd70      	pop	{r4, r5, r6, pc}
    e462:	2000      	movs	r0, #0
    e464:	bd70      	pop	{r4, r5, r6, pc}

0000e466 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e46a:	4604      	mov	r4, r0
    e46c:	f000 f87f 	bl	e56e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e470:	4680      	mov	r8, r0
    e472:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e476:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e47a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e47c:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e47e:	4285      	cmp	r5, r0
    e480:	d300      	bcc.n	e484 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e482:	4605      	mov	r5, r0
    e484:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e488:	4620      	mov	r0, r4
    e48a:	f000 f868 	bl	e55e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e48e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e492:	2902      	cmp	r1, #2
    e494:	d108      	bne.n	e4a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e496:	42af      	cmp	r7, r5
    e498:	d200      	bcs.n	e49c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e49a:	463d      	mov	r5, r7
    e49c:	4286      	cmp	r6, r0
    e49e:	d200      	bcs.n	e4a2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e4a0:	4630      	mov	r0, r6
    e4a2:	2100      	movs	r1, #0
    e4a4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e4a8:	86a5      	strh	r5, [r4, #52]	; 0x34
    e4aa:	8720      	strh	r0, [r4, #56]	; 0x38
    e4ac:	42bd      	cmp	r5, r7
    e4ae:	d101      	bne.n	e4b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e4b0:	42b0      	cmp	r0, r6
    e4b2:	d001      	beq.n	e4b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e4b4:	2001      	movs	r0, #1
    e4b6:	e000      	b.n	e4ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e4b8:	2000      	movs	r0, #0
    e4ba:	ea40 0008 	orr.w	r0, r0, r8
    e4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4c2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e4c2:	221b      	movs	r2, #27
    e4c4:	8402      	strh	r2, [r0, #32]
    e4c6:	8382      	strh	r2, [r0, #28]
    e4c8:	82c2      	strh	r2, [r0, #22]
    e4ca:	8282      	strh	r2, [r0, #20]
    e4cc:	8142      	strh	r2, [r0, #10]
    e4ce:	8202      	strh	r2, [r0, #16]
    e4d0:	8102      	strh	r2, [r0, #8]
    e4d2:	8542      	strh	r2, [r0, #42]	; 0x2a
    e4d4:	8582      	strh	r2, [r0, #44]	; 0x2c
    e4d6:	8482      	strh	r2, [r0, #36]	; 0x24
    e4d8:	2900      	cmp	r1, #0
    e4da:	d10a      	bne.n	e4f2 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e4dc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e4e0:	8441      	strh	r1, [r0, #34]	; 0x22
    e4e2:	83c1      	strh	r1, [r0, #30]
    e4e4:	8341      	strh	r1, [r0, #26]
    e4e6:	8301      	strh	r1, [r0, #24]
    e4e8:	81c1      	strh	r1, [r0, #14]
    e4ea:	8241      	strh	r1, [r0, #18]
    e4ec:	8181      	strh	r1, [r0, #12]
    e4ee:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e4f0:	8601      	strh	r1, [r0, #48]	; 0x30
    e4f2:	4770      	bx	lr

0000e4f4 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e4f4:	6800      	ldr	r0, [r0, #0]
    e4f6:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e4fa:	4290      	cmp	r0, r2
    e4fc:	d903      	bls.n	e506 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e4fe:	1a40      	subs	r0, r0, r1
    e500:	389c      	subs	r0, #156	; 0x9c
    e502:	0840      	lsrs	r0, r0, #1
    e504:	4770      	bx	lr
    e506:	2000      	movs	r0, #0
    e508:	4770      	bx	lr

0000e50a <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e50a:	6840      	ldr	r0, [r0, #4]
    e50c:	4770      	bx	lr

0000e50e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e50e:	b570      	push	{r4, r5, r6, lr}
    e510:	460c      	mov	r4, r1
    e512:	4605      	mov	r5, r0
    e514:	f000 f857 	bl	e5c6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e518:	4420      	add	r0, r4
    e51a:	6328      	str	r0, [r5, #48]	; 0x30
    e51c:	bd70      	pop	{r4, r5, r6, pc}

0000e51e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e51e:	b510      	push	{r4, lr}
    e520:	9c02      	ldr	r4, [sp, #8]
    e522:	8281      	strh	r1, [r0, #20]
    e524:	82c2      	strh	r2, [r0, #22]
    e526:	8303      	strh	r3, [r0, #24]
    e528:	8344      	strh	r4, [r0, #26]
    e52a:	bd10      	pop	{r4, pc}
    e52c:	1d00      	adds	r0, r0, #4
    e52e:	b510      	push	{r4, lr}
    e530:	b280      	uxth	r0, r0
    e532:	2901      	cmp	r1, #1
    e534:	d006      	beq.n	e544 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e536:	2902      	cmp	r1, #2
    e538:	d007      	beq.n	e54a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e53a:	f240 2123 	movw	r1, #547	; 0x223
    e53e:	2006      	movs	r0, #6
    e540:	f7f2 fa26 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e544:	00c0      	lsls	r0, r0, #3
    e546:	3050      	adds	r0, #80	; 0x50
    e548:	e001      	b.n	e54e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e54a:	0080      	lsls	r0, r0, #2
    e54c:	302c      	adds	r0, #44	; 0x2c
    e54e:	b280      	uxth	r0, r0
    e550:	bd10      	pop	{r4, pc}
    e552:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e554:	8b00      	ldrh	r0, [r0, #24]
    e556:	4281      	cmp	r1, r0
    e558:	d200      	bcs.n	e55c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e55a:	4608      	mov	r0, r1
    e55c:	4770      	bx	lr
    e55e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e562:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e566:	4281      	cmp	r1, r0
    e568:	d200      	bcs.n	e56c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e56a:	4608      	mov	r0, r1
    e56c:	4770      	bx	lr
    e56e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e572:	4606      	mov	r6, r0
    e574:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e578:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e57c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e580:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e584:	42a0      	cmp	r0, r4
    e586:	d200      	bcs.n	e58a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e588:	4604      	mov	r4, r0
    e58a:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e58e:	4605      	mov	r5, r0
    e590:	f7ff ffdf 	bl	e552 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e594:	4607      	mov	r7, r0
    e596:	4628      	mov	r0, r5
    e598:	f7ff ffdb 	bl	e552 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e59c:	816c      	strh	r4, [r5, #10]
    e59e:	81ef      	strh	r7, [r5, #14]
    e5a0:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e5a2:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e5a4:	42a1      	cmp	r1, r4
    e5a6:	d200      	bcs.n	e5aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e5a8:	4621      	mov	r1, r4
    e5aa:	4282      	cmp	r2, r0
    e5ac:	d300      	bcc.n	e5b0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e5ae:	4610      	mov	r0, r2
    e5b0:	8229      	strh	r1, [r5, #16]
    e5b2:	8268      	strh	r0, [r5, #18]
    e5b4:	454c      	cmp	r4, r9
    e5b6:	d101      	bne.n	e5bc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e5b8:	4547      	cmp	r7, r8
    e5ba:	d002      	beq.n	e5c2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e5bc:	2001      	movs	r0, #1
    e5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5c2:	2000      	movs	r0, #0
    e5c4:	e7fb      	b.n	e5be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e5c6:	2196      	movs	r1, #150	; 0x96
    e5c8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e5cc:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e5d0:	f000 b800 	b.w	e5d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5d8:	460d      	mov	r5, r1
    e5da:	4606      	mov	r6, r0
    e5dc:	4698      	mov	r8, r3
    e5de:	4617      	mov	r7, r2
    e5e0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e5e2:	4611      	mov	r1, r2
    e5e4:	f7ff ffa2 	bl	e52c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e5e8:	4604      	mov	r4, r0
    e5ea:	4639      	mov	r1, r7
    e5ec:	4630      	mov	r0, r6
    e5ee:	f7ff ffb6 	bl	e55e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e5f2:	42a0      	cmp	r0, r4
    e5f4:	d200      	bcs.n	e5f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e5f6:	4604      	mov	r4, r0
    e5f8:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e5fa:	4641      	mov	r1, r8
    e5fc:	f7ff ff96 	bl	e52c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e600:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e602:	4281      	cmp	r1, r0
    e604:	d200      	bcs.n	e608 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e606:	4608      	mov	r0, r1
    e608:	4420      	add	r0, r4
    e60a:	4428      	add	r0, r5
    e60c:	1d80      	adds	r0, r0, #6
    e60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e612:	b510      	push	{r4, lr}
    e614:	4604      	mov	r4, r0
    e616:	2108      	movs	r1, #8
    e618:	4620      	mov	r0, r4
    e61a:	f7f2 fa69 	bl	af0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e61e:	6820      	ldr	r0, [r4, #0]
    e620:	2800      	cmp	r0, #0
    e622:	d102      	bne.n	e62a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e624:	6860      	ldr	r0, [r4, #4]
    e626:	2800      	cmp	r0, #0
    e628:	d0f5      	beq.n	e616 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e62a:	bd10      	pop	{r4, pc}

0000e62c <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e62c:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e630:	2255      	movs	r2, #85	; 0x55
    e632:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e636:	4408      	add	r0, r1
    e638:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e63c:	2233      	movs	r2, #51	; 0x33
    e63e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e642:	4408      	add	r0, r1
    e644:	f000 010f 	and.w	r1, r0, #15
    e648:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e64c:	4770      	bx	lr

0000e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e64e:	6840      	ldr	r0, [r0, #4]
    e650:	2100      	movs	r1, #0
    e652:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e656:	7881      	ldrb	r1, [r0, #2]
    e658:	1c49      	adds	r1, r1, #1
    e65a:	7081      	strb	r1, [r0, #2]
    e65c:	4770      	bx	lr

0000e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e65e:	b510      	push	{r4, lr}
    e660:	6840      	ldr	r0, [r0, #4]
    e662:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e666:	1e49      	subs	r1, r1, #1
    e668:	b249      	sxtb	r1, r1
    e66a:	7001      	strb	r1, [r0, #0]
    e66c:	2900      	cmp	r1, #0
    e66e:	da03      	bge.n	e678 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e670:	2135      	movs	r1, #53	; 0x35
    e672:	204a      	movs	r0, #74	; 0x4a
    e674:	f7f2 f98c 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e678:	bd10      	pop	{r4, pc}

0000e67a <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e67a:	6840      	ldr	r0, [r0, #4]
    e67c:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e680:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e684:	4770      	bx	lr

0000e686 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e686:	6840      	ldr	r0, [r0, #4]
    e688:	2100      	movs	r1, #0
    e68a:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e68e:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e692:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e696:	4770      	bx	lr

0000e698 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e698:	b510      	push	{r4, lr}
    e69a:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e69e:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e6a2:	2000      	movs	r0, #0
    e6a4:	7048      	strb	r0, [r1, #1]
    e6a6:	230a      	movs	r3, #10
    e6a8:	700b      	strb	r3, [r1, #0]
    e6aa:	7108      	strb	r0, [r1, #4]
    e6ac:	f8a1 4005 	strh.w	r4, [r1, #5]
    e6b0:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e6b4:	71c8      	strb	r0, [r1, #7]
    e6b6:	4620      	mov	r0, r4
    e6b8:	f7f2 fe2c 	bl	1314 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e6bc:	f7fe fdf8 	bl	d2b0 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e6c0:	b140      	cbz	r0, e6d4 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e6c2:	4620      	mov	r0, r4
    e6c4:	f7ff f9f8 	bl	dab8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e6c8:	4620      	mov	r0, r4
    e6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6ce:	2100      	movs	r1, #0
    e6d0:	f7f2 bd2e 	b.w	1130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e6d4:	2173      	movs	r1, #115	; 0x73
    e6d6:	2063      	movs	r0, #99	; 0x63
    e6d8:	f7f2 f95a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e6dc <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e6dc:	b570      	push	{r4, r5, r6, lr}
    e6de:	6844      	ldr	r4, [r0, #4]
    e6e0:	460d      	mov	r5, r1
    e6e2:	7803      	ldrb	r3, [r0, #0]
    e6e4:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e6e8:	3480      	adds	r4, #128	; 0x80
    e6ea:	2101      	movs	r1, #1
    e6ec:	4620      	mov	r0, r4
    e6ee:	f7ff facd 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6f2:	b108      	cbz	r0, e6f8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e6f4:	2000      	movs	r0, #0
    e6f6:	bd70      	pop	{r4, r5, r6, pc}
    e6f8:	4628      	mov	r0, r5
    e6fa:	f7ff fe00 	bl	e2fe <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e6fe:	f884 0020 	strb.w	r0, [r4, #32]
    e702:	2006      	movs	r0, #6
    e704:	77e0      	strb	r0, [r4, #31]
    e706:	e7f5      	b.n	e6f4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e708 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e708:	b510      	push	{r4, lr}
    e70a:	6844      	ldr	r4, [r0, #4]
    e70c:	7803      	ldrb	r3, [r0, #0]
    e70e:	2101      	movs	r1, #1
    e710:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e714:	3480      	adds	r4, #128	; 0x80
    e716:	4620      	mov	r0, r4
    e718:	f7ff fab8 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e71c:	2800      	cmp	r0, #0
    e71e:	d101      	bne.n	e724 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e720:	2007      	movs	r0, #7
    e722:	77e0      	strb	r0, [r4, #31]
    e724:	bd10      	pop	{r4, pc}

0000e726 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e726:	2200      	movs	r2, #0
    e728:	704a      	strb	r2, [r1, #1]
    e72a:	2307      	movs	r3, #7
    e72c:	700b      	strb	r3, [r1, #0]
    e72e:	f100 030a 	add.w	r3, r0, #10
    e732:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e736:	84c2      	strh	r2, [r0, #38]	; 0x26
    e738:	6818      	ldr	r0, [r3, #0]
    e73a:	6048      	str	r0, [r1, #4]
    e73c:	6858      	ldr	r0, [r3, #4]
    e73e:	6088      	str	r0, [r1, #8]
    e740:	8918      	ldrh	r0, [r3, #8]
    e742:	8188      	strh	r0, [r1, #12]
    e744:	710a      	strb	r2, [r1, #4]
    e746:	4770      	bx	lr

0000e748 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e748:	b510      	push	{r4, lr}
    e74a:	6844      	ldr	r4, [r0, #4]
    e74c:	7803      	ldrb	r3, [r0, #0]
    e74e:	2100      	movs	r1, #0
    e750:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e754:	3480      	adds	r4, #128	; 0x80
    e756:	4620      	mov	r0, r4
    e758:	f7ff fa98 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e75c:	b110      	cbz	r0, e764 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e75e:	201d      	movs	r0, #29
    e760:	7760      	strb	r0, [r4, #29]
    e762:	bd10      	pop	{r4, pc}
    e764:	2122      	movs	r1, #34	; 0x22
    e766:	2045      	movs	r0, #69	; 0x45
    e768:	f7f2 f912 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e76c <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e76c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e770:	4606      	mov	r6, r0
    e772:	7803      	ldrb	r3, [r0, #0]
    e774:	6840      	ldr	r0, [r0, #4]
    e776:	468b      	mov	fp, r1
    e778:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e77c:	4605      	mov	r5, r0
    e77e:	2700      	movs	r7, #0
    e780:	7f62      	ldrb	r2, [r4, #29]
    e782:	210a      	movs	r1, #10
    e784:	4620      	mov	r0, r4
    e786:	f7ff fa81 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e78a:	b358      	cbz	r0, e7e4 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e78c:	4658      	mov	r0, fp
    e78e:	f7ff fd56 	bl	e23e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e792:	b1f0      	cbz	r0, e7d2 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e794:	4658      	mov	r0, fp
    e796:	f7ff fd4c 	bl	e232 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e79a:	4682      	mov	sl, r0
    e79c:	4658      	mov	r0, fp
    e79e:	f7ff fd4c 	bl	e23a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e7a2:	4681      	mov	r9, r0
    e7a4:	4658      	mov	r0, fp
    e7a6:	f7ff fd42 	bl	e22e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e7aa:	4680      	mov	r8, r0
    e7ac:	4658      	mov	r0, fp
    e7ae:	f7ff fd42 	bl	e236 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e7b2:	4601      	mov	r1, r0
    e7b4:	464b      	mov	r3, r9
    e7b6:	4642      	mov	r2, r8
    e7b8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e7bc:	f8cd a000 	str.w	sl, [sp]
    e7c0:	f7ff fead 	bl	e51e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e7c4:	4628      	mov	r0, r5
    e7c6:	f7ff fe4e 	bl	e466 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e7ca:	2105      	movs	r1, #5
    e7cc:	6870      	ldr	r0, [r6, #4]
    e7ce:	f7f5 fed5 	bl	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e7d2:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e7d6:	7767      	strb	r7, [r4, #29]
    e7d8:	4630      	mov	r0, r6
    e7da:	f000 f805 	bl	e7e8 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e7de:	2000      	movs	r0, #0
    e7e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7e4:	2001      	movs	r0, #1
    e7e6:	e7fb      	b.n	e7e0 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e7e8 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e7e8:	6841      	ldr	r1, [r0, #4]
    e7ea:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e7ee:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e7f2:	2801      	cmp	r0, #1
    e7f4:	d004      	beq.n	e800 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e7f6:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e7fa:	3218      	adds	r2, #24
    e7fc:	f7f4 bae8 	b.w	2dd0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e800:	2002      	movs	r0, #2
    e802:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e806:	4770      	bx	lr

0000e808 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e808:	2200      	movs	r2, #0
    e80a:	704a      	strb	r2, [r1, #1]
    e80c:	220b      	movs	r2, #11
    e80e:	700a      	strb	r2, [r1, #0]
    e810:	f100 020a 	add.w	r2, r0, #10
    e814:	7a83      	ldrb	r3, [r0, #10]
    e816:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e81a:	710b      	strb	r3, [r1, #4]
    e81c:	8800      	ldrh	r0, [r0, #0]
    e81e:	80c8      	strh	r0, [r1, #6]
    e820:	7910      	ldrb	r0, [r2, #4]
    e822:	7208      	strb	r0, [r1, #8]
    e824:	4770      	bx	lr

0000e826 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e826:	2200      	movs	r2, #0
    e828:	704a      	strb	r2, [r1, #1]
    e82a:	220c      	movs	r2, #12
    e82c:	700a      	strb	r2, [r1, #0]
    e82e:	7a82      	ldrb	r2, [r0, #10]
    e830:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e834:	710a      	strb	r2, [r1, #4]
    e836:	8800      	ldrh	r0, [r0, #0]
    e838:	80c8      	strh	r0, [r1, #6]
    e83a:	4770      	bx	lr

0000e83c <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e83c:	2200      	movs	r2, #0
    e83e:	704a      	strb	r2, [r1, #1]
    e840:	2208      	movs	r2, #8
    e842:	700a      	strb	r2, [r1, #0]
    e844:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e848:	8812      	ldrh	r2, [r2, #0]
    e84a:	808a      	strh	r2, [r1, #4]
    e84c:	68c2      	ldr	r2, [r0, #12]
    e84e:	f8c1 2006 	str.w	r2, [r1, #6]
    e852:	6902      	ldr	r2, [r0, #16]
    e854:	f8c1 200a 	str.w	r2, [r1, #10]
    e858:	8a80      	ldrh	r0, [r0, #20]
    e85a:	81c8      	strh	r0, [r1, #14]
    e85c:	4770      	bx	lr
    e85e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e862:	f001 0307 	and.w	r3, r1, #7
    e866:	7802      	ldrb	r2, [r0, #0]
    e868:	2101      	movs	r1, #1
    e86a:	4099      	lsls	r1, r3
    e86c:	430a      	orrs	r2, r1
    e86e:	7002      	strb	r2, [r0, #0]
    e870:	4770      	bx	lr

0000e872 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e872:	b510      	push	{r4, lr}
    e874:	6844      	ldr	r4, [r0, #4]
    e876:	7803      	ldrb	r3, [r0, #0]
    e878:	2100      	movs	r1, #0
    e87a:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e87e:	3480      	adds	r4, #128	; 0x80
    e880:	4620      	mov	r0, r4
    e882:	f7ff fa03 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e886:	b110      	cbz	r0, e88e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e888:	2004      	movs	r0, #4
    e88a:	7760      	strb	r0, [r4, #29]
    e88c:	bd10      	pop	{r4, pc}
    e88e:	21ab      	movs	r1, #171	; 0xab
    e890:	201c      	movs	r0, #28
    e892:	f7f2 f87d 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e896 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e896:	b510      	push	{r4, lr}
    e898:	6841      	ldr	r1, [r0, #4]
    e89a:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e89e:	07d2      	lsls	r2, r2, #31
    e8a0:	d00b      	beq.n	e8ba <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e8a2:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e8a6:	1e52      	subs	r2, r2, #1
    e8a8:	b252      	sxtb	r2, r2
    e8aa:	700a      	strb	r2, [r1, #0]
    e8ac:	6840      	ldr	r0, [r0, #4]
    e8ae:	2a00      	cmp	r2, #0
    e8b0:	da05      	bge.n	e8be <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e8b2:	21ba      	movs	r1, #186	; 0xba
    e8b4:	201c      	movs	r0, #28
    e8b6:	f7f2 f86b 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8ba:	21b8      	movs	r1, #184	; 0xb8
    e8bc:	e7fa      	b.n	e8b4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e8be:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e8c2:	f021 0101 	bic.w	r1, r1, #1
    e8c6:	6001      	str	r1, [r0, #0]
    e8c8:	bd10      	pop	{r4, pc}
    e8ca:	2200      	movs	r2, #0
    e8cc:	704a      	strb	r2, [r1, #1]
    e8ce:	2206      	movs	r2, #6
    e8d0:	700a      	strb	r2, [r1, #0]
    e8d2:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e8d6:	604a      	str	r2, [r1, #4]
    e8d8:	6842      	ldr	r2, [r0, #4]
    e8da:	608a      	str	r2, [r1, #8]
    e8dc:	8902      	ldrh	r2, [r0, #8]
    e8de:	818a      	strh	r2, [r1, #12]
    e8e0:	7a80      	ldrb	r0, [r0, #10]
    e8e2:	7388      	strb	r0, [r1, #14]
    e8e4:	4770      	bx	lr

0000e8e6 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e8e6:	2200      	movs	r2, #0
    e8e8:	704a      	strb	r2, [r1, #1]
    e8ea:	220e      	movs	r2, #14
    e8ec:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e8f0:	700a      	strb	r2, [r1, #0]
    e8f2:	8800      	ldrh	r0, [r0, #0]
    e8f4:	8088      	strh	r0, [r1, #4]
    e8f6:	4770      	bx	lr

0000e8f8 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e8f8:	b510      	push	{r4, lr}
    e8fa:	6844      	ldr	r4, [r0, #4]
    e8fc:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e900:	3480      	adds	r4, #128	; 0x80
    e902:	f011 0f04 	tst.w	r1, #4
    e906:	d001      	beq.n	e90c <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e908:	2001      	movs	r0, #1
    e90a:	bd10      	pop	{r4, pc}
    e90c:	f7ff fe9f 	bl	e64e <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e910:	68e0      	ldr	r0, [r4, #12]
    e912:	f040 0004 	orr.w	r0, r0, #4
    e916:	60e0      	str	r0, [r4, #12]
    e918:	2000      	movs	r0, #0
    e91a:	bd10      	pop	{r4, pc}

0000e91c <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e91c:	b510      	push	{r4, lr}
    e91e:	6844      	ldr	r4, [r0, #4]
    e920:	7803      	ldrb	r3, [r0, #0]
    e922:	2100      	movs	r1, #0
    e924:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e928:	3480      	adds	r4, #128	; 0x80
    e92a:	4620      	mov	r0, r4
    e92c:	f7ff f9ae 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e930:	b110      	cbz	r0, e938 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e932:	200f      	movs	r0, #15
    e934:	7760      	strb	r0, [r4, #29]
    e936:	bd10      	pop	{r4, pc}
    e938:	216e      	movs	r1, #110	; 0x6e
    e93a:	204b      	movs	r0, #75	; 0x4b
    e93c:	f7f2 f828 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e940 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e940:	b510      	push	{r4, lr}
    e942:	6844      	ldr	r4, [r0, #4]
    e944:	7803      	ldrb	r3, [r0, #0]
    e946:	2109      	movs	r1, #9
    e948:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e94c:	3480      	adds	r4, #128	; 0x80
    e94e:	4620      	mov	r0, r4
    e950:	f7ff f99c 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e954:	2800      	cmp	r0, #0
    e956:	d005      	beq.n	e964 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e958:	2000      	movs	r0, #0
    e95a:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e95e:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e962:	7760      	strb	r0, [r4, #29]
    e964:	bd10      	pop	{r4, pc}

0000e966 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e966:	6841      	ldr	r1, [r0, #4]
    e968:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e96c:	f022 0204 	bic.w	r2, r2, #4
    e970:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e974:	f7ff be73 	b.w	e65e <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e978 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e978:	b510      	push	{r4, lr}
    e97a:	2300      	movs	r3, #0
    e97c:	704b      	strb	r3, [r1, #1]
    e97e:	2401      	movs	r4, #1
    e980:	700c      	strb	r4, [r1, #0]
    e982:	f100 0209 	add.w	r2, r0, #9
    e986:	710b      	strb	r3, [r1, #4]
    e988:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e98c:	f8a1 0005 	strh.w	r0, [r1, #5]
    e990:	f812 0b01 	ldrb.w	r0, [r2], #1
    e994:	71c8      	strb	r0, [r1, #7]
    e996:	8810      	ldrh	r0, [r2, #0]
    e998:	8108      	strh	r0, [r1, #8]
    e99a:	8850      	ldrh	r0, [r2, #2]
    e99c:	8148      	strh	r0, [r1, #10]
    e99e:	bd10      	pop	{r4, pc}

0000e9a0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e9a0:	b570      	push	{r4, r5, r6, lr}
    e9a2:	7803      	ldrb	r3, [r0, #0]
    e9a4:	6840      	ldr	r0, [r0, #4]
    e9a6:	2500      	movs	r5, #0
    e9a8:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e9ac:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e9b0:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e9b4:	0789      	lsls	r1, r1, #30
    e9b6:	d40e      	bmi.n	e9d6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e9b8:	7f62      	ldrb	r2, [r4, #29]
    e9ba:	2100      	movs	r1, #0
    e9bc:	4620      	mov	r0, r4
    e9be:	f7ff f965 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e9c2:	b130      	cbz	r0, e9d2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e9c4:	2001      	movs	r0, #1
    e9c6:	7760      	strb	r0, [r4, #29]
    e9c8:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e9cc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e9d0:	bd70      	pop	{r4, r5, r6, pc}
    e9d2:	216e      	movs	r1, #110	; 0x6e
    e9d4:	e00b      	b.n	e9ee <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e9d6:	7b21      	ldrb	r1, [r4, #12]
    e9d8:	0789      	lsls	r1, r1, #30
    e9da:	d50f      	bpl.n	e9fc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e9dc:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e9e0:	1e49      	subs	r1, r1, #1
    e9e2:	b249      	sxtb	r1, r1
    e9e4:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e9e8:	2900      	cmp	r1, #0
    e9ea:	da03      	bge.n	e9f4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e9ec:	2180      	movs	r1, #128	; 0x80
    e9ee:	2040      	movs	r0, #64	; 0x40
    e9f0:	f7f1 ffce 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9f4:	68e1      	ldr	r1, [r4, #12]
    e9f6:	f021 0102 	bic.w	r1, r1, #2
    e9fa:	60e1      	str	r1, [r4, #12]
    e9fc:	7485      	strb	r5, [r0, #18]
    e9fe:	bd70      	pop	{r4, r5, r6, pc}
    ea00:	2200      	movs	r2, #0
    ea02:	704a      	strb	r2, [r1, #1]
    ea04:	2219      	movs	r2, #25
    ea06:	700a      	strb	r2, [r1, #0]
    ea08:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ea0c:	6048      	str	r0, [r1, #4]
    ea0e:	4770      	bx	lr
    ea10:	b510      	push	{r4, lr}
    ea12:	4604      	mov	r4, r0
    ea14:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ea18:	e9d4 1000 	ldrd	r1, r0, [r4]
    ea1c:	4050      	eors	r0, r2
    ea1e:	ea70 0101 	orns	r1, r0, r1
    ea22:	d008      	beq.n	ea36 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea24:	f002 f88d 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea28:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea2c:	1a80      	subs	r0, r0, r2
    ea2e:	4199      	sbcs	r1, r3
    ea30:	d301      	bcc.n	ea36 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea32:	2001      	movs	r0, #1
    ea34:	bd10      	pop	{r4, pc}
    ea36:	2000      	movs	r0, #0
    ea38:	bd10      	pop	{r4, pc}

0000ea3a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ea3a:	b508      	push	{r3, lr}
    ea3c:	f000 f804 	bl	ea48 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ea40:	466a      	mov	r2, sp
    ea42:	f7f4 fd1b 	bl	347c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ea46:	bd08      	pop	{r3, pc}
    ea48:	b530      	push	{r4, r5, lr}
    ea4a:	784c      	ldrb	r4, [r1, #1]
    ea4c:	4603      	mov	r3, r0
    ea4e:	7808      	ldrb	r0, [r1, #0]
    ea50:	788d      	ldrb	r5, [r1, #2]
    ea52:	0e22      	lsrs	r2, r4, #24
    ea54:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ea58:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ea5c:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ea60:	78cd      	ldrb	r5, [r1, #3]
    ea62:	790c      	ldrb	r4, [r1, #4]
    ea64:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ea68:	4322      	orrs	r2, r4
    ea6a:	7949      	ldrb	r1, [r1, #5]
    ea6c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ea70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ea74:	4611      	mov	r1, r2
    ea76:	2b01      	cmp	r3, #1
    ea78:	d101      	bne.n	ea7e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ea7a:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    ea7e:	bd30      	pop	{r4, r5, pc}
    ea80:	2801      	cmp	r0, #1
    ea82:	d102      	bne.n	ea8a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    ea84:	7948      	ldrb	r0, [r1, #5]
    ea86:	0980      	lsrs	r0, r0, #6
    ea88:	d001      	beq.n	ea8e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    ea8a:	2000      	movs	r0, #0
    ea8c:	4770      	bx	lr
    ea8e:	2001      	movs	r0, #1
    ea90:	4770      	bx	lr
    ea92:	2801      	cmp	r0, #1
    ea94:	d106      	bne.n	eaa4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ea96:	7948      	ldrb	r0, [r1, #5]
    ea98:	2101      	movs	r1, #1
    ea9a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ea9e:	d101      	bne.n	eaa4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    eaa0:	2001      	movs	r0, #1
    eaa2:	4770      	bx	lr
    eaa4:	2000      	movs	r0, #0
    eaa6:	4770      	bx	lr
    eaa8:	2802      	cmp	r0, #2
    eaaa:	d003      	beq.n	eab4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    eaac:	2803      	cmp	r0, #3
    eaae:	d001      	beq.n	eab4 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    eab0:	2000      	movs	r0, #0
    eab2:	4770      	bx	lr
    eab4:	2001      	movs	r0, #1
    eab6:	4770      	bx	lr

0000eab8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    eab8:	b510      	push	{r4, lr}
    eaba:	4604      	mov	r4, r0
    eabc:	7c00      	ldrb	r0, [r0, #16]
    eabe:	f7ff fff3 	bl	eaa8 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    eac2:	b148      	cbz	r0, ead8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eac4:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    eac8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    eacc:	f7ff f890 	bl	dbf0 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ead0:	2808      	cmp	r0, #8
    ead2:	d001      	beq.n	ead8 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ead4:	2001      	movs	r0, #1
    ead6:	bd10      	pop	{r4, pc}
    ead8:	7c20      	ldrb	r0, [r4, #16]
    eada:	b118      	cbz	r0, eae4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eadc:	2802      	cmp	r0, #2
    eade:	d001      	beq.n	eae4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eae0:	7de0      	ldrb	r0, [r4, #23]
    eae2:	bd10      	pop	{r4, pc}
    eae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eae8:	2000      	movs	r0, #0
    eaea:	f7f2 bee1 	b.w	18b0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000eaee <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    eaee:	b508      	push	{r3, lr}
    eaf0:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eaf4:	f88d 1000 	strb.w	r1, [sp]
    eaf8:	9900      	ldr	r1, [sp, #0]
    eafa:	9100      	str	r1, [sp, #0]
    eafc:	f89d 1000 	ldrb.w	r1, [sp]
    eb00:	b941      	cbnz	r1, eb14 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    eb02:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    eb06:	f88d 1000 	strb.w	r1, [sp]
    eb0a:	9900      	ldr	r1, [sp, #0]
    eb0c:	9100      	str	r1, [sp, #0]
    eb0e:	f89d 1000 	ldrb.w	r1, [sp]
    eb12:	b109      	cbz	r1, eb18 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    eb14:	2001      	movs	r0, #1
    eb16:	bd08      	pop	{r3, pc}
    eb18:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    eb1c:	f88d 0000 	strb.w	r0, [sp]
    eb20:	9800      	ldr	r0, [sp, #0]
    eb22:	9000      	str	r0, [sp, #0]
    eb24:	f89d 0000 	ldrb.w	r0, [sp]
    eb28:	2000      	movs	r0, #0
    eb2a:	bd08      	pop	{r3, pc}

0000eb2c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eb2c:	20ff      	movs	r0, #255	; 0xff
    eb2e:	7008      	strb	r0, [r1, #0]
    eb30:	6b48      	ldr	r0, [r1, #52]	; 0x34
    eb32:	f7fe bf62 	b.w	d9fa <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000eb36 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    eb36:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eb38:	460d      	mov	r5, r1
    eb3a:	4604      	mov	r4, r0
    eb3c:	f44f 728c 	mov.w	r2, #280	; 0x118
    eb40:	2100      	movs	r1, #0
    eb42:	f002 fa0a 	bl	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb46:	20ff      	movs	r0, #255	; 0xff
    eb48:	7020      	strb	r0, [r4, #0]
    eb4a:	207f      	movs	r0, #127	; 0x7f
    eb4c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    eb50:	2013      	movs	r0, #19
    eb52:	8060      	strh	r0, [r4, #2]
    eb54:	f242 7010 	movw	r0, #10000	; 0x2710
    eb58:	8460      	strh	r0, [r4, #34]	; 0x22
    eb5a:	f7f2 fc99 	bl	1490 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    eb5e:	4601      	mov	r1, r0
    eb60:	6360      	str	r0, [r4, #52]	; 0x34
    eb62:	2200      	movs	r2, #0
    eb64:	4668      	mov	r0, sp
    eb66:	f7fe feae 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb6a:	2200      	movs	r2, #0
    eb6c:	2101      	movs	r1, #1
    eb6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb70:	f7fe ff23 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb74:	2204      	movs	r2, #4
    eb76:	4668      	mov	r0, sp
    eb78:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eb7a:	f7fe fea4 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb7e:	2200      	movs	r2, #0
    eb80:	4611      	mov	r1, r2
    eb82:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb84:	f7fe ff19 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb88:	73a5      	strb	r5, [r4, #14]
    eb8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    eb8e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eb92:	f000 b958 	b.w	ee46 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000eb96 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    eb96:	7880      	ldrb	r0, [r0, #2]
    eb98:	f3c0 0080 	ubfx	r0, r0, #2, #1
    eb9c:	b108      	cbz	r0, eba2 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    eb9e:	2000      	movs	r0, #0
    eba0:	4770      	bx	lr
    eba2:	201f      	movs	r0, #31
    eba4:	4770      	bx	lr

0000eba6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    eba6:	f7f5 b9cf 	b.w	3f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000ebaa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ebaa:	6880      	ldr	r0, [r0, #8]
    ebac:	4770      	bx	lr

0000ebae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ebae:	2001      	movs	r0, #1
    ebb0:	4770      	bx	lr

0000ebb2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ebb2:	b510      	push	{r4, lr}
    ebb4:	4604      	mov	r4, r0
    ebb6:	3028      	adds	r0, #40	; 0x28
    ebb8:	f000 f905 	bl	edc6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ebbc:	8861      	ldrh	r1, [r4, #2]
    ebbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc2:	2228      	movs	r2, #40	; 0x28
    ebc4:	f7f5 bb90 	b.w	42e8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ebc8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ebc8:	2200      	movs	r2, #0
    ebca:	8602      	strh	r2, [r0, #48]	; 0x30
    ebcc:	8843      	ldrh	r3, [r0, #2]
    ebce:	2b1d      	cmp	r3, #29
    ebd0:	d001      	beq.n	ebd6 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ebd2:	7341      	strb	r1, [r0, #13]
    ebd4:	4770      	bx	lr
    ebd6:	7342      	strb	r2, [r0, #13]
    ebd8:	4770      	bx	lr

0000ebda <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ebda:	b510      	push	{r4, lr}
    ebdc:	2400      	movs	r4, #0
    ebde:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ebe0:	f7fe fee3 	bl	d9aa <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ebe4:	4384      	bics	r4, r0
    ebe6:	f084 0001 	eor.w	r0, r4, #1
    ebea:	bd10      	pop	{r4, pc}

0000ebec <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ebec:	2000      	movs	r0, #0
    ebee:	4770      	bx	lr

0000ebf0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ebf0:	7880      	ldrb	r0, [r0, #2]
    ebf2:	f000 0001 	and.w	r0, r0, #1
    ebf6:	4770      	bx	lr

0000ebf8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ebf8:	7880      	ldrb	r0, [r0, #2]
    ebfa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ebfe:	4770      	bx	lr

0000ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ec00:	2001      	movs	r0, #1
    ec02:	4770      	bx	lr

0000ec04 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ec04:	7880      	ldrb	r0, [r0, #2]
    ec06:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ec0a:	4770      	bx	lr

0000ec0c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ec0c:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ec10:	4770      	bx	lr

0000ec12 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ec12:	7800      	ldrb	r0, [r0, #0]
    ec14:	28ff      	cmp	r0, #255	; 0xff
    ec16:	d001      	beq.n	ec1c <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ec18:	2001      	movs	r0, #1
    ec1a:	4770      	bx	lr
    ec1c:	2000      	movs	r0, #0
    ec1e:	4770      	bx	lr

0000ec20 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    ec20:	f800 1f20 	strb.w	r1, [r0, #32]!
    ec24:	7042      	strb	r2, [r0, #1]
    ec26:	4770      	bx	lr

0000ec28 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ec28:	680a      	ldr	r2, [r1, #0]
    ec2a:	f840 2f11 	str.w	r2, [r0, #17]!
    ec2e:	8889      	ldrh	r1, [r1, #4]
    ec30:	8081      	strh	r1, [r0, #4]
    ec32:	2101      	movs	r1, #1
    ec34:	7181      	strb	r1, [r0, #6]
    ec36:	4770      	bx	lr

0000ec38 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ec38:	7b00      	ldrb	r0, [r0, #12]
    ec3a:	4770      	bx	lr

0000ec3c <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ec3c:	2001      	movs	r0, #1
    ec3e:	4770      	bx	lr

0000ec40 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ec40:	61c1      	str	r1, [r0, #28]
    ec42:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ec46:	724a      	strb	r2, [r1, #9]
    ec48:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ec4c:	f8c1 200a 	str.w	r2, [r1, #10]
    ec50:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ec54:	81c8      	strh	r0, [r1, #14]
    ec56:	4770      	bx	lr

0000ec58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ec58:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ec5c:	4770      	bx	lr

0000ec5e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ec5e:	7bc0      	ldrb	r0, [r0, #15]
    ec60:	2800      	cmp	r0, #0
    ec62:	d000      	beq.n	ec66 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ec64:	2001      	movs	r0, #1
    ec66:	4770      	bx	lr
    ec68:	7802      	ldrb	r2, [r0, #0]
    ec6a:	2320      	movs	r3, #32
    ec6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ec70:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ec74:	430a      	orrs	r2, r1
    ec76:	7002      	strb	r2, [r0, #0]
    ec78:	4770      	bx	lr
    ec7a:	2101      	movs	r1, #1
    ec7c:	f7f4 bdb4 	b.w	37e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec80:	2101      	movs	r1, #1
    ec82:	f7f4 bdb1 	b.w	37e8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ec86:	2200      	movs	r2, #0
    ec88:	704a      	strb	r2, [r1, #1]
    ec8a:	2205      	movs	r2, #5
    ec8c:	700a      	strb	r2, [r1, #0]
    ec8e:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ec92:	6048      	str	r0, [r1, #4]
    ec94:	4770      	bx	lr
    ec96:	b510      	push	{r4, lr}
    ec98:	460c      	mov	r4, r1
    ec9a:	2100      	movs	r1, #0
    ec9c:	7061      	strb	r1, [r4, #1]
    ec9e:	2112      	movs	r1, #18
    eca0:	7021      	strb	r1, [r4, #0]
    eca2:	f100 0109 	add.w	r1, r0, #9
    eca6:	2221      	movs	r2, #33	; 0x21
    eca8:	1d20      	adds	r0, r4, #4
    ecaa:	f002 f8dc 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ecae:	2001      	movs	r0, #1
    ecb0:	71e0      	strb	r0, [r4, #7]
    ecb2:	7920      	ldrb	r0, [r4, #4]
    ecb4:	2800      	cmp	r0, #0
    ecb6:	d015      	beq.n	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ecb8:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ecbc:	2100      	movs	r1, #0
    ecbe:	4620      	mov	r0, r4
    ecc0:	f7f2 f994 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ecc4:	2800      	cmp	r0, #0
    ecc6:	d00d      	beq.n	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ecc8:	8800      	ldrh	r0, [r0, #0]
    ecca:	f7fe fef5 	bl	dab8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ecce:	2100      	movs	r1, #0
    ecd0:	4620      	mov	r0, r4
    ecd2:	f7f2 fa2d 	bl	1130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ecd6:	2800      	cmp	r0, #0
    ecd8:	d004      	beq.n	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ecda:	f240 2151 	movw	r1, #593	; 0x251
    ecde:	202d      	movs	r0, #45	; 0x2d
    ece0:	f7f1 fe56 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ece4:	bd10      	pop	{r4, pc}
    ece6:	2200      	movs	r2, #0
    ece8:	704a      	strb	r2, [r1, #1]
    ecea:	221a      	movs	r2, #26
    ecec:	700a      	strb	r2, [r1, #0]
    ecee:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ecf2:	604a      	str	r2, [r1, #4]
    ecf4:	6842      	ldr	r2, [r0, #4]
    ecf6:	608a      	str	r2, [r1, #8]
    ecf8:	7a00      	ldrb	r0, [r0, #8]
    ecfa:	7308      	strb	r0, [r1, #12]
    ecfc:	4770      	bx	lr
    ecfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed02:	4604      	mov	r4, r0
    ed04:	460f      	mov	r7, r1
    ed06:	7e40      	ldrb	r0, [r0, #25]
    ed08:	f7f3 fb0e 	bl	2328 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ed0c:	4606      	mov	r6, r0
    ed0e:	7e20      	ldrb	r0, [r4, #24]
    ed10:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ed14:	b120      	cbz	r0, ed20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    ed16:	b11e      	cbz	r6, ed20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    ed18:	7e60      	ldrb	r0, [r4, #25]
    ed1a:	f7f3 faf9 	bl	2310 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ed1e:	b1a0      	cbz	r0, ed4a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    ed20:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ed24:	2800      	cmp	r0, #0
    ed26:	d024      	beq.n	ed72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    ed28:	7ea0      	ldrb	r0, [r4, #26]
    ed2a:	2800      	cmp	r0, #0
    ed2c:	d021      	beq.n	ed72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    ed2e:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ed32:	4629      	mov	r1, r5
    ed34:	f7ff fead 	bl	ea92 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    ed38:	b1a8      	cbz	r0, ed66 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    ed3a:	f7f3 fae5 	bl	2308 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ed3e:	463a      	mov	r2, r7
    ed40:	4629      	mov	r1, r5
    ed42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed46:	f7fe beeb 	b.w	db20 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed4a:	2001      	movs	r0, #1
    ed4c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ed50:	463a      	mov	r2, r7
    ed52:	4629      	mov	r1, r5
    ed54:	4630      	mov	r0, r6
    ed56:	f7fe fee3 	bl	db20 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed5a:	7e61      	ldrb	r1, [r4, #25]
    ed5c:	4628      	mov	r0, r5
    ed5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed62:	f7f3 baed 	b.w	2340 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed66:	4639      	mov	r1, r7
    ed68:	4628      	mov	r0, r5
    ed6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed6e:	f7fe bec6 	b.w	dafe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ed72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed76:	b510      	push	{r4, lr}
    ed78:	4604      	mov	r4, r0
    ed7a:	4608      	mov	r0, r1
    ed7c:	f7f9 f964 	bl	8048 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ed80:	7921      	ldrb	r1, [r4, #4]
    ed82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed86:	2025      	movs	r0, #37	; 0x25
    ed88:	f7f9 b934 	b.w	7ff4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ed8c:	b570      	push	{r4, r5, r6, lr}
    ed8e:	4614      	mov	r4, r2
    ed90:	461d      	mov	r5, r3
    ed92:	4606      	mov	r6, r0
    ed94:	f001 fed5 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed98:	1900      	adds	r0, r0, r4
    ed9a:	4169      	adcs	r1, r5
    ed9c:	e9c6 0100 	strd	r0, r1, [r6]
    eda0:	bd70      	pop	{r4, r5, r6, pc}

0000eda2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    eda2:	b570      	push	{r4, r5, r6, lr}
    eda4:	7001      	strb	r1, [r0, #0]
    eda6:	7042      	strb	r2, [r0, #1]
    eda8:	4614      	mov	r4, r2
    edaa:	460d      	mov	r5, r1
    edac:	7880      	ldrb	r0, [r0, #2]
    edae:	f000 f87f 	bl	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edb2:	fb10 f005 	smulbb	r0, r0, r5
    edb6:	4360      	muls	r0, r4
    edb8:	28ff      	cmp	r0, #255	; 0xff
    edba:	d303      	bcc.n	edc4 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    edbc:	215c      	movs	r1, #92	; 0x5c
    edbe:	202e      	movs	r0, #46	; 0x2e
    edc0:	f7f1 fde6 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edc4:	bd70      	pop	{r4, r5, r6, pc}

0000edc6 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    edc6:	b510      	push	{r4, lr}
    edc8:	4604      	mov	r4, r0
    edca:	7880      	ldrb	r0, [r0, #2]
    edcc:	f000 f870 	bl	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edd0:	7861      	ldrb	r1, [r4, #1]
    edd2:	7822      	ldrb	r2, [r4, #0]
    edd4:	fb11 f102 	smulbb	r1, r1, r2
    edd8:	4348      	muls	r0, r1
    edda:	b2c0      	uxtb	r0, r0
    eddc:	bd10      	pop	{r4, pc}

0000edde <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    edde:	b510      	push	{r4, lr}
    ede0:	4604      	mov	r4, r0
    ede2:	f000 f84d 	bl	ee80 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ede6:	7961      	ldrb	r1, [r4, #5]
    ede8:	1c49      	adds	r1, r1, #1
    edea:	b2c9      	uxtb	r1, r1
    edec:	7161      	strb	r1, [r4, #5]
    edee:	7862      	ldrb	r2, [r4, #1]
    edf0:	4291      	cmp	r1, r2
    edf2:	d10b      	bne.n	ee0c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    edf4:	2200      	movs	r2, #0
    edf6:	7162      	strb	r2, [r4, #5]
    edf8:	78e1      	ldrb	r1, [r4, #3]
    edfa:	4301      	orrs	r1, r0
    edfc:	70e1      	strb	r1, [r4, #3]
    edfe:	78a3      	ldrb	r3, [r4, #2]
    ee00:	4299      	cmp	r1, r3
    ee02:	d103      	bne.n	ee0c <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee04:	70e2      	strb	r2, [r4, #3]
    ee06:	7921      	ldrb	r1, [r4, #4]
    ee08:	1c49      	adds	r1, r1, #1
    ee0a:	7121      	strb	r1, [r4, #4]
    ee0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee10:	f000 b825 	b.w	ee5e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ee14 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ee14:	7081      	strb	r1, [r0, #2]
    ee16:	4770      	bx	lr

0000ee18 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ee18:	b570      	push	{r4, r5, r6, lr}
    ee1a:	4604      	mov	r4, r0
    ee1c:	7880      	ldrb	r0, [r0, #2]
    ee1e:	f000 f847 	bl	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee22:	7861      	ldrb	r1, [r4, #1]
    ee24:	fb11 f500 	smulbb	r5, r1, r0
    ee28:	78e0      	ldrb	r0, [r4, #3]
    ee2a:	f000 f841 	bl	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee2e:	7861      	ldrb	r1, [r4, #1]
    ee30:	7962      	ldrb	r2, [r4, #5]
    ee32:	fb10 2001 	smlabb	r0, r0, r1, r2
    ee36:	7821      	ldrb	r1, [r4, #0]
    ee38:	7922      	ldrb	r2, [r4, #4]
    ee3a:	1a89      	subs	r1, r1, r2
    ee3c:	fb11 f105 	smulbb	r1, r1, r5
    ee40:	1a08      	subs	r0, r1, r0
    ee42:	b2c0      	uxtb	r0, r0
    ee44:	bd70      	pop	{r4, r5, r6, pc}

0000ee46 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ee46:	2100      	movs	r1, #0
    ee48:	6001      	str	r1, [r0, #0]
    ee4a:	8081      	strh	r1, [r0, #4]
    ee4c:	2101      	movs	r1, #1
    ee4e:	7041      	strb	r1, [r0, #1]
    ee50:	7001      	strb	r1, [r0, #0]
    ee52:	4770      	bx	lr

0000ee54 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ee54:	2100      	movs	r1, #0
    ee56:	70c1      	strb	r1, [r0, #3]
    ee58:	7141      	strb	r1, [r0, #5]
    ee5a:	7101      	strb	r1, [r0, #4]
    ee5c:	4770      	bx	lr
    ee5e:	b510      	push	{r4, lr}
    ee60:	2801      	cmp	r0, #1
    ee62:	d007      	beq.n	ee74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ee64:	2802      	cmp	r0, #2
    ee66:	d007      	beq.n	ee78 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ee68:	2804      	cmp	r0, #4
    ee6a:	d007      	beq.n	ee7c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ee6c:	2139      	movs	r1, #57	; 0x39
    ee6e:	202e      	movs	r0, #46	; 0x2e
    ee70:	f7f1 fd8e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee74:	2025      	movs	r0, #37	; 0x25
    ee76:	bd10      	pop	{r4, pc}
    ee78:	2026      	movs	r0, #38	; 0x26
    ee7a:	bd10      	pop	{r4, pc}
    ee7c:	2027      	movs	r0, #39	; 0x27
    ee7e:	bd10      	pop	{r4, pc}
    ee80:	4601      	mov	r1, r0
    ee82:	2000      	movs	r0, #0
    ee84:	788a      	ldrb	r2, [r1, #2]
    ee86:	07d3      	lsls	r3, r2, #31
    ee88:	d002      	beq.n	ee90 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ee8a:	78cb      	ldrb	r3, [r1, #3]
    ee8c:	07db      	lsls	r3, r3, #31
    ee8e:	d006      	beq.n	ee9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ee90:	0793      	lsls	r3, r2, #30
    ee92:	d506      	bpl.n	eea2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee94:	78cb      	ldrb	r3, [r1, #3]
    ee96:	079b      	lsls	r3, r3, #30
    ee98:	d403      	bmi.n	eea2 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ee9a:	2002      	movs	r0, #2
    ee9c:	4770      	bx	lr
    ee9e:	2001      	movs	r0, #1
    eea0:	4770      	bx	lr
    eea2:	0752      	lsls	r2, r2, #29
    eea4:	d5fc      	bpl.n	eea0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eea6:	78c9      	ldrb	r1, [r1, #3]
    eea8:	0749      	lsls	r1, r1, #29
    eeaa:	d4f9      	bmi.n	eea0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eeac:	2004      	movs	r0, #4
    eeae:	4770      	bx	lr
    eeb0:	f3c0 0180 	ubfx	r1, r0, #2, #1
    eeb4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    eeb8:	4411      	add	r1, r2
    eeba:	f000 0001 	and.w	r0, r0, #1
    eebe:	4408      	add	r0, r1
    eec0:	4770      	bx	lr

0000eec2 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eec2:	f240 315a 	movw	r1, #858	; 0x35a
    eec6:	4348      	muls	r0, r1
    eec8:	4770      	bx	lr

0000eeca <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    eeca:	f240 20ef 	movw	r0, #751	; 0x2ef
    eece:	4770      	bx	lr
    eed0:	041c020e 	.word	0x041c020e
    eed4:	0c600630 	.word	0x0c600630
    eed8:	06b4035a 	.word	0x06b4035a
    eedc:	0bf505c5 	.word	0x0bf505c5
    eee0:	01a31225 	.word	0x01a31225
    eee4:	05bf03b1 	.word	0x05bf03b1
    eee8:	064902ef 	.word	0x064902ef
    eeec:	09a3      	.short	0x09a3

0000eeee <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    eeee:	b510      	push	{r4, lr}
    eef0:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    eef4:	b109      	cbz	r1, eefa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    eef6:	2000      	movs	r0, #0
    eef8:	bd10      	pop	{r4, pc}
    eefa:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    eefe:	b131      	cbz	r1, ef0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef00:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ef04:	428a      	cmp	r2, r1
    ef06:	d902      	bls.n	ef0e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef08:	f7f4 fc56 	bl	37b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef0c:	e7f3      	b.n	eef6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ef0e:	2001      	movs	r0, #1
    ef10:	bd10      	pop	{r4, pc}

0000ef12 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ef12:	b510      	push	{r4, lr}
    ef14:	b131      	cbz	r1, ef24 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ef16:	2901      	cmp	r1, #1
    ef18:	d008      	beq.n	ef2c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ef1a:	f240 71d3 	movw	r1, #2003	; 0x7d3
    ef1e:	2030      	movs	r0, #48	; 0x30
    ef20:	f7f1 fd36 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef28:	f000 b9c7 	b.w	f2ba <__kernel_ram_size+0x2>
    ef2c:	2100      	movs	r1, #0
    ef2e:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ef32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef36:	f000 b923 	b.w	f180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000ef3a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ef3a:	b510      	push	{r4, lr}
    ef3c:	4604      	mov	r4, r0
    ef3e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef42:	2800      	cmp	r0, #0
    ef44:	d019      	beq.n	ef7a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ef46:	2001      	movs	r0, #1
    ef48:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ef4c:	4601      	mov	r1, r0
    ef4e:	4620      	mov	r0, r4
    ef50:	f7ff fe82 	bl	ec58 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ef54:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ef58:	b170      	cbz	r0, ef78 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ef5a:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ef5e:	f7fb fcc7 	bl	a8f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ef62:	7820      	ldrb	r0, [r4, #0]
    ef64:	f7fb fe3c 	bl	abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ef68:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ef6c:	f7fb fe16 	bl	ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef70:	b120      	cbz	r0, ef7c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ef72:	2000      	movs	r0, #0
    ef74:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ef78:	2000      	movs	r0, #0
    ef7a:	bd10      	pop	{r4, pc}
    ef7c:	f240 210b 	movw	r1, #523	; 0x20b
    ef80:	2030      	movs	r0, #48	; 0x30
    ef82:	f7f1 fd05 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef86 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ef86:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ef8a:	4770      	bx	lr

0000ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ef8c:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef90:	4770      	bx	lr

0000ef92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ef92:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ef94:	4604      	mov	r4, r0
    ef96:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ef9a:	2800      	cmp	r0, #0
    ef9c:	d15f      	bne.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ef9e:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    efa2:	2803      	cmp	r0, #3
    efa4:	d15b      	bne.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efa6:	f001 fdcc 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    efaa:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    efae:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    efb2:	1ac0      	subs	r0, r0, r3
    efb4:	eb61 0102 	sbc.w	r1, r1, r2
    efb8:	2300      	movs	r3, #0
    efba:	461a      	mov	r2, r3
    efbc:	1a1b      	subs	r3, r3, r0
    efbe:	418a      	sbcs	r2, r1
    efc0:	da4d      	bge.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efc2:	1c42      	adds	r2, r0, #1
    efc4:	f171 0100 	sbcs.w	r1, r1, #0
    efc8:	db02      	blt.n	efd0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    efca:	f240 610b 	movw	r1, #1547	; 0x60b
    efce:	e036      	b.n	f03e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    efd0:	6921      	ldr	r1, [r4, #16]
    efd2:	b111      	cbz	r1, efda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    efd4:	fbb0 f0f1 	udiv	r0, r0, r1
    efd8:	e000      	b.n	efdc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    efda:	2000      	movs	r0, #0
    efdc:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    efe0:	1c40      	adds	r0, r0, #1
    efe2:	4408      	add	r0, r1
    efe4:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    efe8:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    efec:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    eff0:	1a08      	subs	r0, r1, r0
    eff2:	b200      	sxth	r0, r0
    eff4:	2800      	cmp	r0, #0
    eff6:	dd32      	ble.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eff8:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    effc:	f7fb fc78 	bl	a8f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f000:	2800      	cmp	r0, #0
    f002:	d02c      	beq.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f004:	20ff      	movs	r0, #255	; 0xff
    f006:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f00a:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f00e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f012:	ae01      	add	r6, sp, #4
    f014:	1a40      	subs	r0, r0, r1
    f016:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f01a:	1e40      	subs	r0, r0, #1
    f01c:	4408      	add	r0, r1
    f01e:	b285      	uxth	r5, r0
    f020:	e017      	b.n	f052 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f022:	9600      	str	r6, [sp, #0]
    f024:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f028:	2300      	movs	r3, #0
    f02a:	2201      	movs	r2, #1
    f02c:	4620      	mov	r0, r4
    f02e:	f7f5 fc63 	bl	48f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f032:	2800      	cmp	r0, #0
    f034:	d013      	beq.n	f05e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f036:	2801      	cmp	r0, #1
    f038:	d004      	beq.n	f044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f03a:	f240 6144 	movw	r1, #1604	; 0x644
    f03e:	2030      	movs	r0, #48	; 0x30
    f040:	f7f1 fca6 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f044:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f048:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f04c:	4408      	add	r0, r1
    f04e:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f052:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f056:	1a28      	subs	r0, r5, r0
    f058:	b200      	sxth	r0, r0
    f05a:	2800      	cmp	r0, #0
    f05c:	dae1      	bge.n	f022 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f05e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f060:	2000      	movs	r0, #0
    f062:	4770      	bx	lr
    f064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f068:	4604      	mov	r4, r0
    f06a:	f000 f8ff 	bl	f26c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f06e:	2700      	movs	r7, #0
    f070:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f074:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    f078:	2601      	movs	r6, #1
    f07a:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    f07e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    f080:	463d      	mov	r5, r7
    f082:	b130      	cbz	r0, f092 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    f084:	f001 fd5d 	bl	10b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f088:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f08a:	fbb0 f2f1 	udiv	r2, r0, r1
    f08e:	fb01 0512 	mls	r5, r1, r2, r0
    f092:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f096:	2100      	movs	r1, #0
    f098:	4680      	mov	r8, r0
    f09a:	f7fe fec5 	bl	de28 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f09e:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    f0a2:	1949      	adds	r1, r1, r5
    f0a4:	4178      	adcs	r0, r7
    f0a6:	e9c4 1000 	strd	r1, r0, [r4]
    f0aa:	8920      	ldrh	r0, [r4, #8]
    f0ac:	3cf8      	subs	r4, #248	; 0xf8
    f0ae:	1c40      	adds	r0, r0, #1
    f0b0:	280a      	cmp	r0, #10
    f0b2:	d201      	bcs.n	f0b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    f0b4:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f0b8:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f0bc:	b138      	cbz	r0, f0ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f0be:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f0c2:	1c40      	adds	r0, r0, #1
    f0c4:	280a      	cmp	r0, #10
    f0c6:	d302      	bcc.n	f0ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f0c8:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    f0cc:	e002      	b.n	f0d4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    f0ce:	2002      	movs	r0, #2
    f0d0:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f0d4:	4620      	mov	r0, r4
    f0d6:	f000 f823 	bl	f120 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f0da:	b120      	cbz	r0, f0e6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    f0dc:	4620      	mov	r0, r4
    f0de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f0e2:	f000 b80e 	b.w	f102 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f0e6:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f0ea:	4641      	mov	r1, r8
    f0ec:	f000 f8bc 	bl	f268 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d104      	bne.n	f0fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    f0f4:	f240 61e7 	movw	r1, #1767	; 0x6e7
    f0f8:	2030      	movs	r0, #48	; 0x30
    f0fa:	f7f1 fc49 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f102:	b510      	push	{r4, lr}
    f104:	4604      	mov	r4, r0
    f106:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f10a:	f7fb fd47 	bl	ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f10e:	2000      	movs	r0, #0
    f110:	7620      	strb	r0, [r4, #24]
    f112:	bd10      	pop	{r4, pc}
    f114:	b510      	push	{r4, lr}
    f116:	f7ff fd4c 	bl	ebb2 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f11a:	f200 1015 	addw	r0, r0, #277	; 0x115
    f11e:	bd10      	pop	{r4, pc}
    f120:	b570      	push	{r4, r5, r6, lr}
    f122:	4605      	mov	r5, r0
    f124:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f128:	b108      	cbz	r0, f12e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f12a:	2001      	movs	r0, #1
    f12c:	bd70      	pop	{r4, r5, r6, pc}
    f12e:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f132:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f136:	4050      	eors	r0, r2
    f138:	ea70 0101 	orns	r1, r0, r1
    f13c:	d012      	beq.n	f164 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f13e:	2400      	movs	r4, #0
    f140:	4621      	mov	r1, r4
    f142:	4628      	mov	r0, r5
    f144:	f7ff ffe6 	bl	f114 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f148:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f14c:	1840      	adds	r0, r0, r1
    f14e:	4154      	adcs	r4, r2
    f150:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f154:	3df8      	subs	r5, #248	; 0xf8
    f156:	1a10      	subs	r0, r2, r0
    f158:	41a1      	sbcs	r1, r4
    f15a:	d503      	bpl.n	f164 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f15c:	4628      	mov	r0, r5
    f15e:	f7f4 fb2b 	bl	37b8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f162:	e7e2      	b.n	f12a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    f164:	2000      	movs	r0, #0
    f166:	bd70      	pop	{r4, r5, r6, pc}
    f168:	b510      	push	{r4, lr}
    f16a:	4604      	mov	r4, r0
    f16c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f170:	f000 f988 	bl	f484 <__kernel_ram_size+0x1cc>
    f174:	4601      	mov	r1, r0
    f176:	4620      	mov	r0, r4
    f178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f17c:	f7ff b9c7 	b.w	e50e <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f180:	b510      	push	{r4, lr}
    f182:	f7f8 fd93 	bl	7cac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f18a:	f7fb be65 	b.w	ae58 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f18e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f192:	4604      	mov	r4, r0
    f194:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f198:	2800      	cmp	r0, #0
    f19a:	d051      	beq.n	f240 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f19c:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f1a0:	2803      	cmp	r0, #3
    f1a2:	d14d      	bne.n	f240 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f1a4:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f1a8:	f001 fab2 	bl	10710 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f1ac:	4605      	mov	r5, r0
    f1ae:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1b2:	f7f5 fa6d 	bl	4690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f1b6:	4428      	add	r0, r5
    f1b8:	b286      	uxth	r6, r0
    f1ba:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1be:	f7f5 fa67 	bl	4690 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f1c2:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f1c6:	fa1f f880 	uxth.w	r8, r0
    f1ca:	4648      	mov	r0, r9
    f1cc:	f7f8 fe2c 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1d0:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f1d4:	1a0d      	subs	r5, r1, r0
    f1d6:	4648      	mov	r0, r9
    f1d8:	f7f8 fe52 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1dc:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f1e0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f1e4:	fbb0 f0fa 	udiv	r0, r0, sl
    f1e8:	1a2d      	subs	r5, r5, r0
    f1ea:	4648      	mov	r0, r9
    f1ec:	f7f8 fe1c 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1f0:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f1f4:	1a0f      	subs	r7, r1, r0
    f1f6:	4648      	mov	r0, r9
    f1f8:	f7f8 fe42 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1fc:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f200:	4401      	add	r1, r0
    f202:	fbb1 f0fa 	udiv	r0, r1, sl
    f206:	1a39      	subs	r1, r7, r0
    f208:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f20c:	4370      	muls	r0, r6
    f20e:	fbb0 f2f8 	udiv	r2, r0, r8
    f212:	2029      	movs	r0, #41	; 0x29
    f214:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f218:	3260      	adds	r2, #96	; 0x60
    f21a:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f21e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f222:	42a9      	cmp	r1, r5
    f224:	d801      	bhi.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    f226:	4285      	cmp	r5, r0
    f228:	d901      	bls.n	f22e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    f22a:	f7fd f80f 	bl	c24c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f22e:	4631      	mov	r1, r6
    f230:	6920      	ldr	r0, [r4, #16]
    f232:	f7fd f873 	bl	c31c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f236:	2100      	movs	r1, #0
    f238:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f23c:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f244:	b570      	push	{r4, r5, r6, lr}
    f246:	460c      	mov	r4, r1
    f248:	4605      	mov	r5, r0
    f24a:	f7f8 fe19 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f24e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f252:	4408      	add	r0, r1
    f254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f258:	fbb0 f6f1 	udiv	r6, r0, r1
    f25c:	4628      	mov	r0, r5
    f25e:	f7f8 fde3 	bl	7e28 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f262:	4430      	add	r0, r6
    f264:	4420      	add	r0, r4
    f266:	bd70      	pop	{r4, r5, r6, pc}
    f268:	f7fa bee4 	b.w	a034 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f26c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f26e:	4604      	mov	r4, r0
    f270:	f7ff fcc6 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f274:	b1f8      	cbz	r0, f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    f276:	4620      	mov	r0, r4
    f278:	f7ff fcba 	bl	ebf0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f27c:	b918      	cbnz	r0, f286 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    f27e:	4620      	mov	r0, r4
    f280:	f7ff fcc0 	bl	ec04 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f284:	b140      	cbz	r0, f298 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    f286:	245a      	movs	r4, #90	; 0x5a
    f288:	4668      	mov	r0, sp
    f28a:	f7fd fa9d 	bl	c7c8 <mpsl_fem_pa_is_configured>
    f28e:	f89d 0000 	ldrb.w	r0, [sp]
    f292:	b118      	cbz	r0, f29c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    f294:	2501      	movs	r5, #1
    f296:	e002      	b.n	f29e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f298:	2450      	movs	r4, #80	; 0x50
    f29a:	e7f5      	b.n	f288 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f29c:	2500      	movs	r5, #0
    f29e:	a801      	add	r0, sp, #4
    f2a0:	f7fd fa7a 	bl	c798 <mpsl_fem_lna_is_configured>
    f2a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f2a8:	b100      	cbz	r0, f2ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    f2aa:	2001      	movs	r0, #1
    f2ac:	4305      	orrs	r5, r0
    f2ae:	d000      	beq.n	f2b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f2b0:	340a      	adds	r4, #10
    f2b2:	4620      	mov	r0, r4
    f2b4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2b6:	2061      	movs	r0, #97	; 0x61
    f2b8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2ba:	b570      	push	{r4, r5, r6, lr}
    f2bc:	4604      	mov	r4, r0
    f2be:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f2c0:	2500      	movs	r5, #0
    f2c2:	b130      	cbz	r0, f2d2 <__kernel_ram_size+0x1a>
    f2c4:	f7f3 fe66 	bl	2f94 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f2c8:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f2ca:	fbb0 f2f1 	udiv	r2, r0, r1
    f2ce:	fb01 0512 	mls	r5, r1, r2, r0
    f2d2:	4620      	mov	r0, r4
    f2d4:	f7ff fc69 	bl	ebaa <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f2d8:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f2dc:	4428      	add	r0, r5
    f2de:	34e8      	adds	r4, #232	; 0xe8
    f2e0:	2500      	movs	r5, #0
    f2e2:	1882      	adds	r2, r0, r2
    f2e4:	eb45 0001 	adc.w	r0, r5, r1
    f2e8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f2ec:	f804 5b0b 	strb.w	r5, [r4], #11
    f2f0:	2001      	movs	r0, #1
    f2f2:	f804 0901 	strb.w	r0, [r4], #-1
    f2f6:	2002      	movs	r0, #2
    f2f8:	f804 09f2 	strb.w	r0, [r4], #-242
    f2fc:	4620      	mov	r0, r4
    f2fe:	f7ff ffb5 	bl	f26c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f302:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f306:	4620      	mov	r0, r4
    f308:	f7ff ff0a 	bl	f120 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f30c:	b930      	cbnz	r0, f31c <__kernel_ram_size+0x64>
    f30e:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f312:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f316:	f7ff ffa7 	bl	f268 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f31a:	b128      	cbz	r0, f328 <__kernel_ram_size+0x70>
    f31c:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f324:	f7ff bf2c 	b.w	f180 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    f328:	f240 712d 	movw	r1, #1837	; 0x72d
    f32c:	2030      	movs	r0, #48	; 0x30
    f32e:	f7f1 fb2f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f332:	b510      	push	{r4, lr}
    f334:	4604      	mov	r4, r0
    f336:	2000      	movs	r0, #0
    f338:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f33c:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f340:	f7fb fc2c 	bl	ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f344:	2020      	movs	r0, #32
    f346:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f34a:	bd10      	pop	{r4, pc}
    f34c:	b510      	push	{r4, lr}
    f34e:	b140      	cbz	r0, f362 <__kernel_ram_size+0xaa>
    f350:	2909      	cmp	r1, #9
    f352:	d22f      	bcs.n	f3b4 <__kernel_ram_size+0xfc>
    f354:	e8df f001 	tbb	[pc, r1]
    f358:	1e1e1607 	.word	0x1e1e1607
    f35c:	26222e1a 	.word	0x26222e1a
    f360:	002a      	.short	0x002a
    f362:	21cd      	movs	r1, #205	; 0xcd
    f364:	e023      	b.n	f3ae <__kernel_ram_size+0xf6>
    f366:	4604      	mov	r4, r0
    f368:	f7f4 f9f6 	bl	3758 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f36c:	b110      	cbz	r0, f374 <__kernel_ram_size+0xbc>
    f36e:	f240 2187 	movw	r1, #647	; 0x287
    f372:	e01c      	b.n	f3ae <__kernel_ram_size+0xf6>
    f374:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f37c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    f380:	f7fb be46 	b.w	b010 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f388:	f000 b8b1 	b.w	f4ee <__kernel_ram_size+0x236>
    f38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f390:	f7f8 be60 	b.w	8054 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f398:	f7ff be64 	b.w	f064 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a0:	f7ff bc01 	b.w	eba6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a8:	f7ff beab 	b.w	f102 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f3ac:	21ed      	movs	r1, #237	; 0xed
    f3ae:	2030      	movs	r0, #48	; 0x30
    f3b0:	f7f1 faee 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3b4:	21f1      	movs	r1, #241	; 0xf1
    f3b6:	e7fa      	b.n	f3ae <__kernel_ram_size+0xf6>
    f3b8:	b510      	push	{r4, lr}
    f3ba:	0004      	movs	r4, r0
    f3bc:	d009      	beq.n	f3d2 <__kernel_ram_size+0x11a>
    f3be:	2200      	movs	r2, #0
    f3c0:	2909      	cmp	r1, #9
    f3c2:	d25d      	bcs.n	f480 <__kernel_ram_size+0x1c8>
    f3c4:	e8df f001 	tbb	[pc, r1]
    f3c8:	43433b07 	.word	0x43433b07
    f3cc:	4f485c3f 	.word	0x4f485c3f
    f3d0:	0058      	.short	0x0058
    f3d2:	2196      	movs	r1, #150	; 0x96
    f3d4:	e051      	b.n	f47a <__kernel_ram_size+0x1c2>
    f3d6:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f3da:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f3de:	4620      	mov	r0, r4
    f3e0:	b189      	cbz	r1, f406 <__kernel_ram_size+0x14e>
    f3e2:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f3e6:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f3ea:	428a      	cmp	r2, r1
    f3ec:	d106      	bne.n	f3fc <__kernel_ram_size+0x144>
    f3ee:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f3f2:	1a51      	subs	r1, r2, r1
    f3f4:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f3f8:	4611      	mov	r1, r2
    f3fa:	e00d      	b.n	f418 <__kernel_ram_size+0x160>
    f3fc:	1a51      	subs	r1, r2, r1
    f3fe:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f402:	b291      	uxth	r1, r2
    f404:	e008      	b.n	f418 <__kernel_ram_size+0x160>
    f406:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f40a:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f40e:	1a89      	subs	r1, r1, r2
    f410:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f414:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f418:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f41c:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f420:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f424:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f428:	f7f5 fe00 	bl	502c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f42c:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f430:	2800      	cmp	r0, #0
    f432:	d020      	beq.n	f476 <__kernel_ram_size+0x1be>
    f434:	4620      	mov	r0, r4
    f436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f43a:	f7f5 b9e1 	b.w	4800 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f43e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f442:	f000 b8a0 	b.w	f586 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f44a:	f7f8 be03 	b.w	8054 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f44e:	4620      	mov	r0, r4
    f450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f454:	f7f5 bc5a 	b.w	4d0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    f458:	2001      	movs	r0, #1
    f45a:	f7fa fb93 	bl	9b84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f462:	f7fe bb92 	b.w	db8a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f466:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f46a:	2804      	cmp	r0, #4
    f46c:	d001      	beq.n	f472 <__kernel_ram_size+0x1ba>
    f46e:	21bb      	movs	r1, #187	; 0xbb
    f470:	e003      	b.n	f47a <__kernel_ram_size+0x1c2>
    f472:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f476:	bd10      	pop	{r4, pc}
    f478:	21c1      	movs	r1, #193	; 0xc1
    f47a:	2030      	movs	r0, #48	; 0x30
    f47c:	f7f1 fa88 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f480:	21c5      	movs	r1, #197	; 0xc5
    f482:	e7fa      	b.n	f47a <__kernel_ram_size+0x1c2>
    f484:	b510      	push	{r4, lr}
    f486:	f7f8 fcfb 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f48a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f48e:	4408      	add	r0, r1
    f490:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f494:	fbb0 f0f1 	udiv	r0, r0, r1
    f498:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    f49c:	bd10      	pop	{r4, pc}
    f49e:	b538      	push	{r3, r4, r5, lr}
    f4a0:	2500      	movs	r5, #0
    f4a2:	4604      	mov	r4, r0
    f4a4:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f4a8:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f4ac:	462b      	mov	r3, r5
    f4ae:	462a      	mov	r2, r5
    f4b0:	4629      	mov	r1, r5
    f4b2:	9500      	str	r5, [sp, #0]
    f4b4:	f7f5 fa20 	bl	48f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f4b8:	b120      	cbz	r0, f4c4 <__kernel_ram_size+0x20c>
    f4ba:	f240 211f 	movw	r1, #543	; 0x21f
    f4be:	2030      	movs	r0, #48	; 0x30
    f4c0:	f7f1 fa66 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4c4:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f4c8:	2001      	movs	r0, #1
    f4ca:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f4ce:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f4d2:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f4d6:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f4da:	3494      	adds	r4, #148	; 0x94
    f4dc:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f4e0:	8820      	ldrh	r0, [r4, #0]
    f4e2:	1e40      	subs	r0, r0, #1
    f4e4:	8020      	strh	r0, [r4, #0]
    f4e6:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f4ea:	2000      	movs	r0, #0
    f4ec:	bd38      	pop	{r3, r4, r5, pc}
    f4ee:	b570      	push	{r4, r5, r6, lr}
    f4f0:	4605      	mov	r5, r0
    f4f2:	f7ff fb81 	bl	ebf8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f4f6:	b9c8      	cbnz	r0, f52c <__kernel_ram_size+0x274>
    f4f8:	2100      	movs	r1, #0
    f4fa:	4628      	mov	r0, r5
    f4fc:	f7ff fe0a 	bl	f114 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f500:	4604      	mov	r4, r0
    f502:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f506:	42a0      	cmp	r0, r4
    f508:	d20e      	bcs.n	f528 <__kernel_ram_size+0x270>
    f50a:	1a20      	subs	r0, r4, r0
    f50c:	2867      	cmp	r0, #103	; 0x67
    f50e:	d200      	bcs.n	f512 <__kernel_ram_size+0x25a>
    f510:	2067      	movs	r0, #103	; 0x67
    f512:	2103      	movs	r1, #3
    f514:	f7fa fb46 	bl	9ba4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f518:	b130      	cbz	r0, f528 <__kernel_ram_size+0x270>
    f51a:	4628      	mov	r0, r5
    f51c:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f524:	f7ff bb3f 	b.w	eba6 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f528:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f52c:	4628      	mov	r0, r5
    f52e:	f7f4 f92f 	bl	3790 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f532:	2800      	cmp	r0, #0
    f534:	d004      	beq.n	f540 <__kernel_ram_size+0x288>
    f536:	f240 21bd 	movw	r1, #701	; 0x2bd
    f53a:	2030      	movs	r0, #48	; 0x30
    f53c:	f7f1 fa28 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f540:	bd70      	pop	{r4, r5, r6, pc}
    f542:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f546:	f001 0307 	and.w	r3, r1, #7
    f54a:	7802      	ldrb	r2, [r0, #0]
    f54c:	2101      	movs	r1, #1
    f54e:	4099      	lsls	r1, r3
    f550:	438a      	bics	r2, r1
    f552:	7002      	strb	r2, [r0, #0]
    f554:	4770      	bx	lr

0000f556 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f556:	b510      	push	{r4, lr}
    f558:	460c      	mov	r4, r1
    f55a:	f7f1 fe69 	bl	1230 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f55e:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f562:	2820      	cmp	r0, #32
    f564:	d00c      	beq.n	f580 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f566:	f7fb fb3b 	bl	abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f56a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f56e:	f7fb fb15 	bl	ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f572:	2800      	cmp	r0, #0
    f574:	d104      	bne.n	f580 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f576:	f640 4129 	movw	r1, #3113	; 0xc29
    f57a:	2031      	movs	r0, #49	; 0x31
    f57c:	f7f1 fa08 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f580:	bd10      	pop	{r4, pc}

0000f582 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f582:	2000      	movs	r0, #0
    f584:	4770      	bx	lr

0000f586 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f586:	f7f2 bae7 	b.w	1b58 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f58a:	2100      	movs	r1, #0
    f58c:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f590:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f594:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f598:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f59c:	b109      	cbz	r1, f5a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f59e:	2102      	movs	r1, #2
    f5a0:	e000      	b.n	f5a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f5a2:	2103      	movs	r1, #3
    f5a4:	f7f4 bfea 	b.w	457c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f5a8:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f5ac:	28fe      	cmp	r0, #254	; 0xfe
    f5ae:	d001      	beq.n	f5b4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f5b0:	2001      	movs	r0, #1
    f5b2:	4770      	bx	lr
    f5b4:	2000      	movs	r0, #0
    f5b6:	4770      	bx	lr
    f5b8:	b510      	push	{r4, lr}
    f5ba:	2801      	cmp	r0, #1
    f5bc:	d006      	beq.n	f5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5be:	2802      	cmp	r0, #2
    f5c0:	d004      	beq.n	f5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5c2:	f240 21d7 	movw	r1, #727	; 0x2d7
    f5c6:	2006      	movs	r0, #6
    f5c8:	f7f1 f9e2 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5cc:	bd10      	pop	{r4, pc}
    f5ce:	2801      	cmp	r0, #1
    f5d0:	d002      	beq.n	f5d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f5d2:	2802      	cmp	r0, #2
    f5d4:	d105      	bne.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5d6:	e002      	b.n	f5de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f5d8:	2901      	cmp	r1, #1
    f5da:	d004      	beq.n	f5e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5dc:	e001      	b.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5de:	2902      	cmp	r1, #2
    f5e0:	d001      	beq.n	f5e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5e2:	2000      	movs	r0, #0
    f5e4:	4770      	bx	lr
    f5e6:	2001      	movs	r0, #1
    f5e8:	4770      	bx	lr
    f5ea:	1a40      	subs	r0, r0, r1
    f5ec:	b200      	sxth	r0, r0
    f5ee:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f5f2:	4288      	cmp	r0, r1
    f5f4:	dc01      	bgt.n	f5fa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f5f6:	2800      	cmp	r0, #0
    f5f8:	dc01      	bgt.n	f5fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f5fa:	2001      	movs	r0, #1
    f5fc:	4770      	bx	lr
    f5fe:	2000      	movs	r0, #0
    f600:	4770      	bx	lr
    f602:	6840      	ldr	r0, [r0, #4]
    f604:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f608:	2912      	cmp	r1, #18
    f60a:	d001      	beq.n	f610 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f60c:	2002      	movs	r0, #2
    f60e:	4770      	bx	lr
    f610:	2113      	movs	r1, #19
    f612:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f616:	2000      	movs	r0, #0
    f618:	4770      	bx	lr
    f61a:	b510      	push	{r4, lr}
    f61c:	6843      	ldr	r3, [r0, #4]
    f61e:	4604      	mov	r4, r0
    f620:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f624:	2808      	cmp	r0, #8
    f626:	d20d      	bcs.n	f644 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f628:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f62c:	f1c0 0008 	rsb	r0, r0, #8
    f630:	b2c1      	uxtb	r1, r0
    f632:	1898      	adds	r0, r3, r2
    f634:	f7f1 fa4e 	bl	ad4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f638:	6861      	ldr	r1, [r4, #4]
    f63a:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f63e:	4410      	add	r0, r2
    f640:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f644:	6862      	ldr	r2, [r4, #4]
    f646:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f64a:	3908      	subs	r1, #8
    f64c:	2904      	cmp	r1, #4
    f64e:	d20d      	bcs.n	f66c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f650:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f654:	f1c1 0104 	rsb	r1, r1, #4
    f658:	b2c9      	uxtb	r1, r1
    f65a:	4410      	add	r0, r2
    f65c:	f7f1 fa3a 	bl	ad4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f660:	6861      	ldr	r1, [r4, #4]
    f662:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f666:	4410      	add	r0, r2
    f668:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f66c:	6860      	ldr	r0, [r4, #4]
    f66e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f672:	290c      	cmp	r1, #12
    f674:	d30f      	bcc.n	f696 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f676:	d005      	beq.n	f684 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f678:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f67c:	f04f 0031 	mov.w	r0, #49	; 0x31
    f680:	f7f1 f986 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f684:	2100      	movs	r1, #0
    f686:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f68a:	2101      	movs	r1, #1
    f68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f690:	2004      	movs	r0, #4
    f692:	f7f6 bb57 	b.w	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f696:	bd10      	pop	{r4, pc}
    f698:	6842      	ldr	r2, [r0, #4]
    f69a:	2131      	movs	r1, #49	; 0x31
    f69c:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f6a0:	6840      	ldr	r0, [r0, #4]
    f6a2:	2100      	movs	r1, #0
    f6a4:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f6a8:	4770      	bx	lr
    f6aa:	b510      	push	{r4, lr}
    f6ac:	6841      	ldr	r1, [r0, #4]
    f6ae:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f6b2:	2a15      	cmp	r2, #21
    f6b4:	d004      	beq.n	f6c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f6b6:	f240 7183 	movw	r1, #1923	; 0x783
    f6ba:	2031      	movs	r0, #49	; 0x31
    f6bc:	f7f1 f968 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6c0:	2201      	movs	r2, #1
    f6c2:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f6c6:	6840      	ldr	r0, [r0, #4]
    f6c8:	2116      	movs	r1, #22
    f6ca:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	f7ff b8e1 	b.w	e896 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f6d4:	b510      	push	{r4, lr}
    f6d6:	6841      	ldr	r1, [r0, #4]
    f6d8:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f6dc:	2a11      	cmp	r2, #17
    f6de:	d004      	beq.n	f6ea <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f6e0:	f240 717b 	movw	r1, #1915	; 0x77b
    f6e4:	2031      	movs	r0, #49	; 0x31
    f6e6:	f7f1 f953 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ea:	2201      	movs	r2, #1
    f6ec:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f6f0:	6840      	ldr	r0, [r0, #4]
    f6f2:	2112      	movs	r1, #18
    f6f4:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6f8:	bd10      	pop	{r4, pc}
    f6fa:	b510      	push	{r4, lr}
    f6fc:	6841      	ldr	r1, [r0, #4]
    f6fe:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f702:	2822      	cmp	r0, #34	; 0x22
    f704:	d005      	beq.n	f712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f706:	b120      	cbz	r0, f712 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f708:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f70c:	2031      	movs	r0, #49	; 0x31
    f70e:	f7f1 f93f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f712:	2023      	movs	r0, #35	; 0x23
    f714:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f718:	bd10      	pop	{r4, pc}
    f71a:	b510      	push	{r4, lr}
    f71c:	6840      	ldr	r0, [r0, #4]
    f71e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f722:	2916      	cmp	r1, #22
    f724:	d004      	beq.n	f730 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f726:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f72a:	2031      	movs	r0, #49	; 0x31
    f72c:	f7f1 f930 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f730:	211a      	movs	r1, #26
    f732:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f736:	bd10      	pop	{r4, pc}
    f738:	f7ff b89b 	b.w	e872 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f73c:	b510      	push	{r4, lr}
    f73e:	6840      	ldr	r0, [r0, #4]
    f740:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f744:	2916      	cmp	r1, #22
    f746:	d004      	beq.n	f752 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f748:	f240 718a 	movw	r1, #1930	; 0x78a
    f74c:	2031      	movs	r0, #49	; 0x31
    f74e:	f7f1 f91f 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f752:	2118      	movs	r1, #24
    f754:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f758:	bd10      	pop	{r4, pc}
    f75a:	f7ff b921 	b.w	e9a0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f75e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f762:	f001 0107 	and.w	r1, r1, #7
    f766:	7800      	ldrb	r0, [r0, #0]
    f768:	40c8      	lsrs	r0, r1
    f76a:	f000 0001 	and.w	r0, r0, #1
    f76e:	4770      	bx	lr

0000f770 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f770:	b510      	push	{r4, lr}
    f772:	2801      	cmp	r0, #1
    f774:	d006      	beq.n	f784 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f776:	2802      	cmp	r0, #2
    f778:	d006      	beq.n	f788 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f77a:	f240 2175 	movw	r1, #629	; 0x275
    f77e:	2078      	movs	r0, #120	; 0x78
    f780:	f7f1 f906 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f784:	2000      	movs	r0, #0
    f786:	bd10      	pop	{r4, pc}
    f788:	2001      	movs	r0, #1
    f78a:	bd10      	pop	{r4, pc}

0000f78c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f78c:	207f      	movs	r0, #127	; 0x7f
    f78e:	f000 b88c 	b.w	f8aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f792 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f792:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f796:	f000 b888 	b.w	f8aa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f79a <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f79a:	b510      	push	{r4, lr}
    f79c:	4604      	mov	r4, r0
    f79e:	f7f7 fe4f 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f7a2:	1e64      	subs	r4, r4, #1
    f7a4:	b2e2      	uxtb	r2, r4
    f7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7aa:	f000 b85b 	b.w	f864 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f7ae <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f7ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f7b2:	4607      	mov	r7, r0
    f7b4:	461e      	mov	r6, r3
    f7b6:	4690      	mov	r8, r2
    f7b8:	460c      	mov	r4, r1
    f7ba:	4608      	mov	r0, r1
    f7bc:	f7ff ffed 	bl	f79a <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f7c0:	b1e8      	cbz	r0, f7fe <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f7c2:	687d      	ldr	r5, [r7, #4]
    f7c4:	2121      	movs	r1, #33	; 0x21
    f7c6:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f7ca:	3580      	adds	r5, #128	; 0x80
    f7cc:	f7ff ffc7 	bl	f75e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f7d0:	b1b8      	cbz	r0, f802 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f7d2:	1e64      	subs	r4, r4, #1
    f7d4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f7d6:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f7d8:	b2e2      	uxtb	r2, r4
    f7da:	f000 f843 	bl	f864 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f7de:	b180      	cbz	r0, f802 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f7e0:	6878      	ldr	r0, [r7, #4]
    f7e2:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f7e6:	f88d 1000 	strb.w	r1, [sp]
    f7ea:	9900      	ldr	r1, [sp, #0]
    f7ec:	9100      	str	r1, [sp, #0]
    f7ee:	f89d 1000 	ldrb.w	r1, [sp]
    f7f2:	f200 1047 	addw	r0, r0, #327	; 0x147
    f7f6:	b131      	cbz	r1, f806 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f7f8:	203a      	movs	r0, #58	; 0x3a
    f7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f7fe:	2011      	movs	r0, #17
    f800:	e7fb      	b.n	f7fa <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f802:	201a      	movs	r0, #26
    f804:	e7f9      	b.n	f7fa <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f806:	1c81      	adds	r1, r0, #2
    f808:	700e      	strb	r6, [r1, #0]
    f80a:	2101      	movs	r1, #1
    f80c:	40a1      	lsls	r1, r4
    f80e:	7001      	strb	r1, [r0, #0]
    f810:	f880 8001 	strb.w	r8, [r0, #1]
    f814:	2000      	movs	r0, #0
    f816:	e7f0      	b.n	f7fa <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f818 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f81c:	460d      	mov	r5, r1
    f81e:	4606      	mov	r6, r0
    f820:	f7ff ffb4 	bl	f78c <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f824:	4607      	mov	r7, r0
    f826:	f7ff ffb4 	bl	f792 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f82a:	2400      	movs	r4, #0
    f82c:	4285      	cmp	r5, r0
    f82e:	d100      	bne.n	f832 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f830:	2401      	movs	r4, #1
    f832:	42bd      	cmp	r5, r7
    f834:	d101      	bne.n	f83a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f836:	f044 0402 	orr.w	r4, r4, #2
    f83a:	f000 f826 	bl	f88a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f83e:	2200      	movs	r2, #0
    f840:	4601      	mov	r1, r0
    f842:	2301      	movs	r3, #1
    f844:	fa03 f002 	lsl.w	r0, r3, r2
    f848:	4208      	tst	r0, r1
    f84a:	d005      	beq.n	f858 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f84c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f850:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f854:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f858:	1c52      	adds	r2, r2, #1
    f85a:	b2d2      	uxtb	r2, r2
    f85c:	2a02      	cmp	r2, #2
    f85e:	d3f1      	bcc.n	f844 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f864:	b510      	push	{r4, lr}
    f866:	4614      	mov	r4, r2
    f868:	4602      	mov	r2, r0
    f86a:	2000      	movs	r0, #0
    f86c:	4603      	mov	r3, r0
    f86e:	2c02      	cmp	r4, #2
    f870:	d205      	bcs.n	f87e <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f872:	4610      	mov	r0, r2
    f874:	f000 f810 	bl	f898 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f878:	2101      	movs	r1, #1
    f87a:	40a1      	lsls	r1, r4
    f87c:	b2cb      	uxtb	r3, r1
    f87e:	4203      	tst	r3, r0
    f880:	d001      	beq.n	f886 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f882:	2001      	movs	r0, #1
    f884:	bd10      	pop	{r4, pc}
    f886:	2000      	movs	r0, #0
    f888:	bd10      	pop	{r4, pc}
    f88a:	b510      	push	{r4, lr}
    f88c:	f7f7 fdd8 	bl	7440 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f894:	f000 b800 	b.w	f898 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f898:	0a00      	lsrs	r0, r0, #8
    f89a:	2201      	movs	r2, #1
    f89c:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f8a0:	07c0      	lsls	r0, r0, #31
    f8a2:	d000      	beq.n	f8a6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f8a4:	2203      	movs	r2, #3
    f8a6:	4610      	mov	r0, r2
    f8a8:	4770      	bx	lr
    f8aa:	b508      	push	{r3, lr}
    f8ac:	2301      	movs	r3, #1
    f8ae:	f640 1288 	movw	r2, #2440	; 0x988
    f8b2:	4669      	mov	r1, sp
    f8b4:	f7fc ff8e 	bl	c7d4 <mpsl_fem_tx_power_split>
    f8b8:	bd08      	pop	{r3, pc}
    f8ba:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f8be:	f001 0107 	and.w	r1, r1, #7
    f8c2:	7800      	ldrb	r0, [r0, #0]
    f8c4:	40c8      	lsrs	r0, r1
    f8c6:	f000 0001 	and.w	r0, r0, #1
    f8ca:	4770      	bx	lr
    f8cc:	b118      	cbz	r0, f8d6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f8ce:	2802      	cmp	r0, #2
    f8d0:	d001      	beq.n	f8d6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f8d2:	2001      	movs	r0, #1
    f8d4:	4770      	bx	lr
    f8d6:	2000      	movs	r0, #0
    f8d8:	4770      	bx	lr

0000f8da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f8da:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f8dc:	7881      	ldrb	r1, [r0, #2]
    f8de:	2500      	movs	r5, #0
    f8e0:	4604      	mov	r4, r0
    f8e2:	291a      	cmp	r1, #26
    f8e4:	d024      	beq.n	f930 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f8e6:	dc0e      	bgt.n	f906 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f8e8:	2916      	cmp	r1, #22
    f8ea:	d22b      	bcs.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f8ec:	e8df f001 	tbb	[pc, r1]
    f8f0:	2a2a2a2a 	.word	0x2a2a2a2a
    f8f4:	2a2a202a 	.word	0x2a2a202a
    f8f8:	2a2a2a2a 	.word	0x2a2a2a2a
    f8fc:	2a2a2a2a 	.word	0x2a2a2a2a
    f900:	202a2a2a 	.word	0x202a2a2a
    f904:	2020      	.short	0x2020
    f906:	292a      	cmp	r1, #42	; 0x2a
    f908:	d01c      	beq.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f90a:	dc0b      	bgt.n	f924 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f90c:	f1a1 011e 	sub.w	r1, r1, #30
    f910:	290c      	cmp	r1, #12
    f912:	d217      	bcs.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f914:	e8df f001 	tbb	[pc, r1]
    f918:	16161616 	.word	0x16161616
    f91c:	16161616 	.word	0x16161616
    f920:	0c161616 	.word	0x0c161616
    f924:	393a      	subs	r1, #58	; 0x3a
    f926:	2902      	cmp	r1, #2
    f928:	d20c      	bcs.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f92a:	e8df f001 	tbb	[pc, r1]
    f92e:	010b      	.short	0x010b
    f930:	8820      	ldrh	r0, [r4, #0]
    f932:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f936:	d205      	bcs.n	f944 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f938:	4669      	mov	r1, sp
    f93a:	f7fe f990 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f93e:	b118      	cbz	r0, f948 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f940:	2002      	movs	r0, #2
    f942:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f944:	2012      	movs	r0, #18
    f946:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f948:	9901      	ldr	r1, [sp, #4]
    f94a:	4668      	mov	r0, sp
    f94c:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f950:	f88d 2008 	strb.w	r2, [sp, #8]
    f954:	9a02      	ldr	r2, [sp, #8]
    f956:	9202      	str	r2, [sp, #8]
    f958:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f95c:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f960:	b10a      	cbz	r2, f966 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    f962:	200c      	movs	r0, #12
    f964:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f966:	78a2      	ldrb	r2, [r4, #2]
    f968:	704a      	strb	r2, [r1, #1]
    f96a:	22ff      	movs	r2, #255	; 0xff
    f96c:	700a      	strb	r2, [r1, #0]
    f96e:	f7fe fd09 	bl	e384 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f972:	4628      	mov	r0, r5
    f974:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f976 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f976:	b510      	push	{r4, lr}
    f978:	4604      	mov	r4, r0
    f97a:	7800      	ldrb	r0, [r0, #0]
    f97c:	b108      	cbz	r0, f982 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0xc>
    f97e:	2801      	cmp	r0, #1
    f980:	d116      	bne.n	f9b0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f982:	f000 fe0c 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f986:	b120      	cbz	r0, f992 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f988:	f7f2 fd34 	bl	23f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f98c:	b108      	cbz	r0, f992 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x1c>
    f98e:	200c      	movs	r0, #12
    f990:	bd10      	pop	{r4, pc}
    f992:	7820      	ldrb	r0, [r4, #0]
    f994:	f7ff ff9a 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f998:	2801      	cmp	r0, #1
    f99a:	d10b      	bne.n	f9b4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f99c:	7820      	ldrb	r0, [r4, #0]
    f99e:	f7ff ff95 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9a2:	2801      	cmp	r0, #1
    f9a4:	d104      	bne.n	f9b0 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3a>
    f9a6:	79a0      	ldrb	r0, [r4, #6]
    f9a8:	2103      	movs	r1, #3
    f9aa:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f9ae:	d001      	beq.n	f9b4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x3e>
    f9b0:	2012      	movs	r0, #18
    f9b2:	bd10      	pop	{r4, pc}
    f9b4:	7820      	ldrb	r0, [r4, #0]
    f9b6:	f7ff ff89 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9ba:	1de2      	adds	r2, r4, #7
    f9bc:	f104 0317 	add.w	r3, r4, #23
    f9c0:	1c61      	adds	r1, r4, #1
    f9c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9c6:	f7f2 bd35 	b.w	2434 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f9ca <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f9ca:	b510      	push	{r4, lr}
    f9cc:	4604      	mov	r4, r0
    f9ce:	f7f7 fc61 	bl	7294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    f9d2:	b108      	cbz	r0, f9d8 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f9d4:	200c      	movs	r0, #12
    f9d6:	bd10      	pop	{r4, pc}
    f9d8:	7820      	ldrb	r0, [r4, #0]
    f9da:	b118      	cbz	r0, f9e4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f9dc:	2801      	cmp	r0, #1
    f9de:	d001      	beq.n	f9e4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f9e0:	2012      	movs	r0, #18
    f9e2:	bd10      	pop	{r4, pc}
    f9e4:	f7ff ff72 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    f9e8:	1c61      	adds	r1, r4, #1
    f9ea:	f7f3 fcdd 	bl	33a8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    f9ee:	b108      	cbz	r0, f9f4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f9f0:	2000      	movs	r0, #0
    f9f2:	bd10      	pop	{r4, pc}
    f9f4:	2007      	movs	r0, #7
    f9f6:	bd10      	pop	{r4, pc}

0000f9f8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f9f8:	b510      	push	{r4, lr}
    f9fa:	f000 fdd0 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    f9fe:	b120      	cbz	r0, fa0a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa00:	f7f2 fcf8 	bl	23f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa04:	b108      	cbz	r0, fa0a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa06:	200c      	movs	r0, #12
    fa08:	bd10      	pop	{r4, pc}
    fa0a:	f7f2 fd67 	bl	24dc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fa0e:	2000      	movs	r0, #0
    fa10:	bd10      	pop	{r4, pc}

0000fa12 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa12:	b510      	push	{r4, lr}
    fa14:	f7f7 fc3e 	bl	7294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fa18:	b108      	cbz	r0, fa1e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa1a:	200c      	movs	r0, #12
    fa1c:	bd10      	pop	{r4, pc}
    fa1e:	f7f3 fd21 	bl	3464 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fa22:	2000      	movs	r0, #0
    fa24:	f7f2 fd8c 	bl	2540 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fa28:	2000      	movs	r0, #0
    fa2a:	bd10      	pop	{r4, pc}

0000fa2c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fa2c:	b510      	push	{r4, lr}
    fa2e:	460b      	mov	r3, r1
    fa30:	2201      	movs	r2, #1
    fa32:	f100 0110 	add.w	r1, r0, #16
    fa36:	f7fe f8f4 	bl	dc22 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fa3a:	2000      	movs	r0, #0
    fa3c:	bd10      	pop	{r4, pc}

0000fa3e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fa3e:	b510      	push	{r4, lr}
    fa40:	8800      	ldrh	r0, [r0, #0]
    fa42:	2100      	movs	r1, #0
    fa44:	f7f1 fad2 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa48:	b118      	cbz	r0, fa52 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fa4a:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fa4e:	b111      	cbz	r1, fa56 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fa50:	e007      	b.n	fa62 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fa52:	2002      	movs	r0, #2
    fa54:	bd10      	pop	{r4, pc}
    fa56:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fa5a:	2915      	cmp	r1, #21
    fa5c:	d003      	beq.n	fa66 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa5e:	2916      	cmp	r1, #22
    fa60:	d001      	beq.n	fa66 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa62:	200c      	movs	r0, #12
    fa64:	bd10      	pop	{r4, pc}
    fa66:	2102      	movs	r1, #2
    fa68:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fa6c:	2000      	movs	r0, #0
    fa6e:	bd10      	pop	{r4, pc}

0000fa70 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa72:	4605      	mov	r5, r0
    fa74:	8800      	ldrh	r0, [r0, #0]
    fa76:	2100      	movs	r1, #0
    fa78:	f7f1 fab8 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa7c:	0004      	movs	r4, r0
    fa7e:	d003      	beq.n	fa88 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fa80:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fa84:	b110      	cbz	r0, fa8c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fa86:	e011      	b.n	faac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa88:	2002      	movs	r0, #2
    fa8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa8c:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fa90:	2815      	cmp	r0, #21
    fa92:	d001      	beq.n	fa98 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fa94:	2816      	cmp	r0, #22
    fa96:	d109      	bne.n	faac <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fa98:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fa9c:	f88d 0000 	strb.w	r0, [sp]
    faa0:	9800      	ldr	r0, [sp, #0]
    faa2:	9000      	str	r0, [sp, #0]
    faa4:	f89d 0000 	ldrb.w	r0, [sp]
    faa8:	2601      	movs	r6, #1
    faaa:	b108      	cbz	r0, fab0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    faac:	200c      	movs	r0, #12
    faae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fab0:	2210      	movs	r2, #16
    fab2:	1ca9      	adds	r1, r5, #2
    fab4:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fab8:	f001 f9d5 	bl	10e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fabc:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fac0:	2000      	movs	r0, #0
    fac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fac4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fac4:	b510      	push	{r4, lr}
    fac6:	2108      	movs	r1, #8
    fac8:	f7f1 f812 	bl	af0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    facc:	2000      	movs	r0, #0
    face:	bd10      	pop	{r4, pc}

0000fad0 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fad0:	b510      	push	{r4, lr}
    fad2:	4604      	mov	r4, r0
    fad4:	f7f7 fabc 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fad8:	f7ff f898 	bl	ec0c <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fadc:	f7f2 fe9c 	bl	2818 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fae0:	7020      	strb	r0, [r4, #0]
    fae2:	2000      	movs	r0, #0
    fae4:	bd10      	pop	{r4, pc}

0000fae6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fae6:	21fb      	movs	r1, #251	; 0xfb
    fae8:	8001      	strh	r1, [r0, #0]
    faea:	f640 0248 	movw	r2, #2120	; 0x848
    faee:	8042      	strh	r2, [r0, #2]
    faf0:	8081      	strh	r1, [r0, #4]
    faf2:	80c2      	strh	r2, [r0, #6]
    faf4:	2000      	movs	r0, #0
    faf6:	4770      	bx	lr

0000faf8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    faf8:	b51c      	push	{r2, r3, r4, lr}
    fafa:	8800      	ldrh	r0, [r0, #0]
    fafc:	4669      	mov	r1, sp
    fafe:	f7fe f8ae 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb02:	2800      	cmp	r0, #0
    fb04:	d10d      	bne.n	fb22 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fb06:	f89d 0000 	ldrb.w	r0, [sp]
    fb0a:	9c01      	ldr	r4, [sp, #4]
    fb0c:	2801      	cmp	r0, #1
    fb0e:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fb12:	d103      	bne.n	fb1c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fb14:	9801      	ldr	r0, [sp, #4]
    fb16:	f000 fd2c 	bl	10572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fb1a:	b118      	cbz	r0, fb24 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fb1c:	7ce0      	ldrb	r0, [r4, #19]
    fb1e:	b118      	cbz	r0, fb28 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fb20:	203a      	movs	r0, #58	; 0x3a
    fb22:	bd1c      	pop	{r2, r3, r4, pc}
    fb24:	2002      	movs	r0, #2
    fb26:	bd1c      	pop	{r2, r3, r4, pc}
    fb28:	2001      	movs	r0, #1
    fb2a:	74e0      	strb	r0, [r4, #19]
    fb2c:	2000      	movs	r0, #0
    fb2e:	bd1c      	pop	{r2, r3, r4, pc}

0000fb30 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fb30:	2108      	movs	r1, #8
    fb32:	7001      	strb	r1, [r0, #0]
    fb34:	2000      	movs	r0, #0
    fb36:	4770      	bx	lr

0000fb38 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb38:	b510      	push	{r4, lr}
    fb3a:	4604      	mov	r4, r0
    fb3c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fb40:	f000 fd5a 	bl	105f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
    fb44:	f7f2 fe68 	bl	2818 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb48:	7020      	strb	r0, [r4, #0]
    fb4a:	f000 fd0f 	bl	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fb4e:	f7f2 fe63 	bl	2818 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb52:	7060      	strb	r0, [r4, #1]
    fb54:	2000      	movs	r0, #0
    fb56:	bd10      	pop	{r4, pc}

0000fb58 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fb58:	b510      	push	{r4, lr}
    fb5a:	4604      	mov	r4, r0
    fb5c:	f7f3 fc88 	bl	3470 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fb60:	7020      	strb	r0, [r4, #0]
    fb62:	2000      	movs	r0, #0
    fb64:	bd10      	pop	{r4, pc}

0000fb66 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fb66:	b510      	push	{r4, lr}
    fb68:	4604      	mov	r4, r0
    fb6a:	7800      	ldrb	r0, [r0, #0]
    fb6c:	b108      	cbz	r0, fb72 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fb6e:	2801      	cmp	r0, #1
    fb70:	d110      	bne.n	fb94 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fb72:	f000 fd14 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fb76:	b120      	cbz	r0, fb82 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fb78:	f7f2 fc3c 	bl	23f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb7c:	b108      	cbz	r0, fb82 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fb7e:	200c      	movs	r0, #12
    fb80:	bd10      	pop	{r4, pc}
    fb82:	7820      	ldrb	r0, [r4, #0]
    fb84:	f7ff fea2 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb88:	1c61      	adds	r1, r4, #1
    fb8a:	f7fe f83b 	bl	dc04 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fb8e:	b108      	cbz	r0, fb94 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fb90:	2000      	movs	r0, #0
    fb92:	bd10      	pop	{r4, pc}
    fb94:	2012      	movs	r0, #18
    fb96:	bd10      	pop	{r4, pc}

0000fb98 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fb98:	b510      	push	{r4, lr}
    fb9a:	4604      	mov	r4, r0
    fb9c:	f7f7 fb7a 	bl	7294 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fba0:	b108      	cbz	r0, fba6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fba2:	200c      	movs	r0, #12
    fba4:	bd10      	pop	{r4, pc}
    fba6:	7820      	ldrb	r0, [r4, #0]
    fba8:	b108      	cbz	r0, fbae <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fbaa:	2801      	cmp	r0, #1
    fbac:	d107      	bne.n	fbbe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbae:	f7ff fe8d 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fbb2:	1c61      	adds	r1, r4, #1
    fbb4:	f7f3 fc36 	bl	3424 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fbb8:	b108      	cbz	r0, fbbe <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbba:	2000      	movs	r0, #0
    fbbc:	bd10      	pop	{r4, pc}
    fbbe:	2012      	movs	r0, #18
    fbc0:	bd10      	pop	{r4, pc}

0000fbc2 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fbc2:	b510      	push	{r4, lr}
    fbc4:	4604      	mov	r4, r0
    fbc6:	f000 fcea 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fbca:	b108      	cbz	r0, fbd0 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fbcc:	200c      	movs	r0, #12
    fbce:	bd10      	pop	{r4, pc}
    fbd0:	7820      	ldrb	r0, [r4, #0]
    fbd2:	b100      	cbz	r0, fbd6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    fbd4:	2001      	movs	r0, #1
    fbd6:	f7f2 fc07 	bl	23e8 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fbda:	2000      	movs	r0, #0
    fbdc:	bd10      	pop	{r4, pc}

0000fbde <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fbde:	b51c      	push	{r2, r3, r4, lr}
    fbe0:	4604      	mov	r4, r0
    fbe2:	f7f7 fa35 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fbe6:	2000      	movs	r0, #0
    fbe8:	f88d 0002 	strb.w	r0, [sp, #2]
    fbec:	2103      	movs	r1, #3
    fbee:	f88d 1001 	strb.w	r1, [sp, #1]
    fbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
    fbf6:	f88d 1003 	strb.w	r1, [sp, #3]
    fbfa:	f88d 0000 	strb.w	r0, [sp]
    fbfe:	4668      	mov	r0, sp
    fc00:	9401      	str	r4, [sp, #4]
    fc02:	f000 f9c1 	bl	ff88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fc06:	bd1c      	pop	{r2, r3, r4, pc}

0000fc08 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fc08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fc0a:	4605      	mov	r5, r0
    fc0c:	f7f7 fa20 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fc10:	4606      	mov	r6, r0
    fc12:	7828      	ldrb	r0, [r5, #0]
    fc14:	2400      	movs	r4, #0
    fc16:	b160      	cbz	r0, fc32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc18:	f88d 4000 	strb.w	r4, [sp]
    fc1c:	2001      	movs	r0, #1
    fc1e:	f10d 0101 	add.w	r1, sp, #1
    fc22:	f7f1 fe19 	bl	1858 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fc26:	b120      	cbz	r0, fc32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc28:	4668      	mov	r0, sp
    fc2a:	f000 f897 	bl	fd5c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fc2e:	2800      	cmp	r0, #0
    fc30:	d112      	bne.n	fc58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc32:	f88d 400c 	strb.w	r4, [sp, #12]
    fc36:	4630      	mov	r0, r6
    fc38:	f7fe ffde 	bl	ebf8 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fc3c:	b118      	cbz	r0, fc46 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fc3e:	2080      	movs	r0, #128	; 0x80
    fc40:	f8ad 000d 	strh.w	r0, [sp, #13]
    fc44:	e001      	b.n	fc4a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fc46:	f8ad 400d 	strh.w	r4, [sp, #13]
    fc4a:	f88d 400f 	strb.w	r4, [sp, #15]
    fc4e:	7828      	ldrb	r0, [r5, #0]
    fc50:	2801      	cmp	r0, #1
    fc52:	d003      	beq.n	fc5c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fc54:	b138      	cbz	r0, fc66 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fc56:	2012      	movs	r0, #18
    fc58:	b004      	add	sp, #16
    fc5a:	bd70      	pop	{r4, r5, r6, pc}
    fc5c:	a903      	add	r1, sp, #12
    fc5e:	4630      	mov	r0, r6
    fc60:	f7f7 fa12 	bl	7088 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fc64:	e7f8      	b.n	fc58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc66:	4630      	mov	r0, r6
    fc68:	f000 fca0 	bl	105ac <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c8>
    fc6c:	e7f4      	b.n	fc58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fc6e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fc6e:	b530      	push	{r4, r5, lr}
    fc70:	b08b      	sub	sp, #44	; 0x2c
    fc72:	4604      	mov	r4, r0
    fc74:	f7f7 f9ec 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fc78:	4602      	mov	r2, r0
    fc7a:	7920      	ldrb	r0, [r4, #4]
    fc7c:	2804      	cmp	r0, #4
    fc7e:	d803      	bhi.n	fc88 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fc80:	8860      	ldrh	r0, [r4, #2]
    fc82:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fc86:	d902      	bls.n	fc8e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fc88:	2012      	movs	r0, #18
    fc8a:	b00b      	add	sp, #44	; 0x2c
    fc8c:	bd30      	pop	{r4, r5, pc}
    fc8e:	2500      	movs	r5, #0
    fc90:	f88d 5004 	strb.w	r5, [sp, #4]
    fc94:	7921      	ldrb	r1, [r4, #4]
    fc96:	9500      	str	r5, [sp, #0]
    fc98:	f89d 0000 	ldrb.w	r0, [sp]
    fc9c:	2905      	cmp	r1, #5
    fc9e:	f040 0010 	orr.w	r0, r0, #16
    fca2:	f88d 0000 	strb.w	r0, [sp]
    fca6:	d254      	bcs.n	fd52 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fca8:	e8df f001 	tbb	[pc, r1]
    fcac:	11050803 	.word	0x11050803
    fcb0:	000b      	.short	0x000b
    fcb2:	f040 0001 	orr.w	r0, r0, #1
    fcb6:	f040 0002 	orr.w	r0, r0, #2
    fcba:	e006      	b.n	fcca <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fcbc:	f040 0009 	orr.w	r0, r0, #9
    fcc0:	e001      	b.n	fcc6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fcc2:	f040 0001 	orr.w	r0, r0, #1
    fcc6:	f040 0004 	orr.w	r0, r0, #4
    fcca:	f88d 0000 	strb.w	r0, [sp]
    fcce:	f8bd 0000 	ldrh.w	r0, [sp]
    fcd2:	9000      	str	r0, [sp, #0]
    fcd4:	f8bd 0000 	ldrh.w	r0, [sp]
    fcd8:	f8ad 0005 	strh.w	r0, [sp, #5]
    fcdc:	8821      	ldrh	r1, [r4, #0]
    fcde:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fce2:	f361 201f 	bfi	r0, r1, #8, #24
    fce6:	f8cd 0006 	str.w	r0, [sp, #6]
    fcea:	8861      	ldrh	r1, [r4, #2]
    fcec:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fcf0:	f361 201f 	bfi	r0, r1, #8, #24
    fcf4:	f8cd 0009 	str.w	r0, [sp, #9]
    fcf8:	7b60      	ldrb	r0, [r4, #13]
    fcfa:	f88d 000d 	strb.w	r0, [sp, #13]
    fcfe:	7960      	ldrb	r0, [r4, #5]
    fd00:	f88d 000e 	strb.w	r0, [sp, #14]
    fd04:	79a0      	ldrb	r0, [r4, #6]
    fd06:	f88d 000f 	strb.w	r0, [sp, #15]
    fd0a:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fd0e:	9004      	str	r0, [sp, #16]
    fd10:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fd14:	f8ad 0014 	strh.w	r0, [sp, #20]
    fd18:	7ba0      	ldrb	r0, [r4, #14]
    fd1a:	f88d 0016 	strb.w	r0, [sp, #22]
    fd1e:	207f      	movs	r0, #127	; 0x7f
    fd20:	f88d 0017 	strb.w	r0, [sp, #23]
    fd24:	2001      	movs	r0, #1
    fd26:	f88d 0018 	strb.w	r0, [sp, #24]
    fd2a:	f88d 5019 	strb.w	r5, [sp, #25]
    fd2e:	f88d 001a 	strb.w	r0, [sp, #26]
    fd32:	f88d 501b 	strb.w	r5, [sp, #27]
    fd36:	4610      	mov	r0, r2
    fd38:	f7fe ff7e 	bl	ec38 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fd3c:	f88d 001c 	strb.w	r0, [sp, #28]
    fd40:	f88d 501d 	strb.w	r5, [sp, #29]
    fd44:	f88d 501e 	strb.w	r5, [sp, #30]
    fd48:	a909      	add	r1, sp, #36	; 0x24
    fd4a:	a801      	add	r0, sp, #4
    fd4c:	f7f6 ffb6 	bl	6cbc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fd50:	e79b      	b.n	fc8a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fd52:	f241 31a9 	movw	r1, #5033	; 0x13a9
    fd56:	2039      	movs	r0, #57	; 0x39
    fd58:	f7f0 fe1a 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fd5c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fd5c:	b570      	push	{r4, r5, r6, lr}
    fd5e:	4604      	mov	r4, r0
    fd60:	7800      	ldrb	r0, [r0, #0]
    fd62:	2101      	movs	r1, #1
    fd64:	f7f1 f942 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd68:	0005      	movs	r5, r0
    fd6a:	d007      	beq.n	fd7c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fd6c:	f7ff f90e 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd70:	b160      	cbz	r0, fd8c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd72:	4628      	mov	r0, r5
    fd74:	f7fe ff46 	bl	ec04 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fd78:	b110      	cbz	r0, fd80 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fd7a:	e005      	b.n	fd88 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fd7c:	2042      	movs	r0, #66	; 0x42
    fd7e:	bd70      	pop	{r4, r5, r6, pc}
    fd80:	4628      	mov	r0, r5
    fd82:	f7fe ff35 	bl	ebf0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fd86:	b108      	cbz	r0, fd8c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd88:	200c      	movs	r0, #12
    fd8a:	bd70      	pop	{r4, r5, r6, pc}
    fd8c:	1c61      	adds	r1, r4, #1
    fd8e:	4628      	mov	r0, r5
    fd90:	f7fe ff4a 	bl	ec28 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fd94:	2000      	movs	r0, #0
    fd96:	bd70      	pop	{r4, r5, r6, pc}

0000fd98 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fd98:	b50e      	push	{r1, r2, r3, lr}
    fd9a:	8882      	ldrh	r2, [r0, #4]
    fd9c:	f244 2390 	movw	r3, #17040	; 0x4290
    fda0:	429a      	cmp	r2, r3
    fda2:	d901      	bls.n	fda8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fda4:	2012      	movs	r0, #18
    fda6:	bd0e      	pop	{r1, r2, r3, pc}
    fda8:	f640 0348 	movw	r3, #2120	; 0x848
    fdac:	429a      	cmp	r2, r3
    fdae:	d300      	bcc.n	fdb2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fdb0:	461a      	mov	r2, r3
    fdb2:	8803      	ldrh	r3, [r0, #0]
    fdb4:	f8ad 3000 	strh.w	r3, [sp]
    fdb8:	8843      	ldrh	r3, [r0, #2]
    fdba:	f8ad 3002 	strh.w	r3, [sp, #2]
    fdbe:	f8ad 2004 	strh.w	r2, [sp, #4]
    fdc2:	8843      	ldrh	r3, [r0, #2]
    fdc4:	f8ad 3006 	strh.w	r3, [sp, #6]
    fdc8:	f8ad 2008 	strh.w	r2, [sp, #8]
    fdcc:	8800      	ldrh	r0, [r0, #0]
    fdce:	8008      	strh	r0, [r1, #0]
    fdd0:	4668      	mov	r0, sp
    fdd2:	f7f7 f9db 	bl	718c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    fdd6:	bd0e      	pop	{r1, r2, r3, pc}

0000fdd8 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fdd8:	b510      	push	{r4, lr}
    fdda:	4604      	mov	r4, r0
    fddc:	f7f7 f938 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fde0:	7861      	ldrb	r1, [r4, #1]
    fde2:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fde6:	f001 0101 	and.w	r1, r1, #1
    fdea:	f7fe ff19 	bl	ec20 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fdee:	2000      	movs	r0, #0
    fdf0:	bd10      	pop	{r4, pc}

0000fdf2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fdf2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fdf4:	4604      	mov	r4, r0
    fdf6:	f10d 0007 	add.w	r0, sp, #7
    fdfa:	9000      	str	r0, [sp, #0]
    fdfc:	7922      	ldrb	r2, [r4, #4]
    fdfe:	78e1      	ldrb	r1, [r4, #3]
    fe00:	78a0      	ldrb	r0, [r4, #2]
    fe02:	f10d 0306 	add.w	r3, sp, #6
    fe06:	f000 fbff 	bl	10608 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x324>
    fe0a:	2800      	cmp	r0, #0
    fe0c:	d109      	bne.n	fe22 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fe0e:	8820      	ldrh	r0, [r4, #0]
    fe10:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe14:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fe18:	f8ad 0008 	strh.w	r0, [sp, #8]
    fe1c:	a801      	add	r0, sp, #4
    fe1e:	f000 f96e 	bl	100fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fe22:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fe24 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fe24:	b510      	push	{r4, lr}
    fe26:	4604      	mov	r4, r0
    fe28:	f000 fbb9 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fe2c:	b120      	cbz	r0, fe38 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe2e:	f7f2 fae1 	bl	23f4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fe32:	b108      	cbz	r0, fe38 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fe34:	200c      	movs	r0, #12
    fe36:	bd10      	pop	{r4, pc}
    fe38:	7820      	ldrb	r0, [r4, #0]
    fe3a:	f7ff fd47 	bl	f8cc <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fe3e:	79e2      	ldrb	r2, [r4, #7]
    fe40:	1c61      	adds	r1, r4, #1
    fe42:	f7f2 fa8b 	bl	235c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fe46:	b108      	cbz	r0, fe4c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fe48:	2000      	movs	r0, #0
    fe4a:	bd10      	pop	{r4, pc}
    fe4c:	2002      	movs	r0, #2
    fe4e:	bd10      	pop	{r4, pc}

0000fe50 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fe50:	b510      	push	{r4, lr}
    fe52:	4604      	mov	r4, r0
    fe54:	2001      	movs	r0, #1
    fe56:	f000 fa67 	bl	10328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe5a:	b128      	cbz	r0, fe68 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fe5c:	4621      	mov	r1, r4
    fe5e:	2001      	movs	r0, #1
    fe60:	f7f1 fd12 	bl	1888 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe64:	2000      	movs	r0, #0
    fe66:	bd10      	pop	{r4, pc}
    fe68:	200c      	movs	r0, #12
    fe6a:	bd10      	pop	{r4, pc}

0000fe6c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fe6c:	b510      	push	{r4, lr}
    fe6e:	8800      	ldrh	r0, [r0, #0]
    fe70:	f7f2 fb4a 	bl	2508 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fe74:	b108      	cbz	r0, fe7a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fe76:	2000      	movs	r0, #0
    fe78:	bd10      	pop	{r4, pc}
    fe7a:	2030      	movs	r0, #48	; 0x30
    fe7c:	bd10      	pop	{r4, pc}

0000fe7e <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fe7e:	b51c      	push	{r2, r3, r4, lr}
    fe80:	4604      	mov	r4, r0
    fe82:	f7f7 f8e5 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
    fe86:	2000      	movs	r0, #0
    fe88:	f88d 0000 	strb.w	r0, [sp]
    fe8c:	f88d 0002 	strb.w	r0, [sp, #2]
    fe90:	2003      	movs	r0, #3
    fe92:	f88d 0001 	strb.w	r0, [sp, #1]
    fe96:	f814 0b01 	ldrb.w	r0, [r4], #1
    fe9a:	f88d 0003 	strb.w	r0, [sp, #3]
    fe9e:	4668      	mov	r0, sp
    fea0:	9401      	str	r4, [sp, #4]
    fea2:	f000 f8da 	bl	1005a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fea6:	bd1c      	pop	{r2, r3, r4, pc}

0000fea8 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fea8:	b51c      	push	{r2, r3, r4, lr}
    feaa:	8801      	ldrh	r1, [r0, #0]
    feac:	f8ad 1000 	strh.w	r1, [sp]
    feb0:	8841      	ldrh	r1, [r0, #2]
    feb2:	f8ad 1002 	strh.w	r1, [sp, #2]
    feb6:	8801      	ldrh	r1, [r0, #0]
    feb8:	f8ad 1004 	strh.w	r1, [sp, #4]
    febc:	8840      	ldrh	r0, [r0, #2]
    febe:	f8ad 0006 	strh.w	r0, [sp, #6]
    fec2:	4668      	mov	r0, sp
    fec4:	f7f7 fa02 	bl	72cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    fec8:	bd1c      	pop	{r2, r3, r4, pc}

0000feca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    feca:	b510      	push	{r4, lr}
    fecc:	f7f1 fd00 	bl	18d0 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    fed0:	2000      	movs	r0, #0
    fed2:	bd10      	pop	{r4, pc}

0000fed4 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fed4:	b510      	push	{r4, lr}
    fed6:	460c      	mov	r4, r1
    fed8:	2100      	movs	r1, #0
    feda:	f7f1 f887 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fede:	b118      	cbz	r0, fee8 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fee0:	2c02      	cmp	r4, #2
    fee2:	d903      	bls.n	feec <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fee4:	2012      	movs	r0, #18
    fee6:	bd10      	pop	{r4, pc}
    fee8:	2002      	movs	r0, #2
    feea:	bd10      	pop	{r4, pc}
    feec:	f014 0101 	ands.w	r1, r4, #1
    fef0:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    fef4:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fef8:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    fefc:	d004      	beq.n	ff08 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fefe:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    ff02:	b109      	cbz	r1, ff08 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ff04:	f7ff f845 	bl	ef92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ff08:	2000      	movs	r0, #0
    ff0a:	bd10      	pop	{r4, pc}

0000ff0c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ff0c:	b51c      	push	{r2, r3, r4, lr}
    ff0e:	460c      	mov	r4, r1
    ff10:	4669      	mov	r1, sp
    ff12:	f7fd fea4 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff16:	2800      	cmp	r0, #0
    ff18:	d105      	bne.n	ff26 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    ff1a:	2100      	movs	r1, #0
    ff1c:	4622      	mov	r2, r4
    ff1e:	9801      	ldr	r0, [sp, #4]
    ff20:	f000 face 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    ff24:	2000      	movs	r0, #0
    ff26:	bd1c      	pop	{r2, r3, r4, pc}

0000ff28 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    ff28:	b510      	push	{r4, lr}
    ff2a:	4604      	mov	r4, r0
    ff2c:	7800      	ldrb	r0, [r0, #0]
    ff2e:	28ff      	cmp	r0, #255	; 0xff
    ff30:	d009      	beq.n	ff46 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    ff32:	2101      	movs	r1, #1
    ff34:	f7f1 f85a 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff38:	b118      	cbz	r0, ff42 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    ff3a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ff3e:	8441      	strh	r1, [r0, #34]	; 0x22
    ff40:	e005      	b.n	ff4e <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    ff42:	2042      	movs	r0, #66	; 0x42
    ff44:	bd10      	pop	{r4, pc}
    ff46:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ff4a:	f7f4 fac3 	bl	44d4 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    ff4e:	2000      	movs	r0, #0
    ff50:	bd10      	pop	{r4, pc}

0000ff52 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ff52:	b510      	push	{r4, lr}
    ff54:	4604      	mov	r4, r0
    ff56:	f7f7 f9f9 	bl	734c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    ff5a:	b118      	cbz	r0, ff64 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    ff5c:	2000      	movs	r0, #0
    ff5e:	f000 f9e3 	bl	10328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    ff62:	b128      	cbz	r0, ff70 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    ff64:	4621      	mov	r1, r4
    ff66:	2000      	movs	r0, #0
    ff68:	f7f1 fc8e 	bl	1888 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff6c:	2000      	movs	r0, #0
    ff6e:	bd10      	pop	{r4, pc}
    ff70:	200c      	movs	r0, #12
    ff72:	bd10      	pop	{r4, pc}

0000ff74 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ff74:	b510      	push	{r4, lr}
    ff76:	7800      	ldrb	r0, [r0, #0]
    ff78:	b100      	cbz	r0, ff7c <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    ff7a:	2001      	movs	r0, #1
    ff7c:	f7f4 fad4 	bl	4528 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    ff80:	2000      	movs	r0, #0
    ff82:	bd10      	pop	{r4, pc}

0000ff84 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ff84:	f7f7 b902 	b.w	718c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000ff88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ff88:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff8c:	4606      	mov	r6, r0
    ff8e:	7845      	ldrb	r5, [r0, #1]
    ff90:	7800      	ldrb	r0, [r0, #0]
    ff92:	2101      	movs	r1, #1
    ff94:	f7f1 f82a 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff98:	0004      	movs	r4, r0
    ff9a:	d01e      	beq.n	ffda <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ff9c:	f7fe fdfb 	bl	eb96 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ffa0:	78f1      	ldrb	r1, [r6, #3]
    ffa2:	4281      	cmp	r1, r0
    ffa4:	d800      	bhi.n	ffa8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ffa6:	4608      	mov	r0, r1
    ffa8:	4607      	mov	r7, r0
    ffaa:	2d04      	cmp	r5, #4
    ffac:	d018      	beq.n	ffe0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ffae:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffb0:	f7fd fd26 	bl	da00 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ffb4:	4438      	add	r0, r7
    ffb6:	b281      	uxth	r1, r0
    ffb8:	4620      	mov	r0, r4
    ffba:	2201      	movs	r2, #1
    ffbc:	f000 f9c6 	bl	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ffc0:	2800      	cmp	r0, #0
    ffc2:	d10b      	bne.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ffc4:	2d03      	cmp	r5, #3
    ffc6:	d000      	beq.n	ffca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ffc8:	b1df      	cbz	r7, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ffca:	4620      	mov	r0, r4
    ffcc:	f7fe fe18 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ffd0:	7871      	ldrb	r1, [r6, #1]
    ffd2:	2903      	cmp	r1, #3
    ffd4:	d010      	beq.n	fff8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ffd6:	b9a0      	cbnz	r0, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ffd8:	e004      	b.n	ffe4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ffda:	2042      	movs	r0, #66	; 0x42
    ffdc:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ffe0:	b97f      	cbnz	r7, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    ffe2:	e7f2      	b.n	ffca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ffe4:	2904      	cmp	r1, #4
    ffe6:	d107      	bne.n	fff8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ffe8:	4620      	mov	r0, r4
    ffea:	f7fe ffcf 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ffee:	b140      	cbz	r0, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    fff0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fff2:	f7fd fccc 	bl	d98e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fff6:	b120      	cbz	r0, 10002 <CONFIG_PM_SRAM_SIZE+0x2>
    fff8:	2d01      	cmp	r5, #1
    fffa:	d004      	beq.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
    fffc:	2d03      	cmp	r5, #3
    fffe:	d002      	beq.n	10006 <CONFIG_PM_SRAM_SIZE+0x6>
   10000:	e00e      	b.n	10020 <CONFIG_PM_SRAM_SIZE+0x20>
   10002:	2012      	movs	r0, #18
   10004:	e7ea      	b.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10006:	4620      	mov	r0, r4
   10008:	f7fe fdfa 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1000c:	b108      	cbz	r0, 10012 <CONFIG_PM_SRAM_SIZE+0x12>
   1000e:	2200      	movs	r2, #0
   10010:	e002      	b.n	10018 <CONFIG_PM_SRAM_SIZE+0x18>
   10012:	2d01      	cmp	r5, #1
   10014:	d013      	beq.n	1003e <CONFIG_PM_SRAM_SIZE+0x3e>
   10016:	2201      	movs	r2, #1
   10018:	4668      	mov	r0, sp
   1001a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1001c:	f7fd fc53 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10020:	2d04      	cmp	r5, #4
   10022:	d018      	beq.n	10056 <CONFIG_PM_SRAM_SIZE+0x56>
   10024:	6872      	ldr	r2, [r6, #4]
   10026:	463b      	mov	r3, r7
   10028:	2101      	movs	r1, #1
   1002a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1002c:	f7fd fc7f 	bl	d92e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10030:	b138      	cbz	r0, 10042 <CONFIG_PM_SRAM_SIZE+0x42>
   10032:	7870      	ldrb	r0, [r6, #1]
   10034:	2802      	cmp	r0, #2
   10036:	d006      	beq.n	10046 <CONFIG_PM_SRAM_SIZE+0x46>
   10038:	2803      	cmp	r0, #3
   1003a:	d004      	beq.n	10046 <CONFIG_PM_SRAM_SIZE+0x46>
   1003c:	e00b      	b.n	10056 <CONFIG_PM_SRAM_SIZE+0x56>
   1003e:	2202      	movs	r2, #2
   10040:	e7ea      	b.n	10018 <CONFIG_PM_SRAM_SIZE+0x18>
   10042:	2007      	movs	r0, #7
   10044:	e7ca      	b.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10046:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10048:	f7fd fcda 	bl	da00 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1004c:	4602      	mov	r2, r0
   1004e:	2101      	movs	r1, #1
   10050:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10052:	f7fd fcb2 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10056:	2000      	movs	r0, #0
   10058:	e7c0      	b.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001005a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1005a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1005e:	4607      	mov	r7, r0
   10060:	7845      	ldrb	r5, [r0, #1]
   10062:	78c6      	ldrb	r6, [r0, #3]
   10064:	7800      	ldrb	r0, [r0, #0]
   10066:	2101      	movs	r1, #1
   10068:	f7f0 ffc0 	bl	fec <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1006c:	0004      	movs	r4, r0
   1006e:	d003      	beq.n	10078 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10070:	f7fe fdc8 	bl	ec04 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10074:	b118      	cbz	r0, 1007e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10076:	e003      	b.n	10080 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10078:	2042      	movs	r0, #66	; 0x42
   1007a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1007e:	2600      	movs	r6, #0
   10080:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10082:	f7fd fcc1 	bl	da08 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10086:	4430      	add	r0, r6
   10088:	b281      	uxth	r1, r0
   1008a:	4688      	mov	r8, r1
   1008c:	4620      	mov	r0, r4
   1008e:	2201      	movs	r2, #1
   10090:	f000 f95c 	bl	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   10094:	2800      	cmp	r0, #0
   10096:	d1f0      	bne.n	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10098:	2d04      	cmp	r5, #4
   1009a:	d008      	beq.n	100ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1009c:	2d03      	cmp	r5, #3
   1009e:	d00a      	beq.n	100b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   100a0:	b12e      	cbz	r6, 100ae <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   100a2:	4620      	mov	r0, r4
   100a4:	f7fe ff72 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100a8:	b118      	cbz	r0, 100b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   100aa:	200c      	movs	r0, #12
   100ac:	e7e5      	b.n	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100ae:	2012      	movs	r0, #18
   100b0:	e7e3      	b.n	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100b2:	2d01      	cmp	r5, #1
   100b4:	d10c      	bne.n	100d0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   100b6:	4620      	mov	r0, r4
   100b8:	f7fe fda2 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   100bc:	b108      	cbz	r0, 100c2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   100be:	2204      	movs	r2, #4
   100c0:	e002      	b.n	100c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   100c2:	2d01      	cmp	r5, #1
   100c4:	d010      	beq.n	100e8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   100c6:	2205      	movs	r2, #5
   100c8:	4668      	mov	r0, sp
   100ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100cc:	f7fd fbfb 	bl	d8c6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100d0:	687a      	ldr	r2, [r7, #4]
   100d2:	4633      	mov	r3, r6
   100d4:	2100      	movs	r1, #0
   100d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100d8:	f7fd fc29 	bl	d92e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   100dc:	b130      	cbz	r0, 100ec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   100de:	2d02      	cmp	r5, #2
   100e0:	d006      	beq.n	100f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   100e2:	2d03      	cmp	r5, #3
   100e4:	d004      	beq.n	100f0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   100e6:	e008      	b.n	100fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   100e8:	2206      	movs	r2, #6
   100ea:	e7ed      	b.n	100c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   100ec:	2007      	movs	r0, #7
   100ee:	e7c4      	b.n	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100f0:	4642      	mov	r2, r8
   100f2:	2100      	movs	r1, #0
   100f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100f6:	f7fd fc60 	bl	d9ba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   100fa:	2000      	movs	r0, #0
   100fc:	e7bd      	b.n	1007a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000100fe <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   100fe:	b510      	push	{r4, lr}
   10100:	4604      	mov	r4, r0
   10102:	8880      	ldrh	r0, [r0, #4]
   10104:	b128      	cbz	r0, 10112 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10106:	2801      	cmp	r0, #1
   10108:	d003      	beq.n	10112 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1010a:	2802      	cmp	r0, #2
   1010c:	d001      	beq.n	10112 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1010e:	2012      	movs	r0, #18
   10110:	bd10      	pop	{r4, pc}
   10112:	78e0      	ldrb	r0, [r4, #3]
   10114:	f000 f9b1 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10118:	b148      	cbz	r0, 1012e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1011a:	78a0      	ldrb	r0, [r4, #2]
   1011c:	f000 f9ad 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10120:	b128      	cbz	r0, 1012e <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10122:	4620      	mov	r0, r4
   10124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10128:	2101      	movs	r1, #1
   1012a:	f000 b862 	b.w	101f2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1012e:	2011      	movs	r0, #17
   10130:	bd10      	pop	{r4, pc}

00010132 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10132:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10134:	460c      	mov	r4, r1
   10136:	4605      	mov	r5, r0
   10138:	8800      	ldrh	r0, [r0, #0]
   1013a:	4669      	mov	r1, sp
   1013c:	f7fd fd8f 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10140:	2800      	cmp	r0, #0
   10142:	d106      	bne.n	10152 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10144:	9801      	ldr	r0, [sp, #4]
   10146:	8829      	ldrh	r1, [r5, #0]
   10148:	8021      	strh	r1, [r4, #0]
   1014a:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   1014e:	8060      	strh	r0, [r4, #2]
   10150:	2000      	movs	r0, #0
   10152:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010154 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10154:	b510      	push	{r4, lr}
   10156:	4604      	mov	r4, r0
   10158:	4601      	mov	r1, r0
   1015a:	2000      	movs	r0, #0
   1015c:	f7f1 fb7c 	bl	1858 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10160:	b910      	cbnz	r0, 10168 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10162:	2000      	movs	r0, #0
   10164:	6020      	str	r0, [r4, #0]
   10166:	80a0      	strh	r0, [r4, #4]
   10168:	2000      	movs	r0, #0
   1016a:	bd10      	pop	{r4, pc}

0001016c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1016c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   1016e:	460c      	mov	r4, r1
   10170:	4605      	mov	r5, r0
   10172:	8800      	ldrh	r0, [r0, #0]
   10174:	4669      	mov	r1, sp
   10176:	f7fd fd72 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1017a:	b108      	cbz	r0, 10180 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1017c:	2002      	movs	r0, #2
   1017e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10180:	78a8      	ldrb	r0, [r5, #2]
   10182:	b158      	cbz	r0, 1019c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   10184:	f000 f9f2 	bl	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10188:	70a0      	strb	r0, [r4, #2]
   1018a:	8828      	ldrh	r0, [r5, #0]
   1018c:	8020      	strh	r0, [r4, #0]
   1018e:	f994 0002 	ldrsb.w	r0, [r4, #2]
   10192:	f7f2 fb41 	bl	2818 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10196:	70a0      	strb	r0, [r4, #2]
   10198:	2000      	movs	r0, #0
   1019a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1019c:	9801      	ldr	r0, [sp, #4]
   1019e:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   101a2:	e7f1      	b.n	10188 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000101a4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   101a4:	b510      	push	{r4, lr}
   101a6:	f7f7 f8d7 	bl	7358 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   101aa:	2000      	movs	r0, #0
   101ac:	bd10      	pop	{r4, pc}

000101ae <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   101ae:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101b2:	4604      	mov	r4, r0
   101b4:	8840      	ldrh	r0, [r0, #2]
   101b6:	460d      	mov	r5, r1
   101b8:	b1b8      	cbz	r0, 101ea <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   101ba:	8820      	ldrh	r0, [r4, #0]
   101bc:	4669      	mov	r1, sp
   101be:	f7fd fd4e 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101c2:	2800      	cmp	r0, #0
   101c4:	d10f      	bne.n	101e6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   101c6:	8820      	ldrh	r0, [r4, #0]
   101c8:	8028      	strh	r0, [r5, #0]
   101ca:	9e01      	ldr	r6, [sp, #4]
   101cc:	f106 0510 	add.w	r5, r6, #16
   101d0:	3680      	adds	r6, #128	; 0x80
   101d2:	682f      	ldr	r7, [r5, #0]
   101d4:	8862      	ldrh	r2, [r4, #2]
   101d6:	4639      	mov	r1, r7
   101d8:	4630      	mov	r0, r6
   101da:	f7fd fe62 	bl	dea2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   101de:	6828      	ldr	r0, [r5, #0]
   101e0:	42b8      	cmp	r0, r7
   101e2:	d1f6      	bne.n	101d2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   101e4:	2000      	movs	r0, #0
   101e6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   101ea:	2012      	movs	r0, #18
   101ec:	e7fb      	b.n	101e6 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000101ee <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   101ee:	f000 b868 	b.w	102c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000101f2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   101f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101f6:	b085      	sub	sp, #20
   101f8:	4688      	mov	r8, r1
   101fa:	4606      	mov	r6, r0
   101fc:	8800      	ldrh	r0, [r0, #0]
   101fe:	a901      	add	r1, sp, #4
   10200:	f7fd fd2d 	bl	dc5e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10204:	2800      	cmp	r0, #0
   10206:	d13b      	bne.n	10280 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10208:	9802      	ldr	r0, [sp, #8]
   1020a:	4601      	mov	r1, r0
   1020c:	468a      	mov	sl, r1
   1020e:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   10212:	f500 7498 	add.w	r4, r0, #304	; 0x130
   10216:	f88d 1000 	strb.w	r1, [sp]
   1021a:	9900      	ldr	r1, [sp, #0]
   1021c:	9100      	str	r1, [sp, #0]
   1021e:	f89d 1000 	ldrb.w	r1, [sp]
   10222:	f04f 0900 	mov.w	r9, #0
   10226:	3080      	adds	r0, #128	; 0x80
   10228:	b121      	cbz	r1, 10234 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   1022a:	f1b8 0f02 	cmp.w	r8, #2
   1022e:	d001      	beq.n	10234 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10230:	2701      	movs	r7, #1
   10232:	e000      	b.n	10236 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10234:	2700      	movs	r7, #0
   10236:	7f81      	ldrb	r1, [r0, #30]
   10238:	2922      	cmp	r1, #34	; 0x22
   1023a:	d100      	bne.n	1023e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   1023c:	b13f      	cbz	r7, 1024e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   1023e:	2500      	movs	r5, #0
   10240:	306c      	adds	r0, #108	; 0x6c
   10242:	2108      	movs	r1, #8
   10244:	4683      	mov	fp, r0
   10246:	f7ff fb38 	bl	f8ba <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1024a:	b110      	cbz	r0, 10252 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   1024c:	e007      	b.n	1025e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1024e:	2501      	movs	r5, #1
   10250:	e7f6      	b.n	10240 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   10252:	210b      	movs	r1, #11
   10254:	4658      	mov	r0, fp
   10256:	f7ff fb30 	bl	f8ba <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   1025a:	b900      	cbnz	r0, 1025e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   1025c:	b17d      	cbz	r5, 1027e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   1025e:	a804      	add	r0, sp, #16
   10260:	9000      	str	r0, [sp, #0]
   10262:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10266:	ab03      	add	r3, sp, #12
   10268:	4632      	mov	r2, r6
   1026a:	4651      	mov	r1, sl
   1026c:	f000 f95e 	bl	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   10270:	0005      	movs	r5, r0
   10272:	d105      	bne.n	10280 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10274:	340c      	adds	r4, #12
   10276:	20ff      	movs	r0, #255	; 0xff
   10278:	7060      	strb	r0, [r4, #1]
   1027a:	b937      	cbnz	r7, 1028a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   1027c:	e003      	b.n	10286 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   1027e:	201a      	movs	r0, #26
   10280:	b005      	add	sp, #20
   10282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10286:	7820      	ldrb	r0, [r4, #0]
   10288:	b108      	cbz	r0, 1028e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   1028a:	253a      	movs	r5, #58	; 0x3a
   1028c:	e012      	b.n	102b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   1028e:	f884 8000 	strb.w	r8, [r4]
   10292:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10296:	70a0      	strb	r0, [r4, #2]
   10298:	f89d 1010 	ldrb.w	r1, [sp, #16]
   1029c:	70e1      	strb	r1, [r4, #3]
   1029e:	f88d 0000 	strb.w	r0, [sp]
   102a2:	f88d 1001 	strb.w	r1, [sp, #1]
   102a6:	88b0      	ldrh	r0, [r6, #4]
   102a8:	f8ad 0002 	strh.w	r0, [sp, #2]
   102ac:	4669      	mov	r1, sp
   102ae:	4650      	mov	r0, sl
   102b0:	f7fd fd92 	bl	ddd8 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   102b4:	f884 9001 	strb.w	r9, [r4, #1]
   102b8:	4628      	mov	r0, r5
   102ba:	e7e1      	b.n	10280 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

000102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   102bc:	2008      	movs	r0, #8
   102be:	f7f7 b8b3 	b.w	7428 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000102c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   102c2:	b510      	push	{r4, lr}
   102c4:	f7fd fc2b 	bl	db1e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   102c8:	f7f2 f87a 	bl	23c0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   102cc:	f7f7 f8ce 	bl	746c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   102d0:	f7fe f896 	bl	e400 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   102d4:	f7fd fe55 	bl	df82 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   102d8:	f7f3 f8c4 	bl	3464 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   102dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102e0:	f7f6 be96 	b.w	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>

000102e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   102e4:	f7f4 be8a 	b.w	4ffc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   102e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   102ec:	4288      	cmp	r0, r1
   102ee:	d303      	bcc.n	102f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   102f0:	f640 0148 	movw	r1, #2120	; 0x848
   102f4:	4288      	cmp	r0, r1
   102f6:	d300      	bcc.n	102fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   102f8:	4608      	mov	r0, r1
   102fa:	b280      	uxth	r0, r0
   102fc:	4770      	bx	lr
   102fe:	07c1      	lsls	r1, r0, #31
   10300:	d001      	beq.n	10306 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10302:	2001      	movs	r0, #1
   10304:	4770      	bx	lr
   10306:	0780      	lsls	r0, r0, #30
   10308:	d501      	bpl.n	1030e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1030a:	2002      	movs	r0, #2
   1030c:	4770      	bx	lr
   1030e:	2000      	movs	r0, #0
   10310:	4770      	bx	lr
   10312:	b510      	push	{r4, lr}
   10314:	2801      	cmp	r0, #1
   10316:	d006      	beq.n	10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10318:	2802      	cmp	r0, #2
   1031a:	d004      	beq.n	10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1031c:	f240 21d7 	movw	r1, #727	; 0x2d7
   10320:	2006      	movs	r0, #6
   10322:	f7f0 fb35 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10326:	bd10      	pop	{r4, pc}
   10328:	b510      	push	{r4, lr}
   1032a:	f7f6 fe5b 	bl	6fe4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   1032e:	b158      	cbz	r0, 10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10330:	f7f6 fe8e 	bl	7050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
   10334:	4604      	mov	r4, r0
   10336:	f7fe fc65 	bl	ec04 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1033a:	b918      	cbnz	r0, 10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   1033c:	4620      	mov	r0, r4
   1033e:	f7fe fc57 	bl	ebf0 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10342:	b108      	cbz	r0, 10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10344:	2000      	movs	r0, #0
   10346:	bd10      	pop	{r4, pc}
   10348:	2001      	movs	r0, #1
   1034a:	bd10      	pop	{r4, pc}
   1034c:	b570      	push	{r4, r5, r6, lr}
   1034e:	460c      	mov	r4, r1
   10350:	4605      	mov	r5, r0
   10352:	b112      	cbz	r2, 1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10354:	291f      	cmp	r1, #31
   10356:	d80c      	bhi.n	10372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10358:	e016      	b.n	10388 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1035a:	f7f1 f8bd 	bl	14d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1035e:	42a0      	cmp	r0, r4
   10360:	d201      	bcs.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10362:	2007      	movs	r0, #7
   10364:	bd70      	pop	{r4, r5, r6, pc}
   10366:	4628      	mov	r0, r5
   10368:	f7fe fc4a 	bl	ec00 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1036c:	b118      	cbz	r0, 10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1036e:	2c1f      	cmp	r4, #31
   10370:	d901      	bls.n	10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10372:	2012      	movs	r0, #18
   10374:	bd70      	pop	{r4, r5, r6, pc}
   10376:	4628      	mov	r0, r5
   10378:	f7fe fc4b 	bl	ec12 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1037c:	b130      	cbz	r0, 1038c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   1037e:	4621      	mov	r1, r4
   10380:	4628      	mov	r0, r5
   10382:	f7fe fc14 	bl	ebae <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10386:	b118      	cbz	r0, 10390 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10388:	2000      	movs	r0, #0
   1038a:	bd70      	pop	{r4, r5, r6, pc}
   1038c:	2042      	movs	r0, #66	; 0x42
   1038e:	bd70      	pop	{r4, r5, r6, pc}
   10390:	2045      	movs	r0, #69	; 0x45
   10392:	bd70      	pop	{r4, r5, r6, pc}
   10394:	b510      	push	{r4, lr}
   10396:	4604      	mov	r4, r0
   10398:	7840      	ldrb	r0, [r0, #1]
   1039a:	06c1      	lsls	r1, r0, #27
   1039c:	d51c      	bpl.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1039e:	07c0      	lsls	r0, r0, #31
   103a0:	d00b      	beq.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103a2:	f7f7 f815 	bl	73d0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   103a6:	b1b8      	cbz	r0, 103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103a8:	7860      	ldrb	r0, [r4, #1]
   103aa:	06c1      	lsls	r1, r0, #27
   103ac:	d405      	bmi.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103ae:	0700      	lsls	r0, r0, #28
   103b0:	d503      	bpl.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103b2:	7d20      	ldrb	r0, [r4, #20]
   103b4:	2802      	cmp	r0, #2
   103b6:	d10f      	bne.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103b8:	e010      	b.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103ba:	7d20      	ldrb	r0, [r4, #20]
   103bc:	2802      	cmp	r0, #2
   103be:	d001      	beq.n	103c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   103c0:	7ea0      	ldrb	r0, [r4, #26]
   103c2:	b948      	cbnz	r0, 103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103c4:	7860      	ldrb	r0, [r4, #1]
   103c6:	0700      	lsls	r0, r0, #28
   103c8:	d408      	bmi.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103ca:	f8d4 0005 	ldr.w	r0, [r4, #5]
   103ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   103d2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   103d6:	d201      	bcs.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103d8:	2011      	movs	r0, #17
   103da:	bd10      	pop	{r4, pc}
   103dc:	2000      	movs	r0, #0
   103de:	bd10      	pop	{r4, pc}
   103e0:	b538      	push	{r3, r4, r5, lr}
   103e2:	4604      	mov	r4, r0
   103e4:	7800      	ldrb	r0, [r0, #0]
   103e6:	28ef      	cmp	r0, #239	; 0xef
   103e8:	d843      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103ea:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   103ee:	f8ad 0000 	strh.w	r0, [sp]
   103f2:	9800      	ldr	r0, [sp, #0]
   103f4:	f000 f91f 	bl	10636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x352>
   103f8:	b3a0      	cbz	r0, 10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   103fa:	7861      	ldrb	r1, [r4, #1]
   103fc:	0708      	lsls	r0, r1, #28
   103fe:	d40b      	bmi.n	10418 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10400:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10404:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10408:	0a02      	lsrs	r2, r0, #8
   1040a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1040e:	d830      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10410:	2220      	movs	r2, #32
   10412:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10416:	d82c      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10418:	7a60      	ldrb	r0, [r4, #9]
   1041a:	b318      	cbz	r0, 10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1041c:	2807      	cmp	r0, #7
   1041e:	d828      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10420:	7aa0      	ldrb	r0, [r4, #10]
   10422:	b128      	cbz	r0, 10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10424:	2801      	cmp	r0, #1
   10426:	d003      	beq.n	10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10428:	2802      	cmp	r0, #2
   1042a:	d001      	beq.n	10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1042c:	2803      	cmp	r0, #3
   1042e:	d120      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10430:	074a      	lsls	r2, r1, #29
   10432:	d403      	bmi.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10434:	2802      	cmp	r0, #2
   10436:	d001      	beq.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10438:	2803      	cmp	r0, #3
   1043a:	d105      	bne.n	10448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   1043c:	7ae0      	ldrb	r0, [r4, #11]
   1043e:	b108      	cbz	r0, 10444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10440:	2801      	cmp	r0, #1
   10442:	d116      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10444:	0748      	lsls	r0, r1, #29
   10446:	d407      	bmi.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10448:	7ca0      	ldrb	r0, [r4, #18]
   1044a:	b128      	cbz	r0, 10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1044c:	2801      	cmp	r0, #1
   1044e:	d003      	beq.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10450:	2802      	cmp	r0, #2
   10452:	d001      	beq.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10454:	2803      	cmp	r0, #3
   10456:	d10c      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10458:	06c8      	lsls	r0, r1, #27
   1045a:	7d20      	ldrb	r0, [r4, #20]
   1045c:	d503      	bpl.n	10466 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1045e:	2801      	cmp	r0, #1
   10460:	d107      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10462:	e002      	b.n	1046a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10464:	e005      	b.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10466:	2802      	cmp	r0, #2
   10468:	d003      	beq.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1046a:	7e20      	ldrb	r0, [r4, #24]
   1046c:	b118      	cbz	r0, 10476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1046e:	2801      	cmp	r0, #1
   10470:	d001      	beq.n	10476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10472:	2012      	movs	r0, #18
   10474:	bd38      	pop	{r3, r4, r5, pc}
   10476:	2000      	movs	r0, #0
   10478:	bd38      	pop	{r3, r4, r5, pc}
   1047a:	b510      	push	{r4, lr}
   1047c:	0004      	movs	r4, r0
   1047e:	d005      	beq.n	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10480:	f7f6 ffe4 	bl	744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10484:	4384      	bics	r4, r0
   10486:	d001      	beq.n	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10488:	2000      	movs	r0, #0
   1048a:	bd10      	pop	{r4, pc}
   1048c:	2001      	movs	r0, #1
   1048e:	bd10      	pop	{r4, pc}
   10490:	28fb      	cmp	r0, #251	; 0xfb
   10492:	d803      	bhi.n	1049c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   10494:	f640 0048 	movw	r0, #2120	; 0x848
   10498:	4281      	cmp	r1, r0
   1049a:	d901      	bls.n	104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   1049c:	2011      	movs	r0, #17
   1049e:	4770      	bx	lr
   104a0:	2000      	movs	r0, #0
   104a2:	4770      	bx	lr
   104a4:	381b      	subs	r0, #27
   104a6:	28e1      	cmp	r0, #225	; 0xe1
   104a8:	d206      	bcs.n	104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104aa:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   104ae:	d303      	bcc.n	104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104b0:	f244 2090 	movw	r0, #17040	; 0x4290
   104b4:	4281      	cmp	r1, r0
   104b6:	d901      	bls.n	104bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   104b8:	2012      	movs	r0, #18
   104ba:	4770      	bx	lr
   104bc:	2000      	movs	r0, #0
   104be:	4770      	bx	lr
   104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104c4:	4606      	mov	r6, r0
   104c6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   104ca:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   104ce:	4615      	mov	r5, r2
   104d0:	302c      	adds	r0, #44	; 0x2c
   104d2:	f7f4 f82f 	bl	4534 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   104d6:	4680      	mov	r8, r0
   104d8:	2102      	movs	r1, #2
   104da:	f7fd fc4d 	bl	dd78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104de:	4287      	cmp	r7, r0
   104e0:	d200      	bcs.n	104e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   104e2:	4638      	mov	r0, r7
   104e4:	4607      	mov	r7, r0
   104e6:	2102      	movs	r1, #2
   104e8:	4640      	mov	r0, r8
   104ea:	f7fd fc45 	bl	dd78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104ee:	4284      	cmp	r4, r0
   104f0:	d200      	bcs.n	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   104f2:	4620      	mov	r0, r4
   104f4:	8831      	ldrh	r1, [r6, #0]
   104f6:	8029      	strh	r1, [r5, #0]
   104f8:	2f1b      	cmp	r7, #27
   104fa:	d913      	bls.n	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   104fc:	2ffb      	cmp	r7, #251	; 0xfb
   104fe:	d300      	bcc.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10500:	27fb      	movs	r7, #251	; 0xfb
   10502:	806f      	strh	r7, [r5, #2]
   10504:	281b      	cmp	r0, #27
   10506:	d90f      	bls.n	10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   10508:	28fb      	cmp	r0, #251	; 0xfb
   1050a:	d300      	bcc.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1050c:	20fb      	movs	r0, #251	; 0xfb
   1050e:	80e8      	strh	r0, [r5, #6]
   10510:	4640      	mov	r0, r8
   10512:	f7ff fee9 	bl	102e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10516:	80a8      	strh	r0, [r5, #4]
   10518:	4640      	mov	r0, r8
   1051a:	f7ff fee5 	bl	102e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1051e:	8128      	strh	r0, [r5, #8]
   10520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10524:	271b      	movs	r7, #27
   10526:	e7ec      	b.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10528:	201b      	movs	r0, #27
   1052a:	e7f0      	b.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10530:	7890      	ldrb	r0, [r2, #2]
   10532:	9e06      	ldr	r6, [sp, #24]
   10534:	461d      	mov	r5, r3
   10536:	4614      	mov	r4, r2
   10538:	b908      	cbnz	r0, 1053e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1053a:	f7f6 ff87 	bl	744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1053e:	78e4      	ldrb	r4, [r4, #3]
   10540:	4607      	mov	r7, r0
   10542:	b914      	cbnz	r4, 1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10544:	f7f6 ff82 	bl	744c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10548:	4604      	mov	r4, r0
   1054a:	b16f      	cbz	r7, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1054c:	b164      	cbz	r4, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1054e:	4638      	mov	r0, r7
   10550:	f7ff fed5 	bl	102fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10554:	4620      	mov	r0, r4
   10556:	f7ff fed2 	bl	102fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1055a:	b12f      	cbz	r7, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1055c:	b124      	cbz	r4, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1055e:	702f      	strb	r7, [r5, #0]
   10560:	7034      	strb	r4, [r6, #0]
   10562:	2000      	movs	r0, #0
   10564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10568:	2009      	movs	r0, #9
   1056a:	e7fb      	b.n	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   1056c:	207f      	movs	r0, #127	; 0x7f
   1056e:	f000 b843 	b.w	105f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x314>
   10572:	b508      	push	{r3, lr}
   10574:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10578:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   1057c:	f88d 0000 	strb.w	r0, [sp]
   10580:	9800      	ldr	r0, [sp, #0]
   10582:	9000      	str	r0, [sp, #0]
   10584:	f89d 0000 	ldrb.w	r0, [sp]
   10588:	b100      	cbz	r0, 1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   1058a:	2001      	movs	r0, #1
   1058c:	1e40      	subs	r0, r0, #1
   1058e:	4208      	tst	r0, r1
   10590:	d003      	beq.n	1059a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10592:	2904      	cmp	r1, #4
   10594:	d001      	beq.n	1059a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10596:	2001      	movs	r0, #1
   10598:	bd08      	pop	{r3, pc}
   1059a:	2000      	movs	r0, #0
   1059c:	bd08      	pop	{r3, pc}
   1059e:	b510      	push	{r4, lr}
   105a0:	f7f6 fd20 	bl	6fe4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   105a4:	2800      	cmp	r0, #0
   105a6:	d000      	beq.n	105aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2c6>
   105a8:	2001      	movs	r0, #1
   105aa:	bd10      	pop	{r4, pc}
   105ac:	b570      	push	{r4, r5, r6, lr}
   105ae:	4605      	mov	r5, r0
   105b0:	f7fe fb2f 	bl	ec12 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105b4:	b170      	cbz	r0, 105d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f0>
   105b6:	4628      	mov	r0, r5
   105b8:	f7fe fce8 	bl	ef8c <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   105bc:	2800      	cmp	r0, #0
   105be:	d008      	beq.n	105d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ee>
   105c0:	4628      	mov	r0, r5
   105c2:	f7fe fce0 	bl	ef86 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   105c6:	4604      	mov	r4, r0
   105c8:	4628      	mov	r0, r5
   105ca:	f7fe fcb6 	bl	ef3a <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   105ce:	b118      	cbz	r0, 105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2f4>
   105d0:	200c      	movs	r0, #12
   105d2:	bd70      	pop	{r4, r5, r6, pc}
   105d4:	2042      	movs	r0, #66	; 0x42
   105d6:	bd70      	pop	{r4, r5, r6, pc}
   105d8:	b164      	cbz	r4, 105f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   105da:	8820      	ldrh	r0, [r4, #0]
   105dc:	f7fd fa6c 	bl	dab8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   105e0:	8820      	ldrh	r0, [r4, #0]
   105e2:	2100      	movs	r1, #0
   105e4:	f7f0 fda4 	bl	1130 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   105e8:	b120      	cbz	r0, 105f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x310>
   105ea:	f241 71ae 	movw	r1, #6062	; 0x17ae
   105ee:	2039      	movs	r0, #57	; 0x39
   105f0:	f7f0 f9ce 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105f4:	2000      	movs	r0, #0
   105f6:	bd70      	pop	{r4, r5, r6, pc}
   105f8:	b508      	push	{r3, lr}
   105fa:	f640 1288 	movw	r2, #2440	; 0x988
   105fe:	2300      	movs	r3, #0
   10600:	4669      	mov	r1, sp
   10602:	f7fc f8e7 	bl	c7d4 <mpsl_fem_tx_power_split>
   10606:	bd08      	pop	{r3, pc}
   10608:	b530      	push	{r4, r5, lr}
   1060a:	f340 0400 	sbfx	r4, r0, #0, #1
   1060e:	f340 0040 	sbfx	r0, r0, #1, #1
   10612:	1c40      	adds	r0, r0, #1
   10614:	9d03      	ldr	r5, [sp, #12]
   10616:	1c64      	adds	r4, r4, #1
   10618:	d000      	beq.n	1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   1061a:	b119      	cbz	r1, 10624 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   1061c:	b100      	cbz	r0, 10620 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33c>
   1061e:	b10a      	cbz	r2, 10624 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x340>
   10620:	b91c      	cbnz	r4, 1062a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x346>
   10622:	e001      	b.n	10628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10624:	2011      	movs	r0, #17
   10626:	bd30      	pop	{r4, r5, pc}
   10628:	2100      	movs	r1, #0
   1062a:	7019      	strb	r1, [r3, #0]
   1062c:	b900      	cbnz	r0, 10630 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x34c>
   1062e:	2200      	movs	r2, #0
   10630:	702a      	strb	r2, [r5, #0]
   10632:	2000      	movs	r0, #0
   10634:	bd30      	pop	{r4, r5, pc}
   10636:	b2c0      	uxtb	r0, r0
   10638:	06c1      	lsls	r1, r0, #27
   1063a:	d40c      	bmi.n	10656 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x372>
   1063c:	0681      	lsls	r1, r0, #26
   1063e:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10642:	d503      	bpl.n	1064c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x368>
   10644:	b9d1      	cbnz	r1, 1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10646:	0781      	lsls	r1, r0, #30
   10648:	d418      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1064a:	e001      	b.n	10650 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x36c>
   1064c:	2900      	cmp	r1, #0
   1064e:	d1fa      	bne.n	10646 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x362>
   10650:	0700      	lsls	r0, r0, #28
   10652:	d413      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10654:	e010      	b.n	10678 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   10656:	0641      	lsls	r1, r0, #25
   10658:	d410      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1065a:	0681      	lsls	r1, r0, #26
   1065c:	d40e      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   1065e:	07c1      	lsls	r1, r0, #31
   10660:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10664:	d004      	beq.n	10670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   10666:	2900      	cmp	r1, #0
   10668:	db02      	blt.n	10670 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38c>
   1066a:	0740      	lsls	r0, r0, #29
   1066c:	d404      	bmi.n	10678 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x394>
   1066e:	e005      	b.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10670:	0701      	lsls	r1, r0, #28
   10672:	d403      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10674:	0740      	lsls	r0, r0, #29
   10676:	d401      	bmi.n	1067c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x398>
   10678:	2001      	movs	r0, #1
   1067a:	4770      	bx	lr
   1067c:	2000      	movs	r0, #0
   1067e:	4770      	bx	lr
   10680:	b510      	push	{r4, lr}
   10682:	f7f3 ff3b 	bl	44fc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10686:	b110      	cbz	r0, 1068e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10688:	f44f 7188 	mov.w	r1, #272	; 0x110
   1068c:	e004      	b.n	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
   1068e:	f7f3 f86b 	bl	3768 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10692:	b120      	cbz	r0, 1069e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   10694:	f240 1115 	movw	r1, #277	; 0x115
   10698:	2001      	movs	r0, #1
   1069a:	f7f0 f979 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1069e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106a2:	2001      	movs	r0, #1
   106a4:	f7fd b858 	b.w	d758 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   106a8:	6802      	ldr	r2, [r0, #0]
   106aa:	b912      	cbnz	r2, 106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
   106ac:	6001      	str	r1, [r0, #0]
   106ae:	4770      	bx	lr
   106b0:	4602      	mov	r2, r0
   106b2:	6850      	ldr	r0, [r2, #4]
   106b4:	b108      	cbz	r0, 106ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   106b6:	428a      	cmp	r2, r1
   106b8:	d1fa      	bne.n	106b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3cc>
   106ba:	428a      	cmp	r2, r1
   106bc:	d0f7      	beq.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ca>
   106be:	6051      	str	r1, [r2, #4]
   106c0:	4770      	bx	lr
   106c2:	b510      	push	{r4, lr}
   106c4:	4604      	mov	r4, r0
   106c6:	e002      	b.n	106ce <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ea>
   106c8:	6820      	ldr	r0, [r4, #0]
   106ca:	4780      	blx	r0
   106cc:	6864      	ldr	r4, [r4, #4]
   106ce:	2c00      	cmp	r4, #0
   106d0:	d1fa      	bne.n	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3e4>
   106d2:	bd10      	pop	{r4, pc}
   106d4:	b510      	push	{r4, lr}
   106d6:	2000      	movs	r0, #0
   106d8:	f7fd f83e 	bl	d758 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   106dc:	f7f0 fe06 	bl	12ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   106e0:	f7f1 f89c 	bl	181c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   106e4:	f7f1 fa2a 	bl	1b3c <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   106e8:	2800      	cmp	r0, #0
   106ea:	d003      	beq.n	106f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x410>
   106ec:	21f2      	movs	r1, #242	; 0xf2
   106ee:	2001      	movs	r0, #1
   106f0:	f7f0 f94e 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106f4:	bd10      	pop	{r4, pc}
   106f6:	b510      	push	{r4, lr}
   106f8:	f7ff ffc2 	bl	10680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   106fc:	f7fe ff41 	bl	f582 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10700:	2800      	cmp	r0, #0
   10702:	d004      	beq.n	1070e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42a>
   10704:	f44f 7195 	mov.w	r1, #298	; 0x12a
   10708:	2001      	movs	r0, #1
   1070a:	f7f0 f941 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1070e:	bd10      	pop	{r4, pc}

00010710 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10710:	f7fb bd96 	b.w	c240 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10714:	000b0001 	.word	0x000b0001
   10718:	000a0002 	.word	0x000a0002
   1071c:	00090005 	.word	0x00090005
   10720:	0008000a 	.word	0x0008000a
   10724:	00070014 	.word	0x00070014
   10728:	0006001e 	.word	0x0006001e
   1072c:	00050032 	.word	0x00050032
   10730:	0004004b 	.word	0x0004004b
   10734:	00030064 	.word	0x00030064
   10738:	00020096 	.word	0x00020096
   1073c:	000100fa 	.word	0x000100fa
   10740:	000001f4 	.word	0x000001f4

00010744 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   10744:	b510      	push	{r4, lr}
   10746:	6844      	ldr	r4, [r0, #4]
   10748:	7803      	ldrb	r3, [r0, #0]
   1074a:	2100      	movs	r1, #0
   1074c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   10750:	3480      	adds	r4, #128	; 0x80
   10752:	4620      	mov	r0, r4
   10754:	f7fd fa9a 	bl	dc8c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10758:	b110      	cbz	r0, 10760 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   1075a:	2020      	movs	r0, #32
   1075c:	7760      	strb	r0, [r4, #29]
   1075e:	bd10      	pop	{r4, pc}
   10760:	2180      	movs	r1, #128	; 0x80
   10762:	207e      	movs	r0, #126	; 0x7e
   10764:	f7f0 f914 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010768 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10768:	2200      	movs	r2, #0
   1076a:	704a      	strb	r2, [r1, #1]
   1076c:	2214      	movs	r2, #20
   1076e:	700a      	strb	r2, [r1, #0]
   10770:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10774:	604a      	str	r2, [r1, #4]
   10776:	89c0      	ldrh	r0, [r0, #14]
   10778:	8108      	strh	r0, [r1, #8]
   1077a:	4770      	bx	lr
   1077c:	b510      	push	{r4, lr}
   1077e:	2801      	cmp	r0, #1
   10780:	d006      	beq.n	10790 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10782:	2802      	cmp	r0, #2
   10784:	d004      	beq.n	10790 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10786:	f240 21d7 	movw	r1, #727	; 0x2d7
   1078a:	2006      	movs	r0, #6
   1078c:	f7f0 f900 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10790:	bd10      	pop	{r4, pc}

00010792 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10792:	b510      	push	{r4, lr}
   10794:	f7f7 fa48 	bl	7c28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10798:	f000 f81d 	bl	107d6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1079c:	f7f6 ff24 	bl	75e8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   107a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107a4:	f7f7 b81e 	b.w	77e4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000107a8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   107a8:	b510      	push	{r4, lr}
   107aa:	24c8      	movs	r4, #200	; 0xc8
   107ac:	1e64      	subs	r4, r4, #1
   107ae:	b2e4      	uxtb	r4, r4
   107b0:	f7f6 ff38 	bl	7624 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   107b4:	2802      	cmp	r0, #2
   107b6:	d003      	beq.n	107c0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   107b8:	2801      	cmp	r0, #1
   107ba:	d000      	beq.n	107be <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   107bc:	2000      	movs	r0, #0
   107be:	bd10      	pop	{r4, pc}
   107c0:	2c00      	cmp	r4, #0
   107c2:	d1f3      	bne.n	107ac <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   107c4:	21ed      	movs	r1, #237	; 0xed
   107c6:	203b      	movs	r0, #59	; 0x3b
   107c8:	f7f0 f8e2 	bl	990 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107cc:	5840      	ldr	r0, [r0, r1]
   107ce:	2800      	cmp	r0, #0
   107d0:	d000      	beq.n	107d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   107d2:	2001      	movs	r0, #1
   107d4:	4770      	bx	lr

000107d6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   107d6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   107da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   107de:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   107e2:	f3bf 8f4f 	dsb	sy
   107e6:	f3bf 8f6f 	isb	sy
   107ea:	f7f7 b895 	b.w	7918 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   107ee:	2800      	cmp	r0, #0
   107f0:	db09      	blt.n	10806 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   107f2:	f000 021f 	and.w	r2, r0, #31
   107f6:	2101      	movs	r1, #1
   107f8:	4091      	lsls	r1, r2
   107fa:	0940      	lsrs	r0, r0, #5
   107fc:	0080      	lsls	r0, r0, #2
   107fe:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10802:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10806:	4770      	bx	lr
   10808:	2800      	cmp	r0, #0
   1080a:	db0d      	blt.n	10828 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1080c:	f000 021f 	and.w	r2, r0, #31
   10810:	2101      	movs	r1, #1
   10812:	4091      	lsls	r1, r2
   10814:	0940      	lsrs	r0, r0, #5
   10816:	0080      	lsls	r0, r0, #2
   10818:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1081c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10820:	f3bf 8f4f 	dsb	sy
   10824:	f3bf 8f6f 	isb	sy
   10828:	4770      	bx	lr
   1082a:	5840      	ldr	r0, [r0, r1]
   1082c:	2800      	cmp	r0, #0
   1082e:	d000      	beq.n	10832 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10830:	2001      	movs	r0, #1
   10832:	4770      	bx	lr
   10834:	5840      	ldr	r0, [r0, r1]
   10836:	2800      	cmp	r0, #0
   10838:	d000      	beq.n	1083c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1083a:	2001      	movs	r0, #1
   1083c:	4770      	bx	lr

0001083e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1083e:	b510      	push	{r4, lr}
   10840:	4604      	mov	r4, r0
   10842:	4608      	mov	r0, r1
   10844:	f7f7 fb1c 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1084c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10850:	fbb0 f0f1 	udiv	r0, r0, r1
   10854:	1a20      	subs	r0, r4, r0
   10856:	1e80      	subs	r0, r0, #2
   10858:	bd10      	pop	{r4, pc}

0001085a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1085a:	b510      	push	{r4, lr}
   1085c:	4604      	mov	r4, r0
   1085e:	4608      	mov	r0, r1
   10860:	f7f7 fb0e 	bl	7e80 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10868:	fbb0 f0f1 	udiv	r0, r0, r1
   1086c:	1a20      	subs	r0, r4, r0
   1086e:	bd10      	pop	{r4, pc}
   10870:	2804      	cmp	r0, #4
   10872:	d202      	bcs.n	1087a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10874:	f04f 0028 	mov.w	r0, #40	; 0x28
   10878:	4770      	bx	lr
   1087a:	d102      	bne.n	10882 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   1087c:	f04f 0010 	mov.w	r0, #16
   10880:	4770      	bx	lr
   10882:	f04f 0000 	mov.w	r0, #0
   10886:	4770      	bx	lr
   10888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1088c:	000d      	movs	r5, r1
   1088e:	4604      	mov	r4, r0
   10890:	f04f 0602 	mov.w	r6, #2
   10894:	f04f 0701 	mov.w	r7, #1
   10898:	d008      	beq.n	108ac <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   1089a:	7828      	ldrb	r0, [r5, #0]
   1089c:	b1d0      	cbz	r0, 108d4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   1089e:	2801      	cmp	r0, #1
   108a0:	d007      	beq.n	108b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   108a2:	2802      	cmp	r0, #2
   108a4:	d014      	beq.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   108a6:	2803      	cmp	r0, #3
   108a8:	d13e      	bne.n	10928 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   108aa:	e016      	b.n	108da <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   108ac:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   108b0:	e00e      	b.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   108b2:	6868      	ldr	r0, [r5, #4]
   108b4:	28c8      	cmp	r0, #200	; 0xc8
   108b6:	d303      	bcc.n	108c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   108b8:	2103      	movs	r1, #3
   108ba:	f7f9 f973 	bl	9ba4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   108be:	b108      	cbz	r0, 108c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   108c0:	2600      	movs	r6, #0
   108c2:	e007      	b.n	108d4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   108c4:	4620      	mov	r0, r4
   108c6:	6869      	ldr	r1, [r5, #4]
   108c8:	f000 f833 	bl	10932 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   108cc:	2601      	movs	r6, #1
   108ce:	e001      	b.n	108d4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   108d0:	f7f8 f974 	bl	8bbc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   108d4:	4630      	mov	r0, r6
   108d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108da:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   108de:	2800      	cmp	r0, #0
   108e0:	d1f6      	bne.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   108e2:	6868      	ldr	r0, [r5, #4]
   108e4:	f7f8 f93c 	bl	8b60 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   108e8:	b1f0      	cbz	r0, 10928 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   108ea:	6869      	ldr	r1, [r5, #4]
   108ec:	7808      	ldrb	r0, [r1, #0]
   108ee:	b130      	cbz	r0, 108fe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   108f0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   108f4:	2805      	cmp	r0, #5
   108f6:	d008      	beq.n	1090a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   108f8:	f44f 71be 	mov.w	r1, #380	; 0x17c
   108fc:	e011      	b.n	10922 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   108fe:	4620      	mov	r0, r4
   10900:	f000 f81f 	bl	10942 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10904:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   10908:	e7e2      	b.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1090a:	4620      	mov	r0, r4
   1090c:	f000 f832 	bl	10974 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10910:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10914:	4621      	mov	r1, r4
   10916:	f000 f80a 	bl	1092e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   1091a:	2800      	cmp	r0, #0
   1091c:	d1d8      	bne.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1091e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   10922:	206a      	movs	r0, #106	; 0x6a
   10924:	f7fb fd98 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10928:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   1092c:	e7d0      	b.n	108d0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   1092e:	f7f9 bb81 	b.w	a034 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10932:	4602      	mov	r2, r0
   10934:	7803      	ldrb	r3, [r0, #0]
   10936:	6840      	ldr	r0, [r0, #4]
   10938:	4408      	add	r0, r1
   1093a:	6050      	str	r0, [r2, #4]
   1093c:	3862      	subs	r0, #98	; 0x62
   1093e:	f7fa bb67 	b.w	b010 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10942:	2201      	movs	r2, #1
   10944:	7002      	strb	r2, [r0, #0]
   10946:	2200      	movs	r2, #0
   10948:	72c2      	strb	r2, [r0, #11]
   1094a:	790a      	ldrb	r2, [r1, #4]
   1094c:	b172      	cbz	r2, 1096c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
   1094e:	2200      	movs	r2, #0
   10950:	8102      	strh	r2, [r0, #8]
   10952:	794a      	ldrb	r2, [r1, #5]
   10954:	b162      	cbz	r2, 10970 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
   10956:	2203      	movs	r2, #3
   10958:	7282      	strb	r2, [r0, #10]
   1095a:	688a      	ldr	r2, [r1, #8]
   1095c:	3273      	adds	r2, #115	; 0x73
   1095e:	6042      	str	r2, [r0, #4]
   10960:	68c9      	ldr	r1, [r1, #12]
   10962:	6101      	str	r1, [r0, #16]
   10964:	2103      	movs	r1, #3
   10966:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1096a:	4770      	bx	lr
   1096c:	222b      	movs	r2, #43	; 0x2b
   1096e:	e7ef      	b.n	10950 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   10970:	2202      	movs	r2, #2
   10972:	e7f1      	b.n	10958 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
   10974:	b510      	push	{r4, lr}
   10976:	2200      	movs	r2, #0
   10978:	7002      	strb	r2, [r0, #0]
   1097a:	72c2      	strb	r2, [r0, #11]
   1097c:	790a      	ldrb	r2, [r1, #4]
   1097e:	b1a2      	cbz	r2, 109aa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
   10980:	2200      	movs	r2, #0
   10982:	8102      	strh	r2, [r0, #8]
   10984:	794a      	ldrb	r2, [r1, #5]
   10986:	b192      	cbz	r2, 109ae <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
   10988:	2203      	movs	r2, #3
   1098a:	7282      	strb	r2, [r0, #10]
   1098c:	68ca      	ldr	r2, [r1, #12]
   1098e:	3273      	adds	r2, #115	; 0x73
   10990:	6042      	str	r2, [r0, #4]
   10992:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   10996:	6889      	ldr	r1, [r1, #8]
   10998:	17cb      	asrs	r3, r1, #31
   1099a:	1861      	adds	r1, r4, r1
   1099c:	415a      	adcs	r2, r3
   1099e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   109a2:	2104      	movs	r1, #4
   109a4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   109a8:	bd10      	pop	{r4, pc}
   109aa:	222b      	movs	r2, #43	; 0x2b
   109ac:	e7e9      	b.n	10982 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
   109ae:	2202      	movs	r2, #2
   109b0:	e7eb      	b.n	1098a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
   109b2:	b570      	push	{r4, r5, r6, lr}
   109b4:	4605      	mov	r5, r0
   109b6:	460c      	mov	r4, r1
   109b8:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   109bc:	f7fa f8ee 	bl	ab9c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   109c0:	b178      	cbz	r0, 109e2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
   109c2:	4620      	mov	r0, r4
   109c4:	f000 f810 	bl	109e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   109c8:	6a22      	ldr	r2, [r4, #32]
   109ca:	2109      	movs	r1, #9
   109cc:	4628      	mov	r0, r5
   109ce:	4790      	blx	r2
   109d0:	2800      	cmp	r0, #0
   109d2:	d008      	beq.n	109e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   109d4:	7800      	ldrb	r0, [r0, #0]
   109d6:	2800      	cmp	r0, #0
   109d8:	d005      	beq.n	109e6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   109da:	21dc      	movs	r1, #220	; 0xdc
   109dc:	206a      	movs	r0, #106	; 0x6a
   109de:	f7fb fd3b 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   109e2:	21d8      	movs	r1, #216	; 0xd8
   109e4:	e7fa      	b.n	109dc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
   109e6:	bd70      	pop	{r4, r5, r6, pc}
   109e8:	2100      	movs	r1, #0
   109ea:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   109ee:	f800 1f24 	strb.w	r1, [r0, #36]!
   109f2:	7041      	strb	r1, [r0, #1]
   109f4:	4770      	bx	lr

000109f6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   109f6:	b570      	push	{r4, r5, r6, lr}
   109f8:	f7f8 f93c 	bl	8c74 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   109fc:	4605      	mov	r5, r0
   109fe:	2400      	movs	r4, #0
   10a00:	e006      	b.n	10a10 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10a02:	4620      	mov	r0, r4
   10a04:	f7f8 f93c 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a08:	f7ff ffee 	bl	109e8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10a0c:	1c64      	adds	r4, r4, #1
   10a0e:	b2e4      	uxtb	r4, r4
   10a10:	42ac      	cmp	r4, r5
   10a12:	d3f6      	bcc.n	10a02 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10a14:	bd70      	pop	{r4, r5, r6, pc}

00010a16 <mpsl_timeslot_request>:
   10a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a1a:	460d      	mov	r5, r1
   10a1c:	f7f8 f930 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a20:	0004      	movs	r4, r0
   10a22:	d008      	beq.n	10a36 <mpsl_timeslot_request+0x20>
   10a24:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10a28:	f06f 0622 	mvn.w	r6, #34	; 0x22
   10a2c:	2801      	cmp	r0, #1
   10a2e:	d006      	beq.n	10a3e <mpsl_timeslot_request+0x28>
   10a30:	2802      	cmp	r0, #2
   10a32:	d111      	bne.n	10a58 <mpsl_timeslot_request+0x42>
   10a34:	e003      	b.n	10a3e <mpsl_timeslot_request+0x28>
   10a36:	f06f 0001 	mvn.w	r0, #1
   10a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a3e:	f06f 0715 	mvn.w	r7, #21
   10a42:	b15d      	cbz	r5, 10a5c <mpsl_timeslot_request+0x46>
   10a44:	4628      	mov	r0, r5
   10a46:	f7f8 f88b 	bl	8b60 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10a4a:	b138      	cbz	r0, 10a5c <mpsl_timeslot_request+0x46>
   10a4c:	7828      	ldrb	r0, [r5, #0]
   10a4e:	b138      	cbz	r0, 10a60 <mpsl_timeslot_request+0x4a>
   10a50:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10a54:	2802      	cmp	r0, #2
   10a56:	d008      	beq.n	10a6a <mpsl_timeslot_request+0x54>
   10a58:	4630      	mov	r0, r6
   10a5a:	e7ee      	b.n	10a3a <mpsl_timeslot_request+0x24>
   10a5c:	4638      	mov	r0, r7
   10a5e:	e7ec      	b.n	10a3a <mpsl_timeslot_request+0x24>
   10a60:	4629      	mov	r1, r5
   10a62:	4620      	mov	r0, r4
   10a64:	f7ff ff6d 	bl	10942 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10a68:	e003      	b.n	10a72 <mpsl_timeslot_request+0x5c>
   10a6a:	4629      	mov	r1, r5
   10a6c:	4620      	mov	r0, r4
   10a6e:	f7ff ff81 	bl	10974 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10a72:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10a76:	4621      	mov	r1, r4
   10a78:	f7ff ff59 	bl	1092e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10a7c:	b108      	cbz	r0, 10a82 <mpsl_timeslot_request+0x6c>
   10a7e:	2000      	movs	r0, #0
   10a80:	e7db      	b.n	10a3a <mpsl_timeslot_request+0x24>
   10a82:	f240 21b1 	movw	r1, #689	; 0x2b1
   10a86:	206a      	movs	r0, #106	; 0x6a
   10a88:	f7fb fce6 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00010a8c <mpsl_timeslot_session_close>:
   10a8c:	b510      	push	{r4, lr}
   10a8e:	4604      	mov	r4, r0
   10a90:	f7f8 f8f6 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10a94:	0001      	movs	r1, r0
   10a96:	d005      	beq.n	10aa4 <mpsl_timeslot_session_close+0x18>
   10a98:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   10a9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
   10aa0:	b978      	cbnz	r0, 10ac2 <mpsl_timeslot_session_close+0x36>
   10aa2:	e002      	b.n	10aaa <mpsl_timeslot_session_close+0x1e>
   10aa4:	f06f 0001 	mvn.w	r0, #1
   10aa8:	bd10      	pop	{r4, pc}
   10aaa:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   10aae:	b140      	cbz	r0, 10ac2 <mpsl_timeslot_session_close+0x36>
   10ab0:	2802      	cmp	r0, #2
   10ab2:	d008      	beq.n	10ac6 <mpsl_timeslot_session_close+0x3a>
   10ab4:	2801      	cmp	r0, #1
   10ab6:	d006      	beq.n	10ac6 <mpsl_timeslot_session_close+0x3a>
   10ab8:	2001      	movs	r0, #1
   10aba:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   10abe:	2000      	movs	r0, #0
   10ac0:	bd10      	pop	{r4, pc}
   10ac2:	4610      	mov	r0, r2
   10ac4:	bd10      	pop	{r4, pc}
   10ac6:	4620      	mov	r0, r4
   10ac8:	f7ff ff73 	bl	109b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
   10acc:	e7f7      	b.n	10abe <mpsl_timeslot_session_close+0x32>

00010ace <mpsl_timeslot_session_count_set>:
   10ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ad2:	460e      	mov	r6, r1
   10ad4:	4607      	mov	r7, r0
   10ad6:	f7f8 f8cd 	bl	8c74 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10ada:	4605      	mov	r5, r0
   10adc:	2400      	movs	r4, #0
   10ade:	e00b      	b.n	10af8 <mpsl_timeslot_session_count_set+0x2a>
   10ae0:	4620      	mov	r0, r4
   10ae2:	f7f8 f8cd 	bl	8c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10ae6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   10aea:	b118      	cbz	r0, 10af4 <mpsl_timeslot_session_count_set+0x26>
   10aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10af4:	1c64      	adds	r4, r4, #1
   10af6:	b2e4      	uxtb	r4, r4
   10af8:	42ac      	cmp	r4, r5
   10afa:	d3f1      	bcc.n	10ae0 <mpsl_timeslot_session_count_set+0x12>
   10afc:	2e08      	cmp	r6, #8
   10afe:	d902      	bls.n	10b06 <mpsl_timeslot_session_count_set+0x38>
   10b00:	f06f 0015 	mvn.w	r0, #21
   10b04:	e7f4      	b.n	10af0 <mpsl_timeslot_session_count_set+0x22>
   10b06:	b117      	cbz	r7, 10b0e <mpsl_timeslot_session_count_set+0x40>
   10b08:	4631      	mov	r1, r6
   10b0a:	4638      	mov	r0, r7
   10b0c:	e001      	b.n	10b12 <mpsl_timeslot_session_count_set+0x44>
   10b0e:	2100      	movs	r1, #0
   10b10:	4608      	mov	r0, r1
   10b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10b16:	f7f8 b899 	b.w	8c4c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00010b1a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10b1a:	f7fa bd33 	b.w	b584 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010b1e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10b1e:	b510      	push	{r4, lr}
   10b20:	2000      	movs	r0, #0
   10b22:	f7fb f88b 	bl	bc3c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10b26:	6800      	ldr	r0, [r0, #0]
   10b28:	2800      	cmp	r0, #0
   10b2a:	bf18      	it	ne
   10b2c:	2001      	movne	r0, #1
   10b2e:	bd10      	pop	{r4, pc}

00010b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10b30:	b510      	push	{r4, lr}
   10b32:	f7fb f8fb 	bl	bd2c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10b36:	f7fa fbdf 	bl	b2f8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10b3a:	f000 f804 	bl	10b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10b3e:	b280      	uxth	r0, r0
   10b40:	bd10      	pop	{r4, pc}

00010b42 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   10b42:	f7fb b855 	b.w	bbf0 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00010b46 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10b46:	0a41      	lsrs	r1, r0, #9
   10b48:	f643 5209 	movw	r2, #15625	; 0x3d09
   10b4c:	4351      	muls	r1, r2
   10b4e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10b52:	fb10 f002 	smulbb	r0, r0, r2
   10b56:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10b5a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10b5e:	4770      	bx	lr
   10b60:	2800      	cmp	r0, #0
   10b62:	db09      	blt.n	10b78 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10b64:	f000 021f 	and.w	r2, r0, #31
   10b68:	2101      	movs	r1, #1
   10b6a:	4091      	lsls	r1, r2
   10b6c:	0940      	lsrs	r0, r0, #5
   10b6e:	0080      	lsls	r0, r0, #2
   10b70:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b74:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b78:	4770      	bx	lr
   10b7a:	2800      	cmp	r0, #0
   10b7c:	db0d      	blt.n	10b9a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10b7e:	f000 021f 	and.w	r2, r0, #31
   10b82:	2101      	movs	r1, #1
   10b84:	4091      	lsls	r1, r2
   10b86:	0940      	lsrs	r0, r0, #5
   10b88:	0080      	lsls	r0, r0, #2
   10b8a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b8e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10b92:	f3bf 8f4f 	dsb	sy
   10b96:	f3bf 8f6f 	isb	sy
   10b9a:	4770      	bx	lr
   10b9c:	5840      	ldr	r0, [r0, r1]
   10b9e:	2800      	cmp	r0, #0
   10ba0:	d000      	beq.n	10ba4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10ba2:	2001      	movs	r0, #1
   10ba4:	4770      	bx	lr
   10ba6:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10baa:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10bae:	f002 0201 	and.w	r2, r2, #1
   10bb2:	03c0      	lsls	r0, r0, #15
   10bb4:	d503      	bpl.n	10bbe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bb6:	428a      	cmp	r2, r1
   10bb8:	d101      	bne.n	10bbe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bba:	2001      	movs	r0, #1
   10bbc:	4770      	bx	lr
   10bbe:	2000      	movs	r0, #0
   10bc0:	4770      	bx	lr

00010bc2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10bc2:	b510      	push	{r4, lr}
   10bc4:	2101      	movs	r1, #1
   10bc6:	0788      	lsls	r0, r1, #30
   10bc8:	f7fb fbf0 	bl	c3ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10bcc:	2800      	cmp	r0, #0
   10bce:	d000      	beq.n	10bd2 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10bd0:	2001      	movs	r0, #1
   10bd2:	bd10      	pop	{r4, pc}

00010bd4 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10bd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10bd8:	2101      	movs	r1, #1
   10bda:	6001      	str	r1, [r0, #0]
   10bdc:	4770      	bx	lr

00010bde <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10bde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10be2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10be6:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10bea:	f002 0203 	and.w	r2, r2, #3
   10bee:	03c9      	lsls	r1, r1, #15
   10bf0:	d503      	bpl.n	10bfa <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10bf2:	4282      	cmp	r2, r0
   10bf4:	d101      	bne.n	10bfa <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10bf6:	2001      	movs	r0, #1
   10bf8:	4770      	bx	lr
   10bfa:	2000      	movs	r0, #0
   10bfc:	4770      	bx	lr

00010bfe <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10bfe:	b510      	push	{r4, lr}
   10c00:	2100      	movs	r1, #0
   10c02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10c06:	f7fb fbd1 	bl	c3ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10c0a:	2800      	cmp	r0, #0
   10c0c:	d000      	beq.n	10c10 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10c0e:	2001      	movs	r0, #1
   10c10:	bd10      	pop	{r4, pc}
   10c12:	2800      	cmp	r0, #0
   10c14:	db09      	blt.n	10c2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10c16:	f000 021f 	and.w	r2, r0, #31
   10c1a:	2101      	movs	r1, #1
   10c1c:	4091      	lsls	r1, r2
   10c1e:	0940      	lsrs	r0, r0, #5
   10c20:	0080      	lsls	r0, r0, #2
   10c22:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c26:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c2a:	4770      	bx	lr
   10c2c:	2800      	cmp	r0, #0
   10c2e:	db0d      	blt.n	10c4c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10c30:	f000 021f 	and.w	r2, r0, #31
   10c34:	2101      	movs	r1, #1
   10c36:	4091      	lsls	r1, r2
   10c38:	0940      	lsrs	r0, r0, #5
   10c3a:	0080      	lsls	r0, r0, #2
   10c3c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c40:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c44:	f3bf 8f4f 	dsb	sy
   10c48:	f3bf 8f6f 	isb	sy
   10c4c:	4770      	bx	lr
   10c4e:	1000      	.short	0x1000
   10c50:	00fa0002 	.word	0x00fa0002
   10c54:	e8ff0000 	.word	0xe8ff0000
   10c58:	95775fae 	.word	0x95775fae
   10c5c:	6227c87c 	.word	0x6227c87c
   10c60:	eae61814 	.word	0xeae61814
   10c64:	3992c65d 	.word	0x3992c65d
   10c68:	3a72      	.short	0x3a72
   10c6a:	2800      	cmp	r0, #0
   10c6c:	db09      	blt.n	10c82 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10c6e:	f000 021f 	and.w	r2, r0, #31
   10c72:	2101      	movs	r1, #1
   10c74:	4091      	lsls	r1, r2
   10c76:	0940      	lsrs	r0, r0, #5
   10c78:	0080      	lsls	r0, r0, #2
   10c7a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c7e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c82:	4770      	bx	lr

00010c84 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10c84:	f3ef 8110 	mrs	r1, PRIMASK
   10c88:	b672      	cpsid	i
   10c8a:	7802      	ldrb	r2, [r0, #0]
   10c8c:	2a01      	cmp	r2, #1
   10c8e:	d001      	beq.n	10c94 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10c90:	2201      	movs	r2, #1
   10c92:	e000      	b.n	10c96 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10c94:	2200      	movs	r2, #0
   10c96:	2301      	movs	r3, #1
   10c98:	7003      	strb	r3, [r0, #0]
   10c9a:	b901      	cbnz	r1, 10c9e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10c9c:	b662      	cpsie	i
   10c9e:	b10a      	cbz	r2, 10ca4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10ca0:	2000      	movs	r0, #0
   10ca2:	4770      	bx	lr
   10ca4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10ca8:	4770      	bx	lr

00010caa <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10caa:	2100      	movs	r1, #0
   10cac:	7001      	strb	r1, [r0, #0]
   10cae:	4608      	mov	r0, r1
   10cb0:	4770      	bx	lr

00010cb2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10cb2:	f3ef 8110 	mrs	r1, PRIMASK
   10cb6:	b672      	cpsid	i
   10cb8:	2200      	movs	r2, #0
   10cba:	7002      	strb	r2, [r0, #0]
   10cbc:	b901      	cbnz	r1, 10cc0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10cbe:	b662      	cpsie	i
   10cc0:	2000      	movs	r0, #0
   10cc2:	4770      	bx	lr

00010cc4 <mpsl_low_priority_process>:
   10cc4:	f7fb bcc6 	b.w	c654 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010cc8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10cc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10ccc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10cd0:	280f      	cmp	r0, #15
   10cd2:	d001      	beq.n	10cd8 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10cd4:	2000      	movs	r0, #0
   10cd6:	4770      	bx	lr
   10cd8:	2001      	movs	r0, #1
   10cda:	4770      	bx	lr

00010cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10cdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10ce0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ce4:	280a      	cmp	r0, #10
   10ce6:	d001      	beq.n	10cec <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10ce8:	2000      	movs	r0, #0
   10cea:	4770      	bx	lr
   10cec:	2001      	movs	r0, #1
   10cee:	4770      	bx	lr

00010cf0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10cf0:	b500      	push	{lr}
   10cf2:	f7ff fff3 	bl	10cdc <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10cf6:	b120      	cbz	r0, 10d02 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10cf8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cfc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d00:	b108      	cbz	r0, 10d06 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10d02:	2000      	movs	r0, #0
   10d04:	bd00      	pop	{pc}
   10d06:	2001      	movs	r0, #1
   10d08:	bd00      	pop	{pc}

00010d0a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10d0a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d0e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d12:	280e      	cmp	r0, #14
   10d14:	d001      	beq.n	10d1a <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10d16:	2000      	movs	r0, #0
   10d18:	4770      	bx	lr
   10d1a:	2001      	movs	r0, #1
   10d1c:	4770      	bx	lr

00010d1e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10d1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d22:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d26:	2810      	cmp	r0, #16
   10d28:	d001      	beq.n	10d2e <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10d2a:	2000      	movs	r0, #0
   10d2c:	4770      	bx	lr
   10d2e:	2001      	movs	r0, #1
   10d30:	4770      	bx	lr

00010d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10d32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d36:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d3a:	2806      	cmp	r0, #6
   10d3c:	d003      	beq.n	10d46 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d3e:	1c40      	adds	r0, r0, #1
   10d40:	d001      	beq.n	10d46 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d42:	2000      	movs	r0, #0
   10d44:	4770      	bx	lr
   10d46:	2001      	movs	r0, #1
   10d48:	4770      	bx	lr

00010d4a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10d4a:	b500      	push	{lr}
   10d4c:	f7ff fff1 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d50:	b148      	cbz	r0, 10d66 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d52:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d56:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d5a:	2806      	cmp	r0, #6
   10d5c:	d303      	bcc.n	10d66 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d5e:	1c40      	adds	r0, r0, #1
   10d60:	d001      	beq.n	10d66 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d62:	2001      	movs	r0, #1
   10d64:	bd00      	pop	{pc}
   10d66:	2000      	movs	r0, #0
   10d68:	bd00      	pop	{pc}

00010d6a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10d6a:	b500      	push	{lr}
   10d6c:	f7ff ffe1 	bl	10d32 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d70:	b138      	cbz	r0, 10d82 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10d72:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d76:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d7a:	2806      	cmp	r0, #6
   10d7c:	d303      	bcc.n	10d86 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10d7e:	1c40      	adds	r0, r0, #1
   10d80:	d001      	beq.n	10d86 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10d82:	2000      	movs	r0, #0
   10d84:	bd00      	pop	{pc}
   10d86:	2001      	movs	r0, #1
   10d88:	bd00      	pop	{pc}

00010d8a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10d8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d8e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d92:	280d      	cmp	r0, #13
   10d94:	d001      	beq.n	10d9a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10d96:	2000      	movs	r0, #0
   10d98:	4770      	bx	lr
   10d9a:	2001      	movs	r0, #1
   10d9c:	4770      	bx	lr

00010d9e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10d9e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10da2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10da6:	2808      	cmp	r0, #8
   10da8:	d001      	beq.n	10dae <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10daa:	2000      	movs	r0, #0
   10dac:	4770      	bx	lr
   10dae:	2001      	movs	r0, #1
   10db0:	4770      	bx	lr

00010db2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10db2:	f7fb bc89 	b.w	c6c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010db6 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10db6:	f7fb bc87 	b.w	c6c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010dba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dbe:	428a      	cmp	r2, r1
   10dc0:	d803      	bhi.n	10dca <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10dc2:	2179      	movs	r1, #121	; 0x79
   10dc4:	2096      	movs	r0, #150	; 0x96
   10dc6:	f7fb fb47 	bl	c458 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10dca:	fab2 f382 	clz	r3, r2
   10dce:	b143      	cbz	r3, 10de2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10dd0:	4099      	lsls	r1, r3
   10dd2:	f1c3 0c20 	rsb	ip, r3, #32
   10dd6:	fa20 fc0c 	lsr.w	ip, r0, ip
   10dda:	4098      	lsls	r0, r3
   10ddc:	ea41 010c 	orr.w	r1, r1, ip
   10de0:	409a      	lsls	r2, r3
   10de2:	0c13      	lsrs	r3, r2, #16
   10de4:	fbb1 f5f3 	udiv	r5, r1, r3
   10de8:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10dec:	b287      	uxth	r7, r0
   10dee:	fbb1 f0f3 	udiv	r0, r1, r3
   10df2:	fb03 1615 	mls	r6, r3, r5, r1
   10df6:	b294      	uxth	r4, r2
   10df8:	fb00 f504 	mul.w	r5, r0, r4
   10dfc:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10e00:	42b5      	cmp	r5, r6
   10e02:	d905      	bls.n	10e10 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10e04:	1bad      	subs	r5, r5, r6
   10e06:	4295      	cmp	r5, r2
   10e08:	bf94      	ite	ls
   10e0a:	2501      	movls	r5, #1
   10e0c:	2502      	movhi	r5, #2
   10e0e:	1b40      	subs	r0, r0, r5
   10e10:	0409      	lsls	r1, r1, #16
   10e12:	0405      	lsls	r5, r0, #16
   10e14:	eb11 010c 	adds.w	r1, r1, ip
   10e18:	fba0 0c02 	umull	r0, ip, r0, r2
   10e1c:	1a09      	subs	r1, r1, r0
   10e1e:	fbb1 f0f3 	udiv	r0, r1, r3
   10e22:	fbb1 fcf3 	udiv	ip, r1, r3
   10e26:	fb03 131c 	mls	r3, r3, ip, r1
   10e2a:	fb00 f104 	mul.w	r1, r0, r4
   10e2e:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10e32:	4299      	cmp	r1, r3
   10e34:	d905      	bls.n	10e42 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10e36:	1ac9      	subs	r1, r1, r3
   10e38:	4291      	cmp	r1, r2
   10e3a:	bf94      	ite	ls
   10e3c:	2101      	movls	r1, #1
   10e3e:	2102      	movhi	r1, #2
   10e40:	1a40      	subs	r0, r0, r1
   10e42:	4328      	orrs	r0, r5
   10e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e48 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e4c:	461e      	mov	r6, r3
   10e4e:	4615      	mov	r5, r2
   10e50:	4604      	mov	r4, r0
   10e52:	9f06      	ldr	r7, [sp, #24]
   10e54:	f7ff ffb1 	bl	10dba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10e58:	6030      	str	r0, [r6, #0]
   10e5a:	fba0 0105 	umull	r0, r1, r0, r5
   10e5e:	1a20      	subs	r0, r4, r0
   10e60:	6038      	str	r0, [r7, #0]
   10e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e66 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10e66:	b4f0      	push	{r4, r5, r6, r7}
   10e68:	ea80 0c01 	eor.w	ip, r0, r1
   10e6c:	4603      	mov	r3, r0
   10e6e:	f01c 0f03 	tst.w	ip, #3
   10e72:	d13c      	bne.n	10eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e74:	f013 0f03 	tst.w	r3, #3
   10e78:	d00b      	beq.n	10e92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10e7a:	2a00      	cmp	r2, #0
   10e7c:	bf04      	itt	eq
   10e7e:	bcf0      	popeq	{r4, r5, r6, r7}
   10e80:	4770      	bxeq	lr
   10e82:	f811 cb01 	ldrb.w	ip, [r1], #1
   10e86:	f803 cb01 	strb.w	ip, [r3], #1
   10e8a:	1e52      	subs	r2, r2, #1
   10e8c:	f013 0f03 	tst.w	r3, #3
   10e90:	d1f3      	bne.n	10e7a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10e92:	2a03      	cmp	r2, #3
   10e94:	d94f      	bls.n	10f36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10e96:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e9a:	d24c      	bcs.n	10f36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10e9c:	f1c2 0c00 	rsb	ip, r2, #0
   10ea0:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10ea4:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10ea8:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10eac:	f1cc 0c00 	rsb	ip, ip, #0
   10eb0:	f1bc 0f00 	cmp.w	ip, #0
   10eb4:	dd1b      	ble.n	10eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10eb6:	1f0d      	subs	r5, r1, #4
   10eb8:	1f1c      	subs	r4, r3, #4
   10eba:	f01c 0f01 	tst.w	ip, #1
   10ebe:	d003      	beq.n	10ec8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10ec0:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10ec4:	f844 6f04 	str.w	r6, [r4, #4]!
   10ec8:	ea5f 066c 	movs.w	r6, ip, asr #1
   10ecc:	d007      	beq.n	10ede <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10ece:	686f      	ldr	r7, [r5, #4]
   10ed0:	6067      	str	r7, [r4, #4]
   10ed2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10ed6:	f844 7f08 	str.w	r7, [r4, #8]!
   10eda:	1e76      	subs	r6, r6, #1
   10edc:	d1f7      	bne.n	10ece <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10ede:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10ee2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10ee6:	f1cc 0c00 	rsb	ip, ip, #0
   10eea:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10eee:	2a00      	cmp	r2, #0
   10ef0:	bf04      	itt	eq
   10ef2:	bcf0      	popeq	{r4, r5, r6, r7}
   10ef4:	4770      	bxeq	lr
   10ef6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10efa:	d226      	bcs.n	10f4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10efc:	2a00      	cmp	r2, #0
   10efe:	bfdc      	itt	le
   10f00:	bcf0      	pople	{r4, r5, r6, r7}
   10f02:	4770      	bxle	lr
   10f04:	1e49      	subs	r1, r1, #1
   10f06:	1e5b      	subs	r3, r3, #1
   10f08:	f012 0f01 	tst.w	r2, #1
   10f0c:	d003      	beq.n	10f16 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10f0e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10f12:	f803 cf01 	strb.w	ip, [r3, #1]!
   10f16:	1052      	asrs	r2, r2, #1
   10f18:	bf04      	itt	eq
   10f1a:	bcf0      	popeq	{r4, r5, r6, r7}
   10f1c:	4770      	bxeq	lr
   10f1e:	f891 c001 	ldrb.w	ip, [r1, #1]
   10f22:	f883 c001 	strb.w	ip, [r3, #1]
   10f26:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10f2a:	f803 cf02 	strb.w	ip, [r3, #2]!
   10f2e:	1e52      	subs	r2, r2, #1
   10f30:	d1f5      	bne.n	10f1e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10f32:	bcf0      	pop	{r4, r5, r6, r7}
   10f34:	4770      	bx	lr
   10f36:	2a04      	cmp	r2, #4
   10f38:	d3d9      	bcc.n	10eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f3a:	f851 cb04 	ldr.w	ip, [r1], #4
   10f3e:	1f12      	subs	r2, r2, #4
   10f40:	f843 cb04 	str.w	ip, [r3], #4
   10f44:	2a04      	cmp	r2, #4
   10f46:	d2f8      	bcs.n	10f3a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10f48:	e7d1      	b.n	10eee <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f4a:	f811 cb01 	ldrb.w	ip, [r1], #1
   10f4e:	f803 cb01 	strb.w	ip, [r3], #1
   10f52:	1e52      	subs	r2, r2, #1
   10f54:	d1f9      	bne.n	10f4a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10f56:	bcf0      	pop	{r4, r5, r6, r7}
   10f58:	4770      	bx	lr

00010f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10f5a:	b470      	push	{r4, r5, r6}
   10f5c:	4603      	mov	r3, r0
   10f5e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10f62:	f010 0f03 	tst.w	r0, #3
   10f66:	d009      	beq.n	10f7c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10f68:	2a00      	cmp	r2, #0
   10f6a:	bf04      	itt	eq
   10f6c:	bc70      	popeq	{r4, r5, r6}
   10f6e:	4770      	bxeq	lr
   10f70:	f803 cb01 	strb.w	ip, [r3], #1
   10f74:	1e52      	subs	r2, r2, #1
   10f76:	f013 0f03 	tst.w	r3, #3
   10f7a:	d1f5      	bne.n	10f68 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10f7c:	b2c9      	uxtb	r1, r1
   10f7e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10f82:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10f86:	2a03      	cmp	r2, #3
   10f88:	d939      	bls.n	10ffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10f8a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f8e:	d236      	bcs.n	10ffe <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10f90:	4251      	negs	r1, r2
   10f92:	17cc      	asrs	r4, r1, #31
   10f94:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10f98:	1089      	asrs	r1, r1, #2
   10f9a:	424e      	negs	r6, r1
   10f9c:	2e00      	cmp	r6, #0
   10f9e:	dd11      	ble.n	10fc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10fa0:	1f19      	subs	r1, r3, #4
   10fa2:	f016 0f01 	tst.w	r6, #1
   10fa6:	bf18      	it	ne
   10fa8:	f841 5f04 	strne.w	r5, [r1, #4]!
   10fac:	1074      	asrs	r4, r6, #1
   10fae:	d004      	beq.n	10fba <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10fb0:	604d      	str	r5, [r1, #4]
   10fb2:	f841 5f08 	str.w	r5, [r1, #8]!
   10fb6:	1e64      	subs	r4, r4, #1
   10fb8:	d1fa      	bne.n	10fb0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10fba:	4271      	negs	r1, r6
   10fbc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10fc0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10fc4:	2a00      	cmp	r2, #0
   10fc6:	bf04      	itt	eq
   10fc8:	bc70      	popeq	{r4, r5, r6}
   10fca:	4770      	bxeq	lr
   10fcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fd0:	d21d      	bcs.n	1100e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10fd2:	2a00      	cmp	r2, #0
   10fd4:	bfdc      	itt	le
   10fd6:	bc70      	pople	{r4, r5, r6}
   10fd8:	4770      	bxle	lr
   10fda:	1e59      	subs	r1, r3, #1
   10fdc:	f012 0f01 	tst.w	r2, #1
   10fe0:	bf18      	it	ne
   10fe2:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10fe6:	1052      	asrs	r2, r2, #1
   10fe8:	bf04      	itt	eq
   10fea:	bc70      	popeq	{r4, r5, r6}
   10fec:	4770      	bxeq	lr
   10fee:	f881 c001 	strb.w	ip, [r1, #1]
   10ff2:	f801 cf02 	strb.w	ip, [r1, #2]!
   10ff6:	1e52      	subs	r2, r2, #1
   10ff8:	d1f9      	bne.n	10fee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10ffa:	bc70      	pop	{r4, r5, r6}
   10ffc:	4770      	bx	lr
   10ffe:	2a04      	cmp	r2, #4
   11000:	d3e0      	bcc.n	10fc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11002:	1f12      	subs	r2, r2, #4
   11004:	f843 5b04 	str.w	r5, [r3], #4
   11008:	2a04      	cmp	r2, #4
   1100a:	d2fa      	bcs.n	11002 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   1100c:	e7da      	b.n	10fc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1100e:	f803 cb01 	strb.w	ip, [r3], #1
   11012:	1e52      	subs	r2, r2, #1
   11014:	d1fb      	bne.n	1100e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   11016:	bc70      	pop	{r4, r5, r6}
   11018:	4770      	bx	lr
   1101a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1101e:	4770      	bx	lr
   11020:	2000      	movs	r0, #0
   11022:	4770      	bx	lr
   11024:	2000      	movs	r0, #0
   11026:	4770      	bx	lr
   11028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1102c:	4770      	bx	lr
   1102e:	4770      	bx	lr
   11030:	4770      	bx	lr
   11032:	2000      	movs	r0, #0
   11034:	4770      	bx	lr
   11036:	2100      	movs	r1, #0
   11038:	7001      	strb	r1, [r0, #0]
   1103a:	4770      	bx	lr
   1103c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11040:	4770      	bx	lr
   11042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11046:	4770      	bx	lr
   11048:	2100      	movs	r1, #0
   1104a:	7001      	strb	r1, [r0, #0]
   1104c:	4770      	bx	lr
   1104e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11052:	4770      	bx	lr
   11054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11058:	4770      	bx	lr
   1105a:	7800      	ldrb	r0, [r0, #0]
   1105c:	2800      	cmp	r0, #0
   1105e:	d001      	beq.n	11064 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   11060:	f06f 0015 	mvn.w	r0, #21
   11064:	4770      	bx	lr
   11066:	2000      	movs	r0, #0
   11068:	4770      	bx	lr
   1106a:	2200      	movs	r2, #0
   1106c:	f000 b802 	b.w	11074 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00011070 <mpsl_fem_init>:
   11070:	f7f7 bbd4 	b.w	881c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00011074 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   11074:	b570      	push	{r4, r5, r6, lr}
   11076:	4614      	mov	r4, r2
   11078:	460d      	mov	r5, r1
   1107a:	1b00      	subs	r0, r0, r4
   1107c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   11080:	4288      	cmp	r0, r1
   11082:	da01      	bge.n	11088 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   11084:	4608      	mov	r0, r1
   11086:	e002      	b.n	1108e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11088:	287f      	cmp	r0, #127	; 0x7f
   1108a:	dd00      	ble.n	1108e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1108c:	207f      	movs	r0, #127	; 0x7f
   1108e:	4619      	mov	r1, r3
   11090:	b240      	sxtb	r0, r0
   11092:	f7f7 fbf7 	bl	8884 <mpsl_tx_power_radio_supported_power_adjust>
   11096:	7028      	strb	r0, [r5, #0]
   11098:	706c      	strb	r4, [r5, #1]
   1109a:	2100      	movs	r1, #0
   1109c:	4420      	add	r0, r4
   1109e:	70a9      	strb	r1, [r5, #2]
   110a0:	b240      	sxtb	r0, r0
   110a2:	bd70      	pop	{r4, r5, r6, pc}
   110a4:	1702080c 	.word	0x1702080c
   110a8:	0201010d 	.word	0x0201010d
   110ac:	01010909 	.word	0x01010909
   110b0:	18090206 	.word	0x18090206
   110b4:	01010318 	.word	0x01010318
   110b8:	03030909 	.word	0x03030909
   110bc:	01020305 	.word	0x01020305
   110c0:	24020223 	.word	0x24020223
   110c4:	04041009 	.word	0x04041009
   110c8:	0b0b0505 	.word	0x0b0b0505
   110cc:	0b04      	.short	0x0b04
   110ce:	2b          	.byte	0x2b
   110cf:	d8          	.byte	0xd8
   110d0:	f8f4f0ec 	.word	0xf8f4f0ec
   110d4:	030200fc 	.word	0x030200fc
   110d8:	07060504 	.word	0x07060504
   110dc:	00000008 	.word	0x00000008
	...
   110f0:	01010100 	.word	0x01010100
   110f4:	02020201 	.word	0x02020201
   110f8:	03030302 	.word	0x03030302
   110fc:	04040403 	.word	0x04040403
   11100:	05050504 	.word	0x05050504
   11104:	07060605 	.word	0x07060605
   11108:	0b0a0908 	.word	0x0b0a0908
   1110c:	00000d0c 	.word	0x00000d0c
	...
   11120:	01010000 	.word	0x01010000
   11124:	02020101 	.word	0x02020101
   11128:	03030202 	.word	0x03030202
   1112c:	04040303 	.word	0x04040303
   11130:	05050404 	.word	0x05050404
   11134:	06060505 	.word	0x06060505
   11138:	00090806 	.word	0x00090806
   1113c:	00000000 	.word	0x00000000

00011140 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11144:	4d44      	ldr	r5, [pc, #272]	; (11258 <bt_init+0x118>)
{
   11146:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11148:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   1114c:	6899      	ldr	r1, [r3, #8]
   1114e:	f011 0101 	ands.w	r1, r1, #1
{
   11152:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11154:	d121      	bne.n	1119a <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   11156:	1d3a      	adds	r2, r7, #4
   11158:	f640 4003 	movw	r0, #3075	; 0xc03
   1115c:	f005 fc24 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   11160:	4604      	mov	r4, r0
   11162:	2800      	cmp	r0, #0
   11164:	d172      	bne.n	1124c <bt_init+0x10c>
		hci_reset_complete(rsp);
   11166:	6878      	ldr	r0, [r7, #4]
	uint8_t status = buf->data[0];
   11168:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   1116a:	781b      	ldrb	r3, [r3, #0]
   1116c:	b99b      	cbnz	r3, 11196 <bt_init+0x56>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1116e:	f3bf 8f5b 	dmb	ish
   11172:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   11176:	f3bf 8f5b 	dmb	ish
   1117a:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1117e:	f003 0309 	and.w	r3, r3, #9
   11182:	f3bf 8f5b 	dmb	ish
   11186:	e852 1f00 	ldrex	r1, [r2]
   1118a:	e842 3400 	strex	r4, r3, [r2]
   1118e:	2c00      	cmp	r4, #0
   11190:	d1f9      	bne.n	11186 <bt_init+0x46>
   11192:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   11196:	f00e fc45 	bl	1fa24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1119a:	1d3a      	adds	r2, r7, #4
   1119c:	2100      	movs	r1, #0
   1119e:	f241 0003 	movw	r0, #4099	; 0x1003
   111a2:	f005 fc01 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   111a6:	4604      	mov	r4, r0
   111a8:	2800      	cmp	r0, #0
   111aa:	d14f      	bne.n	1124c <bt_init+0x10c>
	read_local_features_complete(rsp);
   111ac:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   111ae:	482b      	ldr	r0, [pc, #172]	; (1125c <bt_init+0x11c>)
   111b0:	68f1      	ldr	r1, [r6, #12]
   111b2:	2208      	movs	r2, #8
   111b4:	3101      	adds	r1, #1
   111b6:	f015 fd19 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   111ba:	4630      	mov	r0, r6
   111bc:	f00e fc32 	bl	1fa24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   111c0:	4621      	mov	r1, r4
   111c2:	1d3a      	adds	r2, r7, #4
   111c4:	f241 0001 	movw	r0, #4097	; 0x1001
   111c8:	f005 fbee 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   111cc:	4604      	mov	r4, r0
   111ce:	2800      	cmp	r0, #0
   111d0:	d13c      	bne.n	1124c <bt_init+0x10c>
	read_local_ver_complete(rsp);
   111d2:	6878      	ldr	r0, [r7, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   111d4:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   111d6:	785a      	ldrb	r2, [r3, #1]
   111d8:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   111dc:	885a      	ldrh	r2, [r3, #2]
   111de:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   111e2:	791a      	ldrb	r2, [r3, #4]
   111e4:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   111e8:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   111ec:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   111f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   111f4:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   111f8:	f00e fc14 	bl	1fa24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   111fc:	4621      	mov	r1, r4
   111fe:	1d3a      	adds	r2, r7, #4
   11200:	f241 0002 	movw	r0, #4098	; 0x1002
   11204:	f005 fbd0 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   11208:	4604      	mov	r4, r0
   1120a:	b9f8      	cbnz	r0, 1124c <bt_init+0x10c>
	read_supported_commands_complete(rsp);
   1120c:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
   1120e:	4814      	ldr	r0, [pc, #80]	; (11260 <bt_init+0x120>)
   11210:	68f1      	ldr	r1, [r6, #12]
   11212:	2240      	movs	r2, #64	; 0x40
   11214:	3101      	adds	r1, #1
   11216:	f015 fce9 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   1121a:	4630      	mov	r0, r6
   1121c:	f00e fc02 	bl	1fa24 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11220:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   11224:	065a      	lsls	r2, r3, #25
   11226:	d423      	bmi.n	11270 <bt_init+0x130>
		LOG_ERR("Non-LE capable controller detected!");
   11228:	466c      	mov	r4, sp
   1122a:	b088      	sub	sp, #32
   1122c:	466a      	mov	r2, sp
   1122e:	4b0d      	ldr	r3, [pc, #52]	; (11264 <bt_init+0x124>)
   11230:	6153      	str	r3, [r2, #20]
   11232:	4b0d      	ldr	r3, [pc, #52]	; (11268 <bt_init+0x128>)
   11234:	6193      	str	r3, [r2, #24]
   11236:	2303      	movs	r3, #3
   11238:	f842 3f10 	str.w	r3, [r2, #16]!
   1123c:	480b      	ldr	r0, [pc, #44]	; (1126c <bt_init+0x12c>)
   1123e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11242:	f015 fe1b 	bl	26e7c <z_log_msg_static_create.constprop.0>
   11246:	46a5      	mov	sp, r4
		return -ENODEV;
   11248:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1124c:	4620      	mov	r0, r4
   1124e:	370c      	adds	r7, #12
   11250:	46bd      	mov	sp, r7
   11252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11256:	bf00      	nop
   11258:	20000390 	.word	0x20000390
   1125c:	20000408 	.word	0x20000408
   11260:	20000410 	.word	0x20000410
   11264:	0002cbb2 	.word	0x0002cbb2
   11268:	0002d0e1 	.word	0x0002d0e1
   1126c:	0002a850 	.word	0x0002a850
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11270:	4621      	mov	r1, r4
   11272:	1d3a      	adds	r2, r7, #4
   11274:	f242 0003 	movw	r0, #8195	; 0x2003
   11278:	f005 fb96 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   1127c:	4604      	mov	r4, r0
   1127e:	2800      	cmp	r0, #0
   11280:	d1e4      	bne.n	1124c <bt_init+0x10c>
	read_le_features_complete(rsp);
   11282:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11284:	48ba      	ldr	r0, [pc, #744]	; (11570 <bt_init+0x430>)
   11286:	68f1      	ldr	r1, [r6, #12]
   11288:	2208      	movs	r2, #8
   1128a:	3101      	adds	r1, #1
   1128c:	f015 fcae 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   11290:	4630      	mov	r0, r6
   11292:	f00e fbc7 	bl	1fa24 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   11296:	4621      	mov	r1, r4
   11298:	1d3a      	adds	r2, r7, #4
   1129a:	f242 0002 	movw	r0, #8194	; 0x2002
   1129e:	f005 fb83 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   112a2:	4604      	mov	r4, r0
   112a4:	2800      	cmp	r0, #0
   112a6:	d1d1      	bne.n	1124c <bt_init+0x10c>
		le_read_buffer_size_complete(rsp);
   112a8:	687c      	ldr	r4, [r7, #4]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   112aa:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   112ac:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   112b0:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   112b2:	b141      	cbz	r1, 112c6 <bt_init+0x186>
   112b4:	78d9      	ldrb	r1, [r3, #3]
   112b6:	b131      	cbz	r1, 112c6 <bt_init+0x186>
	bt_dev.le.acl_mtu = acl_mtu;
   112b8:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   112bc:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   112be:	48ad      	ldr	r0, [pc, #692]	; (11574 <bt_init+0x434>)
   112c0:	4611      	mov	r1, r2
   112c2:	f018 fcb6 	bl	29c32 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   112c6:	4620      	mov	r0, r4
   112c8:	f00e fbac 	bl	1fa24 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   112cc:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   112d0:	f016 0620 	ands.w	r6, r6, #32
   112d4:	d118      	bne.n	11308 <bt_init+0x1c8>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   112d6:	2102      	movs	r1, #2
   112d8:	f640 406d 	movw	r0, #3181	; 0xc6d
   112dc:	f005 fb2a 	bl	16934 <bt_hci_cmd_create>
		if (!buf) {
   112e0:	4604      	mov	r4, r0
   112e2:	2800      	cmp	r0, #0
   112e4:	f000 80e4 	beq.w	114b0 <bt_init+0x370>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   112e8:	2102      	movs	r1, #2
   112ea:	300c      	adds	r0, #12
   112ec:	f017 feec 	bl	290c8 <net_buf_simple_add>
		cp_le->le = 0x01;
   112f0:	2301      	movs	r3, #1
   112f2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   112f4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   112f6:	4621      	mov	r1, r4
   112f8:	4632      	mov	r2, r6
   112fa:	f640 406d 	movw	r0, #3181	; 0xc6d
   112fe:	f005 fb53 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   11302:	4604      	mov	r4, r0
   11304:	2800      	cmp	r0, #0
   11306:	d1a1      	bne.n	1124c <bt_init+0x10c>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   11308:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   1130c:	071b      	lsls	r3, r3, #28
   1130e:	d512      	bpl.n	11336 <bt_init+0x1f6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   11310:	1d3a      	adds	r2, r7, #4
   11312:	2100      	movs	r1, #0
   11314:	f242 001c 	movw	r0, #8220	; 0x201c
   11318:	f005 fb46 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   1131c:	4604      	mov	r4, r0
   1131e:	2800      	cmp	r0, #0
   11320:	d194      	bne.n	1124c <bt_init+0x10c>
		le_read_supp_states_complete(rsp);
   11322:	6878      	ldr	r0, [r7, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   11324:	68c3      	ldr	r3, [r0, #12]
   11326:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1132a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1132e:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   11332:	f00e fb77 	bl	1fa24 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   11336:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1133a:	069e      	lsls	r6, r3, #26
   1133c:	d522      	bpl.n	11384 <bt_init+0x244>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1133e:	1cb9      	adds	r1, r7, #2
   11340:	4638      	mov	r0, r7
   11342:	f005 fbb5 	bl	16ab0 <hci_le_read_max_data_len>
		if (err) {
   11346:	4604      	mov	r4, r0
   11348:	2800      	cmp	r0, #0
   1134a:	f47f af7f 	bne.w	1124c <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1134e:	2104      	movs	r1, #4
   11350:	f242 0024 	movw	r0, #8228	; 0x2024
   11354:	f005 faee 	bl	16934 <bt_hci_cmd_create>
		if (!buf) {
   11358:	4606      	mov	r6, r0
   1135a:	2800      	cmp	r0, #0
   1135c:	f000 80a8 	beq.w	114b0 <bt_init+0x370>
   11360:	2104      	movs	r1, #4
   11362:	300c      	adds	r0, #12
   11364:	f017 feb0 	bl	290c8 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11368:	883b      	ldrh	r3, [r7, #0]
   1136a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1136c:	887b      	ldrh	r3, [r7, #2]
   1136e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11370:	4622      	mov	r2, r4
   11372:	4631      	mov	r1, r6
   11374:	f242 0024 	movw	r0, #8228	; 0x2024
   11378:	f005 fb16 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   1137c:	4604      	mov	r4, r0
   1137e:	2800      	cmp	r0, #0
   11380:	f47f af64 	bne.w	1124c <bt_init+0x10c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11384:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   11388:	065c      	lsls	r4, r3, #25
   1138a:	d52a      	bpl.n	113e2 <bt_init+0x2a2>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   1138c:	2102      	movs	r1, #2
   1138e:	f242 002e 	movw	r0, #8238	; 0x202e
   11392:	f005 facf 	bl	16934 <bt_hci_cmd_create>
		if (!buf) {
   11396:	4604      	mov	r4, r0
   11398:	2800      	cmp	r0, #0
   1139a:	f000 8089 	beq.w	114b0 <bt_init+0x370>
   1139e:	2102      	movs	r1, #2
   113a0:	300c      	adds	r0, #12
   113a2:	f017 fe91 	bl	290c8 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   113a6:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   113aa:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   113ac:	4621      	mov	r1, r4
   113ae:	2200      	movs	r2, #0
   113b0:	f242 002e 	movw	r0, #8238	; 0x202e
   113b4:	f005 faf8 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   113b8:	4604      	mov	r4, r0
   113ba:	2800      	cmp	r0, #0
   113bc:	f47f af46 	bne.w	1124c <bt_init+0x10c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   113c0:	4601      	mov	r1, r0
   113c2:	1d3a      	adds	r2, r7, #4
   113c4:	f242 002a 	movw	r0, #8234	; 0x202a
   113c8:	f005 faee 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   113cc:	4604      	mov	r4, r0
   113ce:	2800      	cmp	r0, #0
   113d0:	f47f af3c 	bne.w	1124c <bt_init+0x10c>
		le_read_resolving_list_size_complete(rsp);
   113d4:	6878      	ldr	r0, [r7, #4]
	bt_dev.le.rl_size = rp->rl_size;
   113d6:	68c3      	ldr	r3, [r0, #12]
   113d8:	785b      	ldrb	r3, [r3, #1]
   113da:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		net_buf_unref(rsp);
   113de:	f00e fb21 	bl	1fa24 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   113e2:	2108      	movs	r1, #8
   113e4:	f242 0001 	movw	r0, #8193	; 0x2001
   113e8:	f005 faa4 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   113ec:	4604      	mov	r4, r0
   113ee:	2800      	cmp	r0, #0
   113f0:	d05e      	beq.n	114b0 <bt_init+0x370>
   113f2:	2108      	movs	r1, #8
   113f4:	300c      	adds	r0, #12
   113f6:	f017 fe67 	bl	290c8 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   113fa:	f895 10d8 	ldrb.w	r1, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   113fe:	f011 0f40 	tst.w	r1, #64	; 0x40
   11402:	4602      	mov	r2, r0
   11404:	f240 2302 	movw	r3, #514	; 0x202
   11408:	bf08      	it	eq
   1140a:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1140c:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1140e:	bf4c      	ite	mi
   11410:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   11414:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   11418:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1141a:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1141e:	bf48      	it	mi
   11420:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   11424:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11428:	f895 30a2 	ldrb.w	r3, [r5, #162]	; 0xa2
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1142c:	bf18      	it	ne
   1142e:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11432:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11436:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   11438:	bf48      	it	mi
   1143a:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1143e:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11440:	bf08      	it	eq
   11442:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   11446:	2100      	movs	r1, #0
   11448:	f015 fd27 	bl	26e9a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1144c:	4621      	mov	r1, r4
   1144e:	2200      	movs	r2, #0
   11450:	f242 0001 	movw	r0, #8193	; 0x2001
   11454:	f005 faa8 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   11458:	4604      	mov	r4, r0
   1145a:	2800      	cmp	r0, #0
   1145c:	f47f aef6 	bne.w	1124c <bt_init+0x10c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11460:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   11464:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11468:	0698      	lsls	r0, r3, #26
   1146a:	d424      	bmi.n	114b6 <bt_init+0x376>
	if (bt_dev.le.acl_mtu) {
   1146c:	b9c9      	cbnz	r1, 114a2 <bt_init+0x362>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1146e:	1d3a      	adds	r2, r7, #4
   11470:	f241 0005 	movw	r0, #4101	; 0x1005
   11474:	f005 fa98 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   11478:	4604      	mov	r4, r0
   1147a:	2800      	cmp	r0, #0
   1147c:	f47f aee6 	bne.w	1124c <bt_init+0x10c>
	if (bt_dev.le.acl_mtu) {
   11480:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   11484:	687c      	ldr	r4, [r7, #4]
	if (bt_dev.le.acl_mtu) {
   11486:	b94b      	cbnz	r3, 1149c <bt_init+0x35c>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   11488:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1148a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1148e:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11492:	889a      	ldrh	r2, [r3, #4]
   11494:	4837      	ldr	r0, [pc, #220]	; (11574 <bt_init+0x434>)
   11496:	4611      	mov	r1, r2
   11498:	f018 fbcb 	bl	29c32 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1149c:	4620      	mov	r0, r4
   1149e:	f00e fac1 	bl	1fa24 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   114a2:	2108      	movs	r1, #8
   114a4:	f640 4001 	movw	r0, #3073	; 0xc01
   114a8:	f005 fa44 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   114ac:	4604      	mov	r4, r0
   114ae:	b9b8      	cbnz	r0, 114e0 <bt_init+0x3a0>
		return -ENOBUFS;
   114b0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   114b4:	e6ca      	b.n	1124c <bt_init+0x10c>
	else if (!bt_dev.le.acl_mtu) {
   114b6:	2900      	cmp	r1, #0
   114b8:	d1f3      	bne.n	114a2 <bt_init+0x362>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   114ba:	466c      	mov	r4, sp
   114bc:	b088      	sub	sp, #32
   114be:	466a      	mov	r2, sp
   114c0:	4b2d      	ldr	r3, [pc, #180]	; (11578 <bt_init+0x438>)
   114c2:	6153      	str	r3, [r2, #20]
   114c4:	4b2d      	ldr	r3, [pc, #180]	; (1157c <bt_init+0x43c>)
   114c6:	6193      	str	r3, [r2, #24]
   114c8:	2303      	movs	r3, #3
   114ca:	f842 3f10 	str.w	r3, [r2, #16]!
   114ce:	482c      	ldr	r0, [pc, #176]	; (11580 <bt_init+0x440>)
   114d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   114d4:	f015 fcd2 	bl	26e7c <z_log_msg_static_create.constprop.0>
   114d8:	46a5      	mov	sp, r4
		return -EIO;
   114da:	f06f 0404 	mvn.w	r4, #4
   114de:	e6b5      	b.n	1124c <bt_init+0x10c>
   114e0:	2108      	movs	r1, #8
   114e2:	300c      	adds	r0, #12
   114e4:	f017 fdf0 	bl	290c8 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   114e8:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   114ec:	07d9      	lsls	r1, r3, #31
   114ee:	4602      	mov	r2, r0
   114f0:	d436      	bmi.n	11560 <bt_init+0x420>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   114f2:	4824      	ldr	r0, [pc, #144]	; (11584 <bt_init+0x444>)
   114f4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   114f8:	f015 fccf 	bl	26e9a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   114fc:	4621      	mov	r1, r4
   114fe:	2200      	movs	r2, #0
   11500:	f640 4001 	movw	r0, #3073	; 0xc01
   11504:	f005 fa50 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   11508:	4604      	mov	r4, r0
   1150a:	2800      	cmp	r0, #0
   1150c:	f47f ae9e 	bne.w	1124c <bt_init+0x10c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   11510:	4601      	mov	r1, r0
   11512:	1d3a      	adds	r2, r7, #4
   11514:	f64f 4001 	movw	r0, #64513	; 0xfc01
   11518:	f005 fa46 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   1151c:	4c1a      	ldr	r4, [pc, #104]	; (11588 <bt_init+0x448>)
   1151e:	2800      	cmp	r0, #0
   11520:	d036      	beq.n	11590 <bt_init+0x450>
		LOG_WRN("Vendor HCI extensions not available");
   11522:	466d      	mov	r5, sp
   11524:	b088      	sub	sp, #32
   11526:	466a      	mov	r2, sp
   11528:	4b18      	ldr	r3, [pc, #96]	; (1158c <bt_init+0x44c>)
   1152a:	4815      	ldr	r0, [pc, #84]	; (11580 <bt_init+0x440>)
   1152c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11530:	2303      	movs	r3, #3
   11532:	f842 3f10 	str.w	r3, [r2, #16]!
   11536:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1153a:	f015 fc9f 	bl	26e7c <z_log_msg_static_create.constprop.0>
   1153e:	46ad      	mov	sp, r5
	err = bt_id_init();
   11540:	f007 f808 	bl	18554 <bt_id_init>
	if (err) {
   11544:	4604      	mov	r4, r0
   11546:	2800      	cmp	r0, #0
   11548:	f47f ae80 	bne.w	1124c <bt_init+0x10c>
		err = bt_conn_init();
   1154c:	f008 fc38 	bl	19dc0 <bt_conn_init>
		if (err) {
   11550:	4604      	mov	r4, r0
   11552:	2800      	cmp	r0, #0
   11554:	f47f ae7a 	bne.w	1124c <bt_init+0x10c>
   11558:	f006 f930 	bl	177bc <bt_init.part.0>
   1155c:	4604      	mov	r4, r0
   1155e:	e675      	b.n	1124c <bt_init+0x10c>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   11560:	a101      	add	r1, pc, #4	; (adr r1, 11568 <bt_init+0x428>)
   11562:	e9d1 0100 	ldrd	r0, r1, [r1]
   11566:	e7c7      	b.n	114f8 <bt_init+0x3b8>
   11568:	02008890 	.word	0x02008890
   1156c:	20008000 	.word	0x20008000
   11570:	20000468 	.word	0x20000468
   11574:	20000498 	.word	0x20000498
   11578:	0002cbda 	.word	0x0002cbda
   1157c:	0002d0e9 	.word	0x0002d0e9
   11580:	0002a850 	.word	0x0002a850
   11584:	02008810 	.word	0x02008810
   11588:	0002d0bc 	.word	0x0002d0bc
   1158c:	0002cc01 	.word	0x0002cc01
	rp.info = (void *)rsp->data;
   11590:	687b      	ldr	r3, [r7, #4]
   11592:	68de      	ldr	r6, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   11594:	f8b6 3001 	ldrh.w	r3, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11598:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1159a:	bf96      	itet	ls
   1159c:	4a4f      	ldrls	r2, [pc, #316]	; (116dc <bt_init+0x59c>)
	return "unknown";
   1159e:	4950      	ldrhi	r1, [pc, #320]	; (116e0 <bt_init+0x5a0>)
		return plat_str[platform];
   115a0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   115a4:	46e8      	mov	r8, sp
   115a6:	b08a      	sub	sp, #40	; 0x28
   115a8:	466a      	mov	r2, sp
   115aa:	484e      	ldr	r0, [pc, #312]	; (116e4 <bt_init+0x5a4>)
   115ac:	e9c2 1307 	strd	r1, r3, [r2, #28]
   115b0:	f240 3301 	movw	r3, #769	; 0x301
   115b4:	8493      	strh	r3, [r2, #36]	; 0x24
   115b6:	4b4c      	ldr	r3, [pc, #304]	; (116e8 <bt_init+0x5a8>)
   115b8:	e9c2 0405 	strd	r0, r4, [r2, #20]
   115bc:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   115c0:	f842 3f10 	str.w	r3, [r2, #16]!
   115c4:	4849      	ldr	r0, [pc, #292]	; (116ec <bt_init+0x5ac>)
   115c6:	f015 fc59 	bl	26e7c <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   115ca:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   115ce:	f8b6 3003 	ldrh.w	r3, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   115d2:	2a02      	cmp	r2, #2
   115d4:	46c5      	mov	sp, r8
   115d6:	d157      	bne.n	11688 <bt_init+0x548>
	if (variant < ARRAY_SIZE(nordic_str)) {
   115d8:	2b03      	cmp	r3, #3
   115da:	d855      	bhi.n	11688 <bt_init+0x548>
		return nordic_str[variant];
   115dc:	4a44      	ldr	r2, [pc, #272]	; (116f0 <bt_init+0x5b0>)
   115de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   115e2:	46e8      	mov	r8, sp
   115e4:	b08a      	sub	sp, #40	; 0x28
   115e6:	466a      	mov	r2, sp
   115e8:	4842      	ldr	r0, [pc, #264]	; (116f4 <bt_init+0x5b4>)
   115ea:	e9c2 1307 	strd	r1, r3, [r2, #28]
   115ee:	f240 3301 	movw	r3, #769	; 0x301
   115f2:	8493      	strh	r3, [r2, #36]	; 0x24
   115f4:	4b3c      	ldr	r3, [pc, #240]	; (116e8 <bt_init+0x5a8>)
   115f6:	e9c2 0405 	strd	r0, r4, [r2, #20]
   115fa:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   115fe:	f842 3f10 	str.w	r3, [r2, #16]!
   11602:	483a      	ldr	r0, [pc, #232]	; (116ec <bt_init+0x5ac>)
   11604:	f015 fc3a 	bl	26e7c <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11608:	7973      	ldrb	r3, [r6, #5]
   1160a:	f896 e006 	ldrb.w	lr, [r6, #6]
   1160e:	f8b6 c007 	ldrh.w	ip, [r6, #7]
   11612:	f8d6 0009 	ldr.w	r0, [r6, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   11616:	2b03      	cmp	r3, #3
   11618:	46c5      	mov	sp, r8
		return var_str[variant];
   1161a:	bf96      	itet	ls
   1161c:	4a36      	ldrls	r2, [pc, #216]	; (116f8 <bt_init+0x5b8>)
	return "unknown";
   1161e:	4930      	ldrhi	r1, [pc, #192]	; (116e0 <bt_init+0x5a0>)
		return var_str[variant];
   11620:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11624:	466e      	mov	r6, sp
   11626:	b08e      	sub	sp, #56	; 0x38
   11628:	466a      	mov	r2, sp
   1162a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 116fc <bt_init+0x5bc>
   1162e:	62d0      	str	r0, [r2, #44]	; 0x2c
   11630:	e9c2 1307 	strd	r1, r3, [r2, #28]
   11634:	f240 3301 	movw	r3, #769	; 0x301
   11638:	8613      	strh	r3, [r2, #48]	; 0x30
   1163a:	4b31      	ldr	r3, [pc, #196]	; (11700 <bt_init+0x5c0>)
   1163c:	482b      	ldr	r0, [pc, #172]	; (116ec <bt_init+0x5ac>)
   1163e:	e9c2 8405 	strd	r8, r4, [r2, #20]
   11642:	e9c2 ec09 	strd	lr, ip, [r2, #36]	; 0x24
   11646:	f244 41c0 	movw	r1, #17600	; 0x44c0
   1164a:	f842 3f10 	str.w	r3, [r2, #16]!
   1164e:	f015 fc15 	bl	26e7c <z_log_msg_static_create.constprop.0>
   11652:	46b5      	mov	sp, r6
	net_buf_unref(rsp);
   11654:	6878      	ldr	r0, [r7, #4]
   11656:	f00e f9e5 	bl	1fa24 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1165a:	1d3a      	adds	r2, r7, #4
   1165c:	2100      	movs	r1, #0
   1165e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11662:	f005 f9a1 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   11666:	4680      	mov	r8, r0
   11668:	b180      	cbz	r0, 1168c <bt_init+0x54c>
		LOG_WRN("Failed to read supported vendor commands");
   1166a:	b088      	sub	sp, #32
   1166c:	466a      	mov	r2, sp
   1166e:	4b25      	ldr	r3, [pc, #148]	; (11704 <bt_init+0x5c4>)
			LOG_WRN("Failed to read supported vendor features");
   11670:	481e      	ldr	r0, [pc, #120]	; (116ec <bt_init+0x5ac>)
   11672:	e9c2 3405 	strd	r3, r4, [r2, #20]
   11676:	2303      	movs	r3, #3
   11678:	f842 3f10 	str.w	r3, [r2, #16]!
   1167c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   11680:	f015 fbfc 	bl	26e7c <z_log_msg_static_create.constprop.0>
   11684:	46b5      	mov	sp, r6
			return;
   11686:	e75b      	b.n	11540 <bt_init+0x400>
		return "unknown";
   11688:	4915      	ldr	r1, [pc, #84]	; (116e0 <bt_init+0x5a0>)
   1168a:	e7aa      	b.n	115e2 <bt_init+0x4a2>
	rp.cmds = (void *)rsp->data;
   1168c:	f8d7 9004 	ldr.w	r9, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   11690:	481d      	ldr	r0, [pc, #116]	; (11708 <bt_init+0x5c8>)
   11692:	f8d9 100c 	ldr.w	r1, [r9, #12]
   11696:	2202      	movs	r2, #2
   11698:	3101      	adds	r1, #1
   1169a:	f015 faa7 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   1169e:	4648      	mov	r0, r9
   116a0:	f00e f9c0 	bl	1fa24 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   116a4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   116a8:	075b      	lsls	r3, r3, #29
   116aa:	f57f af49 	bpl.w	11540 <bt_init+0x400>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   116ae:	1d3a      	adds	r2, r7, #4
   116b0:	4641      	mov	r1, r8
   116b2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   116b6:	f005 f977 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   116ba:	b118      	cbz	r0, 116c4 <bt_init+0x584>
			LOG_WRN("Failed to read supported vendor features");
   116bc:	b088      	sub	sp, #32
   116be:	466a      	mov	r2, sp
   116c0:	4b12      	ldr	r3, [pc, #72]	; (1170c <bt_init+0x5cc>)
   116c2:	e7d5      	b.n	11670 <bt_init+0x530>
		rp.feat = (void *)rsp->data;
   116c4:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   116c6:	4812      	ldr	r0, [pc, #72]	; (11710 <bt_init+0x5d0>)
   116c8:	68e1      	ldr	r1, [r4, #12]
   116ca:	2201      	movs	r2, #1
   116cc:	4411      	add	r1, r2
   116ce:	f015 fa8d 	bl	26bec <memcpy>
		net_buf_unref(rsp);
   116d2:	4620      	mov	r0, r4
   116d4:	f00e f9a6 	bl	1fa24 <net_buf_unref>
   116d8:	e732      	b.n	11540 <bt_init+0x400>
   116da:	bf00      	nop
   116dc:	0002af80 	.word	0x0002af80
   116e0:	0002c5bf 	.word	0x0002c5bf
   116e4:	0002cc29 	.word	0x0002cc29
   116e8:	01000005 	.word	0x01000005
   116ec:	0002a850 	.word	0x0002a850
   116f0:	0002af70 	.word	0x0002af70
   116f4:	0002cc46 	.word	0x0002cc46
   116f8:	0002af60 	.word	0x0002af60
   116fc:	0002cc62 	.word	0x0002cc62
   11700:	01000008 	.word	0x01000008
   11704:	0002cc93 	.word	0x0002cc93
   11708:	20000451 	.word	0x20000451
   1170c:	0002ccc0 	.word	0x0002ccc0
   11710:	20000450 	.word	0x20000450

00011714 <vnd_ccc_cfg_changed>:
static uint8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
   11714:	1e8b      	subs	r3, r1, #2
   11716:	4259      	negs	r1, r3
   11718:	4159      	adcs	r1, r3
   1171a:	4b01      	ldr	r3, [pc, #4]	; (11720 <vnd_ccc_cfg_changed+0xc>)
   1171c:	7019      	strb	r1, [r3, #0]
}
   1171e:	4770      	bx	lr
   11720:	200033b1 	.word	0x200033b1

00011724 <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
   11724:	4801      	ldr	r0, [pc, #4]	; (1172c <mtu_updated+0x8>)
   11726:	f013 bd85 	b.w	25234 <printk>
   1172a:	bf00      	nop
   1172c:	0002b57c 	.word	0x0002b57c

00011730 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
   11730:	4801      	ldr	r0, [pc, #4]	; (11738 <disconnected+0x8>)
   11732:	f013 bd7f 	b.w	25234 <printk>
   11736:	bf00      	nop
   11738:	0002b59e 	.word	0x0002b59e

0001173c <alert_high_start>:
	printk("Mild alert started\n");
}

static void alert_high_start(void)
{
	printk("High alert started\n");
   1173c:	4801      	ldr	r0, [pc, #4]	; (11744 <alert_high_start+0x8>)
   1173e:	f013 bd79 	b.w	25234 <printk>
   11742:	bf00      	nop
   11744:	0002b5bc 	.word	0x0002b5bc

00011748 <alert_start>:
	printk("Mild alert started\n");
   11748:	4801      	ldr	r0, [pc, #4]	; (11750 <alert_start+0x8>)
   1174a:	f013 bd73 	b.w	25234 <printk>
   1174e:	bf00      	nop
   11750:	0002b5d0 	.word	0x0002b5d0

00011754 <alert_stop>:
	printk("Alert stopped\n");
   11754:	4801      	ldr	r0, [pc, #4]	; (1175c <alert_stop+0x8>)
   11756:	f013 bd6d 	b.w	25234 <printk>
   1175a:	bf00      	nop
   1175c:	0002b5e4 	.word	0x0002b5e4

00011760 <indicate_destroy>:
{
   11760:	b508      	push	{r3, lr}
	printk("Indication complete\n");
   11762:	4803      	ldr	r0, [pc, #12]	; (11770 <indicate_destroy+0x10>)
   11764:	f013 fd66 	bl	25234 <printk>
	indicating = 0U;
   11768:	4b02      	ldr	r3, [pc, #8]	; (11774 <indicate_destroy+0x14>)
   1176a:	2200      	movs	r2, #0
   1176c:	701a      	strb	r2, [r3, #0]
}
   1176e:	bd08      	pop	{r3, pc}
   11770:	0002b5f3 	.word	0x0002b5f3
   11774:	200033b0 	.word	0x200033b0

00011778 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
   11778:	4903      	ldr	r1, [pc, #12]	; (11788 <indicate_cb+0x10>)
   1177a:	4b04      	ldr	r3, [pc, #16]	; (1178c <indicate_cb+0x14>)
   1177c:	4804      	ldr	r0, [pc, #16]	; (11790 <indicate_cb+0x18>)
   1177e:	2a00      	cmp	r2, #0
   11780:	bf18      	it	ne
   11782:	4619      	movne	r1, r3
   11784:	f013 bd56 	b.w	25234 <printk>
   11788:	0002b60d 	.word	0x0002b60d
   1178c:	0002b608 	.word	0x0002b608
   11790:	0002b615 	.word	0x0002b615

00011794 <connected>:
	if (err) {
   11794:	b111      	cbz	r1, 1179c <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
   11796:	4803      	ldr	r0, [pc, #12]	; (117a4 <connected+0x10>)
   11798:	f013 bd4c 	b.w	25234 <printk>
		printk("Connected\n");
   1179c:	4802      	ldr	r0, [pc, #8]	; (117a8 <connected+0x14>)
   1179e:	f013 bd49 	b.w	25234 <printk>
   117a2:	bf00      	nop
   117a4:	0002b624 	.word	0x0002b624
   117a8:	0002b644 	.word	0x0002b644

000117ac <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   117ac:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   117ae:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   117b0:	b08a      	sub	sp, #40	; 0x28
   117b2:	4604      	mov	r4, r0
   117b4:	460e      	mov	r6, r1
   117b6:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   117b8:	2b03      	cmp	r3, #3
   117ba:	d820      	bhi.n	117fe <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   117bc:	e8df f003 	tbb	[pc, r3]
   117c0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   117c4:	4911      	ldr	r1, [pc, #68]	; (1180c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   117c6:	4628      	mov	r0, r5
   117c8:	f015 f9b2 	bl	26b30 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   117cc:	9505      	str	r5, [sp, #20]
   117ce:	7863      	ldrb	r3, [r4, #1]
   117d0:	9304      	str	r3, [sp, #16]
   117d2:	78a3      	ldrb	r3, [r4, #2]
   117d4:	9303      	str	r3, [sp, #12]
   117d6:	78e3      	ldrb	r3, [r4, #3]
   117d8:	9302      	str	r3, [sp, #8]
   117da:	7923      	ldrb	r3, [r4, #4]
   117dc:	9301      	str	r3, [sp, #4]
   117de:	7963      	ldrb	r3, [r4, #5]
   117e0:	9300      	str	r3, [sp, #0]
   117e2:	79a3      	ldrb	r3, [r4, #6]
   117e4:	4a0a      	ldr	r2, [pc, #40]	; (11810 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   117e6:	211e      	movs	r1, #30
   117e8:	4630      	mov	r0, r6
   117ea:	f013 fd30 	bl	2524e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   117ee:	b00a      	add	sp, #40	; 0x28
   117f0:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   117f2:	4908      	ldr	r1, [pc, #32]	; (11814 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   117f4:	e7e7      	b.n	117c6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   117f6:	4908      	ldr	r1, [pc, #32]	; (11818 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   117f8:	e7e5      	b.n	117c6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   117fa:	4908      	ldr	r1, [pc, #32]	; (1181c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   117fc:	e7e3      	b.n	117c6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   117fe:	4a08      	ldr	r2, [pc, #32]	; (11820 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11800:	210a      	movs	r1, #10
   11802:	4628      	mov	r0, r5
   11804:	f013 fd23 	bl	2524e <snprintk>
		break;
   11808:	e7e0      	b.n	117cc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   1180a:	bf00      	nop
   1180c:	0002b64f 	.word	0x0002b64f
   11810:	0002b671 	.word	0x0002b671
   11814:	0002b656 	.word	0x0002b656
   11818:	0002b65d 	.word	0x0002b65d
   1181c:	0002b667 	.word	0x0002b667
   11820:	0002e6db 	.word	0x0002e6db

00011824 <auth_cancel>:

	printk("Passkey for %s: %06u\n", addr, passkey);
}

static void auth_cancel(struct bt_conn *conn)
{
   11824:	b500      	push	{lr}
   11826:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	/* Gets the address of the remote device in the connection as a string */
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11828:	f015 ff24 	bl	27674 <bt_conn_get_dst>
   1182c:	4669      	mov	r1, sp
   1182e:	f7ff ffbd 	bl	117ac <bt_addr_le_to_str.constprop.0.isra.0>

	printk("Pairing cancelled: %s\n", addr);
   11832:	4803      	ldr	r0, [pc, #12]	; (11840 <auth_cancel+0x1c>)
   11834:	4669      	mov	r1, sp
   11836:	f013 fcfd 	bl	25234 <printk>
}
   1183a:	b009      	add	sp, #36	; 0x24
   1183c:	f85d fb04 	ldr.w	pc, [sp], #4
   11840:	0002b694 	.word	0x0002b694

00011844 <auth_passkey_display>:
{
   11844:	b510      	push	{r4, lr}
   11846:	b088      	sub	sp, #32
   11848:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   1184a:	f015 ff13 	bl	27674 <bt_conn_get_dst>
   1184e:	4669      	mov	r1, sp
   11850:	f7ff ffac 	bl	117ac <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
   11854:	4803      	ldr	r0, [pc, #12]	; (11864 <auth_passkey_display+0x20>)
   11856:	4622      	mov	r2, r4
   11858:	4669      	mov	r1, sp
   1185a:	f013 fceb 	bl	25234 <printk>
}
   1185e:	b008      	add	sp, #32
   11860:	bd10      	pop	{r4, pc}
   11862:	bf00      	nop
   11864:	0002b6ab 	.word	0x0002b6ab

00011868 <main>:

	bt_hrs_notify(heartrate);
}

int main(void)
{
   11868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1186c:	b09d      	sub	sp, #116	; 0x74
	char str[BT_UUID_STR_LEN];
	int err;

	uint32_t count = 0;
	uint16_t buf;
	struct adc_sequence sequence = {
   1186e:	2214      	movs	r2, #20
   11870:	2100      	movs	r1, #0
   11872:	a807      	add	r0, sp, #28
   11874:	f015 f9c5 	bl	26c02 <memset>
   11878:	f10d 030a 	add.w	r3, sp, #10
   1187c:	9309      	str	r3, [sp, #36]	; 0x24
   1187e:	4c8a      	ldr	r4, [pc, #552]	; (11aa8 <main+0x240>)
   11880:	2302      	movs	r3, #2
   11882:	930a      	str	r3, [sp, #40]	; 0x28
		/* buffer size in bytes, not number of samples */
		.buffer_size = sizeof(buf),
	};

	/* Configure channels individually prior to sampling. */
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   11884:	2500      	movs	r5, #0
		if (!device_is_ready(adc_channels[i].dev)) {
   11886:	f854 6c06 	ldr.w	r6, [r4, #-6]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1188a:	4630      	mov	r0, r6
   1188c:	f018 f857 	bl	2993e <z_device_is_ready>
   11890:	b920      	cbnz	r0, 1189c <main+0x34>
			printk("ADC controller device %s not ready\n", adc_channels[i].dev->name);
   11892:	6831      	ldr	r1, [r6, #0]
   11894:	4885      	ldr	r0, [pc, #532]	; (11aac <main+0x244>)
	int val4 = 1121;

	/* Initializes the buetooth stack */
	err = bt_enable(NULL);
	if (err) {
		printk("Bluetooth init failed (err %d)\n", err);
   11896:	f013 fccd 	bl	25234 <printk>
		return 0;
   1189a:	e00e      	b.n	118ba <main+0x52>
 * Devicetree is not valid.
 * @see adc_channel_setup()
 */
static inline int adc_channel_setup_dt(const struct adc_dt_spec *spec)
{
	if (!spec->channel_cfg_dt_node_exists) {
   1189c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   118a0:	b17b      	cbz	r3, 118c2 <main+0x5a>
		return -ENOTSUP;
	}

	return adc_channel_setup(spec->dev, &spec->channel_cfg);
   118a2:	f854 0c06 	ldr.w	r0, [r4, #-6]
	return api->channel_setup(dev, channel_cfg);
   118a6:	6883      	ldr	r3, [r0, #8]
   118a8:	4621      	mov	r1, r4
   118aa:	681b      	ldr	r3, [r3, #0]
   118ac:	4798      	blx	r3
		if (err < 0) {
   118ae:	1e02      	subs	r2, r0, #0
   118b0:	da0a      	bge.n	118c8 <main+0x60>
			printk("Could not setup channel #%d (%d)\n", i, err);
   118b2:	487f      	ldr	r0, [pc, #508]	; (11ab0 <main+0x248>)
   118b4:	4629      	mov	r1, r5
   118b6:	f013 fcbd 	bl	25234 <printk>
				indicating = 1U;
			}
		}
	}
	return 0;
}
   118ba:	2000      	movs	r0, #0
   118bc:	b01d      	add	sp, #116	; 0x74
   118be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
   118c2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   118c6:	e7f4      	b.n	118b2 <main+0x4a>
	for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   118c8:	3501      	adds	r5, #1
   118ca:	2d04      	cmp	r5, #4
   118cc:	f104 0414 	add.w	r4, r4, #20
   118d0:	d1d9      	bne.n	11886 <main+0x1e>
	err = bt_enable(NULL);
   118d2:	2000      	movs	r0, #0
   118d4:	f005 ffa6 	bl	17824 <bt_enable>
	if (err) {
   118d8:	4604      	mov	r4, r0
		printk("Bluetooth init failed (err %d)\n", err);
   118da:	4601      	mov	r1, r0
	if (err) {
   118dc:	b108      	cbz	r0, 118e2 <main+0x7a>
		printk("Bluetooth init failed (err %d)\n", err);
   118de:	4875      	ldr	r0, [pc, #468]	; (11ab4 <main+0x24c>)
   118e0:	e7d9      	b.n	11896 <main+0x2e>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   118e2:	4e75      	ldr	r6, [pc, #468]	; (11ab8 <main+0x250>)
	printk("Bluetooth init successful (err %d)\n", err);
   118e4:	4875      	ldr	r0, [pc, #468]	; (11abc <main+0x254>)
   118e6:	f013 fca5 	bl	25234 <printk>
	cts_init();
   118ea:	f000 f92d 	bl	11b48 <cts_init>
		settings_load();
   118ee:	f014 fd72 	bl	263d6 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   118f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   118f4:	ad12      	add	r5, sp, #72	; 0x48
   118f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   118f8:	6833      	ldr	r3, [r6, #0]
   118fa:	602b      	str	r3, [r5, #0]
   118fc:	4970      	ldr	r1, [pc, #448]	; (11ac0 <main+0x258>)
   118fe:	9400      	str	r4, [sp, #0]
   11900:	4623      	mov	r3, r4
   11902:	2203      	movs	r2, #3
   11904:	a812      	add	r0, sp, #72	; 0x48
   11906:	f007 f87f 	bl	18a08 <bt_le_adv_start>
	if (err) {
   1190a:	4601      	mov	r1, r0
   1190c:	2800      	cmp	r0, #0
   1190e:	f000 8084 	beq.w	11a1a <main+0x1b2>
		printk("Advertising failed to start (err %d)\n", err);
   11912:	486c      	ldr	r0, [pc, #432]	; (11ac4 <main+0x25c>)
   11914:	f013 fc8e 	bl	25234 <printk>
	bt_gatt_cb_register(&gatt_callbacks);
   11918:	486b      	ldr	r0, [pc, #428]	; (11ac8 <main+0x260>)
   1191a:	f00a fd87 	bl	1c42c <bt_gatt_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
   1191e:	486b      	ldr	r0, [pc, #428]	; (11acc <main+0x264>)
   11920:	f008 fa20 	bl	19d64 <bt_conn_auth_cb_register>
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
   11924:	4a6a      	ldr	r2, [pc, #424]	; (11ad0 <main+0x268>)
   11926:	486b      	ldr	r0, [pc, #428]	; (11ad4 <main+0x26c>)
   11928:	210d      	movs	r1, #13
   1192a:	f00a ffa7 	bl	1c87c <bt_gatt_find_by_uuid>
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
   1192e:	2225      	movs	r2, #37	; 0x25
	vnd_ind_attr = bt_gatt_find_by_uuid(vnd_svc.attrs, vnd_svc.attr_count,
   11930:	4605      	mov	r5, r0
	bt_uuid_to_str(&vnd_enc_uuid.uuid, str, sizeof(str));
   11932:	a912      	add	r1, sp, #72	; 0x48
   11934:	4866      	ldr	r0, [pc, #408]	; (11ad0 <main+0x268>)
   11936:	f004 fa3d 	bl	15db4 <bt_uuid_to_str>
	printk("Indicate VND attr %p (UUID %s)\n", vnd_ind_attr, str);
   1193a:	4867      	ldr	r0, [pc, #412]	; (11ad8 <main+0x270>)
   1193c:	aa12      	add	r2, sp, #72	; 0x48
   1193e:	4629      	mov	r1, r5
   11940:	f013 fc78 	bl	25234 <printk>
	uint32_t count = 0;
   11944:	2400      	movs	r4, #0
	return z_impl_k_sleep(timeout);
   11946:	2100      	movs	r1, #0
   11948:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1194c:	f012 fc5c 	bl	24208 <z_impl_k_sleep>
		printk("ADC reading[%u]:\n", count++);
   11950:	4862      	ldr	r0, [pc, #392]	; (11adc <main+0x274>)
   11952:	f8df 918c 	ldr.w	r9, [pc, #396]	; 11ae0 <main+0x278>
				printk(" = %"PRId32" mV\n", val_mv);
   11956:	f8df b18c 	ldr.w	fp, [pc, #396]	; 11ae4 <main+0x27c>
		printk("ADC reading[%u]:\n", count++);
   1195a:	4621      	mov	r1, r4
   1195c:	f013 fc6a 	bl	25234 <printk>
   11960:	f104 0801 	add.w	r8, r4, #1
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   11964:	2600      	movs	r6, #0
   11966:	464f      	mov	r7, r9
			       adc_channels[i].dev->name,
   11968:	f8d9 4000 	ldr.w	r4, [r9]
			printk("- %s, channel %d: ",
   1196c:	f899 a004 	ldrb.w	sl, [r9, #4]
   11970:	6821      	ldr	r1, [r4, #0]
   11972:	485d      	ldr	r0, [pc, #372]	; (11ae8 <main+0x280>)
   11974:	4652      	mov	r2, sl
   11976:	f013 fc5d 	bl	25234 <printk>
 * @retval -ENOTSUP If @p spec does not have valid channel configuration
 */
static inline int adc_sequence_init_dt(const struct adc_dt_spec *spec,
				       struct adc_sequence *seq)
{
	if (!spec->channel_cfg_dt_node_exists) {
   1197a:	f899 1005 	ldrb.w	r1, [r9, #5]
   1197e:	b159      	cbz	r1, 11998 <main+0x130>
		return -ENOTSUP;
	}

	seq->channels = BIT(spec->channel_id);
	seq->resolution = spec->resolution;
   11980:	f899 2010 	ldrb.w	r2, [r9, #16]
   11984:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	seq->channels = BIT(spec->channel_id);
   11988:	2101      	movs	r1, #1
	seq->oversampling = spec->oversampling;
   1198a:	f899 2011 	ldrb.w	r2, [r9, #17]
   1198e:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
	seq->channels = BIT(spec->channel_id);
   11992:	fa01 f10a 	lsl.w	r1, r1, sl
   11996:	9108      	str	r1, [sp, #32]
	return api->read(dev, sequence);
   11998:	68a2      	ldr	r2, [r4, #8]
   1199a:	a907      	add	r1, sp, #28
   1199c:	6852      	ldr	r2, [r2, #4]
   1199e:	4620      	mov	r0, r4
   119a0:	4790      	blx	r2
			if (err < 0) {
   119a2:	1e01      	subs	r1, r0, #0
   119a4:	da3d      	bge.n	11a22 <main+0x1ba>
				printk("Could not read (%d)\n", err);
   119a6:	4851      	ldr	r0, [pc, #324]	; (11aec <main+0x284>)
   119a8:	f013 fc44 	bl	25234 <printk>
		for (size_t i = 0U; i < ARRAY_SIZE(adc_channels); i++) {
   119ac:	3601      	adds	r6, #1
   119ae:	2e04      	cmp	r6, #4
   119b0:	f109 0914 	add.w	r9, r9, #20
   119b4:	d1d8      	bne.n	11968 <main+0x100>
		sprintf(vnd_value, "%04d %04d %04d %04d", adc_final_reading[0], adc_final_reading[1], adc_final_reading[2], adc_final_reading[3]);
   119b6:	4e4e      	ldr	r6, [pc, #312]	; (11af0 <main+0x288>)
   119b8:	9b06      	ldr	r3, [sp, #24]
   119ba:	9301      	str	r3, [sp, #4]
   119bc:	9b05      	ldr	r3, [sp, #20]
   119be:	494d      	ldr	r1, [pc, #308]	; (11af4 <main+0x28c>)
   119c0:	9300      	str	r3, [sp, #0]
   119c2:	4630      	mov	r0, r6
   119c4:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   119c8:	f003 ff08 	bl	157dc <sprintf>
		bt_gatt_notify(NULL, &vnd_ind_attr->uuid, &vnd_value, strlen(vnd_value));
   119cc:	4630      	mov	r0, r6
   119ce:	f015 f8cd 	bl	26b6c <strlen>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   119d2:	2218      	movs	r2, #24
   119d4:	4604      	mov	r4, r0
   119d6:	2100      	movs	r1, #0
   119d8:	a80c      	add	r0, sp, #48	; 0x30
   119da:	f015 f912 	bl	26c02 <memset>
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   119de:	a90c      	add	r1, sp, #48	; 0x30
   119e0:	2000      	movs	r0, #0
	params.data = data;
   119e2:	e9cd 560d 	strd	r5, r6, [sp, #52]	; 0x34
   119e6:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
	return bt_gatt_notify_cb(conn, &params);
   119ea:	f00b f9b7 	bl	1cd5c <bt_gatt_notify_cb>
		if (simulate_vnd && vnd_ind_attr) {
   119ee:	4b42      	ldr	r3, [pc, #264]	; (11af8 <main+0x290>)
   119f0:	781b      	ldrb	r3, [r3, #0]
   119f2:	b183      	cbz	r3, 11a16 <main+0x1ae>
   119f4:	b17d      	cbz	r5, 11a16 <main+0x1ae>
			if (indicating) {
   119f6:	4c41      	ldr	r4, [pc, #260]	; (11afc <main+0x294>)
   119f8:	7820      	ldrb	r0, [r4, #0]
   119fa:	b960      	cbnz	r0, 11a16 <main+0x1ae>
			ind_params.attr = vnd_ind_attr;
   119fc:	4940      	ldr	r1, [pc, #256]	; (11b00 <main+0x298>)
			ind_params.func = indicate_cb;
   119fe:	4b41      	ldr	r3, [pc, #260]	; (11b04 <main+0x29c>)
   11a00:	608b      	str	r3, [r1, #8]
			ind_params.destroy = indicate_destroy;
   11a02:	4b41      	ldr	r3, [pc, #260]	; (11b08 <main+0x2a0>)
			ind_params.attr = vnd_ind_attr;
   11a04:	604d      	str	r5, [r1, #4]
			ind_params.len = sizeof(indicating);
   11a06:	2601      	movs	r6, #1
			ind_params.data = &indicating;
   11a08:	e9c1 3403 	strd	r3, r4, [r1, #12]
			ind_params.len = sizeof(indicating);
   11a0c:	828e      	strh	r6, [r1, #20]
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
   11a0e:	f00a ffef 	bl	1c9f0 <bt_gatt_indicate>
   11a12:	b900      	cbnz	r0, 11a16 <main+0x1ae>
				indicating = 1U;
   11a14:	7026      	strb	r6, [r4, #0]
		return -ENOTSUP;
   11a16:	4644      	mov	r4, r8
   11a18:	e795      	b.n	11946 <main+0xde>
	printk("Advertising successfully started\n");
   11a1a:	483c      	ldr	r0, [pc, #240]	; (11b0c <main+0x2a4>)
   11a1c:	f013 fc0a 	bl	25234 <printk>
   11a20:	e77a      	b.n	11918 <main+0xb0>
			if (adc_channels[i].channel_cfg.differential) {
   11a22:	2214      	movs	r2, #20
   11a24:	fb02 7206 	mla	r2, r2, r6, r7
				val_mv = (int32_t)((int16_t)buf);
   11a28:	f8bd 400a 	ldrh.w	r4, [sp, #10]
			if (adc_channels[i].channel_cfg.differential) {
   11a2c:	7a92      	ldrb	r2, [r2, #10]
			printk("%"PRId32, val_mv);
   11a2e:	4838      	ldr	r0, [pc, #224]	; (11b10 <main+0x2a8>)
			if (adc_channels[i].channel_cfg.differential) {
   11a30:	0692      	lsls	r2, r2, #26
				val_mv = (int32_t)((int16_t)buf);
   11a32:	bf48      	it	mi
   11a34:	b224      	sxthmi	r4, r4
			printk("%"PRId32, val_mv);
   11a36:	4621      	mov	r1, r4
   11a38:	f013 fbfc 	bl	25234 <printk>
	if (!spec->channel_cfg_dt_node_exists) {
   11a3c:	f899 2005 	ldrb.w	r2, [r9, #5]
   11a40:	b932      	cbnz	r2, 11a50 <main+0x1e8>
				printk(" (value in mV not available)\n");
   11a42:	4834      	ldr	r0, [pc, #208]	; (11b14 <main+0x2ac>)
   11a44:	f013 fbf6 	bl	25234 <printk>
			adc_final_reading[i] = val_mv;
   11a48:	aa03      	add	r2, sp, #12
   11a4a:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   11a4e:	e7ad      	b.n	119ac <main+0x144>
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   11a50:	f899 2007 	ldrb.w	r2, [r9, #7]
	resolution = spec->resolution;
   11a54:	f899 a010 	ldrb.w	sl, [r9, #16]
	if (spec->channel_cfg.reference == ADC_REF_INTERNAL) {
   11a58:	2a04      	cmp	r2, #4
	const struct adc_driver_api *api =
   11a5a:	bf0a      	itet	eq
   11a5c:	f8d9 2000 	ldreq.w	r2, [r9]
		vref_mv = spec->vref_mv;
   11a60:	f8b9 100e 	ldrhne.w	r1, [r9, #14]
	return api->ref_internal;
   11a64:	6892      	ldreq	r2, [r2, #8]
	if (spec->channel_cfg.differential) {
   11a66:	f04f 0014 	mov.w	r0, #20
   11a6a:	fb00 7006 	mla	r0, r0, r6, r7
		vref_mv = (int32_t)adc_ref_internal(spec->dev);
   11a6e:	bf08      	it	eq
   11a70:	8911      	ldrheq	r1, [r2, #8]
	if (spec->channel_cfg.differential) {
   11a72:	7a80      	ldrb	r0, [r0, #10]
	int32_t adc_mv = *valp * ref_mv;
   11a74:	4361      	muls	r1, r4
	if (spec->channel_cfg.differential) {
   11a76:	0683      	lsls	r3, r0, #26
		resolution -= 1U;
   11a78:	bf48      	it	mi
   11a7a:	f10a 32ff 	addmi.w	r2, sl, #4294967295	; 0xffffffff
	int32_t adc_mv = *valp * ref_mv;
   11a7e:	910c      	str	r1, [sp, #48]	; 0x30
	int ret = adc_gain_invert(gain, &adc_mv);
   11a80:	f899 0006 	ldrb.w	r0, [r9, #6]
   11a84:	a90c      	add	r1, sp, #48	; 0x30
		resolution -= 1U;
   11a86:	bf48      	it	mi
   11a88:	fa5f fa82 	uxtbmi.w	sl, r2
	int ret = adc_gain_invert(gain, &adc_mv);
   11a8c:	f00d fffc 	bl	1fa88 <adc_gain_invert>
	if (ret == 0) {
   11a90:	2800      	cmp	r0, #0
   11a92:	d107      	bne.n	11aa4 <main+0x23c>
		*valp = (adc_mv >> resolution);
   11a94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11a96:	fa44 f40a 	asr.w	r4, r4, sl
				printk(" = %"PRId32" mV\n", val_mv);
   11a9a:	4621      	mov	r1, r4
   11a9c:	4658      	mov	r0, fp
   11a9e:	f013 fbc9 	bl	25234 <printk>
   11aa2:	e7d1      	b.n	11a48 <main+0x1e0>
			if (err < 0) {
   11aa4:	dbcd      	blt.n	11a42 <main+0x1da>
   11aa6:	e7f8      	b.n	11a9a <main+0x232>
   11aa8:	0002abca 	.word	0x0002abca
   11aac:	0002b6c1 	.word	0x0002b6c1
   11ab0:	0002b6e5 	.word	0x0002b6e5
   11ab4:	0002b707 	.word	0x0002b707
   11ab8:	0002a9e0 	.word	0x0002a9e0
   11abc:	0002b727 	.word	0x0002b727
   11ac0:	0002aaa8 	.word	0x0002aaa8
   11ac4:	0002b74b 	.word	0x0002b74b
   11ac8:	20000640 	.word	0x20000640
   11acc:	20000628 	.word	0x20000628
   11ad0:	20000aa3 	.word	0x20000aa3
   11ad4:	0002aac0 	.word	0x0002aac0
   11ad8:	0002b793 	.word	0x0002b793
   11adc:	0002b7b3 	.word	0x0002b7b3
   11ae0:	0002abc4 	.word	0x0002abc4
   11ae4:	0002b80b 	.word	0x0002b80b
   11ae8:	0002b7c5 	.word	0x0002b7c5
   11aec:	0002b7d8 	.word	0x0002b7d8
   11af0:	20000a7d 	.word	0x20000a7d
   11af4:	0002b815 	.word	0x0002b815
   11af8:	200033b1 	.word	0x200033b1
   11afc:	200033b0 	.word	0x200033b0
   11b00:	20002e54 	.word	0x20002e54
   11b04:	00011779 	.word	0x00011779
   11b08:	00011761 	.word	0x00011761
   11b0c:	0002b771 	.word	0x0002b771
   11b10:	0002f28b 	.word	0x0002f28b
   11b14:	0002b7ed 	.word	0x0002b7ed

00011b18 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
   11b18:	b538      	push	{r3, r4, r5, lr}
   11b1a:	460c      	mov	r4, r1
   11b1c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   11b20:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
   11b22:	461c      	mov	r4, r3
   11b24:	18c3      	adds	r3, r0, r3
   11b26:	2b0a      	cmp	r3, #10
{
   11b28:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
   11b2a:	dc08      	bgt.n	11b3e <write_ct+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
   11b2c:	4622      	mov	r2, r4
   11b2e:	4428      	add	r0, r5
   11b30:	f015 f85c 	bl	26bec <memcpy>
	ct_update = 1U;
   11b34:	4b03      	ldr	r3, [pc, #12]	; (11b44 <write_ct+0x2c>)
   11b36:	2201      	movs	r2, #1
   11b38:	701a      	strb	r2, [r3, #0]

	return len;
}
   11b3a:	4620      	mov	r0, r4
   11b3c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   11b3e:	f06f 0406 	mvn.w	r4, #6
   11b42:	e7fa      	b.n	11b3a <write_ct+0x22>
   11b44:	200033b2 	.word	0x200033b2

00011b48 <cts_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void cts_init(void)
{
   11b48:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
   11b4a:	4c0d      	ldr	r4, [pc, #52]	; (11b80 <cts_init+0x38>)
	year = sys_cpu_to_le16(2015);
   11b4c:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
   11b50:	2202      	movs	r2, #2
   11b52:	f10d 0106 	add.w	r1, sp, #6
   11b56:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
   11b58:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
   11b5c:	f015 f846 	bl	26bec <memcpy>
	buf[2] = 5U; /* months starting from 1 */
   11b60:	2305      	movs	r3, #5
   11b62:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
   11b64:	231e      	movs	r3, #30
   11b66:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
   11b68:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
   11b6a:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
   11b6c:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
   11b6e:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
   11b70:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
   11b72:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
   11b74:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
   11b76:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
   11b78:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
   11b7a:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);
}
   11b7c:	b002      	add	sp, #8
   11b7e:	bd10      	pop	{r4, pc}
   11b80:	200033b3 	.word	0x200033b3

00011b84 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   11b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b88:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   11b8a:	0784      	lsls	r4, r0, #30
{
   11b8c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   11b8e:	f002 0304 	and.w	r3, r2, #4
   11b92:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11b94:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   11b98:	f103 0301 	add.w	r3, r3, #1
   11b9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   11ba0:	9203      	str	r2, [sp, #12]
   11ba2:	4605      	mov	r5, r0
   11ba4:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   11ba6:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   11ba8:	f040 81be 	bne.w	11f28 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11bac:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11bae:	b130      	cbz	r0, 11bbe <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   11bb0:	2907      	cmp	r1, #7
   11bb2:	d809      	bhi.n	11bc8 <cbvprintf_package+0x44>
		return -ENOSPC;
   11bb4:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   11bb8:	b011      	add	sp, #68	; 0x44
   11bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   11bbe:	f001 0607 	and.w	r6, r1, #7
   11bc2:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   11bc4:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   11bc8:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   11bca:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   11bce:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   11bd0:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   11bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11bd8:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   11bda:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   11bde:	464f      	mov	r7, r9
	bool parsing = false;
   11be0:	46cb      	mov	fp, r9
	size = sizeof(char *);
   11be2:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   11be4:	b10d      	cbz	r5, 11bea <cbvprintf_package+0x66>
				*(const char **)buf = s;
   11be6:	9a00      	ldr	r2, [sp, #0]
   11be8:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11bea:	9805      	ldr	r0, [sp, #20]
   11bec:	2800      	cmp	r0, #0
   11bee:	f300 80eb 	bgt.w	11dc8 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11bf2:	489a      	ldr	r0, [pc, #616]	; (11e5c <cbvprintf_package+0x2d8>)
   11bf4:	9a00      	ldr	r2, [sp, #0]
   11bf6:	4282      	cmp	r2, r0
   11bf8:	d303      	bcc.n	11c02 <cbvprintf_package+0x7e>
   11bfa:	4899      	ldr	r0, [pc, #612]	; (11e60 <cbvprintf_package+0x2dc>)
   11bfc:	4282      	cmp	r2, r0
   11bfe:	f0c0 80e3 	bcc.w	11dc8 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11c02:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11c04:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11c08:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11c0a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11c0e:	f100 8106 	bmi.w	11e1e <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11c12:	2f0f      	cmp	r7, #15
   11c14:	f200 80b4 	bhi.w	11d80 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11c18:	2d00      	cmp	r5, #0
   11c1a:	f000 8108 	beq.w	11e2e <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11c1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11c22:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   11c26:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11c28:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11c2c:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11c30:	9804      	ldr	r0, [sp, #16]
   11c32:	3001      	adds	r0, #1
   11c34:	9004      	str	r0, [sp, #16]
   11c36:	e0ea      	b.n	11e0e <cbvprintf_package+0x28a>
			switch (*fmt) {
   11c38:	287a      	cmp	r0, #122	; 0x7a
   11c3a:	d860      	bhi.n	11cfe <cbvprintf_package+0x17a>
   11c3c:	284b      	cmp	r0, #75	; 0x4b
   11c3e:	d80e      	bhi.n	11c5e <cbvprintf_package+0xda>
   11c40:	2847      	cmp	r0, #71	; 0x47
   11c42:	d85c      	bhi.n	11cfe <cbvprintf_package+0x17a>
   11c44:	2829      	cmp	r0, #41	; 0x29
   11c46:	d82f      	bhi.n	11ca8 <cbvprintf_package+0x124>
   11c48:	2825      	cmp	r0, #37	; 0x25
   11c4a:	d055      	beq.n	11cf8 <cbvprintf_package+0x174>
   11c4c:	d857      	bhi.n	11cfe <cbvprintf_package+0x17a>
   11c4e:	2820      	cmp	r0, #32
   11c50:	d07d      	beq.n	11d4e <cbvprintf_package+0x1ca>
   11c52:	3823      	subs	r0, #35	; 0x23
   11c54:	f1d0 0b00 	rsbs	fp, r0, #0
   11c58:	eb4b 0b00 	adc.w	fp, fp, r0
   11c5c:	e077      	b.n	11d4e <cbvprintf_package+0x1ca>
   11c5e:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   11c62:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   11c66:	d84a      	bhi.n	11cfe <cbvprintf_package+0x17a>
   11c68:	e8df f00c 	tbb	[pc, ip]
   11c6c:	49494971 	.word	0x49494971
   11c70:	49494949 	.word	0x49494949
   11c74:	49494949 	.word	0x49494949
   11c78:	4949494c 	.word	0x4949494c
   11c7c:	49494949 	.word	0x49494949
   11c80:	4c495a49 	.word	0x4c495a49
   11c84:	5a5a5a4c 	.word	0x5a5a5a4c
   11c88:	496e4c71 	.word	0x496e4c71
   11c8c:	4c184971 	.word	0x4c184971
   11c90:	83494918 	.word	0x83494918
   11c94:	49494c80 	.word	0x49494c80
   11c98:	494c      	.short	0x494c
   11c9a:	80          	.byte	0x80
   11c9b:	00          	.byte	0x00
   11c9c:	2000      	movs	r0, #0
   11c9e:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   11ca2:	f04f 0a04 	mov.w	sl, #4
   11ca6:	e039      	b.n	11d1c <cbvprintf_package+0x198>
			switch (*fmt) {
   11ca8:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   11cac:	fa5f fc8c 	uxtb.w	ip, ip
   11cb0:	2201      	movs	r2, #1
   11cb2:	fa02 fc0c 	lsl.w	ip, r2, ip
   11cb6:	ea1c 0f0e 	tst.w	ip, lr
   11cba:	d148      	bne.n	11d4e <cbvprintf_package+0x1ca>
   11cbc:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   11cc0:	d12e      	bne.n	11d20 <cbvprintf_package+0x19c>
   11cc2:	ea1c 0b02 	ands.w	fp, ip, r2
   11cc6:	d042      	beq.n	11d4e <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   11cc8:	3c01      	subs	r4, #1
   11cca:	4454      	add	r4, sl
   11ccc:	f1ca 0c00 	rsb	ip, sl, #0
   11cd0:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   11cd4:	2d00      	cmp	r5, #0
   11cd6:	d061      	beq.n	11d9c <cbvprintf_package+0x218>
   11cd8:	eba3 0c05 	sub.w	ip, r3, r5
   11cdc:	44a4      	add	ip, r4
   11cde:	45b4      	cmp	ip, r6
   11ce0:	f63f af68 	bhi.w	11bb4 <cbvprintf_package+0x30>
		if (is_str_arg) {
   11ce4:	2800      	cmp	r0, #0
   11ce6:	d168      	bne.n	11dba <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11ce8:	2b04      	cmp	r3, #4
   11cea:	d147      	bne.n	11d7c <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   11cec:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   11cf0:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   11cf2:	3404      	adds	r4, #4
   11cf4:	2304      	movs	r3, #4
   11cf6:	e02a      	b.n	11d4e <cbvprintf_package+0x1ca>
				arg_idx--;
   11cf8:	9a01      	ldr	r2, [sp, #4]
   11cfa:	3a01      	subs	r2, #1
   11cfc:	9201      	str	r2, [sp, #4]
				parsing = false;
   11cfe:	f04f 0b00 	mov.w	fp, #0
				continue;
   11d02:	e024      	b.n	11d4e <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   11d04:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   11d08:	286c      	cmp	r0, #108	; 0x6c
   11d0a:	d134      	bne.n	11d76 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   11d0c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   11d10:	2000      	movs	r0, #0
   11d12:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   11d14:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   11d16:	d1c4      	bne.n	11ca2 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   11d18:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11d1c:	4653      	mov	r3, sl
   11d1e:	e7d3      	b.n	11cc8 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   11d20:	f108 0807 	add.w	r8, r8, #7
   11d24:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   11d28:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   11d2a:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   11d2e:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11d32:	b135      	cbz	r5, 11d42 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11d34:	9806      	ldr	r0, [sp, #24]
   11d36:	4420      	add	r0, r4
   11d38:	42b0      	cmp	r0, r6
   11d3a:	f63f af3b 	bhi.w	11bb4 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   11d3e:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   11d42:	3408      	adds	r4, #8
				parsing = false;
   11d44:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   11d48:	f04f 0a08 	mov.w	sl, #8
   11d4c:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   11d4e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11d52:	2800      	cmp	r0, #0
   11d54:	d078      	beq.n	11e48 <cbvprintf_package+0x2c4>
			if (!parsing) {
   11d56:	f1bb 0f00 	cmp.w	fp, #0
   11d5a:	f47f af6d 	bne.w	11c38 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   11d5e:	2825      	cmp	r0, #37	; 0x25
   11d60:	d1f5      	bne.n	11d4e <cbvprintf_package+0x1ca>
					arg_idx++;
   11d62:	9b01      	ldr	r3, [sp, #4]
   11d64:	3301      	adds	r3, #1
   11d66:	9301      	str	r3, [sp, #4]
					parsing = true;
   11d68:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   11d6c:	f04f 0a04 	mov.w	sl, #4
   11d70:	e7ec      	b.n	11d4c <cbvprintf_package+0x1c8>
			switch (*fmt) {
   11d72:	4658      	mov	r0, fp
   11d74:	e793      	b.n	11c9e <cbvprintf_package+0x11a>
   11d76:	2000      	movs	r0, #0
				parsing = false;
   11d78:	4683      	mov	fp, r0
   11d7a:	e7a5      	b.n	11cc8 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   11d7c:	2b08      	cmp	r3, #8
   11d7e:	d002      	beq.n	11d86 <cbvprintf_package+0x202>
					return -EINVAL;
   11d80:	f06f 0015 	mvn.w	r0, #21
   11d84:	e718      	b.n	11bb8 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   11d86:	f108 0807 	add.w	r8, r8, #7
   11d8a:	f028 0807 	bic.w	r8, r8, #7
   11d8e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   11d92:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   11d96:	3408      	adds	r4, #8
   11d98:	2308      	movs	r3, #8
   11d9a:	e7d8      	b.n	11d4e <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   11d9c:	b968      	cbnz	r0, 11dba <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11d9e:	2b04      	cmp	r3, #4
   11da0:	d102      	bne.n	11da8 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   11da2:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   11da6:	e7a4      	b.n	11cf2 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   11da8:	2b08      	cmp	r3, #8
   11daa:	d1e9      	bne.n	11d80 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   11dac:	f108 0807 	add.w	r8, r8, #7
   11db0:	f028 0807 	bic.w	r8, r8, #7
   11db4:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   11db8:	e7ed      	b.n	11d96 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11dba:	9a05      	ldr	r2, [sp, #20]
   11dbc:	3a01      	subs	r2, #1
   11dbe:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   11dc0:	f858 2b04 	ldr.w	r2, [r8], #4
   11dc4:	9200      	str	r2, [sp, #0]
   11dc6:	e70d      	b.n	11be4 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   11dc8:	9a03      	ldr	r2, [sp, #12]
   11dca:	0790      	lsls	r0, r2, #30
   11dcc:	d520      	bpl.n	11e10 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11dce:	eba4 0e05 	sub.w	lr, r4, r5
   11dd2:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11dd6:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11dda:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   11dde:	d2cf      	bcs.n	11d80 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11de0:	2f0f      	cmp	r7, #15
   11de2:	d8cd      	bhi.n	11d80 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11de4:	b1f5      	cbz	r5, 11e24 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11de6:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11dea:	eb0d 0e02 	add.w	lr, sp, r2
   11dee:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   11df0:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11df2:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11df6:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   11dfa:	f1bc 0f00 	cmp.w	ip, #0
   11dfe:	f43f af17 	beq.w	11c30 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   11e02:	f060 007f 	orn	r0, r0, #127	; 0x7f
   11e06:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   11e0a:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   11e0e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   11e10:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   11e14:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   11e16:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   11e18:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11e1c:	e797      	b.n	11d4e <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11e1e:	f04f 0c00 	mov.w	ip, #0
   11e22:	e7da      	b.n	11dda <cbvprintf_package+0x256>
				} else if (is_ro) {
   11e24:	f1bc 0f00 	cmp.w	ip, #0
   11e28:	d001      	beq.n	11e2e <cbvprintf_package+0x2aa>
					len += 1;
   11e2a:	3601      	adds	r6, #1
   11e2c:	e7ef      	b.n	11e0e <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   11e2e:	9802      	ldr	r0, [sp, #8]
					len += 2;
   11e30:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   11e32:	2800      	cmp	r0, #0
   11e34:	d1eb      	bne.n	11e0e <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   11e36:	9800      	ldr	r0, [sp, #0]
   11e38:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11e3c:	f014 fe96 	bl	26b6c <strlen>
   11e40:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11e44:	4406      	add	r6, r0
   11e46:	e7e2      	b.n	11e0e <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   11e48:	1b63      	subs	r3, r4, r5
   11e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11e4e:	d297      	bcs.n	11d80 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   11e50:	b945      	cbnz	r5, 11e64 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   11e52:	f1a6 0408 	sub.w	r4, r6, #8
   11e56:	18e0      	adds	r0, r4, r3
   11e58:	e6ae      	b.n	11bb8 <cbvprintf_package+0x34>
   11e5a:	bf00      	nop
   11e5c:	0002a460 	.word	0x0002a460
   11e60:	0002f478 	.word	0x0002f478
	if (rws_pos_en) {
   11e64:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   11e66:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   11e68:	089b      	lsrs	r3, r3, #2
   11e6a:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11e6c:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   11e70:	b1c2      	cbz	r2, 11ea4 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11e72:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11e74:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   11e78:	f1b9 0f00 	cmp.w	r9, #0
   11e7c:	d005      	beq.n	11e8a <cbvprintf_package+0x306>
   11e7e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   11e80:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   11e82:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   11e86:	4297      	cmp	r7, r2
   11e88:	d10e      	bne.n	11ea8 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   11e8a:	f1c5 0301 	rsb	r3, r5, #1
   11e8e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   11e92:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   11e96:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   11e98:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   11e9c:	4557      	cmp	r7, sl
   11e9e:	d112      	bne.n	11ec6 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   11ea0:	1b60      	subs	r0, r4, r5
   11ea2:	e689      	b.n	11bb8 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   11ea4:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   11ea6:	e7e5      	b.n	11e74 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   11ea8:	f810 3b01 	ldrb.w	r3, [r0], #1
   11eac:	0619      	lsls	r1, r3, #24
   11eae:	d508      	bpl.n	11ec2 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   11eb0:	eb04 0e0c 	add.w	lr, r4, ip
   11eb4:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   11eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   11eba:	f63f ae7b 	bhi.w	11bb4 <cbvprintf_package+0x30>
			*buf++ = pos;
   11ebe:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   11ec2:	3201      	adds	r2, #1
   11ec4:	e7df      	b.n	11e86 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   11ec6:	f1b9 0f00 	cmp.w	r9, #0
   11eca:	d003      	beq.n	11ed4 <cbvprintf_package+0x350>
   11ecc:	f998 2000 	ldrsb.w	r2, [r8]
   11ed0:	2a00      	cmp	r2, #0
   11ed2:	db17      	blt.n	11f04 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   11ed4:	9b02      	ldr	r3, [sp, #8]
   11ed6:	b1d3      	cbz	r3, 11f0e <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   11ed8:	f81a 200b 	ldrb.w	r2, [sl, fp]
   11edc:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   11ee0:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   11ee2:	9b01      	ldr	r3, [sp, #4]
   11ee4:	1898      	adds	r0, r3, r2
   11ee6:	4420      	add	r0, r4
   11ee8:	42b0      	cmp	r0, r6
   11eea:	f63f ae63 	bhi.w	11bb4 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   11eee:	f898 0000 	ldrb.w	r0, [r8]
   11ef2:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   11ef6:	9900      	ldr	r1, [sp, #0]
   11ef8:	9203      	str	r2, [sp, #12]
   11efa:	4620      	mov	r0, r4
   11efc:	f014 fe76 	bl	26bec <memcpy>
		buf += size;
   11f00:	9a03      	ldr	r2, [sp, #12]
   11f02:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   11f04:	f10a 0a01 	add.w	sl, sl, #1
   11f08:	f108 0801 	add.w	r8, r8, #1
   11f0c:	e7c6      	b.n	11e9c <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   11f0e:	f898 2000 	ldrb.w	r2, [r8]
   11f12:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   11f16:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   11f18:	9b02      	ldr	r3, [sp, #8]
   11f1a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   11f1e:	9800      	ldr	r0, [sp, #0]
   11f20:	f014 fe24 	bl	26b6c <strlen>
   11f24:	1c42      	adds	r2, r0, #1
   11f26:	e7dc      	b.n	11ee2 <cbvprintf_package+0x35e>
		return -EFAULT;
   11f28:	f06f 000d 	mvn.w	r0, #13
   11f2c:	e644      	b.n	11bb8 <cbvprintf_package+0x34>
   11f2e:	bf00      	nop

00011f30 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   11f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	b095      	sub	sp, #84	; 0x54
   11f36:	af00      	add	r7, sp, #0
   11f38:	4604      	mov	r4, r0
   11f3a:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   11f3e:	61bb      	str	r3, [r7, #24]
   11f40:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11f44:	627a      	str	r2, [r7, #36]	; 0x24
   11f46:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   11f48:	6239      	str	r1, [r7, #32]
   11f4a:	b951      	cbnz	r1, 11f62 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   11f4c:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   11f4e:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   11f50:	7880      	ldrb	r0, [r0, #2]
   11f52:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11f56:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   11f58:	6a3b      	ldr	r3, [r7, #32]
   11f5a:	429e      	cmp	r6, r3
   11f5c:	d81a      	bhi.n	11f94 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   11f5e:	1b03      	subs	r3, r0, r4
   11f60:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   11f62:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   11f66:	78e3      	ldrb	r3, [r4, #3]
   11f68:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   11f6a:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   11f6c:	f1ba 0f00 	cmp.w	sl, #0
   11f70:	d002      	beq.n	11f78 <cbprintf_package_convert+0x48>
   11f72:	f01b 0f01 	tst.w	fp, #1
   11f76:	d117      	bne.n	11fa8 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
   11f78:	697b      	ldr	r3, [r7, #20]
   11f7a:	bb5b      	cbnz	r3, 11fd4 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   11f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f7e:	b11b      	cbz	r3, 11f88 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   11f80:	69ba      	ldr	r2, [r7, #24]
   11f82:	6a39      	ldr	r1, [r7, #32]
   11f84:	4620      	mov	r0, r4
   11f86:	4798      	blx	r3
		}

		return in_len;
   11f88:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   11f8a:	4628      	mov	r0, r5
   11f8c:	3754      	adds	r7, #84	; 0x54
   11f8e:	46bd      	mov	sp, r7
   11f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   11f94:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   11f96:	4628      	mov	r0, r5
   11f98:	f014 fde8 	bl	26b6c <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   11f9c:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   11f9e:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   11fa0:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   11fa2:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   11fa4:	623b      	str	r3, [r7, #32]
   11fa6:	e7d7      	b.n	11f58 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
   11fa8:	f894 8000 	ldrb.w	r8, [r4]
   11fac:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11fae:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   11fb2:	ea4f 0288 	mov.w	r2, r8, lsl #2
   11fb6:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   11fb8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	f040 8103 	bne.w	121c8 <cbprintf_package_convert+0x298>
		out_len = (int)in_len;
   11fc2:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   11fc4:	46c1      	mov	r9, r8
   11fc6:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   11fca:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   11fcc:	454b      	cmp	r3, r9
   11fce:	d150      	bne.n	12072 <cbprintf_package_convert+0x142>
   11fd0:	44d0      	add	r8, sl
   11fd2:	e013      	b.n	11ffc <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
   11fd4:	f01b 0f02 	tst.w	fp, #2
   11fd8:	d0d0      	beq.n	11f7c <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   11fda:	f894 8000 	ldrb.w	r8, [r4]
   11fde:	ea4f 0388 	mov.w	r3, r8, lsl #2
   11fe2:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11fe4:	6863      	ldr	r3, [r4, #4]
   11fe6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   11fea:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   11fee:	2b00      	cmp	r3, #0
   11ff0:	d17a      	bne.n	120e8 <cbprintf_package_convert+0x1b8>
		out_len = (int)in_len;
   11ff2:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11ff4:	f1ba 0f00 	cmp.w	sl, #0
   11ff8:	d150      	bne.n	1209c <cbprintf_package_convert+0x16c>
	size_t strl_cnt = 0;
   11ffa:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   11ffc:	f01b 0f05 	tst.w	fp, #5
   12000:	bf0c      	ite	eq
   12002:	2302      	moveq	r3, #2
   12004:	2301      	movne	r3, #1
   12006:	627b      	str	r3, [r7, #36]	; 0x24
   12008:	697b      	ldr	r3, [r7, #20]
   1200a:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1200e:	f00b 0302 	and.w	r3, fp, #2
   12012:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12014:	45d0      	cmp	r8, sl
   12016:	d0b8      	beq.n	11f8a <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   12018:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   1201c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   12020:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   12024:	4bad      	ldr	r3, [pc, #692]	; (122dc <cbprintf_package_convert+0x3ac>)
   12026:	4599      	cmp	r9, r3
   12028:	d302      	bcc.n	12030 <cbprintf_package_convert+0x100>
   1202a:	4bad      	ldr	r3, [pc, #692]	; (122e0 <cbprintf_package_convert+0x3b0>)
   1202c:	4599      	cmp	r9, r3
   1202e:	d33b      	bcc.n	120a8 <cbprintf_package_convert+0x178>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12030:	693b      	ldr	r3, [r7, #16]
   12032:	2b00      	cmp	r3, #0
   12034:	d045      	beq.n	120c2 <cbprintf_package_convert+0x192>
   12036:	69f8      	ldr	r0, [r7, #28]
   12038:	f013 f847 	bl	250ca <is_ptr>
   1203c:	2800      	cmp	r0, #0
   1203e:	d040      	beq.n	120c2 <cbprintf_package_convert+0x192>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12040:	46e9      	mov	r9, sp
   12042:	b08a      	sub	sp, #40	; 0x28
   12044:	466a      	mov	r2, sp
   12046:	4ba7      	ldr	r3, [pc, #668]	; (122e4 <cbprintf_package_convert+0x3b4>)
   12048:	6153      	str	r3, [r2, #20]
   1204a:	4ba7      	ldr	r3, [pc, #668]	; (122e8 <cbprintf_package_convert+0x3b8>)
   1204c:	6193      	str	r3, [r2, #24]
   1204e:	69fb      	ldr	r3, [r7, #28]
   12050:	e9c2 3107 	strd	r3, r1, [r2, #28]
   12054:	f240 3301 	movw	r3, #769	; 0x301
   12058:	8493      	strh	r3, [r2, #36]	; 0x24
   1205a:	4ba4      	ldr	r3, [pc, #656]	; (122ec <cbprintf_package_convert+0x3bc>)
   1205c:	f842 3f10 	str.w	r3, [r2, #16]!
   12060:	48a3      	ldr	r0, [pc, #652]	; (122f0 <cbprintf_package_convert+0x3c0>)
   12062:	2300      	movs	r3, #0
   12064:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   12068:	f001 fc5e 	bl	13928 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   1206c:	3d02      	subs	r5, #2
   1206e:	46cd      	mov	sp, r9
				continue;
   12070:	e7d0      	b.n	12014 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
   12072:	f819 2b01 	ldrb.w	r2, [r9], #1
   12076:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12078:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   1207c:	f014 fd76 	bl	26b6c <strlen>
				if (strl && strl_cnt < strl_len) {
   12080:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   12082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12084:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   12086:	b13a      	cbz	r2, 12098 <cbprintf_package_convert+0x168>
   12088:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   1208c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   1208e:	bf3e      	ittt	cc
   12090:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   12092:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   12096:	3601      	addcc	r6, #1
				out_len += len;
   12098:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   1209a:	e797      	b.n	11fcc <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1209c:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   120a0:	bf1c      	itt	ne
   120a2:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   120a4:	44d0      	addne	r8, sl
   120a6:	e7a9      	b.n	11ffc <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   120a8:	693b      	ldr	r3, [r7, #16]
   120aa:	b123      	cbz	r3, 120b6 <cbprintf_package_convert+0x186>
   120ac:	69f8      	ldr	r0, [r7, #28]
   120ae:	f013 f80c 	bl	250ca <is_ptr>
   120b2:	2800      	cmp	r0, #0
   120b4:	d1c4      	bne.n	12040 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   120b6:	f01b 0f01 	tst.w	fp, #1
   120ba:	d105      	bne.n	120c8 <cbprintf_package_convert+0x198>
					out_len -= drop_ro_str_pos ? 2 : 1;
   120bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   120be:	1aed      	subs	r5, r5, r3
   120c0:	e7a8      	b.n	12014 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   120c2:	6a3b      	ldr	r3, [r7, #32]
   120c4:	2b00      	cmp	r3, #0
   120c6:	d0a5      	beq.n	12014 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
   120c8:	4648      	mov	r0, r9
   120ca:	f014 fd4f 	bl	26b6c <strlen>
				if (strl && strl_cnt < strl_len) {
   120ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   120d0:	b143      	cbz	r3, 120e4 <cbprintf_package_convert+0x1b4>
   120d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   120d6:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   120d8:	bf3f      	itttt	cc
   120da:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   120dc:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   120de:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   120e2:	3601      	addcc	r6, #1
				out_len += (len - 1);
   120e4:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   120e6:	e795      	b.n	12014 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   120e8:	f1ba 0f00 	cmp.w	sl, #0
   120ec:	d071      	beq.n	121d2 <cbprintf_package_convert+0x2a2>
   120ee:	f01b 0604 	ands.w	r6, fp, #4
   120f2:	d071      	beq.n	121d8 <cbprintf_package_convert+0x2a8>
		keep_cnt = ros_nbr;
   120f4:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   120f6:	2600      	movs	r6, #0
		dst = keep_str_pos;
   120f8:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   120fc:	4652      	mov	r2, sl
   120fe:	4641      	mov	r1, r8
   12100:	f014 fd74 	bl	26bec <memcpy>
	str_pos += ros_nbr;
   12104:	697b      	ldr	r3, [r7, #20]
   12106:	005b      	lsls	r3, r3, #1
   12108:	60bb      	str	r3, [r7, #8]
   1210a:	697b      	ldr	r3, [r7, #20]
   1210c:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   1210e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   12112:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12114:	f00b 0302 	and.w	r3, fp, #2
   12118:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   1211a:	697b      	ldr	r3, [r7, #20]
   1211c:	4598      	cmp	r8, r3
   1211e:	d15d      	bne.n	121dc <cbprintf_package_convert+0x2ac>
	out_desc.len = in_desc->len;
   12120:	7823      	ldrb	r3, [r4, #0]
   12122:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12124:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12126:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1212a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1212e:	bf0c      	ite	eq
   12130:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   12134:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12136:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   1213a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1213c:	f040 809d 	bne.w	1227a <cbprintf_package_convert+0x34a>
   12140:	f01b 0f04 	tst.w	fp, #4
   12144:	bf14      	ite	ne
   12146:	4648      	movne	r0, r9
   12148:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   1214a:	f894 b002 	ldrb.w	fp, [r4, #2]
   1214e:	f894 8003 	ldrb.w	r8, [r4, #3]
   12152:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   12154:	7062      	strb	r2, [r4, #1]
   12156:	70a0      	strb	r0, [r4, #2]
   12158:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   1215a:	69ba      	ldr	r2, [r7, #24]
   1215c:	68f9      	ldr	r1, [r7, #12]
   1215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12160:	4620      	mov	r0, r4
   12162:	4798      	blx	r3
	if (rv < 0) {
   12164:	1e05      	subs	r5, r0, #0
   12166:	f6ff af10 	blt.w	11f8a <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   1216a:	69fb      	ldr	r3, [r7, #28]
   1216c:	7023      	strb	r3, [r4, #0]
   1216e:	693b      	ldr	r3, [r7, #16]
   12170:	7063      	strb	r3, [r4, #1]
   12172:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12176:	69ba      	ldr	r2, [r7, #24]
   12178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   1217a:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   1217e:	4649      	mov	r1, r9
   12180:	f107 0040 	add.w	r0, r7, #64	; 0x40
   12184:	4798      	blx	r3
	if (rv < 0) {
   12186:	f1b0 0800 	subs.w	r8, r0, #0
   1218a:	f2c0 80a3 	blt.w	122d4 <cbprintf_package_convert+0x3a4>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   1218e:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   12190:	69ba      	ldr	r2, [r7, #24]
   12192:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12194:	eba3 010a 	sub.w	r1, r3, sl
   12198:	68fb      	ldr	r3, [r7, #12]
   1219a:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   1219c:	68bb      	ldr	r3, [r7, #8]
   1219e:	1ac9      	subs	r1, r1, r3
   121a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   121a2:	4798      	blx	r3
	if (rv < 0) {
   121a4:	2800      	cmp	r0, #0
   121a6:	f2c0 8097 	blt.w	122d8 <cbprintf_package_convert+0x3a8>
	out_len += rv;
   121aa:	44a8      	add	r8, r5
	out_len += rv;
   121ac:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   121b0:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   121b4:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   121b8:	45b3      	cmp	fp, r6
   121ba:	d360      	bcc.n	1227e <cbprintf_package_convert+0x34e>
	(void)cb(NULL, 0, ctx);
   121bc:	2100      	movs	r1, #0
   121be:	69ba      	ldr	r2, [r7, #24]
   121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   121c2:	4608      	mov	r0, r1
   121c4:	4798      	blx	r3
	return out_len;
   121c6:	e6e0      	b.n	11f8a <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   121c8:	f107 0030 	add.w	r0, r7, #48	; 0x30
   121cc:	f04f 0900 	mov.w	r9, #0
   121d0:	e794      	b.n	120fc <cbprintf_package_convert+0x1cc>
		scpy_cnt = 0;
   121d2:	4656      	mov	r6, sl
		keep_cnt = 0;
   121d4:	46d1      	mov	r9, sl
   121d6:	e795      	b.n	12104 <cbprintf_package_convert+0x1d4>
   121d8:	46b1      	mov	r9, r6
   121da:	e793      	b.n	12104 <cbprintf_package_convert+0x1d4>
		uint8_t arg_idx = *str_pos++;
   121dc:	f818 1b02 	ldrb.w	r1, [r8], #2
   121e0:	4a3e      	ldr	r2, [pc, #248]	; (122dc <cbprintf_package_convert+0x3ac>)
		uint8_t arg_pos = *str_pos++;
   121e2:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   121e6:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   121ea:	4293      	cmp	r3, r2
   121ec:	d302      	bcc.n	121f4 <cbprintf_package_convert+0x2c4>
   121ee:	4a3c      	ldr	r2, [pc, #240]	; (122e0 <cbprintf_package_convert+0x3b0>)
   121f0:	4293      	cmp	r3, r2
   121f2:	d31c      	bcc.n	1222e <cbprintf_package_convert+0x2fe>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   121f4:	693b      	ldr	r3, [r7, #16]
   121f6:	b123      	cbz	r3, 12202 <cbprintf_package_convert+0x2d2>
   121f8:	69f8      	ldr	r0, [r7, #28]
   121fa:	f012 ff66 	bl	250ca <is_ptr>
   121fe:	2800      	cmp	r0, #0
   12200:	d18b      	bne.n	1211a <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12202:	687b      	ldr	r3, [r7, #4]
   12204:	b9f3      	cbnz	r3, 12244 <cbprintf_package_convert+0x314>
				keep_str_pos[keep_cnt++] = arg_idx;
   12206:	f109 0228 	add.w	r2, r9, #40	; 0x28
   1220a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1220e:	4402      	add	r2, r0
   12210:	f109 0301 	add.w	r3, r9, #1
   12214:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12218:	f107 0250 	add.w	r2, r7, #80	; 0x50
   1221c:	fa52 f383 	uxtab	r3, r2, r3
   12220:	f109 0902 	add.w	r9, r9, #2
   12224:	fa5f f989 	uxtb.w	r9, r9
   12228:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   1222c:	e775      	b.n	1211a <cbprintf_package_convert+0x1ea>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   1222e:	693b      	ldr	r3, [r7, #16]
   12230:	b12b      	cbz	r3, 1223e <cbprintf_package_convert+0x30e>
   12232:	69f8      	ldr	r0, [r7, #28]
   12234:	f012 ff49 	bl	250ca <is_ptr>
   12238:	2800      	cmp	r0, #0
   1223a:	f47f af6e 	bne.w	1211a <cbprintf_package_convert+0x1ea>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1223e:	f01b 0f01 	tst.w	fp, #1
   12242:	d009      	beq.n	12258 <cbprintf_package_convert+0x328>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12244:	f106 0228 	add.w	r2, r6, #40	; 0x28
   12248:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1224c:	1c73      	adds	r3, r6, #1
   1224e:	1856      	adds	r6, r2, r1
   12250:	f806 5c20 	strb.w	r5, [r6, #-32]
   12254:	b2de      	uxtb	r6, r3
   12256:	e760      	b.n	1211a <cbprintf_package_convert+0x1ea>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12258:	f01b 0f04 	tst.w	fp, #4
   1225c:	f43f af5d 	beq.w	1211a <cbprintf_package_convert+0x1ea>
				keep_str_pos[keep_cnt++] = arg_pos;
   12260:	f109 0228 	add.w	r2, r9, #40	; 0x28
   12264:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12268:	f109 0301 	add.w	r3, r9, #1
   1226c:	eb02 0901 	add.w	r9, r2, r1
   12270:	f809 5c10 	strb.w	r5, [r9, #-16]
   12274:	fa5f f983 	uxtb.w	r9, r3
   12278:	e74f      	b.n	1211a <cbprintf_package_convert+0x1ea>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1227a:	2000      	movs	r0, #0
   1227c:	e765      	b.n	1214a <cbprintf_package_convert+0x21a>
		uint8_t loc = cpy_str_pos[i];
   1227e:	f81b 300a 	ldrb.w	r3, [fp, sl]
   12282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   12286:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   1228a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1228c:	b1fb      	cbz	r3, 122ce <cbprintf_package_convert+0x39e>
   1228e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   12292:	69ba      	ldr	r2, [r7, #24]
   12294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12296:	2101      	movs	r1, #1
   12298:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   1229c:	4798      	blx	r3
		if (rv < 0) {
   1229e:	2800      	cmp	r0, #0
   122a0:	db1a      	blt.n	122d8 <cbprintf_package_convert+0x3a8>
		out_len += rv;
   122a2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   122a4:	f1b8 0f00 	cmp.w	r8, #0
   122a8:	d106      	bne.n	122b8 <cbprintf_package_convert+0x388>
   122aa:	4648      	mov	r0, r9
   122ac:	f014 fc5e 	bl	26b6c <strlen>
   122b0:	f100 0801 	add.w	r8, r0, #1
   122b4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   122b8:	69ba      	ldr	r2, [r7, #24]
   122ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   122bc:	4641      	mov	r1, r8
   122be:	4648      	mov	r0, r9
   122c0:	4798      	blx	r3
		if (rv < 0) {
   122c2:	2800      	cmp	r0, #0
   122c4:	db08      	blt.n	122d8 <cbprintf_package_convert+0x3a8>
		out_len += rv;
   122c6:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   122c8:	f10b 0b01 	add.w	fp, fp, #1
   122cc:	e774      	b.n	121b8 <cbprintf_package_convert+0x288>
		uint16_t str_len = strl ? strl[i] : 0;
   122ce:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   122d2:	e7de      	b.n	12292 <cbprintf_package_convert+0x362>
   122d4:	4645      	mov	r5, r8
   122d6:	e658      	b.n	11f8a <cbprintf_package_convert+0x5a>
   122d8:	4605      	mov	r5, r0
   122da:	e656      	b.n	11f8a <cbprintf_package_convert+0x5a>
   122dc:	0002a460 	.word	0x0002a460
   122e0:	0002f478 	.word	0x0002f478
   122e4:	0002b85c 	.word	0x0002b85c
   122e8:	0002b903 	.word	0x0002b903
   122ec:	01000005 	.word	0x01000005
   122f0:	0002a8a0 	.word	0x0002a8a0

000122f4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   122f4:	4b01      	ldr	r3, [pc, #4]	; (122fc <__printk_hook_install+0x8>)
   122f6:	6018      	str	r0, [r3, #0]
}
   122f8:	4770      	bx	lr
   122fa:	bf00      	nop
   122fc:	200006a8 	.word	0x200006a8

00012300 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12300:	b530      	push	{r4, r5, lr}
   12302:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12304:	2500      	movs	r5, #0
   12306:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   1230a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1230c:	9500      	str	r5, [sp, #0]
   1230e:	a903      	add	r1, sp, #12
   12310:	4805      	ldr	r0, [pc, #20]	; (12328 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12312:	9505      	str	r5, [sp, #20]
   12314:	f000 f92e 	bl	12574 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12318:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   1231c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1231e:	bfb8      	it	lt
   12320:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12322:	b007      	add	sp, #28
   12324:	bd30      	pop	{r4, r5, pc}
   12326:	bf00      	nop
   12328:	0002520b 	.word	0x0002520b

0001232c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12330:	8b05      	ldrh	r5, [r0, #24]
{
   12332:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12334:	0728      	lsls	r0, r5, #28
{
   12336:	4690      	mov	r8, r2
	if (processing) {
   12338:	d411      	bmi.n	1235e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1233a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1233c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12340:	f040 80cd 	bne.w	124de <process_event+0x1b2>
			evt = process_recheck(mgr);
   12344:	4620      	mov	r0, r4
   12346:	f013 f95e 	bl	25606 <process_recheck>
		}

		if (evt == EVT_NOP) {
   1234a:	b178      	cbz	r0, 1236c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   1234c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1234e:	8b21      	ldrh	r1, [r4, #24]
   12350:	2804      	cmp	r0, #4
   12352:	d811      	bhi.n	12378 <process_event+0x4c>
   12354:	e8df f000 	tbb	[pc, r0]
   12358:	856d10c3 	.word	0x856d10c3
   1235c:	95          	.byte	0x95
   1235d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   1235e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12360:	bf0c      	ite	eq
   12362:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12366:	f045 0520 	orrne.w	r5, r5, #32
   1236a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1236c:	f388 8811 	msr	BASEPRI, r8
   12370:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12378:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1237c:	45aa      	cmp	sl, r5
   1237e:	f000 80a6 	beq.w	124ce <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   12382:	2700      	movs	r7, #0
   12384:	46b9      	mov	r9, r7
   12386:	463e      	mov	r6, r7
   12388:	68a3      	ldr	r3, [r4, #8]
   1238a:	2b00      	cmp	r3, #0
   1238c:	f000 80bd 	beq.w	1250a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12390:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12394:	8321      	strh	r1, [r4, #24]
   12396:	f388 8811 	msr	BASEPRI, r8
   1239a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1239e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   123a0:	2900      	cmp	r1, #0
   123a2:	f000 80bb 	beq.w	1251c <process_event+0x1f0>
	return node->next;
   123a6:	680d      	ldr	r5, [r1, #0]
   123a8:	2900      	cmp	r1, #0
   123aa:	f000 80b7 	beq.w	1251c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   123ae:	f8d1 8004 	ldr.w	r8, [r1, #4]
   123b2:	4633      	mov	r3, r6
   123b4:	4652      	mov	r2, sl
   123b6:	4620      	mov	r0, r4
   123b8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   123ba:	2d00      	cmp	r5, #0
   123bc:	d076      	beq.n	124ac <process_event+0x180>
   123be:	682b      	ldr	r3, [r5, #0]
   123c0:	4629      	mov	r1, r5
   123c2:	461d      	mov	r5, r3
   123c4:	e7f0      	b.n	123a8 <process_event+0x7c>
   123c6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   123ca:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   123cc:	2a01      	cmp	r2, #1
   123ce:	d81b      	bhi.n	12408 <process_event+0xdc>
	list->head = NULL;
   123d0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123d2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   123d6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   123d8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123da:	b289      	uxth	r1, r1
	list->tail = NULL;
   123dc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   123e0:	d109      	bne.n	123f6 <process_event+0xca>
   123e2:	463b      	mov	r3, r7
   123e4:	e003      	b.n	123ee <process_event+0xc2>
				mgr->refs += 1U;
   123e6:	8b62      	ldrh	r2, [r4, #26]
   123e8:	3201      	adds	r2, #1
   123ea:	8362      	strh	r2, [r4, #26]
	return node->next;
   123ec:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   123ee:	2b00      	cmp	r3, #0
   123f0:	d1f9      	bne.n	123e6 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   123f2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   123f6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   123f8:	4620      	mov	r0, r4
   123fa:	f013 f904 	bl	25606 <process_recheck>
   123fe:	2800      	cmp	r0, #0
   12400:	d07b      	beq.n	124fa <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12402:	f041 0120 	orr.w	r1, r1, #32
   12406:	e077      	b.n	124f8 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12408:	2b04      	cmp	r3, #4
   1240a:	d10a      	bne.n	12422 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1240c:	f021 0107 	bic.w	r1, r1, #7
   12410:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12412:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12414:	4620      	mov	r0, r4
   12416:	f013 f8f6 	bl	25606 <process_recheck>
   1241a:	b110      	cbz	r0, 12422 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1241c:	f041 0120 	orr.w	r1, r1, #32
   12420:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12422:	8b21      	ldrh	r1, [r4, #24]
   12424:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12428:	45aa      	cmp	sl, r5
   1242a:	d050      	beq.n	124ce <process_event+0x1a2>
   1242c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   1242e:	46b9      	mov	r9, r7
   12430:	e7aa      	b.n	12388 <process_event+0x5c>
			transit = mgr->transitions->start;
   12432:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12434:	f021 0107 	bic.w	r1, r1, #7
   12438:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   1243c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   1243e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12442:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12444:	d12d      	bne.n	124a2 <process_event+0x176>
		    || (transit != NULL)) {
   12446:	f1b9 0f00 	cmp.w	r9, #0
   1244a:	d040      	beq.n	124ce <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1244c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12450:	8321      	strh	r1, [r4, #24]
   12452:	f388 8811 	msr	BASEPRI, r8
   12456:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1245a:	493a      	ldr	r1, [pc, #232]	; (12544 <process_event+0x218>)
   1245c:	4620      	mov	r0, r4
   1245e:	47c8      	blx	r9
   12460:	e029      	b.n	124b6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12462:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   12466:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12468:	f041 0104 	orr.w	r1, r1, #4
   1246c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1246e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   12470:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12474:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12476:	d0e6      	beq.n	12446 <process_event+0x11a>
   12478:	2700      	movs	r7, #0
		res = 0;
   1247a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1247c:	f04f 0a04 	mov.w	sl, #4
   12480:	e782      	b.n	12388 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12482:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   12486:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12488:	f041 0105 	orr.w	r1, r1, #5
   1248c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1248e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   12490:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   12494:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   12496:	d0d6      	beq.n	12446 <process_event+0x11a>
   12498:	2700      	movs	r7, #0
		res = 0;
   1249a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1249c:	f04f 0a05 	mov.w	sl, #5
   124a0:	e772      	b.n	12388 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   124a2:	2700      	movs	r7, #0
		res = 0;
   124a4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   124a6:	f04f 0a06 	mov.w	sl, #6
   124aa:	e76d      	b.n	12388 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   124ac:	462b      	mov	r3, r5
   124ae:	e787      	b.n	123c0 <process_event+0x94>
			if (transit != NULL) {
   124b0:	f1b9 0f00 	cmp.w	r9, #0
   124b4:	d1d1      	bne.n	1245a <process_event+0x12e>
	__asm__ volatile(
   124b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   124ba:	f3ef 8811 	mrs	r8, BASEPRI
   124be:	f383 8812 	msr	BASEPRI_MAX, r3
   124c2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   124c6:	8b23      	ldrh	r3, [r4, #24]
   124c8:	f023 0308 	bic.w	r3, r3, #8
   124cc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   124ce:	8b25      	ldrh	r5, [r4, #24]
   124d0:	06ea      	lsls	r2, r5, #27
   124d2:	d52e      	bpl.n	12532 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   124d4:	f025 0310 	bic.w	r3, r5, #16
   124d8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   124da:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   124de:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   124e0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   124e2:	2e00      	cmp	r6, #0
   124e4:	f6bf af6f 	bge.w	123c6 <process_event+0x9a>
	list->head = NULL;
   124e8:	2300      	movs	r3, #0
		*clients = mgr->clients;
   124ea:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   124ec:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124f0:	f021 0107 	bic.w	r1, r1, #7
   124f4:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124f8:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   124fa:	8b21      	ldrh	r1, [r4, #24]
   124fc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12500:	45aa      	cmp	sl, r5
   12502:	f04f 0900 	mov.w	r9, #0
   12506:	f47f af3f 	bne.w	12388 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   1250a:	2f00      	cmp	r7, #0
   1250c:	d09b      	beq.n	12446 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1250e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12512:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   12514:	f388 8811 	msr	BASEPRI, r8
   12518:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   1251c:	2f00      	cmp	r7, #0
   1251e:	d0c7      	beq.n	124b0 <process_event+0x184>
	return node->next;
   12520:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   12522:	4639      	mov	r1, r7
   12524:	4633      	mov	r3, r6
   12526:	4652      	mov	r2, sl
   12528:	4620      	mov	r0, r4
   1252a:	f013 f898 	bl	2565e <notify_one>
	list->head = node;
   1252e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   12530:	e7f4      	b.n	1251c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12532:	06ab      	lsls	r3, r5, #26
   12534:	f57f af1a 	bpl.w	1236c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12538:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1253c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1253e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   12542:	e6ff      	b.n	12344 <process_event+0x18>
   12544:	0002568b 	.word	0x0002568b

00012548 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   12548:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1254a:	4c09      	ldr	r4, [pc, #36]	; (12570 <crc8_ccitt+0x28>)
   1254c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   1254e:	4291      	cmp	r1, r2
   12550:	d100      	bne.n	12554 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   12552:	bd10      	pop	{r4, pc}
		val ^= p[i];
   12554:	f811 3b01 	ldrb.w	r3, [r1], #1
   12558:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1255a:	0903      	lsrs	r3, r0, #4
   1255c:	0100      	lsls	r0, r0, #4
   1255e:	5ce3      	ldrb	r3, [r4, r3]
   12560:	b2c0      	uxtb	r0, r0
   12562:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12564:	0918      	lsrs	r0, r3, #4
   12566:	011b      	lsls	r3, r3, #4
   12568:	5c20      	ldrb	r0, [r4, r0]
   1256a:	b2db      	uxtb	r3, r3
   1256c:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   1256e:	e7ee      	b.n	1254e <crc8_ccitt+0x6>
   12570:	0002b92d 	.word	0x0002b92d

00012574 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12578:	4681      	mov	r9, r0
   1257a:	b095      	sub	sp, #84	; 0x54
   1257c:	468b      	mov	fp, r1
   1257e:	4617      	mov	r7, r2
   12580:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12582:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12584:	7838      	ldrb	r0, [r7, #0]
   12586:	b908      	cbnz	r0, 1258c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   12588:	4628      	mov	r0, r5
   1258a:	e358      	b.n	12c3e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   1258c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   1258e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12590:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   12592:	d006      	beq.n	125a2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12594:	4659      	mov	r1, fp
   12596:	47c8      	blx	r9
   12598:	2800      	cmp	r0, #0
   1259a:	f2c0 8350 	blt.w	12c3e <z_cbvprintf_impl+0x6ca>
   1259e:	3501      	adds	r5, #1
		if (bps == NULL) {
   125a0:	e1fb      	b.n	1299a <z_cbvprintf_impl+0x426>
		} state = {
   125a2:	2218      	movs	r2, #24
   125a4:	2100      	movs	r1, #0
   125a6:	a80e      	add	r0, sp, #56	; 0x38
   125a8:	f014 fb2b 	bl	26c02 <memset>
	if (*sp == '%') {
   125ac:	787b      	ldrb	r3, [r7, #1]
   125ae:	2b25      	cmp	r3, #37	; 0x25
   125b0:	d07d      	beq.n	126ae <z_cbvprintf_impl+0x13a>
   125b2:	2300      	movs	r3, #0
   125b4:	1c78      	adds	r0, r7, #1
   125b6:	4698      	mov	r8, r3
   125b8:	469e      	mov	lr, r3
   125ba:	469c      	mov	ip, r3
   125bc:	461e      	mov	r6, r3
   125be:	4601      	mov	r1, r0
		switch (*sp) {
   125c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   125c4:	2a2b      	cmp	r2, #43	; 0x2b
   125c6:	f000 80a1 	beq.w	1270c <z_cbvprintf_impl+0x198>
   125ca:	f200 8098 	bhi.w	126fe <z_cbvprintf_impl+0x18a>
   125ce:	2a20      	cmp	r2, #32
   125d0:	f000 809f 	beq.w	12712 <z_cbvprintf_impl+0x19e>
   125d4:	2a23      	cmp	r2, #35	; 0x23
   125d6:	f000 809f 	beq.w	12718 <z_cbvprintf_impl+0x1a4>
   125da:	b12b      	cbz	r3, 125e8 <z_cbvprintf_impl+0x74>
   125dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   125e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   125e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   125e8:	f1b8 0f00 	cmp.w	r8, #0
   125ec:	d005      	beq.n	125fa <z_cbvprintf_impl+0x86>
   125ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   125f2:	f043 0320 	orr.w	r3, r3, #32
   125f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   125fa:	f1be 0f00 	cmp.w	lr, #0
   125fe:	d005      	beq.n	1260c <z_cbvprintf_impl+0x98>
   12600:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12604:	f043 0310 	orr.w	r3, r3, #16
   12608:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1260c:	f1bc 0f00 	cmp.w	ip, #0
   12610:	d005      	beq.n	1261e <z_cbvprintf_impl+0xaa>
   12612:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12616:	f043 0308 	orr.w	r3, r3, #8
   1261a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1261e:	b12e      	cbz	r6, 1262c <z_cbvprintf_impl+0xb8>
   12620:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12624:	f043 0304 	orr.w	r3, r3, #4
   12628:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   1262c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12630:	f003 0044 	and.w	r0, r3, #68	; 0x44
   12634:	2844      	cmp	r0, #68	; 0x44
   12636:	d103      	bne.n	12640 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12638:	f36f 1386 	bfc	r3, #6, #1
   1263c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12640:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12644:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   12646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1264a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   1264e:	d17f      	bne.n	12750 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12650:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12654:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   12658:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1265a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   1265e:	781a      	ldrb	r2, [r3, #0]
   12660:	2a2e      	cmp	r2, #46	; 0x2e
   12662:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12666:	bf0c      	ite	eq
   12668:	2101      	moveq	r1, #1
   1266a:	2100      	movne	r1, #0
   1266c:	f361 0241 	bfi	r2, r1, #1, #1
   12670:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   12674:	d178      	bne.n	12768 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   12676:	785a      	ldrb	r2, [r3, #1]
   12678:	2a2a      	cmp	r2, #42	; 0x2a
   1267a:	d06e      	beq.n	1275a <z_cbvprintf_impl+0x1e6>
	++sp;
   1267c:	3301      	adds	r3, #1
	size_t val = 0;
   1267e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12680:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12684:	4619      	mov	r1, r3
   12686:	f811 0b01 	ldrb.w	r0, [r1], #1
   1268a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1268e:	2e09      	cmp	r6, #9
   12690:	f240 8095 	bls.w	127be <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12694:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12698:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1269a:	f3c1 0040 	ubfx	r0, r1, #1, #1
   1269e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   126a2:	460a      	mov	r2, r1
   126a4:	f360 0241 	bfi	r2, r0, #1, #1
   126a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   126ac:	e05c      	b.n	12768 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   126ae:	1cba      	adds	r2, r7, #2
   126b0:	9203      	str	r2, [sp, #12]
   126b2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   126b6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   126ba:	07da      	lsls	r2, r3, #31
   126bc:	f140 812e 	bpl.w	1291c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   126c0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   126c4:	f1b8 0f00 	cmp.w	r8, #0
   126c8:	da07      	bge.n	126da <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   126ca:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   126ce:	f042 0204 	orr.w	r2, r2, #4
   126d2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   126d6:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   126da:	075e      	lsls	r6, r3, #29
   126dc:	f140 8127 	bpl.w	1292e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   126e0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   126e4:	f1ba 0f00 	cmp.w	sl, #0
   126e8:	f280 8126 	bge.w	12938 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   126ec:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   126f0:	f36f 0341 	bfc	r3, #1, #1
   126f4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   126f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   126fc:	e11c      	b.n	12938 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   126fe:	2a2d      	cmp	r2, #45	; 0x2d
   12700:	d00d      	beq.n	1271e <z_cbvprintf_impl+0x1aa>
   12702:	2a30      	cmp	r2, #48	; 0x30
   12704:	f47f af69 	bne.w	125da <z_cbvprintf_impl+0x66>
   12708:	2301      	movs	r3, #1
	} while (loop);
   1270a:	e758      	b.n	125be <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   1270c:	f04f 0c01 	mov.w	ip, #1
   12710:	e755      	b.n	125be <z_cbvprintf_impl+0x4a>
   12712:	f04f 0e01 	mov.w	lr, #1
   12716:	e752      	b.n	125be <z_cbvprintf_impl+0x4a>
   12718:	f04f 0801 	mov.w	r8, #1
   1271c:	e74f      	b.n	125be <z_cbvprintf_impl+0x4a>
   1271e:	2601      	movs	r6, #1
   12720:	e74d      	b.n	125be <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12722:	fb0e 6202 	mla	r2, lr, r2, r6
   12726:	3a30      	subs	r2, #48	; 0x30
   12728:	4603      	mov	r3, r0
   1272a:	4618      	mov	r0, r3
   1272c:	f810 6b01 	ldrb.w	r6, [r0], #1
   12730:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   12734:	f1bc 0f09 	cmp.w	ip, #9
   12738:	d9f3      	bls.n	12722 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   1273a:	4299      	cmp	r1, r3
   1273c:	d08f      	beq.n	1265e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1273e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   12742:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   12744:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12746:	f362 0141 	bfi	r1, r2, #1, #1
   1274a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   1274e:	e786      	b.n	1265e <z_cbvprintf_impl+0xea>
   12750:	460b      	mov	r3, r1
	size_t val = 0;
   12752:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12754:	f04f 0e0a 	mov.w	lr, #10
   12758:	e7e7      	b.n	1272a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   1275a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1275e:	f042 0204 	orr.w	r2, r2, #4
   12762:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   12766:	3302      	adds	r3, #2
	switch (*sp) {
   12768:	781a      	ldrb	r2, [r3, #0]
   1276a:	2a6c      	cmp	r2, #108	; 0x6c
   1276c:	d047      	beq.n	127fe <z_cbvprintf_impl+0x28a>
   1276e:	d82b      	bhi.n	127c8 <z_cbvprintf_impl+0x254>
   12770:	2a68      	cmp	r2, #104	; 0x68
   12772:	d031      	beq.n	127d8 <z_cbvprintf_impl+0x264>
   12774:	2a6a      	cmp	r2, #106	; 0x6a
   12776:	d04b      	beq.n	12810 <z_cbvprintf_impl+0x29c>
   12778:	2a4c      	cmp	r2, #76	; 0x4c
   1277a:	d051      	beq.n	12820 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   1277c:	461a      	mov	r2, r3
   1277e:	f812 3b01 	ldrb.w	r3, [r2], #1
   12782:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   12784:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12786:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   1278a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   1278e:	f200 80be 	bhi.w	1290e <z_cbvprintf_impl+0x39a>
   12792:	2b6d      	cmp	r3, #109	; 0x6d
   12794:	d851      	bhi.n	1283a <z_cbvprintf_impl+0x2c6>
   12796:	2b69      	cmp	r3, #105	; 0x69
   12798:	f200 80b9 	bhi.w	1290e <z_cbvprintf_impl+0x39a>
   1279c:	2b57      	cmp	r3, #87	; 0x57
   1279e:	d867      	bhi.n	12870 <z_cbvprintf_impl+0x2fc>
   127a0:	2b41      	cmp	r3, #65	; 0x41
   127a2:	d003      	beq.n	127ac <z_cbvprintf_impl+0x238>
   127a4:	3b45      	subs	r3, #69	; 0x45
   127a6:	2b02      	cmp	r3, #2
   127a8:	f200 80b1 	bhi.w	1290e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   127ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   127b0:	2204      	movs	r2, #4
   127b2:	f362 0302 	bfi	r3, r2, #0, #3
   127b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   127ba:	2301      	movs	r3, #1
			break;
   127bc:	e073      	b.n	128a6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   127be:	fb0c 0202 	mla	r2, ip, r2, r0
   127c2:	3a30      	subs	r2, #48	; 0x30
   127c4:	460b      	mov	r3, r1
   127c6:	e75d      	b.n	12684 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   127c8:	2a74      	cmp	r2, #116	; 0x74
   127ca:	d025      	beq.n	12818 <z_cbvprintf_impl+0x2a4>
   127cc:	2a7a      	cmp	r2, #122	; 0x7a
   127ce:	d1d5      	bne.n	1277c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   127d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   127d4:	2106      	movs	r1, #6
   127d6:	e00c      	b.n	127f2 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   127d8:	785a      	ldrb	r2, [r3, #1]
   127da:	2a68      	cmp	r2, #104	; 0x68
   127dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   127e0:	d106      	bne.n	127f0 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   127e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   127e4:	f361 02c6 	bfi	r2, r1, #3, #4
   127e8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   127ec:	3302      	adds	r3, #2
   127ee:	e7c5      	b.n	1277c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   127f0:	2102      	movs	r1, #2
   127f2:	f361 02c6 	bfi	r2, r1, #3, #4
   127f6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   127fa:	3301      	adds	r3, #1
   127fc:	e7be      	b.n	1277c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   127fe:	785a      	ldrb	r2, [r3, #1]
   12800:	2a6c      	cmp	r2, #108	; 0x6c
   12802:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12806:	d101      	bne.n	1280c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12808:	2104      	movs	r1, #4
   1280a:	e7eb      	b.n	127e4 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   1280c:	2103      	movs	r1, #3
   1280e:	e7f0      	b.n	127f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12810:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12814:	2105      	movs	r1, #5
   12816:	e7ec      	b.n	127f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12818:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1281c:	2107      	movs	r1, #7
   1281e:	e7e8      	b.n	127f2 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12820:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12824:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12828:	f022 0202 	bic.w	r2, r2, #2
   1282c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12830:	f042 0202 	orr.w	r2, r2, #2
   12834:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12838:	e7df      	b.n	127fa <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   1283a:	3b6e      	subs	r3, #110	; 0x6e
   1283c:	b2d9      	uxtb	r1, r3
   1283e:	2301      	movs	r3, #1
   12840:	408b      	lsls	r3, r1
   12842:	f240 4182 	movw	r1, #1154	; 0x482
   12846:	420b      	tst	r3, r1
   12848:	d137      	bne.n	128ba <z_cbvprintf_impl+0x346>
   1284a:	f013 0f24 	tst.w	r3, #36	; 0x24
   1284e:	d151      	bne.n	128f4 <z_cbvprintf_impl+0x380>
   12850:	07d8      	lsls	r0, r3, #31
   12852:	d55c      	bpl.n	1290e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   12854:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12858:	2103      	movs	r1, #3
   1285a:	f361 0302 	bfi	r3, r1, #0, #3
   1285e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12862:	f002 0378 	and.w	r3, r2, #120	; 0x78
   12866:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1286a:	424b      	negs	r3, r1
   1286c:	414b      	adcs	r3, r1
   1286e:	e01a      	b.n	128a6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12870:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   12874:	b2c9      	uxtb	r1, r1
   12876:	2001      	movs	r0, #1
   12878:	fa00 f101 	lsl.w	r1, r0, r1
   1287c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12880:	d194      	bne.n	127ac <z_cbvprintf_impl+0x238>
   12882:	f640 0601 	movw	r6, #2049	; 0x801
   12886:	4231      	tst	r1, r6
   12888:	d11d      	bne.n	128c6 <z_cbvprintf_impl+0x352>
   1288a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1288e:	d03e      	beq.n	1290e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12890:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12894:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12898:	f002 0278 	and.w	r2, r2, #120	; 0x78
   1289c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   1289e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   128a2:	d034      	beq.n	1290e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   128a4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   128a6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   128aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
   128ae:	430b      	orrs	r3, r1
   128b0:	f363 0241 	bfi	r2, r3, #1, #1
   128b4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   128b8:	e6fd      	b.n	126b6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   128ba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   128be:	2102      	movs	r1, #2
   128c0:	f361 0302 	bfi	r3, r1, #0, #3
   128c4:	e7e8      	b.n	12898 <z_cbvprintf_impl+0x324>
   128c6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   128ca:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   128cc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   128d0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   128d4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   128d6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   128da:	bf02      	ittt	eq
   128dc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   128e0:	f041 0101 	orreq.w	r1, r1, #1
   128e4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   128e8:	2b63      	cmp	r3, #99	; 0x63
   128ea:	d1db      	bne.n	128a4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   128ec:	1e13      	subs	r3, r2, #0
   128ee:	bf18      	it	ne
   128f0:	2301      	movne	r3, #1
   128f2:	e7d8      	b.n	128a6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   128f4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   128f8:	2103      	movs	r1, #3
   128fa:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   128fe:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12902:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12906:	bf14      	ite	ne
   12908:	2301      	movne	r3, #1
   1290a:	2300      	moveq	r3, #0
   1290c:	e7cb      	b.n	128a6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   1290e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12912:	f043 0301 	orr.w	r3, r3, #1
   12916:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   1291a:	e7c3      	b.n	128a4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   1291c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12920:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12922:	bfb4      	ite	lt
   12924:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12928:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
   1292c:	e6d5      	b.n	126da <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   1292e:	0798      	lsls	r0, r3, #30
   12930:	f57f aee2 	bpl.w	126f8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   12934:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   12938:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   1293c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1293e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   12942:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   12946:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1294a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1294c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12950:	d133      	bne.n	129ba <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   12952:	1ecb      	subs	r3, r1, #3
   12954:	2b04      	cmp	r3, #4
   12956:	d804      	bhi.n	12962 <z_cbvprintf_impl+0x3ee>
   12958:	e8df f003 	tbb	[pc, r3]
   1295c:	21464621 	.word	0x21464621
   12960:	21          	.byte	0x21
   12961:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12962:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   12964:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   12966:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1296a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   1296e:	d11c      	bne.n	129aa <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   12970:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   12974:	17da      	asrs	r2, r3, #31
   12976:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   1297a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   1297c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12980:	f013 0603 	ands.w	r6, r3, #3
   12984:	d050      	beq.n	12a28 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   12986:	9b03      	ldr	r3, [sp, #12]
   12988:	463a      	mov	r2, r7
   1298a:	4659      	mov	r1, fp
   1298c:	4648      	mov	r0, r9
   1298e:	f012 ff68 	bl	25862 <outs>
   12992:	2800      	cmp	r0, #0
   12994:	f2c0 8153 	blt.w	12c3e <z_cbvprintf_impl+0x6ca>
   12998:	4405      	add	r5, r0
			continue;
   1299a:	9f03      	ldr	r7, [sp, #12]
   1299c:	e5f2      	b.n	12584 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1299e:	f854 3b04 	ldr.w	r3, [r4], #4
   129a2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   129a4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   129a8:	e7e8      	b.n	1297c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   129aa:	2902      	cmp	r1, #2
   129ac:	d1e5      	bne.n	1297a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   129ae:	b21a      	sxth	r2, r3
   129b0:	f343 33c0 	sbfx	r3, r3, #15, #1
   129b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   129b8:	e7df      	b.n	1297a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   129ba:	2b02      	cmp	r3, #2
   129bc:	d124      	bne.n	12a08 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   129be:	1ecb      	subs	r3, r1, #3
   129c0:	2b04      	cmp	r3, #4
   129c2:	d804      	bhi.n	129ce <z_cbvprintf_impl+0x45a>
   129c4:	e8df f003 	tbb	[pc, r3]
   129c8:	18101018 	.word	0x18101018
   129cc:	18          	.byte	0x18
   129cd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   129ce:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   129d0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   129d4:	f04f 0200 	mov.w	r2, #0
   129d8:	d014      	beq.n	12a04 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   129da:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   129dc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   129e0:	d1cc      	bne.n	1297c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   129e2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   129e4:	930e      	str	r3, [sp, #56]	; 0x38
   129e6:	e7c9      	b.n	1297c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   129e8:	3407      	adds	r4, #7
   129ea:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   129ee:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   129f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   129f6:	e7c1      	b.n	1297c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   129f8:	f854 3b04 	ldr.w	r3, [r4], #4
   129fc:	930e      	str	r3, [sp, #56]	; 0x38
   129fe:	2300      	movs	r3, #0
   12a00:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   12a02:	e7bb      	b.n	1297c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12a04:	b2db      	uxtb	r3, r3
   12a06:	e7cd      	b.n	129a4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12a08:	2b04      	cmp	r3, #4
   12a0a:	d108      	bne.n	12a1e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   12a0c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12a0e:	f024 0407 	bic.w	r4, r4, #7
   12a12:	e9d4 2300 	ldrd	r2, r3, [r4]
   12a16:	3408      	adds	r4, #8
   12a18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12a1c:	e7ae      	b.n	1297c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12a1e:	2b03      	cmp	r3, #3
   12a20:	d1ac      	bne.n	1297c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   12a22:	f854 3b04 	ldr.w	r3, [r4], #4
   12a26:	e7dd      	b.n	129e4 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12a28:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12a2c:	2878      	cmp	r0, #120	; 0x78
   12a2e:	d8b4      	bhi.n	1299a <z_cbvprintf_impl+0x426>
   12a30:	2862      	cmp	r0, #98	; 0x62
   12a32:	d81c      	bhi.n	12a6e <z_cbvprintf_impl+0x4fa>
   12a34:	2825      	cmp	r0, #37	; 0x25
   12a36:	f43f adad 	beq.w	12594 <z_cbvprintf_impl+0x20>
   12a3a:	2858      	cmp	r0, #88	; 0x58
   12a3c:	d1ad      	bne.n	1299a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12a3e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12a42:	9300      	str	r3, [sp, #0]
   12a44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12a48:	ab08      	add	r3, sp, #32
   12a4a:	aa10      	add	r2, sp, #64	; 0x40
   12a4c:	f012 fec3 	bl	257d6 <encode_uint>
			if (precision >= 0) {
   12a50:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   12a54:	4607      	mov	r7, r0
			if (precision >= 0) {
   12a56:	f280 809a 	bge.w	12b8e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   12a5a:	2f00      	cmp	r7, #0
   12a5c:	d09d      	beq.n	1299a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12a5e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12a62:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   12a64:	2e00      	cmp	r6, #0
   12a66:	f000 80c1 	beq.w	12bec <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   12a6a:	3001      	adds	r0, #1
   12a6c:	e0be      	b.n	12bec <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   12a6e:	3863      	subs	r0, #99	; 0x63
   12a70:	2815      	cmp	r0, #21
   12a72:	d892      	bhi.n	1299a <z_cbvprintf_impl+0x426>
   12a74:	a201      	add	r2, pc, #4	; (adr r2, 12a7c <z_cbvprintf_impl+0x508>)
   12a76:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12a7a:	bf00      	nop
   12a7c:	00012b51 	.word	0x00012b51
   12a80:	00012b63 	.word	0x00012b63
   12a84:	0001299b 	.word	0x0001299b
   12a88:	0001299b 	.word	0x0001299b
   12a8c:	0001299b 	.word	0x0001299b
   12a90:	0001299b 	.word	0x0001299b
   12a94:	00012b63 	.word	0x00012b63
   12a98:	0001299b 	.word	0x0001299b
   12a9c:	0001299b 	.word	0x0001299b
   12aa0:	0001299b 	.word	0x0001299b
   12aa4:	0001299b 	.word	0x0001299b
   12aa8:	00012bf1 	.word	0x00012bf1
   12aac:	00012b89 	.word	0x00012b89
   12ab0:	00012baf 	.word	0x00012baf
   12ab4:	0001299b 	.word	0x0001299b
   12ab8:	0001299b 	.word	0x0001299b
   12abc:	00012ad5 	.word	0x00012ad5
   12ac0:	0001299b 	.word	0x0001299b
   12ac4:	00012b89 	.word	0x00012b89
   12ac8:	0001299b 	.word	0x0001299b
   12acc:	0001299b 	.word	0x0001299b
   12ad0:	00012b89 	.word	0x00012b89
			if (precision >= 0) {
   12ad4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12ad8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   12ada:	db35      	blt.n	12b48 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   12adc:	4651      	mov	r1, sl
   12ade:	4638      	mov	r0, r7
   12ae0:	f014 f84b 	bl	26b7a <strnlen>
			bpe = bps + len;
   12ae4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12ae8:	2f00      	cmp	r7, #0
   12aea:	f43f af56 	beq.w	1299a <z_cbvprintf_impl+0x426>
		char sign = 0;
   12aee:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12af0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12af4:	f013 0210 	ands.w	r2, r3, #16
   12af8:	9205      	str	r2, [sp, #20]
   12afa:	f000 8093 	beq.w	12c24 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   12afe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12b00:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12b02:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12b04:	bf48      	it	mi
   12b06:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12b08:	9204      	str	r2, [sp, #16]
   12b0a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   12b0c:	bf48      	it	mi
   12b0e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12b10:	f1b8 0f00 	cmp.w	r8, #0
   12b14:	f340 80a0 	ble.w	12c58 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12b18:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   12b1c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12b20:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12b24:	0750      	lsls	r0, r2, #29
   12b26:	9306      	str	r3, [sp, #24]
   12b28:	f100 8096 	bmi.w	12c58 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12b2c:	0651      	lsls	r1, r2, #25
   12b2e:	f140 8089 	bpl.w	12c44 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   12b32:	b13e      	cbz	r6, 12b44 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   12b34:	4659      	mov	r1, fp
   12b36:	4630      	mov	r0, r6
   12b38:	47c8      	blx	r9
   12b3a:	2800      	cmp	r0, #0
   12b3c:	db7f      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12b3e:	9b06      	ldr	r3, [sp, #24]
   12b40:	3501      	adds	r5, #1
   12b42:	461e      	mov	r6, r3
					pad = '0';
   12b44:	2230      	movs	r2, #48	; 0x30
   12b46:	e07e      	b.n	12c46 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12b48:	4638      	mov	r0, r7
   12b4a:	f014 f80f 	bl	26b6c <strlen>
   12b4e:	e7c9      	b.n	12ae4 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b52:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   12b56:	2600      	movs	r6, #0
			bps = buf;
   12b58:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12b5a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12b5e:	2001      	movs	r0, #1
   12b60:	e7c6      	b.n	12af0 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   12b62:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   12b64:	bf5c      	itt	pl
   12b66:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12b6a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12b6c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12b70:	bf48      	it	mi
   12b72:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   12b74:	2b00      	cmp	r3, #0
   12b76:	f6bf af62 	bge.w	12a3e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12b7a:	4252      	negs	r2, r2
   12b7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12b80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   12b84:	262d      	movs	r6, #45	; 0x2d
   12b86:	e75a      	b.n	12a3e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12b88:	2600      	movs	r6, #0
   12b8a:	e758      	b.n	12a3e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12b8c:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12b8e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12b92:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12b96:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12b98:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12b9c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12b9e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12ba2:	f67f af5a 	bls.w	12a5a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12ba6:	ebaa 0303 	sub.w	r3, sl, r3
   12baa:	9311      	str	r3, [sp, #68]	; 0x44
   12bac:	e755      	b.n	12a5a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12bae:	980e      	ldr	r0, [sp, #56]	; 0x38
   12bb0:	b390      	cbz	r0, 12c18 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12bb2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12bb6:	9300      	str	r3, [sp, #0]
   12bb8:	aa10      	add	r2, sp, #64	; 0x40
   12bba:	ab08      	add	r3, sp, #32
   12bbc:	2100      	movs	r1, #0
   12bbe:	f012 fe0a 	bl	257d6 <encode_uint>
				conv->altform_0c = true;
   12bc2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   12bc6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12bca:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12bce:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   12bd2:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12bd6:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12bd8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   12bdc:	dad6      	bge.n	12b8c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   12bde:	2800      	cmp	r0, #0
   12be0:	f43f aedb 	beq.w	1299a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12be4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12be8:	1a18      	subs	r0, r3, r0
		char sign = 0;
   12bea:	2600      	movs	r6, #0
   12bec:	469a      	mov	sl, r3
   12bee:	e77f      	b.n	12af0 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   12bf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   12bf2:	2907      	cmp	r1, #7
   12bf4:	f63f aed1 	bhi.w	1299a <z_cbvprintf_impl+0x426>
   12bf8:	e8df f001 	tbb	[pc, r1]
   12bfc:	0c06040c 	.word	0x0c06040c
   12c00:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12c04:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   12c06:	e6c8      	b.n	1299a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   12c08:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   12c0a:	e6c6      	b.n	1299a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   12c0c:	17ea      	asrs	r2, r5, #31
   12c0e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   12c12:	e6c2      	b.n	1299a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12c14:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   12c16:	e6c0      	b.n	1299a <z_cbvprintf_impl+0x426>
   12c18:	4f2e      	ldr	r7, [pc, #184]	; (12cd4 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   12c1a:	4606      	mov	r6, r0
			bpe = bps + 5;
   12c1c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   12c20:	2005      	movs	r0, #5
   12c22:	e765      	b.n	12af0 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   12c24:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   12c26:	bf48      	it	mi
   12c28:	3001      	addmi	r0, #1
   12c2a:	e769      	b.n	12b00 <z_cbvprintf_impl+0x58c>
   12c2c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   12c2e:	4610      	mov	r0, r2
   12c30:	9206      	str	r2, [sp, #24]
   12c32:	4659      	mov	r1, fp
   12c34:	47c8      	blx	r9
   12c36:	2800      	cmp	r0, #0
   12c38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   12c3c:	da04      	bge.n	12c48 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   12c3e:	b015      	add	sp, #84	; 0x54
   12c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   12c44:	2220      	movs	r2, #32
					pad = '0';
   12c46:	4643      	mov	r3, r8
				while (width-- > 0) {
   12c48:	4619      	mov	r1, r3
   12c4a:	2900      	cmp	r1, #0
   12c4c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   12c50:	dcec      	bgt.n	12c2c <z_cbvprintf_impl+0x6b8>
   12c52:	4445      	add	r5, r8
   12c54:	1a6d      	subs	r5, r5, r1
   12c56:	4698      	mov	r8, r3
		if (sign != 0) {
   12c58:	b12e      	cbz	r6, 12c66 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   12c5a:	4659      	mov	r1, fp
   12c5c:	4630      	mov	r0, r6
   12c5e:	47c8      	blx	r9
   12c60:	2800      	cmp	r0, #0
   12c62:	dbec      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12c64:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   12c66:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12c6a:	06da      	lsls	r2, r3, #27
   12c6c:	d401      	bmi.n	12c72 <z_cbvprintf_impl+0x6fe>
   12c6e:	071b      	lsls	r3, r3, #28
   12c70:	d505      	bpl.n	12c7e <z_cbvprintf_impl+0x70a>
				OUTC('0');
   12c72:	4659      	mov	r1, fp
   12c74:	2030      	movs	r0, #48	; 0x30
   12c76:	47c8      	blx	r9
   12c78:	2800      	cmp	r0, #0
   12c7a:	dbe0      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12c7c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12c7e:	9b05      	ldr	r3, [sp, #20]
   12c80:	b133      	cbz	r3, 12c90 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   12c82:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12c86:	4659      	mov	r1, fp
   12c88:	47c8      	blx	r9
   12c8a:	2800      	cmp	r0, #0
   12c8c:	dbd7      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12c8e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12c90:	9e04      	ldr	r6, [sp, #16]
   12c92:	442e      	add	r6, r5
   12c94:	e005      	b.n	12ca2 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   12c96:	4659      	mov	r1, fp
   12c98:	2030      	movs	r0, #48	; 0x30
   12c9a:	47c8      	blx	r9
   12c9c:	2800      	cmp	r0, #0
   12c9e:	dbce      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12ca0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12ca2:	1b73      	subs	r3, r6, r5
   12ca4:	2b00      	cmp	r3, #0
   12ca6:	dcf6      	bgt.n	12c96 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   12ca8:	4653      	mov	r3, sl
   12caa:	463a      	mov	r2, r7
   12cac:	4659      	mov	r1, fp
   12cae:	4648      	mov	r0, r9
   12cb0:	f012 fdd7 	bl	25862 <outs>
   12cb4:	2800      	cmp	r0, #0
   12cb6:	dbc2      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12cb8:	4405      	add	r5, r0
		while (width > 0) {
   12cba:	44a8      	add	r8, r5
   12cbc:	eba8 0305 	sub.w	r3, r8, r5
   12cc0:	2b00      	cmp	r3, #0
   12cc2:	f77f ae6a 	ble.w	1299a <z_cbvprintf_impl+0x426>
			OUTC(' ');
   12cc6:	4659      	mov	r1, fp
   12cc8:	2020      	movs	r0, #32
   12cca:	47c8      	blx	r9
   12ccc:	2800      	cmp	r0, #0
   12cce:	dbb6      	blt.n	12c3e <z_cbvprintf_impl+0x6ca>
   12cd0:	3501      	adds	r5, #1
			--width;
   12cd2:	e7f3      	b.n	12cbc <z_cbvprintf_impl+0x748>
   12cd4:	0002b93d 	.word	0x0002b93d

00012cd8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12cd8:	f00f bc8c 	b.w	225f4 <SystemInit>

00012cdc <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   12cdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12ce0:	460f      	mov	r7, r1
   12ce2:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12ce4:	2108      	movs	r1, #8
   12ce6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   12ce8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 12d3c <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12cec:	f013 f8c2 	bl	25e74 <nvs_al_size.isra.0>
	*addr -= ate_size;
   12cf0:	683c      	ldr	r4, [r7, #0]
   12cf2:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12cf4:	4680      	mov	r8, r0
	*addr -= ate_size;
   12cf6:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   12cf8:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   12cfc:	42ac      	cmp	r4, r5
   12cfe:	d803      	bhi.n	12d08 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   12d00:	2000      	movs	r0, #0
}
   12d02:	b003      	add	sp, #12
   12d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12d08:	2308      	movs	r3, #8
   12d0a:	466a      	mov	r2, sp
   12d0c:	4621      	mov	r1, r4
   12d0e:	4630      	mov	r0, r6
   12d10:	f013 f820 	bl	25d54 <nvs_flash_rd>
		if (rc) {
   12d14:	2800      	cmp	r0, #0
   12d16:	d1f4      	bne.n	12d02 <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   12d18:	4669      	mov	r1, sp
   12d1a:	4630      	mov	r0, r6
   12d1c:	f013 f8b4 	bl	25e88 <nvs_ate_valid>
   12d20:	b140      	cbz	r0, 12d34 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   12d22:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   12d26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   12d2a:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   12d2c:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   12d30:	4413      	add	r3, r2
   12d32:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   12d34:	eba4 0408 	sub.w	r4, r4, r8
   12d38:	e7e0      	b.n	12cfc <nvs_recover_last_ate+0x20>
   12d3a:	bf00      	nop
   12d3c:	ffff0000 	.word	0xffff0000

00012d40 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   12d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d44:	b089      	sub	sp, #36	; 0x24
   12d46:	4604      	mov	r4, r0
   12d48:	af00      	add	r7, sp, #0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   12d4a:	f100 0814 	add.w	r8, r0, #20
	return z_impl_k_mutex_init(mutex);
   12d4e:	4640      	mov	r0, r8
   12d50:	f016 fed1 	bl	29af6 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   12d54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   12d56:	6883      	ldr	r3, [r0, #8]
   12d58:	68db      	ldr	r3, [r3, #12]
   12d5a:	4798      	blx	r3
   12d5c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   12d5e:	b9b0      	cbnz	r0, 12d8e <nvs_mount+0x4e>
		LOG_ERR("Could not obtain flash parameters");
   12d60:	466c      	mov	r4, sp
   12d62:	b088      	sub	sp, #32
   12d64:	466a      	mov	r2, sp
   12d66:	4b97      	ldr	r3, [pc, #604]	; (12fc4 <nvs_mount+0x284>)

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   12d68:	6153      	str	r3, [r2, #20]
   12d6a:	4b97      	ldr	r3, [pc, #604]	; (12fc8 <nvs_mount+0x288>)
   12d6c:	6193      	str	r3, [r2, #24]
   12d6e:	2303      	movs	r3, #3
   12d70:	f842 3f10 	str.w	r3, [r2, #16]!
   12d74:	4895      	ldr	r0, [pc, #596]	; (12fcc <nvs_mount+0x28c>)
   12d76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12d7a:	f013 f878 	bl	25e6e <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   12d7e:	f06f 0515 	mvn.w	r5, #21
   12d82:	46a5      	mov	sp, r4
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   12d84:	4628      	mov	r0, r5
   12d86:	3724      	adds	r7, #36	; 0x24
   12d88:	46bd      	mov	sp, r7
   12d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   12d8e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   12d90:	6883      	ldr	r3, [r0, #8]
   12d92:	68db      	ldr	r3, [r3, #12]
   12d94:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   12d96:	6803      	ldr	r3, [r0, #0]
   12d98:	3b01      	subs	r3, #1
   12d9a:	2b1f      	cmp	r3, #31
   12d9c:	d904      	bls.n	12da8 <nvs_mount+0x68>
		LOG_ERR("Unsupported write block size");
   12d9e:	466c      	mov	r4, sp
   12da0:	b088      	sub	sp, #32
   12da2:	466a      	mov	r2, sp
   12da4:	4b8a      	ldr	r3, [pc, #552]	; (12fd0 <nvs_mount+0x290>)
   12da6:	e7df      	b.n	12d68 <nvs_mount+0x28>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   12da8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   12daa:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   12dac:	f107 0214 	add.w	r2, r7, #20
   12db0:	f016 fb06 	bl	293c0 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   12db4:	b120      	cbz	r0, 12dc0 <nvs_mount+0x80>
		LOG_ERR("Unable to get page info");
   12db6:	466c      	mov	r4, sp
   12db8:	b088      	sub	sp, #32
   12dba:	466a      	mov	r2, sp
   12dbc:	4b85      	ldr	r3, [pc, #532]	; (12fd4 <nvs_mount+0x294>)
   12dbe:	e7d3      	b.n	12d68 <nvs_mount+0x28>
	if (!fs->sector_size || fs->sector_size % info.size) {
   12dc0:	89a5      	ldrh	r5, [r4, #12]
   12dc2:	b12d      	cbz	r5, 12dd0 <nvs_mount+0x90>
   12dc4:	69bb      	ldr	r3, [r7, #24]
   12dc6:	fbb5 f2f3 	udiv	r2, r5, r3
   12dca:	fb03 5512 	mls	r5, r3, r2, r5
   12dce:	b125      	cbz	r5, 12dda <nvs_mount+0x9a>
		LOG_ERR("Invalid sector size");
   12dd0:	466c      	mov	r4, sp
   12dd2:	b088      	sub	sp, #32
   12dd4:	466a      	mov	r2, sp
   12dd6:	4b80      	ldr	r3, [pc, #512]	; (12fd8 <nvs_mount+0x298>)
   12dd8:	e7c6      	b.n	12d68 <nvs_mount+0x28>
	if (fs->sector_count < 2) {
   12dda:	89e3      	ldrh	r3, [r4, #14]
   12ddc:	2b01      	cmp	r3, #1
   12dde:	d804      	bhi.n	12dea <nvs_mount+0xaa>
		LOG_ERR("Configuration error - sector count");
   12de0:	466c      	mov	r4, sp
   12de2:	b088      	sub	sp, #32
   12de4:	466a      	mov	r2, sp
   12de6:	4b7d      	ldr	r3, [pc, #500]	; (12fdc <nvs_mount+0x29c>)
   12de8:	e7be      	b.n	12d68 <nvs_mount+0x28>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12dea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   12dec:	603d      	str	r5, [r7, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   12dee:	f893 a004 	ldrb.w	sl, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   12df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12dfa:	4640      	mov	r0, r8
   12dfc:	f010 fc18 	bl	23630 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12e00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   12e02:	2108      	movs	r1, #8
   12e04:	f013 f836 	bl	25e74 <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   12e08:	46a9      	mov	r9, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   12e0a:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   12e0c:	89e3      	ldrh	r3, [r4, #14]
   12e0e:	fa1f fb85 	uxth.w	fp, r5
   12e12:	455b      	cmp	r3, fp
   12e14:	d808      	bhi.n	12e28 <nvs_mount+0xe8>
	if (closed_sectors == fs->sector_count) {
   12e16:	89e3      	ldrh	r3, [r4, #14]
   12e18:	454b      	cmp	r3, r9
   12e1a:	d123      	bne.n	12e64 <nvs_mount+0x124>
	return z_impl_k_mutex_unlock(mutex);
   12e1c:	4640      	mov	r0, r8
   12e1e:	f010 fc81 	bl	23724 <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   12e22:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   12e26:	e7ad      	b.n	12d84 <nvs_mount+0x44>
		       (uint16_t)(fs->sector_size - ate_size);
   12e28:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   12e2a:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   12e2c:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   12e2e:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12e32:	4652      	mov	r2, sl
   12e34:	2308      	movs	r3, #8
   12e36:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   12e38:	6039      	str	r1, [r7, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12e3a:	f012 ffd0 	bl	25dde <nvs_flash_cmp_const>
		if (rc) {
   12e3e:	b178      	cbz	r0, 12e60 <nvs_mount+0x120>
			nvs_sector_advance(fs, &addr);
   12e40:	4639      	mov	r1, r7
   12e42:	4620      	mov	r0, r4
   12e44:	f012 ff94 	bl	25d70 <nvs_sector_advance>
			closed_sectors++;
   12e48:	f109 0901 	add.w	r9, r9, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12e4c:	6839      	ldr	r1, [r7, #0]
   12e4e:	2308      	movs	r3, #8
   12e50:	4652      	mov	r2, sl
   12e52:	4620      	mov	r0, r4
			closed_sectors++;
   12e54:	fa1f f989 	uxth.w	r9, r9
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   12e58:	f012 ffc1 	bl	25dde <nvs_flash_cmp_const>
			if (!rc) {
   12e5c:	2800      	cmp	r0, #0
   12e5e:	d0da      	beq.n	12e16 <nvs_mount+0xd6>
	for (i = 0; i < fs->sector_count; i++) {
   12e60:	3501      	adds	r5, #1
   12e62:	e7d3      	b.n	12e0c <nvs_mount+0xcc>
	if (i == fs->sector_count) {
   12e64:	455b      	cmp	r3, fp
   12e66:	d10b      	bne.n	12e80 <nvs_mount+0x140>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   12e68:	6839      	ldr	r1, [r7, #0]
   12e6a:	2308      	movs	r3, #8
   12e6c:	4652      	mov	r2, sl
   12e6e:	1b89      	subs	r1, r1, r6
   12e70:	4620      	mov	r0, r4
   12e72:	f012 ffb4 	bl	25dde <nvs_flash_cmp_const>
		if (!rc) {
   12e76:	b918      	cbnz	r0, 12e80 <nvs_mount+0x140>
			nvs_sector_advance(fs, &addr);
   12e78:	4639      	mov	r1, r7
   12e7a:	4620      	mov	r0, r4
   12e7c:	f012 ff78 	bl	25d70 <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   12e80:	4639      	mov	r1, r7
   12e82:	4620      	mov	r0, r4
   12e84:	f7ff ff2a 	bl	12cdc <nvs_recover_last_ate>
	if (rc) {
   12e88:	4605      	mov	r5, r0
   12e8a:	b118      	cbz	r0, 12e94 <nvs_mount+0x154>
   12e8c:	4640      	mov	r0, r8
   12e8e:	f010 fc49 	bl	23724 <z_impl_k_mutex_unlock>
	if (rc) {
   12e92:	e777      	b.n	12d84 <nvs_mount+0x44>
	fs->ate_wra = addr;
   12e94:	683b      	ldr	r3, [r7, #0]
   12e96:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   12e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
   12e9c:	ea4f 4909 	mov.w	r9, r9, lsl #16
   12ea0:	f8c4 9008 	str.w	r9, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   12ea4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   12ea8:	4299      	cmp	r1, r3
   12eaa:	d30f      	bcc.n	12ecc <nvs_mount+0x18c>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12eac:	2308      	movs	r3, #8
   12eae:	1d3a      	adds	r2, r7, #4
   12eb0:	4620      	mov	r0, r4
   12eb2:	f012 ff4f 	bl	25d54 <nvs_flash_rd>
		if (rc) {
   12eb6:	4605      	mov	r5, r0
   12eb8:	2800      	cmp	r0, #0
   12eba:	d1e7      	bne.n	12e8c <nvs_mount+0x14c>
   12ebc:	1d3b      	adds	r3, r7, #4
		if (data8[i] != value) {
   12ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
   12ec2:	4592      	cmp	sl, r2
   12ec4:	d149      	bne.n	12f5a <nvs_mount+0x21a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   12ec6:	3501      	adds	r5, #1
   12ec8:	2d08      	cmp	r5, #8
   12eca:	d1f8      	bne.n	12ebe <nvs_mount+0x17e>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12ecc:	6863      	ldr	r3, [r4, #4]
   12ece:	0c1b      	lsrs	r3, r3, #16
   12ed0:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   12ed2:	4639      	mov	r1, r7
   12ed4:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   12ed6:	603b      	str	r3, [r7, #0]
	nvs_sector_advance(fs, &addr);
   12ed8:	f012 ff4a 	bl	25d70 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   12edc:	89a3      	ldrh	r3, [r4, #12]
   12ede:	6839      	ldr	r1, [r7, #0]
   12ee0:	4652      	mov	r2, sl
   12ee2:	4620      	mov	r0, r4
   12ee4:	f012 ff7b 	bl	25dde <nvs_flash_cmp_const>
	if (rc < 0) {
   12ee8:	1e05      	subs	r5, r0, #0
   12eea:	dbcf      	blt.n	12e8c <nvs_mount+0x14c>
		addr = fs->ate_wra + ate_size;
   12eec:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   12eee:	f000 808b 	beq.w	13008 <nvs_mount+0x2c8>
		addr = fs->ate_wra + ate_size;
   12ef2:	eb06 0903 	add.w	r9, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   12ef6:	f64f 7aff 	movw	sl, #65535	; 0xffff
   12efa:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   12efc:	f8c7 9000 	str.w	r9, [r7]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   12f00:	fa1f f289 	uxth.w	r2, r9
   12f04:	1b9b      	subs	r3, r3, r6
   12f06:	429a      	cmp	r2, r3
   12f08:	d341      	bcc.n	12f8e <nvs_mount+0x24e>
		LOG_INF("No GC Done marker found: restarting gc");
   12f0a:	466d      	mov	r5, sp
   12f0c:	b088      	sub	sp, #32
   12f0e:	466a      	mov	r2, sp
   12f10:	4b33      	ldr	r3, [pc, #204]	; (12fe0 <nvs_mount+0x2a0>)
   12f12:	6153      	str	r3, [r2, #20]
   12f14:	4b33      	ldr	r3, [pc, #204]	; (12fe4 <nvs_mount+0x2a4>)
   12f16:	6193      	str	r3, [r2, #24]
   12f18:	2303      	movs	r3, #3
   12f1a:	f842 3f10 	str.w	r3, [r2, #16]!
   12f1e:	482b      	ldr	r0, [pc, #172]	; (12fcc <nvs_mount+0x28c>)
   12f20:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   12f24:	f012 ffa3 	bl	25e6e <z_log_msg_static_create.constprop.0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   12f28:	4620      	mov	r0, r4
   12f2a:	46ad      	mov	sp, r5
   12f2c:	6861      	ldr	r1, [r4, #4]
   12f2e:	f012 ff7b 	bl	25e28 <nvs_flash_erase_sector>
		if (rc) {
   12f32:	4605      	mov	r5, r0
   12f34:	2800      	cmp	r0, #0
   12f36:	d1a9      	bne.n	12e8c <nvs_mount+0x14c>
		fs->ate_wra &= ADDR_SECT_MASK;
   12f38:	6863      	ldr	r3, [r4, #4]
   12f3a:	4a2b      	ldr	r2, [pc, #172]	; (12fe8 <nvs_mount+0x2a8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12f3c:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   12f3e:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   12f40:	440b      	add	r3, r1
   12f42:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   12f46:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   12f48:	4013      	ands	r3, r2
   12f4a:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   12f4c:	4620      	mov	r0, r4
   12f4e:	f013 f87d 	bl	2604c <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   12f52:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   12f54:	2d00      	cmp	r5, #0
   12f56:	d073      	beq.n	13040 <nvs_mount+0x300>
   12f58:	e798      	b.n	12e8c <nvs_mount+0x14c>
		if (nvs_ate_valid(fs, &last_ate)) {
   12f5a:	1d39      	adds	r1, r7, #4
   12f5c:	4620      	mov	r0, r4
   12f5e:	f012 ff93 	bl	25e88 <nvs_ate_valid>
   12f62:	6862      	ldr	r2, [r4, #4]
   12f64:	b910      	cbnz	r0, 12f6c <nvs_mount+0x22c>
		fs->ate_wra -= ate_size;
   12f66:	1b92      	subs	r2, r2, r6
   12f68:	6062      	str	r2, [r4, #4]
   12f6a:	e79b      	b.n	12ea4 <nvs_mount+0x164>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12f6c:	893d      	ldrh	r5, [r7, #8]
   12f6e:	88f9      	ldrh	r1, [r7, #6]
   12f70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   12f72:	f8c4 9008 	str.w	r9, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12f76:	4429      	add	r1, r5
   12f78:	f012 ff7c 	bl	25e74 <nvs_al_size.isra.0>
   12f7c:	4448      	add	r0, r9
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12f7e:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   12f80:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   12f82:	d1f0      	bne.n	12f66 <nvs_mount+0x226>
   12f84:	2d00      	cmp	r5, #0
   12f86:	d0ee      	beq.n	12f66 <nvs_mount+0x226>
				rc = -ESPIPE;
   12f88:	f06f 051c 	mvn.w	r5, #28
   12f8c:	e0a5      	b.n	130da <nvs_mount+0x39a>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   12f8e:	2308      	movs	r3, #8
   12f90:	f107 020c 	add.w	r2, r7, #12
   12f94:	4649      	mov	r1, r9
   12f96:	4620      	mov	r0, r4
   12f98:	f012 fedc 	bl	25d54 <nvs_flash_rd>
			if (rc) {
   12f9c:	4605      	mov	r5, r0
   12f9e:	2800      	cmp	r0, #0
   12fa0:	f47f af74 	bne.w	12e8c <nvs_mount+0x14c>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   12fa4:	f107 010c 	add.w	r1, r7, #12
   12fa8:	4620      	mov	r0, r4
   12faa:	f012 ff6d 	bl	25e88 <nvs_ate_valid>
   12fae:	b130      	cbz	r0, 12fbe <nvs_mount+0x27e>
   12fb0:	89bb      	ldrh	r3, [r7, #12]
   12fb2:	4553      	cmp	r3, sl
   12fb4:	d103      	bne.n	12fbe <nvs_mount+0x27e>
			    (gc_done_ate.id == 0xffff) &&
   12fb6:	8a3b      	ldrh	r3, [r7, #16]
   12fb8:	2b00      	cmp	r3, #0
   12fba:	f000 8094 	beq.w	130e6 <nvs_mount+0x3a6>
			addr += ate_size;
   12fbe:	44b1      	add	r9, r6
   12fc0:	e79b      	b.n	12efa <nvs_mount+0x1ba>
   12fc2:	bf00      	nop
   12fc4:	0002b95b 	.word	0x0002b95b
   12fc8:	0002baab 	.word	0x0002baab
   12fcc:	0002a8c8 	.word	0x0002a8c8
   12fd0:	0002b981 	.word	0x0002b981
   12fd4:	0002b9a2 	.word	0x0002b9a2
   12fd8:	0002b9be 	.word	0x0002b9be
   12fdc:	0002b9d6 	.word	0x0002b9d6
   12fe0:	0002ba43 	.word	0x0002ba43
   12fe4:	0002ba9f 	.word	0x0002ba9f
   12fe8:	ffff0000 	.word	0xffff0000
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   12fec:	1a5b      	subs	r3, r3, r1
   12fee:	4652      	mov	r2, sl
   12ff0:	4620      	mov	r0, r4
   12ff2:	f012 fef4 	bl	25dde <nvs_flash_cmp_const>
		if (rc < 0) {
   12ff6:	1e05      	subs	r5, r0, #0
   12ff8:	f6ff af48 	blt.w	12e8c <nvs_mount+0x14c>
		if (!rc) {
   12ffc:	d008      	beq.n	13010 <nvs_mount+0x2d0>
		fs->data_wra += fs->flash_parameters->write_block_size;
   12ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13000:	68a3      	ldr	r3, [r4, #8]
   13002:	6812      	ldr	r2, [r2, #0]
   13004:	4413      	add	r3, r2
   13006:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13008:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   1300c:	428b      	cmp	r3, r1
   1300e:	d8ed      	bhi.n	12fec <nvs_mount+0x2ac>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13010:	6861      	ldr	r1, [r4, #4]
   13012:	89a3      	ldrh	r3, [r4, #12]
   13014:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13018:	429a      	cmp	r2, r3
   1301a:	d19b      	bne.n	12f54 <nvs_mount+0x214>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1301c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 13120 <nvs_mount+0x3e0>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13020:	68a3      	ldr	r3, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13022:	ea01 0209 	and.w	r2, r1, r9
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   13026:	4293      	cmp	r3, r2
   13028:	d094      	beq.n	12f54 <nvs_mount+0x214>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1302a:	4620      	mov	r0, r4
   1302c:	f012 fefc 	bl	25e28 <nvs_flash_erase_sector>
		if (rc) {
   13030:	4605      	mov	r5, r0
   13032:	2800      	cmp	r0, #0
   13034:	f47f af2a 	bne.w	12e8c <nvs_mount+0x14c>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   13038:	6863      	ldr	r3, [r4, #4]
   1303a:	ea03 0309 	and.w	r3, r3, r9
   1303e:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   13040:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13042:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   13044:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   13048:	429a      	cmp	r2, r3
   1304a:	d042      	beq.n	130d2 <nvs_mount+0x392>
   1304c:	4640      	mov	r0, r8
   1304e:	f010 fb69 	bl	23724 <z_impl_k_mutex_unlock>
	fs->ready = true;
   13052:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   13054:	46e8      	mov	r8, sp
   13056:	b08a      	sub	sp, #40	; 0x28
	fs->ready = true;
   13058:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   1305a:	89e2      	ldrh	r2, [r4, #14]
   1305c:	89a3      	ldrh	r3, [r4, #12]
   1305e:	466d      	mov	r5, sp
   13060:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 13124 <nvs_mount+0x3e4>
   13064:	4930      	ldr	r1, [pc, #192]	; (13128 <nvs_mount+0x3e8>)
   13066:	6169      	str	r1, [r5, #20]
   13068:	462e      	mov	r6, r5
   1306a:	f04f 0905 	mov.w	r9, #5
   1306e:	e9c5 a206 	strd	sl, r2, [r5, #24]
   13072:	622b      	str	r3, [r5, #32]
   13074:	f846 9f10 	str.w	r9, [r6, #16]!
   13078:	482c      	ldr	r0, [pc, #176]	; (1312c <nvs_mount+0x3ec>)
   1307a:	4632      	mov	r2, r6
   1307c:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   13080:	f012 fef5 	bl	25e6e <z_log_msg_static_create.constprop.0>
   13084:	46c5      	mov	sp, r8
	LOG_INF("alloc wra: %d, %x",
   13086:	6863      	ldr	r3, [r4, #4]
   13088:	46ad      	mov	sp, r5
   1308a:	4a29      	ldr	r2, [pc, #164]	; (13130 <nvs_mount+0x3f0>)
   1308c:	4827      	ldr	r0, [pc, #156]	; (1312c <nvs_mount+0x3ec>)
   1308e:	f8c5 9010 	str.w	r9, [r5, #16]
   13092:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   13096:	0c1a      	lsrs	r2, r3, #16
   13098:	b29b      	uxth	r3, r3
   1309a:	61ea      	str	r2, [r5, #28]
   1309c:	622b      	str	r3, [r5, #32]
   1309e:	4632      	mov	r2, r6
   130a0:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   130a4:	f012 fee3 	bl	25e6e <z_log_msg_static_create.constprop.0>
   130a8:	46c5      	mov	sp, r8
	LOG_INF("data wra: %d, %x",
   130aa:	68a3      	ldr	r3, [r4, #8]
   130ac:	46ad      	mov	sp, r5
   130ae:	4a21      	ldr	r2, [pc, #132]	; (13134 <nvs_mount+0x3f4>)
   130b0:	f8c5 9010 	str.w	r9, [r5, #16]
   130b4:	e9c5 2a05 	strd	r2, sl, [r5, #20]
   130b8:	0c1a      	lsrs	r2, r3, #16
   130ba:	b29b      	uxth	r3, r3
   130bc:	61ea      	str	r2, [r5, #28]
   130be:	622b      	str	r3, [r5, #32]
   130c0:	481a      	ldr	r0, [pc, #104]	; (1312c <nvs_mount+0x3ec>)
   130c2:	4632      	mov	r2, r6
   130c4:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   130c8:	f012 fed1 	bl	25e6e <z_log_msg_static_create.constprop.0>
	return 0;
   130cc:	2500      	movs	r5, #0
   130ce:	46c5      	mov	sp, r8
   130d0:	e658      	b.n	12d84 <nvs_mount+0x44>
		rc = nvs_add_gc_done_ate(fs);
   130d2:	4620      	mov	r0, r4
   130d4:	f012 ffa5 	bl	26022 <nvs_add_gc_done_ate>
   130d8:	4605      	mov	r5, r0
   130da:	4640      	mov	r0, r8
   130dc:	f010 fb22 	bl	23724 <z_impl_k_mutex_unlock>
	if (rc) {
   130e0:	2d00      	cmp	r5, #0
   130e2:	d0b6      	beq.n	13052 <nvs_mount+0x312>
   130e4:	e64e      	b.n	12d84 <nvs_mount+0x44>
			LOG_INF("GC Done marker found");
   130e6:	466d      	mov	r5, sp
   130e8:	b088      	sub	sp, #32
   130ea:	466a      	mov	r2, sp
   130ec:	4b12      	ldr	r3, [pc, #72]	; (13138 <nvs_mount+0x3f8>)
   130ee:	6153      	str	r3, [r2, #20]
   130f0:	4b12      	ldr	r3, [pc, #72]	; (1313c <nvs_mount+0x3fc>)
   130f2:	6193      	str	r3, [r2, #24]
   130f4:	2303      	movs	r3, #3
   130f6:	f842 3f10 	str.w	r3, [r2, #16]!
   130fa:	480c      	ldr	r0, [pc, #48]	; (1312c <nvs_mount+0x3ec>)
   130fc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   13100:	f012 feb5 	bl	25e6e <z_log_msg_static_create.constprop.0>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13104:	6863      	ldr	r3, [r4, #4]
   13106:	0c1b      	lsrs	r3, r3, #16
   13108:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   1310a:	4639      	mov	r1, r7
   1310c:	4620      	mov	r0, r4
   1310e:	46ad      	mov	sp, r5
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13110:	603b      	str	r3, [r7, #0]
			nvs_sector_advance(fs, &addr);
   13112:	f012 fe2d 	bl	25d70 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   13116:	6839      	ldr	r1, [r7, #0]
   13118:	4620      	mov	r0, r4
   1311a:	f012 fe85 	bl	25e28 <nvs_flash_erase_sector>
   1311e:	e718      	b.n	12f52 <nvs_mount+0x212>
   13120:	ffff0000 	.word	0xffff0000
   13124:	0002baab 	.word	0x0002baab
   13128:	0002b9fd 	.word	0x0002b9fd
   1312c:	0002a8c8 	.word	0x0002a8c8
   13130:	0002ba18 	.word	0x0002ba18
   13134:	0002ba2e 	.word	0x0002ba2e
   13138:	0002ba6e 	.word	0x0002ba6e
   1313c:	0002ba9f 	.word	0x0002ba9f

00013140 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13144:	b089      	sub	sp, #36	; 0x24
   13146:	461d      	mov	r5, r3
   13148:	af00      	add	r7, sp, #0
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1314a:	7c03      	ldrb	r3, [r0, #16]
{
   1314c:	6079      	str	r1, [r7, #4]
   1314e:	4604      	mov	r4, r0
   13150:	4691      	mov	r9, r2
	if (!fs->ready) {
   13152:	b9b3      	cbnz	r3, 13182 <nvs_write+0x42>
		LOG_ERR("NVS not initialized");
   13154:	466c      	mov	r4, sp
   13156:	b088      	sub	sp, #32
   13158:	466a      	mov	r2, sp
   1315a:	4b69      	ldr	r3, [pc, #420]	; (13300 <nvs_write+0x1c0>)
   1315c:	6153      	str	r3, [r2, #20]
   1315e:	4b69      	ldr	r3, [pc, #420]	; (13304 <nvs_write+0x1c4>)
   13160:	6193      	str	r3, [r2, #24]
   13162:	2303      	movs	r3, #3
   13164:	f842 3f10 	str.w	r3, [r2, #16]!
   13168:	4867      	ldr	r0, [pc, #412]	; (13308 <nvs_write+0x1c8>)
   1316a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1316e:	f012 fe7e 	bl	25e6e <z_log_msg_static_create.constprop.0>
		return -EACCES;
   13172:	f06f 060c 	mvn.w	r6, #12
   13176:	46a5      	mov	sp, r4
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   13178:	4630      	mov	r0, r6
   1317a:	3724      	adds	r7, #36	; 0x24
   1317c:	46bd      	mov	sp, r7
   1317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13182:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13184:	2108      	movs	r1, #8
   13186:	4610      	mov	r0, r2
   13188:	f012 fe74 	bl	25e74 <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   1318c:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1318e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13190:	4610      	mov	r0, r2
   13192:	f012 fe6f 	bl	25e74 <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   13196:	89a3      	ldrh	r3, [r4, #12]
   13198:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1319c:	42ab      	cmp	r3, r5
	data_size = nvs_al_size(fs, len);
   1319e:	4680      	mov	r8, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   131a0:	f0c0 80ab 	bcc.w	132fa <nvs_write+0x1ba>
   131a4:	b11d      	cbz	r5, 131ae <nvs_write+0x6e>
	    ((len > 0) && (data == NULL))) {
   131a6:	f1b9 0f00 	cmp.w	r9, #0
   131aa:	f000 80a6 	beq.w	132fa <nvs_write+0x1ba>
	wlk_addr = fs->ate_wra;
   131ae:	6863      	ldr	r3, [r4, #4]
   131b0:	60fb      	str	r3, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   131b2:	f107 0210 	add.w	r2, r7, #16
   131b6:	f107 010c 	add.w	r1, r7, #12
   131ba:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   131bc:	f8d7 b00c 	ldr.w	fp, [r7, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   131c0:	f012 fe9a 	bl	25ef8 <nvs_prev_ate>
		if (rc) {
   131c4:	4606      	mov	r6, r0
   131c6:	2800      	cmp	r0, #0
   131c8:	d1d6      	bne.n	13178 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   131ca:	8a3b      	ldrh	r3, [r7, #16]
   131cc:	687a      	ldr	r2, [r7, #4]
   131ce:	4293      	cmp	r3, r2
   131d0:	d005      	beq.n	131de <nvs_write+0x9e>
		if (wlk_addr == fs->ate_wra) {
   131d2:	6862      	ldr	r2, [r4, #4]
   131d4:	68fb      	ldr	r3, [r7, #12]
   131d6:	429a      	cmp	r2, r3
   131d8:	d1eb      	bne.n	131b2 <nvs_write+0x72>
		if (len == 0) {
   131da:	b9dd      	cbnz	r5, 13214 <nvs_write+0xd4>
   131dc:	e7cc      	b.n	13178 <nvs_write+0x38>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   131de:	f107 0110 	add.w	r1, r7, #16
   131e2:	4620      	mov	r0, r4
   131e4:	f012 fe50 	bl	25e88 <nvs_ate_valid>
   131e8:	2800      	cmp	r0, #0
   131ea:	d0f2      	beq.n	131d2 <nvs_write+0x92>
		rd_addr += wlk_ate.offset;
   131ec:	8a78      	ldrh	r0, [r7, #18]
			if (wlk_ate.len == 0U) {
   131ee:	8abb      	ldrh	r3, [r7, #20]
		if (len == 0) {
   131f0:	b175      	cbz	r5, 13210 <nvs_write+0xd0>
		} else if (len == wlk_ate.len) {
   131f2:	42ab      	cmp	r3, r5
   131f4:	d10e      	bne.n	13214 <nvs_write+0xd4>
		rd_addr &= ADDR_SECT_MASK;
   131f6:	ea4f 411b 	mov.w	r1, fp, lsr #16
   131fa:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   131fc:	4401      	add	r1, r0
   131fe:	462b      	mov	r3, r5
   13200:	464a      	mov	r2, r9
   13202:	4620      	mov	r0, r4
   13204:	f012 fdc1 	bl	25d8a <nvs_flash_block_cmp>
			if (rc <= 0) {
   13208:	2800      	cmp	r0, #0
   1320a:	dc03      	bgt.n	13214 <nvs_write+0xd4>
   1320c:	4606      	mov	r6, r0
   1320e:	e7b3      	b.n	13178 <nvs_write+0x38>
			if (wlk_ate.len == 0U) {
   13210:	2b00      	cmp	r3, #0
   13212:	d0b1      	beq.n	13178 <nvs_write+0x38>
	if (data_size) {
   13214:	f1b8 0f00 	cmp.w	r8, #0
   13218:	d13e      	bne.n	13298 <nvs_write+0x158>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1321a:	f104 0314 	add.w	r3, r4, #20
   1321e:	603b      	str	r3, [r7, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13228:	f104 0014 	add.w	r0, r4, #20
   1322c:	f010 fa00 	bl	23630 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13230:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1330c <nvs_write+0x1cc>
		if (gc_count == fs->sector_count) {
   13234:	89e3      	ldrh	r3, [r4, #14]
   13236:	429e      	cmp	r6, r3
   13238:	d05c      	beq.n	132f4 <nvs_write+0x1b4>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1323a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1323e:	eb08 0103 	add.w	r1, r8, r3
   13242:	428a      	cmp	r2, r1
   13244:	d32c      	bcc.n	132a0 <nvs_write+0x160>
	entry.id = id;
   13246:	687a      	ldr	r2, [r7, #4]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13248:	837b      	strh	r3, [r7, #26]
	entry.part = 0xff;
   1324a:	23ff      	movs	r3, #255	; 0xff
	entry.id = id;
   1324c:	833a      	strh	r2, [r7, #24]
	entry.part = 0xff;
   1324e:	77bb      	strb	r3, [r7, #30]
	nvs_ate_crc8_update(&entry);
   13250:	f107 0018 	add.w	r0, r7, #24
	entry.len = (uint16_t)len;
   13254:	83bd      	strh	r5, [r7, #28]
	nvs_ate_crc8_update(&entry);
   13256:	f012 fe01 	bl	25e5c <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1325a:	68a1      	ldr	r1, [r4, #8]
   1325c:	462b      	mov	r3, r5
   1325e:	464a      	mov	r2, r9
   13260:	4620      	mov	r0, r4
   13262:	f012 fe93 	bl	25f8c <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   13266:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   13268:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1326a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1326c:	f012 fe02 	bl	25e74 <nvs_al_size.isra.0>
   13270:	68a2      	ldr	r2, [r4, #8]
   13272:	4402      	add	r2, r0
   13274:	60a2      	str	r2, [r4, #8]
	if (rc) {
   13276:	f1ba 0f00 	cmp.w	sl, #0
   1327a:	d108      	bne.n	1328e <nvs_write+0x14e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1327c:	f107 0118 	add.w	r1, r7, #24
   13280:	4620      	mov	r0, r4
   13282:	f012 febd 	bl	26000 <nvs_flash_ate_wrt>
	rc = len;
   13286:	2800      	cmp	r0, #0
   13288:	bf14      	ite	ne
   1328a:	4682      	movne	sl, r0
   1328c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1328e:	6838      	ldr	r0, [r7, #0]
   13290:	f010 fa48 	bl	23724 <z_impl_k_mutex_unlock>
	return rc;
   13294:	4656      	mov	r6, sl
   13296:	e76f      	b.n	13178 <nvs_write+0x38>
		required_space = data_size + ate_size;
   13298:	44d0      	add	r8, sl
   1329a:	fa1f f888 	uxth.w	r8, r8
   1329e:	e7bc      	b.n	1321a <nvs_write+0xda>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132a0:	2108      	movs	r1, #8
   132a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   132a4:	f012 fde6 	bl	25e74 <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   132a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   132ac:	833b      	strh	r3, [r7, #24]
	close_ate.len = 0U;
   132ae:	2300      	movs	r3, #0
   132b0:	83bb      	strh	r3, [r7, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   132b2:	1813      	adds	r3, r2, r0
   132b4:	837b      	strh	r3, [r7, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   132b6:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   132b8:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   132bc:	441a      	add	r2, r3
   132be:	1a10      	subs	r0, r2, r0
   132c0:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   132c2:	f107 0018 	add.w	r0, r7, #24
   132c6:	f012 fdc9 	bl	25e5c <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   132ca:	f107 0118 	add.w	r1, r7, #24
   132ce:	4620      	mov	r0, r4
   132d0:	f012 fe96 	bl	26000 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   132d4:	1d21      	adds	r1, r4, #4
   132d6:	4620      	mov	r0, r4
   132d8:	f012 fd4a 	bl	25d70 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   132dc:	6863      	ldr	r3, [r4, #4]
   132de:	ea03 030b 	and.w	r3, r3, fp
   132e2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   132e4:	4620      	mov	r0, r4
   132e6:	f012 feb1 	bl	2604c <nvs_gc>
		if (rc) {
   132ea:	4682      	mov	sl, r0
   132ec:	2800      	cmp	r0, #0
   132ee:	d1ce      	bne.n	1328e <nvs_write+0x14e>
		gc_count++;
   132f0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   132f2:	e79f      	b.n	13234 <nvs_write+0xf4>
			rc = -ENOSPC;
   132f4:	f06f 0a1b 	mvn.w	sl, #27
   132f8:	e7c9      	b.n	1328e <nvs_write+0x14e>
		return -EINVAL;
   132fa:	f06f 0615 	mvn.w	r6, #21
   132fe:	e73b      	b.n	13178 <nvs_write+0x38>
   13300:	0002b943 	.word	0x0002b943
   13304:	0002ba95 	.word	0x0002ba95
   13308:	0002a8c8 	.word	0x0002a8c8
   1330c:	ffff0000 	.word	0xffff0000

00013310 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13314:	b085      	sub	sp, #20
   13316:	461e      	mov	r6, r3
   13318:	af00      	add	r7, sp, #0
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1331a:	7c03      	ldrb	r3, [r0, #16]
{
   1331c:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
   13320:	4604      	mov	r4, r0
   13322:	4688      	mov	r8, r1
   13324:	4691      	mov	r9, r2
	if (!fs->ready) {
   13326:	b9ab      	cbnz	r3, 13354 <nvs_read_hist+0x44>
		LOG_ERR("NVS not initialized");
   13328:	466c      	mov	r4, sp
   1332a:	b088      	sub	sp, #32
   1332c:	466a      	mov	r2, sp
   1332e:	4b30      	ldr	r3, [pc, #192]	; (133f0 <nvs_read_hist+0xe0>)
   13330:	6153      	str	r3, [r2, #20]
   13332:	4b30      	ldr	r3, [pc, #192]	; (133f4 <nvs_read_hist+0xe4>)
   13334:	6193      	str	r3, [r2, #24]
   13336:	2303      	movs	r3, #3
   13338:	482f      	ldr	r0, [pc, #188]	; (133f8 <nvs_read_hist+0xe8>)
   1333a:	f842 3f10 	str.w	r3, [r2, #16]!
   1333e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13342:	f012 fd94 	bl	25e6e <z_log_msg_static_create.constprop.0>
		return -EACCES;
   13346:	f06f 000c 	mvn.w	r0, #12
   1334a:	46a5      	mov	sp, r4

	return wlk_ate.len;

err:
	return rc;
}
   1334c:	3714      	adds	r7, #20
   1334e:	46bd      	mov	sp, r7
   13350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13354:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13356:	2108      	movs	r1, #8
   13358:	f012 fd8c 	bl	25e74 <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   1335c:	89a3      	ldrh	r3, [r4, #12]
   1335e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   13362:	42b3      	cmp	r3, r6
   13364:	d340      	bcc.n	133e8 <nvs_read_hist+0xd8>
	wlk_addr = fs->ate_wra;
   13366:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1336a:	f8c7 b004 	str.w	fp, [r7, #4]
	cnt_his = 0U;
   1336e:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   13370:	4555      	cmp	r5, sl
   13372:	4659      	mov	r1, fp
		rd_addr = wlk_addr;
   13374:	f8d7 b004 	ldr.w	fp, [r7, #4]
	while (cnt_his <= cnt) {
   13378:	d908      	bls.n	1338c <nvs_read_hist+0x7c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1337a:	6863      	ldr	r3, [r4, #4]
   1337c:	455b      	cmp	r3, fp
   1337e:	d11e      	bne.n	133be <nvs_read_hist+0xae>
   13380:	893b      	ldrh	r3, [r7, #8]
   13382:	4543      	cmp	r3, r8
   13384:	d01b      	beq.n	133be <nvs_read_hist+0xae>
		return -ENOENT;
   13386:	f06f 0001 	mvn.w	r0, #1
   1338a:	e7df      	b.n	1334c <nvs_read_hist+0x3c>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1338c:	f107 0208 	add.w	r2, r7, #8
   13390:	1d39      	adds	r1, r7, #4
   13392:	4620      	mov	r0, r4
   13394:	f012 fdb0 	bl	25ef8 <nvs_prev_ate>
		if (rc) {
   13398:	2800      	cmp	r0, #0
   1339a:	d1d7      	bne.n	1334c <nvs_read_hist+0x3c>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1339c:	893b      	ldrh	r3, [r7, #8]
   1339e:	4543      	cmp	r3, r8
   133a0:	d107      	bne.n	133b2 <nvs_read_hist+0xa2>
   133a2:	f107 0108 	add.w	r1, r7, #8
   133a6:	4620      	mov	r0, r4
   133a8:	f012 fd6e 	bl	25e88 <nvs_ate_valid>
   133ac:	b108      	cbz	r0, 133b2 <nvs_read_hist+0xa2>
			cnt_his++;
   133ae:	3501      	adds	r5, #1
   133b0:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   133b2:	6862      	ldr	r2, [r4, #4]
   133b4:	687b      	ldr	r3, [r7, #4]
   133b6:	429a      	cmp	r2, r3
   133b8:	d1da      	bne.n	13370 <nvs_read_hist+0x60>
		rd_addr = wlk_addr;
   133ba:	4659      	mov	r1, fp
   133bc:	e7e0      	b.n	13380 <nvs_read_hist+0x70>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   133be:	89bb      	ldrh	r3, [r7, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   133c0:	2b00      	cmp	r3, #0
   133c2:	d0e0      	beq.n	13386 <nvs_read_hist+0x76>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   133c4:	45aa      	cmp	sl, r5
   133c6:	d8de      	bhi.n	13386 <nvs_read_hist+0x76>
	rd_addr += wlk_ate.offset;
   133c8:	8978      	ldrh	r0, [r7, #10]
	rd_addr &= ADDR_SECT_MASK;
   133ca:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   133cc:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   133ce:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   133d2:	bf28      	it	cs
   133d4:	4633      	movcs	r3, r6
   133d6:	4401      	add	r1, r0
   133d8:	464a      	mov	r2, r9
   133da:	4620      	mov	r0, r4
   133dc:	f012 fcba 	bl	25d54 <nvs_flash_rd>
	if (rc) {
   133e0:	2800      	cmp	r0, #0
   133e2:	d1b3      	bne.n	1334c <nvs_read_hist+0x3c>
	return wlk_ate.len;
   133e4:	89b8      	ldrh	r0, [r7, #12]
   133e6:	e7b1      	b.n	1334c <nvs_read_hist+0x3c>
		return -EINVAL;
   133e8:	f06f 0015 	mvn.w	r0, #21
   133ec:	e7ae      	b.n	1334c <nvs_read_hist+0x3c>
   133ee:	bf00      	nop
   133f0:	0002b943 	.word	0x0002b943
   133f4:	0002ba87 	.word	0x0002ba87
   133f8:	0002a8c8 	.word	0x0002a8c8

000133fc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   133fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13400:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1345c <activate_foreach_backend+0x60>
{
   13404:	4604      	mov	r4, r0
	while (mask_cpy) {
   13406:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13408:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   1340c:	b914      	cbnz	r4, 13414 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   1340e:	4638      	mov	r0, r7
   13410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13414:	fa94 f5a4 	rbit	r5, r4
   13418:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   1341c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13420:	012e      	lsls	r6, r5, #4
   13422:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   13426:	ea6f 0a03 	mvn.w	sl, r3
   1342a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1342e:	7b2b      	ldrb	r3, [r5, #12]
   13430:	2b00      	cmp	r3, #0
   13432:	d0eb      	beq.n	1340c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13434:	f858 3006 	ldr.w	r3, [r8, r6]
   13438:	691b      	ldr	r3, [r3, #16]
   1343a:	b94b      	cbnz	r3, 13450 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1343c:	4446      	add	r6, r8
			log_backend_enable(backend,
   1343e:	2204      	movs	r2, #4
   13440:	6873      	ldr	r3, [r6, #4]
   13442:	4628      	mov	r0, r5
   13444:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   13446:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1344a:	f000 fa59 	bl	13900 <log_backend_enable>
   1344e:	e7dd      	b.n	1340c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13450:	4628      	mov	r0, r5
   13452:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13454:	2800      	cmp	r0, #0
   13456:	d1d9      	bne.n	1340c <activate_foreach_backend+0x10>
   13458:	e7f0      	b.n	1343c <activate_foreach_backend+0x40>
   1345a:	bf00      	nop
   1345c:	0002a948 	.word	0x0002a948

00013460 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   13460:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13462:	4910      	ldr	r1, [pc, #64]	; (134a4 <enable_logger+0x44>)
   13464:	4810      	ldr	r0, [pc, #64]	; (134a8 <enable_logger+0x48>)
{
   13466:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   13468:	2200      	movs	r2, #0
   1346a:	f016 fe6d 	bl	2a148 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1346e:	4d0f      	ldr	r5, [pc, #60]	; (134ac <enable_logger+0x4c>)
   13470:	490f      	ldr	r1, [pc, #60]	; (134b0 <enable_logger+0x50>)
   13472:	2200      	movs	r2, #0
   13474:	2300      	movs	r3, #0
   13476:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1347a:	2400      	movs	r4, #0
   1347c:	230e      	movs	r3, #14
   1347e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   13482:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13486:	4b0b      	ldr	r3, [pc, #44]	; (134b4 <enable_logger+0x54>)
   13488:	9400      	str	r4, [sp, #0]
   1348a:	f44f 7240 	mov.w	r2, #768	; 0x300
   1348e:	4628      	mov	r0, r5
   13490:	f010 f82a 	bl	234e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   13494:	4908      	ldr	r1, [pc, #32]	; (134b8 <enable_logger+0x58>)
   13496:	4628      	mov	r0, r5
   13498:	f016 fb17 	bl	29aca <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1349c:	4620      	mov	r0, r4
   1349e:	b009      	add	sp, #36	; 0x24
   134a0:	bd30      	pop	{r4, r5, pc}
   134a2:	bf00      	nop
   134a4:	000134bd 	.word	0x000134bd
   134a8:	20001e28 	.word	0x20001e28
   134ac:	200019a0 	.word	0x200019a0
   134b0:	200039c0 	.word	0x200039c0
   134b4:	000137ad 	.word	0x000137ad
   134b8:	0002babc 	.word	0x0002babc

000134bc <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   134bc:	4801      	ldr	r0, [pc, #4]	; (134c4 <log_process_thread_timer_expiry_fn+0x8>)
   134be:	f010 b9a1 	b.w	23804 <z_impl_k_sem_give>
   134c2:	bf00      	nop
   134c4:	20000bb4 	.word	0x20000bb4

000134c8 <z_log_init>:
{
   134c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   134cc:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   134ce:	481f      	ldr	r0, [pc, #124]	; (1354c <z_log_init+0x84>)
{
   134d0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   134d2:	f012 fea7 	bl	26224 <atomic_inc>
   134d6:	4606      	mov	r6, r0
   134d8:	2800      	cmp	r0, #0
   134da:	d030      	beq.n	1353e <z_log_init+0x76>
	uint32_t mask = 0;
   134dc:	2500      	movs	r5, #0
}
   134de:	4628      	mov	r0, r5
   134e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   134e4:	7b23      	ldrb	r3, [r4, #12]
   134e6:	b173      	cbz	r3, 13506 <z_log_init+0x3e>
	if (backend->api->init) {
   134e8:	6823      	ldr	r3, [r4, #0]
   134ea:	68db      	ldr	r3, [r3, #12]
   134ec:	b10b      	cbz	r3, 134f2 <z_log_init+0x2a>
		backend->api->init(backend);
   134ee:	4620      	mov	r0, r4
   134f0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   134f2:	6823      	ldr	r3, [r4, #0]
   134f4:	691b      	ldr	r3, [r3, #16]
   134f6:	b9d3      	cbnz	r3, 1352e <z_log_init+0x66>
				log_backend_enable(backend,
   134f8:	6863      	ldr	r3, [r4, #4]
   134fa:	2204      	movs	r2, #4
   134fc:	6819      	ldr	r1, [r3, #0]
   134fe:	4620      	mov	r0, r4
   13500:	f000 f9fe 	bl	13900 <log_backend_enable>
			i++;
   13504:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13506:	3410      	adds	r4, #16
   13508:	454c      	cmp	r4, r9
   1350a:	d3eb      	bcc.n	134e4 <z_log_init+0x1c>
	if (blocking) {
   1350c:	f1b8 0f00 	cmp.w	r8, #0
   13510:	d0e5      	beq.n	134de <z_log_init+0x16>
		while (mask) {
   13512:	2d00      	cmp	r5, #0
   13514:	d0e2      	beq.n	134dc <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   13516:	4628      	mov	r0, r5
   13518:	f7ff ff70 	bl	133fc <activate_foreach_backend>
   1351c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   1351e:	2f00      	cmp	r7, #0
   13520:	d0f7      	beq.n	13512 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   13522:	2100      	movs	r1, #0
   13524:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13528:	f010 fe6e 	bl	24208 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1352c:	e7f1      	b.n	13512 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1352e:	4620      	mov	r0, r4
   13530:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13532:	2800      	cmp	r0, #0
   13534:	d0e0      	beq.n	134f8 <z_log_init+0x30>
				mask |= BIT(i);
   13536:	fa0a f306 	lsl.w	r3, sl, r6
   1353a:	431d      	orrs	r5, r3
   1353c:	e7e2      	b.n	13504 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1353e:	4c04      	ldr	r4, [pc, #16]	; (13550 <z_log_init+0x88>)
   13540:	f8df 9010 	ldr.w	r9, [pc, #16]	; 13554 <z_log_init+0x8c>
	uint32_t mask = 0;
   13544:	4605      	mov	r5, r0
				mask |= BIT(i);
   13546:	f04f 0a01 	mov.w	sl, #1
   1354a:	e7dd      	b.n	13508 <z_log_init+0x40>
   1354c:	20002e7c 	.word	0x20002e7c
   13550:	0002a948 	.word	0x0002a948
   13554:	0002a968 	.word	0x0002a968

00013558 <log_format_func_t_get>:
}
   13558:	4b01      	ldr	r3, [pc, #4]	; (13560 <log_format_func_t_get+0x8>)
   1355a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1355e:	4770      	bx	lr
   13560:	0002ac78 	.word	0x0002ac78

00013564 <log_set_timestamp_func>:
{
   13564:	b508      	push	{r3, lr}
   13566:	4603      	mov	r3, r0
   13568:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1356a:	b12b      	cbz	r3, 13578 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1356c:	4a04      	ldr	r2, [pc, #16]	; (13580 <log_set_timestamp_func+0x1c>)
   1356e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13570:	f000 fc7c 	bl	13e6c <log_output_timestamp_freq_set>
	return 0;
   13574:	2000      	movs	r0, #0
}
   13576:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13578:	f06f 0015 	mvn.w	r0, #21
   1357c:	e7fb      	b.n	13576 <log_set_timestamp_func+0x12>
   1357e:	bf00      	nop
   13580:	200006ac 	.word	0x200006ac

00013584 <z_log_notify_backend_enabled>:
{
   13584:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13586:	4c04      	ldr	r4, [pc, #16]	; (13598 <z_log_notify_backend_enabled+0x14>)
   13588:	7823      	ldrb	r3, [r4, #0]
   1358a:	b913      	cbnz	r3, 13592 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1358c:	4803      	ldr	r0, [pc, #12]	; (1359c <z_log_notify_backend_enabled+0x18>)
   1358e:	f010 f939 	bl	23804 <z_impl_k_sem_give>
	backend_attached = true;
   13592:	2301      	movs	r3, #1
   13594:	7023      	strb	r3, [r4, #0]
}
   13596:	bd10      	pop	{r4, pc}
   13598:	200033bd 	.word	0x200033bd
   1359c:	20000bb4 	.word	0x20000bb4

000135a0 <z_log_dropped>:
{
   135a0:	b510      	push	{r4, lr}
   135a2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   135a4:	4808      	ldr	r0, [pc, #32]	; (135c8 <z_log_dropped+0x28>)
   135a6:	f012 fe3d 	bl	26224 <atomic_inc>
	if (buffered) {
   135aa:	b15c      	cbz	r4, 135c4 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   135ac:	f3bf 8f5b 	dmb	ish
   135b0:	4b06      	ldr	r3, [pc, #24]	; (135cc <z_log_dropped+0x2c>)
   135b2:	e853 1f00 	ldrex	r1, [r3]
   135b6:	3901      	subs	r1, #1
   135b8:	e843 1200 	strex	r2, r1, [r3]
   135bc:	2a00      	cmp	r2, #0
   135be:	d1f8      	bne.n	135b2 <z_log_dropped+0x12>
   135c0:	f3bf 8f5b 	dmb	ish
}
   135c4:	bd10      	pop	{r4, pc}
   135c6:	bf00      	nop
   135c8:	20002e74 	.word	0x20002e74
   135cc:	20002e78 	.word	0x20002e78

000135d0 <z_log_dropped_read_and_clear>:
}
   135d0:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   135d2:	4b06      	ldr	r3, [pc, #24]	; (135ec <z_log_dropped_read_and_clear+0x1c>)
   135d4:	f3bf 8f5b 	dmb	ish
   135d8:	4601      	mov	r1, r0
   135da:	e853 0f00 	ldrex	r0, [r3]
   135de:	e843 1200 	strex	r2, r1, [r3]
   135e2:	2a00      	cmp	r2, #0
   135e4:	d1f9      	bne.n	135da <z_log_dropped_read_and_clear+0xa>
   135e6:	f3bf 8f5b 	dmb	ish
   135ea:	4770      	bx	lr
   135ec:	20002e74 	.word	0x20002e74

000135f0 <dropped_notify>:
{
   135f0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   135f2:	f7ff ffed 	bl	135d0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   135f6:	4c08      	ldr	r4, [pc, #32]	; (13618 <dropped_notify+0x28>)
   135f8:	4e08      	ldr	r6, [pc, #32]	; (1361c <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   135fa:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   135fc:	42b4      	cmp	r4, r6
   135fe:	d300      	bcc.n	13602 <dropped_notify+0x12>
}
   13600:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13602:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13604:	795b      	ldrb	r3, [r3, #5]
   13606:	b12b      	cbz	r3, 13614 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   13608:	6823      	ldr	r3, [r4, #0]
   1360a:	685b      	ldr	r3, [r3, #4]
   1360c:	b113      	cbz	r3, 13614 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   1360e:	4629      	mov	r1, r5
   13610:	4620      	mov	r0, r4
   13612:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13614:	3410      	adds	r4, #16
   13616:	e7f1      	b.n	135fc <dropped_notify+0xc>
   13618:	0002a948 	.word	0x0002a948
   1361c:	0002a968 	.word	0x0002a968

00013620 <z_log_msg_init>:
{
   13620:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13622:	4c04      	ldr	r4, [pc, #16]	; (13634 <z_log_msg_init+0x14>)
   13624:	4904      	ldr	r1, [pc, #16]	; (13638 <z_log_msg_init+0x18>)
   13626:	4620      	mov	r0, r4
   13628:	f012 fa39 	bl	25a9e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1362c:	4b03      	ldr	r3, [pc, #12]	; (1363c <z_log_msg_init+0x1c>)
   1362e:	601c      	str	r4, [r3, #0]
}
   13630:	bd10      	pop	{r4, pc}
   13632:	bf00      	nop
   13634:	20000ae0 	.word	0x20000ae0
   13638:	0002ac64 	.word	0x0002ac64
   1363c:	20002e6c 	.word	0x20002e6c

00013640 <log_core_init>:
	panic_mode = false;
   13640:	4a08      	ldr	r2, [pc, #32]	; (13664 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   13642:	4809      	ldr	r0, [pc, #36]	; (13668 <log_core_init+0x28>)
{
   13644:	b508      	push	{r3, lr}
	panic_mode = false;
   13646:	2300      	movs	r3, #0
   13648:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1364a:	4a08      	ldr	r2, [pc, #32]	; (1366c <log_core_init+0x2c>)
   1364c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   1364e:	4a08      	ldr	r2, [pc, #32]	; (13670 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   13650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   13654:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13656:	f7ff ff85 	bl	13564 <log_set_timestamp_func>
}
   1365a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1365e:	f7ff bfdf 	b.w	13620 <z_log_msg_init>
   13662:	bf00      	nop
   13664:	200033be 	.word	0x200033be
   13668:	00026221 	.word	0x00026221
   1366c:	20002e74 	.word	0x20002e74
   13670:	20002e78 	.word	0x20002e78

00013674 <z_log_msg_alloc>:
{
   13674:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13676:	2200      	movs	r2, #0
   13678:	4801      	ldr	r0, [pc, #4]	; (13680 <z_log_msg_alloc+0xc>)
   1367a:	2300      	movs	r3, #0
   1367c:	f012 ba30 	b.w	25ae0 <mpsc_pbuf_alloc>
   13680:	20000ae0 	.word	0x20000ae0

00013684 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13684:	4801      	ldr	r0, [pc, #4]	; (1368c <z_log_msg_local_claim+0x8>)
   13686:	f012 bac9 	b.w	25c1c <mpsc_pbuf_claim>
   1368a:	bf00      	nop
   1368c:	20000ae0 	.word	0x20000ae0

00013690 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13690:	4b02      	ldr	r3, [pc, #8]	; (1369c <z_log_msg_free+0xc>)
{
   13692:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13694:	6818      	ldr	r0, [r3, #0]
   13696:	f012 bb13 	b.w	25cc0 <mpsc_pbuf_free>
   1369a:	bf00      	nop
   1369c:	20002e6c 	.word	0x20002e6c

000136a0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   136a0:	4801      	ldr	r0, [pc, #4]	; (136a8 <z_log_msg_pending+0x8>)
   136a2:	f012 bb49 	b.w	25d38 <mpsc_pbuf_is_pending>
   136a6:	bf00      	nop
   136a8:	20000ae0 	.word	0x20000ae0

000136ac <z_impl_log_process>:
{
   136ac:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   136ae:	4b28      	ldr	r3, [pc, #160]	; (13750 <z_impl_log_process+0xa4>)
   136b0:	7818      	ldrb	r0, [r3, #0]
   136b2:	2800      	cmp	r0, #0
   136b4:	d04b      	beq.n	1374e <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   136b6:	f7ff ffe5 	bl	13684 <z_log_msg_local_claim>
	if (msg) {
   136ba:	4605      	mov	r5, r0
   136bc:	b190      	cbz	r0, 136e4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   136be:	f3bf 8f5b 	dmb	ish
   136c2:	4b24      	ldr	r3, [pc, #144]	; (13754 <z_impl_log_process+0xa8>)
   136c4:	e853 1f00 	ldrex	r1, [r3]
   136c8:	3901      	subs	r1, #1
   136ca:	e843 1200 	strex	r2, r1, [r3]
   136ce:	2a00      	cmp	r2, #0
   136d0:	d1f8      	bne.n	136c4 <z_impl_log_process+0x18>
   136d2:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   136d6:	4c20      	ldr	r4, [pc, #128]	; (13758 <z_impl_log_process+0xac>)
   136d8:	4e20      	ldr	r6, [pc, #128]	; (1375c <z_impl_log_process+0xb0>)
   136da:	42b4      	cmp	r4, r6
   136dc:	d32d      	bcc.n	1373a <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   136de:	4628      	mov	r0, r5
   136e0:	f7ff ffd6 	bl	13690 <z_log_msg_free>
	return dropped_cnt > 0;
   136e4:	4b1e      	ldr	r3, [pc, #120]	; (13760 <z_impl_log_process+0xb4>)
   136e6:	4c1f      	ldr	r4, [pc, #124]	; (13764 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   136e8:	681b      	ldr	r3, [r3, #0]
   136ea:	2b00      	cmp	r3, #0
   136ec:	dd19      	ble.n	13722 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   136ee:	f016 fd03 	bl	2a0f8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   136f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   136f6:	fba0 0302 	umull	r0, r3, r0, r2
   136fa:	fb02 3101 	mla	r1, r2, r1, r3
   136fe:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13700:	e9d4 2000 	ldrd	r2, r0, [r4]
   13704:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13708:	1a9b      	subs	r3, r3, r2
   1370a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   1370e:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13712:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13716:	4293      	cmp	r3, r2
   13718:	f171 0100 	sbcs.w	r1, r1, #0
   1371c:	d301      	bcc.n	13722 <z_impl_log_process+0x76>
				dropped_notify();
   1371e:	f7ff ff67 	bl	135f0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13722:	e9d4 3200 	ldrd	r3, r2, [r4]
   13726:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   1372a:	f142 0200 	adc.w	r2, r2, #0
   1372e:	e9c4 3200 	strd	r3, r2, [r4]
}
   13732:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13736:	f7ff bfb3 	b.w	136a0 <z_log_msg_pending>
	return backend->cb->active;
   1373a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   1373c:	795b      	ldrb	r3, [r3, #5]
   1373e:	b123      	cbz	r3, 1374a <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   13740:	6823      	ldr	r3, [r4, #0]
   13742:	4629      	mov	r1, r5
   13744:	681b      	ldr	r3, [r3, #0]
   13746:	4620      	mov	r0, r4
   13748:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1374a:	3410      	adds	r4, #16
   1374c:	e7c5      	b.n	136da <z_impl_log_process+0x2e>
}
   1374e:	bd70      	pop	{r4, r5, r6, pc}
   13750:	200033bd 	.word	0x200033bd
   13754:	20002e78 	.word	0x20002e78
   13758:	0002a948 	.word	0x0002a948
   1375c:	0002a968 	.word	0x0002a968
   13760:	20002e74 	.word	0x20002e74
   13764:	20001e20 	.word	0x20001e20

00013768 <z_impl_log_panic>:
{
   13768:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   1376a:	4d0d      	ldr	r5, [pc, #52]	; (137a0 <z_impl_log_panic+0x38>)
   1376c:	7829      	ldrb	r1, [r5, #0]
   1376e:	b961      	cbnz	r1, 1378a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   13770:	2001      	movs	r0, #1
   13772:	f7ff fea9 	bl	134c8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13776:	4c0b      	ldr	r4, [pc, #44]	; (137a4 <z_impl_log_panic+0x3c>)
   13778:	4e0b      	ldr	r6, [pc, #44]	; (137a8 <z_impl_log_panic+0x40>)
   1377a:	42b4      	cmp	r4, r6
   1377c:	d306      	bcc.n	1378c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   1377e:	f7ff ff95 	bl	136ac <z_impl_log_process>
		while (log_process() == true) {
   13782:	2800      	cmp	r0, #0
   13784:	d1fb      	bne.n	1377e <z_impl_log_panic+0x16>
	panic_mode = true;
   13786:	2301      	movs	r3, #1
   13788:	702b      	strb	r3, [r5, #0]
}
   1378a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   1378c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1378e:	795b      	ldrb	r3, [r3, #5]
   13790:	b11b      	cbz	r3, 1379a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   13792:	6823      	ldr	r3, [r4, #0]
   13794:	4620      	mov	r0, r4
   13796:	689b      	ldr	r3, [r3, #8]
   13798:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1379a:	3410      	adds	r4, #16
   1379c:	e7ed      	b.n	1377a <z_impl_log_panic+0x12>
   1379e:	bf00      	nop
   137a0:	200033be 	.word	0x200033be
   137a4:	0002a948 	.word	0x0002a948
   137a8:	0002a968 	.word	0x0002a968

000137ac <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   137ac:	2100      	movs	r1, #0
{
   137ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   137b2:	4608      	mov	r0, r1
   137b4:	f7ff fe88 	bl	134c8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   137b8:	4604      	mov	r4, r0
   137ba:	b348      	cbz	r0, 13810 <log_process_thread_func+0x64>
   137bc:	f240 6867 	movw	r8, #1639	; 0x667
   137c0:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   137c4:	f010 fd3a 	bl	2423c <z_impl_z_current_get>
	proc_tid = process_tid;
   137c8:	4b1a      	ldr	r3, [pc, #104]	; (13834 <log_process_thread_func+0x88>)
   137ca:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   137cc:	b130      	cbz	r0, 137dc <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   137ce:	4b1a      	ldr	r3, [pc, #104]	; (13838 <log_process_thread_func+0x8c>)
	    process_tid &&
   137d0:	681b      	ldr	r3, [r3, #0]
   137d2:	2b09      	cmp	r3, #9
   137d4:	dd02      	ble.n	137dc <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   137d6:	4819      	ldr	r0, [pc, #100]	; (1383c <log_process_thread_func+0x90>)
   137d8:	f010 f814 	bl	23804 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   137dc:	4f18      	ldr	r7, [pc, #96]	; (13840 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   137de:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1383c <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   137e2:	2500      	movs	r5, #0
		if (activate_mask) {
   137e4:	b144      	cbz	r4, 137f8 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   137e6:	4620      	mov	r0, r4
   137e8:	f7ff fe08 	bl	133fc <activate_foreach_backend>
			if (!activate_mask) {
   137ec:	4604      	mov	r4, r0
   137ee:	b918      	cbnz	r0, 137f8 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   137f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   137f4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   137f8:	f7ff ff58 	bl	136ac <z_impl_log_process>
		if (log_process() == false) {
   137fc:	4606      	mov	r6, r0
   137fe:	b928      	cbnz	r0, 1380c <log_process_thread_func+0x60>
			if (processed_any) {
   13800:	b9b5      	cbnz	r5, 13830 <log_process_thread_func+0x84>
   13802:	4642      	mov	r2, r8
   13804:	464b      	mov	r3, r9
   13806:	4650      	mov	r0, sl
   13808:	f010 f822 	bl	23850 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   1380c:	4635      	mov	r5, r6
   1380e:	e7e9      	b.n	137e4 <log_process_thread_func+0x38>
   13810:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13814:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   13818:	e7d4      	b.n	137c4 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   1381a:	682b      	ldr	r3, [r5, #0]
   1381c:	699b      	ldr	r3, [r3, #24]
   1381e:	b11b      	cbz	r3, 13828 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   13820:	2200      	movs	r2, #0
   13822:	4611      	mov	r1, r2
   13824:	4628      	mov	r0, r5
   13826:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13828:	3510      	adds	r5, #16
   1382a:	42bd      	cmp	r5, r7
   1382c:	d3f5      	bcc.n	1381a <log_process_thread_func+0x6e>
   1382e:	e7e8      	b.n	13802 <log_process_thread_func+0x56>
   13830:	4d04      	ldr	r5, [pc, #16]	; (13844 <log_process_thread_func+0x98>)
   13832:	e7fa      	b.n	1382a <log_process_thread_func+0x7e>
   13834:	20002e70 	.word	0x20002e70
   13838:	20002e78 	.word	0x20002e78
   1383c:	20000bb4 	.word	0x20000bb4
   13840:	0002a968 	.word	0x0002a968
   13844:	0002a948 	.word	0x0002a948

00013848 <z_log_msg_post_finalize>:
{
   13848:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   1384a:	4818      	ldr	r0, [pc, #96]	; (138ac <z_log_msg_post_finalize+0x64>)
   1384c:	f012 fcea 	bl	26224 <atomic_inc>
	if (panic_mode) {
   13850:	4b17      	ldr	r3, [pc, #92]	; (138b0 <z_log_msg_post_finalize+0x68>)
   13852:	781b      	ldrb	r3, [r3, #0]
   13854:	b17b      	cbz	r3, 13876 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   13856:	f04f 0340 	mov.w	r3, #64	; 0x40
   1385a:	f3ef 8411 	mrs	r4, BASEPRI
   1385e:	f383 8812 	msr	BASEPRI_MAX, r3
   13862:	f3bf 8f6f 	isb	sy
   13866:	f7ff ff21 	bl	136ac <z_impl_log_process>
	__asm__ volatile(
   1386a:	f384 8811 	msr	BASEPRI, r4
   1386e:	f3bf 8f6f 	isb	sy
}
   13872:	b002      	add	sp, #8
   13874:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13876:	4b0f      	ldr	r3, [pc, #60]	; (138b4 <z_log_msg_post_finalize+0x6c>)
   13878:	681b      	ldr	r3, [r3, #0]
   1387a:	2b00      	cmp	r3, #0
   1387c:	d0f9      	beq.n	13872 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   1387e:	b950      	cbnz	r0, 13896 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   13880:	2200      	movs	r2, #0
   13882:	2300      	movs	r3, #0
   13884:	e9cd 2300 	strd	r2, r3, [sp]
   13888:	480b      	ldr	r0, [pc, #44]	; (138b8 <z_log_msg_post_finalize+0x70>)
   1388a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1388e:	2300      	movs	r3, #0
   13890:	f010 ff18 	bl	246c4 <z_impl_k_timer_start>
   13894:	e7ed      	b.n	13872 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13896:	280a      	cmp	r0, #10
   13898:	d1eb      	bne.n	13872 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   1389a:	4807      	ldr	r0, [pc, #28]	; (138b8 <z_log_msg_post_finalize+0x70>)
   1389c:	f016 fc60 	bl	2a160 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   138a0:	4806      	ldr	r0, [pc, #24]	; (138bc <z_log_msg_post_finalize+0x74>)
}
   138a2:	b002      	add	sp, #8
   138a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   138a8:	f00f bfac 	b.w	23804 <z_impl_k_sem_give>
   138ac:	20002e78 	.word	0x20002e78
   138b0:	200033be 	.word	0x200033be
   138b4:	20002e70 	.word	0x20002e70
   138b8:	20001e28 	.word	0x20001e28
   138bc:	20000bb4 	.word	0x20000bb4

000138c0 <z_log_msg_commit>:
{
   138c0:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   138c2:	4b06      	ldr	r3, [pc, #24]	; (138dc <z_log_msg_commit+0x1c>)
   138c4:	681b      	ldr	r3, [r3, #0]
{
   138c6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   138c8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   138ca:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   138cc:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   138ce:	4804      	ldr	r0, [pc, #16]	; (138e0 <z_log_msg_commit+0x20>)
   138d0:	f012 f984 	bl	25bdc <mpsc_pbuf_commit>
}
   138d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   138d8:	f7ff bfb6 	b.w	13848 <z_log_msg_post_finalize>
   138dc:	200006ac 	.word	0x200006ac
   138e0:	20000ae0 	.word	0x20000ae0

000138e4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   138e4:	4a04      	ldr	r2, [pc, #16]	; (138f8 <log_source_name_get+0x14>)
   138e6:	4b05      	ldr	r3, [pc, #20]	; (138fc <log_source_name_get+0x18>)
   138e8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   138ea:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   138ee:	bf34      	ite	cc
   138f0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   138f4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   138f6:	4770      	bx	lr
   138f8:	0002a7f0 	.word	0x0002a7f0
   138fc:	0002a948 	.word	0x0002a948

00013900 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13900:	4b08      	ldr	r3, [pc, #32]	; (13924 <log_backend_enable+0x24>)
   13902:	1ac3      	subs	r3, r0, r3
{
   13904:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   13906:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   13908:	6844      	ldr	r4, [r0, #4]
   1390a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   1390c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1390e:	6843      	ldr	r3, [r0, #4]
   13910:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13912:	6843      	ldr	r3, [r0, #4]
   13914:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13916:	6843      	ldr	r3, [r0, #4]
   13918:	2201      	movs	r2, #1
   1391a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1391c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   1391e:	f7ff be31 	b.w	13584 <z_log_notify_backend_enabled>
   13922:	bf00      	nop
   13924:	0002a948 	.word	0x0002a948

00013928 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1392c:	b08f      	sub	sp, #60	; 0x3c
   1392e:	af04      	add	r7, sp, #16
   13930:	f3c1 284a 	ubfx	r8, r1, #9, #11
   13934:	60b8      	str	r0, [r7, #8]
   13936:	460d      	mov	r5, r1
   13938:	4691      	mov	r9, r2
   1393a:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   1393c:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1393e:	f1b8 0f00 	cmp.w	r8, #0
   13942:	d065      	beq.n	13a10 <z_impl_z_log_msg_static_create+0xe8>
	struct z_cbprintf_buf_desc buf_desc = {
   13944:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   13946:	f107 0314 	add.w	r3, r7, #20
   1394a:	f04f 0b04 	mov.w	fp, #4
   1394e:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   13952:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   13956:	e9c7 6607 	strd	r6, r6, [r7, #28]
   1395a:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   1395c:	9301      	str	r3, [sp, #4]
   1395e:	f8cd b008 	str.w	fp, [sp, #8]
   13962:	f8cd a000 	str.w	sl, [sp]
   13966:	f107 031c 	add.w	r3, r7, #28
   1396a:	68f9      	ldr	r1, [r7, #12]
   1396c:	4632      	mov	r2, r6
   1396e:	4648      	mov	r0, r9
   13970:	f7fe fade 	bl	11f30 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   13974:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   13978:	4603      	mov	r3, r0
   1397a:	d31e      	bcc.n	139ba <z_impl_z_log_msg_static_create+0x92>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   1397c:	466c      	mov	r4, sp
   1397e:	b08a      	sub	sp, #40	; 0x28
   13980:	f8d9 1004 	ldr.w	r1, [r9, #4]
   13984:	ab04      	add	r3, sp, #16
   13986:	4827      	ldr	r0, [pc, #156]	; (13a24 <z_impl_z_log_msg_static_create+0xfc>)
   13988:	6158      	str	r0, [r3, #20]
   1398a:	4827      	ldr	r0, [pc, #156]	; (13a28 <z_impl_z_log_msg_static_create+0x100>)
   1398c:	e9c3 0106 	strd	r0, r1, [r3, #24]
   13990:	f240 71ff 	movw	r1, #2047	; 0x7ff
   13994:	6219      	str	r1, [r3, #32]
   13996:	461a      	mov	r2, r3
   13998:	f240 3101 	movw	r1, #769	; 0x301
   1399c:	8499      	strh	r1, [r3, #36]	; 0x24
   1399e:	4b23      	ldr	r3, [pc, #140]	; (13a2c <z_impl_z_log_msg_static_create+0x104>)
   139a0:	f842 3f10 	str.w	r3, [r2, #16]!
   139a4:	4822      	ldr	r0, [pc, #136]	; (13a30 <z_impl_z_log_msg_static_create+0x108>)
   139a6:	4633      	mov	r3, r6
   139a8:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   139ac:	f7ff ffbc 	bl	13928 <z_impl_z_log_msg_static_create>
   139b0:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   139b2:	372c      	adds	r7, #44	; 0x2c
   139b4:	46bd      	mov	sp, r7
   139b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   139ba:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   139be:	f104 0017 	add.w	r0, r4, #23
   139c2:	4418      	add	r0, r3
   139c4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   139c8:	0880      	lsrs	r0, r0, #2
   139ca:	603b      	str	r3, [r7, #0]
   139cc:	f7ff fe52 	bl	13674 <z_log_msg_alloc>
   139d0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   139d4:	4604      	mov	r4, r0
   139d6:	b190      	cbz	r0, 139fe <z_impl_z_log_msg_static_create+0xd6>
	struct z_cbprintf_buf_desc buf_desc = {
   139d8:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   139da:	4a16      	ldr	r2, [pc, #88]	; (13a34 <z_impl_z_log_msg_static_create+0x10c>)
	struct z_cbprintf_buf_desc buf_desc = {
   139dc:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   139e0:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   139e4:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   139e8:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   139ea:	e9cd a300 	strd	sl, r3, [sp]
   139ee:	f8cd b008 	str.w	fp, [sp, #8]
   139f2:	68f9      	ldr	r1, [r7, #12]
   139f4:	f107 031c 	add.w	r3, r7, #28
   139f8:	4648      	mov	r0, r9
   139fa:	f7fe fa99 	bl	11f30 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
   139fe:	f368 2553 	bfi	r5, r8, #9, #11
   13a02:	687b      	ldr	r3, [r7, #4]
   13a04:	68b9      	ldr	r1, [r7, #8]
   13a06:	462a      	mov	r2, r5
   13a08:	4620      	mov	r0, r4
   13a0a:	f012 fc41 	bl	26290 <z_log_msg_finalize>
   13a0e:	e7d0      	b.n	139b2 <z_impl_z_log_msg_static_create+0x8a>
   13a10:	f104 0017 	add.w	r0, r4, #23
   13a14:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13a18:	0880      	lsrs	r0, r0, #2
   13a1a:	f7ff fe2b 	bl	13674 <z_log_msg_alloc>
   13a1e:	4604      	mov	r4, r0
   13a20:	e7ed      	b.n	139fe <z_impl_z_log_msg_static_create+0xd6>
   13a22:	bf00      	nop
   13a24:	0002bad1 	.word	0x0002bad1
   13a28:	0002bb14 	.word	0x0002bb14
   13a2c:	01000005 	.word	0x01000005
   13a30:	0002a8e0 	.word	0x0002a8e0
   13a34:	00026265 	.word	0x00026265

00013a38 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a3c:	b087      	sub	sp, #28
   13a3e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   13a42:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   13a46:	4604      	mov	r4, r0
   13a48:	460f      	mov	r7, r1
   13a4a:	4693      	mov	fp, r2
   13a4c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   13a4e:	b3a6      	cbz	r6, 13aba <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   13a50:	2110      	movs	r1, #16
   13a52:	f8cd 9000 	str.w	r9, [sp]
   13a56:	4633      	mov	r3, r6
   13a58:	4652      	mov	r2, sl
   13a5a:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13a5c:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   13a60:	f7fe f890 	bl	11b84 <cbvprintf_package>
   13a64:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13a66:	f105 0017 	add.w	r0, r5, #23
   13a6a:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13a6c:	4b14      	ldr	r3, [pc, #80]	; (13ac0 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13a6e:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   13a70:	f004 0407 	and.w	r4, r4, #7
   13a74:	f00b 0b07 	and.w	fp, fp, #7
   13a78:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   13a7a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   13a7e:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   13a82:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   13a86:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   13a88:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   13a8a:	f7ff fdf3 	bl	13674 <z_log_msg_alloc>
	struct log_msg_desc desc =
   13a8e:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   13a92:	4605      	mov	r5, r0
   13a94:	b140      	cbz	r0, 13aa8 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   13a96:	b13e      	cbz	r6, 13aa8 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   13a98:	9903      	ldr	r1, [sp, #12]
   13a9a:	f8cd 9000 	str.w	r9, [sp]
   13a9e:	4633      	mov	r3, r6
   13aa0:	4652      	mov	r2, sl
   13aa2:	3010      	adds	r0, #16
   13aa4:	f7fe f86e 	bl	11b84 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   13aa8:	4643      	mov	r3, r8
   13aaa:	4622      	mov	r2, r4
   13aac:	4639      	mov	r1, r7
   13aae:	4628      	mov	r0, r5
	}
}
   13ab0:	b007      	add	sp, #28
   13ab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   13ab6:	f012 bbeb 	b.w	26290 <z_log_msg_finalize>
		plen = 0;
   13aba:	4631      	mov	r1, r6
   13abc:	e7d3      	b.n	13a66 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   13abe:	bf00      	nop
   13ac0:	000ffe00 	.word	0x000ffe00

00013ac4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13ac4:	b40e      	push	{r1, r2, r3}
   13ac6:	b503      	push	{r0, r1, lr}
   13ac8:	ab03      	add	r3, sp, #12
   13aca:	4601      	mov	r1, r0
   13acc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13ad0:	4804      	ldr	r0, [pc, #16]	; (13ae4 <print_formatted+0x20>)
	va_start(args, fmt);
   13ad2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13ad4:	f012 fc02 	bl	262dc <cbvprintf>
	va_end(args);

	return length;
}
   13ad8:	b002      	add	sp, #8
   13ada:	f85d eb04 	ldr.w	lr, [sp], #4
   13ade:	b003      	add	sp, #12
   13ae0:	4770      	bx	lr
   13ae2:	bf00      	nop
   13ae4:	00026305 	.word	0x00026305

00013ae8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13ae8:	06ca      	lsls	r2, r1, #27
   13aea:	d405      	bmi.n	13af8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13aec:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   13aee:	bf4c      	ite	mi
   13af0:	4902      	ldrmi	r1, [pc, #8]	; (13afc <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   13af2:	4903      	ldrpl	r1, [pc, #12]	; (13b00 <newline_print+0x18>)
   13af4:	f7ff bfe6 	b.w	13ac4 <print_formatted>
	}
}
   13af8:	4770      	bx	lr
   13afa:	bf00      	nop
   13afc:	0002bb34 	.word	0x0002bb34
   13b00:	0002bb33 	.word	0x0002bb33

00013b04 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   13b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b08:	b089      	sub	sp, #36	; 0x24
   13b0a:	469b      	mov	fp, r3
   13b0c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13b10:	9304      	str	r3, [sp, #16]
   13b12:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   13b16:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   13b18:	9b04      	ldr	r3, [sp, #16]
{
   13b1a:	9206      	str	r2, [sp, #24]
   13b1c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   13b20:	4604      	mov	r4, r0
   13b22:	460d      	mov	r5, r1
	if (!raw_string) {
   13b24:	2b00      	cmp	r3, #0
   13b26:	f000 8087 	beq.w	13c38 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   13b2a:	f006 0308 	and.w	r3, r6, #8
   13b2e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   13b30:	f012 fb96 	bl	26260 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13b34:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   13b38:	4602      	mov	r2, r0
   13b3a:	2800      	cmp	r0, #0
   13b3c:	d04b      	beq.n	13bd6 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   13b3e:	4986      	ldr	r1, [pc, #536]	; (13d58 <log_output_process+0x254>)
   13b40:	4620      	mov	r0, r4
   13b42:	f7ff ffbf 	bl	13ac4 <print_formatted>
   13b46:	4680      	mov	r8, r0
	if (stamp) {
   13b48:	f1ba 0f00 	cmp.w	sl, #0
   13b4c:	d008      	beq.n	13b60 <log_output_process+0x5c>
	if (!format) {
   13b4e:	f016 0f44 	tst.w	r6, #68	; 0x44
   13b52:	d142      	bne.n	13bda <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13b54:	4981      	ldr	r1, [pc, #516]	; (13d5c <log_output_process+0x258>)
   13b56:	462a      	mov	r2, r5
   13b58:	4620      	mov	r0, r4
   13b5a:	f7ff ffb3 	bl	13ac4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13b5e:	4480      	add	r8, r0
	if (color) {
   13b60:	f006 0301 	and.w	r3, r6, #1
   13b64:	b15b      	cbz	r3, 13b7e <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   13b66:	4b7e      	ldr	r3, [pc, #504]	; (13d60 <log_output_process+0x25c>)
   13b68:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   13b6a:	497e      	ldr	r1, [pc, #504]	; (13d64 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   13b6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   13b70:	4b7d      	ldr	r3, [pc, #500]	; (13d68 <log_output_process+0x264>)
   13b72:	4620      	mov	r0, r4
   13b74:	2a00      	cmp	r2, #0
   13b76:	bf08      	it	eq
   13b78:	461a      	moveq	r2, r3
   13b7a:	f7ff ffa3 	bl	13ac4 <print_formatted>
	if (level_on) {
   13b7e:	f006 0308 	and.w	r3, r6, #8
   13b82:	2b00      	cmp	r3, #0
   13b84:	d055      	beq.n	13c32 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   13b86:	4b79      	ldr	r3, [pc, #484]	; (13d6c <log_output_process+0x268>)
   13b88:	9a04      	ldr	r2, [sp, #16]
   13b8a:	4979      	ldr	r1, [pc, #484]	; (13d70 <log_output_process+0x26c>)
   13b8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13b90:	4620      	mov	r0, r4
   13b92:	f7ff ff97 	bl	13ac4 <print_formatted>
   13b96:	4605      	mov	r5, r0
	if (domain) {
   13b98:	9b06      	ldr	r3, [sp, #24]
   13b9a:	b12b      	cbz	r3, 13ba8 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   13b9c:	4975      	ldr	r1, [pc, #468]	; (13d74 <log_output_process+0x270>)
   13b9e:	461a      	mov	r2, r3
   13ba0:	4620      	mov	r0, r4
   13ba2:	f7ff ff8f 	bl	13ac4 <print_formatted>
   13ba6:	4405      	add	r5, r0
	if (source) {
   13ba8:	f1bb 0f00 	cmp.w	fp, #0
   13bac:	d005      	beq.n	13bba <log_output_process+0xb6>
		total += print_formatted(output,
   13bae:	4972      	ldr	r1, [pc, #456]	; (13d78 <log_output_process+0x274>)
   13bb0:	465a      	mov	r2, fp
   13bb2:	4620      	mov	r0, r4
   13bb4:	f7ff ff86 	bl	13ac4 <print_formatted>
   13bb8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   13bba:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   13bbc:	f1b9 0f00 	cmp.w	r9, #0
   13bc0:	d149      	bne.n	13c56 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   13bc2:	2f00      	cmp	r7, #0
   13bc4:	d14f      	bne.n	13c66 <log_output_process+0x162>
	if (color) {
   13bc6:	07f3      	lsls	r3, r6, #31
   13bc8:	f100 80c0 	bmi.w	13d4c <log_output_process+0x248>
	newline_print(output, flags);
   13bcc:	4631      	mov	r1, r6
   13bce:	4620      	mov	r0, r4
   13bd0:	f7ff ff8a 	bl	13ae8 <newline_print>
}
   13bd4:	e0b4      	b.n	13d40 <log_output_process+0x23c>
	uint32_t length = 0U;
   13bd6:	4680      	mov	r8, r0
   13bd8:	e7b6      	b.n	13b48 <log_output_process+0x44>
	} else if (freq != 0U) {
   13bda:	4b68      	ldr	r3, [pc, #416]	; (13d7c <log_output_process+0x278>)
   13bdc:	6818      	ldr	r0, [r3, #0]
   13bde:	2800      	cmp	r0, #0
   13be0:	d0bd      	beq.n	13b5e <log_output_process+0x5a>
		timestamp /= timestamp_div;
   13be2:	4b67      	ldr	r3, [pc, #412]	; (13d80 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   13be4:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   13be8:	681b      	ldr	r3, [r3, #0]
   13bea:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   13bee:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13bf2:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   13bf6:	fb00 5513 	mls	r5, r0, r3, r5
   13bfa:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   13bfe:	fb0e f505 	mul.w	r5, lr, r5
   13c02:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   13c06:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13c08:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   13c0c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13c10:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   13c14:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13c18:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   13c1c:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13c1e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   13c22:	4958      	ldr	r1, [pc, #352]	; (13d84 <log_output_process+0x280>)
   13c24:	e9cd c501 	strd	ip, r5, [sp, #4]
   13c28:	4652      	mov	r2, sl
   13c2a:	4620      	mov	r0, r4
   13c2c:	f7ff ff4a 	bl	13ac4 <print_formatted>
   13c30:	e795      	b.n	13b5e <log_output_process+0x5a>
	int total = 0;
   13c32:	f006 0508 	and.w	r5, r6, #8
   13c36:	e7af      	b.n	13b98 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13c38:	f1bb 0f01 	cmp.w	fp, #1
   13c3c:	d106      	bne.n	13c4c <log_output_process+0x148>
	if (package) {
   13c3e:	f1b9 0f00 	cmp.w	r9, #0
   13c42:	d164      	bne.n	13d0e <log_output_process+0x20a>
	if (data_len) {
   13c44:	2f00      	cmp	r7, #0
   13c46:	d07b      	beq.n	13d40 <log_output_process+0x23c>
		prefix_offset = 0;
   13c48:	2500      	movs	r5, #0
   13c4a:	e00c      	b.n	13c66 <log_output_process+0x162>
	if (package) {
   13c4c:	f1b9 0f00 	cmp.w	r9, #0
   13c50:	d0f8      	beq.n	13c44 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13c52:	484d      	ldr	r0, [pc, #308]	; (13d88 <log_output_process+0x284>)
   13c54:	e05c      	b.n	13d10 <log_output_process+0x20c>
		cb = out_func;
   13c56:	484d      	ldr	r0, [pc, #308]	; (13d8c <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   13c58:	494d      	ldr	r1, [pc, #308]	; (13d90 <log_output_process+0x28c>)
   13c5a:	464b      	mov	r3, r9
   13c5c:	4622      	mov	r2, r4
   13c5e:	f011 fa03 	bl	25068 <cbpprintf_external>
	if (data_len) {
   13c62:	2f00      	cmp	r7, #0
   13c64:	d068      	beq.n	13d38 <log_output_process+0x234>
		print_formatted(output, " ");
   13c66:	f8df 912c 	ldr.w	r9, [pc, #300]	; 13d94 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   13c6a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 13d98 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13c6e:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   13c70:	4631      	mov	r1, r6
   13c72:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   13c74:	46b8      	mov	r8, r7
   13c76:	bf28      	it	cs
   13c78:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   13c7c:	f7ff ff34 	bl	13ae8 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   13c80:	f04f 0b00 	mov.w	fp, #0
   13c84:	455d      	cmp	r5, fp
   13c86:	dc45      	bgt.n	13d14 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   13c88:	9b05      	ldr	r3, [sp, #20]
   13c8a:	4651      	mov	r1, sl
   13c8c:	781a      	ldrb	r2, [r3, #0]
   13c8e:	4620      	mov	r0, r4
   13c90:	f7ff ff18 	bl	13ac4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13c94:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   13c98:	f01b 0f07 	tst.w	fp, #7
   13c9c:	d103      	bne.n	13ca6 <log_output_process+0x1a2>
			print_formatted(output, " ");
   13c9e:	4649      	mov	r1, r9
   13ca0:	4620      	mov	r0, r4
   13ca2:	f7ff ff0f 	bl	13ac4 <print_formatted>
		if (i < length) {
   13ca6:	45d8      	cmp	r8, fp
   13ca8:	d93b      	bls.n	13d22 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   13caa:	9b05      	ldr	r3, [sp, #20]
   13cac:	4651      	mov	r1, sl
   13cae:	f813 200b 	ldrb.w	r2, [r3, fp]
   13cb2:	4620      	mov	r0, r4
   13cb4:	f7ff ff06 	bl	13ac4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13cb8:	f10b 0b01 	add.w	fp, fp, #1
   13cbc:	f1bb 0f10 	cmp.w	fp, #16
   13cc0:	d1ea      	bne.n	13c98 <log_output_process+0x194>
	print_formatted(output, "|");
   13cc2:	4936      	ldr	r1, [pc, #216]	; (13d9c <log_output_process+0x298>)
   13cc4:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13cc6:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   13cca:	f7ff fefb 	bl	13ac4 <print_formatted>
		if (i < length) {
   13cce:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   13cd0:	9b05      	ldr	r3, [sp, #20]
   13cd2:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   13cd4:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   13cd8:	295f      	cmp	r1, #95	; 0x5f
   13cda:	bf28      	it	cs
   13cdc:	222e      	movcs	r2, #46	; 0x2e
   13cde:	4930      	ldr	r1, [pc, #192]	; (13da0 <log_output_process+0x29c>)
   13ce0:	4620      	mov	r0, r4
   13ce2:	f7ff feef 	bl	13ac4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13ce6:	f10b 0b01 	add.w	fp, fp, #1
   13cea:	f1bb 0f10 	cmp.w	fp, #16
   13cee:	d01d      	beq.n	13d2c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   13cf0:	f01b 0f07 	tst.w	fp, #7
   13cf4:	d103      	bne.n	13cfe <log_output_process+0x1fa>
			print_formatted(output, " ");
   13cf6:	4649      	mov	r1, r9
   13cf8:	4620      	mov	r0, r4
   13cfa:	f7ff fee3 	bl	13ac4 <print_formatted>
		if (i < length) {
   13cfe:	45d8      	cmp	r8, fp
   13d00:	465a      	mov	r2, fp
   13d02:	d8e5      	bhi.n	13cd0 <log_output_process+0x1cc>
			print_formatted(output, " ");
   13d04:	4649      	mov	r1, r9
   13d06:	4620      	mov	r0, r4
   13d08:	f7ff fedc 	bl	13ac4 <print_formatted>
   13d0c:	e7eb      	b.n	13ce6 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13d0e:	481f      	ldr	r0, [pc, #124]	; (13d8c <log_output_process+0x288>)
		prefix_offset = 0;
   13d10:	9d04      	ldr	r5, [sp, #16]
   13d12:	e7a1      	b.n	13c58 <log_output_process+0x154>
		print_formatted(output, " ");
   13d14:	4649      	mov	r1, r9
   13d16:	4620      	mov	r0, r4
   13d18:	f7ff fed4 	bl	13ac4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13d1c:	f10b 0b01 	add.w	fp, fp, #1
   13d20:	e7b0      	b.n	13c84 <log_output_process+0x180>
			print_formatted(output, "   ");
   13d22:	4920      	ldr	r1, [pc, #128]	; (13da4 <log_output_process+0x2a0>)
   13d24:	4620      	mov	r0, r4
   13d26:	f7ff fecd 	bl	13ac4 <print_formatted>
   13d2a:	e7c5      	b.n	13cb8 <log_output_process+0x1b4>
		data += length;
   13d2c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   13d2e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   13d32:	4443      	add	r3, r8
   13d34:	9305      	str	r3, [sp, #20]
	} while (len);
   13d36:	d19a      	bne.n	13c6e <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   13d38:	9b04      	ldr	r3, [sp, #16]
   13d3a:	2b00      	cmp	r3, #0
   13d3c:	f47f af43 	bne.w	13bc6 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13d40:	4620      	mov	r0, r4
}
   13d42:	b009      	add	sp, #36	; 0x24
   13d44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   13d48:	f012 bacf 	b.w	262ea <log_output_flush>
		print_formatted(output, "%s", log_color);
   13d4c:	4a06      	ldr	r2, [pc, #24]	; (13d68 <log_output_process+0x264>)
   13d4e:	4905      	ldr	r1, [pc, #20]	; (13d64 <log_output_process+0x260>)
   13d50:	4620      	mov	r0, r4
   13d52:	f7ff feb7 	bl	13ac4 <print_formatted>
}
   13d56:	e739      	b.n	13bcc <log_output_process+0xc8>
   13d58:	0002bb3b 	.word	0x0002bb3b
   13d5c:	0002bb3f 	.word	0x0002bb3f
   13d60:	0002ac88 	.word	0x0002ac88
   13d64:	0002cb11 	.word	0x0002cb11
   13d68:	0002bb36 	.word	0x0002bb36
   13d6c:	0002ac9c 	.word	0x0002ac9c
   13d70:	0002bb64 	.word	0x0002bb64
   13d74:	0002bb6a 	.word	0x0002bb6a
   13d78:	0002bb6e 	.word	0x0002bb6e
   13d7c:	20002e84 	.word	0x20002e84
   13d80:	20002e80 	.word	0x20002e80
   13d84:	0002bb48 	.word	0x0002bb48
   13d88:	0002633b 	.word	0x0002633b
   13d8c:	00026305 	.word	0x00026305
   13d90:	000262dd 	.word	0x000262dd
   13d94:	0002bb7b 	.word	0x0002bb7b
   13d98:	0002bb73 	.word	0x0002bb73
   13d9c:	0002bb7d 	.word	0x0002bb7d
   13da0:	0002bb7f 	.word	0x0002bb7f
   13da4:	0002bb79 	.word	0x0002bb79

00013da8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   13da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   13dac:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   13dae:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   13db0:	688e      	ldr	r6, [r1, #8]
   13db2:	b086      	sub	sp, #24
   13db4:	4605      	mov	r5, r0
   13db6:	460c      	mov	r4, r1
   13db8:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   13dba:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   13dbe:	b15b      	cbz	r3, 13dd8 <log_output_msg_process+0x30>
   13dc0:	4a13      	ldr	r2, [pc, #76]	; (13e10 <log_output_msg_process+0x68>)
   13dc2:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   13dc4:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13dc8:	2900      	cmp	r1, #0
   13dca:	db1f      	blt.n	13e0c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   13dcc:	7820      	ldrb	r0, [r4, #0]
   13dce:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13dd2:	f7ff fd87 	bl	138e4 <log_source_name_get>
   13dd6:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   13dd8:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   13dda:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   13ddc:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   13de0:	9700      	str	r7, [sp, #0]
   13de2:	f3c2 224a 	ubfx	r2, r2, #9, #11
   13de6:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   13de8:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   13dec:	f3c0 100b 	ubfx	r0, r0, #4, #12
   13df0:	bf08      	it	eq
   13df2:	2100      	moveq	r1, #0
   13df4:	e9cd 0803 	strd	r0, r8, [sp, #12]
   13df8:	e9cd 1401 	strd	r1, r4, [sp, #4]
   13dfc:	2200      	movs	r2, #0
   13dfe:	4631      	mov	r1, r6
   13e00:	4628      	mov	r0, r5
   13e02:	f7ff fe7f 	bl	13b04 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   13e06:	b006      	add	sp, #24
   13e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13e0c:	2300      	movs	r3, #0
   13e0e:	e7e3      	b.n	13dd8 <log_output_msg_process+0x30>
   13e10:	0002a7f0 	.word	0x0002a7f0

00013e14 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13e14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e16:	f242 730f 	movw	r3, #9999	; 0x270f
   13e1a:	428b      	cmp	r3, r1
   13e1c:	bf28      	it	cs
   13e1e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13e20:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e22:	4a0f      	ldr	r2, [pc, #60]	; (13e60 <log_output_dropped_process+0x4c>)
{
   13e24:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e26:	2105      	movs	r1, #5
   13e28:	4668      	mov	r0, sp
   13e2a:	f011 fa10 	bl	2524e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13e2e:	6863      	ldr	r3, [r4, #4]
   13e30:	490c      	ldr	r1, [pc, #48]	; (13e64 <log_output_dropped_process+0x50>)
   13e32:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13e34:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13e36:	220b      	movs	r2, #11
   13e38:	4628      	mov	r0, r5
   13e3a:	f012 fa42 	bl	262c2 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13e3e:	6863      	ldr	r3, [r4, #4]
   13e40:	4632      	mov	r2, r6
   13e42:	4669      	mov	r1, sp
   13e44:	4628      	mov	r0, r5
   13e46:	685b      	ldr	r3, [r3, #4]
   13e48:	f012 fa3b 	bl	262c2 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13e4c:	6863      	ldr	r3, [r4, #4]
   13e4e:	4906      	ldr	r1, [pc, #24]	; (13e68 <log_output_dropped_process+0x54>)
   13e50:	685b      	ldr	r3, [r3, #4]
   13e52:	221b      	movs	r2, #27
   13e54:	4628      	mov	r0, r5
   13e56:	f012 fa34 	bl	262c2 <buffer_write>
		     output->control_block->ctx);
}
   13e5a:	b002      	add	sp, #8
   13e5c:	bd70      	pop	{r4, r5, r6, pc}
   13e5e:	bf00      	nop
   13e60:	0002f28b 	.word	0x0002f28b
   13e64:	0002bb9e 	.word	0x0002bb9e
   13e68:	0002bb82 	.word	0x0002bb82

00013e6c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13e6c:	4a07      	ldr	r2, [pc, #28]	; (13e8c <log_output_timestamp_freq_set+0x20>)
   13e6e:	2100      	movs	r1, #0
   13e70:	2301      	movs	r3, #1
   13e72:	4290      	cmp	r0, r2
   13e74:	d806      	bhi.n	13e84 <log_output_timestamp_freq_set+0x18>
   13e76:	4a06      	ldr	r2, [pc, #24]	; (13e90 <log_output_timestamp_freq_set+0x24>)
   13e78:	b901      	cbnz	r1, 13e7c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   13e7a:	2301      	movs	r3, #1
   13e7c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   13e7e:	4b05      	ldr	r3, [pc, #20]	; (13e94 <log_output_timestamp_freq_set+0x28>)
   13e80:	6018      	str	r0, [r3, #0]
}
   13e82:	4770      	bx	lr
		frequency /= 2U;
   13e84:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   13e86:	005b      	lsls	r3, r3, #1
   13e88:	2101      	movs	r1, #1
   13e8a:	e7f2      	b.n	13e72 <log_output_timestamp_freq_set+0x6>
   13e8c:	000f4240 	.word	0x000f4240
   13e90:	20002e80 	.word	0x20002e80
   13e94:	20002e84 	.word	0x20002e84

00013e98 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   13e98:	4b01      	ldr	r3, [pc, #4]	; (13ea0 <log_backend_rtt_init+0x8>)
   13e9a:	2201      	movs	r2, #1
   13e9c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   13e9e:	4770      	bx	lr
   13ea0:	200033bf 	.word	0x200033bf

00013ea4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13ea4:	4b01      	ldr	r3, [pc, #4]	; (13eac <format_set+0x8>)
	return 0;
}
   13ea6:	2000      	movs	r0, #0
	log_format_current = log_type;
   13ea8:	6019      	str	r1, [r3, #0]
}
   13eaa:	4770      	bx	lr
   13eac:	20002e9c 	.word	0x20002e9c

00013eb0 <panic>:
	panic_mode = true;
   13eb0:	4b02      	ldr	r3, [pc, #8]	; (13ebc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   13eb2:	4803      	ldr	r0, [pc, #12]	; (13ec0 <panic+0x10>)
   13eb4:	2201      	movs	r2, #1
   13eb6:	701a      	strb	r2, [r3, #0]
   13eb8:	f012 ba17 	b.w	262ea <log_output_flush>
   13ebc:	200033c0 	.word	0x200033c0
   13ec0:	0002accc 	.word	0x0002accc

00013ec4 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   13ec4:	4801      	ldr	r0, [pc, #4]	; (13ecc <dropped+0x8>)
   13ec6:	f7ff bfa5 	b.w	13e14 <log_output_dropped_process>
   13eca:	bf00      	nop
   13ecc:	0002accc 	.word	0x0002accc

00013ed0 <process>:
{
   13ed0:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13ed2:	4b06      	ldr	r3, [pc, #24]	; (13eec <process+0x1c>)
   13ed4:	6818      	ldr	r0, [r3, #0]
{
   13ed6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13ed8:	f7ff fb3e 	bl	13558 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   13edc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13ede:	4603      	mov	r3, r0
}
   13ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   13ee4:	4802      	ldr	r0, [pc, #8]	; (13ef0 <process+0x20>)
   13ee6:	220f      	movs	r2, #15
   13ee8:	4718      	bx	r3
   13eea:	bf00      	nop
   13eec:	20002e9c 	.word	0x20002e9c
   13ef0:	0002accc 	.word	0x0002accc

00013ef4 <on_failed_write>:
	if (retry_cnt == 0) {
   13ef4:	b910      	cbnz	r0, 13efc <on_failed_write+0x8>
		host_present = false;
   13ef6:	4b07      	ldr	r3, [pc, #28]	; (13f14 <on_failed_write+0x20>)
   13ef8:	7018      	strb	r0, [r3, #0]
}
   13efa:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13efc:	4b06      	ldr	r3, [pc, #24]	; (13f18 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   13efe:	781b      	ldrb	r3, [r3, #0]
   13f00:	b11b      	cbz	r3, 13f0a <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   13f02:	f241 3088 	movw	r0, #5000	; 0x1388
   13f06:	f016 b8f9 	b.w	2a0fc <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   13f0a:	20a4      	movs	r0, #164	; 0xa4
   13f0c:	2100      	movs	r1, #0
   13f0e:	f010 b97b 	b.w	24208 <z_impl_k_sleep>
   13f12:	bf00      	nop
   13f14:	200033bf 	.word	0x200033bf
   13f18:	200033c0 	.word	0x200033c0

00013f1c <data_out_block_mode>:
{
   13f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13f20:	f8df 9074 	ldr.w	r9, [pc, #116]	; 13f98 <data_out_block_mode+0x7c>
   13f24:	4f1d      	ldr	r7, [pc, #116]	; (13f9c <data_out_block_mode+0x80>)
{
   13f26:	4680      	mov	r8, r0
   13f28:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   13f2a:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   13f2c:	f899 5000 	ldrb.w	r5, [r9]
   13f30:	b995      	cbnz	r5, 13f58 <data_out_block_mode+0x3c>
			RTT_LOCK();
   13f32:	f00f f8c9 	bl	230c8 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13f36:	4628      	mov	r0, r5
   13f38:	4632      	mov	r2, r6
   13f3a:	4641      	mov	r1, r8
   13f3c:	f00f f872 	bl	23024 <SEGGER_RTT_WriteSkipNoLock>
   13f40:	4605      	mov	r5, r0
			RTT_UNLOCK();
   13f42:	f00f f8cb 	bl	230dc <zephyr_rtt_mutex_unlock>
		if (ret) {
   13f46:	b1e5      	cbz	r5, 13f82 <data_out_block_mode+0x66>
	host_present = true;
   13f48:	2301      	movs	r3, #1
   13f4a:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   13f4c:	f899 3000 	ldrb.w	r3, [r9]
   13f50:	b973      	cbnz	r3, 13f70 <data_out_block_mode+0x54>
}
   13f52:	4630      	mov	r0, r6
   13f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13f58:	4632      	mov	r2, r6
   13f5a:	4641      	mov	r1, r8
   13f5c:	2000      	movs	r0, #0
   13f5e:	f00f f861 	bl	23024 <SEGGER_RTT_WriteSkipNoLock>
   13f62:	4605      	mov	r5, r0
   13f64:	e7ef      	b.n	13f46 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   13f66:	4620      	mov	r0, r4
   13f68:	f7ff ffc4 	bl	13ef4 <on_failed_write>
   13f6c:	1e65      	subs	r5, r4, #1
   13f6e:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13f70:	2000      	movs	r0, #0
   13f72:	f00f f89f 	bl	230b4 <SEGGER_RTT_HasDataUp>
   13f76:	2800      	cmp	r0, #0
   13f78:	d0eb      	beq.n	13f52 <data_out_block_mode+0x36>
   13f7a:	783b      	ldrb	r3, [r7, #0]
   13f7c:	2b00      	cmp	r3, #0
   13f7e:	d1f2      	bne.n	13f66 <data_out_block_mode+0x4a>
   13f80:	e7e7      	b.n	13f52 <data_out_block_mode+0x36>
		} else if (host_present) {
   13f82:	783b      	ldrb	r3, [r7, #0]
   13f84:	2b00      	cmp	r3, #0
   13f86:	d0e4      	beq.n	13f52 <data_out_block_mode+0x36>
			retry_cnt--;
   13f88:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   13f8a:	4620      	mov	r0, r4
   13f8c:	f7ff ffb2 	bl	13ef4 <on_failed_write>
	} while ((ret == 0) && host_present);
   13f90:	783b      	ldrb	r3, [r7, #0]
   13f92:	2b00      	cmp	r3, #0
   13f94:	d1ca      	bne.n	13f2c <data_out_block_mode+0x10>
   13f96:	e7dc      	b.n	13f52 <data_out_block_mode+0x36>
   13f98:	200033c0 	.word	0x200033c0
   13f9c:	200033bf 	.word	0x200033bf

00013fa0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   13fa0:	4b01      	ldr	r3, [pc, #4]	; (13fa8 <format_set+0x8>)
	return 0;
}
   13fa2:	2000      	movs	r0, #0
	log_format_current = log_type;
   13fa4:	6019      	str	r1, [r3, #0]
}
   13fa6:	4770      	bx	lr
   13fa8:	20002eb4 	.word	0x20002eb4

00013fac <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   13fac:	4b02      	ldr	r3, [pc, #8]	; (13fb8 <panic+0xc>)
	log_output_flush(output);
   13fae:	4803      	ldr	r0, [pc, #12]	; (13fbc <panic+0x10>)
   13fb0:	2201      	movs	r2, #1
   13fb2:	701a      	strb	r2, [r3, #0]
   13fb4:	f012 b999 	b.w	262ea <log_output_flush>
   13fb8:	200033d2 	.word	0x200033d2
   13fbc:	0002acf8 	.word	0x0002acf8

00013fc0 <dropped>:
	log_output_dropped_process(output, cnt);
   13fc0:	4801      	ldr	r0, [pc, #4]	; (13fc8 <dropped+0x8>)
   13fc2:	f7ff bf27 	b.w	13e14 <log_output_dropped_process>
   13fc6:	bf00      	nop
   13fc8:	0002acf8 	.word	0x0002acf8

00013fcc <process>:
{
   13fcc:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13fce:	4b06      	ldr	r3, [pc, #24]	; (13fe8 <process+0x1c>)
   13fd0:	6818      	ldr	r0, [r3, #0]
{
   13fd2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13fd4:	f7ff fac0 	bl	13558 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   13fd8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13fda:	4603      	mov	r3, r0
}
   13fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   13fe0:	4802      	ldr	r0, [pc, #8]	; (13fec <process+0x20>)
   13fe2:	220f      	movs	r2, #15
   13fe4:	4718      	bx	r3
   13fe6:	bf00      	nop
   13fe8:	20002eb4 	.word	0x20002eb4
   13fec:	0002acf8 	.word	0x0002acf8

00013ff0 <char_out>:
{
   13ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   13ff2:	4f07      	ldr	r7, [pc, #28]	; (14010 <char_out+0x20>)
   13ff4:	460d      	mov	r5, r1
   13ff6:	4604      	mov	r4, r0
   13ff8:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   13ffa:	42b4      	cmp	r4, r6
   13ffc:	d101      	bne.n	14002 <char_out+0x12>
}
   13ffe:	4628      	mov	r0, r5
   14000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   14002:	f814 1b01 	ldrb.w	r1, [r4], #1
   14006:	68bb      	ldr	r3, [r7, #8]
   14008:	4801      	ldr	r0, [pc, #4]	; (14010 <char_out+0x20>)
   1400a:	685b      	ldr	r3, [r3, #4]
   1400c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   1400e:	e7f4      	b.n	13ffa <char_out+0xa>
   14010:	0002a580 	.word	0x0002a580

00014014 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14018:	4605      	mov	r5, r0
	__asm__ volatile(
   1401a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1401e:	f3ef 8611 	mrs	r6, BASEPRI
   14022:	f383 8812 	msr	BASEPRI_MAX, r3
   14026:	f3bf 8f6f 	isb	sy
	return list->head;
   1402a:	4b0e      	ldr	r3, [pc, #56]	; (14064 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   1402c:	4f0e      	ldr	r7, [pc, #56]	; (14068 <pm_state_notify+0x54>)
   1402e:	681c      	ldr	r4, [r3, #0]
   14030:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1406c <pm_state_notify+0x58>
   14034:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14038:	b92c      	cbnz	r4, 14046 <pm_state_notify+0x32>
	__asm__ volatile(
   1403a:	f386 8811 	msr	BASEPRI, r6
   1403e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   14042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   14046:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1404a:	2d00      	cmp	r5, #0
   1404c:	bf18      	it	ne
   1404e:	4613      	movne	r3, r2
		if (callback) {
   14050:	b12b      	cbz	r3, 1405e <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   14052:	f898 2010 	ldrb.w	r2, [r8, #16]
   14056:	fb09 f202 	mul.w	r2, r9, r2
   1405a:	5cb8      	ldrb	r0, [r7, r2]
   1405c:	4798      	blx	r3
	return node->next;
   1405e:	6824      	ldr	r4, [r4, #0]
   14060:	e7ea      	b.n	14038 <pm_state_notify+0x24>
   14062:	bf00      	nop
   14064:	20002ed0 	.word	0x20002ed0
   14068:	20002ec4 	.word	0x20002ec4
   1406c:	20003358 	.word	0x20003358

00014070 <pm_system_resume>:

void pm_system_resume(void)
{
   14070:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   14072:	4b19      	ldr	r3, [pc, #100]	; (140d8 <pm_system_resume+0x68>)
   14074:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14076:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1407a:	f004 031f 	and.w	r3, r4, #31
   1407e:	2201      	movs	r2, #1
   14080:	409a      	lsls	r2, r3
   14082:	4b16      	ldr	r3, [pc, #88]	; (140dc <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14084:	0961      	lsrs	r1, r4, #5
   14086:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1408a:	43d0      	mvns	r0, r2
   1408c:	e853 1f00 	ldrex	r1, [r3]
   14090:	ea01 0500 	and.w	r5, r1, r0
   14094:	e843 5600 	strex	r6, r5, [r3]
   14098:	2e00      	cmp	r6, #0
   1409a:	d1f7      	bne.n	1408c <pm_system_resume+0x1c>
   1409c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   140a0:	420a      	tst	r2, r1
   140a2:	d013      	beq.n	140cc <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   140a4:	4b0e      	ldr	r3, [pc, #56]	; (140e0 <pm_system_resume+0x70>)
   140a6:	4d0f      	ldr	r5, [pc, #60]	; (140e4 <pm_system_resume+0x74>)
   140a8:	b18b      	cbz	r3, 140ce <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   140aa:	230c      	movs	r3, #12
   140ac:	4363      	muls	r3, r4
   140ae:	18ea      	adds	r2, r5, r3
   140b0:	5ce8      	ldrb	r0, [r5, r3]
   140b2:	7851      	ldrb	r1, [r2, #1]
   140b4:	f012 fdca 	bl	26c4c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   140b8:	2000      	movs	r0, #0
   140ba:	f7ff ffab 	bl	14014 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   140be:	230c      	movs	r3, #12
   140c0:	435c      	muls	r4, r3
   140c2:	192a      	adds	r2, r5, r4
   140c4:	2300      	movs	r3, #0
   140c6:	512b      	str	r3, [r5, r4]
   140c8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   140cc:	bd70      	pop	{r4, r5, r6, pc}
   140ce:	f383 8811 	msr	BASEPRI, r3
   140d2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   140d6:	e7ef      	b.n	140b8 <pm_system_resume+0x48>
   140d8:	20003358 	.word	0x20003358
   140dc:	20002ed8 	.word	0x20002ed8
   140e0:	00026c4d 	.word	0x00026c4d
   140e4:	20002ec4 	.word	0x20002ec4

000140e8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   140e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   140ec:	4b35      	ldr	r3, [pc, #212]	; (141c4 <pm_system_suspend+0xdc>)
{
   140ee:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   140f0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   140f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   140f6:	f3ef 8811 	mrs	r8, BASEPRI
   140fa:	f383 8812 	msr	BASEPRI_MAX, r3
   140fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   14102:	240c      	movs	r4, #12
   14104:	4b30      	ldr	r3, [pc, #192]	; (141c8 <pm_system_suspend+0xe0>)
   14106:	4e31      	ldr	r6, [pc, #196]	; (141cc <pm_system_suspend+0xe4>)
   14108:	436c      	muls	r4, r5
   1410a:	191a      	adds	r2, r3, r4
   1410c:	5d19      	ldrb	r1, [r3, r4]
   1410e:	2900      	cmp	r1, #0
   14110:	d04c      	beq.n	141ac <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14112:	ca07      	ldmia	r2, {r0, r1, r2}
   14114:	eb06 0c04 	add.w	ip, r6, r4
   14118:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   1411c:	2200      	movs	r2, #0
   1411e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   14120:	f388 8811 	msr	BASEPRI, r8
   14124:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14128:	230c      	movs	r3, #12
   1412a:	436b      	muls	r3, r5
   1412c:	18f2      	adds	r2, r6, r3
   1412e:	5cf0      	ldrb	r0, [r6, r3]
   14130:	2800      	cmp	r0, #0
   14132:	d039      	beq.n	141a8 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14134:	1c7b      	adds	r3, r7, #1
   14136:	d010      	beq.n	1415a <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14138:	f8d2 c008 	ldr.w	ip, [r2, #8]
   1413c:	4c24      	ldr	r4, [pc, #144]	; (141d0 <pm_system_suspend+0xe8>)
   1413e:	4a25      	ldr	r2, [pc, #148]	; (141d4 <pm_system_suspend+0xec>)
   14140:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   14144:	2100      	movs	r1, #0
   14146:	fbec 4100 	umlal	r4, r1, ip, r0
   1414a:	2300      	movs	r3, #0
   1414c:	4620      	mov	r0, r4
   1414e:	f7eb ffc7 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   14152:	2101      	movs	r1, #1
   14154:	1a38      	subs	r0, r7, r0
   14156:	f00d f817 	bl	21188 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1415a:	f00f ff9b 	bl	24094 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1415e:	2001      	movs	r0, #1
   14160:	f7ff ff58 	bl	14014 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14164:	f3bf 8f5b 	dmb	ish
   14168:	4b1b      	ldr	r3, [pc, #108]	; (141d8 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1416a:	096a      	lsrs	r2, r5, #5
   1416c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14170:	f005 011f 	and.w	r1, r5, #31
   14174:	2201      	movs	r2, #1
   14176:	408a      	lsls	r2, r1
   14178:	e853 0f00 	ldrex	r0, [r3]
   1417c:	4310      	orrs	r0, r2
   1417e:	e843 0100 	strex	r1, r0, [r3]
   14182:	2900      	cmp	r1, #0
   14184:	d1f8      	bne.n	14178 <pm_system_suspend+0x90>
   14186:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1418a:	4b14      	ldr	r3, [pc, #80]	; (141dc <pm_system_suspend+0xf4>)
   1418c:	b13b      	cbz	r3, 1419e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1418e:	230c      	movs	r3, #12
   14190:	fb03 f005 	mul.w	r0, r3, r5
   14194:	1833      	adds	r3, r6, r0
   14196:	5c30      	ldrb	r0, [r6, r0]
   14198:	7859      	ldrb	r1, [r3, #1]
   1419a:	f012 fd4b 	bl	26c34 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1419e:	f7ff ff67 	bl	14070 <pm_system_resume>
	k_sched_unlock();
   141a2:	f00f ff8b 	bl	240bc <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   141a6:	2001      	movs	r0, #1
}
   141a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   141ac:	4601      	mov	r1, r0
   141ae:	4628      	mov	r0, r5
   141b0:	f000 f816 	bl	141e0 <pm_policy_next_state>
		if (info != NULL) {
   141b4:	2800      	cmp	r0, #0
   141b6:	d0b3      	beq.n	14120 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   141b8:	c807      	ldmia	r0, {r0, r1, r2}
   141ba:	4434      	add	r4, r6
   141bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   141c0:	e7ae      	b.n	14120 <pm_system_suspend+0x38>
   141c2:	bf00      	nop
   141c4:	20003358 	.word	0x20003358
   141c8:	20002eb8 	.word	0x20002eb8
   141cc:	20002ec4 	.word	0x20002ec4
   141d0:	000f423f 	.word	0x000f423f
   141d4:	000f4240 	.word	0x000f4240
   141d8:	20002ed8 	.word	0x20002ed8
   141dc:	00026c35 	.word	0x00026c35

000141e0 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   141e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141e4:	b085      	sub	sp, #20
   141e6:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   141e8:	a903      	add	r1, sp, #12
   141ea:	f000 f843 	bl	14274 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   141ee:	4b1e      	ldr	r3, [pc, #120]	; (14268 <pm_policy_next_state+0x88>)
   141f0:	9d03      	ldr	r5, [sp, #12]
   141f2:	f8d3 a000 	ldr.w	sl, [r3]
   141f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1426c <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   141fa:	1e43      	subs	r3, r0, #1
   141fc:	b21b      	sxth	r3, r3
   141fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14202:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14204:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14208:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1420c:	f04f 0b00 	mov.w	fp, #0
   14210:	b924      	cbnz	r4, 1421c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   14212:	46a1      	mov	r9, r4
}
   14214:	4648      	mov	r0, r9
   14216:	b005      	add	sp, #20
   14218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1421c:	6868      	ldr	r0, [r5, #4]
   1421e:	4a14      	ldr	r2, [pc, #80]	; (14270 <pm_policy_next_state+0x90>)
   14220:	46c4      	mov	ip, r8
   14222:	4659      	mov	r1, fp
   14224:	fbe0 c107 	umlal	ip, r1, r0, r7
   14228:	2300      	movs	r3, #0
   1422a:	4660      	mov	r0, ip
   1422c:	f7eb ff58 	bl	e0 <__aeabi_uldivmod>
   14230:	9001      	str	r0, [sp, #4]
   14232:	68a8      	ldr	r0, [r5, #8]
   14234:	4a0e      	ldr	r2, [pc, #56]	; (14270 <pm_policy_next_state+0x90>)
   14236:	46c4      	mov	ip, r8
   14238:	4659      	mov	r1, fp
   1423a:	fbe0 c107 	umlal	ip, r1, r0, r7
   1423e:	2300      	movs	r3, #0
   14240:	4660      	mov	r0, ip
   14242:	f7eb ff4d 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14246:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
   1424a:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1424c:	d001      	beq.n	14252 <pm_policy_next_state+0x72>
   1424e:	4582      	cmp	sl, r0
   14250:	d905      	bls.n	1425e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   14252:	1c73      	adds	r3, r6, #1
   14254:	d0de      	beq.n	14214 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   14256:	9b01      	ldr	r3, [sp, #4]
   14258:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1425a:	42b0      	cmp	r0, r6
   1425c:	d9da      	bls.n	14214 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1425e:	3c01      	subs	r4, #1
   14260:	b2a4      	uxth	r4, r4
   14262:	3d0c      	subs	r5, #12
   14264:	e7d4      	b.n	14210 <pm_policy_next_state+0x30>
   14266:	bf00      	nop
   14268:	200006b0 	.word	0x200006b0
   1426c:	000f423f 	.word	0x000f423f
   14270:	000f4240 	.word	0x000f4240

00014274 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14274:	b908      	cbnz	r0, 1427a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14276:	4b02      	ldr	r3, [pc, #8]	; (14280 <pm_state_cpu_get_all+0xc>)
   14278:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1427a:	2000      	movs	r0, #0
   1427c:	4770      	bx	lr
   1427e:	bf00      	nop
   14280:	0002ad08 	.word	0x0002ad08

00014284 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   14284:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   14286:	4b11      	ldr	r3, [pc, #68]	; (142cc <flash_area_open+0x48>)
   14288:	681c      	ldr	r4, [r3, #0]
{
   1428a:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   1428c:	b1dc      	cbz	r4, 142c6 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   1428e:	4b10      	ldr	r3, [pc, #64]	; (142d0 <flash_area_open+0x4c>)
   14290:	6819      	ldr	r1, [r3, #0]
   14292:	2300      	movs	r3, #0
   14294:	428b      	cmp	r3, r1
   14296:	db02      	blt.n	1429e <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   14298:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   1429c:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   1429e:	4622      	mov	r2, r4
   142a0:	f812 6b10 	ldrb.w	r6, [r2], #16
   142a4:	4286      	cmp	r6, r0
   142a6:	d002      	beq.n	142ae <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   142a8:	3301      	adds	r3, #1
   142aa:	4614      	mov	r4, r2
   142ac:	e7f2      	b.n	14294 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   142ae:	68e0      	ldr	r0, [r4, #12]
   142b0:	b910      	cbnz	r0, 142b8 <flash_area_open+0x34>
		return -ENODEV;
   142b2:	f06f 0012 	mvn.w	r0, #18
   142b6:	e7f1      	b.n	1429c <flash_area_open+0x18>
   142b8:	f015 fb41 	bl	2993e <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   142bc:	2800      	cmp	r0, #0
   142be:	d0f8      	beq.n	142b2 <flash_area_open+0x2e>
	*fap = area;
   142c0:	602c      	str	r4, [r5, #0]
	return 0;
   142c2:	2000      	movs	r0, #0
   142c4:	e7ea      	b.n	1429c <flash_area_open+0x18>
		return -EACCES;
   142c6:	f06f 000c 	mvn.w	r0, #12
   142ca:	e7e7      	b.n	1429c <flash_area_open+0x18>
   142cc:	200006b4 	.word	0x200006b4
   142d0:	0002ad08 	.word	0x0002ad08

000142d4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   142d4:	b570      	push	{r4, r5, r6, lr}
   142d6:	b088      	sub	sp, #32
   142d8:	4605      	mov	r5, r0
   142da:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   142dc:	b2c0      	uxtb	r0, r0
   142de:	4669      	mov	r1, sp
{
   142e0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   142e2:	f7ff ffcf 	bl	14284 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   142e6:	2800      	cmp	r0, #0
   142e8:	db1b      	blt.n	14322 <flash_area_get_sectors+0x4e>
   142ea:	9800      	ldr	r0, [sp, #0]
   142ec:	b1c8      	cbz	r0, 14322 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   142ee:	6843      	ldr	r3, [r0, #4]
   142f0:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   142f2:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   142f4:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   142f6:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   142f8:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   142fc:	2300      	movs	r3, #0
	cb_data->status = 0;
   142fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   14302:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   14304:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   14306:	f012 f827 	bl	26358 <flash_area_close>
	if (flash_dev == NULL) {
   1430a:	b16d      	cbz	r5, 14328 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   1430c:	4628      	mov	r0, r5
   1430e:	4908      	ldr	r1, [pc, #32]	; (14330 <flash_area_get_sectors+0x5c>)
   14310:	aa01      	add	r2, sp, #4
   14312:	f015 f859 	bl	293c8 <flash_page_foreach>
	if (cb_data->status == 0) {
   14316:	9807      	ldr	r0, [sp, #28]
   14318:	b908      	cbnz	r0, 1431e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   1431a:	9b05      	ldr	r3, [sp, #20]
   1431c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1431e:	b008      	add	sp, #32
   14320:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   14322:	f06f 0015 	mvn.w	r0, #21
   14326:	e7fa      	b.n	1431e <flash_area_get_sectors+0x4a>
		return -ENODEV;
   14328:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1432c:	e7f7      	b.n	1431e <flash_area_get_sectors+0x4a>
   1432e:	bf00      	nop
   14330:	0002635b 	.word	0x0002635b

00014334 <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   14334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
   14336:	2407      	movs	r4, #7
   14338:	9402      	str	r4, [sp, #8]
   1433a:	4c04      	ldr	r4, [pc, #16]	; (1434c <read_pnp_id+0x18>)
   1433c:	9401      	str	r4, [sp, #4]
   1433e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   14342:	9400      	str	r4, [sp, #0]
   14344:	f014 f8c4 	bl	284d0 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
   14348:	b004      	add	sp, #16
   1434a:	bd10      	pop	{r4, pc}
   1434c:	20000ac5 	.word	0x20000ac5

00014350 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   14350:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   14352:	4c08      	ldr	r4, [pc, #32]	; (14374 <read_blvl+0x24>)
{
   14354:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   14356:	7824      	ldrb	r4, [r4, #0]
   14358:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   1435c:	2401      	movs	r4, #1
   1435e:	9402      	str	r4, [sp, #8]
   14360:	f10d 0417 	add.w	r4, sp, #23
   14364:	9401      	str	r4, [sp, #4]
   14366:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1436a:	9400      	str	r4, [sp, #0]
   1436c:	f014 f8b0 	bl	284d0 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   14370:	b006      	add	sp, #24
   14372:	bd10      	pop	{r4, pc}
   14374:	20000acc 	.word	0x20000acc

00014378 <blvl_ccc_cfg_changed>:
{
   14378:	b580      	push	{r7, lr}
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   1437a:	4a0d      	ldr	r2, [pc, #52]	; (143b0 <blvl_ccc_cfg_changed+0x38>)
   1437c:	4b0d      	ldr	r3, [pc, #52]	; (143b4 <blvl_ccc_cfg_changed+0x3c>)
{
   1437e:	af00      	add	r7, sp, #0
	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   14380:	b08a      	sub	sp, #40	; 0x28
   14382:	2901      	cmp	r1, #1
   14384:	bf08      	it	eq
   14386:	4613      	moveq	r3, r2
   14388:	466a      	mov	r2, sp
   1438a:	490b      	ldr	r1, [pc, #44]	; (143b8 <blvl_ccc_cfg_changed+0x40>)
   1438c:	6151      	str	r1, [r2, #20]
   1438e:	490b      	ldr	r1, [pc, #44]	; (143bc <blvl_ccc_cfg_changed+0x44>)
   14390:	e9c2 1306 	strd	r1, r3, [r2, #24]
   14394:	f240 3301 	movw	r3, #769	; 0x301
   14398:	8413      	strh	r3, [r2, #32]
   1439a:	4b09      	ldr	r3, [pc, #36]	; (143c0 <blvl_ccc_cfg_changed+0x48>)
   1439c:	f842 3f10 	str.w	r3, [r2, #16]!
   143a0:	4808      	ldr	r0, [pc, #32]	; (143c4 <blvl_ccc_cfg_changed+0x4c>)
   143a2:	2300      	movs	r3, #0
   143a4:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   143a8:	f7ff fabe 	bl	13928 <z_impl_z_log_msg_static_create>
}
   143ac:	46bd      	mov	sp, r7
   143ae:	bd80      	pop	{r7, pc}
   143b0:	0002bc19 	.word	0x0002bc19
   143b4:	0002bc21 	.word	0x0002bc21
   143b8:	0002bc2a 	.word	0x0002bc2a
   143bc:	0002bc43 	.word	0x0002bc43
   143c0:	01000004 	.word	0x01000004
   143c4:	0002a808 	.word	0x0002a808

000143c8 <hrs_init>:
);

static int hrs_init(void)
{

	hrs_blsc = 0x01;
   143c8:	4b02      	ldr	r3, [pc, #8]	; (143d4 <hrs_init+0xc>)
   143ca:	2201      	movs	r2, #1
   143cc:	701a      	strb	r2, [r3, #0]

	return 0;
}
   143ce:	2000      	movs	r0, #0
   143d0:	4770      	bx	lr
   143d2:	bf00      	nop
   143d4:	200033d3 	.word	0x200033d3

000143d8 <read_blsc>:
{
   143d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   143da:	2401      	movs	r4, #1
   143dc:	9402      	str	r4, [sp, #8]
   143de:	4c04      	ldr	r4, [pc, #16]	; (143f0 <read_blsc+0x18>)
   143e0:	9401      	str	r4, [sp, #4]
   143e2:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   143e6:	9400      	str	r4, [sp, #0]
   143e8:	f014 f872 	bl	284d0 <bt_gatt_attr_read>
}
   143ec:	b004      	add	sp, #16
   143ee:	bd10      	pop	{r4, pc}
   143f0:	200033d3 	.word	0x200033d3

000143f4 <hrmc_ccc_cfg_changed>:
{
   143f4:	b580      	push	{r7, lr}
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   143f6:	4a0d      	ldr	r2, [pc, #52]	; (1442c <hrmc_ccc_cfg_changed+0x38>)
   143f8:	4b0d      	ldr	r3, [pc, #52]	; (14430 <hrmc_ccc_cfg_changed+0x3c>)
{
   143fa:	af00      	add	r7, sp, #0
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   143fc:	b08a      	sub	sp, #40	; 0x28
   143fe:	2901      	cmp	r1, #1
   14400:	bf08      	it	eq
   14402:	4613      	moveq	r3, r2
   14404:	466a      	mov	r2, sp
   14406:	490b      	ldr	r1, [pc, #44]	; (14434 <hrmc_ccc_cfg_changed+0x40>)
   14408:	6151      	str	r1, [r2, #20]
   1440a:	490b      	ldr	r1, [pc, #44]	; (14438 <hrmc_ccc_cfg_changed+0x44>)
   1440c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   14410:	f240 3301 	movw	r3, #769	; 0x301
   14414:	8413      	strh	r3, [r2, #32]
   14416:	4b09      	ldr	r3, [pc, #36]	; (1443c <hrmc_ccc_cfg_changed+0x48>)
   14418:	f842 3f10 	str.w	r3, [r2, #16]!
   1441c:	4808      	ldr	r0, [pc, #32]	; (14440 <hrmc_ccc_cfg_changed+0x4c>)
   1441e:	2300      	movs	r3, #0
   14420:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   14424:	f7ff fa80 	bl	13928 <z_impl_z_log_msg_static_create>
}
   14428:	46bd      	mov	sp, r7
   1442a:	bd80      	pop	{r7, pc}
   1442c:	0002bc19 	.word	0x0002bc19
   14430:	0002bc21 	.word	0x0002bc21
   14434:	0002bc5c 	.word	0x0002bc5c
   14438:	0002bc75 	.word	0x0002bc75
   1443c:	01000004 	.word	0x01000004
   14440:	0002a8d0 	.word	0x0002a8d0

00014444 <set_alert_level>:

static struct alerting_device devices[CONFIG_BT_MAX_CONN];
static enum bt_ias_alert_lvl curr_lvl;

static void set_alert_level(void)
{
   14444:	b538      	push	{r3, r4, r5, lr}
		if (alert_level < devices[i].alert_level) {
			alert_level = devices[i].alert_level;
		}
	}

	if (curr_lvl == alert_level) {
   14446:	4a12      	ldr	r2, [pc, #72]	; (14490 <set_alert_level+0x4c>)
	alert_level = devices[0].alert_level;
   14448:	4b12      	ldr	r3, [pc, #72]	; (14494 <set_alert_level+0x50>)
	if (curr_lvl == alert_level) {
   1444a:	7811      	ldrb	r1, [r2, #0]
	alert_level = devices[0].alert_level;
   1444c:	781b      	ldrb	r3, [r3, #0]
	if (curr_lvl == alert_level) {
   1444e:	4299      	cmp	r1, r3
   14450:	d00b      	beq.n	1446a <set_alert_level+0x26>
		return;
	}

	curr_lvl = alert_level;

	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   14452:	2b02      	cmp	r3, #2
   14454:	4d10      	ldr	r5, [pc, #64]	; (14498 <set_alert_level+0x54>)
	curr_lvl = alert_level;
   14456:	7013      	strb	r3, [r2, #0]
	if (alert_level == BT_IAS_ALERT_LVL_HIGH_ALERT) {
   14458:	d108      	bne.n	1446c <set_alert_level+0x28>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1445a:	4c10      	ldr	r4, [pc, #64]	; (1449c <set_alert_level+0x58>)
   1445c:	e003      	b.n	14466 <set_alert_level+0x22>
			if (cb->high_alert) {
   1445e:	68a3      	ldr	r3, [r4, #8]
   14460:	b103      	cbz	r3, 14464 <set_alert_level+0x20>
				cb->high_alert();
   14462:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14464:	340c      	adds	r4, #12
   14466:	42ac      	cmp	r4, r5
   14468:	d3f9      	bcc.n	1445e <set_alert_level+0x1a>
				cb->no_alert();
			}
		}
		LOG_DBG("No alert");
	}
}
   1446a:	bd38      	pop	{r3, r4, r5, pc}
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   1446c:	2b01      	cmp	r3, #1
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1446e:	4c0b      	ldr	r4, [pc, #44]	; (1449c <set_alert_level+0x58>)
	} else if (alert_level == BT_IAS_ALERT_LVL_MILD_ALERT) {
   14470:	d00a      	beq.n	14488 <set_alert_level+0x44>
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14472:	42ac      	cmp	r4, r5
   14474:	d2f9      	bcs.n	1446a <set_alert_level+0x26>
			if (cb->no_alert) {
   14476:	6823      	ldr	r3, [r4, #0]
   14478:	b103      	cbz	r3, 1447c <set_alert_level+0x38>
				cb->no_alert();
   1447a:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   1447c:	340c      	adds	r4, #12
   1447e:	e7f8      	b.n	14472 <set_alert_level+0x2e>
			if (cb->mild_alert) {
   14480:	6863      	ldr	r3, [r4, #4]
   14482:	b103      	cbz	r3, 14486 <set_alert_level+0x42>
				cb->mild_alert();
   14484:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(bt_ias_cb, cb) {
   14486:	340c      	adds	r4, #12
   14488:	42ac      	cmp	r4, r5
   1448a:	d3f9      	bcc.n	14480 <set_alert_level+0x3c>
   1448c:	e7ed      	b.n	1446a <set_alert_level+0x26>
   1448e:	bf00      	nop
   14490:	200033d4 	.word	0x200033d4
   14494:	200033d5 	.word	0x200033d5
   14498:	0002a7f0 	.word	0x0002a7f0
   1449c:	0002a7e4 	.word	0x0002a7e4

000144a0 <disconnected>:

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   144a0:	b508      	push	{r3, lr}
	devices[bt_conn_index(conn)].alert_level = BT_IAS_ALERT_LVL_NO_ALERT;
   144a2:	f005 f973 	bl	1978c <bt_conn_index>
   144a6:	4b03      	ldr	r3, [pc, #12]	; (144b4 <disconnected+0x14>)
   144a8:	2200      	movs	r2, #0
   144aa:	541a      	strb	r2, [r3, r0]
	set_alert_level();
}
   144ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_alert_level();
   144b0:	f7ff bfc8 	b.w	14444 <set_alert_level>
   144b4:	200033d5 	.word	0x200033d5

000144b8 <bt_ias_write_alert_lvl>:
	return 0;
}

static ssize_t bt_ias_write_alert_lvl(struct bt_conn *conn, const struct bt_gatt_attr *attr,
				      const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   144b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   144ba:	461c      	mov	r4, r3
   144bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   144c0:	4606      	mov	r6, r0
   144c2:	4611      	mov	r1, r2
	struct net_buf_simple data;
	enum bt_ias_alert_lvl alert_val;

	if (offset > 0) {
   144c4:	b9ab      	cbnz	r3, 144f2 <bt_ias_write_alert_lvl+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (len != BT_IAS_ALERT_LVL_LEN) {
   144c6:	2c01      	cmp	r4, #1
   144c8:	d116      	bne.n	144f8 <bt_ias_write_alert_lvl+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	net_buf_simple_init_with_data(&data, (void *)buf, len);
   144ca:	4622      	mov	r2, r4
   144cc:	a801      	add	r0, sp, #4
   144ce:	f014 fdf1 	bl	290b4 <net_buf_simple_init_with_data>
	alert_val = net_buf_simple_pull_u8(&data);
   144d2:	a801      	add	r0, sp, #4
   144d4:	f014 fe27 	bl	29126 <net_buf_simple_pull_u8>
   144d8:	4605      	mov	r5, r0
	devices[bt_conn_index(conn)].alert_level = alert_val;
   144da:	4630      	mov	r0, r6
   144dc:	f005 f956 	bl	1978c <bt_conn_index>
   144e0:	4b08      	ldr	r3, [pc, #32]	; (14504 <bt_ias_write_alert_lvl+0x4c>)

	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   144e2:	2d02      	cmp	r5, #2
	devices[bt_conn_index(conn)].alert_level = alert_val;
   144e4:	541d      	strb	r5, [r3, r0]
	if (alert_val < BT_IAS_ALERT_LVL_NO_ALERT || alert_val > BT_IAS_ALERT_LVL_HIGH_ALERT) {
   144e6:	d80a      	bhi.n	144fe <bt_ias_write_alert_lvl+0x46>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}
	set_alert_level();
   144e8:	f7ff ffac 	bl	14444 <set_alert_level>

	return len;
   144ec:	4620      	mov	r0, r4
}
   144ee:	b004      	add	sp, #16
   144f0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   144f2:	f06f 0006 	mvn.w	r0, #6
   144f6:	e7fa      	b.n	144ee <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   144f8:	f06f 000c 	mvn.w	r0, #12
   144fc:	e7f7      	b.n	144ee <bt_ias_write_alert_lvl+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   144fe:	f06f 0012 	mvn.w	r0, #18
   14502:	e7f4      	b.n	144ee <bt_ias_write_alert_lvl+0x36>
   14504:	200033d5 	.word	0x200033d5

00014508 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   14508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   1450c:	4b0f      	ldr	r3, [pc, #60]	; (1454c <settings_save_one+0x44>)
   1450e:	681c      	ldr	r4, [r3, #0]
{
   14510:	4605      	mov	r5, r0
   14512:	460e      	mov	r6, r1
   14514:	4617      	mov	r7, r2
	if (!cs) {
   14516:	b1ac      	cbz	r4, 14544 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   14518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1451c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14520:	480b      	ldr	r0, [pc, #44]	; (14550 <settings_save_one+0x48>)
   14522:	f00f f885 	bl	23630 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   14526:	6863      	ldr	r3, [r4, #4]
   14528:	4632      	mov	r2, r6
   1452a:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1452e:	4629      	mov	r1, r5
   14530:	463b      	mov	r3, r7
   14532:	4620      	mov	r0, r4
   14534:	47c0      	blx	r8
   14536:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14538:	4805      	ldr	r0, [pc, #20]	; (14550 <settings_save_one+0x48>)
   1453a:	f00f f8f3 	bl	23724 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   1453e:	4620      	mov	r0, r4
   14540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   14544:	f06f 0401 	mvn.w	r4, #1
   14548:	e7f9      	b.n	1453e <settings_save_one+0x36>
   1454a:	bf00      	nop
   1454c:	20002edc 	.word	0x20002edc
   14550:	20000ba0 	.word	0x20000ba0

00014554 <settings_src_register>:
	parent->next = child;
   14554:	2300      	movs	r3, #0
   14556:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   14558:	4b04      	ldr	r3, [pc, #16]	; (1456c <settings_src_register+0x18>)
   1455a:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1455c:	b912      	cbnz	r2, 14564 <settings_src_register+0x10>
	list->head = node;
   1455e:	e9c3 0000 	strd	r0, r0, [r3]
}
   14562:	4770      	bx	lr
	parent->next = child;
   14564:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14566:	6058      	str	r0, [r3, #4]
}
   14568:	4770      	bx	lr
   1456a:	bf00      	nop
   1456c:	20002ee0 	.word	0x20002ee0

00014570 <settings_dst_register>:
	settings_save_dst = cs;
   14570:	4b01      	ldr	r3, [pc, #4]	; (14578 <settings_dst_register+0x8>)
   14572:	6018      	str	r0, [r3, #0]
}
   14574:	4770      	bx	lr
   14576:	bf00      	nop
   14578:	20002edc 	.word	0x20002edc

0001457c <settings_load_subtree>:
{
   1457c:	b530      	push	{r4, r5, lr}
   1457e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   14580:	2300      	movs	r3, #0
{
   14582:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   14584:	e9cd 3302 	strd	r3, r3, [sp, #8]
   14588:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   1458a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1458e:	480c      	ldr	r0, [pc, #48]	; (145c0 <settings_load_subtree+0x44>)
   14590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14594:	f00f f84c 	bl	23630 <z_impl_k_mutex_lock>
	return list->head;
   14598:	4b0a      	ldr	r3, [pc, #40]	; (145c4 <settings_load_subtree+0x48>)
   1459a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1459c:	b94c      	cbnz	r4, 145b2 <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1459e:	4628      	mov	r0, r5
   145a0:	f000 f8e4 	bl	1476c <settings_commit_subtree>
   145a4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   145a6:	4806      	ldr	r0, [pc, #24]	; (145c0 <settings_load_subtree+0x44>)
   145a8:	f00f f8bc 	bl	23724 <z_impl_k_mutex_unlock>
}
   145ac:	4620      	mov	r0, r4
   145ae:	b005      	add	sp, #20
   145b0:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   145b2:	6863      	ldr	r3, [r4, #4]
   145b4:	4620      	mov	r0, r4
   145b6:	681b      	ldr	r3, [r3, #0]
   145b8:	a901      	add	r1, sp, #4
   145ba:	4798      	blx	r3
	return node->next;
   145bc:	6824      	ldr	r4, [r4, #0]
   145be:	e7ed      	b.n	1459c <settings_load_subtree+0x20>
   145c0:	20000ba0 	.word	0x20000ba0
   145c4:	20002ee0 	.word	0x20002ee0

000145c8 <settings_load_subtree_direct>:
{
   145c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   145ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
   145ce:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   145d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145d4:	480a      	ldr	r0, [pc, #40]	; (14600 <settings_load_subtree_direct+0x38>)
   145d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145da:	f00f f829 	bl	23630 <z_impl_k_mutex_lock>
	return list->head;
   145de:	4b09      	ldr	r3, [pc, #36]	; (14604 <settings_load_subtree_direct+0x3c>)
   145e0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   145e2:	b92c      	cbnz	r4, 145f0 <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   145e4:	4806      	ldr	r0, [pc, #24]	; (14600 <settings_load_subtree_direct+0x38>)
   145e6:	f00f f89d 	bl	23724 <z_impl_k_mutex_unlock>
}
   145ea:	4620      	mov	r0, r4
   145ec:	b004      	add	sp, #16
   145ee:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   145f0:	6863      	ldr	r3, [r4, #4]
   145f2:	4620      	mov	r0, r4
   145f4:	681b      	ldr	r3, [r3, #0]
   145f6:	a901      	add	r1, sp, #4
   145f8:	4798      	blx	r3
	return node->next;
   145fa:	6824      	ldr	r4, [r4, #0]
   145fc:	e7f1      	b.n	145e2 <settings_load_subtree_direct+0x1a>
   145fe:	bf00      	nop
   14600:	20000ba0 	.word	0x20000ba0
   14604:	20002ee0 	.word	0x20002ee0

00014608 <settings_store_init>:
	list->head = NULL;
   14608:	4b02      	ldr	r3, [pc, #8]	; (14614 <settings_store_init+0xc>)
   1460a:	2200      	movs	r2, #0
	list->tail = NULL;
   1460c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   14610:	4770      	bx	lr
   14612:	bf00      	nop
   14614:	20002ee0 	.word	0x20002ee0

00014618 <settings_init>:
	list->head = NULL;
   14618:	4b02      	ldr	r3, [pc, #8]	; (14624 <settings_init+0xc>)
   1461a:	2200      	movs	r2, #0
	list->tail = NULL;
   1461c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   14620:	f7ff bff2 	b.w	14608 <settings_store_init>
   14624:	20002ee8 	.word	0x20002ee8

00014628 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   14628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1462c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   1462e:	460c      	mov	r4, r1
   14630:	b109      	cbz	r1, 14636 <settings_parse_and_lookup+0xe>
		*next = NULL;
   14632:	2300      	movs	r3, #0
   14634:	600b      	str	r3, [r1, #0]
{
   14636:	4d1f      	ldr	r5, [pc, #124]	; (146b4 <settings_parse_and_lookup+0x8c>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14638:	f8df 907c 	ldr.w	r9, [pc, #124]	; 146b8 <settings_parse_and_lookup+0x90>
{
   1463c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1463e:	454d      	cmp	r5, r9
   14640:	d30f      	bcc.n	14662 <settings_parse_and_lookup+0x3a>
	return list->head;
   14642:	4b1e      	ldr	r3, [pc, #120]	; (146bc <settings_parse_and_lookup+0x94>)
   14644:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14646:	b385      	cbz	r5, 146aa <settings_parse_and_lookup+0x82>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14648:	f855 8c14 	ldr.w	r8, [r5, #-20]
   1464c:	aa01      	add	r2, sp, #4
   1464e:	4641      	mov	r1, r8
   14650:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   14652:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14654:	f011 fec6 	bl	263e4 <settings_name_steq>
   14658:	b310      	cbz	r0, 146a0 <settings_parse_and_lookup+0x78>
			continue;
		}
		if (!bestmatch) {
   1465a:	b9d6      	cbnz	r6, 14692 <settings_parse_and_lookup+0x6a>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1465c:	bb14      	cbnz	r4, 146a4 <settings_parse_and_lookup+0x7c>
{
   1465e:	462e      	mov	r6, r5
   14660:	e01e      	b.n	146a0 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   14662:	f8d5 8000 	ldr.w	r8, [r5]
   14666:	aa01      	add	r2, sp, #4
   14668:	4641      	mov	r1, r8
   1466a:	4638      	mov	r0, r7
   1466c:	f011 feba 	bl	263e4 <settings_name_steq>
   14670:	b150      	cbz	r0, 14688 <settings_parse_and_lookup+0x60>
		if (!bestmatch) {
   14672:	b916      	cbnz	r6, 1467a <settings_parse_and_lookup+0x52>
			if (next) {
   14674:	b954      	cbnz	r4, 1468c <settings_parse_and_lookup+0x64>
{
   14676:	462e      	mov	r6, r5
   14678:	e006      	b.n	14688 <settings_parse_and_lookup+0x60>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1467a:	6831      	ldr	r1, [r6, #0]
   1467c:	2200      	movs	r2, #0
   1467e:	4640      	mov	r0, r8
   14680:	f011 feb0 	bl	263e4 <settings_name_steq>
   14684:	2800      	cmp	r0, #0
   14686:	d1f5      	bne.n	14674 <settings_parse_and_lookup+0x4c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14688:	3514      	adds	r5, #20
   1468a:	e7d8      	b.n	1463e <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   1468c:	9b01      	ldr	r3, [sp, #4]
   1468e:	6023      	str	r3, [r4, #0]
   14690:	e7f1      	b.n	14676 <settings_parse_and_lookup+0x4e>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   14692:	6831      	ldr	r1, [r6, #0]
   14694:	2200      	movs	r2, #0
   14696:	4640      	mov	r0, r8
   14698:	f011 fea4 	bl	263e4 <settings_name_steq>
   1469c:	2800      	cmp	r0, #0
   1469e:	d1dd      	bne.n	1465c <settings_parse_and_lookup+0x34>
	return node->next;
   146a0:	696d      	ldr	r5, [r5, #20]
   146a2:	e7d0      	b.n	14646 <settings_parse_and_lookup+0x1e>
				*next = tmpnext;
   146a4:	9b01      	ldr	r3, [sp, #4]
   146a6:	6023      	str	r3, [r4, #0]
   146a8:	e7d9      	b.n	1465e <settings_parse_and_lookup+0x36>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   146aa:	4630      	mov	r0, r6
   146ac:	b003      	add	sp, #12
   146ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   146b2:	bf00      	nop
   146b4:	0002a968 	.word	0x0002a968
   146b8:	0002a9e0 	.word	0x0002a9e0
   146bc:	20002ee8 	.word	0x20002ee8

000146c0 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   146c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   146c4:	b084      	sub	sp, #16
   146c6:	af02      	add	r7, sp, #8
   146c8:	4604      	mov	r4, r0
   146ca:	f8d7 9028 	ldr.w	r9, [r7, #40]	; 0x28
	int rc;
	const char *name_key = name;
   146ce:	6078      	str	r0, [r7, #4]
{
   146d0:	460d      	mov	r5, r1
   146d2:	4616      	mov	r6, r2
   146d4:	4698      	mov	r8, r3

	if (load_arg && load_arg->subtree &&
   146d6:	f1b9 0f00 	cmp.w	r9, #0
   146da:	d007      	beq.n	146ec <settings_call_set_handler+0x2c>
   146dc:	f8d9 1000 	ldr.w	r1, [r9]
   146e0:	bb41      	cbnz	r1, 14734 <settings_call_set_handler+0x74>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   146e2:	f8d9 a004 	ldr.w	sl, [r9, #4]
   146e6:	f1ba 0f00 	cmp.w	sl, #0
   146ea:	d12a      	bne.n	14742 <settings_call_set_handler+0x82>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   146ec:	1d39      	adds	r1, r7, #4
   146ee:	4620      	mov	r0, r4
   146f0:	f7ff ff9a 	bl	14628 <settings_parse_and_lookup>
		if (!ch) {
   146f4:	b318      	cbz	r0, 1473e <settings_call_set_handler+0x7e>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   146f6:	f8d0 9008 	ldr.w	r9, [r0, #8]
   146fa:	6878      	ldr	r0, [r7, #4]
   146fc:	4643      	mov	r3, r8
   146fe:	4632      	mov	r2, r6
   14700:	4629      	mov	r1, r5
   14702:	47c8      	blx	r9

		if (rc != 0) {
   14704:	b1d8      	cbz	r0, 1473e <settings_call_set_handler+0x7e>
			LOG_ERR("set-value failure. key: %s error(%d)",
   14706:	466d      	mov	r5, sp
   14708:	b08a      	sub	sp, #40	; 0x28
   1470a:	aa02      	add	r2, sp, #8
   1470c:	4b13      	ldr	r3, [pc, #76]	; (1475c <settings_call_set_handler+0x9c>)
   1470e:	6153      	str	r3, [r2, #20]
   14710:	4b13      	ldr	r3, [pc, #76]	; (14760 <settings_call_set_handler+0xa0>)
   14712:	6210      	str	r0, [r2, #32]
   14714:	e9c2 3406 	strd	r3, r4, [r2, #24]
   14718:	f240 3301 	movw	r3, #769	; 0x301
   1471c:	8493      	strh	r3, [r2, #36]	; 0x24
   1471e:	4b11      	ldr	r3, [pc, #68]	; (14764 <settings_call_set_handler+0xa4>)
   14720:	f842 3f10 	str.w	r3, [r2, #16]!
   14724:	4810      	ldr	r0, [pc, #64]	; (14768 <settings_call_set_handler+0xa8>)
   14726:	2300      	movs	r3, #0
   14728:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1472c:	f7ff f8fc 	bl	13928 <z_impl_z_log_msg_static_create>
   14730:	46ad      	mov	sp, r5
				name, rc);
			/* Ignoring the error */
			rc = 0;
   14732:	e004      	b.n	1473e <settings_call_set_handler+0x7e>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   14734:	1d3a      	adds	r2, r7, #4
   14736:	f011 fe55 	bl	263e4 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   1473a:	2800      	cmp	r0, #0
   1473c:	d1d1      	bne.n	146e2 <settings_call_set_handler+0x22>
		return 0;
   1473e:	2000      	movs	r0, #0
   14740:	e007      	b.n	14752 <settings_call_set_handler+0x92>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   14742:	f8d9 3008 	ldr.w	r3, [r9, #8]
   14746:	9300      	str	r3, [sp, #0]
   14748:	6878      	ldr	r0, [r7, #4]
   1474a:	4643      	mov	r3, r8
   1474c:	4632      	mov	r2, r6
   1474e:	4629      	mov	r1, r5
   14750:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   14752:	3708      	adds	r7, #8
   14754:	46bd      	mov	sp, r7
   14756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1475a:	bf00      	nop
   1475c:	0002bc92 	.word	0x0002bc92
   14760:	0002bcbb 	.word	0x0002bcbb
   14764:	01000005 	.word	0x01000005
   14768:	0002a928 	.word	0x0002a928

0001476c <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   1476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   1476e:	4c18      	ldr	r4, [pc, #96]	; (147d0 <settings_commit_subtree+0x64>)
   14770:	4f18      	ldr	r7, [pc, #96]	; (147d4 <settings_commit_subtree+0x68>)
{
   14772:	4606      	mov	r6, r0
	rc = 0;
   14774:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14776:	42bc      	cmp	r4, r7
   14778:	d308      	bcc.n	1478c <settings_commit_subtree+0x20>
	return list->head;
   1477a:	4b17      	ldr	r3, [pc, #92]	; (147d8 <settings_commit_subtree+0x6c>)
   1477c:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1477e:	b32c      	cbz	r4, 147cc <settings_commit_subtree+0x60>
   14780:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   14782:	b9b6      	cbnz	r6, 147b2 <settings_commit_subtree+0x46>
			continue;
		}
		if (ch->h_commit) {
   14784:	68e3      	ldr	r3, [r4, #12]
   14786:	b9e3      	cbnz	r3, 147c2 <settings_commit_subtree+0x56>
	return node->next;
   14788:	6964      	ldr	r4, [r4, #20]
   1478a:	e7f8      	b.n	1477e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1478c:	b92e      	cbnz	r6, 1479a <settings_commit_subtree+0x2e>
		if (ch->h_commit) {
   1478e:	68e3      	ldr	r3, [r4, #12]
   14790:	b95b      	cbnz	r3, 147aa <settings_commit_subtree+0x3e>
{
   14792:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   14794:	3414      	adds	r4, #20
   14796:	4605      	mov	r5, r0
   14798:	e7ed      	b.n	14776 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1479a:	6820      	ldr	r0, [r4, #0]
   1479c:	2200      	movs	r2, #0
   1479e:	4631      	mov	r1, r6
   147a0:	f011 fe20 	bl	263e4 <settings_name_steq>
   147a4:	2800      	cmp	r0, #0
   147a6:	d1f2      	bne.n	1478e <settings_commit_subtree+0x22>
   147a8:	e7f3      	b.n	14792 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   147aa:	4798      	blx	r3
			if (!rc) {
   147ac:	2d00      	cmp	r5, #0
   147ae:	d1f0      	bne.n	14792 <settings_commit_subtree+0x26>
   147b0:	e7f0      	b.n	14794 <settings_commit_subtree+0x28>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   147b2:	6820      	ldr	r0, [r4, #0]
   147b4:	2200      	movs	r2, #0
   147b6:	4631      	mov	r1, r6
   147b8:	f011 fe14 	bl	263e4 <settings_name_steq>
   147bc:	2800      	cmp	r0, #0
   147be:	d1e1      	bne.n	14784 <settings_commit_subtree+0x18>
   147c0:	e7e2      	b.n	14788 <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   147c2:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   147c4:	2d00      	cmp	r5, #0
   147c6:	bf08      	it	eq
   147c8:	4605      	moveq	r5, r0
   147ca:	e7dd      	b.n	14788 <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   147cc:	4628      	mov	r0, r5
   147ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   147d0:	0002a968 	.word	0x0002a968
   147d4:	0002a9e0 	.word	0x0002a9e0
   147d8:	20002ee8 	.word	0x20002ee8

000147dc <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   147dc:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   147de:	4d0c      	ldr	r5, [pc, #48]	; (14810 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   147e0:	480c      	ldr	r0, [pc, #48]	; (14814 <settings_subsys_init+0x38>)
   147e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   147ea:	f00e ff21 	bl	23630 <z_impl_k_mutex_lock>
   147ee:	782b      	ldrb	r3, [r5, #0]
   147f0:	b93b      	cbnz	r3, 14802 <settings_subsys_init+0x26>
		settings_init();
   147f2:	f7ff ff11 	bl	14618 <settings_init>

		err = settings_backend_init();
   147f6:	f000 f86d 	bl	148d4 <settings_backend_init>

		if (!err) {
   147fa:	4604      	mov	r4, r0
   147fc:	b910      	cbnz	r0, 14804 <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   147fe:	2301      	movs	r3, #1
   14800:	702b      	strb	r3, [r5, #0]
	int err = 0;
   14802:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   14804:	4803      	ldr	r0, [pc, #12]	; (14814 <settings_subsys_init+0x38>)
   14806:	f00e ff8d 	bl	23724 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   1480a:	4620      	mov	r0, r4
   1480c:	bd38      	pop	{r3, r4, r5, pc}
   1480e:	bf00      	nop
   14810:	200033d6 	.word	0x200033d6
   14814:	20000ba0 	.word	0x20000ba0

00014818 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   14818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   1481c:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   1481e:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 148d0 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   14822:	3401      	adds	r4, #1
{
   14824:	b098      	sub	sp, #96	; 0x60
   14826:	4680      	mov	r8, r0
   14828:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   1482a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1482c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   14830:	1e65      	subs	r5, r4, #1
   14832:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   14834:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   14838:	d047      	beq.n	148ca <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1483a:	234a      	movs	r3, #74	; 0x4a
   1483c:	aa05      	add	r2, sp, #20
   1483e:	4629      	mov	r1, r5
   14840:	4630      	mov	r0, r6
   14842:	f011 fcd4 	bl	261ee <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14846:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   1484a:	343f      	adds	r4, #63	; 0x3f
   1484c:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   1484e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14850:	4621      	mov	r1, r4
   14852:	2301      	movs	r3, #1
   14854:	f10d 020b 	add.w	r2, sp, #11
   14858:	4630      	mov	r0, r6
   1485a:	f011 fcc8 	bl	261ee <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   1485e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   14860:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   14862:	dc03      	bgt.n	1486c <settings_nvs_load+0x54>
   14864:	2800      	cmp	r0, #0
   14866:	dc03      	bgt.n	14870 <settings_nvs_load+0x58>
{
   14868:	462c      	mov	r4, r5
   1486a:	e7e1      	b.n	14830 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   1486c:	2800      	cmp	r0, #0
   1486e:	dc16      	bgt.n	1489e <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   14870:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   14874:	42ab      	cmp	r3, r5
   14876:	d109      	bne.n	1488c <settings_nvs_load+0x74>
				cf->last_name_id--;
   14878:	4642      	mov	r2, r8
   1487a:	1e6b      	subs	r3, r5, #1
   1487c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   14880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14884:	2302      	movs	r3, #2
   14886:	4630      	mov	r0, r6
   14888:	f7fe fc5a 	bl	13140 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   1488c:	4629      	mov	r1, r5
   1488e:	4630      	mov	r0, r6
   14890:	f011 fca9 	bl	261e6 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   14894:	4621      	mov	r1, r4
   14896:	4630      	mov	r0, r6
   14898:	f011 fca5 	bl	261e6 <nvs_delete>
			continue;
   1489c:	e7e4      	b.n	14868 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   1489e:	f107 0360 	add.w	r3, r7, #96	; 0x60
   148a2:	eb0d 0703 	add.w	r7, sp, r3
   148a6:	2300      	movs	r3, #0
   148a8:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   148ac:	4652      	mov	r2, sl
   148ae:	f8cd 9000 	str.w	r9, [sp]
   148b2:	ab03      	add	r3, sp, #12
   148b4:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   148b6:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   148b8:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   148bc:	f7ff ff00 	bl	146c0 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   148c0:	2800      	cmp	r0, #0
   148c2:	d0d1      	beq.n	14868 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   148c4:	b018      	add	sp, #96	; 0x60
   148c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   148ca:	2000      	movs	r0, #0
	return ret;
   148cc:	e7fa      	b.n	148c4 <settings_nvs_load+0xac>
   148ce:	bf00      	nop
   148d0:	00026455 	.word	0x00026455

000148d4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   148d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   148d6:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   148d8:	4669      	mov	r1, sp
   148da:	2003      	movs	r0, #3
	uint32_t sector_cnt = 1;
   148dc:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   148de:	f7ff fcd1 	bl	14284 <flash_area_open>
	if (rc) {
   148e2:	4604      	mov	r4, r0
   148e4:	bb60      	cbnz	r0, 14940 <settings_backend_init+0x6c>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   148e6:	aa02      	add	r2, sp, #8
   148e8:	a901      	add	r1, sp, #4
   148ea:	2003      	movs	r0, #3
   148ec:	f7ff fcf2 	bl	142d4 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc != 0 && rc != -ENOMEM) {
   148f0:	4604      	mov	r4, r0
   148f2:	b110      	cbz	r0, 148fa <settings_backend_init+0x26>
   148f4:	f110 0f0c 	cmn.w	r0, #12
   148f8:	d122      	bne.n	14940 <settings_backend_init+0x6c>
		return rc;
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   148fa:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   148fc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   14900:	d223      	bcs.n	1494a <settings_backend_init+0x76>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   14902:	9a00      	ldr	r2, [sp, #0]
   14904:	2300      	movs	r3, #0
   14906:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   14908:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   1490a:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   1490c:	4284      	cmp	r4, r0
   1490e:	d31a      	bcc.n	14946 <settings_backend_init+0x72>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   14910:	3301      	adds	r3, #1
   14912:	2b08      	cmp	r3, #8
   14914:	d1f9      	bne.n	1490a <settings_backend_init+0x36>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   14916:	4d0e      	ldr	r5, [pc, #56]	; (14950 <settings_backend_init+0x7c>)
   14918:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   1491a:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1491c:	6853      	ldr	r3, [r2, #4]
   1491e:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   14920:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   14922:	68d3      	ldr	r3, [r2, #12]
   14924:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   14926:	f011 fe2f 	bl	26588 <settings_nvs_backend_init>
	if (rc) {
   1492a:	4604      	mov	r4, r0
   1492c:	b940      	cbnz	r0, 14940 <settings_backend_init+0x6c>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1492e:	4e09      	ldr	r6, [pc, #36]	; (14954 <settings_backend_init+0x80>)
   14930:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   14932:	4628      	mov	r0, r5
   14934:	f7ff fe0e 	bl	14554 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   14938:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1493a:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   1493c:	f7ff fe18 	bl	14570 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   14940:	4620      	mov	r0, r4
   14942:	b004      	add	sp, #16
   14944:	bd70      	pop	{r4, r5, r6, pc}
   14946:	b29b      	uxth	r3, r3
   14948:	e7e5      	b.n	14916 <settings_backend_init+0x42>
		return -EDOM;
   1494a:	f06f 0420 	mvn.w	r4, #32
   1494e:	e7f7      	b.n	14940 <settings_backend_init+0x6c>
   14950:	20002ef0 	.word	0x20002ef0
   14954:	20000728 	.word	0x20000728

00014958 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14958:	4904      	ldr	r1, [pc, #16]	; (1496c <sub_bytes+0x14>)
   1495a:	1e43      	subs	r3, r0, #1
   1495c:	300f      	adds	r0, #15
   1495e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14962:	5c8a      	ldrb	r2, [r1, r2]
   14964:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14966:	4283      	cmp	r3, r0
   14968:	d1f9      	bne.n	1495e <sub_bytes+0x6>
	}
}
   1496a:	4770      	bx	lr
   1496c:	0002bcd5 	.word	0x0002bcd5

00014970 <tc_aes128_set_encrypt_key>:
{
   14970:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14972:	4e26      	ldr	r6, [pc, #152]	; (14a0c <tc_aes128_set_encrypt_key+0x9c>)
{
   14974:	4607      	mov	r7, r0
   14976:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14978:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   1497a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   1497c:	ad01      	add	r5, sp, #4
   1497e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14984:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14988:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   1498c:	4638      	mov	r0, r7
   1498e:	2f00      	cmp	r7, #0
   14990:	d038      	beq.n	14a04 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14992:	2c00      	cmp	r4, #0
   14994:	d038      	beq.n	14a08 <tc_aes128_set_encrypt_key+0x98>
   14996:	1f38      	subs	r0, r7, #4
   14998:	4621      	mov	r1, r4
   1499a:	4602      	mov	r2, r0
   1499c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1499e:	784b      	ldrb	r3, [r1, #1]
   149a0:	780d      	ldrb	r5, [r1, #0]
   149a2:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   149a4:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   149a8:	78cd      	ldrb	r5, [r1, #3]
   149aa:	432b      	orrs	r3, r5
   149ac:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   149ae:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   149b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   149b4:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   149b6:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   149ba:	d1f0      	bne.n	1499e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   149bc:	4c14      	ldr	r4, [pc, #80]	; (14a10 <tc_aes128_set_encrypt_key+0xa0>)
   149be:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   149c0:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   149c2:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   149c4:	d116      	bne.n	149f4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   149c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   149ca:	5ca5      	ldrb	r5, [r4, r2]
   149cc:	0e1a      	lsrs	r2, r3, #24
   149ce:	5ca2      	ldrb	r2, [r4, r2]
   149d0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   149d4:	f3c3 2507 	ubfx	r5, r3, #8, #8
   149d8:	b2db      	uxtb	r3, r3
   149da:	5d65      	ldrb	r5, [r4, r5]
   149dc:	5ce3      	ldrb	r3, [r4, r3]
   149de:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   149e2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   149e6:	f021 0303 	bic.w	r3, r1, #3
   149ea:	3330      	adds	r3, #48	; 0x30
   149ec:	446b      	add	r3, sp
   149ee:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   149f2:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   149f4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   149f8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   149fa:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   149fc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   149fe:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14a00:	d1de      	bne.n	149c0 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14a02:	2001      	movs	r0, #1
}
   14a04:	b00d      	add	sp, #52	; 0x34
   14a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14a08:	4620      	mov	r0, r4
   14a0a:	e7fb      	b.n	14a04 <tc_aes128_set_encrypt_key+0x94>
   14a0c:	0002a9f4 	.word	0x0002a9f4
   14a10:	0002bcd5 	.word	0x0002bcd5

00014a14 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14a14:	4901      	ldr	r1, [pc, #4]	; (14a1c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14a16:	2210      	movs	r2, #16
	str	r2, [r1]
   14a18:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14a1a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14a1c:	e000ed10 	.word	0xe000ed10

00014a20 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14a20:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14a22:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14a24:	f380 8811 	msr	BASEPRI, r0
	isb
   14a28:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14a2c:	f3bf 8f4f 	dsb	sy
   14a30:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14a32:	b662      	cpsie	i
	isb
   14a34:	f3bf 8f6f 	isb	sy

	bx	lr
   14a38:	4770      	bx	lr
   14a3a:	bf00      	nop

00014a3c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14a3c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14a3e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14a40:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14a44:	f3bf 8f4f 	dsb	sy
   14a48:	bf20      	wfe

	msr	BASEPRI, r0
   14a4a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14a4e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14a50:	4770      	bx	lr
   14a52:	bf00      	nop

00014a54 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a58:	4682      	mov	sl, r0
   14a5a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14a5c:	460c      	mov	r4, r1
   14a5e:	2900      	cmp	r1, #0
   14a60:	d052      	beq.n	14b08 <z_arm_fatal_error+0xb4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14a62:	466e      	mov	r6, sp
   14a64:	b08a      	sub	sp, #40	; 0x28
   14a66:	e9d1 1200 	ldrd	r1, r2, [r1]
   14a6a:	68a3      	ldr	r3, [r4, #8]
   14a6c:	466d      	mov	r5, sp
   14a6e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 14b18 <z_arm_fatal_error+0xc4>
   14a72:	482a      	ldr	r0, [pc, #168]	; (14b1c <z_arm_fatal_error+0xc8>)
   14a74:	6168      	str	r0, [r5, #20]
   14a76:	46a8      	mov	r8, r5
   14a78:	f04f 0b06 	mov.w	fp, #6
   14a7c:	e9c5 9106 	strd	r9, r1, [r5, #24]
   14a80:	e9c5 2308 	strd	r2, r3, [r5, #32]
   14a84:	f848 bf10 	str.w	fp, [r8, #16]!
   14a88:	4825      	ldr	r0, [pc, #148]	; (14b20 <z_arm_fatal_error+0xcc>)
   14a8a:	4642      	mov	r2, r8
   14a8c:	2300      	movs	r3, #0
   14a8e:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   14a92:	f7fe ff49 	bl	13928 <z_impl_z_log_msg_static_create>
   14a96:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14a98:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14a9c:	6963      	ldr	r3, [r4, #20]
   14a9e:	46ad      	mov	sp, r5
   14aa0:	4820      	ldr	r0, [pc, #128]	; (14b24 <z_arm_fatal_error+0xd0>)
   14aa2:	626b      	str	r3, [r5, #36]	; 0x24
   14aa4:	e9c5 0905 	strd	r0, r9, [r5, #20]
   14aa8:	e9c5 1207 	strd	r1, r2, [r5, #28]
   14aac:	f8c5 b010 	str.w	fp, [r5, #16]
   14ab0:	481b      	ldr	r0, [pc, #108]	; (14b20 <z_arm_fatal_error+0xcc>)
   14ab2:	2300      	movs	r3, #0
   14ab4:	4642      	mov	r2, r8
   14ab6:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   14aba:	f7fe ff35 	bl	13928 <z_impl_z_log_msg_static_create>
   14abe:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14ac0:	b088      	sub	sp, #32
   14ac2:	69e3      	ldr	r3, [r4, #28]
   14ac4:	466d      	mov	r5, sp
   14ac6:	4a18      	ldr	r2, [pc, #96]	; (14b28 <z_arm_fatal_error+0xd4>)
   14ac8:	61eb      	str	r3, [r5, #28]
   14aca:	46a8      	mov	r8, r5
   14acc:	f04f 0b04 	mov.w	fp, #4
   14ad0:	e9c5 2905 	strd	r2, r9, [r5, #20]
   14ad4:	f848 bf10 	str.w	fp, [r8, #16]!
   14ad8:	4811      	ldr	r0, [pc, #68]	; (14b20 <z_arm_fatal_error+0xcc>)
   14ada:	2300      	movs	r3, #0
   14adc:	4642      	mov	r2, r8
   14ade:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14ae2:	f7fe ff21 	bl	13928 <z_impl_z_log_msg_static_create>
   14ae6:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14ae8:	69a3      	ldr	r3, [r4, #24]
   14aea:	46ad      	mov	sp, r5
   14aec:	4a0f      	ldr	r2, [pc, #60]	; (14b2c <z_arm_fatal_error+0xd8>)
   14aee:	61eb      	str	r3, [r5, #28]
   14af0:	e9c5 2905 	strd	r2, r9, [r5, #20]
   14af4:	f8c5 b010 	str.w	fp, [r5, #16]
   14af8:	4809      	ldr	r0, [pc, #36]	; (14b20 <z_arm_fatal_error+0xcc>)
   14afa:	2300      	movs	r3, #0
   14afc:	4642      	mov	r2, r8
   14afe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14b02:	f7fe ff11 	bl	13928 <z_impl_z_log_msg_static_create>
   14b06:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14b08:	4621      	mov	r1, r4
   14b0a:	4650      	mov	r0, sl
   14b0c:	f00e faf2 	bl	230f4 <z_fatal_error>
}
   14b10:	46bd      	mov	sp, r7
   14b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b16:	bf00      	nop
   14b18:	0002be80 	.word	0x0002be80
   14b1c:	0002bdd5 	.word	0x0002bdd5
   14b20:	0002a918 	.word	0x0002a918
   14b24:	0002be08 	.word	0x0002be08
   14b28:	0002be3b 	.word	0x0002be3b
   14b2c:	0002be4e 	.word	0x0002be4e

00014b30 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14b30:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b32:	2800      	cmp	r0, #0
   14b34:	db07      	blt.n	14b46 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b36:	4a04      	ldr	r2, [pc, #16]	; (14b48 <arch_irq_enable+0x18>)
   14b38:	0941      	lsrs	r1, r0, #5
   14b3a:	2301      	movs	r3, #1
   14b3c:	f000 001f 	and.w	r0, r0, #31
   14b40:	4083      	lsls	r3, r0
   14b42:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14b46:	4770      	bx	lr
   14b48:	e000e100 	.word	0xe000e100

00014b4c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14b4c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14b4e:	2800      	cmp	r0, #0
   14b50:	db0c      	blt.n	14b6c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14b52:	0943      	lsrs	r3, r0, #5
   14b54:	4906      	ldr	r1, [pc, #24]	; (14b70 <arch_irq_disable+0x24>)
   14b56:	f000 001f 	and.w	r0, r0, #31
   14b5a:	3320      	adds	r3, #32
   14b5c:	2201      	movs	r2, #1
   14b5e:	4082      	lsls	r2, r0
   14b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14b64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b68:	f3bf 8f6f 	isb	sy
}
   14b6c:	4770      	bx	lr
   14b6e:	bf00      	nop
   14b70:	e000e100 	.word	0xe000e100

00014b74 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14b74:	4b05      	ldr	r3, [pc, #20]	; (14b8c <arch_irq_is_enabled+0x18>)
   14b76:	0942      	lsrs	r2, r0, #5
   14b78:	f000 001f 	and.w	r0, r0, #31
   14b7c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14b80:	2301      	movs	r3, #1
   14b82:	fa03 f000 	lsl.w	r0, r3, r0
}
   14b86:	4010      	ands	r0, r2
   14b88:	4770      	bx	lr
   14b8a:	bf00      	nop
   14b8c:	e000e100 	.word	0xe000e100

00014b90 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14b90:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14b92:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   14b94:	bf54      	ite	pl
   14b96:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14b98:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14b9a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14b9c:	bfac      	ite	ge
   14b9e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ba2:	4a07      	ldrlt	r2, [pc, #28]	; (14bc0 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ba4:	ea4f 1341 	mov.w	r3, r1, lsl #5
   14ba8:	bfac      	ite	ge
   14baa:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bae:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bb2:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bb4:	bfb4      	ite	lt
   14bb6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14bb8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   14bbc:	4770      	bx	lr
   14bbe:	bf00      	nop
   14bc0:	e000ed14 	.word	0xe000ed14

00014bc4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14bc4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14bc6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14bc8:	4b04      	ldr	r3, [pc, #16]	; (14bdc <_arch_isr_direct_pm+0x18>)
   14bca:	695a      	ldr	r2, [r3, #20]
   14bcc:	b11a      	cbz	r2, 14bd6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14bce:	2200      	movs	r2, #0
   14bd0:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
   14bd2:	f014 ff81 	bl	29ad8 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14bd6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14bd8:	bd08      	pop	{r3, pc}
   14bda:	bf00      	nop
   14bdc:	20003358 	.word	0x20003358

00014be0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14be0:	bf30      	wfi
    b z_SysNmiOnReset
   14be2:	f7ff bffd 	b.w	14be0 <z_SysNmiOnReset>
   14be6:	bf00      	nop

00014be8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14be8:	4a0b      	ldr	r2, [pc, #44]	; (14c18 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14bea:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14bec:	4b0b      	ldr	r3, [pc, #44]	; (14c1c <z_arm_prep_c+0x34>)
   14bee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14bf2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14bf4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14bf8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14bfc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14c00:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14c08:	f00e fb36 	bl	23278 <z_bss_zero>
	z_data_copy();
   14c0c:	f00f fb8e 	bl	2432c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14c10:	f000 fc5c 	bl	154cc <z_arm_interrupt_init>
	z_cstart();
   14c14:	f00e fb74 	bl	23300 <z_cstart>
   14c18:	00000000 	.word	0x00000000
   14c1c:	e000ed00 	.word	0xe000ed00

00014c20 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14c20:	4a09      	ldr	r2, [pc, #36]	; (14c48 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14c22:	490a      	ldr	r1, [pc, #40]	; (14c4c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14c24:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14c26:	6809      	ldr	r1, [r1, #0]
   14c28:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14c2a:	4909      	ldr	r1, [pc, #36]	; (14c50 <arch_swap+0x30>)
	_current->arch.basepri = key;
   14c2c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14c2e:	684b      	ldr	r3, [r1, #4]
   14c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14c34:	604b      	str	r3, [r1, #4]
   14c36:	2300      	movs	r3, #0
   14c38:	f383 8811 	msr	BASEPRI, r3
   14c3c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14c40:	6893      	ldr	r3, [r2, #8]
}
   14c42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14c44:	4770      	bx	lr
   14c46:	bf00      	nop
   14c48:	20003358 	.word	0x20003358
   14c4c:	0002b44c 	.word	0x0002b44c
   14c50:	e000ed00 	.word	0xe000ed00

00014c54 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14c54:	4912      	ldr	r1, [pc, #72]	; (14ca0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14c56:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14c58:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14c5c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14c5e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14c62:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14c66:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14c68:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14c6c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14c70:	4f0c      	ldr	r7, [pc, #48]	; (14ca4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14c72:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14c76:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   14c78:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14c7a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14c7c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14c7e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14c80:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14c82:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14c86:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14c88:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14c8a:	f000 fcbb 	bl	15604 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14c8e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14c92:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14c96:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14c9a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14c9e:	4770      	bx	lr
    ldr r1, =_kernel
   14ca0:	20003358 	.word	0x20003358
    ldr v4, =_SCS_ICSR
   14ca4:	e000ed04 	.word	0xe000ed04

00014ca8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14ca8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14cac:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14cae:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14cb2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14cb6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14cb8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14cbc:	2902      	cmp	r1, #2
    beq _oops
   14cbe:	d0ff      	beq.n	14cc0 <_oops>

00014cc0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14cc0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14cc2:	f011 feac 	bl	26a1e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14cc6:	bd01      	pop	{r0, pc}

00014cc8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14cc8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14ccc:	9b00      	ldr	r3, [sp, #0]
   14cce:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14cd2:	490a      	ldr	r1, [pc, #40]	; (14cfc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14cd4:	9b01      	ldr	r3, [sp, #4]
   14cd6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14cda:	9b02      	ldr	r3, [sp, #8]
   14cdc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14ce0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14ce8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14cec:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14cf0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14cf2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14cf4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14cf6:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14cf8:	4770      	bx	lr
   14cfa:	bf00      	nop
   14cfc:	00025269 	.word	0x00025269

00014d00 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14d00:	4a09      	ldr	r2, [pc, #36]	; (14d28 <z_check_thread_stack_fail+0x28>)
{
   14d02:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14d04:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14d06:	b170      	cbz	r0, 14d26 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14d08:	f113 0f16 	cmn.w	r3, #22
   14d0c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14d0e:	d005      	beq.n	14d1c <z_check_thread_stack_fail+0x1c>
   14d10:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14d14:	429a      	cmp	r2, r3
   14d16:	d805      	bhi.n	14d24 <z_check_thread_stack_fail+0x24>
   14d18:	4283      	cmp	r3, r0
   14d1a:	d203      	bcs.n	14d24 <z_check_thread_stack_fail+0x24>
		return 0;
   14d1c:	4281      	cmp	r1, r0
   14d1e:	bf28      	it	cs
   14d20:	2000      	movcs	r0, #0
   14d22:	4770      	bx	lr
   14d24:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14d26:	4770      	bx	lr
   14d28:	20003358 	.word	0x20003358

00014d2c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14d2c:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14d2e:	4b09      	ldr	r3, [pc, #36]	; (14d54 <arch_switch_to_main_thread+0x28>)
{
   14d30:	460d      	mov	r5, r1
   14d32:	4614      	mov	r4, r2
	_current = main_thread;
   14d34:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14d36:	f000 fc65 	bl	15604 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14d3a:	4620      	mov	r0, r4
   14d3c:	f385 8809 	msr	PSP, r5
   14d40:	2100      	movs	r1, #0
   14d42:	b663      	cpsie	if
   14d44:	f381 8811 	msr	BASEPRI, r1
   14d48:	f3bf 8f6f 	isb	sy
   14d4c:	2200      	movs	r2, #0
   14d4e:	2300      	movs	r3, #0
   14d50:	f010 fa8a 	bl	25268 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14d54:	20003358 	.word	0x20003358

00014d58 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14d58:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14d5a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14d5c:	4a0b      	ldr	r2, [pc, #44]	; (14d8c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14d5e:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   14d60:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14d62:	bf1e      	ittt	ne
	movne	r1, #0
   14d64:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14d66:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
   14d68:	f014 feb6 	blne	29ad8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14d6c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14d6e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14d72:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14d76:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14d7a:	4905      	ldr	r1, [pc, #20]	; (14d90 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14d7c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14d7e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14d80:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14d82:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14d86:	4903      	ldr	r1, [pc, #12]	; (14d94 <_isr_wrapper+0x3c>)
	bx r1
   14d88:	4708      	bx	r1
   14d8a:	0000      	.short	0x0000
	ldr r2, =_kernel
   14d8c:	20003358 	.word	0x20003358
	ldr r1, =_sw_isr_table
   14d90:	0002a5e0 	.word	0x0002a5e0
	ldr r1, =z_arm_int_exit
   14d94:	00014d99 	.word	0x00014d99

00014d98 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14d98:	4b04      	ldr	r3, [pc, #16]	; (14dac <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14d9a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14d9c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   14d9e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14da0:	d003      	beq.n	14daa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14da2:	4903      	ldr	r1, [pc, #12]	; (14db0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14da8:	600a      	str	r2, [r1, #0]

00014daa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14daa:	4770      	bx	lr
	ldr r3, =_kernel
   14dac:	20003358 	.word	0x20003358
	ldr r1, =_SCS_ICSR
   14db0:	e000ed04 	.word	0xe000ed04

00014db4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14db8:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14dba:	466e      	mov	r6, sp
   14dbc:	b088      	sub	sp, #32
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14dbe:	4680      	mov	r8, r0
   14dc0:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   14dc2:	466a      	mov	r2, sp
   14dc4:	4b55      	ldr	r3, [pc, #340]	; (14f1c <bus_fault.constprop.0+0x168>)
   14dc6:	4c56      	ldr	r4, [pc, #344]	; (14f20 <bus_fault.constprop.0+0x16c>)
   14dc8:	6153      	str	r3, [r2, #20]
   14dca:	f04f 0903 	mov.w	r9, #3
   14dce:	6194      	str	r4, [r2, #24]
   14dd0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14dd4:	f842 9f10 	str.w	r9, [r2, #16]!
   14dd8:	4852      	ldr	r0, [pc, #328]	; (14f24 <bus_fault.constprop.0+0x170>)
   14dda:	f011 fe2f 	bl	26a3c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14dde:	4b52      	ldr	r3, [pc, #328]	; (14f28 <bus_fault.constprop.0+0x174>)
   14de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14de2:	04d9      	lsls	r1, r3, #19
   14de4:	46b5      	mov	sp, r6
   14de6:	f140 8082 	bpl.w	14eee <bus_fault.constprop.0+0x13a>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   14dea:	b088      	sub	sp, #32
   14dec:	466a      	mov	r2, sp
   14dee:	4b4f      	ldr	r3, [pc, #316]	; (14f2c <bus_fault.constprop.0+0x178>)
   14df0:	484c      	ldr	r0, [pc, #304]	; (14f24 <bus_fault.constprop.0+0x170>)
   14df2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14df6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14dfa:	f842 9f10 	str.w	r9, [r2, #16]!
   14dfe:	f011 fe1d 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   14e02:	2017      	movs	r0, #23
   14e04:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14e06:	4b48      	ldr	r3, [pc, #288]	; (14f28 <bus_fault.constprop.0+0x174>)
   14e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e0a:	051a      	lsls	r2, r3, #20
   14e0c:	d50f      	bpl.n	14e2e <bus_fault.constprop.0+0x7a>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   14e0e:	466e      	mov	r6, sp
   14e10:	b088      	sub	sp, #32
   14e12:	466a      	mov	r2, sp
   14e14:	4b46      	ldr	r3, [pc, #280]	; (14f30 <bus_fault.constprop.0+0x17c>)
   14e16:	4843      	ldr	r0, [pc, #268]	; (14f24 <bus_fault.constprop.0+0x170>)
   14e18:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14e1c:	2303      	movs	r3, #3
   14e1e:	f842 3f10 	str.w	r3, [r2, #16]!
   14e22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e26:	f011 fe09 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   14e2a:	2018      	movs	r0, #24
   14e2c:	46b5      	mov	sp, r6
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14e2e:	4e3e      	ldr	r6, [pc, #248]	; (14f28 <bus_fault.constprop.0+0x174>)
   14e30:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14e32:	059b      	lsls	r3, r3, #22
   14e34:	d529      	bpl.n	14e8a <bus_fault.constprop.0+0xd6>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   14e36:	46e9      	mov	r9, sp
   14e38:	b088      	sub	sp, #32
   14e3a:	466a      	mov	r2, sp
   14e3c:	4b3d      	ldr	r3, [pc, #244]	; (14f34 <bus_fault.constprop.0+0x180>)
   14e3e:	4839      	ldr	r0, [pc, #228]	; (14f24 <bus_fault.constprop.0+0x170>)
   14e40:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14e44:	2303      	movs	r3, #3
   14e46:	f842 3f10 	str.w	r3, [r2, #16]!
   14e4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e4e:	f011 fdf5 	bl	26a3c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14e52:	6bb3      	ldr	r3, [r6, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14e54:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   14e56:	0410      	lsls	r0, r2, #16
   14e58:	46cd      	mov	sp, r9
   14e5a:	d515      	bpl.n	14e88 <bus_fault.constprop.0+0xd4>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14e5c:	b088      	sub	sp, #32
   14e5e:	466a      	mov	r2, sp
   14e60:	4935      	ldr	r1, [pc, #212]	; (14f38 <bus_fault.constprop.0+0x184>)
   14e62:	61d3      	str	r3, [r2, #28]
   14e64:	2304      	movs	r3, #4
   14e66:	e9c2 1405 	strd	r1, r4, [r2, #20]
   14e6a:	482e      	ldr	r0, [pc, #184]	; (14f24 <bus_fault.constprop.0+0x170>)
   14e6c:	f842 3f10 	str.w	r3, [r2, #16]!
   14e70:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14e74:	f011 fde2 	bl	26a3c <z_log_msg_static_create.constprop.0>
   14e78:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   14e7a:	f1b8 0f00 	cmp.w	r8, #0
   14e7e:	d003      	beq.n	14e88 <bus_fault.constprop.0+0xd4>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14e80:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   14e82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14e86:	62b3      	str	r3, [r6, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   14e88:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14e8a:	4b27      	ldr	r3, [pc, #156]	; (14f28 <bus_fault.constprop.0+0x174>)
   14e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e8e:	0559      	lsls	r1, r3, #21
   14e90:	d50f      	bpl.n	14eb2 <bus_fault.constprop.0+0xfe>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   14e92:	466e      	mov	r6, sp
   14e94:	b088      	sub	sp, #32
   14e96:	466a      	mov	r2, sp
   14e98:	4b28      	ldr	r3, [pc, #160]	; (14f3c <bus_fault.constprop.0+0x188>)
   14e9a:	4822      	ldr	r0, [pc, #136]	; (14f24 <bus_fault.constprop.0+0x170>)
   14e9c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ea0:	2303      	movs	r3, #3
   14ea2:	f842 3f10 	str.w	r3, [r2, #16]!
   14ea6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14eaa:	f011 fdc7 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   14eae:	201a      	movs	r0, #26
   14eb0:	46b5      	mov	sp, r6
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14eb2:	4b1d      	ldr	r3, [pc, #116]	; (14f28 <bus_fault.constprop.0+0x174>)
   14eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14eb6:	05d2      	lsls	r2, r2, #23
   14eb8:	d51b      	bpl.n	14ef2 <bus_fault.constprop.0+0x13e>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   14eba:	466e      	mov	r6, sp
   14ebc:	b088      	sub	sp, #32
   14ebe:	466a      	mov	r2, sp
   14ec0:	4b1f      	ldr	r3, [pc, #124]	; (14f40 <bus_fault.constprop.0+0x18c>)
   14ec2:	4818      	ldr	r0, [pc, #96]	; (14f24 <bus_fault.constprop.0+0x170>)
   14ec4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ec8:	2303      	movs	r3, #3
   14eca:	f842 3f10 	str.w	r3, [r2, #16]!
   14ece:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ed2:	f011 fdb3 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   14ed6:	201b      	movs	r0, #27
   14ed8:	46b5      	mov	sp, r6
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14eda:	4a13      	ldr	r2, [pc, #76]	; (14f28 <bus_fault.constprop.0+0x174>)
   14edc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14ede:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14ee2:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14ee4:	2300      	movs	r3, #0
   14ee6:	702b      	strb	r3, [r5, #0]

	return reason;
}
   14ee8:	46bd      	mov	sp, r7
   14eea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   14eee:	2016      	movs	r0, #22
   14ef0:	e789      	b.n	14e06 <bus_fault.constprop.0+0x52>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ef4:	049b      	lsls	r3, r3, #18
   14ef6:	d5f0      	bpl.n	14eda <bus_fault.constprop.0+0x126>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14ef8:	466e      	mov	r6, sp
   14efa:	b088      	sub	sp, #32
   14efc:	466a      	mov	r2, sp
   14efe:	4b11      	ldr	r3, [pc, #68]	; (14f44 <bus_fault.constprop.0+0x190>)
   14f00:	4808      	ldr	r0, [pc, #32]	; (14f24 <bus_fault.constprop.0+0x170>)
   14f02:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14f06:	2303      	movs	r3, #3
   14f08:	f842 3f10 	str.w	r3, [r2, #16]!
   14f0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f10:	f011 fd94 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   14f14:	201c      	movs	r0, #28
   14f16:	46b5      	mov	sp, r6
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14f18:	e7df      	b.n	14eda <bus_fault.constprop.0+0x126>
   14f1a:	bf00      	nop
   14f1c:	0002be89 	.word	0x0002be89
   14f20:	0002c264 	.word	0x0002c264
   14f24:	0002a918 	.word	0x0002a918
   14f28:	e000ed00 	.word	0xe000ed00
   14f2c:	0002bea3 	.word	0x0002bea3
   14f30:	0002beb8 	.word	0x0002beb8
   14f34:	0002becf 	.word	0x0002becf
   14f38:	0002beec 	.word	0x0002beec
   14f3c:	0002bf05 	.word	0x0002bf05
   14f40:	0002bf24 	.word	0x0002bf24
   14f44:	0002bf40 	.word	0x0002bf40

00014f48 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f4a:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14f4c:	466d      	mov	r5, sp
   14f4e:	b088      	sub	sp, #32
   14f50:	466a      	mov	r2, sp
   14f52:	4b47      	ldr	r3, [pc, #284]	; (15070 <usage_fault.constprop.0+0x128>)
   14f54:	4c47      	ldr	r4, [pc, #284]	; (15074 <usage_fault.constprop.0+0x12c>)
   14f56:	6153      	str	r3, [r2, #20]
   14f58:	2603      	movs	r6, #3
   14f5a:	6194      	str	r4, [r2, #24]
   14f5c:	4846      	ldr	r0, [pc, #280]	; (15078 <usage_fault.constprop.0+0x130>)
   14f5e:	f842 6f10 	str.w	r6, [r2, #16]!
   14f62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f66:	f011 fd69 	bl	26a3c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14f6a:	4b44      	ldr	r3, [pc, #272]	; (1507c <usage_fault.constprop.0+0x134>)
   14f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f6e:	019b      	lsls	r3, r3, #6
   14f70:	46ad      	mov	sp, r5
   14f72:	d57a      	bpl.n	1506a <usage_fault.constprop.0+0x122>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   14f74:	b088      	sub	sp, #32
   14f76:	466a      	mov	r2, sp
   14f78:	4b41      	ldr	r3, [pc, #260]	; (15080 <usage_fault.constprop.0+0x138>)
   14f7a:	483f      	ldr	r0, [pc, #252]	; (15078 <usage_fault.constprop.0+0x130>)
   14f7c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14f80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f84:	f842 6f10 	str.w	r6, [r2, #16]!
   14f88:	f011 fd58 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   14f8c:	201e      	movs	r0, #30
   14f8e:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14f90:	4b3a      	ldr	r3, [pc, #232]	; (1507c <usage_fault.constprop.0+0x134>)
   14f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f94:	01de      	lsls	r6, r3, #7
   14f96:	d50f      	bpl.n	14fb8 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   14f98:	466d      	mov	r5, sp
   14f9a:	b088      	sub	sp, #32
   14f9c:	466a      	mov	r2, sp
   14f9e:	4b39      	ldr	r3, [pc, #228]	; (15084 <usage_fault.constprop.0+0x13c>)
   14fa0:	4835      	ldr	r0, [pc, #212]	; (15078 <usage_fault.constprop.0+0x130>)
   14fa2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14fa6:	2303      	movs	r3, #3
   14fa8:	f842 3f10 	str.w	r3, [r2, #16]!
   14fac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14fb0:	f011 fd44 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   14fb4:	201f      	movs	r0, #31
   14fb6:	46ad      	mov	sp, r5
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14fb8:	4b30      	ldr	r3, [pc, #192]	; (1507c <usage_fault.constprop.0+0x134>)
   14fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fbc:	031d      	lsls	r5, r3, #12
   14fbe:	d50f      	bpl.n	14fe0 <usage_fault.constprop.0+0x98>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   14fc0:	466d      	mov	r5, sp
   14fc2:	b088      	sub	sp, #32
   14fc4:	466a      	mov	r2, sp
   14fc6:	4b30      	ldr	r3, [pc, #192]	; (15088 <usage_fault.constprop.0+0x140>)
   14fc8:	482b      	ldr	r0, [pc, #172]	; (15078 <usage_fault.constprop.0+0x130>)
   14fca:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14fce:	2303      	movs	r3, #3
   14fd0:	f842 3f10 	str.w	r3, [r2, #16]!
   14fd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14fd8:	f011 fd30 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   14fdc:	2021      	movs	r0, #33	; 0x21
   14fde:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14fe0:	4b26      	ldr	r3, [pc, #152]	; (1507c <usage_fault.constprop.0+0x134>)
   14fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fe4:	0359      	lsls	r1, r3, #13
   14fe6:	d50f      	bpl.n	15008 <usage_fault.constprop.0+0xc0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14fe8:	466d      	mov	r5, sp
   14fea:	b088      	sub	sp, #32
   14fec:	466a      	mov	r2, sp
   14fee:	4b27      	ldr	r3, [pc, #156]	; (1508c <usage_fault.constprop.0+0x144>)
   14ff0:	4821      	ldr	r0, [pc, #132]	; (15078 <usage_fault.constprop.0+0x130>)
   14ff2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14ff6:	2303      	movs	r3, #3
   14ff8:	f842 3f10 	str.w	r3, [r2, #16]!
   14ffc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15000:	f011 fd1c 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   15004:	2022      	movs	r0, #34	; 0x22
   15006:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15008:	4b1c      	ldr	r3, [pc, #112]	; (1507c <usage_fault.constprop.0+0x134>)
   1500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1500c:	039a      	lsls	r2, r3, #14
   1500e:	d50f      	bpl.n	15030 <usage_fault.constprop.0+0xe8>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15010:	466d      	mov	r5, sp
   15012:	b088      	sub	sp, #32
   15014:	466a      	mov	r2, sp
   15016:	4b1e      	ldr	r3, [pc, #120]	; (15090 <usage_fault.constprop.0+0x148>)
   15018:	4817      	ldr	r0, [pc, #92]	; (15078 <usage_fault.constprop.0+0x130>)
   1501a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1501e:	2303      	movs	r3, #3
   15020:	f842 3f10 	str.w	r3, [r2, #16]!
   15024:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15028:	f011 fd08 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   1502c:	2023      	movs	r0, #35	; 0x23
   1502e:	46ad      	mov	sp, r5
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15030:	4b12      	ldr	r3, [pc, #72]	; (1507c <usage_fault.constprop.0+0x134>)
   15032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15034:	03db      	lsls	r3, r3, #15
   15036:	d50f      	bpl.n	15058 <usage_fault.constprop.0+0x110>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15038:	466d      	mov	r5, sp
   1503a:	b088      	sub	sp, #32
   1503c:	466a      	mov	r2, sp
   1503e:	4b15      	ldr	r3, [pc, #84]	; (15094 <usage_fault.constprop.0+0x14c>)
   15040:	480d      	ldr	r0, [pc, #52]	; (15078 <usage_fault.constprop.0+0x130>)
   15042:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15046:	2303      	movs	r3, #3
   15048:	f842 3f10 	str.w	r3, [r2, #16]!
   1504c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15050:	f011 fcf4 	bl	26a3c <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   15054:	2024      	movs	r0, #36	; 0x24
   15056:	46ad      	mov	sp, r5
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15058:	4a08      	ldr	r2, [pc, #32]	; (1507c <usage_fault.constprop.0+0x134>)
   1505a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1505c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15060:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15064:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15066:	46bd      	mov	sp, r7
   15068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   1506a:	201d      	movs	r0, #29
   1506c:	e790      	b.n	14f90 <usage_fault.constprop.0+0x48>
   1506e:	bf00      	nop
   15070:	0002bf73 	.word	0x0002bf73
   15074:	0002c258 	.word	0x0002c258
   15078:	0002a918 	.word	0x0002a918
   1507c:	e000ed00 	.word	0xe000ed00
   15080:	0002bf8f 	.word	0x0002bf8f
   15084:	0002bfa6 	.word	0x0002bfa6
   15088:	0002bfc4 	.word	0x0002bfc4
   1508c:	0002bfe6 	.word	0x0002bfe6
   15090:	0002c00f 	.word	0x0002c00f
   15094:	0002c02d 	.word	0x0002c02d

00015098 <mem_manage_fault>:
{
   15098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1509c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
   1509e:	466c      	mov	r4, sp
   150a0:	b088      	sub	sp, #32
{
   150a2:	4691      	mov	r9, r2
   150a4:	4682      	mov	sl, r0
   150a6:	468b      	mov	fp, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   150a8:	466a      	mov	r2, sp
   150aa:	4b5c      	ldr	r3, [pc, #368]	; (1521c <mem_manage_fault+0x184>)
   150ac:	4d5c      	ldr	r5, [pc, #368]	; (15220 <mem_manage_fault+0x188>)
   150ae:	6153      	str	r3, [r2, #20]
   150b0:	2603      	movs	r6, #3
   150b2:	6195      	str	r5, [r2, #24]
   150b4:	485b      	ldr	r0, [pc, #364]	; (15224 <mem_manage_fault+0x18c>)
   150b6:	f842 6f10 	str.w	r6, [r2, #16]!
   150ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150be:	f011 fcbd 	bl	26a3c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   150c2:	4b59      	ldr	r3, [pc, #356]	; (15228 <mem_manage_fault+0x190>)
   150c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150c6:	06db      	lsls	r3, r3, #27
   150c8:	46a5      	mov	sp, r4
   150ca:	d552      	bpl.n	15172 <mem_manage_fault+0xda>
		PR_FAULT_INFO("  Stacking error (context area might be"
   150cc:	b088      	sub	sp, #32
   150ce:	466a      	mov	r2, sp
   150d0:	4b56      	ldr	r3, [pc, #344]	; (1522c <mem_manage_fault+0x194>)
   150d2:	4854      	ldr	r0, [pc, #336]	; (15224 <mem_manage_fault+0x18c>)
   150d4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   150d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150dc:	f842 6f10 	str.w	r6, [r2, #16]!
   150e0:	f011 fcac 	bl	26a3c <z_log_msg_static_create.constprop.0>
   150e4:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_STACKING;
   150e6:	2411      	movs	r4, #17
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   150e8:	4b4f      	ldr	r3, [pc, #316]	; (15228 <mem_manage_fault+0x190>)
   150ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   150ec:	0718      	lsls	r0, r3, #28
   150ee:	d50f      	bpl.n	15110 <mem_manage_fault+0x78>
		PR_FAULT_INFO("  Unstacking error");
   150f0:	466c      	mov	r4, sp
   150f2:	b088      	sub	sp, #32
   150f4:	466a      	mov	r2, sp
   150f6:	4b4e      	ldr	r3, [pc, #312]	; (15230 <mem_manage_fault+0x198>)
   150f8:	484a      	ldr	r0, [pc, #296]	; (15224 <mem_manage_fault+0x18c>)
   150fa:	e9c2 3505 	strd	r3, r5, [r2, #20]
   150fe:	2303      	movs	r3, #3
   15100:	f842 3f10 	str.w	r3, [r2, #16]!
   15104:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15108:	f011 fc98 	bl	26a3c <z_log_msg_static_create.constprop.0>
   1510c:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_UNSTACKING;
   1510e:	2412      	movs	r4, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   15110:	4e45      	ldr	r6, [pc, #276]	; (15228 <mem_manage_fault+0x190>)
   15112:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15114:	0799      	lsls	r1, r3, #30
   15116:	d52e      	bpl.n	15176 <mem_manage_fault+0xde>
		PR_FAULT_INFO("  Data Access Violation");
   15118:	466c      	mov	r4, sp
   1511a:	b088      	sub	sp, #32
   1511c:	466a      	mov	r2, sp
   1511e:	4b45      	ldr	r3, [pc, #276]	; (15234 <mem_manage_fault+0x19c>)
   15120:	4840      	ldr	r0, [pc, #256]	; (15224 <mem_manage_fault+0x18c>)
   15122:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15126:	2303      	movs	r3, #3
   15128:	f842 3f10 	str.w	r3, [r2, #16]!
   1512c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15130:	f011 fc84 	bl	26a3c <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   15134:	f8d6 8034 	ldr.w	r8, [r6, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15138:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1513a:	061a      	lsls	r2, r3, #24
   1513c:	46a5      	mov	sp, r4
   1513e:	d569      	bpl.n	15214 <mem_manage_fault+0x17c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15140:	b088      	sub	sp, #32
   15142:	466a      	mov	r2, sp
   15144:	4b3c      	ldr	r3, [pc, #240]	; (15238 <mem_manage_fault+0x1a0>)
   15146:	f8c2 801c 	str.w	r8, [r2, #28]
   1514a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1514e:	2304      	movs	r3, #4
   15150:	f842 3f10 	str.w	r3, [r2, #16]!
   15154:	4833      	ldr	r0, [pc, #204]	; (15224 <mem_manage_fault+0x18c>)
   15156:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1515a:	f011 fc6f 	bl	26a3c <z_log_msg_static_create.constprop.0>
   1515e:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   15160:	f1bb 0f00 	cmp.w	fp, #0
   15164:	d003      	beq.n	1516e <mem_manage_fault+0xd6>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15166:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   15168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1516c:	62b3      	str	r3, [r6, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   1516e:	2413      	movs	r4, #19
   15170:	e003      	b.n	1517a <mem_manage_fault+0xe2>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   15172:	2410      	movs	r4, #16
   15174:	e7b8      	b.n	150e8 <mem_manage_fault+0x50>
	uint32_t mmfar = -EINVAL;
   15176:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1517a:	4b2b      	ldr	r3, [pc, #172]	; (15228 <mem_manage_fault+0x190>)
   1517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1517e:	07db      	lsls	r3, r3, #31
   15180:	d50f      	bpl.n	151a2 <mem_manage_fault+0x10a>
		PR_FAULT_INFO("  Instruction Access Violation");
   15182:	466c      	mov	r4, sp
   15184:	b088      	sub	sp, #32
   15186:	466a      	mov	r2, sp
   15188:	4b2c      	ldr	r3, [pc, #176]	; (1523c <mem_manage_fault+0x1a4>)
   1518a:	4826      	ldr	r0, [pc, #152]	; (15224 <mem_manage_fault+0x18c>)
   1518c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15190:	2303      	movs	r3, #3
   15192:	f842 3f10 	str.w	r3, [r2, #16]!
   15196:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1519a:	f011 fc4f 	bl	26a3c <z_log_msg_static_create.constprop.0>
   1519e:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   151a0:	2414      	movs	r4, #20
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   151a2:	4b21      	ldr	r3, [pc, #132]	; (15228 <mem_manage_fault+0x190>)
   151a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   151a6:	069e      	lsls	r6, r3, #26
   151a8:	d50f      	bpl.n	151ca <mem_manage_fault+0x132>
		PR_FAULT_INFO(
   151aa:	466c      	mov	r4, sp
   151ac:	b088      	sub	sp, #32
   151ae:	466a      	mov	r2, sp
   151b0:	4b23      	ldr	r3, [pc, #140]	; (15240 <mem_manage_fault+0x1a8>)
   151b2:	481c      	ldr	r0, [pc, #112]	; (15224 <mem_manage_fault+0x18c>)
   151b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   151b8:	2303      	movs	r3, #3
   151ba:	f842 3f10 	str.w	r3, [r2, #16]!
   151be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   151c2:	f011 fc3b 	bl	26a3c <z_log_msg_static_create.constprop.0>
   151c6:	46a5      	mov	sp, r4
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   151c8:	2415      	movs	r4, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   151ca:	4b17      	ldr	r3, [pc, #92]	; (15228 <mem_manage_fault+0x190>)
   151cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   151ce:	06d5      	lsls	r5, r2, #27
   151d0:	d402      	bmi.n	151d8 <mem_manage_fault+0x140>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   151d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   151d4:	0790      	lsls	r0, r2, #30
   151d6:	d50a      	bpl.n	151ee <mem_manage_fault+0x156>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   151d8:	685b      	ldr	r3, [r3, #4]
   151da:	0519      	lsls	r1, r3, #20
   151dc:	d507      	bpl.n	151ee <mem_manage_fault+0x156>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   151de:	4651      	mov	r1, sl
   151e0:	4640      	mov	r0, r8
   151e2:	f7ff fd8d 	bl	14d00 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   151e6:	b110      	cbz	r0, 151ee <mem_manage_fault+0x156>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   151e8:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   151ec:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   151ee:	4b0e      	ldr	r3, [pc, #56]	; (15228 <mem_manage_fault+0x190>)
   151f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   151f2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   151f4:	bf42      	ittt	mi
   151f6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   151f8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   151fc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   151fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15200:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   15204:	629a      	str	r2, [r3, #40]	; 0x28
}
   15206:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   15208:	2300      	movs	r3, #0
   1520a:	f889 3000 	strb.w	r3, [r9]
}
   1520e:	46bd      	mov	sp, r7
   15210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t mmfar = -EINVAL;
   15214:	f06f 0815 	mvn.w	r8, #21
   15218:	e7a9      	b.n	1516e <mem_manage_fault+0xd6>
   1521a:	bf00      	nop
   1521c:	0002c05c 	.word	0x0002c05c
   15220:	0002c26e 	.word	0x0002c26e
   15224:	0002a918 	.word	0x0002a918
   15228:	e000ed00 	.word	0xe000ed00
   1522c:	0002c076 	.word	0x0002c076
   15230:	0002beb8 	.word	0x0002beb8
   15234:	0002c0ad 	.word	0x0002c0ad
   15238:	0002c0c9 	.word	0x0002c0c9
   1523c:	0002c0e3 	.word	0x0002c0e3
   15240:	0002bf40 	.word	0x0002bf40

00015244 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15248:	4b86      	ldr	r3, [pc, #536]	; (15464 <z_arm_fault+0x220>)
{
   1524a:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1524c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   15250:	af00      	add	r7, sp, #0
   15252:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15254:	f3c8 0408 	ubfx	r4, r8, #0, #9
   15258:	2600      	movs	r6, #0
   1525a:	f386 8811 	msr	BASEPRI, r6
   1525e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15262:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15266:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1526a:	d113      	bne.n	15294 <z_arm_fault+0x50>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1526c:	f002 030c 	and.w	r3, r2, #12
   15270:	2b08      	cmp	r3, #8
   15272:	d11e      	bne.n	152b2 <z_arm_fault+0x6e>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15274:	466d      	mov	r5, sp
   15276:	b088      	sub	sp, #32
   15278:	466a      	mov	r2, sp
   1527a:	4b7b      	ldr	r3, [pc, #492]	; (15468 <z_arm_fault+0x224>)
   1527c:	6153      	str	r3, [r2, #20]
   1527e:	4b7b      	ldr	r3, [pc, #492]	; (1546c <z_arm_fault+0x228>)
   15280:	6193      	str	r3, [r2, #24]
   15282:	2303      	movs	r3, #3
   15284:	f842 3f10 	str.w	r3, [r2, #16]!
   15288:	4879      	ldr	r0, [pc, #484]	; (15470 <z_arm_fault+0x22c>)
   1528a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1528e:	f011 fbd5 	bl	26a3c <z_log_msg_static_create.constprop.0>
   15292:	46ad      	mov	sp, r5
	*nested_exc = false;
   15294:	2600      	movs	r6, #0
		return NULL;
   15296:	4635      	mov	r5, r6
	*recoverable = false;
   15298:	2300      	movs	r3, #0
   1529a:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   1529c:	1ee3      	subs	r3, r4, #3
   1529e:	2b09      	cmp	r3, #9
   152a0:	f200 80c1 	bhi.w	15426 <z_arm_fault+0x1e2>
   152a4:	e8df f003 	tbb	[pc, r3]
   152a8:	a3aaa70a 	.word	0xa3aaa70a
   152ac:	bfbfbfbf 	.word	0xbfbfbfbf
   152b0:	adbf      	.short	0xadbf
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   152b2:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   152b4:	bf4c      	ite	mi
   152b6:	460d      	movmi	r5, r1
			*nested_exc = true;
   152b8:	2601      	movpl	r6, #1
   152ba:	e7ed      	b.n	15298 <z_arm_fault+0x54>
	PR_FAULT_INFO("***** HARD FAULT *****");
   152bc:	46e8      	mov	r8, sp
   152be:	b088      	sub	sp, #32
   152c0:	466a      	mov	r2, sp
   152c2:	4b6c      	ldr	r3, [pc, #432]	; (15474 <z_arm_fault+0x230>)
   152c4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 15478 <z_arm_fault+0x234>
   152c8:	6153      	str	r3, [r2, #20]
   152ca:	f04f 0a03 	mov.w	sl, #3
   152ce:	f8c2 9018 	str.w	r9, [r2, #24]
   152d2:	4867      	ldr	r0, [pc, #412]	; (15470 <z_arm_fault+0x22c>)
   152d4:	f842 af10 	str.w	sl, [r2, #16]!
   152d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   152dc:	f011 fbae 	bl	26a3c <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   152e0:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   152e2:	4c60      	ldr	r4, [pc, #384]	; (15464 <z_arm_fault+0x220>)
	*recoverable = false;
   152e4:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   152e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   152e8:	079a      	lsls	r2, r3, #30
   152ea:	46c5      	mov	sp, r8
   152ec:	d50d      	bpl.n	1530a <z_arm_fault+0xc6>
		PR_EXC("  Bus fault on vector table read");
   152ee:	b088      	sub	sp, #32
   152f0:	466a      	mov	r2, sp
   152f2:	4b62      	ldr	r3, [pc, #392]	; (1547c <z_arm_fault+0x238>)
		PR_EXC("  Debug event");
   152f4:	e9c2 3905 	strd	r3, r9, [r2, #20]
   152f8:	f842 af10 	str.w	sl, [r2, #16]!
   152fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	PR_FAULT_INFO("***** %s %d) *****",
   15300:	485b      	ldr	r0, [pc, #364]	; (15470 <z_arm_fault+0x22c>)
   15302:	f011 fb9b 	bl	26a3c <z_log_msg_static_create.constprop.0>
   15306:	46c5      	mov	sp, r8
}
   15308:	e08b      	b.n	15422 <z_arm_fault+0x1de>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1530a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1530c:	2b00      	cmp	r3, #0
   1530e:	da03      	bge.n	15318 <z_arm_fault+0xd4>
		PR_EXC("  Debug event");
   15310:	b088      	sub	sp, #32
   15312:	466a      	mov	r2, sp
   15314:	4b5a      	ldr	r3, [pc, #360]	; (15480 <z_arm_fault+0x23c>)
   15316:	e7ed      	b.n	152f4 <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15318:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1531a:	005b      	lsls	r3, r3, #1
   1531c:	f140 8081 	bpl.w	15422 <z_arm_fault+0x1de>
		PR_EXC("  Fault escalation (see below)");
   15320:	b088      	sub	sp, #32
   15322:	466a      	mov	r2, sp
   15324:	4b57      	ldr	r3, [pc, #348]	; (15484 <z_arm_fault+0x240>)
   15326:	4852      	ldr	r0, [pc, #328]	; (15470 <z_arm_fault+0x22c>)
   15328:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1532c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15330:	f842 af10 	str.w	sl, [r2, #16]!
   15334:	f011 fb82 	bl	26a3c <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15338:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   1533a:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1533c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15340:	46c5      	mov	sp, r8
   15342:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15344:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15348:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1534c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1534e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15356:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15358:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1535c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   15360:	f64d 7302 	movw	r3, #57090	; 0xdf02
   15364:	429a      	cmp	r2, r3
   15366:	d008      	beq.n	1537a <z_arm_fault+0x136>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1536a:	b2db      	uxtb	r3, r3
   1536c:	b393      	cbz	r3, 153d4 <z_arm_fault+0x190>
			reason = mem_manage_fault(esf, 1, recoverable);
   1536e:	1dfa      	adds	r2, r7, #7
   15370:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15372:	4628      	mov	r0, r5
   15374:	f7ff fe90 	bl	15098 <mem_manage_fault>
   15378:	e03b      	b.n	153f2 <z_arm_fault+0x1ae>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1537a:	b088      	sub	sp, #32
   1537c:	682b      	ldr	r3, [r5, #0]
   1537e:	466a      	mov	r2, sp
   15380:	4941      	ldr	r1, [pc, #260]	; (15488 <z_arm_fault+0x244>)
   15382:	61d3      	str	r3, [r2, #28]
   15384:	2304      	movs	r3, #4
   15386:	e9c2 1905 	strd	r1, r9, [r2, #20]
   1538a:	4839      	ldr	r0, [pc, #228]	; (15470 <z_arm_fault+0x22c>)
   1538c:	f842 3f10 	str.w	r3, [r2, #16]!
   15390:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15394:	f011 fb52 	bl	26a3c <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   15398:	682c      	ldr	r4, [r5, #0]
   1539a:	46c5      	mov	sp, r8
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   1539c:	79fb      	ldrb	r3, [r7, #7]
   1539e:	b9ab      	cbnz	r3, 153cc <z_arm_fault+0x188>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   153a0:	2220      	movs	r2, #32
   153a2:	4629      	mov	r1, r5
   153a4:	f107 0008 	add.w	r0, r7, #8
   153a8:	f011 fc20 	bl	26bec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   153ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   153ae:	2e00      	cmp	r6, #0
   153b0:	d052      	beq.n	15458 <z_arm_fault+0x214>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   153b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   153b6:	b922      	cbnz	r2, 153c2 <z_arm_fault+0x17e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   153b8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   153bc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   153c0:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   153c2:	f107 0108 	add.w	r1, r7, #8
   153c6:	4620      	mov	r0, r4
   153c8:	f7ff fb44 	bl	14a54 <z_arm_fatal_error>
}
   153cc:	3728      	adds	r7, #40	; 0x28
   153ce:	46bd      	mov	sp, r7
   153d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   153d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   153d6:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   153da:	d004      	beq.n	153e6 <z_arm_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
   153dc:	1df9      	adds	r1, r7, #7
   153de:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   153e0:	f7ff fce8 	bl	14db4 <bus_fault.constprop.0>
   153e4:	e005      	b.n	153f2 <z_arm_fault+0x1ae>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   153e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   153e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   153ec:	d319      	bcc.n	15422 <z_arm_fault+0x1de>
			reason = usage_fault(esf);
   153ee:	f7ff fdab 	bl	14f48 <usage_fault.constprop.0>
   153f2:	4604      	mov	r4, r0
   153f4:	e7d2      	b.n	1539c <z_arm_fault+0x158>
		reason = mem_manage_fault(esf, 0, recoverable);
   153f6:	1dfa      	adds	r2, r7, #7
   153f8:	2100      	movs	r1, #0
   153fa:	e7ba      	b.n	15372 <z_arm_fault+0x12e>
		reason = bus_fault(esf, 0, recoverable);
   153fc:	1df9      	adds	r1, r7, #7
   153fe:	2000      	movs	r0, #0
   15400:	e7ee      	b.n	153e0 <z_arm_fault+0x19c>
	PR_FAULT_INFO(
   15402:	466c      	mov	r4, sp
   15404:	b088      	sub	sp, #32
   15406:	466a      	mov	r2, sp
   15408:	4b20      	ldr	r3, [pc, #128]	; (1548c <z_arm_fault+0x248>)
   1540a:	6153      	str	r3, [r2, #20]
   1540c:	4b20      	ldr	r3, [pc, #128]	; (15490 <z_arm_fault+0x24c>)
   1540e:	6193      	str	r3, [r2, #24]
   15410:	2303      	movs	r3, #3
   15412:	f842 3f10 	str.w	r3, [r2, #16]!
   15416:	4816      	ldr	r0, [pc, #88]	; (15470 <z_arm_fault+0x22c>)
   15418:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1541c:	f011 fb0e 	bl	26a3c <z_log_msg_static_create.constprop.0>
   15420:	46a5      	mov	sp, r4
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15422:	2400      	movs	r4, #0
   15424:	e7ba      	b.n	1539c <z_arm_fault+0x158>
	PR_FAULT_INFO("***** %s %d) *****",
   15426:	4a1b      	ldr	r2, [pc, #108]	; (15494 <z_arm_fault+0x250>)
   15428:	4b1b      	ldr	r3, [pc, #108]	; (15498 <z_arm_fault+0x254>)
   1542a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1542e:	46e8      	mov	r8, sp
   15430:	b08a      	sub	sp, #40	; 0x28
   15432:	bf18      	it	ne
   15434:	4613      	movne	r3, r2
   15436:	466a      	mov	r2, sp
   15438:	4918      	ldr	r1, [pc, #96]	; (1549c <z_arm_fault+0x258>)
   1543a:	6151      	str	r1, [r2, #20]
   1543c:	4918      	ldr	r1, [pc, #96]	; (154a0 <z_arm_fault+0x25c>)
   1543e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15442:	f240 3301 	movw	r3, #769	; 0x301
   15446:	8493      	strh	r3, [r2, #36]	; 0x24
   15448:	3c10      	subs	r4, #16
   1544a:	4b16      	ldr	r3, [pc, #88]	; (154a4 <z_arm_fault+0x260>)
   1544c:	6214      	str	r4, [r2, #32]
   1544e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   15452:	f842 3f10 	str.w	r3, [r2, #16]!
   15456:	e753      	b.n	15300 <z_arm_fault+0xbc>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15458:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1545c:	f023 0301 	bic.w	r3, r3, #1
   15460:	e7ae      	b.n	153c0 <z_arm_fault+0x17c>
   15462:	bf00      	nop
   15464:	e000ed00 	.word	0xe000ed00
   15468:	0002c134 	.word	0x0002c134
   1546c:	0002c28a 	.word	0x0002c28a
   15470:	0002a918 	.word	0x0002a918
   15474:	0002c163 	.word	0x0002c163
   15478:	0002c27f 	.word	0x0002c27f
   1547c:	0002c17e 	.word	0x0002c17e
   15480:	0002c1a3 	.word	0x0002c1a3
   15484:	0002c1b5 	.word	0x0002c1b5
   15488:	0002c1d8 	.word	0x0002c1d8
   1548c:	0002c1f8 	.word	0x0002c1f8
   15490:	0002c24a 	.word	0x0002c24a
   15494:	0002c11b 	.word	0x0002c11b
   15498:	0002c106 	.word	0x0002c106
   1549c:	0002c220 	.word	0x0002c220
   154a0:	0002c237 	.word	0x0002c237
   154a4:	01000005 	.word	0x01000005

000154a8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   154a8:	4a02      	ldr	r2, [pc, #8]	; (154b4 <z_arm_fault_init+0xc>)
   154aa:	6953      	ldr	r3, [r2, #20]
   154ac:	f043 0310 	orr.w	r3, r3, #16
   154b0:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   154b2:	4770      	bx	lr
   154b4:	e000ed00 	.word	0xe000ed00

000154b8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   154b8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   154bc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   154c0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   154c2:	4672      	mov	r2, lr
	bl z_arm_fault
   154c4:	f7ff febe 	bl	15244 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   154c8:	bd01      	pop	{r0, pc}
   154ca:	bf00      	nop

000154cc <z_arm_interrupt_init>:
   154cc:	4804      	ldr	r0, [pc, #16]	; (154e0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   154ce:	2300      	movs	r3, #0
   154d0:	2140      	movs	r1, #64	; 0x40
   154d2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   154d4:	3301      	adds	r3, #1
   154d6:	2b27      	cmp	r3, #39	; 0x27
   154d8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   154dc:	d1f9      	bne.n	154d2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   154de:	4770      	bx	lr
   154e0:	e000e100 	.word	0xe000e100

000154e4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   154e4:	2000      	movs	r0, #0
    msr CONTROL, r0
   154e6:	f380 8814 	msr	CONTROL, r0
    isb
   154ea:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   154ee:	f7fd fbf3 	bl	12cd8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   154f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   154f4:	490d      	ldr	r1, [pc, #52]	; (1552c <__start+0x48>)
    str r0, [r1]
   154f6:	6008      	str	r0, [r1, #0]
    dsb
   154f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   154fc:	480c      	ldr	r0, [pc, #48]	; (15530 <__start+0x4c>)
    msr msp, r0
   154fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15502:	f000 f82b 	bl	1555c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15506:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15508:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1550c:	4809      	ldr	r0, [pc, #36]	; (15534 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1550e:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15512:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15514:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15518:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1551c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1551e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15520:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15524:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15528:	f7ff fb5e 	bl	14be8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   1552c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15530:	20006bc0 	.word	0x20006bc0
    ldr r0, =z_interrupt_stacks
   15534:	20005a00 	.word	0x20005a00

00015538 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15538:	4907      	ldr	r1, [pc, #28]	; (15558 <z_arm_clear_arm_mpu_config+0x20>)
   1553a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   1553e:	2300      	movs	r3, #0
	int num_regions =
   15540:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15544:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15546:	4293      	cmp	r3, r2
   15548:	db00      	blt.n	1554c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1554a:	4770      	bx	lr
  MPU->RNR = rnr;
   1554c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15550:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15554:	3301      	adds	r3, #1
   15556:	e7f6      	b.n	15546 <z_arm_clear_arm_mpu_config+0xe>
   15558:	e000ed00 	.word	0xe000ed00

0001555c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1555c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1555e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15560:	2300      	movs	r3, #0
   15562:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15566:	f7ff ffe7 	bl	15538 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1556a:	4b14      	ldr	r3, [pc, #80]	; (155bc <z_arm_init_arch_hw_at_boot+0x60>)
   1556c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   15578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   1557c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   15580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   15584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   15588:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   1558c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15590:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15594:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15598:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   1559c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   155a0:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   155a4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   155a8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   155ac:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   155b0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   155b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   155b6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   155ba:	bd08      	pop	{r3, pc}
   155bc:	e000e100 	.word	0xe000e100

000155c0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   155c0:	4b08      	ldr	r3, [pc, #32]	; (155e4 <z_impl_k_thread_abort+0x24>)
   155c2:	689b      	ldr	r3, [r3, #8]
   155c4:	4283      	cmp	r3, r0
   155c6:	d10b      	bne.n	155e0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   155c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   155cc:	b143      	cbz	r3, 155e0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   155ce:	4b06      	ldr	r3, [pc, #24]	; (155e8 <z_impl_k_thread_abort+0x28>)
   155d0:	685a      	ldr	r2, [r3, #4]
   155d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   155d6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   155d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   155da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   155de:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   155e0:	f00e be32 	b.w	24248 <z_thread_abort>
   155e4:	20003358 	.word	0x20003358
   155e8:	e000ed00 	.word	0xe000ed00

000155ec <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   155ec:	4b02      	ldr	r3, [pc, #8]	; (155f8 <z_arm_configure_static_mpu_regions+0xc>)
   155ee:	4a03      	ldr	r2, [pc, #12]	; (155fc <z_arm_configure_static_mpu_regions+0x10>)
   155f0:	4803      	ldr	r0, [pc, #12]	; (15600 <z_arm_configure_static_mpu_regions+0x14>)
   155f2:	2101      	movs	r1, #1
   155f4:	f000 b89a 	b.w	1572c <arm_core_mpu_configure_static_mpu_regions>
   155f8:	20010000 	.word	0x20010000
   155fc:	20000000 	.word	0x20000000
   15600:	0002af04 	.word	0x0002af04

00015604 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15604:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15606:	4b05      	ldr	r3, [pc, #20]	; (1561c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   15608:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1560a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   1560c:	4a04      	ldr	r2, [pc, #16]	; (15620 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1560e:	2140      	movs	r1, #64	; 0x40
   15610:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15614:	4618      	mov	r0, r3
   15616:	2101      	movs	r1, #1
   15618:	f000 b892 	b.w	15740 <arm_core_mpu_configure_dynamic_mpu_regions>
   1561c:	20002f30 	.word	0x20002f30
   15620:	150b0000 	.word	0x150b0000

00015624 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15628:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 156e8 <mpu_configure_regions+0xc4>
   1562c:	469c      	mov	ip, r3
   1562e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15630:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   15632:	2300      	movs	r3, #0
   15634:	428b      	cmp	r3, r1
   15636:	da1c      	bge.n	15672 <mpu_configure_regions+0x4e>
		if (regions[i].size == 0U) {
   15638:	6844      	ldr	r4, [r0, #4]
   1563a:	2c00      	cmp	r4, #0
   1563c:	d051      	beq.n	156e2 <mpu_configure_regions+0xbe>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1563e:	f1bc 0f00 	cmp.w	ip, #0
   15642:	d01f      	beq.n	15684 <mpu_configure_regions+0x60>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15644:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15646:	4234      	tst	r4, r6
   15648:	d017      	beq.n	1567a <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1564a:	466c      	mov	r4, sp
   1564c:	b088      	sub	sp, #32
   1564e:	466a      	mov	r2, sp
   15650:	4926      	ldr	r1, [pc, #152]	; (156ec <mpu_configure_regions+0xc8>)
   15652:	6151      	str	r1, [r2, #20]
   15654:	4926      	ldr	r1, [pc, #152]	; (156f0 <mpu_configure_regions+0xcc>)
   15656:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1565a:	2304      	movs	r3, #4
   1565c:	f842 3f10 	str.w	r3, [r2, #16]!
   15660:	4824      	ldr	r0, [pc, #144]	; (156f4 <mpu_configure_regions+0xd0>)
   15662:	2300      	movs	r3, #0
   15664:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15668:	f7fe f95e 	bl	13928 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1566c:	f06f 0515 	mvn.w	r5, #21
   15670:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15672:	4628      	mov	r0, r5
   15674:	46bd      	mov	sp, r7
   15676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   1567a:	2c1f      	cmp	r4, #31
   1567c:	d9e5      	bls.n	1564a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   1567e:	6802      	ldr	r2, [r0, #0]
		&&
   15680:	4216      	tst	r6, r2
   15682:	d1e2      	bne.n	1564a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15684:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15686:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15688:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1568a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   1568e:	d916      	bls.n	156be <mpu_configure_regions+0x9a>
	if (size > (1UL << 31)) {
   15690:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15694:	d815      	bhi.n	156c2 <mpu_configure_regions+0x9e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15696:	3c01      	subs	r4, #1
   15698:	fab4 f484 	clz	r4, r4
   1569c:	f1c4 041f 	rsb	r4, r4, #31
   156a0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   156a2:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   156a6:	ea46 0604 	orr.w	r6, r6, r4
   156aa:	d90c      	bls.n	156c6 <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   156ac:	466c      	mov	r4, sp
   156ae:	b088      	sub	sp, #32
   156b0:	466a      	mov	r2, sp
   156b2:	4b11      	ldr	r3, [pc, #68]	; (156f8 <mpu_configure_regions+0xd4>)
   156b4:	6153      	str	r3, [r2, #20]
   156b6:	4b11      	ldr	r3, [pc, #68]	; (156fc <mpu_configure_regions+0xd8>)
   156b8:	e9c2 3506 	strd	r3, r5, [r2, #24]
   156bc:	e7cd      	b.n	1565a <mpu_configure_regions+0x36>
		return REGION_32B;
   156be:	2408      	movs	r4, #8
   156c0:	e7ef      	b.n	156a2 <mpu_configure_regions+0x7e>
		return REGION_4G;
   156c2:	243e      	movs	r4, #62	; 0x3e
   156c4:	e7ed      	b.n	156a2 <mpu_configure_regions+0x7e>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   156c6:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   156ca:	432a      	orrs	r2, r5
   156cc:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   156d0:	f046 0601 	orr.w	r6, r6, #1
   156d4:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   156d8:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   156dc:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   156de:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   156e2:	3301      	adds	r3, #1
   156e4:	300c      	adds	r0, #12
   156e6:	e7a5      	b.n	15634 <mpu_configure_regions+0x10>
   156e8:	e000ed00 	.word	0xe000ed00
   156ec:	0002c296 	.word	0x0002c296
   156f0:	0002c300 	.word	0x0002c300
   156f4:	0002a900 	.word	0x0002a900
   156f8:	0002c2bd 	.word	0x0002c2bd
   156fc:	0002c2e7 	.word	0x0002c2e7

00015700 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15700:	4b04      	ldr	r3, [pc, #16]	; (15714 <arm_core_mpu_enable+0x14>)
   15702:	2205      	movs	r2, #5
   15704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1570c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15710:	4770      	bx	lr
   15712:	bf00      	nop
   15714:	e000ed00 	.word	0xe000ed00

00015718 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15718:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1571c:	4b02      	ldr	r3, [pc, #8]	; (15728 <arm_core_mpu_disable+0x10>)
   1571e:	2200      	movs	r2, #0
   15720:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15724:	4770      	bx	lr
   15726:	bf00      	nop
   15728:	e000ed00 	.word	0xe000ed00

0001572c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1572c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1572e:	4c03      	ldr	r4, [pc, #12]	; (1573c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15730:	2301      	movs	r3, #1
   15732:	7822      	ldrb	r2, [r4, #0]
   15734:	f7ff ff76 	bl	15624 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15738:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1573a:	bd10      	pop	{r4, pc}
   1573c:	200033d7 	.word	0x200033d7

00015740 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15740:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15742:	4a09      	ldr	r2, [pc, #36]	; (15768 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   15744:	2300      	movs	r3, #0
   15746:	7812      	ldrb	r2, [r2, #0]
   15748:	f7ff ff6c 	bl	15624 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   1574c:	f110 0f16 	cmn.w	r0, #22
   15750:	d003      	beq.n	1575a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   15752:	4b06      	ldr	r3, [pc, #24]	; (1576c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   15754:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15756:	2807      	cmp	r0, #7
   15758:	dd00      	ble.n	1575c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1575a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   1575c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15760:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15764:	3001      	adds	r0, #1
   15766:	e7f6      	b.n	15756 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   15768:	200033d7 	.word	0x200033d7
   1576c:	e000ed00 	.word	0xe000ed00

00015770 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15770:	4914      	ldr	r1, [pc, #80]	; (157c4 <z_arm_mpu_init+0x54>)
   15772:	6808      	ldr	r0, [r1, #0]
   15774:	2808      	cmp	r0, #8
{
   15776:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15778:	d821      	bhi.n	157be <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1577a:	f7ff ffcd 	bl	15718 <arm_core_mpu_disable>
   1577e:	4c12      	ldr	r4, [pc, #72]	; (157c8 <z_arm_mpu_init+0x58>)
   15780:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15782:	2200      	movs	r2, #0
   15784:	4290      	cmp	r0, r2
   15786:	f101 010c 	add.w	r1, r1, #12
   1578a:	d105      	bne.n	15798 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1578c:	4b0f      	ldr	r3, [pc, #60]	; (157cc <z_arm_mpu_init+0x5c>)
   1578e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   15790:	f7ff ffb6 	bl	15700 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15794:	2000      	movs	r0, #0
}
   15796:	bd10      	pop	{r4, pc}
   15798:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1579c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   157a0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   157a4:	4313      	orrs	r3, r2
   157a6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   157aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   157ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
   157b2:	f043 0301 	orr.w	r3, r3, #1
   157b6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   157ba:	3201      	adds	r2, #1
   157bc:	e7e2      	b.n	15784 <z_arm_mpu_init+0x14>
		return -1;
   157be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   157c2:	e7e8      	b.n	15796 <z_arm_mpu_init+0x26>
   157c4:	0002af10 	.word	0x0002af10
   157c8:	e000ed00 	.word	0xe000ed00
   157cc:	200033d7 	.word	0x200033d7

000157d0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   157d0:	4b01      	ldr	r3, [pc, #4]	; (157d8 <__stdout_hook_install+0x8>)
   157d2:	6018      	str	r0, [r3, #0]
}
   157d4:	4770      	bx	lr
   157d6:	bf00      	nop
   157d8:	2000073c 	.word	0x2000073c

000157dc <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *ZRESTRICT str, const char *ZRESTRICT format, ...)
{
   157dc:	b40e      	push	{r1, r2, r3}
   157de:	b510      	push	{r4, lr}
   157e0:	b087      	sub	sp, #28
   157e2:	ab09      	add	r3, sp, #36	; 0x24
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   157e4:	2400      	movs	r4, #0

	struct emitter p;
	int     r;

	p.ptr = str;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   157e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
   157ea:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = str;
   157ee:	9004      	str	r0, [sp, #16]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
   157f0:	9105      	str	r1, [sp, #20]
   157f2:	9400      	str	r4, [sp, #0]
   157f4:	a904      	add	r1, sp, #16
   157f6:	4805      	ldr	r0, [pc, #20]	; (1580c <sprintf+0x30>)

	va_start(vargs, format);
   157f8:	9303      	str	r3, [sp, #12]
   157fa:	f7fc febb 	bl	12574 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   157fe:	9b04      	ldr	r3, [sp, #16]
   15800:	701c      	strb	r4, [r3, #0]
	return r;
}
   15802:	b007      	add	sp, #28
   15804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15808:	b003      	add	sp, #12
   1580a:	4770      	bx	lr
   1580c:	00026c1b 	.word	0x00026c1b

00015810 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15810:	f04f 0340 	mov.w	r3, #64	; 0x40
   15814:	f3ef 8211 	mrs	r2, BASEPRI
   15818:	f383 8812 	msr	BASEPRI_MAX, r3
   1581c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15820:	4906      	ldr	r1, [pc, #24]	; (1583c <nordicsemi_nrf52_init+0x2c>)
   15822:	2301      	movs	r3, #1
   15824:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1582c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15830:	f382 8811 	msr	BASEPRI, r2
   15834:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15838:	2000      	movs	r0, #0
   1583a:	4770      	bx	lr
   1583c:	4001e000 	.word	0x4001e000

00015840 <sys_arch_reboot>:
    *p_gpregret = val;
   15840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15844:	b2c0      	uxtb	r0, r0
   15846:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1584a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1584e:	4905      	ldr	r1, [pc, #20]	; (15864 <sys_arch_reboot+0x24>)
   15850:	4b05      	ldr	r3, [pc, #20]	; (15868 <sys_arch_reboot+0x28>)
   15852:	68ca      	ldr	r2, [r1, #12]
   15854:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15858:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1585a:	60cb      	str	r3, [r1, #12]
   1585c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15860:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15862:	e7fd      	b.n	15860 <sys_arch_reboot+0x20>
   15864:	e000ed00 	.word	0xe000ed00
   15868:	05fa0004 	.word	0x05fa0004

0001586c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1586c:	b120      	cbz	r0, 15878 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1586e:	4b03      	ldr	r3, [pc, #12]	; (1587c <arch_busy_wait+0x10>)
   15870:	0180      	lsls	r0, r0, #6
   15872:	f043 0301 	orr.w	r3, r3, #1
   15876:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15878:	4770      	bx	lr
   1587a:	bf00      	nop
   1587c:	0002aaa0 	.word	0x0002aaa0

00015880 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   15880:	b508      	push	{r3, lr}
   15882:	4804      	ldr	r0, [pc, #16]	; (15894 <xoshiro128_initialize+0x14>)
   15884:	f014 f85b 	bl	2993e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15888:	2800      	cmp	r0, #0
}
   1588a:	bf0c      	ite	eq
   1588c:	f06f 0012 	mvneq.w	r0, #18
   15890:	2000      	movne	r0, #0
   15892:	bd08      	pop	{r3, pc}
   15894:	0002a550 	.word	0x0002a550

00015898 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15898:	4b0e      	ldr	r3, [pc, #56]	; (158d4 <bt_hex+0x3c>)
   1589a:	2940      	cmp	r1, #64	; 0x40
{
   1589c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1589e:	bf28      	it	cs
   158a0:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   158a2:	4c0d      	ldr	r4, [pc, #52]	; (158d8 <bt_hex+0x40>)
   158a4:	1846      	adds	r6, r0, r1
   158a6:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   158a8:	42b0      	cmp	r0, r6
   158aa:	f103 0302 	add.w	r3, r3, #2
   158ae:	d104      	bne.n	158ba <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   158b0:	2300      	movs	r3, #0
   158b2:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   158b6:	4807      	ldr	r0, [pc, #28]	; (158d4 <bt_hex+0x3c>)
   158b8:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   158ba:	7802      	ldrb	r2, [r0, #0]
   158bc:	0912      	lsrs	r2, r2, #4
   158be:	5ca2      	ldrb	r2, [r4, r2]
   158c0:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   158c4:	f810 2b01 	ldrb.w	r2, [r0], #1
   158c8:	f002 020f 	and.w	r2, r2, #15
   158cc:	5ca2      	ldrb	r2, [r4, r2]
   158ce:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   158d2:	e7e9      	b.n	158a8 <bt_hex+0x10>
   158d4:	200033f6 	.word	0x200033f6
   158d8:	0002c343 	.word	0x0002c343

000158dc <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   158dc:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   158de:	7803      	ldrb	r3, [r0, #0]
   158e0:	b08b      	sub	sp, #44	; 0x2c
   158e2:	4604      	mov	r4, r0
   158e4:	ad07      	add	r5, sp, #28
   158e6:	2b03      	cmp	r3, #3
   158e8:	d821      	bhi.n	1592e <bt_addr_le_str+0x52>
   158ea:	e8df f003 	tbb	[pc, r3]
   158ee:	1a02      	.short	0x1a02
   158f0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   158f2:	4912      	ldr	r1, [pc, #72]	; (1593c <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   158f4:	4628      	mov	r0, r5
   158f6:	f011 f91b 	bl	26b30 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   158fa:	9505      	str	r5, [sp, #20]
   158fc:	7863      	ldrb	r3, [r4, #1]
   158fe:	9304      	str	r3, [sp, #16]
   15900:	78a3      	ldrb	r3, [r4, #2]
   15902:	9303      	str	r3, [sp, #12]
   15904:	78e3      	ldrb	r3, [r4, #3]
   15906:	9302      	str	r3, [sp, #8]
   15908:	7923      	ldrb	r3, [r4, #4]
   1590a:	9301      	str	r3, [sp, #4]
   1590c:	7963      	ldrb	r3, [r4, #5]
   1590e:	9300      	str	r3, [sp, #0]
   15910:	79a3      	ldrb	r3, [r4, #6]
   15912:	4a0b      	ldr	r2, [pc, #44]	; (15940 <bt_addr_le_str+0x64>)
   15914:	480b      	ldr	r0, [pc, #44]	; (15944 <bt_addr_le_str+0x68>)
   15916:	211e      	movs	r1, #30
   15918:	f00f fc99 	bl	2524e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1591c:	4809      	ldr	r0, [pc, #36]	; (15944 <bt_addr_le_str+0x68>)
   1591e:	b00b      	add	sp, #44	; 0x2c
   15920:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15922:	4909      	ldr	r1, [pc, #36]	; (15948 <bt_addr_le_str+0x6c>)
   15924:	e7e6      	b.n	158f4 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   15926:	4909      	ldr	r1, [pc, #36]	; (1594c <bt_addr_le_str+0x70>)
   15928:	e7e4      	b.n	158f4 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   1592a:	4909      	ldr	r1, [pc, #36]	; (15950 <bt_addr_le_str+0x74>)
   1592c:	e7e2      	b.n	158f4 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1592e:	4a09      	ldr	r2, [pc, #36]	; (15954 <bt_addr_le_str+0x78>)
   15930:	210a      	movs	r1, #10
   15932:	4628      	mov	r0, r5
   15934:	f00f fc8b 	bl	2524e <snprintk>
		break;
   15938:	e7df      	b.n	158fa <bt_addr_le_str+0x1e>
   1593a:	bf00      	nop
   1593c:	0002b64f 	.word	0x0002b64f
   15940:	0002b671 	.word	0x0002b671
   15944:	200033d8 	.word	0x200033d8
   15948:	0002b656 	.word	0x0002b656
   1594c:	0002b65d 	.word	0x0002b65d
   15950:	0002b667 	.word	0x0002b667
   15954:	0002e6db 	.word	0x0002e6db

00015958 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   15958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1595a:	af00      	add	r7, sp, #0
	int err;
	LOG_INF("Saving ID");
   1595c:	466d      	mov	r5, sp
   1595e:	b088      	sub	sp, #32
   15960:	466a      	mov	r2, sp
   15962:	4b1f      	ldr	r3, [pc, #124]	; (159e0 <save_id+0x88>)
   15964:	6153      	str	r3, [r2, #20]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   15966:	4e1f      	ldr	r6, [pc, #124]	; (159e4 <save_id+0x8c>)
	LOG_INF("Saving ID");
   15968:	4c1f      	ldr	r4, [pc, #124]	; (159e8 <save_id+0x90>)
   1596a:	6194      	str	r4, [r2, #24]
   1596c:	2303      	movs	r3, #3
   1596e:	f842 3f10 	str.w	r3, [r2, #16]!
   15972:	481e      	ldr	r0, [pc, #120]	; (159ec <save_id+0x94>)
   15974:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   15978:	f011 f9b5 	bl	26ce6 <z_log_msg_static_create.constprop.0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1597c:	79f2      	ldrb	r2, [r6, #7]
   1597e:	481c      	ldr	r0, [pc, #112]	; (159f0 <save_id+0x98>)
   15980:	46ad      	mov	sp, r5
   15982:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   15986:	4631      	mov	r1, r6
   15988:	f7fe fdbe 	bl	14508 <settings_save_one>
	if (err) {
   1598c:	b170      	cbz	r0, 159ac <save_id+0x54>
		LOG_ERR("Failed to save ID (err %d)", err);
   1598e:	b088      	sub	sp, #32
   15990:	466a      	mov	r2, sp
   15992:	4b18      	ldr	r3, [pc, #96]	; (159f4 <save_id+0x9c>)
   15994:	61d0      	str	r0, [r2, #28]
   15996:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1599a:	2304      	movs	r3, #4
   1599c:	f842 3f10 	str.w	r3, [r2, #16]!
   159a0:	4812      	ldr	r0, [pc, #72]	; (159ec <save_id+0x94>)
   159a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159a6:	f011 f99e 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   159aa:	46ad      	mov	sp, r5
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   159ac:	79f2      	ldrb	r2, [r6, #7]
   159ae:	4912      	ldr	r1, [pc, #72]	; (159f8 <save_id+0xa0>)
   159b0:	4812      	ldr	r0, [pc, #72]	; (159fc <save_id+0xa4>)
   159b2:	0112      	lsls	r2, r2, #4
   159b4:	f7fe fda8 	bl	14508 <settings_save_one>
	if (err) {
   159b8:	b178      	cbz	r0, 159da <save_id+0x82>
		LOG_ERR("Failed to save IRK (err %d)", err);
   159ba:	466d      	mov	r5, sp
   159bc:	b088      	sub	sp, #32
   159be:	466a      	mov	r2, sp
   159c0:	4b0f      	ldr	r3, [pc, #60]	; (15a00 <save_id+0xa8>)
   159c2:	61d0      	str	r0, [r2, #28]
   159c4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   159c8:	2304      	movs	r3, #4
   159ca:	f842 3f10 	str.w	r3, [r2, #16]!
   159ce:	4807      	ldr	r0, [pc, #28]	; (159ec <save_id+0x94>)
   159d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   159d4:	f011 f987 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   159d8:	46ad      	mov	sp, r5
	}
#endif
}
   159da:	46bd      	mov	sp, r7
   159dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159de:	bf00      	nop
   159e0:	0002c35b 	.word	0x0002c35b
   159e4:	20000390 	.word	0x20000390
   159e8:	0002c569 	.word	0x0002c569
   159ec:	0002a890 	.word	0x0002a890
   159f0:	0002c369 	.word	0x0002c369
   159f4:	0002c36f 	.word	0x0002c36f
   159f8:	200004f8 	.word	0x200004f8
   159fc:	0002c38e 	.word	0x0002c38e
   15a00:	0002c395 	.word	0x0002c395

00015a04 <set_setting>:
{
   15a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a08:	4c59      	ldr	r4, [pc, #356]	; (15b70 <set_setting+0x16c>)
   15a0a:	b082      	sub	sp, #8
   15a0c:	f3bf 8f5b 	dmb	ish
   15a10:	4698      	mov	r8, r3
   15a12:	6823      	ldr	r3, [r4, #0]
   15a14:	f3bf 8f5b 	dmb	ish
   15a18:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15a1a:	07da      	lsls	r2, r3, #31
{
   15a1c:	af00      	add	r7, sp, #0
   15a1e:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15a20:	d537      	bpl.n	15a92 <set_setting+0x8e>
	if (!name) {
   15a22:	b990      	cbnz	r0, 15a4a <set_setting+0x46>
		LOG_ERR("Insufficient number of arguments");
   15a24:	466c      	mov	r4, sp
   15a26:	b088      	sub	sp, #32
   15a28:	466a      	mov	r2, sp
   15a2a:	4b52      	ldr	r3, [pc, #328]	; (15b74 <set_setting+0x170>)
   15a2c:	6153      	str	r3, [r2, #20]
   15a2e:	4b52      	ldr	r3, [pc, #328]	; (15b78 <set_setting+0x174>)
   15a30:	6193      	str	r3, [r2, #24]
   15a32:	2303      	movs	r3, #3
   15a34:	f842 3f10 	str.w	r3, [r2, #16]!
   15a38:	4850      	ldr	r0, [pc, #320]	; (15b7c <set_setting+0x178>)
   15a3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a3e:	f011 f952 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   15a42:	46a5      	mov	sp, r4
		return -ENOENT;
   15a44:	f06f 0001 	mvn.w	r0, #1
   15a48:	e024      	b.n	15a94 <set_setting+0x90>
	len = settings_name_next(name, &next);
   15a4a:	1d39      	adds	r1, r7, #4
   15a4c:	f010 fcee 	bl	2642c <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15a50:	494b      	ldr	r1, [pc, #300]	; (15b80 <set_setting+0x17c>)
	len = settings_name_next(name, &next);
   15a52:	4682      	mov	sl, r0
	if (!strncmp(name, "id", len)) {
   15a54:	4602      	mov	r2, r0
   15a56:	4628      	mov	r0, r5
   15a58:	f011 f8a4 	bl	26ba4 <strncmp>
   15a5c:	2800      	cmp	r0, #0
   15a5e:	d140      	bne.n	15ae2 <set_setting+0xde>
   15a60:	f3bf 8f5b 	dmb	ish
   15a64:	6823      	ldr	r3, [r4, #0]
   15a66:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15a6a:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   15a6e:	071b      	lsls	r3, r3, #28
   15a70:	d514      	bpl.n	15a9c <set_setting+0x98>
			LOG_WRN("Ignoring identities stored in flash");
   15a72:	466c      	mov	r4, sp
   15a74:	b088      	sub	sp, #32
   15a76:	466a      	mov	r2, sp
   15a78:	4b42      	ldr	r3, [pc, #264]	; (15b84 <set_setting+0x180>)
   15a7a:	6153      	str	r3, [r2, #20]
   15a7c:	4b3e      	ldr	r3, [pc, #248]	; (15b78 <set_setting+0x174>)
   15a7e:	6193      	str	r3, [r2, #24]
   15a80:	2303      	movs	r3, #3
   15a82:	f842 3f10 	str.w	r3, [r2, #16]!
   15a86:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15a8a:	483c      	ldr	r0, [pc, #240]	; (15b7c <set_setting+0x178>)
   15a8c:	f011 f92b 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   15a90:	46a5      	mov	sp, r4
		return 0;
   15a92:	2000      	movs	r0, #0
}
   15a94:	3708      	adds	r7, #8
   15a96:	46bd      	mov	sp, r7
   15a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15a9c:	3cd4      	subs	r4, #212	; 0xd4
   15a9e:	2207      	movs	r2, #7
   15aa0:	4621      	mov	r1, r4
   15aa2:	4640      	mov	r0, r8
   15aa4:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   15aa6:	2806      	cmp	r0, #6
   15aa8:	d816      	bhi.n	15ad8 <set_setting+0xd4>
				LOG_ERR("Invalid length ID address in storage");
   15aaa:	466e      	mov	r6, sp
   15aac:	b088      	sub	sp, #32
   15aae:	466a      	mov	r2, sp
   15ab0:	4b35      	ldr	r3, [pc, #212]	; (15b88 <set_setting+0x184>)
   15ab2:	6153      	str	r3, [r2, #20]
   15ab4:	4b30      	ldr	r3, [pc, #192]	; (15b78 <set_setting+0x174>)
   15ab6:	6193      	str	r3, [r2, #24]
   15ab8:	2303      	movs	r3, #3
   15aba:	f842 3f10 	str.w	r3, [r2, #16]!
   15abe:	482f      	ldr	r0, [pc, #188]	; (15b7c <set_setting+0x178>)
   15ac0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15ac4:	f011 f90f 	bl	26ce6 <z_log_msg_static_create.constprop.0>
			(void)memset(bt_dev.id_addr, 0,
   15ac8:	2207      	movs	r2, #7
   15aca:	46b5      	mov	sp, r6
   15acc:	4629      	mov	r1, r5
   15ace:	4620      	mov	r0, r4
   15ad0:	f011 f897 	bl	26c02 <memset>
			bt_dev.id_count = 0U;
   15ad4:	71e5      	strb	r5, [r4, #7]
   15ad6:	e7dc      	b.n	15a92 <set_setting+0x8e>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   15ad8:	2307      	movs	r3, #7
   15ada:	fbb0 f0f3 	udiv	r0, r0, r3
   15ade:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   15ae0:	e7d7      	b.n	15a92 <set_setting+0x8e>
	if (!strncmp(name, "name", len)) {
   15ae2:	492a      	ldr	r1, [pc, #168]	; (15b8c <set_setting+0x188>)
   15ae4:	4652      	mov	r2, sl
   15ae6:	4628      	mov	r0, r5
   15ae8:	f011 f85c 	bl	26ba4 <strncmp>
   15aec:	4681      	mov	r9, r0
   15aee:	b9c0      	cbnz	r0, 15b22 <set_setting+0x11e>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
   15af0:	2241      	movs	r2, #65	; 0x41
   15af2:	f104 01d6 	add.w	r1, r4, #214	; 0xd6
   15af6:	4640      	mov	r0, r8
   15af8:	47b0      	blx	r6
		if (len < 0) {
   15afa:	1e03      	subs	r3, r0, #0
   15afc:	da0d      	bge.n	15b1a <set_setting+0x116>
			LOG_ERR("Failed to read device name from storage"
   15afe:	466c      	mov	r4, sp
   15b00:	b088      	sub	sp, #32
   15b02:	466a      	mov	r2, sp
   15b04:	4922      	ldr	r1, [pc, #136]	; (15b90 <set_setting+0x18c>)
   15b06:	6151      	str	r1, [r2, #20]
   15b08:	491b      	ldr	r1, [pc, #108]	; (15b78 <set_setting+0x174>)
   15b0a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   15b0e:	2304      	movs	r3, #4
   15b10:	f842 3f10 	str.w	r3, [r2, #16]!
   15b14:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15b18:	e7b7      	b.n	15a8a <set_setting+0x86>
			bt_dev.name[len] = '\0';
   15b1a:	4423      	add	r3, r4
   15b1c:	f883 90d6 	strb.w	r9, [r3, #214]	; 0xd6
			LOG_DBG("Name set to %s", bt_dev.name);
   15b20:	e7b7      	b.n	15a92 <set_setting+0x8e>
	if (!strncmp(name, "irk", len)) {
   15b22:	4628      	mov	r0, r5
   15b24:	491b      	ldr	r1, [pc, #108]	; (15b94 <set_setting+0x190>)
   15b26:	4652      	mov	r2, sl
   15b28:	f011 f83c 	bl	26ba4 <strncmp>
   15b2c:	4605      	mov	r5, r0
   15b2e:	2800      	cmp	r0, #0
   15b30:	d188      	bne.n	15a44 <set_setting+0x40>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   15b32:	2210      	movs	r2, #16
   15b34:	f104 0194 	add.w	r1, r4, #148	; 0x94
   15b38:	4640      	mov	r0, r8
   15b3a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   15b3c:	280f      	cmp	r0, #15
   15b3e:	d8a8      	bhi.n	15a92 <set_setting+0x8e>
				LOG_ERR("Invalid length IRK in storage");
   15b40:	466e      	mov	r6, sp
   15b42:	b088      	sub	sp, #32
   15b44:	466a      	mov	r2, sp
   15b46:	4b14      	ldr	r3, [pc, #80]	; (15b98 <set_setting+0x194>)
   15b48:	6153      	str	r3, [r2, #20]
   15b4a:	4b0b      	ldr	r3, [pc, #44]	; (15b78 <set_setting+0x174>)
   15b4c:	6193      	str	r3, [r2, #24]
   15b4e:	2303      	movs	r3, #3
   15b50:	f842 3f10 	str.w	r3, [r2, #16]!
   15b54:	4809      	ldr	r0, [pc, #36]	; (15b7c <set_setting+0x178>)
   15b56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15b5a:	f011 f8c4 	bl	26ce6 <z_log_msg_static_create.constprop.0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   15b5e:	2210      	movs	r2, #16
   15b60:	46b5      	mov	sp, r6
   15b62:	4629      	mov	r1, r5
   15b64:	f104 0094 	add.w	r0, r4, #148	; 0x94
   15b68:	f011 f84b 	bl	26c02 <memset>
   15b6c:	e791      	b.n	15a92 <set_setting+0x8e>
   15b6e:	bf00      	nop
   15b70:	20000464 	.word	0x20000464
   15b74:	0002c3b5 	.word	0x0002c3b5
   15b78:	0002c54d 	.word	0x0002c54d
   15b7c:	0002a890 	.word	0x0002a890
   15b80:	0002b664 	.word	0x0002b664
   15b84:	0002c3da 	.word	0x0002c3da
   15b88:	0002c402 	.word	0x0002c402
   15b8c:	0002cd52 	.word	0x0002cd52
   15b90:	0002c42b 	.word	0x0002c42b
   15b94:	0002c391 	.word	0x0002c391
   15b98:	0002c461 	.word	0x0002c461

00015b9c <bt_settings_encode_key>:
{
   15b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ba0:	b088      	sub	sp, #32
		snprintk(path, path_size,
   15ba2:	799c      	ldrb	r4, [r3, #6]
{
   15ba4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   15ba8:	795d      	ldrb	r5, [r3, #5]
   15baa:	791e      	ldrb	r6, [r3, #4]
   15bac:	78df      	ldrb	r7, [r3, #3]
   15bae:	f893 c002 	ldrb.w	ip, [r3, #2]
   15bb2:	f893 e001 	ldrb.w	lr, [r3, #1]
   15bb6:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   15bb8:	f1b8 0f00 	cmp.w	r8, #0
   15bbc:	d00e      	beq.n	15bdc <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15bbe:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15bc2:	e9cd ce04 	strd	ip, lr, [sp, #16]
   15bc6:	4613      	mov	r3, r2
   15bc8:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15bcc:	e9cd 4500 	strd	r4, r5, [sp]
   15bd0:	4a08      	ldr	r2, [pc, #32]	; (15bf4 <bt_settings_encode_key+0x58>)
   15bd2:	f00f fb3c 	bl	2524e <snprintk>
}
   15bd6:	b008      	add	sp, #32
   15bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15bdc:	e9cd e305 	strd	lr, r3, [sp, #20]
   15be0:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15be4:	4613      	mov	r3, r2
   15be6:	e9cd 5601 	strd	r5, r6, [sp, #4]
   15bea:	4a03      	ldr	r2, [pc, #12]	; (15bf8 <bt_settings_encode_key+0x5c>)
   15bec:	9400      	str	r4, [sp, #0]
   15bee:	f00f fb2e 	bl	2524e <snprintk>
}
   15bf2:	e7f0      	b.n	15bd6 <bt_settings_encode_key+0x3a>
   15bf4:	0002c483 	.word	0x0002c483
   15bf8:	0002c4a7 	.word	0x0002c4a7

00015bfc <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15bfc:	4801      	ldr	r0, [pc, #4]	; (15c04 <bt_settings_save_id+0x8>)
   15bfe:	f00d bf9f 	b.w	23b40 <k_work_submit>
   15c02:	bf00      	nop
   15c04:	20000740 	.word	0x20000740

00015c08 <commit_settings>:
}

static int commit_settings(void)
{
   15c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c0c:	4d28      	ldr	r5, [pc, #160]	; (15cb0 <commit_settings+0xa8>)
   15c0e:	f3bf 8f5b 	dmb	ish
   15c12:	682b      	ldr	r3, [r5, #0]
   15c14:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15c18:	f013 0f01 	tst.w	r3, #1
{
   15c1c:	af00      	add	r7, sp, #0
   15c1e:	462e      	mov	r6, r5
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15c20:	d043      	beq.n	15caa <commit_settings+0xa2>
		 */
		return 0;
	}

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
   15c22:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
   15c26:	f1a5 08d4 	sub.w	r8, r5, #212	; 0xd4
   15c2a:	b913      	cbnz	r3, 15c32 <commit_settings+0x2a>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
   15c2c:	4821      	ldr	r0, [pc, #132]	; (15cb4 <commit_settings+0xac>)
   15c2e:	f001 fea5 	bl	1797c <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
   15c32:	f898 3007 	ldrb.w	r3, [r8, #7]
   15c36:	b9fb      	cbnz	r3, 15c78 <commit_settings+0x70>
		err = bt_setup_public_id_addr();
   15c38:	f002 fb12 	bl	18260 <bt_setup_public_id_addr>
		if (err) {
   15c3c:	4604      	mov	r4, r0
   15c3e:	b198      	cbz	r0, 15c68 <commit_settings+0x60>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   15c40:	466d      	mov	r5, sp
   15c42:	b088      	sub	sp, #32
   15c44:	466a      	mov	r2, sp
   15c46:	4b1c      	ldr	r3, [pc, #112]	; (15cb8 <commit_settings+0xb0>)
   15c48:	6153      	str	r3, [r2, #20]
   15c4a:	4b1c      	ldr	r3, [pc, #112]	; (15cbc <commit_settings+0xb4>)
   15c4c:	6193      	str	r3, [r2, #24]
   15c4e:	2303      	movs	r3, #3
   15c50:	f842 3f10 	str.w	r3, [r2, #16]!
   15c54:	481a      	ldr	r0, [pc, #104]	; (15cc0 <commit_settings+0xb8>)
   15c56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c5a:	f011 f844 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   15c5e:	46ad      	mov	sp, r5
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   15c60:	4620      	mov	r0, r4
   15c62:	46bd      	mov	sp, r7
   15c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_dev.id_count) {
   15c68:	f898 3007 	ldrb.w	r3, [r8, #7]
   15c6c:	b923      	cbnz	r3, 15c78 <commit_settings+0x70>
		err = bt_setup_random_id_addr();
   15c6e:	f002 fbb3 	bl	183d8 <bt_setup_random_id_addr>
		if (err) {
   15c72:	4604      	mov	r4, r0
   15c74:	2800      	cmp	r0, #0
   15c76:	d1e3      	bne.n	15c40 <commit_settings+0x38>
   15c78:	f3bf 8f5b 	dmb	ish
   15c7c:	682b      	ldr	r3, [r5, #0]
   15c7e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15c82:	075a      	lsls	r2, r3, #29
   15c84:	d401      	bmi.n	15c8a <commit_settings+0x82>
		bt_finalize_init();
   15c86:	f001 fce7 	bl	17658 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c8a:	f3bf 8f5b 	dmb	ish
   15c8e:	e856 3f00 	ldrex	r3, [r6]
   15c92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   15c96:	e846 2100 	strex	r1, r2, [r6]
   15c9a:	2900      	cmp	r1, #0
   15c9c:	d1f7      	bne.n	15c8e <commit_settings+0x86>
   15c9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   15ca2:	03db      	lsls	r3, r3, #15
   15ca4:	d501      	bpl.n	15caa <commit_settings+0xa2>
		bt_settings_save_id();
   15ca6:	f7ff ffa9 	bl	15bfc <bt_settings_save_id>
		return 0;
   15caa:	2400      	movs	r4, #0
   15cac:	e7d8      	b.n	15c60 <commit_settings+0x58>
   15cae:	bf00      	nop
   15cb0:	20000464 	.word	0x20000464
   15cb4:	0002c4c8 	.word	0x0002c4c8
   15cb8:	0002c4eb 	.word	0x0002c4eb
   15cbc:	0002c559 	.word	0x0002c559
   15cc0:	0002a890 	.word	0x0002a890

00015cc4 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   15cc4:	b5b0      	push	{r4, r5, r7, lr}
   15cc6:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   15cc8:	f7fe fd88 	bl	147dc <settings_subsys_init>
	if (err) {
   15ccc:	4604      	mov	r4, r0
   15cce:	b180      	cbz	r0, 15cf2 <bt_settings_init+0x2e>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   15cd0:	466d      	mov	r5, sp
   15cd2:	b088      	sub	sp, #32
   15cd4:	466a      	mov	r2, sp
   15cd6:	4b08      	ldr	r3, [pc, #32]	; (15cf8 <bt_settings_init+0x34>)
   15cd8:	6153      	str	r3, [r2, #20]
   15cda:	4b08      	ldr	r3, [pc, #32]	; (15cfc <bt_settings_init+0x38>)
   15cdc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   15ce0:	2304      	movs	r3, #4
   15ce2:	f842 3f10 	str.w	r3, [r2, #16]!
   15ce6:	4806      	ldr	r0, [pc, #24]	; (15d00 <bt_settings_init+0x3c>)
   15ce8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15cec:	f010 fffb 	bl	26ce6 <z_log_msg_static_create.constprop.0>
   15cf0:	46ad      	mov	sp, r5
		return err;
	}

	return 0;
}
   15cf2:	4620      	mov	r0, r4
   15cf4:	46bd      	mov	sp, r7
   15cf6:	bdb0      	pop	{r4, r5, r7, pc}
   15cf8:	0002c513 	.word	0x0002c513
   15cfc:	0002c53c 	.word	0x0002c53c
   15d00:	0002a890 	.word	0x0002a890

00015d04 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   15d04:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   15d06:	4d0a      	ldr	r5, [pc, #40]	; (15d30 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d08:	4b0a      	ldr	r3, [pc, #40]	; (15d34 <long_wq_init+0x30>)
{
   15d0a:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d0c:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   15d0e:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   15d10:	9302      	str	r3, [sp, #8]
   15d12:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   15d14:	f014 f84e 	bl	29db4 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   15d18:	ab02      	add	r3, sp, #8
   15d1a:	9300      	str	r3, [sp, #0]
   15d1c:	4628      	mov	r0, r5
   15d1e:	4906      	ldr	r1, [pc, #24]	; (15d38 <long_wq_init+0x34>)
   15d20:	230a      	movs	r3, #10
   15d22:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15d26:	f00d ff11 	bl	23b4c <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15d2a:	4620      	mov	r0, r4
   15d2c:	b005      	add	sp, #20
   15d2e:	bd30      	pop	{r4, r5, pc}
   15d30:	20001e60 	.word	0x20001e60
   15d34:	0002c580 	.word	0x0002c580
   15d38:	20003d00 	.word	0x20003d00

00015d3c <bt_long_wq_schedule>:
{
   15d3c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15d3e:	4801      	ldr	r0, [pc, #4]	; (15d44 <bt_long_wq_schedule+0x8>)
   15d40:	f00d bf3c 	b.w	23bbc <k_work_schedule_for_queue>
   15d44:	20001e60 	.word	0x20001e60

00015d48 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15d48:	b430      	push	{r4, r5}
   15d4a:	4603      	mov	r3, r0
   15d4c:	4608      	mov	r0, r1
	switch (src->type) {
   15d4e:	781a      	ldrb	r2, [r3, #0]
   15d50:	2a01      	cmp	r2, #1
   15d52:	d013      	beq.n	15d7c <uuid_to_uuid128+0x34>
   15d54:	2a02      	cmp	r2, #2
   15d56:	d026      	beq.n	15da6 <uuid_to_uuid128+0x5e>
   15d58:	b972      	cbnz	r2, 15d78 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15d5a:	4a15      	ldr	r2, [pc, #84]	; (15db0 <uuid_to_uuid128+0x68>)
   15d5c:	f102 0410 	add.w	r4, r2, #16
   15d60:	f852 5b04 	ldr.w	r5, [r2], #4
   15d64:	f841 5b04 	str.w	r5, [r1], #4
   15d68:	42a2      	cmp	r2, r4
   15d6a:	d1f9      	bne.n	15d60 <uuid_to_uuid128+0x18>
   15d6c:	7812      	ldrb	r2, [r2, #0]
   15d6e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15d70:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   15d72:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15d74:	0a1b      	lsrs	r3, r3, #8
   15d76:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15d78:	bc30      	pop	{r4, r5}
   15d7a:	4770      	bx	lr
		*dst = uuid128_base;
   15d7c:	4a0c      	ldr	r2, [pc, #48]	; (15db0 <uuid_to_uuid128+0x68>)
   15d7e:	f102 0410 	add.w	r4, r2, #16
   15d82:	f852 5b04 	ldr.w	r5, [r2], #4
   15d86:	f841 5b04 	str.w	r5, [r1], #4
   15d8a:	42a2      	cmp	r2, r4
   15d8c:	d1f9      	bne.n	15d82 <uuid_to_uuid128+0x3a>
   15d8e:	7812      	ldrb	r2, [r2, #0]
   15d90:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15d92:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15d94:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15d96:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15d9a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15d9c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15d9e:	0a1b      	lsrs	r3, r3, #8
   15da0:	7382      	strb	r2, [r0, #14]
   15da2:	7403      	strb	r3, [r0, #16]
}
   15da4:	e7e8      	b.n	15d78 <uuid_to_uuid128+0x30>
}
   15da6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15da8:	2211      	movs	r2, #17
   15daa:	4619      	mov	r1, r3
   15dac:	f010 bf1e 	b.w	26bec <memcpy>
   15db0:	0002c5a6 	.word	0x0002c5a6

00015db4 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   15db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   15db6:	7805      	ldrb	r5, [r0, #0]
   15db8:	2d01      	cmp	r5, #1
{
   15dba:	b08b      	sub	sp, #44	; 0x2c
   15dbc:	4604      	mov	r4, r0
   15dbe:	460e      	mov	r6, r1
   15dc0:	4617      	mov	r7, r2
	switch (uuid->type) {
   15dc2:	d00c      	beq.n	15dde <bt_uuid_to_str+0x2a>
   15dc4:	2d02      	cmp	r5, #2
   15dc6:	d00d      	beq.n	15de4 <bt_uuid_to_str+0x30>
   15dc8:	2d00      	cmp	r5, #0
   15dca:	d144      	bne.n	15e56 <bt_uuid_to_str+0xa2>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   15dcc:	8843      	ldrh	r3, [r0, #2]
   15dce:	4a25      	ldr	r2, [pc, #148]	; (15e64 <bt_uuid_to_str+0xb0>)
		break;
	case BT_UUID_TYPE_32:
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   15dd0:	4639      	mov	r1, r7
   15dd2:	4630      	mov	r0, r6
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   15dd4:	b00b      	add	sp, #44	; 0x2c
   15dd6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   15dda:	f00f ba38 	b.w	2524e <snprintk>
   15dde:	6843      	ldr	r3, [r0, #4]
   15de0:	4a21      	ldr	r2, [pc, #132]	; (15e68 <bt_uuid_to_str+0xb4>)
   15de2:	e7f5      	b.n	15dd0 <bt_uuid_to_str+0x1c>
		memcpy(&tmp0, &BT_UUID_128(uuid)->val[0], sizeof(tmp0));
   15de4:	462a      	mov	r2, r5
   15de6:	1c41      	adds	r1, r0, #1
   15de8:	a806      	add	r0, sp, #24
   15dea:	f010 feff 	bl	26bec <memcpy>
		memcpy(&tmp1, &BT_UUID_128(uuid)->val[2], sizeof(tmp1));
   15dee:	1ce1      	adds	r1, r4, #3
   15df0:	2204      	movs	r2, #4
   15df2:	a808      	add	r0, sp, #32
   15df4:	f010 fefa 	bl	26bec <memcpy>
		memcpy(&tmp2, &BT_UUID_128(uuid)->val[6], sizeof(tmp2));
   15df8:	462a      	mov	r2, r5
   15dfa:	1de1      	adds	r1, r4, #7
   15dfc:	f10d 001a 	add.w	r0, sp, #26
   15e00:	f010 fef4 	bl	26bec <memcpy>
		memcpy(&tmp3, &BT_UUID_128(uuid)->val[8], sizeof(tmp3));
   15e04:	462a      	mov	r2, r5
   15e06:	f104 0109 	add.w	r1, r4, #9
   15e0a:	a807      	add	r0, sp, #28
   15e0c:	f010 feee 	bl	26bec <memcpy>
		memcpy(&tmp4, &BT_UUID_128(uuid)->val[10], sizeof(tmp4));
   15e10:	462a      	mov	r2, r5
   15e12:	f104 010b 	add.w	r1, r4, #11
   15e16:	f10d 001e 	add.w	r0, sp, #30
   15e1a:	f010 fee7 	bl	26bec <memcpy>
		memcpy(&tmp5, &BT_UUID_128(uuid)->val[12], sizeof(tmp5));
   15e1e:	f104 010d 	add.w	r1, r4, #13
   15e22:	2204      	movs	r2, #4
   15e24:	a809      	add	r0, sp, #36	; 0x24
   15e26:	f010 fee1 	bl	26bec <memcpy>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   15e2a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   15e2e:	9304      	str	r3, [sp, #16]
   15e30:	9b08      	ldr	r3, [sp, #32]
   15e32:	9303      	str	r3, [sp, #12]
   15e34:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   15e38:	9302      	str	r3, [sp, #8]
   15e3a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   15e3e:	9301      	str	r3, [sp, #4]
   15e40:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   15e44:	9300      	str	r3, [sp, #0]
   15e46:	4a09      	ldr	r2, [pc, #36]	; (15e6c <bt_uuid_to_str+0xb8>)
   15e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15e4a:	4639      	mov	r1, r7
   15e4c:	4630      	mov	r0, r6
   15e4e:	f00f f9fe 	bl	2524e <snprintk>
}
   15e52:	b00b      	add	sp, #44	; 0x2c
   15e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)memset(str, 0, len);
   15e56:	2100      	movs	r1, #0
   15e58:	4630      	mov	r0, r6
}
   15e5a:	b00b      	add	sp, #44	; 0x2c
   15e5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		(void)memset(str, 0, len);
   15e60:	f010 becf 	b.w	26c02 <memset>
   15e64:	0002da84 	.word	0x0002da84
   15e68:	0002be03 	.word	0x0002be03
   15e6c:	0002c589 	.word	0x0002c589

00015e70 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   15e70:	b538      	push	{r3, r4, r5, lr}
   15e72:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   15e74:	4805      	ldr	r0, [pc, #20]	; (15e8c <bt_buf_get_rx+0x1c>)
   15e76:	f013 f8c1 	bl	28ffc <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15e7a:	4604      	mov	r4, r0
   15e7c:	b120      	cbz	r0, 15e88 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   15e7e:	2100      	movs	r1, #0
   15e80:	300c      	adds	r0, #12
   15e82:	f013 f91d 	bl	290c0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15e86:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15e88:	4620      	mov	r0, r4
   15e8a:	bd38      	pop	{r3, r4, r5, pc}
   15e8c:	20000cc4 	.word	0x20000cc4

00015e90 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15e90:	b570      	push	{r4, r5, r6, lr}
   15e92:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15e94:	480d      	ldr	r0, [pc, #52]	; (15ecc <bt_buf_get_cmd_complete+0x3c>)
   15e96:	f3bf 8f5b 	dmb	ish
   15e9a:	460b      	mov	r3, r1
   15e9c:	2100      	movs	r1, #0
   15e9e:	e850 4f00 	ldrex	r4, [r0]
   15ea2:	e840 1500 	strex	r5, r1, [r0]
   15ea6:	2d00      	cmp	r5, #0
   15ea8:	d1f9      	bne.n	15e9e <bt_buf_get_cmd_complete+0xe>
   15eaa:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   15eae:	b924      	cbnz	r4, 15eba <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15eb4:	2001      	movs	r0, #1
   15eb6:	f7ff bfdb 	b.w	15e70 <bt_buf_get_rx>
   15eba:	2301      	movs	r3, #1
   15ebc:	f104 000c 	add.w	r0, r4, #12
   15ec0:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   15ec2:	8221      	strh	r1, [r4, #16]
   15ec4:	f013 f8fc 	bl	290c0 <net_buf_simple_reserve>
}
   15ec8:	4620      	mov	r0, r4
   15eca:	bd70      	pop	{r4, r5, r6, pc}
   15ecc:	200004d0 	.word	0x200004d0

00015ed0 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15ed0:	b570      	push	{r4, r5, r6, lr}
   15ed2:	4604      	mov	r4, r0
	switch (evt) {
   15ed4:	2c0f      	cmp	r4, #15
{
   15ed6:	460d      	mov	r5, r1
   15ed8:	4610      	mov	r0, r2
   15eda:	4619      	mov	r1, r3
	switch (evt) {
   15edc:	d805      	bhi.n	15eea <bt_buf_get_evt+0x1a>
   15ede:	2c0d      	cmp	r4, #13
   15ee0:	d90d      	bls.n	15efe <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15ee6:	f7ff bfd3 	b.w	15e90 <bt_buf_get_cmd_complete>
	switch (evt) {
   15eea:	2c13      	cmp	r4, #19
   15eec:	d107      	bne.n	15efe <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15eee:	480c      	ldr	r0, [pc, #48]	; (15f20 <bt_buf_get_evt+0x50>)
   15ef0:	f013 f884 	bl	28ffc <net_buf_alloc_fixed>
			if (buf) {
   15ef4:	4604      	mov	r4, r0
   15ef6:	b938      	cbnz	r0, 15f08 <bt_buf_get_evt+0x38>
{
   15ef8:	2400      	movs	r4, #0
}
   15efa:	4620      	mov	r0, r4
   15efc:	bd70      	pop	{r4, r5, r6, pc}
   15efe:	4602      	mov	r2, r0
   15f00:	460b      	mov	r3, r1
		if (discardable) {
   15f02:	b145      	cbz	r5, 15f16 <bt_buf_get_evt+0x46>
   15f04:	4807      	ldr	r0, [pc, #28]	; (15f24 <bt_buf_get_evt+0x54>)
   15f06:	e7f3      	b.n	15ef0 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15f08:	2100      	movs	r1, #0
   15f0a:	300c      	adds	r0, #12
   15f0c:	f013 f8d8 	bl	290c0 <net_buf_simple_reserve>
   15f10:	2301      	movs	r3, #1
   15f12:	7623      	strb	r3, [r4, #24]
}
   15f14:	e7f1      	b.n	15efa <bt_buf_get_evt+0x2a>
}
   15f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15f1a:	2001      	movs	r0, #1
   15f1c:	f7ff bfa8 	b.w	15e70 <bt_buf_get_rx>
   15f20:	20000cf0 	.word	0x20000cf0
   15f24:	20000c40 	.word	0x20000c40

00015f28 <ver_str>:
{
   15f28:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15f2a:	4d0c      	ldr	r5, [pc, #48]	; (15f5c <ver_str+0x34>)
{
   15f2c:	4606      	mov	r6, r0
	const char * const str[] = {
   15f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15f30:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15f32:	466c      	mov	r4, sp
   15f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15f3e:	e895 0003 	ldmia.w	r5, {r0, r1}
	if (ver < ARRAY_SIZE(str)) {
   15f42:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   15f44:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   15f48:	bf9b      	ittet	ls
   15f4a:	ab0e      	addls	r3, sp, #56	; 0x38
   15f4c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15f50:	4803      	ldrhi	r0, [pc, #12]	; (15f60 <ver_str+0x38>)
		return str[ver];
   15f52:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   15f56:	b00e      	add	sp, #56	; 0x38
   15f58:	bd70      	pop	{r4, r5, r6, pc}
   15f5a:	bf00      	nop
   15f5c:	0002aa20 	.word	0x0002aa20
   15f60:	0002c5bf 	.word	0x0002c5bf

00015f64 <unpair>:
{
   15f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f66:	4606      	mov	r6, r0
   15f68:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   15f6a:	f003 fd35 	bl	199d8 <bt_conn_lookup_addr_le>
	if (conn) {
   15f6e:	4604      	mov	r4, r0
   15f70:	b140      	cbz	r0, 15f84 <unpair+0x20>
		if (conn->type == BT_CONN_TYPE_LE) {
   15f72:	7883      	ldrb	r3, [r0, #2]
   15f74:	2b01      	cmp	r3, #1
   15f76:	d024      	beq.n	15fc2 <unpair+0x5e>
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15f78:	2113      	movs	r1, #19
   15f7a:	f011 faf2 	bl	27562 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15f7e:	4620      	mov	r0, r4
   15f80:	f011 faa8 	bl	274d4 <bt_conn_unref>
			keys = bt_keys_find_addr(id, addr);
   15f84:	4639      	mov	r1, r7
   15f86:	4630      	mov	r0, r6
   15f88:	f009 fa40 	bl	1f40c <bt_keys_find_addr>
		if (keys) {
   15f8c:	4605      	mov	r5, r0
   15f8e:	bb28      	cbnz	r0, 15fdc <unpair+0x78>
	bt_gatt_clear(id, addr);
   15f90:	4639      	mov	r1, r7
   15f92:	4630      	mov	r0, r6
   15f94:	f007 f8f8 	bl	1d188 <bt_gatt_clear>
	return list->head;
   15f98:	4b14      	ldr	r3, [pc, #80]	; (15fec <unpair+0x88>)
   15f9a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15f9c:	b323      	cbz	r3, 15fe8 <unpair+0x84>
	return node->next;
   15f9e:	681c      	ldr	r4, [r3, #0]
   15fa0:	b104      	cbz	r4, 15fa4 <unpair+0x40>
   15fa2:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15fa4:	f853 3c04 	ldr.w	r3, [r3, #-4]
   15fa8:	b113      	cbz	r3, 15fb0 <unpair+0x4c>
			listener->bond_deleted(id, addr);
   15faa:	4639      	mov	r1, r7
   15fac:	4630      	mov	r0, r6
   15fae:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   15fb0:	b1d4      	cbz	r4, 15fe8 <unpair+0x84>
   15fb2:	4623      	mov	r3, r4
   15fb4:	68e4      	ldr	r4, [r4, #12]
   15fb6:	689b      	ldr	r3, [r3, #8]
   15fb8:	b1a4      	cbz	r4, 15fe4 <unpair+0x80>
   15fba:	3c0c      	subs	r4, #12
		if (listener->bond_deleted) {
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	d1f4      	bne.n	15faa <unpair+0x46>
   15fc0:	e7f7      	b.n	15fb2 <unpair+0x4e>
			conn->le.keys = NULL;
   15fc2:	2300      	movs	r3, #0
			keys = conn->le.keys;
   15fc4:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
			conn->le.keys = NULL;
   15fc8:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   15fcc:	2113      	movs	r1, #19
   15fce:	f011 fac8 	bl	27562 <bt_conn_disconnect>
		bt_conn_unref(conn);
   15fd2:	4620      	mov	r0, r4
   15fd4:	f011 fa7e 	bl	274d4 <bt_conn_unref>
		if (!keys) {
   15fd8:	2d00      	cmp	r5, #0
   15fda:	d0d3      	beq.n	15f84 <unpair+0x20>
			bt_keys_clear(keys);
   15fdc:	4628      	mov	r0, r5
   15fde:	f009 fa3f 	bl	1f460 <bt_keys_clear>
   15fe2:	e7d5      	b.n	15f90 <unpair+0x2c>
		if (listener->bond_deleted) {
   15fe4:	2b00      	cmp	r3, #0
   15fe6:	d1e0      	bne.n	15faa <unpair+0x46>
}
   15fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15fea:	bf00      	nop
   15fec:	20002f98 	.word	0x20002f98

00015ff0 <hci_disconn_complete_prio>:
{
   15ff0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15ff2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15ff4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15ff8:	781b      	ldrb	r3, [r3, #0]
   15ffa:	b963      	cbnz	r3, 16016 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15ffc:	4620      	mov	r0, r4
   15ffe:	f003 fa9d 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   16002:	4605      	mov	r5, r0
   16004:	b940      	cbnz	r0, 16018 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   16006:	4b08      	ldr	r3, [pc, #32]	; (16028 <hci_disconn_complete_prio+0x38>)
   16008:	881a      	ldrh	r2, [r3, #0]
   1600a:	b922      	cbnz	r2, 16016 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1600c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   16010:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   16014:	8018      	strh	r0, [r3, #0]
}
   16016:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16018:	2101      	movs	r1, #1
   1601a:	f003 fa97 	bl	1954c <bt_conn_set_state>
	bt_conn_unref(conn);
   1601e:	4628      	mov	r0, r5
}
   16020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   16024:	f011 ba56 	b.w	274d4 <bt_conn_unref>
   16028:	20003394 	.word	0x20003394

0001602c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   1602c:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1602e:	4c08      	ldr	r4, [pc, #32]	; (16050 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16030:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16032:	2205      	movs	r2, #5
   16034:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   16038:	f003 fd1c 	bl	19a74 <bt_conn_lookup_state_le>
		if (!conn) {
   1603c:	b938      	cbnz	r0, 1604e <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1603e:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   16042:	4904      	ldr	r1, [pc, #16]	; (16054 <find_pending_connect.part.0+0x28>)
}
   16044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16048:	2204      	movs	r2, #4
   1604a:	f003 bd13 	b.w	19a74 <bt_conn_lookup_state_le>
}
   1604e:	bd10      	pop	{r4, pc}
   16050:	20000390 	.word	0x20000390
   16054:	0002c329 	.word	0x0002c329

00016058 <hci_data_buf_overflow>:
{
   16058:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1605a:	68c3      	ldr	r3, [r0, #12]
{
   1605c:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1605e:	b088      	sub	sp, #32
   16060:	781b      	ldrb	r3, [r3, #0]
   16062:	466a      	mov	r2, sp
   16064:	4907      	ldr	r1, [pc, #28]	; (16084 <hci_data_buf_overflow+0x2c>)
   16066:	6151      	str	r1, [r2, #20]
   16068:	4907      	ldr	r1, [pc, #28]	; (16088 <hci_data_buf_overflow+0x30>)
   1606a:	4808      	ldr	r0, [pc, #32]	; (1608c <hci_data_buf_overflow+0x34>)
   1606c:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16070:	2304      	movs	r3, #4
   16072:	f842 3f10 	str.w	r3, [r2, #16]!
   16076:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1607a:	f010 feff 	bl	26e7c <z_log_msg_static_create.constprop.0>
}
   1607e:	46bd      	mov	sp, r7
   16080:	bd80      	pop	{r7, pc}
   16082:	bf00      	nop
   16084:	0002c5c7 	.word	0x0002c5c7
   16088:	0002d01b 	.word	0x0002d01b
   1608c:	0002a850 	.word	0x0002a850

00016090 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   16090:	b580      	push	{r7, lr}
   16092:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to allocate buffer");
   16094:	b088      	sub	sp, #32
   16096:	466a      	mov	r2, sp
   16098:	4b06      	ldr	r3, [pc, #24]	; (160b4 <le_conn_param_neg_reply.part.0+0x24>)
   1609a:	6153      	str	r3, [r2, #20]
   1609c:	4b06      	ldr	r3, [pc, #24]	; (160b8 <le_conn_param_neg_reply.part.0+0x28>)
   1609e:	6193      	str	r3, [r2, #24]
   160a0:	2303      	movs	r3, #3
   160a2:	f842 3f10 	str.w	r3, [r2, #16]!
   160a6:	4805      	ldr	r0, [pc, #20]	; (160bc <le_conn_param_neg_reply.part.0+0x2c>)
   160a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   160ac:	f010 fee6 	bl	26e7c <z_log_msg_static_create.constprop.0>
}
   160b0:	46bd      	mov	sp, r7
   160b2:	bd80      	pop	{r7, pc}
   160b4:	0002c5f3 	.word	0x0002c5f3
   160b8:	0002cee3 	.word	0x0002cee3
   160bc:	0002a850 	.word	0x0002a850

000160c0 <rx_queue_put>:
{
   160c0:	b598      	push	{r3, r4, r7, lr}
   160c2:	4601      	mov	r1, r0
   160c4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   160c6:	480e      	ldr	r0, [pc, #56]	; (16100 <rx_queue_put+0x40>)
   160c8:	f012 ff9f 	bl	2900a <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   160cc:	490d      	ldr	r1, [pc, #52]	; (16104 <rx_queue_put+0x44>)
   160ce:	480e      	ldr	r0, [pc, #56]	; (16108 <rx_queue_put+0x48>)
   160d0:	f013 fe5f 	bl	29d92 <k_work_submit_to_queue>
	if (err < 0) {
   160d4:	2800      	cmp	r0, #0
   160d6:	da10      	bge.n	160fa <rx_queue_put+0x3a>
		LOG_ERR("Could not submit rx_work: %d", err);
   160d8:	466c      	mov	r4, sp
   160da:	b088      	sub	sp, #32
   160dc:	466a      	mov	r2, sp
   160de:	4b0b      	ldr	r3, [pc, #44]	; (1610c <rx_queue_put+0x4c>)
   160e0:	6153      	str	r3, [r2, #20]
   160e2:	4b0b      	ldr	r3, [pc, #44]	; (16110 <rx_queue_put+0x50>)
   160e4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   160e8:	2304      	movs	r3, #4
   160ea:	f842 3f10 	str.w	r3, [r2, #16]!
   160ee:	4809      	ldr	r0, [pc, #36]	; (16114 <rx_queue_put+0x54>)
   160f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   160f4:	f010 fec2 	bl	26e7c <z_log_msg_static_create.constprop.0>
   160f8:	46a5      	mov	sp, r4
}
   160fa:	46bd      	mov	sp, r7
   160fc:	bd98      	pop	{r3, r4, r7, pc}
   160fe:	bf00      	nop
   16100:	200004d4 	.word	0x200004d4
   16104:	2000078c 	.word	0x2000078c
   16108:	20001f80 	.word	0x20001f80
   1610c:	0002c611 	.word	0x0002c611
   16110:	0002cfd8 	.word	0x0002cfd8
   16114:	0002a850 	.word	0x0002a850

00016118 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16118:	b5b0      	push	{r4, r5, r7, lr}
   1611a:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1611c:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1611e:	af00      	add	r7, sp, #0
   16120:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16122:	4629      	mov	r1, r5
   16124:	68d8      	ldr	r0, [r3, #12]
   16126:	f7ff fbb7 	bl	15898 <bt_hex>
   1612a:	b08c      	sub	sp, #48	; 0x30
   1612c:	466a      	mov	r2, sp
   1612e:	4b0a      	ldr	r3, [pc, #40]	; (16158 <handle_event.part.0+0x40>)
   16130:	6153      	str	r3, [r2, #20]
   16132:	4b0a      	ldr	r3, [pc, #40]	; (1615c <handle_event.part.0+0x44>)
   16134:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16138:	f240 5303 	movw	r3, #1283	; 0x503
   1613c:	8513      	strh	r3, [r2, #40]	; 0x28
   1613e:	4b08      	ldr	r3, [pc, #32]	; (16160 <handle_event.part.0+0x48>)
   16140:	e9c2 5008 	strd	r5, r0, [r2, #32]
   16144:	f44f 5152 	mov.w	r1, #13440	; 0x3480
   16148:	f842 3f10 	str.w	r3, [r2, #16]!
   1614c:	4805      	ldr	r0, [pc, #20]	; (16164 <handle_event.part.0+0x4c>)
   1614e:	f010 fe95 	bl	26e7c <z_log_msg_static_create.constprop.0>
}
   16152:	46bd      	mov	sp, r7
   16154:	bdb0      	pop	{r4, r5, r7, pc}
   16156:	bf00      	nop
   16158:	0002c632 	.word	0x0002c632
   1615c:	0002d001 	.word	0x0002d001
   16160:	01000006 	.word	0x01000006
   16164:	0002a850 	.word	0x0002a850

00016168 <hci_hardware_error>:
{
   16168:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1616a:	2101      	movs	r1, #1
   1616c:	af00      	add	r7, sp, #0
   1616e:	300c      	adds	r0, #12
   16170:	f012 ffd1 	bl	29116 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16174:	b088      	sub	sp, #32
   16176:	7803      	ldrb	r3, [r0, #0]
   16178:	466a      	mov	r2, sp
   1617a:	4907      	ldr	r1, [pc, #28]	; (16198 <hci_hardware_error+0x30>)
   1617c:	6151      	str	r1, [r2, #20]
   1617e:	4907      	ldr	r1, [pc, #28]	; (1619c <hci_hardware_error+0x34>)
   16180:	4807      	ldr	r0, [pc, #28]	; (161a0 <hci_hardware_error+0x38>)
   16182:	e9c2 1306 	strd	r1, r3, [r2, #24]
   16186:	2304      	movs	r3, #4
   16188:	f842 3f10 	str.w	r3, [r2, #16]!
   1618c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16190:	f010 fe74 	bl	26e7c <z_log_msg_static_create.constprop.0>
}
   16194:	46bd      	mov	sp, r7
   16196:	bd80      	pop	{r7, pc}
   16198:	0002c658 	.word	0x0002c658
   1619c:	0002cfad 	.word	0x0002cfad
   161a0:	0002a850 	.word	0x0002a850

000161a4 <le_data_len_change>:
{
   161a4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161a6:	68c3      	ldr	r3, [r0, #12]
   161a8:	881c      	ldrh	r4, [r3, #0]
{
   161aa:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161ac:	4620      	mov	r0, r4
   161ae:	f003 f9c5 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   161b2:	b990      	cbnz	r0, 161da <le_data_len_change+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   161b4:	466d      	mov	r5, sp
   161b6:	b088      	sub	sp, #32
   161b8:	466a      	mov	r2, sp
   161ba:	4b09      	ldr	r3, [pc, #36]	; (161e0 <le_data_len_change+0x3c>)
   161bc:	6153      	str	r3, [r2, #20]
   161be:	4b09      	ldr	r3, [pc, #36]	; (161e4 <le_data_len_change+0x40>)
   161c0:	4809      	ldr	r0, [pc, #36]	; (161e8 <le_data_len_change+0x44>)
   161c2:	e9c2 3406 	strd	r3, r4, [r2, #24]
   161c6:	2304      	movs	r3, #4
   161c8:	f842 3f10 	str.w	r3, [r2, #16]!
   161cc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   161d0:	f010 fe54 	bl	26e7c <z_log_msg_static_create.constprop.0>
   161d4:	46ad      	mov	sp, r5
}
   161d6:	46bd      	mov	sp, r7
   161d8:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   161da:	f011 f97b 	bl	274d4 <bt_conn_unref>
   161de:	e7fa      	b.n	161d6 <le_data_len_change+0x32>
   161e0:	0002c67e 	.word	0x0002c67e
   161e4:	0002cf0d 	.word	0x0002cf0d
   161e8:	0002a850 	.word	0x0002a850

000161ec <le_phy_update_complete>:
{
   161ec:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   161ee:	68c3      	ldr	r3, [r0, #12]
   161f0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   161f4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   161f6:	4620      	mov	r0, r4
   161f8:	f003 f9a0 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   161fc:	b990      	cbnz	r0, 16224 <le_phy_update_complete+0x38>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   161fe:	466d      	mov	r5, sp
   16200:	b088      	sub	sp, #32
   16202:	466a      	mov	r2, sp
   16204:	4b09      	ldr	r3, [pc, #36]	; (1622c <le_phy_update_complete+0x40>)
   16206:	6153      	str	r3, [r2, #20]
   16208:	4b09      	ldr	r3, [pc, #36]	; (16230 <le_phy_update_complete+0x44>)
   1620a:	480a      	ldr	r0, [pc, #40]	; (16234 <le_phy_update_complete+0x48>)
   1620c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16210:	2304      	movs	r3, #4
   16212:	f842 3f10 	str.w	r3, [r2, #16]!
   16216:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1621a:	f010 fe2f 	bl	26e7c <z_log_msg_static_create.constprop.0>
   1621e:	46ad      	mov	sp, r5
}
   16220:	46bd      	mov	sp, r7
   16222:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16224:	f011 f956 	bl	274d4 <bt_conn_unref>
   16228:	e7fa      	b.n	16220 <le_phy_update_complete+0x34>
   1622a:	bf00      	nop
   1622c:	0002c67e 	.word	0x0002c67e
   16230:	0002cf20 	.word	0x0002cf20
   16234:	0002a850 	.word	0x0002a850

00016238 <hci_disconn_complete>:
{
   16238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1623c:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   1623e:	782e      	ldrb	r6, [r5, #0]
{
   16240:	af00      	add	r7, sp, #0
	if (evt->status) {
   16242:	b9be      	cbnz	r6, 16274 <hci_disconn_complete+0x3c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16244:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16248:	4640      	mov	r0, r8
   1624a:	f003 f977 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   1624e:	4604      	mov	r4, r0
   16250:	b998      	cbnz	r0, 1627a <hci_disconn_complete+0x42>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16252:	466c      	mov	r4, sp
   16254:	b088      	sub	sp, #32
   16256:	466a      	mov	r2, sp
   16258:	4b0c      	ldr	r3, [pc, #48]	; (1628c <hci_disconn_complete+0x54>)
   1625a:	6153      	str	r3, [r2, #20]
   1625c:	4b0c      	ldr	r3, [pc, #48]	; (16290 <hci_disconn_complete+0x58>)
   1625e:	480d      	ldr	r0, [pc, #52]	; (16294 <hci_disconn_complete+0x5c>)
   16260:	e9c2 3806 	strd	r3, r8, [r2, #24]
   16264:	2304      	movs	r3, #4
   16266:	f842 3f10 	str.w	r3, [r2, #16]!
   1626a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1626e:	f010 fe05 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16272:	46a5      	mov	sp, r4
}
   16274:	46bd      	mov	sp, r7
   16276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1627a:	78eb      	ldrb	r3, [r5, #3]
   1627c:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1627e:	4631      	mov	r1, r6
   16280:	f003 f964 	bl	1954c <bt_conn_set_state>
		bt_conn_unref(conn);
   16284:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   16286:	f011 f925 	bl	274d4 <bt_conn_unref>
   1628a:	e7f3      	b.n	16274 <hci_disconn_complete+0x3c>
   1628c:	0002c6a6 	.word	0x0002c6a6
   16290:	0002cf64 	.word	0x0002cf64
   16294:	0002a850 	.word	0x0002a850

00016298 <handle_event>:
{
   16298:	b5b0      	push	{r4, r5, r7, lr}
   1629a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1629e:	af00      	add	r7, sp, #0
   162a0:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   162a2:	4293      	cmp	r3, r2
   162a4:	d103      	bne.n	162ae <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   162a6:	4620      	mov	r0, r4
   162a8:	f7ff ff36 	bl	16118 <handle_event.part.0>
}
   162ac:	e01a      	b.n	162e4 <handle_event+0x4c>
		if (handler->event != event) {
   162ae:	4610      	mov	r0, r2
   162b0:	f810 5b08 	ldrb.w	r5, [r0], #8
   162b4:	42a5      	cmp	r5, r4
   162b6:	d11b      	bne.n	162f0 <handle_event+0x58>
		if (buf->len < handler->min_len) {
   162b8:	8a0b      	ldrh	r3, [r1, #16]
   162ba:	7850      	ldrb	r0, [r2, #1]
   162bc:	4298      	cmp	r0, r3
   162be:	d913      	bls.n	162e8 <handle_event+0x50>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   162c0:	466d      	mov	r5, sp
   162c2:	b08a      	sub	sp, #40	; 0x28
   162c4:	466a      	mov	r2, sp
   162c6:	490b      	ldr	r1, [pc, #44]	; (162f4 <handle_event+0x5c>)
   162c8:	6151      	str	r1, [r2, #20]
   162ca:	490b      	ldr	r1, [pc, #44]	; (162f8 <handle_event+0x60>)
   162cc:	6214      	str	r4, [r2, #32]
   162ce:	e9c2 1306 	strd	r1, r3, [r2, #24]
   162d2:	2305      	movs	r3, #5
   162d4:	f842 3f10 	str.w	r3, [r2, #16]!
   162d8:	4808      	ldr	r0, [pc, #32]	; (162fc <handle_event+0x64>)
   162da:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   162de:	f010 fdcd 	bl	26e7c <z_log_msg_static_create.constprop.0>
   162e2:	46ad      	mov	sp, r5
}
   162e4:	46bd      	mov	sp, r7
   162e6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   162e8:	6853      	ldr	r3, [r2, #4]
   162ea:	4608      	mov	r0, r1
   162ec:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   162ee:	e7f9      	b.n	162e4 <handle_event+0x4c>
   162f0:	4602      	mov	r2, r0
   162f2:	e7d6      	b.n	162a2 <handle_event+0xa>
   162f4:	0002c6d0 	.word	0x0002c6d0
   162f8:	0002cfed 	.word	0x0002cfed
   162fc:	0002a850 	.word	0x0002a850

00016300 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   16300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   16302:	4859      	ldr	r0, [pc, #356]	; (16468 <rx_work_handler+0x168>)
{
   16304:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   16306:	f012 fe96 	bl	29036 <net_buf_slist_get>
	if (!buf) {
   1630a:	4604      	mov	r4, r0
   1630c:	2800      	cmp	r0, #0
   1630e:	d070      	beq.n	163f2 <rx_work_handler+0xf2>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16310:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   16312:	2b01      	cmp	r3, #1
   16314:	d06f      	beq.n	163f6 <rx_work_handler+0xf6>
   16316:	2b03      	cmp	r3, #3
   16318:	f040 809f 	bne.w	1645a <rx_work_handler+0x15a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1631c:	8a03      	ldrh	r3, [r0, #16]
   1631e:	2b03      	cmp	r3, #3
   16320:	d80c      	bhi.n	1633c <rx_work_handler+0x3c>
   16322:	4a52      	ldr	r2, [pc, #328]	; (1646c <rx_work_handler+0x16c>)
   16324:	4952      	ldr	r1, [pc, #328]	; (16470 <rx_work_handler+0x170>)
   16326:	4853      	ldr	r0, [pc, #332]	; (16474 <rx_work_handler+0x174>)
   16328:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   1632c:	f00f fab0 	bl	25890 <assert_print>
   16330:	4040      	eors	r0, r0
   16332:	f380 8811 	msr	BASEPRI, r0
   16336:	f04f 0003 	mov.w	r0, #3
   1633a:	df02      	svc	2
   1633c:	2104      	movs	r1, #4
   1633e:	f104 000c 	add.w	r0, r4, #12
   16342:	f012 fee8 	bl	29116 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   16346:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   16348:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1634a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1634c:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   1634e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   16352:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   16354:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16356:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   16358:	d012      	beq.n	16380 <rx_work_handler+0x80>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1635a:	466d      	mov	r5, sp
   1635c:	b08a      	sub	sp, #40	; 0x28
   1635e:	466a      	mov	r2, sp
   16360:	4845      	ldr	r0, [pc, #276]	; (16478 <rx_work_handler+0x178>)
   16362:	6150      	str	r0, [r2, #20]
   16364:	4845      	ldr	r0, [pc, #276]	; (1647c <rx_work_handler+0x17c>)
   16366:	6213      	str	r3, [r2, #32]
   16368:	2305      	movs	r3, #5
   1636a:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1636e:	f842 3f10 	str.w	r3, [r2, #16]!
   16372:	f44f 5121 	mov.w	r1, #10304	; 0x2840
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16376:	4842      	ldr	r0, [pc, #264]	; (16480 <rx_work_handler+0x180>)
   16378:	f010 fd80 	bl	26e7c <z_log_msg_static_create.constprop.0>
   1637c:	46ad      	mov	sp, r5
   1637e:	e068      	b.n	16452 <rx_work_handler+0x152>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16380:	f003 f8dc 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   16384:	4605      	mov	r5, r0
   16386:	b970      	cbnz	r0, 163a6 <rx_work_handler+0xa6>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16388:	466d      	mov	r5, sp
   1638a:	b088      	sub	sp, #32
   1638c:	8b63      	ldrh	r3, [r4, #26]
   1638e:	466a      	mov	r2, sp
   16390:	493c      	ldr	r1, [pc, #240]	; (16484 <rx_work_handler+0x184>)
   16392:	6151      	str	r1, [r2, #20]
   16394:	4939      	ldr	r1, [pc, #228]	; (1647c <rx_work_handler+0x17c>)
	switch (bt_buf_get_type(buf)) {
   16396:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1639a:	2304      	movs	r3, #4
   1639c:	f842 3f10 	str.w	r3, [r2, #16]!
   163a0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   163a4:	e7e7      	b.n	16376 <rx_work_handler+0x76>
	acl(buf)->index = bt_conn_index(conn);
   163a6:	f003 f9f1 	bl	1978c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   163aa:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   163ac:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   163ae:	4621      	mov	r1, r4
   163b0:	4628      	mov	r0, r5
   163b2:	f002 ff45 	bl	19240 <bt_conn_recv>
	bt_conn_unref(conn);
   163b6:	4628      	mov	r0, r5
   163b8:	f011 f88c 	bl	274d4 <bt_conn_unref>
	return list->head;
   163bc:	4b32      	ldr	r3, [pc, #200]	; (16488 <rx_work_handler+0x188>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   163be:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   163c2:	b1b3      	cbz	r3, 163f2 <rx_work_handler+0xf2>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   163c4:	4931      	ldr	r1, [pc, #196]	; (1648c <rx_work_handler+0x18c>)
   163c6:	4832      	ldr	r0, [pc, #200]	; (16490 <rx_work_handler+0x190>)
   163c8:	f013 fce3 	bl	29d92 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   163cc:	2800      	cmp	r0, #0
   163ce:	da10      	bge.n	163f2 <rx_work_handler+0xf2>
			LOG_ERR("Could not submit rx_work: %d", err);
   163d0:	466c      	mov	r4, sp
   163d2:	b088      	sub	sp, #32
   163d4:	466a      	mov	r2, sp
   163d6:	4b2f      	ldr	r3, [pc, #188]	; (16494 <rx_work_handler+0x194>)
   163d8:	6153      	str	r3, [r2, #20]
   163da:	4b2f      	ldr	r3, [pc, #188]	; (16498 <rx_work_handler+0x198>)
   163dc:	e9c2 3006 	strd	r3, r0, [r2, #24]
   163e0:	2304      	movs	r3, #4
   163e2:	f842 3f10 	str.w	r3, [r2, #16]!
   163e6:	4826      	ldr	r0, [pc, #152]	; (16480 <rx_work_handler+0x180>)
   163e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   163ec:	f010 fd46 	bl	26e7c <z_log_msg_static_create.constprop.0>
   163f0:	46a5      	mov	sp, r4
		}
	}
}
   163f2:	46bd      	mov	sp, r7
   163f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   163f6:	8a03      	ldrh	r3, [r0, #16]
   163f8:	2b01      	cmp	r3, #1
   163fa:	d80c      	bhi.n	16416 <rx_work_handler+0x116>
   163fc:	4a1b      	ldr	r2, [pc, #108]	; (1646c <rx_work_handler+0x16c>)
   163fe:	491c      	ldr	r1, [pc, #112]	; (16470 <rx_work_handler+0x170>)
   16400:	481c      	ldr	r0, [pc, #112]	; (16474 <rx_work_handler+0x174>)
   16402:	f640 2347 	movw	r3, #2631	; 0xa47
   16406:	f00f fa43 	bl	25890 <assert_print>
   1640a:	4040      	eors	r0, r0
   1640c:	f380 8811 	msr	BASEPRI, r0
   16410:	f04f 0003 	mov.w	r0, #3
   16414:	df02      	svc	2
   16416:	2102      	movs	r1, #2
   16418:	f104 000c 	add.w	r0, r4, #12
   1641c:	f012 fe7b 	bl	29116 <net_buf_simple_pull_mem>
   16420:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16422:	7800      	ldrb	r0, [r0, #0]
   16424:	f010 fceb 	bl	26dfe <bt_hci_evt_get_flags>
   16428:	0783      	lsls	r3, r0, #30
   1642a:	d40c      	bmi.n	16446 <rx_work_handler+0x146>
   1642c:	4a0f      	ldr	r2, [pc, #60]	; (1646c <rx_work_handler+0x16c>)
   1642e:	491b      	ldr	r1, [pc, #108]	; (1649c <rx_work_handler+0x19c>)
   16430:	4810      	ldr	r0, [pc, #64]	; (16474 <rx_work_handler+0x174>)
   16432:	f640 234b 	movw	r3, #2635	; 0xa4b
   16436:	f00f fa2b 	bl	25890 <assert_print>
   1643a:	4040      	eors	r0, r0
   1643c:	f380 8811 	msr	BASEPRI, r0
   16440:	f04f 0003 	mov.w	r0, #3
   16444:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16446:	4a16      	ldr	r2, [pc, #88]	; (164a0 <rx_work_handler+0x1a0>)
   16448:	7828      	ldrb	r0, [r5, #0]
   1644a:	2306      	movs	r3, #6
   1644c:	4621      	mov	r1, r4
   1644e:	f7ff ff23 	bl	16298 <handle_event>
		net_buf_unref(buf);
   16452:	4620      	mov	r0, r4
   16454:	f009 fae6 	bl	1fa24 <net_buf_unref>
		break;
   16458:	e7b0      	b.n	163bc <rx_work_handler+0xbc>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1645a:	466d      	mov	r5, sp
   1645c:	b088      	sub	sp, #32
   1645e:	466a      	mov	r2, sp
   16460:	4910      	ldr	r1, [pc, #64]	; (164a4 <rx_work_handler+0x1a4>)
   16462:	6151      	str	r1, [r2, #20]
   16464:	490c      	ldr	r1, [pc, #48]	; (16498 <rx_work_handler+0x198>)
   16466:	e796      	b.n	16396 <rx_work_handler+0x96>
   16468:	200004d4 	.word	0x200004d4
   1646c:	0002c6f6 	.word	0x0002c6f6
   16470:	0002c72a 	.word	0x0002c72a
   16474:	0002c743 	.word	0x0002c743
   16478:	0002c760 	.word	0x0002c760
   1647c:	0002cfc0 	.word	0x0002cfc0
   16480:	0002a850 	.word	0x0002a850
   16484:	0002c788 	.word	0x0002c788
   16488:	20000390 	.word	0x20000390
   1648c:	2000078c 	.word	0x2000078c
   16490:	20001f80 	.word	0x20001f80
   16494:	0002c611 	.word	0x0002c611
   16498:	0002cfc8 	.word	0x0002cfc8
   1649c:	0002c7ae 	.word	0x0002c7ae
   164a0:	0002afb8 	.word	0x0002afb8
   164a4:	0002c7dc 	.word	0x0002c7dc

000164a8 <hci_le_meta_event>:
{
   164a8:	b510      	push	{r4, lr}
   164aa:	2101      	movs	r1, #1
   164ac:	4604      	mov	r4, r0
   164ae:	300c      	adds	r0, #12
   164b0:	f012 fe31 	bl	29116 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   164b4:	4621      	mov	r1, r4
   164b6:	4a03      	ldr	r2, [pc, #12]	; (164c4 <hci_le_meta_event+0x1c>)
   164b8:	7800      	ldrb	r0, [r0, #0]
}
   164ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   164be:	230a      	movs	r3, #10
   164c0:	f7ff beea 	b.w	16298 <handle_event>
   164c4:	0002afe8 	.word	0x0002afe8

000164c8 <le_remote_feat_complete>:
{
   164c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   164ca:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164cc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   164d0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   164d2:	4630      	mov	r0, r6
   164d4:	f003 f832 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   164d8:	4604      	mov	r4, r0
   164da:	b990      	cbnz	r0, 16502 <le_remote_feat_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   164dc:	466c      	mov	r4, sp
   164de:	b088      	sub	sp, #32
   164e0:	466a      	mov	r2, sp
   164e2:	4b10      	ldr	r3, [pc, #64]	; (16524 <le_remote_feat_complete+0x5c>)
   164e4:	6153      	str	r3, [r2, #20]
   164e6:	4b10      	ldr	r3, [pc, #64]	; (16528 <le_remote_feat_complete+0x60>)
   164e8:	4810      	ldr	r0, [pc, #64]	; (1652c <le_remote_feat_complete+0x64>)
   164ea:	e9c2 3606 	strd	r3, r6, [r2, #24]
   164ee:	2304      	movs	r3, #4
   164f0:	f842 3f10 	str.w	r3, [r2, #16]!
   164f4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   164f8:	f010 fcc0 	bl	26e7c <z_log_msg_static_create.constprop.0>
   164fc:	46a5      	mov	sp, r4
}
   164fe:	46bd      	mov	sp, r7
   16500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   16502:	782b      	ldrb	r3, [r5, #0]
   16504:	b923      	cbnz	r3, 16510 <le_remote_feat_complete+0x48>
		memcpy(conn->le.features, evt->features,
   16506:	2208      	movs	r2, #8
   16508:	1ce9      	adds	r1, r5, #3
   1650a:	30ad      	adds	r0, #173	; 0xad
   1650c:	f010 fb6e 	bl	26bec <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   16514:	1d20      	adds	r0, r4, #4
   16516:	f010 fc9d 	bl	26e54 <atomic_or>
	bt_conn_unref(conn);
   1651a:	4620      	mov	r0, r4
   1651c:	f010 ffda 	bl	274d4 <bt_conn_unref>
   16520:	e7ed      	b.n	164fe <le_remote_feat_complete+0x36>
   16522:	bf00      	nop
   16524:	0002c67e 	.word	0x0002c67e
   16528:	0002cecb 	.word	0x0002cecb
   1652c:	0002a850 	.word	0x0002a850

00016530 <hci_cmd_done>:
{
   16530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16534:	4606      	mov	r6, r0
   16536:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16538:	7a90      	ldrb	r0, [r2, #10]
   1653a:	4d45      	ldr	r5, [pc, #276]	; (16650 <hci_cmd_done+0x120>)
{
   1653c:	4688      	mov	r8, r1
   1653e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16540:	f009 f9ae 	bl	1f8a0 <net_buf_pool_get>
   16544:	4285      	cmp	r5, r0
   16546:	d01a      	beq.n	1657e <hci_cmd_done+0x4e>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   16548:	7aa4      	ldrb	r4, [r4, #10]
   1654a:	4620      	mov	r0, r4
   1654c:	f009 f9a8 	bl	1f8a0 <net_buf_pool_get>
   16550:	46e8      	mov	r8, sp
   16552:	b08c      	sub	sp, #48	; 0x30
   16554:	466a      	mov	r2, sp
   16556:	4b3f      	ldr	r3, [pc, #252]	; (16654 <hci_cmd_done+0x124>)
   16558:	6153      	str	r3, [r2, #20]
   1655a:	4b3f      	ldr	r3, [pc, #252]	; (16658 <hci_cmd_done+0x128>)
   1655c:	6295      	str	r5, [r2, #40]	; 0x28
   1655e:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16562:	2307      	movs	r3, #7
   16564:	e9c2 4008 	strd	r4, r0, [r2, #32]
   16568:	f44f 5162 	mov.w	r1, #14464	; 0x3880
   1656c:	f842 3f10 	str.w	r3, [r2, #16]!
   16570:	483a      	ldr	r0, [pc, #232]	; (1665c <hci_cmd_done+0x12c>)
   16572:	f010 fc83 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16576:	46c5      	mov	sp, r8
}
   16578:	46bd      	mov	sp, r7
   1657a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1657e:	4620      	mov	r0, r4
   16580:	f009 f996 	bl	1f8b0 <net_buf_id>
   16584:	4d36      	ldr	r5, [pc, #216]	; (16660 <hci_cmd_done+0x130>)
   16586:	f04f 090c 	mov.w	r9, #12
   1658a:	fb09 5000 	mla	r0, r9, r0, r5
   1658e:	8843      	ldrh	r3, [r0, #2]
   16590:	42b3      	cmp	r3, r6
   16592:	d018      	beq.n	165c6 <hci_cmd_done+0x96>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   16594:	4620      	mov	r0, r4
   16596:	f009 f98b 	bl	1f8b0 <net_buf_id>
   1659a:	fb09 5000 	mla	r0, r9, r0, r5
   1659e:	466c      	mov	r4, sp
   165a0:	b08a      	sub	sp, #40	; 0x28
   165a2:	8843      	ldrh	r3, [r0, #2]
   165a4:	466a      	mov	r2, sp
   165a6:	492f      	ldr	r1, [pc, #188]	; (16664 <hci_cmd_done+0x134>)
   165a8:	6151      	str	r1, [r2, #20]
   165aa:	492b      	ldr	r1, [pc, #172]	; (16658 <hci_cmd_done+0x128>)
   165ac:	6213      	str	r3, [r2, #32]
   165ae:	2305      	movs	r3, #5
   165b0:	e9c2 1606 	strd	r1, r6, [r2, #24]
   165b4:	4829      	ldr	r0, [pc, #164]	; (1665c <hci_cmd_done+0x12c>)
   165b6:	f842 3f10 	str.w	r3, [r2, #16]!
   165ba:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   165be:	f010 fc5d 	bl	26e7c <z_log_msg_static_create.constprop.0>
   165c2:	46a5      	mov	sp, r4
		return;
   165c4:	e7d8      	b.n	16578 <hci_cmd_done+0x48>
	if (bt_dev.sent_cmd) {
   165c6:	4e28      	ldr	r6, [pc, #160]	; (16668 <hci_cmd_done+0x138>)
   165c8:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
   165cc:	b120      	cbz	r0, 165d8 <hci_cmd_done+0xa8>
		net_buf_unref(bt_dev.sent_cmd);
   165ce:	f009 fa29 	bl	1fa24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   165d2:	2300      	movs	r3, #0
   165d4:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
	if (cmd(buf)->state && !status) {
   165d8:	4620      	mov	r0, r4
   165da:	f009 f969 	bl	1f8b0 <net_buf_id>
   165de:	260c      	movs	r6, #12
   165e0:	fb06 5000 	mla	r0, r6, r0, r5
   165e4:	6843      	ldr	r3, [r0, #4]
   165e6:	b1ab      	cbz	r3, 16614 <hci_cmd_done+0xe4>
   165e8:	f1b8 0f00 	cmp.w	r8, #0
   165ec:	d112      	bne.n	16614 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   165ee:	4620      	mov	r0, r4
   165f0:	f009 f95e 	bl	1f8b0 <net_buf_id>
   165f4:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   165f8:	2101      	movs	r1, #1
   165fa:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   165fc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   16600:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   16602:	f003 061f 	and.w	r6, r3, #31
   16606:	40b1      	lsls	r1, r6
	if (val) {
   16608:	095b      	lsrs	r3, r3, #5
   1660a:	b1da      	cbz	r2, 16644 <hci_cmd_done+0x114>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1660c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16610:	f010 fc20 	bl	26e54 <atomic_or>
	if (cmd(buf)->sync) {
   16614:	4620      	mov	r0, r4
   16616:	f009 f94b 	bl	1f8b0 <net_buf_id>
   1661a:	260c      	movs	r6, #12
   1661c:	fb06 5000 	mla	r0, r6, r0, r5
   16620:	6883      	ldr	r3, [r0, #8]
   16622:	2b00      	cmp	r3, #0
   16624:	d0a8      	beq.n	16578 <hci_cmd_done+0x48>
		cmd(buf)->status = status;
   16626:	4620      	mov	r0, r4
   16628:	f009 f942 	bl	1f8b0 <net_buf_id>
   1662c:	4370      	muls	r0, r6
   1662e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16632:	4620      	mov	r0, r4
   16634:	f009 f93c 	bl	1f8b0 <net_buf_id>
   16638:	fb06 5500 	mla	r5, r6, r0, r5
   1663c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1663e:	f00d f8e1 	bl	23804 <z_impl_k_sem_give>
}
   16642:	e799      	b.n	16578 <hci_cmd_done+0x48>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16644:	43c9      	mvns	r1, r1
   16646:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1664a:	f010 fc1a 	bl	26e82 <atomic_and.isra.0>
   1664e:	e7e1      	b.n	16614 <hci_cmd_done+0xe4>
   16650:	20000c98 	.word	0x20000c98
   16654:	0002c7f4 	.word	0x0002c7f4
   16658:	0002d00e 	.word	0x0002d00e
   1665c:	0002a850 	.word	0x0002a850
   16660:	20002f3c 	.word	0x20002f3c
   16664:	0002c82d 	.word	0x0002c82d
   16668:	20000390 	.word	0x20000390

0001666c <hci_cmd_status>:
{
   1666c:	b538      	push	{r3, r4, r5, lr}
   1666e:	2104      	movs	r1, #4
   16670:	4604      	mov	r4, r0
   16672:	300c      	adds	r0, #12
   16674:	f012 fd4f 	bl	29116 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16678:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1667a:	7801      	ldrb	r1, [r0, #0]
   1667c:	8840      	ldrh	r0, [r0, #2]
   1667e:	4622      	mov	r2, r4
   16680:	f7ff ff56 	bl	16530 <hci_cmd_done>
	if (ncmd) {
   16684:	b125      	cbz	r5, 16690 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   16686:	4803      	ldr	r0, [pc, #12]	; (16694 <hci_cmd_status+0x28>)
}
   16688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1668c:	f00d b8ba 	b.w	23804 <z_impl_k_sem_give>
   16690:	bd38      	pop	{r3, r4, r5, pc}
   16692:	bf00      	nop
   16694:	200004b8 	.word	0x200004b8

00016698 <hci_cmd_complete>:
{
   16698:	b538      	push	{r3, r4, r5, lr}
   1669a:	2103      	movs	r1, #3
   1669c:	4604      	mov	r4, r0
   1669e:	300c      	adds	r0, #12
   166a0:	f012 fd39 	bl	29116 <net_buf_simple_pull_mem>
	status = buf->data[0];
   166a4:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   166a6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   166a8:	7819      	ldrb	r1, [r3, #0]
   166aa:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   166ae:	4622      	mov	r2, r4
   166b0:	f7ff ff3e 	bl	16530 <hci_cmd_done>
	if (ncmd) {
   166b4:	b125      	cbz	r5, 166c0 <hci_cmd_complete+0x28>
   166b6:	4803      	ldr	r0, [pc, #12]	; (166c4 <hci_cmd_complete+0x2c>)
}
   166b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   166bc:	f00d b8a2 	b.w	23804 <z_impl_k_sem_give>
   166c0:	bd38      	pop	{r3, r4, r5, pc}
   166c2:	bf00      	nop
   166c4:	200004b8 	.word	0x200004b8

000166c8 <hci_num_completed_packets>:
{
   166c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   166cc:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   166d0:	8a01      	ldrh	r1, [r0, #16]
   166d2:	f898 4000 	ldrb.w	r4, [r8]
   166d6:	2301      	movs	r3, #1
   166d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   166dc:	428b      	cmp	r3, r1
{
   166de:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   166e0:	f240 8094 	bls.w	1680c <hci_num_completed_packets+0x144>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   166e4:	466d      	mov	r5, sp
   166e6:	b08a      	sub	sp, #40	; 0x28
   166e8:	466a      	mov	r2, sp
   166ea:	484b      	ldr	r0, [pc, #300]	; (16818 <hci_num_completed_packets+0x150>)
   166ec:	6150      	str	r0, [r2, #20]
   166ee:	484b      	ldr	r0, [pc, #300]	; (1681c <hci_num_completed_packets+0x154>)
   166f0:	e9c2 3108 	strd	r3, r1, [r2, #32]
   166f4:	2306      	movs	r3, #6
   166f6:	e9c2 0406 	strd	r0, r4, [r2, #24]
   166fa:	f44f 5141 	mov.w	r1, #12352	; 0x3040
   166fe:	f842 3f10 	str.w	r3, [r2, #16]!
   16702:	4847      	ldr	r0, [pc, #284]	; (16820 <hci_num_completed_packets+0x158>)
   16704:	f010 fbba 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16708:	46ad      	mov	sp, r5
}
   1670a:	46bd      	mov	sp, r7
   1670c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   16710:	466c      	mov	r4, sp
   16712:	b088      	sub	sp, #32
   16714:	466a      	mov	r2, sp
   16716:	4b43      	ldr	r3, [pc, #268]	; (16824 <hci_num_completed_packets+0x15c>)
   16718:	6153      	str	r3, [r2, #20]
   1671a:	4b40      	ldr	r3, [pc, #256]	; (1681c <hci_num_completed_packets+0x154>)
   1671c:	4840      	ldr	r0, [pc, #256]	; (16820 <hci_num_completed_packets+0x158>)
   1671e:	e9c2 3b06 	strd	r3, fp, [r2, #24]
   16722:	2304      	movs	r3, #4
   16724:	f842 3f10 	str.w	r3, [r2, #16]!
   16728:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1672c:	f010 fba6 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16730:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   16732:	3501      	adds	r5, #1
   16734:	f898 3000 	ldrb.w	r3, [r8]
   16738:	429d      	cmp	r5, r3
   1673a:	dae6      	bge.n	1670a <hci_num_completed_packets+0x42>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1673c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   16740:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16744:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16748:	4658      	mov	r0, fp
   1674a:	f002 fef7 	bl	1953c <bt_conn_lookup_handle>
		if (!conn) {
   1674e:	4604      	mov	r4, r0
   16750:	2800      	cmp	r0, #0
   16752:	d0dd      	beq.n	16710 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   16754:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   16758:	b36e      	cbz	r6, 167b6 <hci_num_completed_packets+0xee>
	__asm__ volatile(
   1675a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1675e:	f3ef 8211 	mrs	r2, BASEPRI
   16762:	f383 8812 	msr	BASEPRI_MAX, r3
   16766:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1676a:	69e3      	ldr	r3, [r4, #28]
   1676c:	b16b      	cbz	r3, 1678a <hci_num_completed_packets+0xc2>
				conn->pending_no_cb--;
   1676e:	3b01      	subs	r3, #1
   16770:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16772:	f382 8811 	msr	BASEPRI, r2
   16776:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1677a:	4620      	mov	r0, r4
   1677c:	f002 fd22 	bl	191c4 <bt_conn_get_pkts>
   16780:	3e01      	subs	r6, #1
   16782:	f00d f83f 	bl	23804 <z_impl_k_sem_give>
   16786:	b2b6      	uxth	r6, r6
   16788:	e7e6      	b.n	16758 <hci_num_completed_packets+0x90>
   1678a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1678c:	b9bb      	cbnz	r3, 167be <hci_num_completed_packets+0xf6>
   1678e:	f382 8811 	msr	BASEPRI, r2
   16792:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   16796:	466e      	mov	r6, sp
   16798:	b088      	sub	sp, #32
   1679a:	466a      	mov	r2, sp
   1679c:	4b1f      	ldr	r3, [pc, #124]	; (1681c <hci_num_completed_packets+0x154>)
   1679e:	6193      	str	r3, [r2, #24]
   167a0:	2303      	movs	r3, #3
   167a2:	f8c2 a014 	str.w	sl, [r2, #20]
   167a6:	481e      	ldr	r0, [pc, #120]	; (16820 <hci_num_completed_packets+0x158>)
   167a8:	f842 3f10 	str.w	r3, [r2, #16]!
   167ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   167b0:	f010 fb64 	bl	26e7c <z_log_msg_static_create.constprop.0>
   167b4:	46b5      	mov	sp, r6
		bt_conn_unref(conn);
   167b6:	4620      	mov	r0, r4
   167b8:	f010 fe8c 	bl	274d4 <bt_conn_unref>
   167bc:	e7b9      	b.n	16732 <hci_num_completed_packets+0x6a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   167be:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   167c0:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   167c2:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   167c4:	428b      	cmp	r3, r1
	list->tail = node;
   167c6:	bf08      	it	eq
   167c8:	61a0      	streq	r0, [r4, #24]
   167ca:	f382 8811 	msr	BASEPRI, r2
   167ce:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   167d2:	f04f 0240 	mov.w	r2, #64	; 0x40
   167d6:	f3ef 8111 	mrs	r1, BASEPRI
   167da:	f382 8812 	msr	BASEPRI_MAX, r2
   167de:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   167e2:	68da      	ldr	r2, [r3, #12]
   167e4:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   167e6:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   167ea:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   167ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   167f0:	b94a      	cbnz	r2, 16806 <hci_num_completed_packets+0x13e>
	list->head = node;
   167f2:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   167f6:	f381 8811 	msr	BASEPRI, r1
   167fa:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   167fe:	4658      	mov	r0, fp
   16800:	f00d f99e 	bl	23b40 <k_work_submit>
   16804:	e7b9      	b.n	1677a <hci_num_completed_packets+0xb2>
	parent->next = child;
   16806:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16808:	6263      	str	r3, [r4, #36]	; 0x24
}
   1680a:	e7f4      	b.n	167f6 <hci_num_completed_packets+0x12e>
	for (i = 0; i < evt->num_handles; i++) {
   1680c:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   1680e:	f8df a018 	ldr.w	sl, [pc, #24]	; 16828 <hci_num_completed_packets+0x160>
			tx->pending_no_cb = 0U;
   16812:	46a9      	mov	r9, r5
   16814:	e78e      	b.n	16734 <hci_num_completed_packets+0x6c>
   16816:	bf00      	nop
   16818:	0002c864 	.word	0x0002c864
   1681c:	0002d031 	.word	0x0002d031
   16820:	0002a850 	.word	0x0002a850
   16824:	0002c892 	.word	0x0002c892
   16828:	0002c8b2 	.word	0x0002c8b2

0001682c <le_conn_update_complete>:
{
   1682c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1682e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16830:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16832:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16836:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16838:	4630      	mov	r0, r6
   1683a:	f002 fe7f 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   1683e:	4604      	mov	r4, r0
   16840:	b998      	cbnz	r0, 1686a <le_conn_update_complete+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16842:	466c      	mov	r4, sp
   16844:	b088      	sub	sp, #32
   16846:	466a      	mov	r2, sp
   16848:	4b2e      	ldr	r3, [pc, #184]	; (16904 <le_conn_update_complete+0xd8>)
   1684a:	6153      	str	r3, [r2, #20]
   1684c:	4b2e      	ldr	r3, [pc, #184]	; (16908 <le_conn_update_complete+0xdc>)
   1684e:	482f      	ldr	r0, [pc, #188]	; (1690c <le_conn_update_complete+0xe0>)
   16850:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16854:	2304      	movs	r3, #4
   16856:	f842 3f10 	str.w	r3, [r2, #16]!
   1685a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1685e:	f010 fb0d 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16862:	46a5      	mov	sp, r4
}
   16864:	370c      	adds	r7, #12
   16866:	46bd      	mov	sp, r7
   16868:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1686a:	782b      	ldrb	r3, [r5, #0]
   1686c:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   1686e:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16872:	d117      	bne.n	168a4 <le_conn_update_complete+0x78>
   16874:	78c3      	ldrb	r3, [r0, #3]
   16876:	2b01      	cmp	r3, #1
   16878:	d128      	bne.n	168cc <le_conn_update_complete+0xa0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1687a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1687e:	4630      	mov	r0, r6
   16880:	f010 fae8 	bl	26e54 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16884:	0542      	lsls	r2, r0, #21
   16886:	d40d      	bmi.n	168a4 <le_conn_update_complete+0x78>
		param.interval_min = conn->le.interval_min;
   16888:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1688c:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1688e:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   16890:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16894:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16896:	4620      	mov	r0, r4
   16898:	f003 fc10 	bl	1a0bc <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1689c:	4620      	mov	r0, r4
   1689e:	f010 fe19 	bl	274d4 <bt_conn_unref>
   168a2:	e7df      	b.n	16864 <le_conn_update_complete+0x38>
		if (!evt->status) {
   168a4:	782b      	ldrb	r3, [r5, #0]
   168a6:	b98b      	cbnz	r3, 168cc <le_conn_update_complete+0xa0>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   168a8:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   168ac:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   168b0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   168b4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   168b8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   168bc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   168c0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   168c4:	4630      	mov	r0, r6
   168c6:	f010 fadc 	bl	26e82 <atomic_and.isra.0>
}
   168ca:	e017      	b.n	168fc <le_conn_update_complete+0xd0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   168cc:	f3bf 8f5b 	dmb	ish
   168d0:	6863      	ldr	r3, [r4, #4]
   168d2:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   168d6:	05db      	lsls	r3, r3, #23
   168d8:	d5f2      	bpl.n	168c0 <le_conn_update_complete+0x94>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   168da:	782b      	ldrb	r3, [r5, #0]
   168dc:	2b20      	cmp	r3, #32
   168de:	d1ef      	bne.n	168c0 <le_conn_update_complete+0x94>
			   conn->le.conn_param_retry_countdown) {
   168e0:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   168e4:	2b00      	cmp	r3, #0
   168e6:	d0eb      	beq.n	168c0 <le_conn_update_complete+0x94>
			conn->le.conn_param_retry_countdown--;
   168e8:	3b01      	subs	r3, #1
   168ea:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   168ee:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   168f2:	2300      	movs	r3, #0
   168f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   168f8:	f00d f98a 	bl	23c10 <k_work_schedule>
		notify_le_param_updated(conn);
   168fc:	4620      	mov	r0, r4
   168fe:	f002 ff67 	bl	197d0 <notify_le_param_updated>
   16902:	e7cb      	b.n	1689c <le_conn_update_complete+0x70>
   16904:	0002c67e 	.word	0x0002c67e
   16908:	0002ceb3 	.word	0x0002ceb3
   1690c:	0002a850 	.word	0x0002a850

00016910 <bt_hci_cmd_state_set_init>:
{
   16910:	b510      	push	{r4, lr}
	state->bit = bit;
   16912:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16916:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1691a:	720b      	strb	r3, [r1, #8]
{
   1691c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1691e:	f008 ffc7 	bl	1f8b0 <net_buf_id>
   16922:	4b03      	ldr	r3, [pc, #12]	; (16930 <bt_hci_cmd_state_set_init+0x20>)
   16924:	220c      	movs	r2, #12
   16926:	fb02 3300 	mla	r3, r2, r0, r3
   1692a:	605c      	str	r4, [r3, #4]
}
   1692c:	bd10      	pop	{r4, pc}
   1692e:	bf00      	nop
   16930:	20002f3c 	.word	0x20002f3c

00016934 <bt_hci_cmd_create>:
{
   16934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1693c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16940:	4606      	mov	r6, r0
   16942:	4817      	ldr	r0, [pc, #92]	; (169a0 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   16944:	4d17      	ldr	r5, [pc, #92]	; (169a4 <bt_hci_cmd_create+0x70>)
{
   16946:	460f      	mov	r7, r1
   16948:	f012 fb58 	bl	28ffc <net_buf_alloc_fixed>
   1694c:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1694e:	f100 0a0c 	add.w	sl, r0, #12
   16952:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16954:	f04f 0800 	mov.w	r8, #0
   16958:	4650      	mov	r0, sl
   1695a:	f012 fbb1 	bl	290c0 <net_buf_simple_reserve>
   1695e:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   16962:	4620      	mov	r0, r4
   16964:	f008 ffa4 	bl	1f8b0 <net_buf_id>
   16968:	f04f 090c 	mov.w	r9, #12
   1696c:	fb09 5000 	mla	r0, r9, r0, r5
   16970:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   16972:	4620      	mov	r0, r4
   16974:	f008 ff9c 	bl	1f8b0 <net_buf_id>
   16978:	fb09 5000 	mla	r0, r9, r0, r5
   1697c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16980:	4620      	mov	r0, r4
   16982:	f008 ff95 	bl	1f8b0 <net_buf_id>
   16986:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1698a:	2103      	movs	r1, #3
   1698c:	4650      	mov	r0, sl
   1698e:	f8c5 8004 	str.w	r8, [r5, #4]
   16992:	f012 fb99 	bl	290c8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   16996:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16998:	7087      	strb	r7, [r0, #2]
}
   1699a:	4620      	mov	r0, r4
   1699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169a0:	20000c98 	.word	0x20000c98
   169a4:	20002f3c 	.word	0x20002f3c

000169a8 <bt_hci_cmd_send_sync>:
{
   169a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   169ac:	b087      	sub	sp, #28
   169ae:	4606      	mov	r6, r0
   169b0:	af00      	add	r7, sp, #0
   169b2:	4615      	mov	r5, r2
	if (!buf) {
   169b4:	460c      	mov	r4, r1
   169b6:	b921      	cbnz	r1, 169c2 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   169b8:	f7ff ffbc 	bl	16934 <bt_hci_cmd_create>
		if (!buf) {
   169bc:	4604      	mov	r4, r0
   169be:	2800      	cmp	r0, #0
   169c0:	d061      	beq.n	16a86 <bt_hci_cmd_send_sync+0xde>
	return z_impl_k_sem_init(sem, initial_count, limit);
   169c2:	2201      	movs	r2, #1
   169c4:	2100      	movs	r1, #0
   169c6:	4638      	mov	r0, r7
   169c8:	f013 f933 	bl	29c32 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   169cc:	4620      	mov	r0, r4
   169ce:	f008 ff6f 	bl	1f8b0 <net_buf_id>
   169d2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 16a8c <bt_hci_cmd_send_sync+0xe4>
   169d6:	230c      	movs	r3, #12
   169d8:	fb03 9000 	mla	r0, r3, r0, r9
   169dc:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   169de:	4620      	mov	r0, r4
   169e0:	f012 fb42 	bl	29068 <net_buf_ref>
   169e4:	4601      	mov	r1, r0
   169e6:	482a      	ldr	r0, [pc, #168]	; (16a90 <bt_hci_cmd_send_sync+0xe8>)
   169e8:	f012 fb3c 	bl	29064 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   169ec:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   169f0:	2300      	movs	r3, #0
   169f2:	4638      	mov	r0, r7
   169f4:	f00c ff2c 	bl	23850 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   169f8:	4680      	mov	r8, r0
   169fa:	b188      	cbz	r0, 16a20 <bt_hci_cmd_send_sync+0x78>
   169fc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   16a00:	4a24      	ldr	r2, [pc, #144]	; (16a94 <bt_hci_cmd_send_sync+0xec>)
   16a02:	4925      	ldr	r1, [pc, #148]	; (16a98 <bt_hci_cmd_send_sync+0xf0>)
   16a04:	4825      	ldr	r0, [pc, #148]	; (16a9c <bt_hci_cmd_send_sync+0xf4>)
   16a06:	f00e ff43 	bl	25890 <assert_print>
   16a0a:	4825      	ldr	r0, [pc, #148]	; (16aa0 <bt_hci_cmd_send_sync+0xf8>)
   16a0c:	4642      	mov	r2, r8
   16a0e:	4631      	mov	r1, r6
   16a10:	f00e ff3e 	bl	25890 <assert_print>
   16a14:	4040      	eors	r0, r0
   16a16:	f380 8811 	msr	BASEPRI, r0
   16a1a:	f04f 0003 	mov.w	r0, #3
   16a1e:	df02      	svc	2
	status = cmd(buf)->status;
   16a20:	4620      	mov	r0, r4
   16a22:	f008 ff45 	bl	1f8b0 <net_buf_id>
   16a26:	230c      	movs	r3, #12
   16a28:	4358      	muls	r0, r3
   16a2a:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   16a2e:	f1b8 0f00 	cmp.w	r8, #0
   16a32:	d020      	beq.n	16a76 <bt_hci_cmd_send_sync+0xce>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16a34:	466d      	mov	r5, sp
   16a36:	b08a      	sub	sp, #40	; 0x28
   16a38:	466a      	mov	r2, sp
   16a3a:	4b1a      	ldr	r3, [pc, #104]	; (16aa4 <bt_hci_cmd_send_sync+0xfc>)
   16a3c:	6153      	str	r3, [r2, #20]
   16a3e:	4b1a      	ldr	r3, [pc, #104]	; (16aa8 <bt_hci_cmd_send_sync+0x100>)
   16a40:	f8c2 8020 	str.w	r8, [r2, #32]
   16a44:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16a48:	2305      	movs	r3, #5
   16a4a:	f842 3f10 	str.w	r3, [r2, #16]!
   16a4e:	4817      	ldr	r0, [pc, #92]	; (16aac <bt_hci_cmd_send_sync+0x104>)
   16a50:	f44f 5122 	mov.w	r1, #10368	; 0x2880
   16a54:	f010 fa12 	bl	26e7c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16a58:	4620      	mov	r0, r4
   16a5a:	46ad      	mov	sp, r5
   16a5c:	f008 ffe2 	bl	1fa24 <net_buf_unref>
			return -ECONNREFUSED;
   16a60:	f1b8 0f09 	cmp.w	r8, #9
   16a64:	bf14      	ite	ne
   16a66:	f06f 0004 	mvnne.w	r0, #4
   16a6a:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16a6e:	371c      	adds	r7, #28
   16a70:	46bd      	mov	sp, r7
   16a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16a76:	b115      	cbz	r5, 16a7e <bt_hci_cmd_send_sync+0xd6>
		*rsp = buf;
   16a78:	602c      	str	r4, [r5, #0]
	return 0;
   16a7a:	2000      	movs	r0, #0
   16a7c:	e7f7      	b.n	16a6e <bt_hci_cmd_send_sync+0xc6>
		net_buf_unref(buf);
   16a7e:	4620      	mov	r0, r4
   16a80:	f008 ffd0 	bl	1fa24 <net_buf_unref>
   16a84:	e7f9      	b.n	16a7a <bt_hci_cmd_send_sync+0xd2>
			return -ENOBUFS;
   16a86:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16a8a:	e7f0      	b.n	16a6e <bt_hci_cmd_send_sync+0xc6>
   16a8c:	20002f3c 	.word	0x20002f3c
   16a90:	200004dc 	.word	0x200004dc
   16a94:	0002c6f6 	.word	0x0002c6f6
   16a98:	0002c8cd 	.word	0x0002c8cd
   16a9c:	0002c743 	.word	0x0002c743
   16aa0:	0002c8d6 	.word	0x0002c8d6
   16aa4:	0002c902 	.word	0x0002c902
   16aa8:	0002d097 	.word	0x0002d097
   16aac:	0002a850 	.word	0x0002a850

00016ab0 <hci_le_read_max_data_len>:
{
   16ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ab2:	b083      	sub	sp, #12
   16ab4:	af00      	add	r7, sp, #0
   16ab6:	4606      	mov	r6, r0
   16ab8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16aba:	1d3a      	adds	r2, r7, #4
   16abc:	2100      	movs	r1, #0
   16abe:	f242 002f 	movw	r0, #8239	; 0x202f
   16ac2:	f7ff ff71 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   16ac6:	4604      	mov	r4, r0
   16ac8:	b198      	cbz	r0, 16af2 <hci_le_read_max_data_len+0x42>
		LOG_ERR("Failed to read DLE max data len");
   16aca:	466d      	mov	r5, sp
   16acc:	b088      	sub	sp, #32
   16ace:	466a      	mov	r2, sp
   16ad0:	4b0d      	ldr	r3, [pc, #52]	; (16b08 <hci_le_read_max_data_len+0x58>)
   16ad2:	6153      	str	r3, [r2, #20]
   16ad4:	4b0d      	ldr	r3, [pc, #52]	; (16b0c <hci_le_read_max_data_len+0x5c>)
   16ad6:	6193      	str	r3, [r2, #24]
   16ad8:	2303      	movs	r3, #3
   16ada:	f842 3f10 	str.w	r3, [r2, #16]!
   16ade:	480c      	ldr	r0, [pc, #48]	; (16b10 <hci_le_read_max_data_len+0x60>)
   16ae0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ae4:	f010 f9ca 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16ae8:	46ad      	mov	sp, r5
}
   16aea:	4620      	mov	r0, r4
   16aec:	370c      	adds	r7, #12
   16aee:	46bd      	mov	sp, r7
   16af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
   16af2:	6878      	ldr	r0, [r7, #4]
   16af4:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16af6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16afa:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16afc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16b00:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16b02:	f008 ff8f 	bl	1fa24 <net_buf_unref>
	return 0;
   16b06:	e7f0      	b.n	16aea <hci_le_read_max_data_len+0x3a>
   16b08:	0002c922 	.word	0x0002c922
   16b0c:	0002d0c8 	.word	0x0002d0c8
   16b10:	0002a850 	.word	0x0002a850

00016b14 <bt_hci_le_rand>:
{
   16b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16b16:	4b14      	ldr	r3, [pc, #80]	; (16b68 <bt_hci_le_rand+0x54>)
   16b18:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   16b1c:	2b00      	cmp	r3, #0
{
   16b1e:	4605      	mov	r5, r0
   16b20:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16b22:	da1d      	bge.n	16b60 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16b24:	b914      	cbnz	r4, 16b2c <bt_hci_le_rand+0x18>
	return 0;
   16b26:	4620      	mov	r0, r4
}
   16b28:	b003      	add	sp, #12
   16b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16b2c:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16b2e:	aa01      	add	r2, sp, #4
   16b30:	f04f 0100 	mov.w	r1, #0
   16b34:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16b38:	4626      	mov	r6, r4
   16b3a:	bf28      	it	cs
   16b3c:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16b3e:	f7ff ff33 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   16b42:	2800      	cmp	r0, #0
   16b44:	d1f0      	bne.n	16b28 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16b46:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16b48:	68f9      	ldr	r1, [r7, #12]
   16b4a:	4632      	mov	r2, r6
   16b4c:	3101      	adds	r1, #1
   16b4e:	4628      	mov	r0, r5
   16b50:	f010 f84c 	bl	26bec <memcpy>
		net_buf_unref(rsp);
   16b54:	4638      	mov	r0, r7
   16b56:	f008 ff65 	bl	1fa24 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16b5a:	4435      	add	r5, r6
		len -= count;
   16b5c:	1ba4      	subs	r4, r4, r6
   16b5e:	e7e1      	b.n	16b24 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16b60:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16b64:	e7e0      	b.n	16b28 <bt_hci_le_rand+0x14>
   16b66:	bf00      	nop
   16b68:	20000390 	.word	0x20000390

00016b6c <bt_hci_le_enh_conn_complete>:
{
   16b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b70:	b088      	sub	sp, #32
		if (disconnected_handles[i] == handle) {
   16b72:	4b4c      	ldr	r3, [pc, #304]	; (16ca4 <bt_hci_le_enh_conn_complete+0x138>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16b74:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16b78:	8819      	ldrh	r1, [r3, #0]
{
   16b7a:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   16b7c:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   16b80:	4291      	cmp	r1, r2
   16b82:	f04f 0600 	mov.w	r6, #0
{
   16b86:	af02      	add	r7, sp, #8
			disconnected_handles[i] = 0;
   16b88:	bf04      	itt	eq
   16b8a:	801e      	strheq	r6, [r3, #0]
			return true;
   16b8c:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   16b8e:	f001 fa47 	bl	18020 <bt_id_pending_keys_update>
	if (evt->status) {
   16b92:	782c      	ldrb	r4, [r5, #0]
   16b94:	2c00      	cmp	r4, #0
   16b96:	d03b      	beq.n	16c10 <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16b98:	2c3c      	cmp	r4, #60	; 0x3c
   16b9a:	d127      	bne.n	16bec <bt_hci_le_enh_conn_complete+0x80>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16b9c:	f001 fdec 	bl	18778 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16ba0:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16ba4:	3010      	adds	r0, #16
   16ba6:	f010 f96c 	bl	26e82 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16baa:	2000      	movs	r0, #0
   16bac:	f7ff fa3e 	bl	1602c <find_pending_connect.part.0>
		if (!conn) {
   16bb0:	4605      	mov	r5, r0
   16bb2:	b998      	cbnz	r0, 16bdc <bt_hci_le_enh_conn_complete+0x70>
			LOG_ERR("No pending peripheral connection");
   16bb4:	466c      	mov	r4, sp
   16bb6:	b088      	sub	sp, #32
   16bb8:	aa02      	add	r2, sp, #8
   16bba:	4b3b      	ldr	r3, [pc, #236]	; (16ca8 <bt_hci_le_enh_conn_complete+0x13c>)
   16bbc:	6153      	str	r3, [r2, #20]
   16bbe:	4b3b      	ldr	r3, [pc, #236]	; (16cac <bt_hci_le_enh_conn_complete+0x140>)
   16bc0:	6193      	str	r3, [r2, #24]
   16bc2:	2303      	movs	r3, #3
   16bc4:	f842 3f10 	str.w	r3, [r2, #16]!
   16bc8:	4839      	ldr	r0, [pc, #228]	; (16cb0 <bt_hci_le_enh_conn_complete+0x144>)
   16bca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16bce:	f010 f955 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16bd2:	46a5      	mov	sp, r4
}
   16bd4:	3718      	adds	r7, #24
   16bd6:	46bd      	mov	sp, r7
   16bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16bdc:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16bde:	2100      	movs	r1, #0
   16be0:	f002 fcb4 	bl	1954c <bt_conn_set_state>
		bt_conn_unref(conn);
   16be4:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16be6:	f010 fc75 	bl	274d4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16bea:	e7f3      	b.n	16bd4 <bt_hci_le_enh_conn_complete+0x68>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16bec:	466d      	mov	r5, sp
   16bee:	b088      	sub	sp, #32
   16bf0:	aa02      	add	r2, sp, #8
   16bf2:	4b30      	ldr	r3, [pc, #192]	; (16cb4 <bt_hci_le_enh_conn_complete+0x148>)
   16bf4:	6153      	str	r3, [r2, #20]
   16bf6:	4b30      	ldr	r3, [pc, #192]	; (16cb8 <bt_hci_le_enh_conn_complete+0x14c>)
   16bf8:	482d      	ldr	r0, [pc, #180]	; (16cb0 <bt_hci_le_enh_conn_complete+0x144>)
   16bfa:	e9c2 3406 	strd	r3, r4, [r2, #24]
   16bfe:	2304      	movs	r3, #4
   16c00:	f842 3f10 	str.w	r3, [r2, #16]!
   16c04:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16c08:	f010 f938 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16c0c:	46ad      	mov	sp, r5
		return;
   16c0e:	e7e1      	b.n	16bd4 <bt_hci_le_enh_conn_complete+0x68>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16c10:	78eb      	ldrb	r3, [r5, #3]
   16c12:	2b01      	cmp	r3, #1
   16c14:	bf08      	it	eq
   16c16:	4b29      	ldreq	r3, [pc, #164]	; (16cbc <bt_hci_le_enh_conn_complete+0x150>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16c18:	f105 0904 	add.w	r9, r5, #4
   16c1c:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16c1e:	bf08      	it	eq
   16c20:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16c24:	f010 f8e7 	bl	26df6 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16c28:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16c2a:	b358      	cbz	r0, 16c84 <bt_hci_le_enh_conn_complete+0x118>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16c2c:	f107 0010 	add.w	r0, r7, #16
   16c30:	f010 f8d7 	bl	26de2 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   16c34:	2206      	movs	r2, #6
   16c36:	f105 0111 	add.w	r1, r5, #17
   16c3a:	f107 0009 	add.w	r0, r7, #9
   16c3e:	f00f ffd5 	bl	26bec <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   16c42:	2301      	movs	r3, #1
   16c44:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16c46:	78eb      	ldrb	r3, [r5, #3]
   16c48:	2b01      	cmp	r3, #1
   16c4a:	d03d      	beq.n	16cc8 <bt_hci_le_enh_conn_complete+0x15c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16c4c:	4648      	mov	r0, r9
   16c4e:	f7fe fe45 	bl	158dc <bt_addr_le_str>
   16c52:	466c      	mov	r4, sp
   16c54:	b08a      	sub	sp, #40	; 0x28
   16c56:	aa02      	add	r2, sp, #8
   16c58:	4b19      	ldr	r3, [pc, #100]	; (16cc0 <bt_hci_le_enh_conn_complete+0x154>)
   16c5a:	6153      	str	r3, [r2, #20]
   16c5c:	4b16      	ldr	r3, [pc, #88]	; (16cb8 <bt_hci_le_enh_conn_complete+0x14c>)
   16c5e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16c62:	f240 3301 	movw	r3, #769	; 0x301
   16c66:	8413      	strh	r3, [r2, #32]
   16c68:	4b16      	ldr	r3, [pc, #88]	; (16cc4 <bt_hci_le_enh_conn_complete+0x158>)
   16c6a:	f842 3f10 	str.w	r3, [r2, #16]!
   16c6e:	4810      	ldr	r0, [pc, #64]	; (16cb0 <bt_hci_le_enh_conn_complete+0x144>)
   16c70:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   16c74:	f010 f902 	bl	26e7c <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16c78:	211f      	movs	r1, #31
   16c7a:	46a5      	mov	sp, r4
   16c7c:	4640      	mov	r0, r8
   16c7e:	f010 f91c 	bl	26eba <bt_hci_disconnect>
		return;
   16c82:	e7a7      	b.n	16bd4 <bt_hci_le_enh_conn_complete+0x68>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   16c84:	4620      	mov	r0, r4
   16c86:	f010 fa92 	bl	271ae <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16c8a:	2207      	movs	r2, #7
   16c8c:	4601      	mov	r1, r0
   16c8e:	f107 0010 	add.w	r0, r7, #16
   16c92:	f00f ffab 	bl	26bec <memcpy>
   16c96:	2207      	movs	r2, #7
   16c98:	4649      	mov	r1, r9
   16c9a:	f107 0008 	add.w	r0, r7, #8
   16c9e:	f00f ffa5 	bl	26bec <memcpy>
}
   16ca2:	e7d0      	b.n	16c46 <bt_hci_le_enh_conn_complete+0xda>
   16ca4:	20003394 	.word	0x20003394
   16ca8:	0002c946 	.word	0x0002c946
   16cac:	0002d05e 	.word	0x0002d05e
   16cb0:	0002a850 	.word	0x0002a850
   16cb4:	0002c96b 	.word	0x0002c96b
   16cb8:	0002d07b 	.word	0x0002d07b
   16cbc:	20000390 	.word	0x20000390
   16cc0:	0002c988 	.word	0x0002c988
   16cc4:	01000004 	.word	0x01000004
   16cc8:	f107 0010 	add.w	r0, r7, #16
   16ccc:	f7ff f9ae 	bl	1602c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16cd0:	78eb      	ldrb	r3, [r5, #3]
   16cd2:	2b01      	cmp	r3, #1
   16cd4:	4604      	mov	r4, r0
   16cd6:	d10a      	bne.n	16cee <bt_hci_le_enh_conn_complete+0x182>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16cd8:	f001 fd4e 	bl	18778 <bt_le_adv_lookup_legacy>
   16cdc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16ce0:	4682      	mov	sl, r0
   16ce2:	3010      	adds	r0, #16
   16ce4:	f010 f8cd 	bl	26e82 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16ce8:	4650      	mov	r0, sl
   16cea:	f010 fb78 	bl	273de <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16cee:	2c00      	cmp	r4, #0
   16cf0:	d0ac      	beq.n	16c4c <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = sys_le16_to_cpu(evt->handle);
   16cf2:	4620      	mov	r0, r4
   16cf4:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   16cf8:	f820 3b88 	strh.w	r3, [r0], #136
	memcpy(dst, src, sizeof(*dst));
   16cfc:	2207      	movs	r2, #7
   16cfe:	f107 0110 	add.w	r1, r7, #16
   16d02:	f00f ff73 	bl	26bec <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16d06:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16d0a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16d0e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16d12:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16d16:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16d1a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   16d1e:	f895 9003 	ldrb.w	r9, [r5, #3]
   16d22:	f884 9003 	strb.w	r9, [r4, #3]
	conn->err = 0U;
   16d26:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16d28:	f1b9 0f01 	cmp.w	r9, #1
	conn->err = 0U;
   16d2c:	7323      	strb	r3, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16d2e:	d12b      	bne.n	16d88 <bt_hci_le_enh_conn_complete+0x21c>
   16d30:	2207      	movs	r2, #7
   16d32:	f107 0108 	add.w	r1, r7, #8
   16d36:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   16d3a:	f00f ff57 	bl	26bec <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16d3e:	f001 fd1b 	bl	18778 <bt_le_adv_lookup_legacy>
   16d42:	f3bf 8f5b 	dmb	ish
   16d46:	6903      	ldr	r3, [r0, #16]
   16d48:	f8df 8168 	ldr.w	r8, [pc, #360]	; 16eb4 <bt_hci_le_enh_conn_complete+0x348>
   16d4c:	f3bf 8f5b 	dmb	ish
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   16d50:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   16d54:	f040 80a3 	bne.w	16e9e <bt_hci_le_enh_conn_complete+0x332>
				if (bt_addr_cmp(&evt->local_rpa,
   16d58:	350b      	adds	r5, #11
	return memcmp(a, b, sizeof(*a));
   16d5a:	2206      	movs	r2, #6
   16d5c:	4956      	ldr	r1, [pc, #344]	; (16eb8 <bt_hci_le_enh_conn_complete+0x34c>)
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
   16d5e:	f884 9096 	strb.w	r9, [r4, #150]	; 0x96
   16d62:	4628      	mov	r0, r5
   16d64:	f00f ff32 	bl	26bcc <memcmp>
   16d68:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   16d6a:	2206      	movs	r2, #6
					bt_addr_copy(&conn->le.resp_addr.a,
   16d6c:	f104 0097 	add.w	r0, r4, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
   16d70:	2b00      	cmp	r3, #0
   16d72:	f000 8091 	beq.w	16e98 <bt_hci_le_enh_conn_complete+0x32c>
   16d76:	4629      	mov	r1, r5
	memcpy(dst, src, sizeof(*dst));
   16d78:	f00f ff38 	bl	26bec <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16d7c:	f8d8 30e4 	ldr.w	r3, [r8, #228]	; 0xe4
   16d80:	065d      	lsls	r5, r3, #25
   16d82:	d501      	bpl.n	16d88 <bt_hci_le_enh_conn_complete+0x21c>
			bt_le_adv_resume();
   16d84:	f001 fece 	bl	18b24 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16d88:	2107      	movs	r1, #7
   16d8a:	4620      	mov	r0, r4
   16d8c:	f002 fbde 	bl	1954c <bt_conn_set_state>
	if (is_disconnected) {
   16d90:	b11e      	cbz	r6, 16d9a <bt_hci_le_enh_conn_complete+0x22e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16d92:	2101      	movs	r1, #1
   16d94:	4620      	mov	r0, r4
   16d96:	f002 fbd9 	bl	1954c <bt_conn_set_state>
	bt_conn_connected(conn);
   16d9a:	4620      	mov	r0, r4
   16d9c:	f010 fbd8 	bl	27550 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16da0:	7b63      	ldrb	r3, [r4, #13]
   16da2:	2b07      	cmp	r3, #7
   16da4:	d176      	bne.n	16e94 <bt_hci_le_enh_conn_complete+0x328>
   16da6:	f3bf 8f5b 	dmb	ish
   16daa:	6863      	ldr	r3, [r4, #4]
   16dac:	4d41      	ldr	r5, [pc, #260]	; (16eb4 <bt_hci_le_enh_conn_complete+0x348>)
   16dae:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16db2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16db6:	d12b      	bne.n	16e10 <bt_hci_le_enh_conn_complete+0x2a4>
   16db8:	78e3      	ldrb	r3, [r4, #3]
   16dba:	b11b      	cbz	r3, 16dc4 <bt_hci_le_enh_conn_complete+0x258>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16dbc:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16dc0:	0718      	lsls	r0, r3, #28
   16dc2:	d525      	bpl.n	16e10 <bt_hci_le_enh_conn_complete+0x2a4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16dc4:	2102      	movs	r1, #2
   16dc6:	f242 0016 	movw	r0, #8214	; 0x2016
   16dca:	f7ff fdb3 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   16dce:	4606      	mov	r6, r0
   16dd0:	2800      	cmp	r0, #0
   16dd2:	d06c      	beq.n	16eae <bt_hci_le_enh_conn_complete+0x342>
   16dd4:	2102      	movs	r1, #2
   16dd6:	300c      	adds	r0, #12
   16dd8:	f012 f976 	bl	290c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16ddc:	8823      	ldrh	r3, [r4, #0]
   16dde:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16de0:	2200      	movs	r2, #0
   16de2:	4631      	mov	r1, r6
   16de4:	f242 0016 	movw	r0, #8214	; 0x2016
   16de8:	f7ff fdde 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   16dec:	b180      	cbz	r0, 16e10 <bt_hci_le_enh_conn_complete+0x2a4>
			LOG_ERR("Failed read remote features (%d)", err);
   16dee:	466e      	mov	r6, sp
   16df0:	b088      	sub	sp, #32
   16df2:	aa02      	add	r2, sp, #8
   16df4:	4b31      	ldr	r3, [pc, #196]	; (16ebc <bt_hci_le_enh_conn_complete+0x350>)
   16df6:	6153      	str	r3, [r2, #20]
   16df8:	4b31      	ldr	r3, [pc, #196]	; (16ec0 <bt_hci_le_enh_conn_complete+0x354>)
   16dfa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16dfe:	2304      	movs	r3, #4
   16e00:	f842 3f10 	str.w	r3, [r2, #16]!
   16e04:	482f      	ldr	r0, [pc, #188]	; (16ec4 <bt_hci_le_enh_conn_complete+0x358>)
   16e06:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16e0a:	f010 f837 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16e0e:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16e10:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   16e14:	07d9      	lsls	r1, r3, #31
   16e16:	d518      	bpl.n	16e4a <bt_hci_le_enh_conn_complete+0x2de>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16e18:	2100      	movs	r1, #0
   16e1a:	2302      	movs	r3, #2
   16e1c:	9100      	str	r1, [sp, #0]
   16e1e:	461a      	mov	r2, r3
   16e20:	4620      	mov	r0, r4
   16e22:	f010 f883 	bl	26f2c <bt_le_set_phy>
		if (err) {
   16e26:	b180      	cbz	r0, 16e4a <bt_hci_le_enh_conn_complete+0x2de>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16e28:	466e      	mov	r6, sp
   16e2a:	b088      	sub	sp, #32
   16e2c:	aa02      	add	r2, sp, #8
   16e2e:	4b26      	ldr	r3, [pc, #152]	; (16ec8 <bt_hci_le_enh_conn_complete+0x35c>)
   16e30:	6153      	str	r3, [r2, #20]
   16e32:	4b23      	ldr	r3, [pc, #140]	; (16ec0 <bt_hci_le_enh_conn_complete+0x354>)
   16e34:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16e38:	2304      	movs	r3, #4
   16e3a:	f842 3f10 	str.w	r3, [r2, #16]!
   16e3e:	4821      	ldr	r0, [pc, #132]	; (16ec4 <bt_hci_le_enh_conn_complete+0x358>)
   16e40:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16e44:	f010 f81a 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16e48:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16e4a:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16e4e:	069a      	lsls	r2, r3, #26
   16e50:	d520      	bpl.n	16e94 <bt_hci_le_enh_conn_complete+0x328>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16e52:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   16e56:	689b      	ldr	r3, [r3, #8]
   16e58:	079b      	lsls	r3, r3, #30
   16e5a:	d51b      	bpl.n	16e94 <bt_hci_le_enh_conn_complete+0x328>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16e5c:	1db9      	adds	r1, r7, #6
   16e5e:	1d38      	adds	r0, r7, #4
   16e60:	f7ff fe26 	bl	16ab0 <hci_le_read_max_data_len>
			if (!err) {
   16e64:	b9b0      	cbnz	r0, 16e94 <bt_hci_le_enh_conn_complete+0x328>
				err = bt_le_set_data_len(conn,
   16e66:	88fa      	ldrh	r2, [r7, #6]
   16e68:	88b9      	ldrh	r1, [r7, #4]
   16e6a:	4620      	mov	r0, r4
   16e6c:	f010 f840 	bl	26ef0 <bt_le_set_data_len>
				if (err) {
   16e70:	b180      	cbz	r0, 16e94 <bt_hci_le_enh_conn_complete+0x328>
					LOG_ERR("Failed to set data len (%d)", err);
   16e72:	466d      	mov	r5, sp
   16e74:	b088      	sub	sp, #32
   16e76:	aa02      	add	r2, sp, #8
   16e78:	4b14      	ldr	r3, [pc, #80]	; (16ecc <bt_hci_le_enh_conn_complete+0x360>)
   16e7a:	6153      	str	r3, [r2, #20]
   16e7c:	4b10      	ldr	r3, [pc, #64]	; (16ec0 <bt_hci_le_enh_conn_complete+0x354>)
   16e7e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   16e82:	2304      	movs	r3, #4
   16e84:	f842 3f10 	str.w	r3, [r2, #16]!
   16e88:	480e      	ldr	r0, [pc, #56]	; (16ec4 <bt_hci_le_enh_conn_complete+0x358>)
   16e8a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16e8e:	f00f fff5 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16e92:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16e94:	4620      	mov	r0, r4
   16e96:	e6a6      	b.n	16be6 <bt_hci_le_enh_conn_complete+0x7a>
	memcpy(dst, src, sizeof(*dst));
   16e98:	f108 0169 	add.w	r1, r8, #105	; 0x69
   16e9c:	e76c      	b.n	16d78 <bt_hci_le_enh_conn_complete+0x20c>
						&bt_dev.id_addr[conn->id]);
   16e9e:	7a21      	ldrb	r1, [r4, #8]
   16ea0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   16ea4:	2207      	movs	r2, #7
   16ea6:	4441      	add	r1, r8
   16ea8:	f104 0096 	add.w	r0, r4, #150	; 0x96
   16eac:	e764      	b.n	16d78 <bt_hci_le_enh_conn_complete+0x20c>
		return -ENOBUFS;
   16eae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16eb2:	e79c      	b.n	16dee <bt_hci_le_enh_conn_complete+0x282>
   16eb4:	20000390 	.word	0x20000390
   16eb8:	0002c33d 	.word	0x0002c33d
   16ebc:	0002c9a8 	.word	0x0002c9a8
   16ec0:	0002d04b 	.word	0x0002d04b
   16ec4:	0002a850 	.word	0x0002a850
   16ec8:	0002c9cd 	.word	0x0002c9cd
   16ecc:	0002c9e8 	.word	0x0002c9e8

00016ed0 <le_legacy_conn_complete>:
{
   16ed0:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16ed2:	68c1      	ldr	r1, [r0, #12]
{
   16ed4:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   16ed6:	780b      	ldrb	r3, [r1, #0]
   16ed8:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16edc:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16ee0:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16ee4:	78cb      	ldrb	r3, [r1, #3]
   16ee6:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16eea:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16eee:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   16ef2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   16ef6:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   16efa:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16efe:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   16f02:	7c4b      	ldrb	r3, [r1, #17]
   16f04:	f88d 301d 	strb.w	r3, [sp, #29]
   16f08:	2207      	movs	r2, #7
   16f0a:	3104      	adds	r1, #4
   16f0c:	a801      	add	r0, sp, #4
   16f0e:	f00f fe6d 	bl	26bec <memcpy>
	memcpy(dst, src, sizeof(*dst));
   16f12:	4909      	ldr	r1, [pc, #36]	; (16f38 <le_legacy_conn_complete+0x68>)
   16f14:	2206      	movs	r2, #6
   16f16:	f10d 000b 	add.w	r0, sp, #11
   16f1a:	f00f fe67 	bl	26bec <memcpy>
   16f1e:	4907      	ldr	r1, [pc, #28]	; (16f3c <le_legacy_conn_complete+0x6c>)
   16f20:	2206      	movs	r2, #6
   16f22:	f10d 0011 	add.w	r0, sp, #17
   16f26:	f00f fe61 	bl	26bec <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   16f2a:	4668      	mov	r0, sp
   16f2c:	f7ff fe1e 	bl	16b6c <bt_hci_le_enh_conn_complete>
}
   16f30:	b009      	add	sp, #36	; 0x24
   16f32:	f85d fb04 	ldr.w	pc, [sp], #4
   16f36:	bf00      	nop
   16f38:	200003f9 	.word	0x200003f9
   16f3c:	0002c33d 	.word	0x0002c33d

00016f40 <bt_unpair>:
{
   16f40:	b513      	push	{r0, r1, r4, lr}
   16f42:	460c      	mov	r4, r1
   16f44:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
   16f48:	b9b8      	cbnz	r0, 16f7a <bt_unpair+0x3a>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16f4a:	b949      	cbnz	r1, 16f60 <bt_unpair+0x20>
		bt_foreach_bond(id, unpair_remote, &id);
   16f4c:	490c      	ldr	r1, [pc, #48]	; (16f80 <bt_unpair+0x40>)
   16f4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16f52:	f10d 0207 	add.w	r2, sp, #7
   16f56:	f008 f9bd 	bl	1f2d4 <bt_foreach_bond>
		return 0;
   16f5a:	2000      	movs	r0, #0
}
   16f5c:	b002      	add	sp, #8
   16f5e:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   16f60:	4908      	ldr	r1, [pc, #32]	; (16f84 <bt_unpair+0x44>)
   16f62:	2207      	movs	r2, #7
   16f64:	4620      	mov	r0, r4
   16f66:	f00f fe31 	bl	26bcc <memcmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   16f6a:	2800      	cmp	r0, #0
   16f6c:	d0ee      	beq.n	16f4c <bt_unpair+0xc>
	unpair(id, addr);
   16f6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16f72:	4621      	mov	r1, r4
   16f74:	f7fe fff6 	bl	15f64 <unpair>
	return 0;
   16f78:	e7ef      	b.n	16f5a <bt_unpair+0x1a>
		return -EINVAL;
   16f7a:	f06f 0015 	mvn.w	r0, #21
   16f7e:	e7ed      	b.n	16f5c <bt_unpair+0x1c>
   16f80:	00026e73 	.word	0x00026e73
   16f84:	0002c330 	.word	0x0002c330

00016f88 <bt_security_err_get>:
	switch (hci_err) {
   16f88:	2829      	cmp	r0, #41	; 0x29
   16f8a:	bf9a      	itte	ls
   16f8c:	4b01      	ldrls	r3, [pc, #4]	; (16f94 <bt_security_err_get+0xc>)
   16f8e:	5c18      	ldrbls	r0, [r3, r0]
{
   16f90:	2009      	movhi	r0, #9
}
   16f92:	4770      	bx	lr
   16f94:	0002cd57 	.word	0x0002cd57

00016f98 <hci_encrypt_key_refresh_complete>:
{
   16f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   16f9a:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16f9c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16fa0:	781d      	ldrb	r5, [r3, #0]
{
   16fa2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16fa4:	4630      	mov	r0, r6
   16fa6:	f002 fac9 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   16faa:	4604      	mov	r4, r0
   16fac:	b990      	cbnz	r0, 16fd4 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16fae:	466c      	mov	r4, sp
   16fb0:	b088      	sub	sp, #32
   16fb2:	466a      	mov	r2, sp
   16fb4:	4b21      	ldr	r3, [pc, #132]	; (1703c <hci_encrypt_key_refresh_complete+0xa4>)
   16fb6:	6153      	str	r3, [r2, #20]
   16fb8:	4b21      	ldr	r3, [pc, #132]	; (17040 <hci_encrypt_key_refresh_complete+0xa8>)
   16fba:	4822      	ldr	r0, [pc, #136]	; (17044 <hci_encrypt_key_refresh_complete+0xac>)
   16fbc:	e9c2 3606 	strd	r3, r6, [r2, #24]
   16fc0:	2304      	movs	r3, #4
   16fc2:	f842 3f10 	str.w	r3, [r2, #16]!
   16fc6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16fca:	f00f ff57 	bl	26e7c <z_log_msg_static_create.constprop.0>
   16fce:	46a5      	mov	sp, r4
}
   16fd0:	46bd      	mov	sp, r7
   16fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (status) {
   16fd4:	b15d      	cbz	r5, 16fee <hci_encrypt_key_refresh_complete+0x56>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16fd6:	4628      	mov	r0, r5
   16fd8:	f7ff ffd6 	bl	16f88 <bt_security_err_get>
   16fdc:	4629      	mov	r1, r5
   16fde:	4602      	mov	r2, r0
   16fe0:	4620      	mov	r0, r4
   16fe2:	f002 fca1 	bl	19928 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16fe6:	4620      	mov	r0, r4
   16fe8:	f010 fa74 	bl	274d4 <bt_conn_unref>
   16fec:	e7f0      	b.n	16fd0 <hci_encrypt_key_refresh_complete+0x38>
	if (conn->type == BT_CONN_TYPE_LE) {
   16fee:	7883      	ldrb	r3, [r0, #2]
   16ff0:	2b01      	cmp	r3, #1
   16ff2:	d1f0      	bne.n	16fd6 <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
   16ff4:	f008 f866 	bl	1f0c4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   16ff8:	4620      	mov	r0, r4
   16ffa:	f00f ff12 	bl	26e22 <update_sec_level>
   16ffe:	2800      	cmp	r0, #0
   17000:	d1e9      	bne.n	16fd6 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17002:	2005      	movs	r0, #5
   17004:	f7ff ffc0 	bl	16f88 <bt_security_err_get>
   17008:	2105      	movs	r1, #5
   1700a:	4602      	mov	r2, r0
   1700c:	4620      	mov	r0, r4
   1700e:	f002 fc8b 	bl	19928 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   17012:	466d      	mov	r5, sp
   17014:	b088      	sub	sp, #32
   17016:	466a      	mov	r2, sp
   17018:	4b0b      	ldr	r3, [pc, #44]	; (17048 <hci_encrypt_key_refresh_complete+0xb0>)
   1701a:	6153      	str	r3, [r2, #20]
   1701c:	4b08      	ldr	r3, [pc, #32]	; (17040 <hci_encrypt_key_refresh_complete+0xa8>)
   1701e:	6193      	str	r3, [r2, #24]
   17020:	2303      	movs	r3, #3
   17022:	f842 3f10 	str.w	r3, [r2, #16]!
   17026:	4807      	ldr	r0, [pc, #28]	; (17044 <hci_encrypt_key_refresh_complete+0xac>)
   17028:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1702c:	f00f ff26 	bl	26e7c <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   17030:	2105      	movs	r1, #5
   17032:	46ad      	mov	sp, r5
   17034:	4620      	mov	r0, r4
   17036:	f010 fa94 	bl	27562 <bt_conn_disconnect>
   1703a:	e7d4      	b.n	16fe6 <hci_encrypt_key_refresh_complete+0x4e>
   1703c:	0002c6a6 	.word	0x0002c6a6
   17040:	0002cf8c 	.word	0x0002cf8c
   17044:	0002a850 	.word	0x0002a850
   17048:	0002ca08 	.word	0x0002ca08

0001704c <hci_encrypt_change>:
{
   1704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   17050:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17052:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   17056:	7835      	ldrb	r5, [r6, #0]
{
   17058:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1705a:	4640      	mov	r0, r8
   1705c:	f002 fa6e 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   17060:	4604      	mov	r4, r0
   17062:	b998      	cbnz	r0, 1708c <hci_encrypt_change+0x40>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   17064:	466c      	mov	r4, sp
   17066:	b088      	sub	sp, #32
   17068:	466a      	mov	r2, sp
   1706a:	4b27      	ldr	r3, [pc, #156]	; (17108 <hci_encrypt_change+0xbc>)
   1706c:	6153      	str	r3, [r2, #20]
   1706e:	4b27      	ldr	r3, [pc, #156]	; (1710c <hci_encrypt_change+0xc0>)
   17070:	4827      	ldr	r0, [pc, #156]	; (17110 <hci_encrypt_change+0xc4>)
   17072:	e9c2 3806 	strd	r3, r8, [r2, #24]
   17076:	2304      	movs	r3, #4
   17078:	f842 3f10 	str.w	r3, [r2, #16]!
   1707c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17080:	f00f fefc 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17084:	46a5      	mov	sp, r4
}
   17086:	46bd      	mov	sp, r7
   17088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (status) {
   1708c:	b15d      	cbz	r5, 170a6 <hci_encrypt_change+0x5a>
		bt_conn_security_changed(conn, status,
   1708e:	4628      	mov	r0, r5
   17090:	f7ff ff7a 	bl	16f88 <bt_security_err_get>
   17094:	4629      	mov	r1, r5
   17096:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   17098:	4620      	mov	r0, r4
   1709a:	f002 fc45 	bl	19928 <bt_conn_security_changed>
	bt_conn_unref(conn);
   1709e:	4620      	mov	r0, r4
   170a0:	f010 fa18 	bl	274d4 <bt_conn_unref>
   170a4:	e7ef      	b.n	17086 <hci_encrypt_change+0x3a>
	if (conn->type == BT_CONN_TYPE_LE) {
   170a6:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   170a8:	78f3      	ldrb	r3, [r6, #3]
   170aa:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   170ac:	2a01      	cmp	r2, #1
   170ae:	d005      	beq.n	170bc <hci_encrypt_change+0x70>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   170b0:	2000      	movs	r0, #0
   170b2:	f7ff ff69 	bl	16f88 <bt_security_err_get>
   170b6:	2100      	movs	r1, #0
   170b8:	4602      	mov	r2, r0
   170ba:	e7ed      	b.n	17098 <hci_encrypt_change+0x4c>
		if (conn->encrypt) {
   170bc:	b10b      	cbz	r3, 170c2 <hci_encrypt_change+0x76>
			bt_smp_update_keys(conn);
   170be:	f008 f801 	bl	1f0c4 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   170c2:	4620      	mov	r0, r4
   170c4:	f00f fead 	bl	26e22 <update_sec_level>
   170c8:	2800      	cmp	r0, #0
   170ca:	d1f1      	bne.n	170b0 <hci_encrypt_change+0x64>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   170cc:	2005      	movs	r0, #5
   170ce:	f7ff ff5b 	bl	16f88 <bt_security_err_get>
   170d2:	2105      	movs	r1, #5
   170d4:	4602      	mov	r2, r0
   170d6:	4620      	mov	r0, r4
   170d8:	f002 fc26 	bl	19928 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   170dc:	466d      	mov	r5, sp
   170de:	b088      	sub	sp, #32
   170e0:	466a      	mov	r2, sp
   170e2:	4b0c      	ldr	r3, [pc, #48]	; (17114 <hci_encrypt_change+0xc8>)
   170e4:	6153      	str	r3, [r2, #20]
   170e6:	4b09      	ldr	r3, [pc, #36]	; (1710c <hci_encrypt_change+0xc0>)
   170e8:	6193      	str	r3, [r2, #24]
   170ea:	2303      	movs	r3, #3
   170ec:	f842 3f10 	str.w	r3, [r2, #16]!
   170f0:	4807      	ldr	r0, [pc, #28]	; (17110 <hci_encrypt_change+0xc4>)
   170f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   170f6:	f00f fec1 	bl	26e7c <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
   170fa:	2105      	movs	r1, #5
   170fc:	46ad      	mov	sp, r5
   170fe:	4620      	mov	r0, r4
   17100:	f010 fa2f 	bl	27562 <bt_conn_disconnect>
   17104:	e7cb      	b.n	1709e <hci_encrypt_change+0x52>
   17106:	bf00      	nop
   17108:	0002c6a6 	.word	0x0002c6a6
   1710c:	0002cf79 	.word	0x0002cf79
   17110:	0002a850 	.word	0x0002a850
   17114:	0002ca08 	.word	0x0002ca08

00017118 <bt_send>:
	return bt_dev.drv->send(buf);
   17118:	4b02      	ldr	r3, [pc, #8]	; (17124 <bt_send+0xc>)
   1711a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1711e:	695b      	ldr	r3, [r3, #20]
   17120:	4718      	bx	r3
   17122:	bf00      	nop
   17124:	20000390 	.word	0x20000390

00017128 <bt_hci_cmd_send>:
{
   17128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1712a:	4605      	mov	r5, r0
   1712c:	af00      	add	r7, sp, #0
	if (!buf) {
   1712e:	460c      	mov	r4, r1
   17130:	b919      	cbnz	r1, 1713a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   17132:	f7ff fbff 	bl	16934 <bt_hci_cmd_create>
		if (!buf) {
   17136:	4604      	mov	r4, r0
   17138:	b328      	cbz	r0, 17186 <bt_hci_cmd_send+0x5e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1713a:	f640 4335 	movw	r3, #3125	; 0xc35
   1713e:	429d      	cmp	r5, r3
   17140:	d11b      	bne.n	1717a <bt_hci_cmd_send+0x52>
		err = bt_send(buf);
   17142:	4620      	mov	r0, r4
   17144:	f7ff ffe8 	bl	17118 <bt_send>
		if (err) {
   17148:	4605      	mov	r5, r0
   1714a:	b198      	cbz	r0, 17174 <bt_hci_cmd_send+0x4c>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1714c:	466e      	mov	r6, sp
   1714e:	b088      	sub	sp, #32
   17150:	466a      	mov	r2, sp
   17152:	4b0e      	ldr	r3, [pc, #56]	; (1718c <bt_hci_cmd_send+0x64>)
   17154:	6153      	str	r3, [r2, #20]
   17156:	4b0e      	ldr	r3, [pc, #56]	; (17190 <bt_hci_cmd_send+0x68>)
   17158:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1715c:	2304      	movs	r3, #4
   1715e:	480d      	ldr	r0, [pc, #52]	; (17194 <bt_hci_cmd_send+0x6c>)
   17160:	f842 3f10 	str.w	r3, [r2, #16]!
   17164:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17168:	f00f fe88 	bl	26e7c <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   1716c:	4620      	mov	r0, r4
   1716e:	46b5      	mov	sp, r6
   17170:	f008 fc58 	bl	1fa24 <net_buf_unref>
}
   17174:	4628      	mov	r0, r5
   17176:	46bd      	mov	sp, r7
   17178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1717a:	4807      	ldr	r0, [pc, #28]	; (17198 <bt_hci_cmd_send+0x70>)
   1717c:	4621      	mov	r1, r4
   1717e:	f011 ff71 	bl	29064 <net_buf_put>
	return 0;
   17182:	2500      	movs	r5, #0
   17184:	e7f6      	b.n	17174 <bt_hci_cmd_send+0x4c>
			return -ENOBUFS;
   17186:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1718a:	e7f3      	b.n	17174 <bt_hci_cmd_send+0x4c>
   1718c:	0002ca32 	.word	0x0002ca32
   17190:	0002d0ac 	.word	0x0002d0ac
   17194:	0002a850 	.word	0x0002a850
   17198:	200004dc 	.word	0x200004dc

0001719c <le_ltk_request>:
{
   1719c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171a0:	b086      	sub	sp, #24
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   171a2:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   171a4:	8826      	ldrh	r6, [r4, #0]
   171a6:	fa1f f886 	uxth.w	r8, r6
{
   171aa:	af02      	add	r7, sp, #8
	conn = bt_conn_lookup_handle(handle);
   171ac:	4640      	mov	r0, r8
   171ae:	f002 f9c5 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   171b2:	4605      	mov	r5, r0
   171b4:	b9a0      	cbnz	r0, 171e0 <le_ltk_request+0x44>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   171b6:	466c      	mov	r4, sp
   171b8:	b088      	sub	sp, #32
   171ba:	aa02      	add	r2, sp, #8
   171bc:	4b2e      	ldr	r3, [pc, #184]	; (17278 <le_ltk_request+0xdc>)
   171be:	6153      	str	r3, [r2, #20]
   171c0:	4b2e      	ldr	r3, [pc, #184]	; (1727c <le_ltk_request+0xe0>)
   171c2:	482f      	ldr	r0, [pc, #188]	; (17280 <le_ltk_request+0xe4>)
   171c4:	e9c2 3806 	strd	r3, r8, [r2, #24]
   171c8:	2304      	movs	r3, #4
   171ca:	f842 3f10 	str.w	r3, [r2, #16]!
   171ce:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   171d2:	f00f fe53 	bl	26e7c <z_log_msg_static_create.constprop.0>
   171d6:	46a5      	mov	sp, r4
}
   171d8:	3710      	adds	r7, #16
   171da:	46bd      	mov	sp, r7
   171dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   171e0:	f8d4 2002 	ldr.w	r2, [r4, #2]
   171e4:	f8d4 3006 	ldr.w	r3, [r4, #6]
   171e8:	9701      	str	r7, [sp, #4]
   171ea:	8961      	ldrh	r1, [r4, #10]
   171ec:	9100      	str	r1, [sp, #0]
   171ee:	f011 fcfb 	bl	28be8 <bt_smp_request_ltk>
   171f2:	b350      	cbz	r0, 1724a <le_ltk_request+0xae>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   171f4:	2112      	movs	r1, #18
   171f6:	f242 001a 	movw	r0, #8218	; 0x201a
   171fa:	f7ff fb9b 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   171fe:	4604      	mov	r4, r0
   17200:	b998      	cbnz	r0, 1722a <le_ltk_request+0x8e>
		LOG_ERR("Out of command buffers");
   17202:	466c      	mov	r4, sp
   17204:	b088      	sub	sp, #32
   17206:	aa02      	add	r2, sp, #8
   17208:	4b1e      	ldr	r3, [pc, #120]	; (17284 <le_ltk_request+0xe8>)
   1720a:	6153      	str	r3, [r2, #20]
   1720c:	4b1e      	ldr	r3, [pc, #120]	; (17288 <le_ltk_request+0xec>)
		LOG_ERR("Out of command buffers");
   1720e:	6193      	str	r3, [r2, #24]
   17210:	2303      	movs	r3, #3
   17212:	f842 3f10 	str.w	r3, [r2, #16]!
   17216:	481a      	ldr	r0, [pc, #104]	; (17280 <le_ltk_request+0xe4>)
   17218:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1721c:	f00f fe2e 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17220:	46a5      	mov	sp, r4
	bt_conn_unref(conn);
   17222:	4628      	mov	r0, r5
   17224:	f010 f956 	bl	274d4 <bt_conn_unref>
   17228:	e7d6      	b.n	171d8 <le_ltk_request+0x3c>
   1722a:	2112      	movs	r1, #18
   1722c:	300c      	adds	r0, #12
   1722e:	f011 ff4b 	bl	290c8 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   17232:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   17234:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   17238:	2210      	movs	r2, #16
   1723a:	f00f fcd7 	bl	26bec <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1723e:	4621      	mov	r1, r4
   17240:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17244:	f7ff ff70 	bl	17128 <bt_hci_cmd_send>
   17248:	e7eb      	b.n	17222 <le_ltk_request+0x86>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1724a:	2102      	movs	r1, #2
   1724c:	f242 001b 	movw	r0, #8219	; 0x201b
   17250:	f7ff fb70 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   17254:	4604      	mov	r4, r0
   17256:	b930      	cbnz	r0, 17266 <le_ltk_request+0xca>
		LOG_ERR("Out of command buffers");
   17258:	466c      	mov	r4, sp
   1725a:	b088      	sub	sp, #32
   1725c:	aa02      	add	r2, sp, #8
   1725e:	4b09      	ldr	r3, [pc, #36]	; (17284 <le_ltk_request+0xe8>)
   17260:	6153      	str	r3, [r2, #20]
   17262:	4b0a      	ldr	r3, [pc, #40]	; (1728c <le_ltk_request+0xf0>)
   17264:	e7d3      	b.n	1720e <le_ltk_request+0x72>
   17266:	2102      	movs	r1, #2
   17268:	300c      	adds	r0, #12
   1726a:	f011 ff2d 	bl	290c8 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1726e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   17270:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   17272:	f242 001b 	movw	r0, #8219	; 0x201b
   17276:	e7e5      	b.n	17244 <le_ltk_request+0xa8>
   17278:	0002c67e 	.word	0x0002c67e
   1727c:	0002cf55 	.word	0x0002cf55
   17280:	0002a850 	.word	0x0002a850
   17284:	0002ca58 	.word	0x0002ca58
   17288:	0002cf48 	.word	0x0002cf48
   1728c:	0002cf37 	.word	0x0002cf37

00017290 <le_conn_param_req>:
{
   17290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17294:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17296:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17298:	78d9      	ldrb	r1, [r3, #3]
   1729a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1729c:	f8b3 8000 	ldrh.w	r8, [r3]
{
   172a0:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   172a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   172a6:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   172a8:	7959      	ldrb	r1, [r3, #5]
   172aa:	791a      	ldrb	r2, [r3, #4]
   172ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   172b0:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   172b2:	799a      	ldrb	r2, [r3, #6]
   172b4:	79d9      	ldrb	r1, [r3, #7]
   172b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   172ba:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   172bc:	7a1a      	ldrb	r2, [r3, #8]
   172be:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   172c0:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   172c4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   172c8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   172ca:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   172cc:	f002 f936 	bl	1953c <bt_conn_lookup_handle>
	if (!conn) {
   172d0:	4606      	mov	r6, r0
   172d2:	b9c0      	cbnz	r0, 17306 <le_conn_param_req+0x76>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   172d4:	466d      	mov	r5, sp
   172d6:	b088      	sub	sp, #32
   172d8:	466a      	mov	r2, sp
   172da:	4b21      	ldr	r3, [pc, #132]	; (17360 <le_conn_param_req+0xd0>)
   172dc:	6153      	str	r3, [r2, #20]
   172de:	4b21      	ldr	r3, [pc, #132]	; (17364 <le_conn_param_req+0xd4>)
   172e0:	4821      	ldr	r0, [pc, #132]	; (17368 <le_conn_param_req+0xd8>)
   172e2:	e9c2 3406 	strd	r3, r4, [r2, #24]
   172e6:	2304      	movs	r3, #4
   172e8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   172ec:	f842 3f10 	str.w	r3, [r2, #16]!
   172f0:	f00f fdc4 	bl	26e7c <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   172f4:	2102      	movs	r1, #2
   172f6:	46ad      	mov	sp, r5
   172f8:	4620      	mov	r0, r4
   172fa:	f00f fe63 	bl	26fc4 <le_conn_param_neg_reply>
}
   172fe:	3708      	adds	r7, #8
   17300:	46bd      	mov	sp, r7
   17302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   17306:	4639      	mov	r1, r7
   17308:	f002 faa6 	bl	19858 <le_param_req>
   1730c:	b938      	cbnz	r0, 1731e <le_conn_param_req+0x8e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1730e:	211e      	movs	r1, #30
   17310:	4620      	mov	r0, r4
   17312:	f00f fe57 	bl	26fc4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17316:	4630      	mov	r0, r6
   17318:	f010 f8dc 	bl	274d4 <bt_conn_unref>
   1731c:	e7ef      	b.n	172fe <le_conn_param_req+0x6e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1731e:	210e      	movs	r1, #14
   17320:	f242 0020 	movw	r0, #8224	; 0x2020
   17324:	f7ff fb06 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   17328:	4605      	mov	r5, r0
   1732a:	2800      	cmp	r0, #0
   1732c:	d0f3      	beq.n	17316 <le_conn_param_req+0x86>
   1732e:	210e      	movs	r1, #14
   17330:	300c      	adds	r0, #12
   17332:	f011 fec9 	bl	290c8 <net_buf_simple_add>
   17336:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   17338:	220e      	movs	r2, #14
   1733a:	2100      	movs	r1, #0
   1733c:	f00f fc61 	bl	26c02 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   17340:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   17344:	883b      	ldrh	r3, [r7, #0]
   17346:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17348:	887b      	ldrh	r3, [r7, #2]
   1734a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1734c:	88bb      	ldrh	r3, [r7, #4]
   1734e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17350:	88fb      	ldrh	r3, [r7, #6]
   17352:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   17354:	4629      	mov	r1, r5
   17356:	f242 0020 	movw	r0, #8224	; 0x2020
   1735a:	f7ff fee5 	bl	17128 <bt_hci_cmd_send>
   1735e:	e7da      	b.n	17316 <le_conn_param_req+0x86>
   17360:	0002c67e 	.word	0x0002c67e
   17364:	0002cefb 	.word	0x0002cefb
   17368:	0002a850 	.word	0x0002a850

0001736c <hci_tx_thread>:
{
   1736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   17370:	f8df 816c 	ldr.w	r8, [pc, #364]	; 174e0 <hci_tx_thread+0x174>
		BT_ASSERT(err == 0);
   17374:	f8df 916c 	ldr.w	r9, [pc, #364]	; 174e4 <hci_tx_thread+0x178>
{
   17378:	b083      	sub	sp, #12
			ev_count += bt_conn_prepare_events(&events[1]);
   1737a:	f108 0a14 	add.w	sl, r8, #20
{
   1737e:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   17380:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17384:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   17386:	f36f 3394 	bfc	r3, #14, #7
   1738a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1738e:	f002 f88b 	bl	194a8 <bt_conn_prepare_events>
   17392:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17394:	4852      	ldr	r0, [pc, #328]	; (174e0 <hci_tx_thread+0x174>)
   17396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1739a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1739e:	4629      	mov	r1, r5
   173a0:	f00d f9c0 	bl	24724 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   173a4:	b160      	cbz	r0, 173c0 <hci_tx_thread+0x54>
   173a6:	4950      	ldr	r1, [pc, #320]	; (174e8 <hci_tx_thread+0x17c>)
   173a8:	4850      	ldr	r0, [pc, #320]	; (174ec <hci_tx_thread+0x180>)
   173aa:	f640 23c8 	movw	r3, #2760	; 0xac8
   173ae:	464a      	mov	r2, r9
   173b0:	f00e fa6e 	bl	25890 <assert_print>
   173b4:	4040      	eors	r0, r0
   173b6:	f380 8811 	msr	BASEPRI, r0
   173ba:	f04f 0003 	mov.w	r0, #3
   173be:	df02      	svc	2
{
   173c0:	4e47      	ldr	r6, [pc, #284]	; (174e0 <hci_tx_thread+0x174>)
	for (; count; ev++, count--) {
   173c2:	b915      	cbnz	r5, 173ca <hci_tx_thread+0x5e>
	z_impl_k_yield();
   173c4:	f00c fe9e 	bl	24104 <z_impl_k_yield>
	while (1) {
   173c8:	e7da      	b.n	17380 <hci_tx_thread+0x14>
		switch (ev->state) {
   173ca:	68f3      	ldr	r3, [r6, #12]
   173cc:	f3c3 3386 	ubfx	r3, r3, #14, #7
   173d0:	2b02      	cmp	r3, #2
   173d2:	d969      	bls.n	174a8 <hci_tx_thread+0x13c>
   173d4:	2b04      	cmp	r3, #4
   173d6:	d171      	bne.n	174bc <hci_tx_thread+0x150>
			if (ev->tag == BT_EVENT_CMD_TX) {
   173d8:	7b33      	ldrb	r3, [r6, #12]
   173da:	2b00      	cmp	r3, #0
   173dc:	d167      	bne.n	174ae <hci_tx_thread+0x142>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   173de:	4844      	ldr	r0, [pc, #272]	; (174f0 <hci_tx_thread+0x184>)
   173e0:	2200      	movs	r2, #0
   173e2:	2300      	movs	r3, #0
   173e4:	f011 fe0f 	bl	29006 <net_buf_get>
	BT_ASSERT(buf);
   173e8:	4604      	mov	r4, r0
   173ea:	b960      	cbnz	r0, 17406 <hci_tx_thread+0x9a>
   173ec:	4941      	ldr	r1, [pc, #260]	; (174f4 <hci_tx_thread+0x188>)
   173ee:	483f      	ldr	r0, [pc, #252]	; (174ec <hci_tx_thread+0x180>)
   173f0:	f640 235a 	movw	r3, #2650	; 0xa5a
   173f4:	464a      	mov	r2, r9
   173f6:	f00e fa4b 	bl	25890 <assert_print>
   173fa:	4040      	eors	r0, r0
   173fc:	f380 8811 	msr	BASEPRI, r0
   17400:	f04f 0003 	mov.w	r0, #3
   17404:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   17406:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 174f8 <hci_tx_thread+0x18c>
	return z_impl_k_sem_take(sem, timeout);
   1740a:	483c      	ldr	r0, [pc, #240]	; (174fc <hci_tx_thread+0x190>)
   1740c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17414:	f00c fa1c 	bl	23850 <z_impl_k_sem_take>
   17418:	f8db 2140 	ldr.w	r2, [fp, #320]	; 0x140
   1741c:	b1c2      	cbz	r2, 17450 <hci_tx_thread+0xe4>
		LOG_ERR("Uncleared pending sent_cmd");
   1741e:	f8c7 d004 	str.w	sp, [r7, #4]
   17422:	b088      	sub	sp, #32
   17424:	466a      	mov	r2, sp
   17426:	4936      	ldr	r1, [pc, #216]	; (17500 <hci_tx_thread+0x194>)
   17428:	6151      	str	r1, [r2, #20]
   1742a:	4936      	ldr	r1, [pc, #216]	; (17504 <hci_tx_thread+0x198>)
   1742c:	6191      	str	r1, [r2, #24]
   1742e:	2103      	movs	r1, #3
   17430:	f842 1f10 	str.w	r1, [r2, #16]!
   17434:	4834      	ldr	r0, [pc, #208]	; (17508 <hci_tx_thread+0x19c>)
   17436:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1743a:	f00f fd1f 	bl	26e7c <z_log_msg_static_create.constprop.0>
   1743e:	f8d7 d004 	ldr.w	sp, [r7, #4]
		net_buf_unref(bt_dev.sent_cmd);
   17442:	f8db 0140 	ldr.w	r0, [fp, #320]	; 0x140
   17446:	f008 faed 	bl	1fa24 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1744a:	2200      	movs	r2, #0
   1744c:	f8cb 2140 	str.w	r2, [fp, #320]	; 0x140
	bt_dev.sent_cmd = net_buf_ref(buf);
   17450:	4620      	mov	r0, r4
   17452:	f011 fe09 	bl	29068 <net_buf_ref>
   17456:	f8cb 0140 	str.w	r0, [fp, #320]	; 0x140
	err = bt_send(buf);
   1745a:	4620      	mov	r0, r4
   1745c:	f7ff fe5c 	bl	17118 <bt_send>
	if (err) {
   17460:	b310      	cbz	r0, 174a8 <hci_tx_thread+0x13c>
		LOG_ERR("Unable to send to driver (err %d)", err);
   17462:	46eb      	mov	fp, sp
   17464:	b088      	sub	sp, #32
   17466:	466a      	mov	r2, sp
   17468:	4b28      	ldr	r3, [pc, #160]	; (1750c <hci_tx_thread+0x1a0>)
   1746a:	6153      	str	r3, [r2, #20]
   1746c:	4b25      	ldr	r3, [pc, #148]	; (17504 <hci_tx_thread+0x198>)
   1746e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17472:	2304      	movs	r3, #4
   17474:	f842 3f10 	str.w	r3, [r2, #16]!
   17478:	4823      	ldr	r0, [pc, #140]	; (17508 <hci_tx_thread+0x19c>)
   1747a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1747e:	f00f fcfd 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17482:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   17484:	481d      	ldr	r0, [pc, #116]	; (174fc <hci_tx_thread+0x190>)
   17486:	f00c f9bd 	bl	23804 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1748a:	4620      	mov	r0, r4
   1748c:	f008 fa10 	bl	1f8b0 <net_buf_id>
   17490:	4b1f      	ldr	r3, [pc, #124]	; (17510 <hci_tx_thread+0x1a4>)
   17492:	220c      	movs	r2, #12
   17494:	fb02 3000 	mla	r0, r2, r0, r3
   17498:	211f      	movs	r1, #31
   1749a:	8840      	ldrh	r0, [r0, #2]
   1749c:	4622      	mov	r2, r4
   1749e:	f7ff f847 	bl	16530 <hci_cmd_done>
		net_buf_unref(buf);
   174a2:	4620      	mov	r0, r4
   174a4:	f008 fabe 	bl	1fa24 <net_buf_unref>
	for (; count; ev++, count--) {
   174a8:	3614      	adds	r6, #20
   174aa:	3d01      	subs	r5, #1
   174ac:	e789      	b.n	173c2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   174ae:	2b01      	cmp	r3, #1
   174b0:	d1fa      	bne.n	174a8 <hci_tx_thread+0x13c>
					conn = CONTAINER_OF(ev->fifo,
   174b2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   174b4:	3838      	subs	r0, #56	; 0x38
   174b6:	f002 fbcd 	bl	19c54 <bt_conn_process_tx>
   174ba:	e7f5      	b.n	174a8 <hci_tx_thread+0x13c>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   174bc:	466c      	mov	r4, sp
   174be:	b088      	sub	sp, #32
   174c0:	466a      	mov	r2, sp
   174c2:	4914      	ldr	r1, [pc, #80]	; (17514 <hci_tx_thread+0x1a8>)
   174c4:	6151      	str	r1, [r2, #20]
   174c6:	4914      	ldr	r1, [pc, #80]	; (17518 <hci_tx_thread+0x1ac>)
   174c8:	480f      	ldr	r0, [pc, #60]	; (17508 <hci_tx_thread+0x19c>)
		switch (ev->state) {
   174ca:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   174ce:	2304      	movs	r3, #4
   174d0:	f842 3f10 	str.w	r3, [r2, #16]!
   174d4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   174d8:	f00f fcd0 	bl	26e7c <z_log_msg_static_create.constprop.0>
   174dc:	46a5      	mov	sp, r4
   174de:	e7e3      	b.n	174a8 <hci_tx_thread+0x13c>
   174e0:	20000750 	.word	0x20000750
   174e4:	0002c6f6 	.word	0x0002c6f6
   174e8:	0002c8cd 	.word	0x0002c8cd
   174ec:	0002c743 	.word	0x0002c743
   174f0:	200004dc 	.word	0x200004dc
   174f4:	0002ec40 	.word	0x0002ec40
   174f8:	20000390 	.word	0x20000390
   174fc:	200004b8 	.word	0x200004b8
   17500:	0002ca73 	.word	0x0002ca73
   17504:	0002cd8d 	.word	0x0002cd8d
   17508:	0002a850 	.word	0x0002a850
   1750c:	0002ca32 	.word	0x0002ca32
   17510:	20002f3c 	.word	0x20002f3c
   17514:	0002ca92 	.word	0x0002ca92
   17518:	0002cd96 	.word	0x0002cd96

0001751c <hci_event_prio>:
{
   1751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17520:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17522:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   17526:	4630      	mov	r0, r6
   17528:	f011 fe0d 	bl	29146 <net_buf_simple_headroom>
	state->len = buf->len;
   1752c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17530:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   17534:	4605      	mov	r5, r0
   17536:	d80c      	bhi.n	17552 <hci_event_prio+0x36>
   17538:	4a1c      	ldr	r2, [pc, #112]	; (175ac <hci_event_prio+0x90>)
   1753a:	491d      	ldr	r1, [pc, #116]	; (175b0 <hci_event_prio+0x94>)
   1753c:	481d      	ldr	r0, [pc, #116]	; (175b4 <hci_event_prio+0x98>)
   1753e:	f640 636f 	movw	r3, #3695	; 0xe6f
   17542:	f00e f9a5 	bl	25890 <assert_print>
   17546:	4040      	eors	r0, r0
   17548:	f380 8811 	msr	BASEPRI, r0
   1754c:	f04f 0003 	mov.w	r0, #3
   17550:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   17552:	4630      	mov	r0, r6
   17554:	2102      	movs	r1, #2
   17556:	f011 fdde 	bl	29116 <net_buf_simple_pull_mem>
   1755a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1755c:	7800      	ldrb	r0, [r0, #0]
   1755e:	f00f fc4e 	bl	26dfe <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17562:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17564:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17566:	d40c      	bmi.n	17582 <hci_event_prio+0x66>
   17568:	4a10      	ldr	r2, [pc, #64]	; (175ac <hci_event_prio+0x90>)
   1756a:	4913      	ldr	r1, [pc, #76]	; (175b8 <hci_event_prio+0x9c>)
   1756c:	4811      	ldr	r0, [pc, #68]	; (175b4 <hci_event_prio+0x98>)
   1756e:	f640 6373 	movw	r3, #3699	; 0xe73
   17572:	f00e f98d 	bl	25890 <assert_print>
   17576:	4040      	eors	r0, r0
   17578:	f380 8811 	msr	BASEPRI, r0
   1757c:	f04f 0003 	mov.w	r0, #3
   17580:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17582:	2305      	movs	r3, #5
   17584:	4a0d      	ldr	r2, [pc, #52]	; (175bc <hci_event_prio+0xa0>)
   17586:	7838      	ldrb	r0, [r7, #0]
   17588:	4621      	mov	r1, r4
   1758a:	f7fe fe85 	bl	16298 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1758e:	07b3      	lsls	r3, r6, #30
   17590:	d507      	bpl.n	175a2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   17592:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17594:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17598:	fa13 f585 	uxtah	r5, r3, r5
   1759c:	60e5      	str	r5, [r4, #12]
}
   1759e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   175a2:	4620      	mov	r0, r4
}
   175a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   175a8:	f008 ba3c 	b.w	1fa24 <net_buf_unref>
   175ac:	0002c6f6 	.word	0x0002c6f6
   175b0:	0002c72a 	.word	0x0002c72a
   175b4:	0002c743 	.word	0x0002c743
   175b8:	0002cab7 	.word	0x0002cab7
   175bc:	0002af90 	.word	0x0002af90

000175c0 <bt_recv>:
{
   175c0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   175c2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   175c4:	2b01      	cmp	r3, #1
{
   175c6:	af00      	add	r7, sp, #0
   175c8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   175ca:	d006      	beq.n	175da <bt_recv+0x1a>
   175cc:	2b03      	cmp	r3, #3
   175ce:	d112      	bne.n	175f6 <bt_recv+0x36>
			rx_queue_put(buf);
   175d0:	f7fe fd76 	bl	160c0 <rx_queue_put>
		return 0;
   175d4:	2000      	movs	r0, #0
}
   175d6:	46bd      	mov	sp, r7
   175d8:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   175da:	68c3      	ldr	r3, [r0, #12]
   175dc:	7818      	ldrb	r0, [r3, #0]
   175de:	f00f fc0e 	bl	26dfe <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   175e2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   175e4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   175e6:	d502      	bpl.n	175ee <bt_recv+0x2e>
			hci_event_prio(buf);
   175e8:	4620      	mov	r0, r4
   175ea:	f7ff ff97 	bl	1751c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   175ee:	07ab      	lsls	r3, r5, #30
   175f0:	d5f0      	bpl.n	175d4 <bt_recv+0x14>
			rx_queue_put(buf);
   175f2:	4620      	mov	r0, r4
   175f4:	e7ec      	b.n	175d0 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   175f6:	466d      	mov	r5, sp
   175f8:	b088      	sub	sp, #32
   175fa:	466a      	mov	r2, sp
   175fc:	4909      	ldr	r1, [pc, #36]	; (17624 <bt_recv+0x64>)
   175fe:	6151      	str	r1, [r2, #20]
   17600:	4909      	ldr	r1, [pc, #36]	; (17628 <bt_recv+0x68>)
   17602:	480a      	ldr	r0, [pc, #40]	; (1762c <bt_recv+0x6c>)
	switch (bt_buf_get_type(buf)) {
   17604:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17608:	2304      	movs	r3, #4
   1760a:	f842 3f10 	str.w	r3, [r2, #16]!
   1760e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17612:	f00f fc33 	bl	26e7c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17616:	4620      	mov	r0, r4
   17618:	46ad      	mov	sp, r5
   1761a:	f008 fa03 	bl	1fa24 <net_buf_unref>
		return -EINVAL;
   1761e:	f06f 0015 	mvn.w	r0, #21
   17622:	e7d8      	b.n	175d6 <bt_recv+0x16>
   17624:	0002cad0 	.word	0x0002cad0
   17628:	0002cfe5 	.word	0x0002cfe5
   1762c:	0002a850 	.word	0x0002a850

00017630 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17630:	4a08      	ldr	r2, [pc, #32]	; (17654 <bt_hci_driver_register+0x24>)
{
   17632:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17634:	f8d2 0164 	ldr.w	r0, [r2, #356]	; 0x164
   17638:	b930      	cbnz	r0, 17648 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1763a:	68d9      	ldr	r1, [r3, #12]
   1763c:	b139      	cbz	r1, 1764e <bt_hci_driver_register+0x1e>
   1763e:	6959      	ldr	r1, [r3, #20]
   17640:	b129      	cbz	r1, 1764e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   17642:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
	return 0;
   17646:	4770      	bx	lr
		return -EALREADY;
   17648:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1764c:	4770      	bx	lr
		return -EINVAL;
   1764e:	f06f 0015 	mvn.w	r0, #21
}
   17652:	4770      	bx	lr
   17654:	20000390 	.word	0x20000390

00017658 <bt_finalize_init>:
{
   17658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1765c:	4d48      	ldr	r5, [pc, #288]	; (17780 <bt_finalize_init+0x128>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1765e:	4849      	ldr	r0, [pc, #292]	; (17784 <bt_finalize_init+0x12c>)
   17660:	4c49      	ldr	r4, [pc, #292]	; (17788 <bt_finalize_init+0x130>)
{
   17662:	b083      	sub	sp, #12
   17664:	2104      	movs	r1, #4
   17666:	af00      	add	r7, sp, #0
   17668:	f00f fbf4 	bl	26e54 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1766c:	79ea      	ldrb	r2, [r5, #7]
   1766e:	4b47      	ldr	r3, [pc, #284]	; (1778c <bt_finalize_init+0x134>)
   17670:	4628      	mov	r0, r5
   17672:	2a01      	cmp	r2, #1
   17674:	bf88      	it	hi
   17676:	461c      	movhi	r4, r3
   17678:	46e8      	mov	r8, sp
   1767a:	f7fe f92f 	bl	158dc <bt_addr_le_str>
   1767e:	b08a      	sub	sp, #40	; 0x28
   17680:	466b      	mov	r3, sp
   17682:	4943      	ldr	r1, [pc, #268]	; (17790 <bt_finalize_init+0x138>)
   17684:	4e43      	ldr	r6, [pc, #268]	; (17794 <bt_finalize_init+0x13c>)
   17686:	6159      	str	r1, [r3, #20]
   17688:	4943      	ldr	r1, [pc, #268]	; (17798 <bt_finalize_init+0x140>)
   1768a:	6079      	str	r1, [r7, #4]
   1768c:	e9c3 6406 	strd	r6, r4, [r3, #24]
   17690:	6218      	str	r0, [r3, #32]
   17692:	f103 0210 	add.w	r2, r3, #16
   17696:	1d38      	adds	r0, r7, #4
   17698:	f103 0123 	add.w	r1, r3, #35	; 0x23
   1769c:	f103 0427 	add.w	r4, r3, #39	; 0x27
   176a0:	f810 cb01 	ldrb.w	ip, [r0], #1
   176a4:	f801 cf01 	strb.w	ip, [r1, #1]!
   176a8:	42a1      	cmp	r1, r4
   176aa:	d1f9      	bne.n	176a0 <bt_finalize_init+0x48>
   176ac:	493b      	ldr	r1, [pc, #236]	; (1779c <bt_finalize_init+0x144>)
   176ae:	6119      	str	r1, [r3, #16]
   176b0:	483b      	ldr	r0, [pc, #236]	; (177a0 <bt_finalize_init+0x148>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   176b2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 177a4 <bt_finalize_init+0x14c>
   176b6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 177a0 <bt_finalize_init+0x148>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   176ba:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   176be:	f00f fbdd 	bl	26e7c <z_log_msg_static_create.constprop.0>
   176c2:	46c5      	mov	sp, r8
	for (i = 1; i < bt_dev.id_count; i++) {
   176c4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 17780 <bt_finalize_init+0x128>
   176c8:	2401      	movs	r4, #1
   176ca:	79ea      	ldrb	r2, [r5, #7]
   176cc:	4294      	cmp	r4, r2
   176ce:	f108 0807 	add.w	r8, r8, #7
   176d2:	db3d      	blt.n	17750 <bt_finalize_init+0xf8>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   176d4:	f895 8070 	ldrb.w	r8, [r5, #112]	; 0x70
   176d8:	4640      	mov	r0, r8
   176da:	f7fe fc25 	bl	15f28 <ver_str>
   176de:	46ea      	mov	sl, sp
   176e0:	b08c      	sub	sp, #48	; 0x30
   176e2:	f8b5 2072 	ldrh.w	r2, [r5, #114]	; 0x72
   176e6:	f8b5 3076 	ldrh.w	r3, [r5, #118]	; 0x76
   176ea:	466c      	mov	r4, sp
   176ec:	492e      	ldr	r1, [pc, #184]	; (177a8 <bt_finalize_init+0x150>)
   176ee:	e9c4 0807 	strd	r0, r8, [r4, #28]
   176f2:	46a0      	mov	r8, r4
   176f4:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
   176f8:	f240 3901 	movw	r9, #769	; 0x301
   176fc:	4b2b      	ldr	r3, [pc, #172]	; (177ac <bt_finalize_init+0x154>)
   176fe:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
   17702:	e9c4 1605 	strd	r1, r6, [r4, #20]
   17706:	f848 3f10 	str.w	r3, [r8, #16]!
   1770a:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   1770e:	4642      	mov	r2, r8
   17710:	4823      	ldr	r0, [pc, #140]	; (177a0 <bt_finalize_init+0x148>)
   17712:	f00f fbb3 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17716:	46d5      	mov	sp, sl
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   17718:	f895 a071 	ldrb.w	sl, [r5, #113]	; 0x71
   1771c:	4650      	mov	r0, sl
   1771e:	f7fe fc03 	bl	15f28 <ver_str>
   17722:	f8b5 3074 	ldrh.w	r3, [r5, #116]	; 0x74
   17726:	46a5      	mov	sp, r4
   17728:	4a21      	ldr	r2, [pc, #132]	; (177b0 <bt_finalize_init+0x158>)
   1772a:	6263      	str	r3, [r4, #36]	; 0x24
   1772c:	4b21      	ldr	r3, [pc, #132]	; (177b4 <bt_finalize_init+0x15c>)
   1772e:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
   17732:	e9c4 2605 	strd	r2, r6, [r4, #20]
   17736:	e9c4 0a07 	strd	r0, sl, [r4, #28]
   1773a:	6123      	str	r3, [r4, #16]
   1773c:	4818      	ldr	r0, [pc, #96]	; (177a0 <bt_finalize_init+0x148>)
   1773e:	4642      	mov	r2, r8
   17740:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   17744:	f00f fb9a 	bl	26e7c <z_log_msg_static_create.constprop.0>
}
   17748:	370c      	adds	r7, #12
   1774a:	46bd      	mov	sp, r7
   1774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   17750:	4640      	mov	r0, r8
   17752:	f7fe f8c3 	bl	158dc <bt_addr_le_str>
   17756:	46eb      	mov	fp, sp
   17758:	b08a      	sub	sp, #40	; 0x28
   1775a:	466a      	mov	r2, sp
   1775c:	4b16      	ldr	r3, [pc, #88]	; (177b8 <bt_finalize_init+0x160>)
   1775e:	f240 4102 	movw	r1, #1026	; 0x402
   17762:	e9c2 4007 	strd	r4, r0, [r2, #28]
   17766:	8491      	strh	r1, [r2, #36]	; 0x24
   17768:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1776c:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   17770:	f842 9f10 	str.w	r9, [r2, #16]!
   17774:	4650      	mov	r0, sl
   17776:	f00f fb81 	bl	26e7c <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   1777a:	3401      	adds	r4, #1
   1777c:	46dd      	mov	sp, fp
   1777e:	e7a4      	b.n	176ca <bt_finalize_init+0x72>
   17780:	20000390 	.word	0x20000390
   17784:	20000464 	.word	0x20000464
   17788:	0002bb35 	.word	0x0002bb35
   1778c:	0002cae8 	.word	0x0002cae8
   17790:	0002caec 	.word	0x0002caec
   17794:	0002cea2 	.word	0x0002cea2
   17798:	04020301 	.word	0x04020301
   1779c:	02000005 	.word	0x02000005
   177a0:	0002a850 	.word	0x0002a850
   177a4:	01000005 	.word	0x01000005
   177a8:	0002cb14 	.word	0x0002cb14
   177ac:	01000007 	.word	0x01000007
   177b0:	0002cb56 	.word	0x0002cb56
   177b4:	01000006 	.word	0x01000006
   177b8:	0002caff 	.word	0x0002caff

000177bc <bt_init.part.0>:
static int bt_init(void)
   177bc:	b598      	push	{r3, r4, r7, lr}
		if (!bt_dev.id_count) {
   177be:	480f      	ldr	r0, [pc, #60]	; (177fc <bt_init.part.0+0x40>)
   177c0:	79c3      	ldrb	r3, [r0, #7]
static int bt_init(void)
   177c2:	af00      	add	r7, sp, #0
		if (!bt_dev.id_count) {
   177c4:	b993      	cbnz	r3, 177ec <bt_init.part.0+0x30>
			LOG_INF("No ID address. App must call settings_load()");
   177c6:	466c      	mov	r4, sp
   177c8:	b088      	sub	sp, #32
   177ca:	466a      	mov	r2, sp
   177cc:	4b0c      	ldr	r3, [pc, #48]	; (17800 <bt_init.part.0+0x44>)
   177ce:	6153      	str	r3, [r2, #20]
   177d0:	4b0c      	ldr	r3, [pc, #48]	; (17804 <bt_init.part.0+0x48>)
   177d2:	6193      	str	r3, [r2, #24]
   177d4:	2303      	movs	r3, #3
   177d6:	f842 3f10 	str.w	r3, [r2, #16]!
   177da:	480b      	ldr	r0, [pc, #44]	; (17808 <bt_init.part.0+0x4c>)
   177dc:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   177e0:	f00f fb4c 	bl	26e7c <z_log_msg_static_create.constprop.0>
   177e4:	46a5      	mov	sp, r4
}
   177e6:	2000      	movs	r0, #0
   177e8:	46bd      	mov	sp, r7
   177ea:	bd98      	pop	{r3, r4, r7, pc}
   177ec:	2108      	movs	r1, #8
   177ee:	30d4      	adds	r0, #212	; 0xd4
   177f0:	f00f fb30 	bl	26e54 <atomic_or>
	bt_finalize_init();
   177f4:	f7ff ff30 	bl	17658 <bt_finalize_init>
	return 0;
   177f8:	e7f5      	b.n	177e6 <bt_init.part.0+0x2a>
   177fa:	bf00      	nop
   177fc:	20000390 	.word	0x20000390
   17800:	0002cb81 	.word	0x0002cb81
   17804:	0002d0f2 	.word	0x0002d0f2
   17808:	0002a850 	.word	0x0002a850

0001780c <init_work>:
{
   1780c:	b510      	push	{r4, lr}
	err = bt_init();
   1780e:	f7f9 fc97 	bl	11140 <bt_init>
	if (ready_cb) {
   17812:	4b03      	ldr	r3, [pc, #12]	; (17820 <init_work+0x14>)
   17814:	681b      	ldr	r3, [r3, #0]
   17816:	b113      	cbz	r3, 1781e <init_work+0x12>
}
   17818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   1781c:	4718      	bx	r3
}
   1781e:	bd10      	pop	{r4, pc}
   17820:	20002f54 	.word	0x20002f54

00017824 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   17824:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   17826:	4d42      	ldr	r5, [pc, #264]	; (17930 <bt_enable+0x10c>)
{
   17828:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.drv) {
   1782a:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
{
   1782e:	af08      	add	r7, sp, #32
   17830:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   17832:	b9ab      	cbnz	r3, 17860 <bt_enable+0x3c>
		LOG_ERR("No HCI driver registered");
   17834:	466c      	mov	r4, sp
   17836:	4622      	mov	r2, r4
   17838:	b088      	sub	sp, #32
   1783a:	4b3e      	ldr	r3, [pc, #248]	; (17934 <bt_enable+0x110>)
   1783c:	6163      	str	r3, [r4, #20]
   1783e:	4b3e      	ldr	r3, [pc, #248]	; (17938 <bt_enable+0x114>)
   17840:	61a3      	str	r3, [r4, #24]
   17842:	2303      	movs	r3, #3
   17844:	f842 3f10 	str.w	r3, [r2, #16]!
   17848:	483c      	ldr	r0, [pc, #240]	; (1793c <bt_enable+0x118>)
   1784a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1784e:	f00f fb15 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17852:	46a5      	mov	sp, r4
		return -ENODEV;
   17854:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   17858:	4620      	mov	r0, r4
   1785a:	3704      	adds	r7, #4
   1785c:	46bd      	mov	sp, r7
   1785e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17860:	f06f 0102 	mvn.w	r1, #2
   17864:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   17868:	f00f fb0b 	bl	26e82 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1786c:	2101      	movs	r1, #1
   1786e:	f00f faf1 	bl	26e54 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17872:	07c3      	lsls	r3, r0, #31
   17874:	d458      	bmi.n	17928 <bt_enable+0x104>
		err = bt_settings_init();
   17876:	f7fe fa25 	bl	15cc4 <bt_settings_init>
		if (err) {
   1787a:	4604      	mov	r4, r0
   1787c:	2800      	cmp	r0, #0
   1787e:	d1eb      	bne.n	17858 <bt_enable+0x34>
	ready_cb = cb;
   17880:	4b2f      	ldr	r3, [pc, #188]	; (17940 <bt_enable+0x11c>)
   17882:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17884:	2201      	movs	r2, #1
   17886:	4611      	mov	r1, r2
   17888:	f505 7094 	add.w	r0, r5, #296	; 0x128
   1788c:	f012 f9d1 	bl	29c32 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   17890:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
   17894:	f012 f9a8 	bl	29be8 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17898:	2200      	movs	r2, #0
   1789a:	2300      	movs	r3, #0
   1789c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   178a0:	f06f 0308 	mvn.w	r3, #8
   178a4:	e9cd 4302 	strd	r4, r3, [sp, #8]
   178a8:	e9cd 4400 	strd	r4, r4, [sp]
   178ac:	4b25      	ldr	r3, [pc, #148]	; (17944 <bt_enable+0x120>)
   178ae:	4926      	ldr	r1, [pc, #152]	; (17948 <bt_enable+0x124>)
   178b0:	9404      	str	r4, [sp, #16]
   178b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   178b6:	4825      	ldr	r0, [pc, #148]	; (1794c <bt_enable+0x128>)
   178b8:	f00b fe16 	bl	234e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   178bc:	4924      	ldr	r1, [pc, #144]	; (17950 <bt_enable+0x12c>)
   178be:	4823      	ldr	r0, [pc, #140]	; (1794c <bt_enable+0x128>)
   178c0:	f012 f903 	bl	29aca <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   178c4:	4823      	ldr	r0, [pc, #140]	; (17954 <bt_enable+0x130>)
   178c6:	f012 fa75 	bl	29db4 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   178ca:	4923      	ldr	r1, [pc, #140]	; (17958 <bt_enable+0x134>)
   178cc:	4821      	ldr	r0, [pc, #132]	; (17954 <bt_enable+0x130>)
   178ce:	9400      	str	r4, [sp, #0]
   178d0:	f06f 0307 	mvn.w	r3, #7
   178d4:	f640 0298 	movw	r2, #2200	; 0x898
   178d8:	f00c f938 	bl	23b4c <k_work_queue_start>
   178dc:	491f      	ldr	r1, [pc, #124]	; (1795c <bt_enable+0x138>)
   178de:	481d      	ldr	r0, [pc, #116]	; (17954 <bt_enable+0x130>)
   178e0:	f012 f8f3 	bl	29aca <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   178e4:	f8d5 3164 	ldr.w	r3, [r5, #356]	; 0x164
   178e8:	68db      	ldr	r3, [r3, #12]
   178ea:	4798      	blx	r3
	if (err) {
   178ec:	4604      	mov	r4, r0
   178ee:	b188      	cbz	r0, 17914 <bt_enable+0xf0>
		LOG_ERR("HCI driver open failed (%d)", err);
   178f0:	466d      	mov	r5, sp
   178f2:	462a      	mov	r2, r5
   178f4:	b088      	sub	sp, #32
   178f6:	4b1a      	ldr	r3, [pc, #104]	; (17960 <bt_enable+0x13c>)
   178f8:	616b      	str	r3, [r5, #20]
   178fa:	4b0f      	ldr	r3, [pc, #60]	; (17938 <bt_enable+0x114>)
   178fc:	e9c5 3006 	strd	r3, r0, [r5, #24]
   17900:	2304      	movs	r3, #4
   17902:	f842 3f10 	str.w	r3, [r2, #16]!
   17906:	480d      	ldr	r0, [pc, #52]	; (1793c <bt_enable+0x118>)
   17908:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1790c:	f00f fab6 	bl	26e7c <z_log_msg_static_create.constprop.0>
   17910:	46ad      	mov	sp, r5
		return err;
   17912:	e7a1      	b.n	17858 <bt_enable+0x34>
	if (!cb) {
   17914:	b91e      	cbnz	r6, 1791e <bt_enable+0xfa>
		return bt_init();
   17916:	f7f9 fc13 	bl	11140 <bt_init>
   1791a:	4604      	mov	r4, r0
   1791c:	e79c      	b.n	17858 <bt_enable+0x34>
	k_work_submit(&bt_dev.init);
   1791e:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   17922:	f00c f90d 	bl	23b40 <k_work_submit>
	return 0;
   17926:	e797      	b.n	17858 <bt_enable+0x34>
		return -EALREADY;
   17928:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1792c:	e794      	b.n	17858 <bt_enable+0x34>
   1792e:	bf00      	nop
   17930:	20000390 	.word	0x20000390
   17934:	0002cced 	.word	0x0002cced
   17938:	0002cda5 	.word	0x0002cda5
   1793c:	0002a850 	.word	0x0002a850
   17940:	20002f54 	.word	0x20002f54
   17944:	0001736d 	.word	0x0001736d
   17948:	20004280 	.word	0x20004280
   1794c:	20001f00 	.word	0x20001f00
   17950:	0002cd0a 	.word	0x0002cd0a
   17954:	20001f80 	.word	0x20001f80
   17958:	200048c0 	.word	0x200048c0
   1795c:	0002cd10 	.word	0x0002cd10
   17960:	0002cd16 	.word	0x0002cd16

00017964 <bt_is_ready>:
   17964:	4b04      	ldr	r3, [pc, #16]	; (17978 <bt_is_ready+0x14>)
   17966:	f3bf 8f5b 	dmb	ish
   1796a:	6818      	ldr	r0, [r3, #0]
   1796c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   17970:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17974:	4770      	bx	lr
   17976:	bf00      	nop
   17978:	20000464 	.word	0x20000464

0001797c <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   1797c:	b5b0      	push	{r4, r5, r7, lr}
   1797e:	af00      	add	r7, sp, #0
   17980:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   17982:	f00f f8f3 	bl	26b6c <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   17986:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
   17988:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   1798a:	d828      	bhi.n	179de <bt_set_name+0x62>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   1798c:	4815      	ldr	r0, [pc, #84]	; (179e4 <bt_set_name+0x68>)
   1798e:	4629      	mov	r1, r5
   17990:	f00f f8fc 	bl	26b8c <strcmp>
   17994:	b300      	cbz	r0, 179d8 <bt_set_name+0x5c>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   17996:	4622      	mov	r2, r4
   17998:	4629      	mov	r1, r5
   1799a:	4812      	ldr	r0, [pc, #72]	; (179e4 <bt_set_name+0x68>)
   1799c:	f00f f8d2 	bl	26b44 <strncpy>
	bt_dev.name[len] = '\0';
   179a0:	4911      	ldr	r1, [pc, #68]	; (179e8 <bt_set_name+0x6c>)

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = settings_save_one("bt/name", bt_dev.name, len);
   179a2:	4812      	ldr	r0, [pc, #72]	; (179ec <bt_set_name+0x70>)
	bt_dev.name[len] = '\0';
   179a4:	190b      	adds	r3, r1, r4
   179a6:	2200      	movs	r2, #0
   179a8:	f883 21aa 	strb.w	r2, [r3, #426]	; 0x1aa
		err = settings_save_one("bt/name", bt_dev.name, len);
   179ac:	f501 71d5 	add.w	r1, r1, #426	; 0x1aa
   179b0:	4622      	mov	r2, r4
   179b2:	f7fc fda9 	bl	14508 <settings_save_one>
		if (err) {
   179b6:	b178      	cbz	r0, 179d8 <bt_set_name+0x5c>
			LOG_WRN("Unable to store name");
   179b8:	466c      	mov	r4, sp
   179ba:	b088      	sub	sp, #32
   179bc:	466a      	mov	r2, sp
   179be:	4b0c      	ldr	r3, [pc, #48]	; (179f0 <bt_set_name+0x74>)
   179c0:	6153      	str	r3, [r2, #20]
   179c2:	4b0c      	ldr	r3, [pc, #48]	; (179f4 <bt_set_name+0x78>)
   179c4:	6193      	str	r3, [r2, #24]
   179c6:	2303      	movs	r3, #3
   179c8:	f842 3f10 	str.w	r3, [r2, #16]!
   179cc:	480a      	ldr	r0, [pc, #40]	; (179f8 <bt_set_name+0x7c>)
   179ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   179d2:	f00f fa53 	bl	26e7c <z_log_msg_static_create.constprop.0>
   179d6:	46a5      	mov	sp, r4
		return 0;
   179d8:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   179da:	46bd      	mov	sp, r7
   179dc:	bdb0      	pop	{r4, r5, r7, pc}
		return -ENOMEM;
   179de:	f06f 000b 	mvn.w	r0, #11
   179e2:	e7fa      	b.n	179da <bt_set_name+0x5e>
   179e4:	2000053a 	.word	0x2000053a
   179e8:	20000390 	.word	0x20000390
   179ec:	0002cd36 	.word	0x0002cd36
   179f0:	0002cd3e 	.word	0x0002cd3e
   179f4:	0002cd81 	.word	0x0002cd81
   179f8:	0002a850 	.word	0x0002a850

000179fc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   179fc:	4800      	ldr	r0, [pc, #0]	; (17a00 <bt_get_name+0x4>)
   179fe:	4770      	bx	lr
   17a00:	2000053a 	.word	0x2000053a

00017a04 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17a06:	4f0a      	ldr	r7, [pc, #40]	; (17a30 <id_find+0x2c>)
{
   17a08:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17a0a:	2500      	movs	r5, #0
   17a0c:	79fb      	ldrb	r3, [r7, #7]
   17a0e:	b2ec      	uxtb	r4, r5
   17a10:	42a3      	cmp	r3, r4
   17a12:	d802      	bhi.n	17a1a <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17a14:	f06f 0001 	mvn.w	r0, #1
   17a18:	e009      	b.n	17a2e <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   17a1a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   17a1e:	4439      	add	r1, r7
   17a20:	4630      	mov	r0, r6
   17a22:	f00f faf6 	bl	27012 <bt_addr_le_eq>
   17a26:	3501      	adds	r5, #1
   17a28:	2800      	cmp	r0, #0
   17a2a:	d0ef      	beq.n	17a0c <id_find+0x8>
   17a2c:	4620      	mov	r0, r4
}
   17a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a30:	20000390 	.word	0x20000390

00017a34 <le_rpa_timeout_submit>:
{
   17a34:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   17a36:	4d0d      	ldr	r5, [pc, #52]	; (17a6c <le_rpa_timeout_submit+0x38>)
   17a38:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   17a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17a40:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   17a42:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   17a46:	f240 30e7 	movw	r0, #999	; 0x3e7
   17a4a:	2100      	movs	r1, #0
   17a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17a50:	2300      	movs	r3, #0
   17a52:	fbe4 0106 	umlal	r0, r1, r4, r6
   17a56:	f7e8 fb43 	bl	e0 <__aeabi_uldivmod>
   17a5a:	4602      	mov	r2, r0
   17a5c:	460b      	mov	r3, r1
   17a5e:	f505 70bc 	add.w	r0, r5, #376	; 0x178
}
   17a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   17a66:	f00c b8d3 	b.w	23c10 <k_work_schedule>
   17a6a:	bf00      	nop
   17a6c:	20000390 	.word	0x20000390

00017a70 <le_rpa_invalidate>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a70:	4b08      	ldr	r3, [pc, #32]	; (17a94 <le_rpa_invalidate+0x24>)
   17a72:	f3bf 8f5b 	dmb	ish
   17a76:	e853 1f00 	ldrex	r1, [r3]
   17a7a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   17a7e:	e843 1200 	strex	r2, r1, [r3]
   17a82:	2a00      	cmp	r2, #0
   17a84:	d1f7      	bne.n	17a76 <le_rpa_invalidate+0x6>
   17a86:	f3bf 8f5b 	dmb	ish
		bt_le_ext_adv_foreach(adv_rpa_invalidate, NULL);
   17a8a:	4803      	ldr	r0, [pc, #12]	; (17a98 <le_rpa_invalidate+0x28>)
   17a8c:	2100      	movs	r1, #0
   17a8e:	f000 be6d 	b.w	1876c <bt_le_ext_adv_foreach>
   17a92:	bf00      	nop
   17a94:	20000464 	.word	0x20000464
   17a98:	0002717b 	.word	0x0002717b

00017a9c <hci_id_add>:
{
   17a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17aa0:	4688      	mov	r8, r1
   17aa2:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   17aa4:	4605      	mov	r5, r0
   17aa6:	bb08      	cbnz	r0, 17aec <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   17aa8:	2127      	movs	r1, #39	; 0x27
   17aaa:	f242 0027 	movw	r0, #8231	; 0x2027
   17aae:	f7fe ff41 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   17ab2:	4604      	mov	r4, r0
   17ab4:	b1f0      	cbz	r0, 17af4 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   17ab6:	2127      	movs	r1, #39	; 0x27
   17ab8:	300c      	adds	r0, #12
   17aba:	f011 fb05 	bl	290c8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17abe:	4641      	mov	r1, r8
   17ac0:	4606      	mov	r6, r0
   17ac2:	f00f faae 	bl	27022 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   17ac6:	4639      	mov	r1, r7
   17ac8:	2210      	movs	r2, #16
   17aca:	1df0      	adds	r0, r6, #7
   17acc:	f00f f88e 	bl	26bec <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   17ad0:	490a      	ldr	r1, [pc, #40]	; (17afc <hci_id_add+0x60>)
   17ad2:	2210      	movs	r2, #16
   17ad4:	f106 0017 	add.w	r0, r6, #23
   17ad8:	f00f f888 	bl	26bec <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17adc:	462a      	mov	r2, r5
   17ade:	4621      	mov	r1, r4
   17ae0:	f242 0027 	movw	r0, #8231	; 0x2027
}
   17ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17ae8:	f7fe bf5e 	b.w	169a8 <bt_hci_cmd_send_sync>
		return -EINVAL;
   17aec:	f06f 0015 	mvn.w	r0, #21
}
   17af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   17af4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17af8:	e7fa      	b.n	17af0 <hci_id_add+0x54>
   17afa:	bf00      	nop
   17afc:	200004f8 	.word	0x200004f8

00017b00 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   17b00:	b5f0      	push	{r4, r5, r6, r7, lr}
   17b02:	4604      	mov	r4, r0
   17b04:	b085      	sub	sp, #20
   17b06:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17b08:	460d      	mov	r5, r1
   17b0a:	b351      	cbz	r1, 17b62 <id_create+0x62>
   17b0c:	492a      	ldr	r1, [pc, #168]	; (17bb8 <id_create+0xb8>)
   17b0e:	4628      	mov	r0, r5
   17b10:	f00f fa7f 	bl	27012 <bt_addr_le_eq>
   17b14:	bb28      	cbnz	r0, 17b62 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17b16:	4b29      	ldr	r3, [pc, #164]	; (17bbc <id_create+0xbc>)
   17b18:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   17b1c:	4629      	mov	r1, r5
   17b1e:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17b20:	f00f fa7f 	bl	27022 <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   17b24:	2300      	movs	r3, #0
   17b26:	e9cd 3300 	strd	r3, r3, [sp]
   17b2a:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   17b2e:	2510      	movs	r5, #16
   17b30:	f44f 73b4 	mov.w	r3, #360	; 0x168
   17b34:	fb15 3404 	smlabb	r4, r5, r4, r3
   17b38:	4b20      	ldr	r3, [pc, #128]	; (17bbc <id_create+0xbc>)
   17b3a:	441c      	add	r4, r3
		if (irk && memcmp(irk, zero_irk, 16)) {
   17b3c:	b33e      	cbz	r6, 17b8e <id_create+0x8e>
   17b3e:	462a      	mov	r2, r5
   17b40:	4669      	mov	r1, sp
   17b42:	4630      	mov	r0, r6
   17b44:	f00f f842 	bl	26bcc <memcmp>
   17b48:	b348      	cbz	r0, 17b9e <id_create+0x9e>
			memcpy(&bt_dev.irk[id], irk, 16);
   17b4a:	462a      	mov	r2, r5
   17b4c:	4631      	mov	r1, r6
   17b4e:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   17b50:	f00f f84c 	bl	26bec <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17b54:	481a      	ldr	r0, [pc, #104]	; (17bc0 <id_create+0xc0>)
   17b56:	f00f fa67 	bl	27028 <atomic_get>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   17b5a:	0743      	lsls	r3, r0, #29
   17b5c:	d429      	bmi.n	17bb2 <id_create+0xb2>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   17b5e:	2000      	movs	r0, #0
   17b60:	e01b      	b.n	17b9a <id_create+0x9a>
			err = bt_addr_le_create_static(&new_addr);
   17b62:	4668      	mov	r0, sp
   17b64:	f00f f92f 	bl	26dc6 <bt_addr_le_create_static>
			if (err) {
   17b68:	b9b8      	cbnz	r0, 17b9a <id_create+0x9a>
		} while (id_find(&new_addr) >= 0);
   17b6a:	4668      	mov	r0, sp
   17b6c:	f7ff ff4a 	bl	17a04 <id_find>
   17b70:	2800      	cmp	r0, #0
   17b72:	daf6      	bge.n	17b62 <id_create+0x62>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17b74:	4b11      	ldr	r3, [pc, #68]	; (17bbc <id_create+0xbc>)
   17b76:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   17b7a:	441f      	add	r7, r3
   17b7c:	4669      	mov	r1, sp
   17b7e:	4638      	mov	r0, r7
   17b80:	f00f fa4f 	bl	27022 <bt_addr_le_copy>
		if (addr) {
   17b84:	2d00      	cmp	r5, #0
   17b86:	d0cd      	beq.n	17b24 <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17b88:	4639      	mov	r1, r7
   17b8a:	4628      	mov	r0, r5
   17b8c:	e7c8      	b.n	17b20 <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   17b8e:	4629      	mov	r1, r5
   17b90:	4620      	mov	r0, r4
   17b92:	f00a f9af 	bl	21ef4 <bt_rand>
			if (err) {
   17b96:	2800      	cmp	r0, #0
   17b98:	d0dc      	beq.n	17b54 <id_create+0x54>
}
   17b9a:	b005      	add	sp, #20
   17b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   17b9e:	4629      	mov	r1, r5
   17ba0:	4620      	mov	r0, r4
   17ba2:	f00a f9a7 	bl	21ef4 <bt_rand>
			if (err) {
   17ba6:	2800      	cmp	r0, #0
   17ba8:	d1f7      	bne.n	17b9a <id_create+0x9a>
				memcpy(irk, &bt_dev.irk[id], 16);
   17baa:	462a      	mov	r2, r5
   17bac:	4621      	mov	r1, r4
   17bae:	4630      	mov	r0, r6
   17bb0:	e7ce      	b.n	17b50 <id_create+0x50>
		bt_settings_save_id();
   17bb2:	f7fe f823 	bl	15bfc <bt_settings_save_id>
   17bb6:	e7d2      	b.n	17b5e <id_create+0x5e>
   17bb8:	0002c330 	.word	0x0002c330
   17bbc:	20000390 	.word	0x20000390
   17bc0:	20000464 	.word	0x20000464

00017bc4 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
   17bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17bc8:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
   17bca:	b083      	sub	sp, #12
   17bcc:	4604      	mov	r4, r0
   17bce:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17bd0:	2206      	movs	r2, #6
   17bd2:	4608      	mov	r0, r1
   17bd4:	f001 ff4e 	bl	19a74 <bt_conn_lookup_state_le>
	if (conn) {
   17bd8:	4606      	mov	r6, r0
   17bda:	b178      	cbz	r0, 17bfc <bt_id_add.part.0+0x38>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17bdc:	485a      	ldr	r0, [pc, #360]	; (17d48 <bt_id_add.part.0+0x184>)
   17bde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17be2:	f00f fa65 	bl	270b0 <atomic_or.isra.0>
	keys->state |= flag;
   17be6:	7a23      	ldrb	r3, [r4, #8]
   17be8:	f043 0301 	orr.w	r3, r3, #1
   17bec:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17bee:	4630      	mov	r0, r6
   17bf0:	f00f fc70 	bl	274d4 <bt_conn_unref>
}
   17bf4:	370c      	adds	r7, #12
   17bf6:	46bd      	mov	sp, r7
   17bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (bt_dev.le.rl_entries) {
   17bfc:	4d53      	ldr	r5, [pc, #332]	; (17d4c <bt_id_add.part.0+0x188>)
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17bfe:	4601      	mov	r1, r0
   17c00:	4853      	ldr	r0, [pc, #332]	; (17d50 <bt_id_add.part.0+0x18c>)
   17c02:	f000 fdb3 	bl	1876c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17c06:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17c0a:	b1a3      	cbz	r3, 17c36 <bt_id_add.part.0+0x72>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17c0c:	4630      	mov	r0, r6
   17c0e:	f00f fa37 	bl	27080 <addr_res_enable>
		if (err) {
   17c12:	b180      	cbz	r0, 17c36 <bt_id_add.part.0+0x72>
			LOG_WRN("Failed to disable address resolution");
   17c14:	466c      	mov	r4, sp
   17c16:	b088      	sub	sp, #32
   17c18:	466a      	mov	r2, sp
   17c1a:	4b4e      	ldr	r3, [pc, #312]	; (17d54 <bt_id_add.part.0+0x190>)
   17c1c:	6153      	str	r3, [r2, #20]
   17c1e:	4b4e      	ldr	r3, [pc, #312]	; (17d58 <bt_id_add.part.0+0x194>)
		LOG_WRN("Set privacy mode command is not supported");
   17c20:	6193      	str	r3, [r2, #24]
   17c22:	2303      	movs	r3, #3
   17c24:	f842 3f10 	str.w	r3, [r2, #16]!
   17c28:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Failed to set privacy mode");
   17c2c:	484b      	ldr	r0, [pc, #300]	; (17d5c <bt_id_add.part.0+0x198>)
   17c2e:	f00f fa24 	bl	2707a <z_log_msg_static_create.constprop.0>
   17c32:	46a5      	mov	sp, r4
		goto done;
   17c34:	e02c      	b.n	17c90 <bt_id_add.part.0+0xcc>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17c36:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
   17c3a:	f895 3120 	ldrb.w	r3, [r5, #288]	; 0x120
   17c3e:	429a      	cmp	r2, r3
   17c40:	d138      	bne.n	17cb4 <bt_id_add.part.0+0xf0>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   17c42:	466e      	mov	r6, sp
   17c44:	b088      	sub	sp, #32
   17c46:	466a      	mov	r2, sp
   17c48:	4b45      	ldr	r3, [pc, #276]	; (17d60 <bt_id_add.part.0+0x19c>)
   17c4a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 17d58 <bt_id_add.part.0+0x194>
   17c4e:	6153      	str	r3, [r2, #20]
   17c50:	f04f 0803 	mov.w	r8, #3
   17c54:	f8c2 9018 	str.w	r9, [r2, #24]
   17c58:	4840      	ldr	r0, [pc, #256]	; (17d5c <bt_id_add.part.0+0x198>)
   17c5a:	f842 8f10 	str.w	r8, [r2, #16]!
   17c5e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c62:	f00f fa0a 	bl	2707a <z_log_msg_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   17c66:	2200      	movs	r2, #0
   17c68:	46b5      	mov	sp, r6
   17c6a:	4611      	mov	r1, r2
   17c6c:	f242 0029 	movw	r0, #8233	; 0x2029
   17c70:	f7fe fe9a 	bl	169a8 <bt_hci_cmd_send_sync>
		if (err) {
   17c74:	b1a0      	cbz	r0, 17ca0 <bt_id_add.part.0+0xdc>
			LOG_ERR("Failed to clear resolution list");
   17c76:	b088      	sub	sp, #32
   17c78:	466a      	mov	r2, sp
   17c7a:	4b3a      	ldr	r3, [pc, #232]	; (17d64 <bt_id_add.part.0+0x1a0>)
   17c7c:	4837      	ldr	r0, [pc, #220]	; (17d5c <bt_id_add.part.0+0x198>)
   17c7e:	e9c2 3905 	strd	r3, r9, [r2, #20]
   17c82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17c86:	f842 8f10 	str.w	r8, [r2, #16]!
   17c8a:	f00f f9f6 	bl	2707a <z_log_msg_static_create.constprop.0>
   17c8e:	46b5      	mov	sp, r6
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17c90:	2001      	movs	r0, #1
   17c92:	f00f f9f5 	bl	27080 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17c96:	4834      	ldr	r0, [pc, #208]	; (17d68 <bt_id_add.part.0+0x1a4>)
   17c98:	2100      	movs	r1, #0
   17c9a:	f000 fd67 	bl	1876c <bt_le_ext_adv_foreach>
   17c9e:	e7a9      	b.n	17bf4 <bt_id_add.part.0+0x30>
		bt_dev.le.rl_entries++;
   17ca0:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17ca4:	3301      	adds	r3, #1
   17ca6:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   17caa:	7a23      	ldrb	r3, [r4, #8]
   17cac:	f043 0304 	orr.w	r3, r3, #4
   17cb0:	7223      	strb	r3, [r4, #8]
		goto done;
   17cb2:	e7ed      	b.n	17c90 <bt_id_add.part.0+0xcc>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   17cb4:	4622      	mov	r2, r4
   17cb6:	f104 0801 	add.w	r8, r4, #1
   17cba:	f812 0b2a 	ldrb.w	r0, [r2], #42
   17cbe:	4641      	mov	r1, r8
   17cc0:	f7ff feec 	bl	17a9c <hci_id_add>
	if (err) {
   17cc4:	4606      	mov	r6, r0
   17cc6:	b160      	cbz	r0, 17ce2 <bt_id_add.part.0+0x11e>
		LOG_ERR("Failed to add IRK to controller");
   17cc8:	466c      	mov	r4, sp
   17cca:	b088      	sub	sp, #32
   17ccc:	466a      	mov	r2, sp
   17cce:	4b27      	ldr	r3, [pc, #156]	; (17d6c <bt_id_add.part.0+0x1a8>)
		LOG_ERR("Failed to set privacy mode");
   17cd0:	6153      	str	r3, [r2, #20]
   17cd2:	4b21      	ldr	r3, [pc, #132]	; (17d58 <bt_id_add.part.0+0x194>)
   17cd4:	6193      	str	r3, [r2, #24]
   17cd6:	2303      	movs	r3, #3
   17cd8:	f842 3f10 	str.w	r3, [r2, #16]!
   17cdc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ce0:	e7a4      	b.n	17c2c <bt_id_add.part.0+0x68>
	bt_dev.le.rl_entries++;
   17ce2:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17ce6:	3301      	adds	r3, #1
   17ce8:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state |= BT_KEYS_ID_ADDED;
   17cec:	7a23      	ldrb	r3, [r4, #8]
   17cee:	f043 0304 	orr.w	r3, r3, #4
   17cf2:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17cf4:	f895 30a7 	ldrb.w	r3, [r5, #167]	; 0xa7
   17cf8:	075b      	lsls	r3, r3, #29
   17cfa:	d406      	bmi.n	17d0a <bt_id_add.part.0+0x146>
		LOG_WRN("Set privacy mode command is not supported");
   17cfc:	466c      	mov	r4, sp
   17cfe:	b088      	sub	sp, #32
   17d00:	466a      	mov	r2, sp
   17d02:	4b1b      	ldr	r3, [pc, #108]	; (17d70 <bt_id_add.part.0+0x1ac>)
   17d04:	6153      	str	r3, [r2, #20]
   17d06:	4b1b      	ldr	r3, [pc, #108]	; (17d74 <bt_id_add.part.0+0x1b0>)
   17d08:	e78a      	b.n	17c20 <bt_id_add.part.0+0x5c>
	bt_addr_le_copy(&cp.id_addr, addr);
   17d0a:	4641      	mov	r1, r8
   17d0c:	4638      	mov	r0, r7
   17d0e:	f00f f988 	bl	27022 <bt_addr_le_copy>
	cp.mode = mode;
   17d12:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17d14:	2108      	movs	r1, #8
   17d16:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17d1a:	71fb      	strb	r3, [r7, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17d1c:	f7fe fe0a 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   17d20:	4604      	mov	r4, r0
   17d22:	b160      	cbz	r0, 17d3e <bt_id_add.part.0+0x17a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d24:	2208      	movs	r2, #8
   17d26:	4639      	mov	r1, r7
   17d28:	300c      	adds	r0, #12
   17d2a:	f011 f9d3 	bl	290d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17d2e:	4632      	mov	r2, r6
   17d30:	4621      	mov	r1, r4
   17d32:	f242 004e 	movw	r0, #8270	; 0x204e
   17d36:	f7fe fe37 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   17d3a:	2800      	cmp	r0, #0
   17d3c:	d0a8      	beq.n	17c90 <bt_id_add.part.0+0xcc>
		LOG_ERR("Failed to set privacy mode");
   17d3e:	466c      	mov	r4, sp
   17d40:	b088      	sub	sp, #32
   17d42:	466a      	mov	r2, sp
   17d44:	4b0c      	ldr	r3, [pc, #48]	; (17d78 <bt_id_add.part.0+0x1b4>)
   17d46:	e7c3      	b.n	17cd0 <bt_id_add.part.0+0x10c>
   17d48:	20000464 	.word	0x20000464
   17d4c:	20000390 	.word	0x20000390
   17d50:	000270c9 	.word	0x000270c9
   17d54:	0002d0fa 	.word	0x0002d0fa
   17d58:	0002d403 	.word	0x0002d403
   17d5c:	0002a858 	.word	0x0002a858
   17d60:	0002d123 	.word	0x0002d123
   17d64:	0002d158 	.word	0x0002d158
   17d68:	0002714d 	.word	0x0002714d
   17d6c:	0002d17c 	.word	0x0002d17c
   17d70:	0002d1a0 	.word	0x0002d1a0
   17d74:	0002d3ef 	.word	0x0002d3ef
   17d78:	0002d1ce 	.word	0x0002d1ce

00017d7c <set_random_address>:
{
   17d7c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17d7e:	4913      	ldr	r1, [pc, #76]	; (17dcc <set_random_address+0x50>)
   17d80:	2206      	movs	r2, #6
   17d82:	4605      	mov	r5, r0
   17d84:	f00e ff22 	bl	26bcc <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17d88:	b1d8      	cbz	r0, 17dc2 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17d8a:	2106      	movs	r1, #6
   17d8c:	f242 0005 	movw	r0, #8197	; 0x2005
   17d90:	f7fe fdd0 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   17d94:	4604      	mov	r4, r0
   17d96:	b1b0      	cbz	r0, 17dc6 <set_random_address+0x4a>
   17d98:	2206      	movs	r2, #6
   17d9a:	4629      	mov	r1, r5
   17d9c:	300c      	adds	r0, #12
   17d9e:	f011 f999 	bl	290d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17da2:	2200      	movs	r2, #0
   17da4:	4621      	mov	r1, r4
   17da6:	f242 0005 	movw	r0, #8197	; 0x2005
   17daa:	f7fe fdfd 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   17dae:	b948      	cbnz	r0, 17dc4 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17db0:	2206      	movs	r2, #6
   17db2:	4806      	ldr	r0, [pc, #24]	; (17dcc <set_random_address+0x50>)
   17db4:	4629      	mov	r1, r5
   17db6:	f00e ff19 	bl	26bec <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17dba:	4b05      	ldr	r3, [pc, #20]	; (17dd0 <set_random_address+0x54>)
   17dbc:	2201      	movs	r2, #1
   17dbe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   17dc2:	2000      	movs	r0, #0
}
   17dc4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17dc6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17dca:	e7fb      	b.n	17dc4 <set_random_address+0x48>
   17dcc:	200003f9 	.word	0x200003f9
   17dd0:	20000390 	.word	0x20000390

00017dd4 <bt_id_del.part.0>:
void bt_id_del(struct bt_keys *keys)
   17dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17dd8:	2100      	movs	r1, #0
void bt_id_del(struct bt_keys *keys)
   17dda:	af00      	add	r7, sp, #0
   17ddc:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17dde:	2206      	movs	r2, #6
   17de0:	4608      	mov	r0, r1
   17de2:	f001 fe47 	bl	19a74 <bt_conn_lookup_state_le>
	if (conn) {
   17de6:	4605      	mov	r5, r0
   17de8:	b170      	cbz	r0, 17e08 <bt_id_del.part.0+0x34>
   17dea:	483c      	ldr	r0, [pc, #240]	; (17edc <bt_id_del.part.0+0x108>)
   17dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17df0:	f00f f95e 	bl	270b0 <atomic_or.isra.0>
	keys->state |= flag;
   17df4:	7a23      	ldrb	r3, [r4, #8]
   17df6:	f043 0302 	orr.w	r3, r3, #2
   17dfa:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17dfc:	4628      	mov	r0, r5
   17dfe:	f00f fb69 	bl	274d4 <bt_conn_unref>
}
   17e02:	46bd      	mov	sp, r7
   17e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17e08:	4601      	mov	r1, r0
   17e0a:	4835      	ldr	r0, [pc, #212]	; (17ee0 <bt_id_del.part.0+0x10c>)
   17e0c:	f000 fcae 	bl	1876c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17e10:	4628      	mov	r0, r5
   17e12:	f00f f935 	bl	27080 <addr_res_enable>
	if (err) {
   17e16:	4d33      	ldr	r5, [pc, #204]	; (17ee4 <bt_id_del.part.0+0x110>)
   17e18:	4606      	mov	r6, r0
   17e1a:	b190      	cbz	r0, 17e42 <bt_id_del.part.0+0x6e>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   17e1c:	466c      	mov	r4, sp
   17e1e:	b088      	sub	sp, #32
   17e20:	466b      	mov	r3, sp
   17e22:	4a31      	ldr	r2, [pc, #196]	; (17ee8 <bt_id_del.part.0+0x114>)
   17e24:	615a      	str	r2, [r3, #20]
   17e26:	4a31      	ldr	r2, [pc, #196]	; (17eec <bt_id_del.part.0+0x118>)
   17e28:	e9c3 2006 	strd	r2, r0, [r3, #24]
   17e2c:	461a      	mov	r2, r3
   17e2e:	2304      	movs	r3, #4
   17e30:	f842 3f10 	str.w	r3, [r2, #16]!
   17e34:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Failed to remove IRK from controller");
   17e38:	482d      	ldr	r0, [pc, #180]	; (17ef0 <bt_id_del.part.0+0x11c>)
   17e3a:	f00f f91e 	bl	2707a <z_log_msg_static_create.constprop.0>
   17e3e:	46a5      	mov	sp, r4
		goto done;
   17e40:	e011      	b.n	17e66 <bt_id_del.part.0+0x92>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17e42:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17e46:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
   17e4a:	429a      	cmp	r2, r3
   17e4c:	d216      	bcs.n	17e7c <bt_id_del.part.0+0xa8>
		bt_dev.le.rl_entries--;
   17e4e:	3b01      	subs	r3, #1
   17e50:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   17e54:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17e56:	4927      	ldr	r1, [pc, #156]	; (17ef4 <bt_id_del.part.0+0x120>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17e58:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17e5c:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17e5e:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   17e60:	2002      	movs	r0, #2
   17e62:	f007 fa55 	bl	1f310 <bt_keys_foreach_type>
	if (bt_dev.le.rl_entries) {
   17e66:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17e6a:	b113      	cbz	r3, 17e72 <bt_id_del.part.0+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17e6c:	2001      	movs	r0, #1
   17e6e:	f00f f907 	bl	27080 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17e72:	4821      	ldr	r0, [pc, #132]	; (17ef8 <bt_id_del.part.0+0x124>)
   17e74:	2100      	movs	r1, #0
   17e76:	f000 fc79 	bl	1876c <bt_le_ext_adv_foreach>
   17e7a:	e7c2      	b.n	17e02 <bt_id_del.part.0+0x2e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17e7c:	2107      	movs	r1, #7
   17e7e:	f242 0028 	movw	r0, #8232	; 0x2028
   17e82:	f7fe fd57 	bl	16934 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   17e86:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   17e8a:	4680      	mov	r8, r0
   17e8c:	b960      	cbnz	r0, 17ea8 <bt_id_del.part.0+0xd4>
		LOG_ERR("Failed to remove IRK from controller");
   17e8e:	466c      	mov	r4, sp
   17e90:	b088      	sub	sp, #32
   17e92:	466a      	mov	r2, sp
   17e94:	4b19      	ldr	r3, [pc, #100]	; (17efc <bt_id_del.part.0+0x128>)
   17e96:	6153      	str	r3, [r2, #20]
   17e98:	4b14      	ldr	r3, [pc, #80]	; (17eec <bt_id_del.part.0+0x118>)
   17e9a:	6193      	str	r3, [r2, #24]
   17e9c:	2303      	movs	r3, #3
   17e9e:	f842 3f10 	str.w	r3, [r2, #16]!
   17ea2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ea6:	e7c7      	b.n	17e38 <bt_id_del.part.0+0x64>
	return net_buf_simple_add(&buf->b, len);
   17ea8:	2107      	movs	r1, #7
   17eaa:	300c      	adds	r0, #12
   17eac:	f011 f90c 	bl	290c8 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17eb0:	4649      	mov	r1, r9
   17eb2:	f00f f8b6 	bl	27022 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   17eb6:	4632      	mov	r2, r6
   17eb8:	4641      	mov	r1, r8
   17eba:	f242 0028 	movw	r0, #8232	; 0x2028
   17ebe:	f7fe fd73 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   17ec2:	2800      	cmp	r0, #0
   17ec4:	d1e3      	bne.n	17e8e <bt_id_del.part.0+0xba>
	bt_dev.le.rl_entries--;
   17ec6:	f895 3121 	ldrb.w	r3, [r5, #289]	; 0x121
   17eca:	3b01      	subs	r3, #1
   17ecc:	f885 3121 	strb.w	r3, [r5, #289]	; 0x121
	keys->state &= ~BT_KEYS_ID_ADDED;
   17ed0:	7a23      	ldrb	r3, [r4, #8]
   17ed2:	f023 0304 	bic.w	r3, r3, #4
   17ed6:	7223      	strb	r3, [r4, #8]
   17ed8:	e7c5      	b.n	17e66 <bt_id_del.part.0+0x92>
   17eda:	bf00      	nop
   17edc:	20000464 	.word	0x20000464
   17ee0:	000270c9 	.word	0x000270c9
   17ee4:	20000390 	.word	0x20000390
   17ee8:	0002d1ed 	.word	0x0002d1ed
   17eec:	0002d3e5 	.word	0x0002d3e5
   17ef0:	0002a858 	.word	0x0002a858
   17ef4:	00027065 	.word	0x00027065
   17ef8:	0002714d 	.word	0x0002714d
   17efc:	0002d21e 	.word	0x0002d21e

00017f00 <bt_id_set_private_addr>:
{
   17f00:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   17f02:	b9f0      	cbnz	r0, 17f42 <bt_id_set_private_addr+0x42>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17f04:	4810      	ldr	r0, [pc, #64]	; (17f48 <bt_id_set_private_addr+0x48>)
   17f06:	f00f f88f 	bl	27028 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   17f0a:	0483      	lsls	r3, r0, #18
   17f0c:	d417      	bmi.n	17f3e <bt_id_set_private_addr+0x3e>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   17f0e:	480f      	ldr	r0, [pc, #60]	; (17f4c <bt_id_set_private_addr+0x4c>)
   17f10:	4669      	mov	r1, sp
   17f12:	f00e fed1 	bl	26cb8 <bt_rpa_create>
	if (!err) {
   17f16:	4604      	mov	r4, r0
   17f18:	b120      	cbz	r0, 17f24 <bt_id_set_private_addr+0x24>
	le_rpa_timeout_submit();
   17f1a:	f7ff fd8b 	bl	17a34 <le_rpa_timeout_submit>
}
   17f1e:	4620      	mov	r0, r4
   17f20:	b002      	add	sp, #8
   17f22:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   17f24:	4668      	mov	r0, sp
   17f26:	f7ff ff29 	bl	17d7c <set_random_address>
		if (!err) {
   17f2a:	4604      	mov	r4, r0
   17f2c:	2800      	cmp	r0, #0
   17f2e:	d1f4      	bne.n	17f1a <bt_id_set_private_addr+0x1a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17f30:	4805      	ldr	r0, [pc, #20]	; (17f48 <bt_id_set_private_addr+0x48>)
   17f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   17f36:	f00f f8bb 	bl	270b0 <atomic_or.isra.0>
	le_rpa_timeout_submit();
   17f3a:	f7ff fd7b 	bl	17a34 <le_rpa_timeout_submit>
		return 0;
   17f3e:	2400      	movs	r4, #0
   17f40:	e7ed      	b.n	17f1e <bt_id_set_private_addr+0x1e>
		return -EINVAL;
   17f42:	f06f 0415 	mvn.w	r4, #21
   17f46:	e7ea      	b.n	17f1e <bt_id_set_private_addr+0x1e>
   17f48:	20000464 	.word	0x20000464
   17f4c:	200004f8 	.word	0x200004f8

00017f50 <le_update_private_addr>:
{
   17f50:	b5b0      	push	{r4, r5, r7, lr}
   17f52:	af00      	add	r7, sp, #0
		adv = bt_le_adv_lookup_legacy();
   17f54:	f000 fc10 	bl	18778 <bt_le_adv_lookup_legacy>
		if (adv &&
   17f58:	4604      	mov	r4, r0
   17f5a:	b338      	cbz	r0, 17fac <le_update_private_addr+0x5c>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17f5c:	f100 0210 	add.w	r2, r0, #16
   17f60:	2107      	movs	r1, #7
   17f62:	4610      	mov	r0, r2
   17f64:	f00f f866 	bl	27034 <atomic_test_bit>
		if (adv &&
   17f68:	b300      	cbz	r0, 17fac <le_update_private_addr+0x5c>
		    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   17f6a:	210d      	movs	r1, #13
   17f6c:	4610      	mov	r0, r2
   17f6e:	f00f f861 	bl	27034 <atomic_test_bit>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   17f72:	4601      	mov	r1, r0
   17f74:	b9c8      	cbnz	r0, 17faa <le_update_private_addr+0x5a>
			id = adv->id;
   17f76:	7825      	ldrb	r5, [r4, #0]
			bt_le_adv_set_enable_legacy(adv, false);
   17f78:	4620      	mov	r0, r4
   17f7a:	f00f fa09 	bl	27390 <bt_le_adv_set_enable_legacy>
	err = bt_id_set_private_addr(id);
   17f7e:	4628      	mov	r0, r5
   17f80:	f7ff ffbe 	bl	17f00 <bt_id_set_private_addr>
	if (err) {
   17f84:	b1c0      	cbz	r0, 17fb8 <le_update_private_addr+0x68>
		LOG_WRN("Failed to update RPA address (%d)", err);
   17f86:	466c      	mov	r4, sp
   17f88:	b088      	sub	sp, #32
   17f8a:	466a      	mov	r2, sp
   17f8c:	4b0d      	ldr	r3, [pc, #52]	; (17fc4 <le_update_private_addr+0x74>)
   17f8e:	6153      	str	r3, [r2, #20]
   17f90:	4b0d      	ldr	r3, [pc, #52]	; (17fc8 <le_update_private_addr+0x78>)
   17f92:	e9c2 3006 	strd	r3, r0, [r2, #24]
   17f96:	2304      	movs	r3, #4
   17f98:	f842 3f10 	str.w	r3, [r2, #16]!
   17f9c:	480b      	ldr	r0, [pc, #44]	; (17fcc <le_update_private_addr+0x7c>)
   17f9e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17fa2:	f00f f86a 	bl	2707a <z_log_msg_static_create.constprop.0>
   17fa6:	46a5      	mov	sp, r4
		return;
   17fa8:	e004      	b.n	17fb4 <le_update_private_addr+0x64>
	err = bt_id_set_private_addr(id);
   17faa:	2000      	movs	r0, #0
   17fac:	f7ff ffa8 	bl	17f00 <bt_id_set_private_addr>
	if (err) {
   17fb0:	2800      	cmp	r0, #0
   17fb2:	d1e8      	bne.n	17f86 <le_update_private_addr+0x36>
}
   17fb4:	46bd      	mov	sp, r7
   17fb6:	bdb0      	pop	{r4, r5, r7, pc}
		bt_le_adv_set_enable_legacy(adv, true);
   17fb8:	2101      	movs	r1, #1
   17fba:	4620      	mov	r0, r4
   17fbc:	f00f f9e8 	bl	27390 <bt_le_adv_set_enable_legacy>
   17fc0:	e7f8      	b.n	17fb4 <le_update_private_addr+0x64>
   17fc2:	bf00      	nop
   17fc4:	0002d247 	.word	0x0002d247
   17fc8:	0002d380 	.word	0x0002d380
   17fcc:	0002a858 	.word	0x0002a858

00017fd0 <rpa_timeout>:
{
   17fd0:	b513      	push	{r0, r1, r4, lr}
	bool adv_enabled = false;
   17fd2:	2300      	movs	r3, #0
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17fd4:	4810      	ldr	r0, [pc, #64]	; (18018 <rpa_timeout+0x48>)
	bool adv_enabled = false;
   17fd6:	f88d 3007 	strb.w	r3, [sp, #7]
			bt_le_ext_adv_foreach(adv_is_private_enabled, &adv_enabled);
   17fda:	f10d 0107 	add.w	r1, sp, #7
   17fde:	f000 fbc5 	bl	1876c <bt_le_ext_adv_foreach>
	return adv_enabled;
   17fe2:	f89d 4007 	ldrb.w	r4, [sp, #7]
	le_rpa_invalidate();
   17fe6:	f7ff fd43 	bl	17a70 <le_rpa_invalidate>
	if (!(adv_enabled ||
   17fea:	b124      	cbz	r4, 17ff6 <rpa_timeout+0x26>
}
   17fec:	b002      	add	sp, #8
   17fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	le_update_private_addr();
   17ff2:	f7ff bfad 	b.w	17f50 <le_update_private_addr>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17ff6:	4809      	ldr	r0, [pc, #36]	; (1801c <rpa_timeout+0x4c>)
   17ff8:	f00f f816 	bl	27028 <atomic_get>
	if (!(adv_enabled ||
   17ffc:	04c1      	lsls	r1, r0, #19
   17ffe:	d4f5      	bmi.n	17fec <rpa_timeout+0x1c>
   18000:	4806      	ldr	r0, [pc, #24]	; (1801c <rpa_timeout+0x4c>)
   18002:	f00f f811 	bl	27028 <atomic_get>
   18006:	0642      	lsls	r2, r0, #25
   18008:	d504      	bpl.n	18014 <rpa_timeout+0x44>
   1800a:	4804      	ldr	r0, [pc, #16]	; (1801c <rpa_timeout+0x4c>)
   1800c:	f00f f80c 	bl	27028 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   18010:	05c3      	lsls	r3, r0, #23
   18012:	d4eb      	bmi.n	17fec <rpa_timeout+0x1c>
}
   18014:	b002      	add	sp, #8
   18016:	bd10      	pop	{r4, pc}
   18018:	00027043 	.word	0x00027043
   1801c:	20000464 	.word	0x20000464

00018020 <bt_id_pending_keys_update>:
   18020:	4b0a      	ldr	r3, [pc, #40]	; (1804c <bt_id_pending_keys_update+0x2c>)
   18022:	f3bf 8f5b 	dmb	ish
   18026:	e853 2f00 	ldrex	r2, [r3]
   1802a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1802e:	e843 1000 	strex	r0, r1, [r3]
   18032:	2800      	cmp	r0, #0
   18034:	d1f7      	bne.n	18026 <bt_id_pending_keys_update+0x6>
   18036:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1803a:	0413      	lsls	r3, r2, #16
   1803c:	d504      	bpl.n	18048 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1803e:	4904      	ldr	r1, [pc, #16]	; (18050 <bt_id_pending_keys_update+0x30>)
   18040:	2200      	movs	r2, #0
   18042:	2002      	movs	r0, #2
   18044:	f007 b964 	b.w	1f310 <bt_keys_foreach_type>
}
   18048:	4770      	bx	lr
   1804a:	bf00      	nop
   1804c:	20000464 	.word	0x20000464
   18050:	000271ed 	.word	0x000271ed

00018054 <bt_id_find_conflict>:
{
   18054:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   18056:	2300      	movs	r3, #0
   18058:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1805c:	4904      	ldr	r1, [pc, #16]	; (18070 <bt_id_find_conflict+0x1c>)
   1805e:	466a      	mov	r2, sp
   18060:	2002      	movs	r0, #2
   18062:	f007 f955 	bl	1f310 <bt_keys_foreach_type>
}
   18066:	9801      	ldr	r0, [sp, #4]
   18068:	b003      	add	sp, #12
   1806a:	f85d fb04 	ldr.w	pc, [sp], #4
   1806e:	bf00      	nop
   18070:	000270f3 	.word	0x000270f3

00018074 <bt_id_add>:
{
   18074:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   18076:	4603      	mov	r3, r0
   18078:	b170      	cbz	r0, 18098 <bt_id_add+0x24>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1807a:	490a      	ldr	r1, [pc, #40]	; (180a4 <bt_id_add+0x30>)
   1807c:	f891 4120 	ldrb.w	r4, [r1, #288]	; 0x120
   18080:	f891 2121 	ldrb.w	r2, [r1, #289]	; 0x121
   18084:	b10c      	cbz	r4, 1808a <bt_id_add+0x16>
   18086:	4294      	cmp	r4, r2
   18088:	d208      	bcs.n	1809c <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   1808a:	3201      	adds	r2, #1
   1808c:	f881 2121 	strb.w	r2, [r1, #289]	; 0x121
		keys->state |= BT_KEYS_ID_ADDED;
   18090:	7a1a      	ldrb	r2, [r3, #8]
   18092:	f042 0204 	orr.w	r2, r2, #4
   18096:	721a      	strb	r2, [r3, #8]
}
   18098:	bc10      	pop	{r4}
   1809a:	4770      	bx	lr
   1809c:	bc10      	pop	{r4}
   1809e:	f7ff bd91 	b.w	17bc4 <bt_id_add.part.0>
   180a2:	bf00      	nop
   180a4:	20000390 	.word	0x20000390

000180a8 <bt_id_del>:
{
   180a8:	b410      	push	{r4}
	CHECKIF(keys == NULL) {
   180aa:	4603      	mov	r3, r0
   180ac:	b198      	cbz	r0, 180d6 <bt_id_del+0x2e>
	if (!bt_dev.le.rl_size ||
   180ae:	4c0b      	ldr	r4, [pc, #44]	; (180dc <bt_id_del+0x34>)
   180b0:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   180b4:	f894 2121 	ldrb.w	r2, [r4, #289]	; 0x121
	if (!bt_dev.le.rl_size ||
   180b8:	b129      	cbz	r1, 180c6 <bt_id_del+0x1e>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   180ba:	3101      	adds	r1, #1
	if (!bt_dev.le.rl_size ||
   180bc:	428a      	cmp	r2, r1
   180be:	dc03      	bgt.n	180c8 <bt_id_del+0x20>
}
   180c0:	bc10      	pop	{r4}
   180c2:	f7ff be87 	b.w	17dd4 <bt_id_del.part.0>
		if (bt_dev.le.rl_entries > 0) {
   180c6:	b112      	cbz	r2, 180ce <bt_id_del+0x26>
			bt_dev.le.rl_entries--;
   180c8:	3a01      	subs	r2, #1
   180ca:	f884 2121 	strb.w	r2, [r4, #289]	; 0x121
		keys->state &= ~BT_KEYS_ID_ADDED;
   180ce:	7a1a      	ldrb	r2, [r3, #8]
   180d0:	f022 0204 	bic.w	r2, r2, #4
   180d4:	721a      	strb	r2, [r3, #8]
}
   180d6:	bc10      	pop	{r4}
   180d8:	4770      	bx	lr
   180da:	bf00      	nop
   180dc:	20000390 	.word	0x20000390

000180e0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   180e4:	b084      	sub	sp, #16
   180e6:	460e      	mov	r6, r1
   180e8:	af00      	add	r7, sp, #0
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   180ea:	4604      	mov	r4, r0
   180ec:	b930      	cbnz	r0, 180fc <bt_id_create+0x1c>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   180ee:	4d2e      	ldr	r5, [pc, #184]	; (181a8 <bt_id_create+0xc8>)
   180f0:	79eb      	ldrb	r3, [r5, #7]
   180f2:	2b01      	cmp	r3, #1
   180f4:	d12d      	bne.n	18152 <bt_id_create+0x72>
		return -ENOMEM;
   180f6:	f06f 000b 	mvn.w	r0, #11
   180fa:	e01e      	b.n	1813a <bt_id_create+0x5a>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   180fc:	492b      	ldr	r1, [pc, #172]	; (181ac <bt_id_create+0xcc>)
   180fe:	f00e ff88 	bl	27012 <bt_addr_le_eq>
   18102:	2800      	cmp	r0, #0
   18104:	d1f3      	bne.n	180ee <bt_id_create+0xe>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18106:	7823      	ldrb	r3, [r4, #0]
   18108:	2b01      	cmp	r3, #1
   1810a:	d104      	bne.n	18116 <bt_id_create+0x36>
   1810c:	79a3      	ldrb	r3, [r4, #6]
   1810e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18112:	2bc0      	cmp	r3, #192	; 0xc0
   18114:	d015      	beq.n	18142 <bt_id_create+0x62>
			LOG_ERR("Only static random identity address supported");
   18116:	466c      	mov	r4, sp
   18118:	b088      	sub	sp, #32
   1811a:	466a      	mov	r2, sp
   1811c:	4b24      	ldr	r3, [pc, #144]	; (181b0 <bt_id_create+0xd0>)
   1811e:	6153      	str	r3, [r2, #20]
   18120:	4b24      	ldr	r3, [pc, #144]	; (181b4 <bt_id_create+0xd4>)
   18122:	6193      	str	r3, [r2, #24]
   18124:	2303      	movs	r3, #3
   18126:	f842 3f10 	str.w	r3, [r2, #16]!
   1812a:	4823      	ldr	r0, [pc, #140]	; (181b8 <bt_id_create+0xd8>)
   1812c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18130:	f00e ffa3 	bl	2707a <z_log_msg_static_create.constprop.0>
   18134:	46a5      	mov	sp, r4
			return -EINVAL;
   18136:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   1813a:	3710      	adds	r7, #16
   1813c:	46bd      	mov	sp, r7
   1813e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (id_find(addr) >= 0) {
   18142:	4620      	mov	r0, r4
   18144:	f7ff fc5e 	bl	17a04 <id_find>
   18148:	2800      	cmp	r0, #0
   1814a:	dbd0      	blt.n	180ee <bt_id_create+0xe>
			return -EALREADY;
   1814c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18150:	e7f3      	b.n	1813a <bt_id_create+0x5a>
   18152:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   18156:	f00e ff67 	bl	27028 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1815a:	f010 0001 	ands.w	r0, r0, #1
   1815e:	d114      	bne.n	1818a <bt_id_create+0xaa>
		uint8_t zero_irk[16] = { 0 };
   18160:	e9c7 0000 	strd	r0, r0, [r7]
   18164:	e9c7 0002 	strd	r0, r0, [r7, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   18168:	2c00      	cmp	r4, #0
   1816a:	d0e4      	beq.n	18136 <bt_id_create+0x56>
   1816c:	490f      	ldr	r1, [pc, #60]	; (181ac <bt_id_create+0xcc>)
   1816e:	4620      	mov	r0, r4
   18170:	f00e ff4f 	bl	27012 <bt_addr_le_eq>
   18174:	2800      	cmp	r0, #0
   18176:	d1de      	bne.n	18136 <bt_id_create+0x56>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18178:	2e00      	cmp	r6, #0
   1817a:	d0dc      	beq.n	18136 <bt_id_create+0x56>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   1817c:	2210      	movs	r2, #16
   1817e:	4639      	mov	r1, r7
   18180:	4630      	mov	r0, r6
   18182:	f00e fd23 	bl	26bcc <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18186:	2800      	cmp	r0, #0
   18188:	d0d5      	beq.n	18136 <bt_id_create+0x56>
	new_id = bt_dev.id_count;
   1818a:	f895 8007 	ldrb.w	r8, [r5, #7]
	err = id_create(new_id, addr, irk);
   1818e:	4632      	mov	r2, r6
   18190:	4621      	mov	r1, r4
   18192:	4640      	mov	r0, r8
   18194:	f7ff fcb4 	bl	17b00 <id_create>
	if (err) {
   18198:	2800      	cmp	r0, #0
   1819a:	d1ce      	bne.n	1813a <bt_id_create+0x5a>
		bt_dev.id_count++;
   1819c:	79eb      	ldrb	r3, [r5, #7]
   1819e:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   181a0:	4640      	mov	r0, r8
		bt_dev.id_count++;
   181a2:	71eb      	strb	r3, [r5, #7]
	return new_id;
   181a4:	e7c9      	b.n	1813a <bt_id_create+0x5a>
   181a6:	bf00      	nop
   181a8:	20000390 	.word	0x20000390
   181ac:	0002c330 	.word	0x0002c330
   181b0:	0002d26d 	.word	0x0002d26d
   181b4:	0002d3d8 	.word	0x0002d3d8
   181b8:	0002a858 	.word	0x0002a858

000181bc <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   181bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   181be:	b083      	sub	sp, #12
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   181c0:	4604      	mov	r4, r0
{
   181c2:	af00      	add	r7, sp, #0
	CHECKIF(addr == NULL) {
   181c4:	b998      	cbnz	r0, 181ee <bt_id_read_public_addr+0x32>
		LOG_WRN("Invalid input parameters");
   181c6:	466c      	mov	r4, sp
   181c8:	b088      	sub	sp, #32
   181ca:	466a      	mov	r2, sp
   181cc:	4b1e      	ldr	r3, [pc, #120]	; (18248 <bt_id_read_public_addr+0x8c>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   181ce:	6153      	str	r3, [r2, #20]
   181d0:	4b1e      	ldr	r3, [pc, #120]	; (1824c <bt_id_read_public_addr+0x90>)
   181d2:	6193      	str	r3, [r2, #24]
   181d4:	2303      	movs	r3, #3
   181d6:	f842 3f10 	str.w	r3, [r2, #16]!
   181da:	481d      	ldr	r0, [pc, #116]	; (18250 <bt_id_read_public_addr+0x94>)
   181dc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   181e0:	f00e ff4b 	bl	2707a <z_log_msg_static_create.constprop.0>
   181e4:	46a5      	mov	sp, r4
		return 0U;
   181e6:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   181e8:	370c      	adds	r7, #12
   181ea:	46bd      	mov	sp, r7
   181ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   181ee:	1d3a      	adds	r2, r7, #4
   181f0:	2100      	movs	r1, #0
   181f2:	f241 0009 	movw	r0, #4105	; 0x1009
   181f6:	f7fe fbd7 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   181fa:	4606      	mov	r6, r0
   181fc:	b120      	cbz	r0, 18208 <bt_id_read_public_addr+0x4c>
		LOG_WRN("Failed to read public address");
   181fe:	466c      	mov	r4, sp
   18200:	b088      	sub	sp, #32
   18202:	466a      	mov	r2, sp
   18204:	4b13      	ldr	r3, [pc, #76]	; (18254 <bt_id_read_public_addr+0x98>)
   18206:	e7e2      	b.n	181ce <bt_id_read_public_addr+0x12>
	rp = (void *)rsp->data;
   18208:	687b      	ldr	r3, [r7, #4]
	return memcmp(a, b, sizeof(*a));
   1820a:	4913      	ldr	r1, [pc, #76]	; (18258 <bt_id_read_public_addr+0x9c>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1820c:	68dd      	ldr	r5, [r3, #12]
   1820e:	3501      	adds	r5, #1
   18210:	2206      	movs	r2, #6
   18212:	4628      	mov	r0, r5
   18214:	f00e fcda 	bl	26bcc <memcmp>
   18218:	b918      	cbnz	r0, 18222 <bt_id_read_public_addr+0x66>
		net_buf_unref(rsp);
   1821a:	6878      	ldr	r0, [r7, #4]
   1821c:	f007 fc02 	bl	1fa24 <net_buf_unref>
		return 0U;
   18220:	e7e1      	b.n	181e6 <bt_id_read_public_addr+0x2a>
   18222:	490e      	ldr	r1, [pc, #56]	; (1825c <bt_id_read_public_addr+0xa0>)
   18224:	2206      	movs	r2, #6
   18226:	4628      	mov	r0, r5
   18228:	f00e fcd0 	bl	26bcc <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1822c:	2800      	cmp	r0, #0
   1822e:	d0f4      	beq.n	1821a <bt_id_read_public_addr+0x5e>
	memcpy(dst, src, sizeof(*dst));
   18230:	2206      	movs	r2, #6
   18232:	4629      	mov	r1, r5
   18234:	1c60      	adds	r0, r4, #1
   18236:	f00e fcd9 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   1823a:	6878      	ldr	r0, [r7, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1823c:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   1823e:	f007 fbf1 	bl	1fa24 <net_buf_unref>
	return 1U;
   18242:	2001      	movs	r0, #1
   18244:	e7d0      	b.n	181e8 <bt_id_read_public_addr+0x2c>
   18246:	bf00      	nop
   18248:	0002d29f 	.word	0x0002d29f
   1824c:	0002d3c1 	.word	0x0002d3c1
   18250:	0002a858 	.word	0x0002a858
   18254:	0002d2bc 	.word	0x0002d2bc
   18258:	0002c33d 	.word	0x0002c33d
   1825c:	0002c337 	.word	0x0002c337

00018260 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18260:	b590      	push	{r4, r7, lr}
   18262:	b08b      	sub	sp, #44	; 0x2c
   18264:	af00      	add	r7, sp, #0
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18266:	4638      	mov	r0, r7
   18268:	f7ff ffa8 	bl	181bc <bt_id_read_public_addr>
   1826c:	4c23      	ldr	r4, [pc, #140]	; (182fc <bt_setup_public_id_addr+0x9c>)
   1826e:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   18270:	b390      	cbz	r0, 182d8 <bt_setup_public_id_addr+0x78>
	memset(ir, 0, 16);
   18272:	2210      	movs	r2, #16
   18274:	2100      	movs	r1, #0
   18276:	f107 0018 	add.w	r0, r7, #24
   1827a:	f00e fcc2 	bl	26c02 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   1827e:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   18282:	079b      	lsls	r3, r3, #30
   18284:	d517      	bpl.n	182b6 <bt_setup_public_id_addr+0x56>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   18286:	f107 0208 	add.w	r2, r7, #8
   1828a:	2100      	movs	r1, #0
   1828c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   18290:	f7fe fb8a 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   18294:	b318      	cbz	r0, 182de <bt_setup_public_id_addr+0x7e>
		LOG_WRN("Failed to read identity root");
   18296:	466c      	mov	r4, sp
   18298:	b088      	sub	sp, #32
   1829a:	466a      	mov	r2, sp
   1829c:	4b18      	ldr	r3, [pc, #96]	; (18300 <bt_setup_public_id_addr+0xa0>)
   1829e:	6153      	str	r3, [r2, #20]
   182a0:	4b18      	ldr	r3, [pc, #96]	; (18304 <bt_setup_public_id_addr+0xa4>)
   182a2:	6193      	str	r3, [r2, #24]
   182a4:	2303      	movs	r3, #3
   182a6:	f842 3f10 	str.w	r3, [r2, #16]!
   182aa:	4817      	ldr	r0, [pc, #92]	; (18308 <bt_setup_public_id_addr+0xa8>)
   182ac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   182b0:	f00e fee3 	bl	2707a <z_log_msg_static_create.constprop.0>
   182b4:	46a5      	mov	sp, r4
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   182b6:	f107 0108 	add.w	r1, r7, #8
   182ba:	f107 0018 	add.w	r0, r7, #24
   182be:	f010 fd1d 	bl	28cfc <bt_smp_irk_get>
   182c2:	b1c0      	cbz	r0, 182f6 <bt_setup_public_id_addr+0x96>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   182c4:	4811      	ldr	r0, [pc, #68]	; (1830c <bt_setup_public_id_addr+0xac>)
   182c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   182ca:	f00e fef1 	bl	270b0 <atomic_or.isra.0>
	uint8_t *irk = NULL;
   182ce:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   182d0:	4639      	mov	r1, r7
   182d2:	2000      	movs	r0, #0
   182d4:	f7ff fc14 	bl	17b00 <id_create>
}
   182d8:	372c      	adds	r7, #44	; 0x2c
   182da:	46bd      	mov	sp, r7
   182dc:	bd90      	pop	{r4, r7, pc}
	rp = (void *)rsp->data;
   182de:	68bb      	ldr	r3, [r7, #8]
	memcpy(ir, rp->ir, 16);
   182e0:	68d9      	ldr	r1, [r3, #12]
   182e2:	2210      	movs	r2, #16
   182e4:	3101      	adds	r1, #1
   182e6:	f107 0018 	add.w	r0, r7, #24
   182ea:	f00e fc7f 	bl	26bec <memcpy>
	net_buf_unref(rsp);
   182ee:	68b8      	ldr	r0, [r7, #8]
   182f0:	f007 fb98 	bl	1fa24 <net_buf_unref>
   182f4:	e7df      	b.n	182b6 <bt_setup_public_id_addr+0x56>
			irk = ir_irk;
   182f6:	f107 0208 	add.w	r2, r7, #8
   182fa:	e7e9      	b.n	182d0 <bt_setup_public_id_addr+0x70>
   182fc:	20000390 	.word	0x20000390
   18300:	0002d2de 	.word	0x0002d2de
   18304:	0002d3ab 	.word	0x0002d3ab
   18308:	0002a858 	.word	0x0002a858
   1830c:	20000464 	.word	0x20000464

00018310 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18314:	4b2a      	ldr	r3, [pc, #168]	; (183c0 <bt_read_static_addr+0xb0>)
{
   18316:	b083      	sub	sp, #12
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18318:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   1831c:	07db      	lsls	r3, r3, #31
{
   1831e:	af00      	add	r7, sp, #0
   18320:	4680      	mov	r8, r0
   18322:	4689      	mov	r9, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18324:	d415      	bmi.n	18352 <bt_read_static_addr+0x42>
		LOG_WRN("Read Static Addresses command not available");
   18326:	466c      	mov	r4, sp
   18328:	b088      	sub	sp, #32
   1832a:	466a      	mov	r2, sp
   1832c:	4b25      	ldr	r3, [pc, #148]	; (183c4 <bt_read_static_addr+0xb4>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1832e:	6153      	str	r3, [r2, #20]
   18330:	4b25      	ldr	r3, [pc, #148]	; (183c8 <bt_read_static_addr+0xb8>)
   18332:	6193      	str	r3, [r2, #24]
   18334:	2303      	movs	r3, #3
   18336:	f842 3f10 	str.w	r3, [r2, #16]!
   1833a:	4824      	ldr	r0, [pc, #144]	; (183cc <bt_read_static_addr+0xbc>)
   1833c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18340:	f00e fe9b 	bl	2707a <z_log_msg_static_create.constprop.0>
		return 0;
   18344:	2500      	movs	r5, #0
   18346:	46a5      	mov	sp, r4
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18348:	4628      	mov	r0, r5
   1834a:	370c      	adds	r7, #12
   1834c:	46bd      	mov	sp, r7
   1834e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18352:	1d3a      	adds	r2, r7, #4
   18354:	2100      	movs	r1, #0
   18356:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1835a:	f7fe fb25 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   1835e:	4604      	mov	r4, r0
   18360:	b120      	cbz	r0, 1836c <bt_read_static_addr+0x5c>
		LOG_WRN("Failed to read static addresses");
   18362:	466c      	mov	r4, sp
   18364:	b088      	sub	sp, #32
   18366:	466a      	mov	r2, sp
   18368:	4b19      	ldr	r3, [pc, #100]	; (183d0 <bt_read_static_addr+0xc0>)
   1836a:	e7e0      	b.n	1832e <bt_read_static_addr+0x1e>
	rp = (void *)rsp->data;
   1836c:	687b      	ldr	r3, [r7, #4]
   1836e:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   18370:	7875      	ldrb	r5, [r6, #1]
   18372:	454d      	cmp	r5, r9
   18374:	bf28      	it	cs
   18376:	464d      	movcs	r5, r9
	for (i = 0; i < cnt; i++) {
   18378:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1837a:	f04f 0916 	mov.w	r9, #22
	for (i = 0; i < cnt; i++) {
   1837e:	42a5      	cmp	r5, r4
   18380:	dc15      	bgt.n	183ae <bt_read_static_addr+0x9e>
	net_buf_unref(rsp);
   18382:	6878      	ldr	r0, [r7, #4]
   18384:	f007 fb4e 	bl	1fa24 <net_buf_unref>
	if (!cnt) {
   18388:	2d00      	cmp	r5, #0
   1838a:	d1dd      	bne.n	18348 <bt_read_static_addr+0x38>
		LOG_WRN("No static addresses stored in controller");
   1838c:	466c      	mov	r4, sp
   1838e:	b088      	sub	sp, #32
   18390:	466a      	mov	r2, sp
   18392:	4b10      	ldr	r3, [pc, #64]	; (183d4 <bt_read_static_addr+0xc4>)
   18394:	6153      	str	r3, [r2, #20]
   18396:	4b0c      	ldr	r3, [pc, #48]	; (183c8 <bt_read_static_addr+0xb8>)
   18398:	6193      	str	r3, [r2, #24]
   1839a:	2303      	movs	r3, #3
   1839c:	f842 3f10 	str.w	r3, [r2, #16]!
   183a0:	480a      	ldr	r0, [pc, #40]	; (183cc <bt_read_static_addr+0xbc>)
   183a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   183a6:	f00e fe68 	bl	2707a <z_log_msg_static_create.constprop.0>
   183aa:	46a5      	mov	sp, r4
   183ac:	e7cc      	b.n	18348 <bt_read_static_addr+0x38>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   183ae:	4631      	mov	r1, r6
   183b0:	fb09 8004 	mla	r0, r9, r4, r8
   183b4:	2216      	movs	r2, #22
   183b6:	f00e fc19 	bl	26bec <memcpy>
	for (i = 0; i < cnt; i++) {
   183ba:	3401      	adds	r4, #1
   183bc:	3616      	adds	r6, #22
   183be:	e7de      	b.n	1837e <bt_read_static_addr+0x6e>
   183c0:	20000390 	.word	0x20000390
   183c4:	0002d2ff 	.word	0x0002d2ff
   183c8:	0002d397 	.word	0x0002d397
   183cc:	0002a858 	.word	0x0002a858
   183d0:	0002d32f 	.word	0x0002d32f
   183d4:	0002d353 	.word	0x0002d353

000183d8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   183d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   183dc:	4e23      	ldr	r6, [pc, #140]	; (1846c <bt_setup_random_id_addr+0x94>)
   183de:	79f4      	ldrb	r4, [r6, #7]
{
   183e0:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
   183e2:	b92c      	cbnz	r4, 183f0 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   183e4:	2101      	movs	r1, #1
   183e6:	a806      	add	r0, sp, #24
   183e8:	f7ff ff92 	bl	18310 <bt_read_static_addr>
   183ec:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   183ee:	bb90      	cbnz	r0, 18456 <bt_setup_random_id_addr+0x7e>
   183f0:	481f      	ldr	r0, [pc, #124]	; (18470 <bt_setup_random_id_addr+0x98>)
   183f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   183f6:	f00e fe5b 	bl	270b0 <atomic_or.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   183fa:	2100      	movs	r1, #0
   183fc:	4608      	mov	r0, r1
}
   183fe:	b00c      	add	sp, #48	; 0x30
   18400:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
   18404:	f7ff be6c 	b.w	180e0 <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   18408:	fb08 fa05 	mul.w	sl, r8, r5
   1840c:	f10a 0006 	add.w	r0, sl, #6
   18410:	ab06      	add	r3, sp, #24
   18412:	a902      	add	r1, sp, #8
   18414:	4418      	add	r0, r3
   18416:	f010 fc71 	bl	28cfc <bt_smp_irk_get>
   1841a:	b1d0      	cbz	r0, 18452 <bt_setup_random_id_addr+0x7a>
   1841c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18420:	4648      	mov	r0, r9
   18422:	f00e fe45 	bl	270b0 <atomic_or.isra.0>
				uint8_t *irk = NULL;
   18426:	2700      	movs	r7, #0
   18428:	ab06      	add	r3, sp, #24
   1842a:	eb03 010a 	add.w	r1, r3, sl
   1842e:	2206      	movs	r2, #6
   18430:	f10d 0001 	add.w	r0, sp, #1
   18434:	f00e fbda 	bl	26bec <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   18438:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1843a:	463a      	mov	r2, r7
   1843c:	4669      	mov	r1, sp
   1843e:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   18440:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18444:	f7ff fb5c 	bl	17b00 <id_create>
				if (err) {
   18448:	3401      	adds	r4, #1
   1844a:	b140      	cbz	r0, 1845e <bt_setup_random_id_addr+0x86>
}
   1844c:	b00c      	add	sp, #48	; 0x30
   1844e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						irk = ir_irk;
   18452:	af02      	add	r7, sp, #8
   18454:	e7e8      	b.n	18428 <bt_setup_random_id_addr+0x50>
   18456:	f04f 0816 	mov.w	r8, #22
   1845a:	f106 09d4 	add.w	r9, r6, #212	; 0xd4
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1845e:	79f3      	ldrb	r3, [r6, #7]
   18460:	b2e5      	uxtb	r5, r4
   18462:	42ab      	cmp	r3, r5
   18464:	d8d0      	bhi.n	18408 <bt_setup_random_id_addr+0x30>
			return 0;
   18466:	2000      	movs	r0, #0
   18468:	e7f0      	b.n	1844c <bt_setup_random_id_addr+0x74>
   1846a:	bf00      	nop
   1846c:	20000390 	.word	0x20000390
   18470:	20000464 	.word	0x20000464

00018474 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18478:	461d      	mov	r5, r3
   1847a:	460f      	mov	r7, r1
   1847c:	4690      	mov	r8, r2
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1847e:	4603      	mov	r3, r0
   18480:	2800      	cmp	r0, #0
   18482:	d05e      	beq.n	18542 <bt_id_set_adv_own_addr+0xce>
   18484:	2d00      	cmp	r5, #0
   18486:	d05c      	beq.n	18542 <bt_id_set_adv_own_addr+0xce>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   18488:	07ca      	lsls	r2, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1848a:	7806      	ldrb	r6, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1848c:	d542      	bpl.n	18514 <bt_id_set_adv_own_addr+0xa0>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1848e:	f1b8 0f00 	cmp.w	r8, #0
   18492:	d118      	bne.n	184c6 <bt_id_set_adv_own_addr+0x52>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
			return -ENOTSUP;
		}

		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18494:	074c      	lsls	r4, r1, #29
   18496:	d526      	bpl.n	184e6 <bt_id_set_adv_own_addr+0x72>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18498:	492d      	ldr	r1, [pc, #180]	; (18550 <bt_id_set_adv_own_addr+0xdc>)
   1849a:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   1849e:	5c8c      	ldrb	r4, [r1, r2]
   184a0:	2c01      	cmp	r4, #1
   184a2:	d125      	bne.n	184f0 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   184a4:	4c2a      	ldr	r4, [pc, #168]	; (18550 <bt_id_set_adv_own_addr+0xdc>)
   184a6:	2107      	movs	r1, #7
   184a8:	2201      	movs	r2, #1
   184aa:	fb11 2106 	smlabb	r1, r1, r6, r2
   184ae:	4421      	add	r1, r4
   184b0:	4618      	mov	r0, r3
   184b2:	f00e fe88 	bl	271c6 <bt_id_set_adv_random_addr>
				if (err) {
   184b6:	b9a0      	cbnz	r0, 184e2 <bt_id_set_adv_own_addr+0x6e>
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   184b8:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
   184bc:	5da4      	ldrb	r4, [r4, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   184be:	f1b8 0f00 	cmp.w	r8, #0
   184c2:	d015      	beq.n	184f0 <bt_id_set_adv_own_addr+0x7c>
   184c4:	e021      	b.n	1850a <bt_id_set_adv_own_addr+0x96>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   184c6:	f011 0420 	ands.w	r4, r1, #32
   184ca:	d004      	beq.n	184d6 <bt_id_set_adv_own_addr+0x62>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   184cc:	4a20      	ldr	r2, [pc, #128]	; (18550 <bt_id_set_adv_own_addr+0xdc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   184ce:	f892 20d8 	ldrb.w	r2, [r2, #216]	; 0xd8
   184d2:	0650      	lsls	r0, r2, #25
   184d4:	d538      	bpl.n	18548 <bt_id_set_adv_own_addr+0xd4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   184d6:	0779      	lsls	r1, r7, #29
   184d8:	d411      	bmi.n	184fe <bt_id_set_adv_own_addr+0x8a>
			err = bt_id_set_adv_private_addr(adv);
   184da:	4618      	mov	r0, r3
   184dc:	f00e fe7b 	bl	271d6 <bt_id_set_adv_private_addr>
			if (err) {
   184e0:	b148      	cbz	r0, 184f6 <bt_id_set_adv_own_addr+0x82>
			return err;
		}
	}

	return 0;
}
   184e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = bt_id_set_adv_private_addr(adv);
   184e6:	f00e fe76 	bl	271d6 <bt_id_set_adv_private_addr>
			if (err) {
   184ea:	2800      	cmp	r0, #0
   184ec:	d1f9      	bne.n	184e2 <bt_id_set_adv_own_addr+0x6e>
{
   184ee:	2401      	movs	r4, #1
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   184f0:	702c      	strb	r4, [r5, #0]
	return 0;
   184f2:	2000      	movs	r0, #0
   184f4:	e7f5      	b.n	184e2 <bt_id_set_adv_own_addr+0x6e>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   184f6:	2c00      	cmp	r4, #0
   184f8:	d0f9      	beq.n	184ee <bt_id_set_adv_own_addr+0x7a>
   184fa:	2403      	movs	r4, #3
   184fc:	e7f8      	b.n	184f0 <bt_id_set_adv_own_addr+0x7c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   184fe:	4914      	ldr	r1, [pc, #80]	; (18550 <bt_id_set_adv_own_addr+0xdc>)
   18500:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
   18504:	5c8c      	ldrb	r4, [r1, r2]
   18506:	2c01      	cmp	r4, #1
   18508:	d0cc      	beq.n	184a4 <bt_id_set_adv_own_addr+0x30>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1850a:	06ba      	lsls	r2, r7, #26
   1850c:	d5f0      	bpl.n	184f0 <bt_id_set_adv_own_addr+0x7c>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1850e:	f044 0402 	orr.w	r4, r4, #2
   18512:	e7ed      	b.n	184f0 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   18514:	074b      	lsls	r3, r1, #29
   18516:	d510      	bpl.n	1853a <bt_id_set_adv_own_addr+0xc6>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18518:	4f0d      	ldr	r7, [pc, #52]	; (18550 <bt_id_set_adv_own_addr+0xdc>)
   1851a:	ebc6 08c6 	rsb	r8, r6, r6, lsl #3
   1851e:	f817 4008 	ldrb.w	r4, [r7, r8]
   18522:	2c01      	cmp	r4, #1
   18524:	d1e4      	bne.n	184f0 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18526:	2107      	movs	r1, #7
   18528:	fb11 4106 	smlabb	r1, r1, r6, r4
   1852c:	4439      	add	r1, r7
   1852e:	f00e fe4a 	bl	271c6 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   18532:	f817 3008 	ldrb.w	r3, [r7, r8]
   18536:	702b      	strb	r3, [r5, #0]
		if (err) {
   18538:	e7d3      	b.n	184e2 <bt_id_set_adv_own_addr+0x6e>
			err = bt_id_set_adv_private_addr(adv);
   1853a:	f00e fe4c 	bl	271d6 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1853e:	2301      	movs	r3, #1
   18540:	e7f9      	b.n	18536 <bt_id_set_adv_own_addr+0xc2>
		return -EINVAL;
   18542:	f06f 0015 	mvn.w	r0, #21
   18546:	e7cc      	b.n	184e2 <bt_id_set_adv_own_addr+0x6e>
			return -ENOTSUP;
   18548:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1854c:	e7c9      	b.n	184e2 <bt_id_set_adv_own_addr+0x6e>
   1854e:	bf00      	nop
   18550:	20000390 	.word	0x20000390

00018554 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18554:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   18556:	4903      	ldr	r1, [pc, #12]	; (18564 <bt_id_init+0x10>)
   18558:	4803      	ldr	r0, [pc, #12]	; (18568 <bt_id_init+0x14>)
   1855a:	f011 fc31 	bl	29dc0 <k_work_init_delayable>
#endif

	return 0;
}
   1855e:	2000      	movs	r0, #0
   18560:	bd08      	pop	{r3, pc}
   18562:	bf00      	nop
   18564:	00017fd1 	.word	0x00017fd1
   18568:	20000508 	.word	0x20000508

0001856c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18570:	b085      	sub	sp, #20
   18572:	af00      	add	r7, sp, #0
   18574:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18576:	2120      	movs	r1, #32
{
   18578:	60b8      	str	r0, [r7, #8]
   1857a:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1857c:	f7fe f9da 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   18580:	4605      	mov	r5, r0
   18582:	2800      	cmp	r0, #0
   18584:	d066      	beq.n	18654 <hci_set_ad+0xe8>
   18586:	2120      	movs	r1, #32
   18588:	300c      	adds	r0, #12
   1858a:	f010 fd9d 	bl	290c8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   1858e:	2220      	movs	r2, #32
   18590:	2100      	movs	r1, #0
   18592:	4682      	mov	sl, r0
   18594:	f00e fb35 	bl	26c02 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   18598:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   1859c:	f10a 0b01 	add.w	fp, sl, #1
	for (size_t i = 0; i < ad_len; i++) {
   185a0:	60fb      	str	r3, [r7, #12]
	uint8_t set_data_len = 0;
   185a2:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   185a4:	f8d4 9000 	ldr.w	r9, [r4]
   185a8:	2300      	movs	r3, #0
   185aa:	6862      	ldr	r2, [r4, #4]
   185ac:	4293      	cmp	r3, r2
   185ae:	d30b      	bcc.n	185c8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   185b0:	68fb      	ldr	r3, [r7, #12]
   185b2:	3408      	adds	r4, #8
   185b4:	42a3      	cmp	r3, r4
   185b6:	d1f5      	bne.n	185a4 <hci_set_ad+0x38>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   185b8:	68b8      	ldr	r0, [r7, #8]
	*data_len = set_data_len;
   185ba:	f88a 6000 	strb.w	r6, [sl]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   185be:	2200      	movs	r2, #0
   185c0:	4629      	mov	r1, r5
   185c2:	f7fe f9f1 	bl	169a8 <bt_hci_cmd_send_sync>
   185c6:	e024      	b.n	18612 <hci_set_ad+0xa6>
			size_t len = data[j].data_len;
   185c8:	f899 2001 	ldrb.w	r2, [r9, #1]
			uint8_t type = data[j].type;
   185cc:	f899 c000 	ldrb.w	ip, [r9]
			if ((set_data_len + len + 2) > set_data_len_max) {
   185d0:	1cb0      	adds	r0, r6, #2
   185d2:	1881      	adds	r1, r0, r2
   185d4:	291f      	cmp	r1, #31
   185d6:	d922      	bls.n	1861e <hci_set_ad+0xb2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   185d8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   185dc:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   185e0:	d101      	bne.n	185e6 <hci_set_ad+0x7a>
   185e2:	2a00      	cmp	r2, #0
   185e4:	dc19      	bgt.n	1861a <hci_set_ad+0xae>
					LOG_ERR("Too big advertising data");
   185e6:	466c      	mov	r4, sp
   185e8:	b088      	sub	sp, #32
   185ea:	466a      	mov	r2, sp
   185ec:	4b1b      	ldr	r3, [pc, #108]	; (1865c <hci_set_ad+0xf0>)
   185ee:	6153      	str	r3, [r2, #20]
   185f0:	4b1b      	ldr	r3, [pc, #108]	; (18660 <hci_set_ad+0xf4>)
   185f2:	6193      	str	r3, [r2, #24]
   185f4:	2303      	movs	r3, #3
   185f6:	f842 3f10 	str.w	r3, [r2, #16]!
   185fa:	481a      	ldr	r0, [pc, #104]	; (18664 <hci_set_ad+0xf8>)
   185fc:	2300      	movs	r3, #0
   185fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18602:	f7fb f991 	bl	13928 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   18606:	4628      	mov	r0, r5
   18608:	46a5      	mov	sp, r4
   1860a:	f007 fa0b 	bl	1fa24 <net_buf_unref>
					return -EINVAL;
   1860e:	f06f 0015 	mvn.w	r0, #21
}
   18612:	3714      	adds	r7, #20
   18614:	46bd      	mov	sp, r7
   18616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1861a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1861e:	fa5f f882 	uxtb.w	r8, r2
   18622:	f108 0101 	add.w	r1, r8, #1
   18626:	f80b 1006 	strb.w	r1, [fp, r6]
   1862a:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   1862c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1862e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   18632:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   18636:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1863a:	607b      	str	r3, [r7, #4]
			set_data_len += len;
   1863c:	f108 0802 	add.w	r8, r8, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   18640:	f00e fad4 	bl	26bec <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   18644:	687b      	ldr	r3, [r7, #4]
			set_data_len += len;
   18646:	44b0      	add	r8, r6
   18648:	fa5f f688 	uxtb.w	r6, r8
		for (size_t j = 0; j < ad[i].len; j++) {
   1864c:	3301      	adds	r3, #1
   1864e:	f109 0908 	add.w	r9, r9, #8
   18652:	e7aa      	b.n	185aa <hci_set_ad+0x3e>
		return -ENOBUFS;
   18654:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18658:	e7db      	b.n	18612 <hci_set_ad+0xa6>
   1865a:	bf00      	nop
   1865c:	0002d413 	.word	0x0002d413
   18660:	0002d4e0 	.word	0x0002d4e0
   18664:	0002a810 	.word	0x0002a810

00018668 <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   18668:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1866a:	4904      	ldr	r1, [pc, #16]	; (1867c <adv_is_directed+0x14>)
   1866c:	2207      	movs	r2, #7
   1866e:	3009      	adds	r0, #9
   18670:	f00e faac 	bl	26bcc <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   18674:	3800      	subs	r0, #0
   18676:	bf18      	it	ne
   18678:	2001      	movne	r0, #1
   1867a:	bd08      	pop	{r3, pc}
   1867c:	0002c330 	.word	0x0002c330

00018680 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18680:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   18682:	4b15      	ldr	r3, [pc, #84]	; (186d8 <le_adv_start_add_conn+0x58>)
   18684:	7802      	ldrb	r2, [r0, #0]
   18686:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   1868a:	4604      	mov	r4, r0
   1868c:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   1868e:	f7ff ffeb 	bl	18668 <adv_is_directed>
   18692:	4603      	mov	r3, r0
   18694:	7820      	ldrb	r0, [r4, #0]
   18696:	b96b      	cbnz	r3, 186b4 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   18698:	4910      	ldr	r1, [pc, #64]	; (186dc <le_adv_start_add_conn+0x5c>)
   1869a:	f001 f981 	bl	199a0 <bt_conn_add_le>
		if (!conn) {
   1869e:	4604      	mov	r4, r0
   186a0:	b910      	cbnz	r0, 186a8 <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   186a2:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   186a6:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   186a8:	2104      	movs	r1, #4
   186aa:	f000 ff4f 	bl	1954c <bt_conn_set_state>
		*out_conn = conn;
   186ae:	602c      	str	r4, [r5, #0]
		return 0;
   186b0:	2000      	movs	r0, #0
   186b2:	e7f8      	b.n	186a6 <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   186b4:	f104 0609 	add.w	r6, r4, #9
   186b8:	4631      	mov	r1, r6
   186ba:	f001 f9a7 	bl	19a0c <bt_conn_exists_le>
   186be:	b940      	cbnz	r0, 186d2 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   186c0:	7820      	ldrb	r0, [r4, #0]
   186c2:	4631      	mov	r1, r6
   186c4:	f001 f96c 	bl	199a0 <bt_conn_add_le>
	if (!conn) {
   186c8:	4604      	mov	r4, r0
   186ca:	2800      	cmp	r0, #0
   186cc:	d0e9      	beq.n	186a2 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   186ce:	2105      	movs	r1, #5
   186d0:	e7eb      	b.n	186aa <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   186d2:	f06f 0015 	mvn.w	r0, #21
   186d6:	e7e6      	b.n	186a6 <le_adv_start_add_conn+0x26>
   186d8:	20000390 	.word	0x20000390
   186dc:	0002c329 	.word	0x0002c329

000186e0 <valid_adv_param>:
{
   186e0:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   186e2:	6843      	ldr	r3, [r0, #4]
{
   186e4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   186e6:	0558      	lsls	r0, r3, #21
   186e8:	d501      	bpl.n	186ee <valid_adv_param+0xe>
		return false;
   186ea:	2000      	movs	r0, #0
}
   186ec:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   186ee:	6922      	ldr	r2, [r4, #16]
   186f0:	b12a      	cbz	r2, 186fe <valid_adv_param+0x1e>
   186f2:	07d9      	lsls	r1, r3, #31
   186f4:	d5f9      	bpl.n	186ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
   186f6:	f003 0324 	and.w	r3, r3, #36	; 0x24
   186fa:	2b24      	cmp	r3, #36	; 0x24
   186fc:	d0f5      	beq.n	186ea <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   186fe:	4d19      	ldr	r5, [pc, #100]	; (18764 <valid_adv_param+0x84>)
   18700:	7820      	ldrb	r0, [r4, #0]
   18702:	79eb      	ldrb	r3, [r5, #7]
   18704:	4283      	cmp	r3, r0
   18706:	d9f0      	bls.n	186ea <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18708:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1870c:	4916      	ldr	r1, [pc, #88]	; (18768 <valid_adv_param+0x88>)
   1870e:	2207      	movs	r2, #7
   18710:	4428      	add	r0, r5
   18712:	f00e fa5b 	bl	26bcc <memcmp>
	if (param->id >= bt_dev.id_count ||
   18716:	2800      	cmp	r0, #0
   18718:	d0e7      	beq.n	186ea <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1871a:	6860      	ldr	r0, [r4, #4]
   1871c:	07c2      	lsls	r2, r0, #31
   1871e:	d406      	bmi.n	1872e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18720:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   18724:	2b08      	cmp	r3, #8
   18726:	d802      	bhi.n	1872e <valid_adv_param+0x4e>
   18728:	68a3      	ldr	r3, [r4, #8]
   1872a:	2b9f      	cmp	r3, #159	; 0x9f
   1872c:	d9dd      	bls.n	186ea <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1872e:	f010 0f30 	tst.w	r0, #48	; 0x30
   18732:	d002      	beq.n	1873a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   18734:	6923      	ldr	r3, [r4, #16]
   18736:	2b00      	cmp	r3, #0
   18738:	d0d7      	beq.n	186ea <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1873a:	06c3      	lsls	r3, r0, #27
   1873c:	d401      	bmi.n	18742 <valid_adv_param+0x62>
   1873e:	6923      	ldr	r3, [r4, #16]
   18740:	b943      	cbnz	r3, 18754 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
   18742:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   18746:	429a      	cmp	r2, r3
   18748:	d8cf      	bhi.n	186ea <valid_adv_param+0xa>
   1874a:	2a1f      	cmp	r2, #31
   1874c:	d9cd      	bls.n	186ea <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1874e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   18752:	d8ca      	bhi.n	186ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   18754:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18758:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1875c:	bf18      	it	ne
   1875e:	2001      	movne	r0, #1
   18760:	e7c4      	b.n	186ec <valid_adv_param+0xc>
   18762:	bf00      	nop
   18764:	20000390 	.word	0x20000390
   18768:	0002c330 	.word	0x0002c330

0001876c <bt_le_ext_adv_foreach>:
{
   1876c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1876e:	4801      	ldr	r0, [pc, #4]	; (18774 <bt_le_ext_adv_foreach+0x8>)
   18770:	4718      	bx	r3
   18772:	bf00      	nop
   18774:	200003a8 	.word	0x200003a8

00018778 <bt_le_adv_lookup_legacy>:
}
   18778:	4800      	ldr	r0, [pc, #0]	; (1877c <bt_le_adv_lookup_legacy+0x4>)
   1877a:	4770      	bx	lr
   1877c:	200003a8 	.word	0x200003a8

00018780 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   18780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18784:	b08d      	sub	sp, #52	; 0x34
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   18786:	f8d1 b010 	ldr.w	fp, [r1, #16]
{
   1878a:	af04      	add	r7, sp, #16
   1878c:	e9c7 3200 	strd	r3, r2, [r7]
	struct bt_conn *conn = NULL;
   18790:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   18792:	ebbb 0403 	subs.w	r4, fp, r3
{
   18796:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18798:	4895      	ldr	r0, [pc, #596]	; (189f0 <bt_le_adv_start_legacy+0x270>)
	struct bt_conn *conn = NULL;
   1879a:	60fb      	str	r3, [r7, #12]
	bool dir_adv = (param->peer != NULL), scannable = false;
   1879c:	bf18      	it	ne
   1879e:	2401      	movne	r4, #1
   187a0:	f00e fd43 	bl	2722a <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   187a4:	0743      	lsls	r3, r0, #29
{
   187a6:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   187a8:	f140 8119 	bpl.w	189de <bt_le_adv_start_legacy+0x25e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   187ac:	4608      	mov	r0, r1
   187ae:	f7ff ff97 	bl	186e0 <valid_adv_param>
   187b2:	b930      	cbnz	r0, 187c2 <bt_le_adv_start_legacy+0x42>
		return -EINVAL;
   187b4:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   187b8:	4620      	mov	r0, r4
   187ba:	3724      	adds	r7, #36	; 0x24
   187bc:	46bd      	mov	sp, r7
   187be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   187c2:	4628      	mov	r0, r5
   187c4:	f00e fd0e 	bl	271e4 <bt_id_adv_random_addr_check>
   187c8:	4682      	mov	sl, r0
   187ca:	2800      	cmp	r0, #0
   187cc:	d0f2      	beq.n	187b4 <bt_le_adv_start_legacy+0x34>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   187ce:	f106 0910 	add.w	r9, r6, #16
   187d2:	4648      	mov	r0, r9
   187d4:	f00e fd29 	bl	2722a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   187d8:	f3c0 18c0 	ubfx	r8, r0, #7, #1
   187dc:	0600      	lsls	r0, r0, #24
   187de:	f100 8101 	bmi.w	189e4 <bt_le_adv_start_legacy+0x264>
	(void)memset(&set_param, 0, sizeof(set_param));
   187e2:	220f      	movs	r2, #15
   187e4:	4641      	mov	r1, r8
   187e6:	f107 0010 	add.w	r0, r7, #16
   187ea:	f00e fa0a 	bl	26c02 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   187ee:	68ab      	ldr	r3, [r5, #8]
   187f0:	823b      	strh	r3, [r7, #16]
	set_param.channel_map  = get_adv_channel_map(param->options);
   187f2:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   187f4:	68eb      	ldr	r3, [r5, #12]
   187f6:	827b      	strh	r3, [r7, #18]
	set_param.channel_map  = get_adv_channel_map(param->options);
   187f8:	f00e fd08 	bl	2720c <get_adv_channel_map>
	if (adv->id != param->id) {
   187fc:	7832      	ldrb	r2, [r6, #0]
   187fe:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18800:	7778      	strb	r0, [r7, #29]
	if (adv->id != param->id) {
   18802:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   18804:	f887 801e 	strb.w	r8, [r7, #30]
	if (adv->id != param->id) {
   18808:	d004      	beq.n	18814 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1880a:	4879      	ldr	r0, [pc, #484]	; (189f0 <bt_le_adv_start_legacy+0x270>)
   1880c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   18810:	f00e fd11 	bl	27236 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   18814:	4a77      	ldr	r2, [pc, #476]	; (189f4 <bt_le_adv_start_legacy+0x274>)
	adv->id = param->id;
   18816:	782b      	ldrb	r3, [r5, #0]
   18818:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1881a:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1881e:	6869      	ldr	r1, [r5, #4]
   18820:	4622      	mov	r2, r4
   18822:	f107 0315 	add.w	r3, r7, #21
   18826:	4630      	mov	r0, r6
   18828:	f7ff fe24 	bl	18474 <bt_id_set_adv_own_addr>
	if (err) {
   1882c:	4604      	mov	r4, r0
   1882e:	2800      	cmp	r0, #0
   18830:	d1c2      	bne.n	187b8 <bt_le_adv_start_legacy+0x38>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   18832:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   18836:	2207      	movs	r2, #7
	if (dir_adv) {
   18838:	f1bb 0f00 	cmp.w	fp, #0
   1883c:	d013      	beq.n	18866 <bt_le_adv_start_legacy+0xe6>
   1883e:	6929      	ldr	r1, [r5, #16]
   18840:	f00e f9d4 	bl	26bec <memcpy>
	name_type = get_adv_name_type_param(param);
   18844:	4628      	mov	r0, r5
   18846:	f00e fd93 	bl	27370 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1884a:	686b      	ldr	r3, [r5, #4]
   1884c:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1884e:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18850:	d416      	bmi.n	18880 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18852:	059b      	lsls	r3, r3, #22
   18854:	d404      	bmi.n	18860 <bt_le_adv_start_legacy+0xe0>
   18856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18858:	b913      	cbnz	r3, 18860 <bt_le_adv_start_legacy+0xe0>
   1885a:	f1b8 0f02 	cmp.w	r8, #2
   1885e:	d15f      	bne.n	18920 <bt_le_adv_start_legacy+0x1a0>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   18860:	2302      	movs	r3, #2
   18862:	753b      	strb	r3, [r7, #20]
   18864:	e019      	b.n	1889a <bt_le_adv_start_legacy+0x11a>
   18866:	4964      	ldr	r1, [pc, #400]	; (189f8 <bt_le_adv_start_legacy+0x278>)
   18868:	f00e f9c0 	bl	26bec <memcpy>
	name_type = get_adv_name_type_param(param);
   1886c:	4628      	mov	r0, r5
   1886e:	f00e fd7f 	bl	27370 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18872:	686b      	ldr	r3, [r5, #4]
   18874:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18876:	4680      	mov	r8, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18878:	d5eb      	bpl.n	18852 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   1887a:	f887 b014 	strb.w	fp, [r7, #20]
   1887e:	e00c      	b.n	1889a <bt_le_adv_start_legacy+0x11a>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   18880:	f013 0f10 	tst.w	r3, #16
   18884:	bf0c      	ite	eq
   18886:	2301      	moveq	r3, #1
   18888:	2304      	movne	r3, #4
   1888a:	6929      	ldr	r1, [r5, #16]
   1888c:	753b      	strb	r3, [r7, #20]
   1888e:	2207      	movs	r2, #7
   18890:	f107 0016 	add.w	r0, r7, #22
   18894:	f00e f9aa 	bl	26bec <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   18898:	46a2      	mov	sl, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1889a:	210f      	movs	r1, #15
   1889c:	f242 0006 	movw	r0, #8198	; 0x2006
   188a0:	f7fe f848 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   188a4:	4604      	mov	r4, r0
   188a6:	2800      	cmp	r0, #0
   188a8:	f000 809f 	beq.w	189ea <bt_le_adv_start_legacy+0x26a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   188ac:	220f      	movs	r2, #15
   188ae:	f107 0110 	add.w	r1, r7, #16
   188b2:	300c      	adds	r0, #12
   188b4:	f010 fc0e 	bl	290d4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   188b8:	4621      	mov	r1, r4
   188ba:	2200      	movs	r2, #0
   188bc:	f242 0006 	movw	r0, #8198	; 0x2006
   188c0:	f7fe f872 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   188c4:	4604      	mov	r4, r0
   188c6:	2800      	cmp	r0, #0
   188c8:	f47f af76 	bne.w	187b8 <bt_le_adv_start_legacy+0x38>
	if (!dir_adv) {
   188cc:	f1bb 0f00 	cmp.w	fp, #0
   188d0:	d02b      	beq.n	1892a <bt_le_adv_start_legacy+0x1aa>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   188d2:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   188d4:	07dc      	lsls	r4, r3, #31
   188d6:	d436      	bmi.n	18946 <bt_le_adv_start_legacy+0x1c6>
	return bt_le_adv_set_enable_legacy(adv, enable);
   188d8:	2101      	movs	r1, #1
   188da:	4630      	mov	r0, r6
   188dc:	f00e fd58 	bl	27390 <bt_le_adv_set_enable_legacy>
	if (err) {
   188e0:	4604      	mov	r4, r0
   188e2:	2800      	cmp	r0, #0
   188e4:	d073      	beq.n	189ce <bt_le_adv_start_legacy+0x24e>
		LOG_ERR("Failed to start advertiser");
   188e6:	466d      	mov	r5, sp
   188e8:	b088      	sub	sp, #32
   188ea:	aa04      	add	r2, sp, #16
   188ec:	4b43      	ldr	r3, [pc, #268]	; (189fc <bt_le_adv_start_legacy+0x27c>)
   188ee:	6153      	str	r3, [r2, #20]
   188f0:	4b43      	ldr	r3, [pc, #268]	; (18a00 <bt_le_adv_start_legacy+0x280>)
   188f2:	6193      	str	r3, [r2, #24]
   188f4:	2303      	movs	r3, #3
   188f6:	f842 3f10 	str.w	r3, [r2, #16]!
   188fa:	4842      	ldr	r0, [pc, #264]	; (18a04 <bt_le_adv_start_legacy+0x284>)
   188fc:	2300      	movs	r3, #0
   188fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18902:	f7fb f811 	bl	13928 <z_impl_z_log_msg_static_create>
   18906:	46ad      	mov	sp, r5
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   18908:	68fd      	ldr	r5, [r7, #12]
   1890a:	2d00      	cmp	r5, #0
   1890c:	f43f af54 	beq.w	187b8 <bt_le_adv_start_legacy+0x38>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18910:	4628      	mov	r0, r5
   18912:	2100      	movs	r1, #0
   18914:	f000 fe1a 	bl	1954c <bt_conn_set_state>
			bt_conn_unref(conn);
   18918:	4628      	mov	r0, r5
   1891a:	f00e fddb 	bl	274d4 <bt_conn_unref>
   1891e:	e74b      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18920:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   18922:	f8d7 a048 	ldr.w	sl, [r7, #72]	; 0x48
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   18926:	753b      	strb	r3, [r7, #20]
   18928:	e7b7      	b.n	1889a <bt_le_adv_start_legacy+0x11a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1892a:	e9cd a801 	strd	sl, r8, [sp, #4]
   1892e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18930:	9300      	str	r3, [sp, #0]
   18932:	e9d7 2100 	ldrd	r2, r1, [r7]
   18936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   18938:	4630      	mov	r0, r6
   1893a:	f00e fca2 	bl	27282 <le_adv_update.constprop.0>
		if (err) {
   1893e:	4604      	mov	r4, r0
   18940:	2800      	cmp	r0, #0
   18942:	d0c6      	beq.n	188d2 <bt_le_adv_start_legacy+0x152>
   18944:	e738      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
		err = le_adv_start_add_conn(adv, &conn);
   18946:	f107 010c 	add.w	r1, r7, #12
   1894a:	4630      	mov	r0, r6
   1894c:	f7ff fe98 	bl	18680 <le_adv_start_add_conn>
		if (err) {
   18950:	4604      	mov	r4, r0
   18952:	2800      	cmp	r0, #0
   18954:	d0c0      	beq.n	188d8 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   18956:	f110 0f0c 	cmn.w	r0, #12
   1895a:	f47f af2d 	bne.w	187b8 <bt_le_adv_start_legacy+0x38>
   1895e:	f1bb 0f00 	cmp.w	fp, #0
   18962:	f47f af29 	bne.w	187b8 <bt_le_adv_start_legacy+0x38>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   18966:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   18968:	0798      	lsls	r0, r3, #30
   1896a:	f53f af25 	bmi.w	187b8 <bt_le_adv_start_legacy+0x38>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1896e:	686c      	ldr	r4, [r5, #4]
   18970:	f084 0402 	eor.w	r4, r4, #2
   18974:	f3c4 0440 	ubfx	r4, r4, #1, #1
   18978:	f004 0201 	and.w	r2, r4, #1
   1897c:	210e      	movs	r1, #14
   1897e:	4648      	mov	r0, r9
   18980:	f00e fc68 	bl	27254 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   18984:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   18988:	425a      	negs	r2, r3
   1898a:	415a      	adcs	r2, r3
   1898c:	2108      	movs	r1, #8
   1898e:	4648      	mov	r0, r9
   18990:	f00e fc60 	bl	27254 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   18994:	f1a8 0102 	sub.w	r1, r8, #2
   18998:	424a      	negs	r2, r1
   1899a:	414a      	adcs	r2, r1
   1899c:	4648      	mov	r0, r9
   1899e:	2109      	movs	r1, #9
   189a0:	f00e fc58 	bl	27254 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   189a4:	686a      	ldr	r2, [r5, #4]
   189a6:	210a      	movs	r1, #10
   189a8:	f002 0201 	and.w	r2, r2, #1
   189ac:	4648      	mov	r0, r9
   189ae:	f00e fc51 	bl	27254 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   189b2:	4652      	mov	r2, sl
   189b4:	210b      	movs	r1, #11
   189b6:	4648      	mov	r0, r9
   189b8:	f00e fc4c 	bl	27254 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   189bc:	686a      	ldr	r2, [r5, #4]
   189be:	210d      	movs	r1, #13
   189c0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   189c4:	4648      	mov	r0, r9
   189c6:	f00e fc45 	bl	27254 <atomic_set_bit_to>
	return 0;
   189ca:	2400      	movs	r4, #0
   189cc:	e6f4      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   189ce:	68f8      	ldr	r0, [r7, #12]
   189d0:	b108      	cbz	r0, 189d6 <bt_le_adv_start_legacy+0x256>
		bt_conn_unref(conn);
   189d2:	f00e fd7f 	bl	274d4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   189d6:	f1bb 0f00 	cmp.w	fp, #0
   189da:	d1cd      	bne.n	18978 <bt_le_adv_start_legacy+0x1f8>
   189dc:	e7c7      	b.n	1896e <bt_le_adv_start_legacy+0x1ee>
		return -EAGAIN;
   189de:	f06f 040a 	mvn.w	r4, #10
   189e2:	e6e9      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
		return -EALREADY;
   189e4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   189e8:	e6e6      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
		return -ENOBUFS;
   189ea:	f06f 0468 	mvn.w	r4, #104	; 0x68
   189ee:	e6e3      	b.n	187b8 <bt_le_adv_start_legacy+0x38>
   189f0:	20000464 	.word	0x20000464
   189f4:	20000390 	.word	0x20000390
   189f8:	0002c330 	.word	0x0002c330
   189fc:	0002d430 	.word	0x0002d430
   18a00:	0002d4c9 	.word	0x0002d4c9
   18a04:	0002a810 	.word	0x0002a810

00018a08 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   18a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18a0a:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   18a0c:	9a06      	ldr	r2, [sp, #24]
{
   18a0e:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   18a10:	e9cd 3200 	strd	r3, r2, [sp]
   18a14:	462b      	mov	r3, r5
   18a16:	460a      	mov	r2, r1
   18a18:	4601      	mov	r1, r0
   18a1a:	4811      	ldr	r0, [pc, #68]	; (18a60 <bt_le_adv_start+0x58>)
   18a1c:	f7ff feb0 	bl	18780 <bt_le_adv_start_legacy>
   18a20:	4621      	mov	r1, r4
   18a22:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   18a24:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   18a26:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   18a2a:	429d      	cmp	r5, r3
   18a2c:	d102      	bne.n	18a34 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   18a2e:	4630      	mov	r0, r6
   18a30:	b002      	add	sp, #8
   18a32:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   18a34:	880a      	ldrh	r2, [r1, #0]
   18a36:	4282      	cmp	r2, r0
   18a38:	d104      	bne.n	18a44 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   18a3a:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   18a3c:	b112      	cbz	r2, 18a44 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   18a3e:	7812      	ldrb	r2, [r2, #0]
   18a40:	07d2      	lsls	r2, r2, #31
   18a42:	d402      	bmi.n	18a4a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   18a44:	3301      	adds	r3, #1
   18a46:	3108      	adds	r1, #8
   18a48:	e7ef      	b.n	18a2a <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   18a4a:	4906      	ldr	r1, [pc, #24]	; (18a64 <bt_le_adv_start+0x5c>)
   18a4c:	4806      	ldr	r0, [pc, #24]	; (18a68 <bt_le_adv_start+0x60>)
   18a4e:	f011 f9b7 	bl	29dc0 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   18a52:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18a56:	2300      	movs	r3, #0
   18a58:	4803      	ldr	r0, [pc, #12]	; (18a68 <bt_le_adv_start+0x60>)
   18a5a:	f00b f90d 	bl	23c78 <k_work_reschedule>
   18a5e:	e7e6      	b.n	18a2e <bt_le_adv_start+0x26>
   18a60:	200003a8 	.word	0x200003a8
   18a64:	00018ae5 	.word	0x00018ae5
   18a68:	200003c0 	.word	0x200003c0

00018a6c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   18a6c:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   18a6e:	4819      	ldr	r0, [pc, #100]	; (18ad4 <bt_le_adv_stop+0x68>)
   18a70:	f00e fcb5 	bl	273de <bt_le_lim_adv_cancel_timeout>
   18a74:	4818      	ldr	r0, [pc, #96]	; (18ad8 <bt_le_adv_stop+0x6c>)
   18a76:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18a7a:	f00e fbdc 	bl	27236 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18a7e:	4816      	ldr	r0, [pc, #88]	; (18ad8 <bt_le_adv_stop+0x6c>)
   18a80:	f00e fbd3 	bl	2722a <atomic_get>
   18a84:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18a86:	061a      	lsls	r2, r3, #24
   18a88:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   18a8c:	d521      	bpl.n	18ad2 <bt_le_adv_stop+0x66>
   18a8e:	4812      	ldr	r0, [pc, #72]	; (18ad8 <bt_le_adv_stop+0x6c>)
   18a90:	f00e fbcb 	bl	2722a <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18a94:	0543      	lsls	r3, r0, #21
   18a96:	d512      	bpl.n	18abe <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   18a98:	480e      	ldr	r0, [pc, #56]	; (18ad4 <bt_le_adv_stop+0x68>)
   18a9a:	f7ff fde5 	bl	18668 <adv_is_directed>
   18a9e:	4b0f      	ldr	r3, [pc, #60]	; (18adc <bt_le_adv_stop+0x70>)
   18aa0:	b998      	cbnz	r0, 18aca <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   18aa2:	490f      	ldr	r1, [pc, #60]	; (18ae0 <bt_le_adv_stop+0x74>)
   18aa4:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18aa6:	7e18      	ldrb	r0, [r3, #24]
   18aa8:	f000 ffe4 	bl	19a74 <bt_conn_lookup_state_le>
   18aac:	4604      	mov	r4, r0
	if (conn) {
   18aae:	b130      	cbz	r0, 18abe <bt_le_adv_stop+0x52>
		conn->err = status;
   18ab0:	2100      	movs	r1, #0
   18ab2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ab4:	f000 fd4a 	bl	1954c <bt_conn_set_state>
		bt_conn_unref(conn);
   18ab8:	4620      	mov	r0, r4
   18aba:	f00e fd0b 	bl	274d4 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   18abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   18ac2:	4804      	ldr	r0, [pc, #16]	; (18ad4 <bt_le_adv_stop+0x68>)
   18ac4:	2100      	movs	r1, #0
   18ac6:	f00e bc63 	b.w	27390 <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18aca:	2205      	movs	r2, #5
   18acc:	f103 0121 	add.w	r1, r3, #33	; 0x21
   18ad0:	e7e9      	b.n	18aa6 <bt_le_adv_stop+0x3a>
}
   18ad2:	bd10      	pop	{r4, pc}
   18ad4:	200003a8 	.word	0x200003a8
   18ad8:	200003b8 	.word	0x200003b8
   18adc:	20000390 	.word	0x20000390
   18ae0:	0002c329 	.word	0x0002c329

00018ae4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   18ae4:	b598      	push	{r3, r4, r7, lr}
   18ae6:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   18ae8:	f7ff ffc0 	bl	18a6c <bt_le_adv_stop>
#endif
	if (err) {
   18aec:	b188      	cbz	r0, 18b12 <adv_timeout+0x2e>
		LOG_WRN("Failed to stop advertising: %d", err);
   18aee:	466c      	mov	r4, sp
   18af0:	b088      	sub	sp, #32
   18af2:	466a      	mov	r2, sp
   18af4:	4b08      	ldr	r3, [pc, #32]	; (18b18 <adv_timeout+0x34>)
   18af6:	6153      	str	r3, [r2, #20]
   18af8:	4b08      	ldr	r3, [pc, #32]	; (18b1c <adv_timeout+0x38>)
   18afa:	e9c2 3006 	strd	r3, r0, [r2, #24]
   18afe:	2304      	movs	r3, #4
   18b00:	f842 3f10 	str.w	r3, [r2, #16]!
   18b04:	4806      	ldr	r0, [pc, #24]	; (18b20 <adv_timeout+0x3c>)
   18b06:	2300      	movs	r3, #0
   18b08:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18b0c:	f7fa ff0c 	bl	13928 <z_impl_z_log_msg_static_create>
   18b10:	46a5      	mov	sp, r4
	}
}
   18b12:	46bd      	mov	sp, r7
   18b14:	bd98      	pop	{r3, r4, r7, pc}
   18b16:	bf00      	nop
   18b18:	0002d44f 	.word	0x0002d44f
   18b1c:	0002d4bd 	.word	0x0002d4bd
   18b20:	0002a810 	.word	0x0002a810

00018b24 <bt_le_adv_resume>:
{
   18b24:	b5f0      	push	{r4, r5, r6, r7, lr}
   18b26:	b083      	sub	sp, #12
   18b28:	483f      	ldr	r0, [pc, #252]	; (18c28 <bt_le_adv_resume+0x104>)
   18b2a:	4c3f      	ldr	r4, [pc, #252]	; (18c28 <bt_le_adv_resume+0x104>)
   18b2c:	af00      	add	r7, sp, #0
   18b2e:	f00e fb7c 	bl	2722a <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   18b32:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   18b36:	d057      	beq.n	18be8 <bt_le_adv_resume+0xc4>
   18b38:	4620      	mov	r0, r4
   18b3a:	f00e fb76 	bl	2722a <atomic_get>
   18b3e:	0603      	lsls	r3, r0, #24
   18b40:	d452      	bmi.n	18be8 <bt_le_adv_resume+0xc4>
   18b42:	4620      	mov	r0, r4
   18b44:	f00e fb71 	bl	2722a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18b48:	0546      	lsls	r6, r0, #21
   18b4a:	d54d      	bpl.n	18be8 <bt_le_adv_resume+0xc4>
	err = le_adv_start_add_conn(adv, &conn);
   18b4c:	1d39      	adds	r1, r7, #4
   18b4e:	f1a4 0010 	sub.w	r0, r4, #16
   18b52:	f7ff fd95 	bl	18680 <le_adv_start_add_conn>
	if (err) {
   18b56:	2800      	cmp	r0, #0
   18b58:	d146      	bne.n	18be8 <bt_le_adv_resume+0xc4>
   18b5a:	4620      	mov	r0, r4
   18b5c:	f00e fb65 	bl	2722a <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18b60:	f410 5f00 	tst.w	r0, #8192	; 0x2000
		bt_id_set_adv_private_addr(adv);
   18b64:	f1a4 0010 	sub.w	r0, r4, #16
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18b68:	d10c      	bne.n	18b84 <bt_le_adv_resume+0x60>
		bt_id_set_adv_private_addr(adv);
   18b6a:	f00e fb34 	bl	271d6 <bt_id_set_adv_private_addr>
	return bt_le_adv_set_enable_legacy(adv, enable);
   18b6e:	482f      	ldr	r0, [pc, #188]	; (18c2c <bt_le_adv_resume+0x108>)
   18b70:	2101      	movs	r1, #1
   18b72:	f00e fc0d 	bl	27390 <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   18b76:	687e      	ldr	r6, [r7, #4]
	if (err) {
   18b78:	2800      	cmp	r0, #0
   18b7a:	d138      	bne.n	18bee <bt_le_adv_resume+0xca>
	bt_conn_unref(conn);
   18b7c:	4630      	mov	r0, r6
   18b7e:	f00e fca9 	bl	274d4 <bt_conn_unref>
	if (persist_paused) {
   18b82:	e031      	b.n	18be8 <bt_le_adv_resume+0xc4>
		bool dir_adv = adv_is_directed(adv);
   18b84:	f7ff fd70 	bl	18668 <adv_is_directed>
   18b88:	4602      	mov	r2, r0
   18b8a:	4620      	mov	r0, r4
   18b8c:	f00e fb4d 	bl	2722a <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18b90:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18b94:	4620      	mov	r0, r4
   18b96:	f00e fb48 	bl	2722a <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18b9a:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   18b9e:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18ba0:	ea4f 0141 	mov.w	r1, r1, lsl #1
   18ba4:	4820      	ldr	r0, [pc, #128]	; (18c28 <bt_le_adv_resume+0x104>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   18ba6:	bf48      	it	mi
   18ba8:	f041 0101 	orrmi.w	r1, r1, #1
   18bac:	f00e fb3d 	bl	2722a <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   18bb0:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   18bb2:	bf48      	it	mi
   18bb4:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   18bb8:	481c      	ldr	r0, [pc, #112]	; (18c2c <bt_le_adv_resume+0x108>)
   18bba:	1cfb      	adds	r3, r7, #3
   18bbc:	f7ff fc5a 	bl	18474 <bt_id_set_adv_own_addr>
		if (err) {
   18bc0:	2800      	cmp	r0, #0
   18bc2:	d0d4      	beq.n	18b6e <bt_le_adv_resume+0x4a>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   18bc4:	466c      	mov	r4, sp
   18bc6:	b088      	sub	sp, #32
   18bc8:	466a      	mov	r2, sp
   18bca:	4b19      	ldr	r3, [pc, #100]	; (18c30 <bt_le_adv_resume+0x10c>)
   18bcc:	6153      	str	r3, [r2, #20]
   18bce:	4b19      	ldr	r3, [pc, #100]	; (18c34 <bt_le_adv_resume+0x110>)
   18bd0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   18bd4:	2304      	movs	r3, #4
   18bd6:	f842 3f10 	str.w	r3, [r2, #16]!
   18bda:	4817      	ldr	r0, [pc, #92]	; (18c38 <bt_le_adv_resume+0x114>)
   18bdc:	2300      	movs	r3, #0
   18bde:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18be2:	f7fa fea1 	bl	13928 <z_impl_z_log_msg_static_create>
   18be6:	46a5      	mov	sp, r4
}
   18be8:	370c      	adds	r7, #12
   18bea:	46bd      	mov	sp, r7
   18bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18bee:	2100      	movs	r1, #0
   18bf0:	4630      	mov	r0, r6
   18bf2:	f000 fcab 	bl	1954c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18bf6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18bfa:	480b      	ldr	r0, [pc, #44]	; (18c28 <bt_le_adv_resume+0x104>)
   18bfc:	f00e fb1b 	bl	27236 <atomic_and>
   18c00:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   18c02:	4630      	mov	r0, r6
   18c04:	f00e fc66 	bl	274d4 <bt_conn_unref>
	if (persist_paused) {
   18c08:	046b      	lsls	r3, r5, #17
   18c0a:	d5ed      	bpl.n	18be8 <bt_le_adv_resume+0xc4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18c0c:	f3bf 8f5b 	dmb	ish
   18c10:	e854 3f00 	ldrex	r3, [r4]
   18c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   18c18:	e844 3200 	strex	r2, r3, [r4]
   18c1c:	2a00      	cmp	r2, #0
   18c1e:	d1f7      	bne.n	18c10 <bt_le_adv_resume+0xec>
   18c20:	f3bf 8f5b 	dmb	ish
   18c24:	e7e0      	b.n	18be8 <bt_le_adv_resume+0xc4>
   18c26:	bf00      	nop
   18c28:	200003b8 	.word	0x200003b8
   18c2c:	200003a8 	.word	0x200003a8
   18c30:	0002d472 	.word	0x0002d472
   18c34:	0002d4ac 	.word	0x0002d4ac
   18c38:	0002a810 	.word	0x0002a810

00018c3c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   18c3c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   18c3e:	4904      	ldr	r1, [pc, #16]	; (18c50 <bt_pub_key_is_debug+0x14>)
   18c40:	2240      	movs	r2, #64	; 0x40
   18c42:	f00d ffc3 	bl	26bcc <memcmp>
}
   18c46:	fab0 f080 	clz	r0, r0
   18c4a:	0940      	lsrs	r0, r0, #5
   18c4c:	bd08      	pop	{r3, pc}
   18c4e:	bf00      	nop
   18c50:	0002d5b1 	.word	0x0002d5b1

00018c54 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   18c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   18c58:	4b4c      	ldr	r3, [pc, #304]	; (18d8c <bt_pub_key_gen+0x138>)
   18c5a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   18c5e:	f003 0306 	and.w	r3, r3, #6
   18c62:	2b06      	cmp	r3, #6
{
   18c64:	af00      	add	r7, sp, #0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   18c66:	d016      	beq.n	18c96 <bt_pub_key_gen+0x42>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   18c68:	466c      	mov	r4, sp
   18c6a:	b088      	sub	sp, #32
   18c6c:	466a      	mov	r2, sp
   18c6e:	4b48      	ldr	r3, [pc, #288]	; (18d90 <bt_pub_key_gen+0x13c>)
   18c70:	6153      	str	r3, [r2, #20]
   18c72:	4b48      	ldr	r3, [pc, #288]	; (18d94 <bt_pub_key_gen+0x140>)
   18c74:	6193      	str	r3, [r2, #24]
   18c76:	2303      	movs	r3, #3
   18c78:	f842 3f10 	str.w	r3, [r2, #16]!
   18c7c:	4846      	ldr	r0, [pc, #280]	; (18d98 <bt_pub_key_gen+0x144>)
   18c7e:	2300      	movs	r3, #0
   18c80:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18c84:	f7fa fe50 	bl	13928 <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   18c88:	f06f 0585 	mvn.w	r5, #133	; 0x85
   18c8c:	46a5      	mov	sp, r4
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   18c8e:	4628      	mov	r0, r5
   18c90:	46bd      	mov	sp, r7
   18c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!new_cb) {
   18c96:	2800      	cmp	r0, #0
   18c98:	d075      	beq.n	18d86 <bt_pub_key_gen+0x132>
	return list->head;
   18c9a:	4e40      	ldr	r6, [pc, #256]	; (18d9c <bt_pub_key_gen+0x148>)
   18c9c:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18c9e:	b1d2      	cbz	r2, 18cd6 <bt_pub_key_gen+0x82>
   18ca0:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   18ca2:	4283      	cmp	r3, r0
   18ca4:	d113      	bne.n	18cce <bt_pub_key_gen+0x7a>
			LOG_WRN("Callback already registered");
   18ca6:	466c      	mov	r4, sp
   18ca8:	b088      	sub	sp, #32
   18caa:	466a      	mov	r2, sp
   18cac:	4b3c      	ldr	r3, [pc, #240]	; (18da0 <bt_pub_key_gen+0x14c>)
   18cae:	6153      	str	r3, [r2, #20]
   18cb0:	4b38      	ldr	r3, [pc, #224]	; (18d94 <bt_pub_key_gen+0x140>)
   18cb2:	6193      	str	r3, [r2, #24]
   18cb4:	2303      	movs	r3, #3
   18cb6:	f842 3f10 	str.w	r3, [r2, #16]!
   18cba:	4837      	ldr	r0, [pc, #220]	; (18d98 <bt_pub_key_gen+0x144>)
   18cbc:	2300      	movs	r3, #0
   18cbe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18cc2:	f7fa fe31 	bl	13928 <z_impl_z_log_msg_static_create>
			return -EALREADY;
   18cc6:	f06f 0577 	mvn.w	r5, #119	; 0x77
   18cca:	46a5      	mov	sp, r4
   18ccc:	e7df      	b.n	18c8e <bt_pub_key_gen+0x3a>
	return node->next;
   18cce:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18cd0:	b10b      	cbz	r3, 18cd6 <bt_pub_key_gen+0x82>
   18cd2:	3b04      	subs	r3, #4
   18cd4:	e7e5      	b.n	18ca2 <bt_pub_key_gen+0x4e>
	parent->next = child;
   18cd6:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   18cd8:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   18cda:	1d03      	adds	r3, r0, #4
	list->head = node;
   18cdc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   18cde:	b902      	cbnz	r2, 18ce2 <bt_pub_key_gen+0x8e>
	list->tail = node;
   18ce0:	6073      	str	r3, [r6, #4]
   18ce2:	4c30      	ldr	r4, [pc, #192]	; (18da4 <bt_pub_key_gen+0x150>)
   18ce4:	f3bf 8f5b 	dmb	ish
   18ce8:	e854 8f00 	ldrex	r8, [r4]
   18cec:	f048 0320 	orr.w	r3, r8, #32
   18cf0:	e844 3200 	strex	r2, r3, [r4]
   18cf4:	2a00      	cmp	r2, #0
   18cf6:	d1f7      	bne.n	18ce8 <bt_pub_key_gen+0x94>
   18cf8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18cfc:	f018 0820 	ands.w	r8, r8, #32
   18d00:	d001      	beq.n	18d06 <bt_pub_key_gen+0xb2>
	return 0;
   18d02:	2500      	movs	r5, #0
   18d04:	e7c3      	b.n	18c8e <bt_pub_key_gen+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18d06:	f3bf 8f5b 	dmb	ish
   18d0a:	e854 3f00 	ldrex	r3, [r4]
   18d0e:	f023 0310 	bic.w	r3, r3, #16
   18d12:	e844 3200 	strex	r2, r3, [r4]
   18d16:	2a00      	cmp	r2, #0
   18d18:	d1f7      	bne.n	18d0a <bt_pub_key_gen+0xb6>
   18d1a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   18d1e:	4642      	mov	r2, r8
   18d20:	4641      	mov	r1, r8
   18d22:	f242 0025 	movw	r0, #8229	; 0x2025
   18d26:	f7fd fe3f 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   18d2a:	4605      	mov	r5, r0
   18d2c:	2800      	cmp	r0, #0
   18d2e:	d0e8      	beq.n	18d02 <bt_pub_key_gen+0xae>
		LOG_ERR("Sending LE P256 Public Key command failed");
   18d30:	46e9      	mov	r9, sp
   18d32:	b088      	sub	sp, #32
   18d34:	466a      	mov	r2, sp
   18d36:	4b1c      	ldr	r3, [pc, #112]	; (18da8 <bt_pub_key_gen+0x154>)
   18d38:	6153      	str	r3, [r2, #20]
   18d3a:	4b16      	ldr	r3, [pc, #88]	; (18d94 <bt_pub_key_gen+0x140>)
   18d3c:	6193      	str	r3, [r2, #24]
   18d3e:	2303      	movs	r3, #3
   18d40:	f842 3f10 	str.w	r3, [r2, #16]!
   18d44:	4814      	ldr	r0, [pc, #80]	; (18d98 <bt_pub_key_gen+0x144>)
   18d46:	4643      	mov	r3, r8
   18d48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18d4c:	f7fa fdec 	bl	13928 <z_impl_z_log_msg_static_create>
   18d50:	f3bf 8f5b 	dmb	ish
   18d54:	46cd      	mov	sp, r9
   18d56:	e854 3f00 	ldrex	r3, [r4]
   18d5a:	f023 0320 	bic.w	r3, r3, #32
   18d5e:	e844 3200 	strex	r2, r3, [r4]
   18d62:	2a00      	cmp	r2, #0
   18d64:	d1f7      	bne.n	18d56 <bt_pub_key_gen+0x102>
   18d66:	f3bf 8f5b 	dmb	ish
	return list->head;
   18d6a:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18d6c:	b13c      	cbz	r4, 18d7e <bt_pub_key_gen+0x12a>
			if (cb->func) {
   18d6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18d72:	3c04      	subs	r4, #4
			if (cb->func) {
   18d74:	b10b      	cbz	r3, 18d7a <bt_pub_key_gen+0x126>
				cb->func(NULL);
   18d76:	2000      	movs	r0, #0
   18d78:	4798      	blx	r3
	return node->next;
   18d7a:	6864      	ldr	r4, [r4, #4]
   18d7c:	e7f6      	b.n	18d6c <bt_pub_key_gen+0x118>
	list->head = NULL;
   18d7e:	2300      	movs	r3, #0
	list->tail = NULL;
   18d80:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   18d84:	e783      	b.n	18c8e <bt_pub_key_gen+0x3a>
		return -EINVAL;
   18d86:	f06f 0515 	mvn.w	r5, #21
   18d8a:	e780      	b.n	18c8e <bt_pub_key_gen+0x3a>
   18d8c:	20000390 	.word	0x20000390
   18d90:	0002d4fd 	.word	0x0002d4fd
   18d94:	0002d5a2 	.word	0x0002d5a2
   18d98:	0002a840 	.word	0x0002a840
   18d9c:	20002f5c 	.word	0x20002f5c
   18da0:	0002d520 	.word	0x0002d520
   18da4:	20000464 	.word	0x20000464
   18da8:	0002d540 	.word	0x0002d540

00018dac <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18dac:	4b05      	ldr	r3, [pc, #20]	; (18dc4 <bt_pub_key_get+0x18>)
   18dae:	f3bf 8f5b 	dmb	ish
   18db2:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   18db4:	4804      	ldr	r0, [pc, #16]	; (18dc8 <bt_pub_key_get+0x1c>)
   18db6:	f3bf 8f5b 	dmb	ish
	return NULL;
   18dba:	f013 0f10 	tst.w	r3, #16
}
   18dbe:	bf08      	it	eq
   18dc0:	2000      	moveq	r0, #0
   18dc2:	4770      	bx	lr
   18dc4:	20000464 	.word	0x20000464
   18dc8:	20003477 	.word	0x20003477

00018dcc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   18dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	if (dh_key_cb == cb) {
   18dd0:	4d29      	ldr	r5, [pc, #164]	; (18e78 <bt_dh_key_gen+0xac>)
   18dd2:	682b      	ldr	r3, [r5, #0]
   18dd4:	428b      	cmp	r3, r1
{
   18dd6:	af00      	add	r7, sp, #0
   18dd8:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   18dda:	d047      	beq.n	18e6c <bt_dh_key_gen+0xa0>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18ddc:	b12b      	cbz	r3, 18dea <bt_dh_key_gen+0x1e>
		return -EBUSY;
   18dde:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   18de2:	4620      	mov	r0, r4
   18de4:	46bd      	mov	sp, r7
   18de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18dea:	4b24      	ldr	r3, [pc, #144]	; (18e7c <bt_dh_key_gen+0xb0>)
   18dec:	f3bf 8f5b 	dmb	ish
   18df0:	681a      	ldr	r2, [r3, #0]
   18df2:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   18df6:	f3c2 1840 	ubfx	r8, r2, #5, #1
   18dfa:	0692      	lsls	r2, r2, #26
   18dfc:	d4ef      	bmi.n	18dde <bt_dh_key_gen+0x12>
   18dfe:	f3bf 8f5b 	dmb	ish
   18e02:	681b      	ldr	r3, [r3, #0]
   18e04:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   18e08:	06db      	lsls	r3, r3, #27
   18e0a:	d532      	bpl.n	18e72 <bt_dh_key_gen+0xa6>
	dh_key_cb = cb;
   18e0c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   18e0e:	f242 0026 	movw	r0, #8230	; 0x2026
   18e12:	2140      	movs	r1, #64	; 0x40
   18e14:	f7fd fd8e 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   18e18:	4604      	mov	r4, r0
   18e1a:	b320      	cbz	r0, 18e66 <bt_dh_key_gen+0x9a>
	return net_buf_simple_add(&buf->b, len);
   18e1c:	2140      	movs	r1, #64	; 0x40
   18e1e:	300c      	adds	r0, #12
   18e20:	f010 f952 	bl	290c8 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   18e24:	2240      	movs	r2, #64	; 0x40
   18e26:	4631      	mov	r1, r6
   18e28:	f00d fee0 	bl	26bec <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   18e2c:	4621      	mov	r1, r4
   18e2e:	4642      	mov	r2, r8
   18e30:	f242 0026 	movw	r0, #8230	; 0x2026
   18e34:	f7fd fdb8 	bl	169a8 <bt_hci_cmd_send_sync>
	if (err) {
   18e38:	4604      	mov	r4, r0
   18e3a:	2800      	cmp	r0, #0
   18e3c:	d0d1      	beq.n	18de2 <bt_dh_key_gen+0x16>
		dh_key_cb = NULL;
   18e3e:	2300      	movs	r3, #0
   18e40:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18e42:	466d      	mov	r5, sp
   18e44:	b088      	sub	sp, #32
   18e46:	466a      	mov	r2, sp
   18e48:	490d      	ldr	r1, [pc, #52]	; (18e80 <bt_dh_key_gen+0xb4>)
   18e4a:	6151      	str	r1, [r2, #20]
   18e4c:	490d      	ldr	r1, [pc, #52]	; (18e84 <bt_dh_key_gen+0xb8>)
   18e4e:	e9c2 1406 	strd	r1, r4, [r2, #24]
   18e52:	2104      	movs	r1, #4
   18e54:	f842 1f10 	str.w	r1, [r2, #16]!
   18e58:	480b      	ldr	r0, [pc, #44]	; (18e88 <bt_dh_key_gen+0xbc>)
   18e5a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   18e5e:	f7fa fd63 	bl	13928 <z_impl_z_log_msg_static_create>
   18e62:	46ad      	mov	sp, r5
		return err;
   18e64:	e7bd      	b.n	18de2 <bt_dh_key_gen+0x16>
		return -ENOBUFS;
   18e66:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18e6a:	e7e8      	b.n	18e3e <bt_dh_key_gen+0x72>
		return -EALREADY;
   18e6c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18e70:	e7b7      	b.n	18de2 <bt_dh_key_gen+0x16>
		return -EADDRNOTAVAIL;
   18e72:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   18e76:	e7b4      	b.n	18de2 <bt_dh_key_gen+0x16>
   18e78:	20002f58 	.word	0x20002f58
   18e7c:	20000464 	.word	0x20000464
   18e80:	0002d56e 	.word	0x0002d56e
   18e84:	0002d594 	.word	0x0002d594
   18e88:	0002a840 	.word	0x0002a840

00018e8c <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   18e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18e8e:	4c1b      	ldr	r4, [pc, #108]	; (18efc <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   18e90:	68c6      	ldr	r6, [r0, #12]
   18e92:	f3bf 8f5b 	dmb	ish
   18e96:	e854 3f00 	ldrex	r3, [r4]
   18e9a:	f023 0320 	bic.w	r3, r3, #32
   18e9e:	e844 3200 	strex	r2, r3, [r4]
   18ea2:	2a00      	cmp	r2, #0
   18ea4:	d1f7      	bne.n	18e96 <bt_hci_evt_le_pkey_complete+0xa>
   18ea6:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   18eaa:	7833      	ldrb	r3, [r6, #0]
   18eac:	b983      	cbnz	r3, 18ed0 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   18eae:	4814      	ldr	r0, [pc, #80]	; (18f00 <bt_hci_evt_le_pkey_complete+0x74>)
   18eb0:	2240      	movs	r2, #64	; 0x40
   18eb2:	1c71      	adds	r1, r6, #1
   18eb4:	f00d fe9a 	bl	26bec <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18eb8:	f3bf 8f5b 	dmb	ish
   18ebc:	e854 3f00 	ldrex	r3, [r4]
   18ec0:	f043 0310 	orr.w	r3, r3, #16
   18ec4:	e844 3200 	strex	r2, r3, [r4]
   18ec8:	2a00      	cmp	r2, #0
   18eca:	d1f7      	bne.n	18ebc <bt_hci_evt_le_pkey_complete+0x30>
   18ecc:	f3bf 8f5b 	dmb	ish
	return list->head;
   18ed0:	4d0c      	ldr	r5, [pc, #48]	; (18f04 <bt_hci_evt_le_pkey_complete+0x78>)
   18ed2:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ed4:	b16c      	cbz	r4, 18ef2 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   18ed6:	4f0a      	ldr	r7, [pc, #40]	; (18f00 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18ed8:	3c04      	subs	r4, #4
		if (cb->func) {
   18eda:	6823      	ldr	r3, [r4, #0]
   18edc:	b12b      	cbz	r3, 18eea <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   18ede:	7832      	ldrb	r2, [r6, #0]
   18ee0:	2a00      	cmp	r2, #0
   18ee2:	bf0c      	ite	eq
   18ee4:	4638      	moveq	r0, r7
   18ee6:	2000      	movne	r0, #0
   18ee8:	4798      	blx	r3
	return node->next;
   18eea:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   18eec:	b10c      	cbz	r4, 18ef2 <bt_hci_evt_le_pkey_complete+0x66>
   18eee:	3c04      	subs	r4, #4
   18ef0:	e7f3      	b.n	18eda <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   18ef2:	2300      	movs	r3, #0
	list->tail = NULL;
   18ef4:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   18ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18efa:	bf00      	nop
   18efc:	20000464 	.word	0x20000464
   18f00:	20003477 	.word	0x20003477
   18f04:	20002f5c 	.word	0x20002f5c

00018f08 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   18f08:	4905      	ldr	r1, [pc, #20]	; (18f20 <bt_hci_evt_le_dhkey_complete+0x18>)
   18f0a:	680b      	ldr	r3, [r1, #0]
   18f0c:	b133      	cbz	r3, 18f1c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   18f0e:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   18f10:	2000      	movs	r0, #0
   18f12:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   18f14:	7811      	ldrb	r1, [r2, #0]
   18f16:	b901      	cbnz	r1, 18f1a <bt_hci_evt_le_dhkey_complete+0x12>
   18f18:	1c50      	adds	r0, r2, #1
   18f1a:	4718      	bx	r3
	}
}
   18f1c:	4770      	bx	lr
   18f1e:	bf00      	nop
   18f20:	20002f58 	.word	0x20002f58

00018f24 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   18f24:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18f26:	4b0b      	ldr	r3, [pc, #44]	; (18f54 <notify_connected+0x30>)
   18f28:	681d      	ldr	r5, [r3, #0]
{
   18f2a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18f2c:	b925      	cbnz	r5, 18f38 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f2e:	4d0a      	ldr	r5, [pc, #40]	; (18f58 <notify_connected+0x34>)
   18f30:	4e0a      	ldr	r6, [pc, #40]	; (18f5c <notify_connected+0x38>)
   18f32:	42b5      	cmp	r5, r6
   18f34:	d307      	bcc.n	18f46 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   18f36:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   18f38:	682b      	ldr	r3, [r5, #0]
   18f3a:	b113      	cbz	r3, 18f42 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   18f3c:	7b21      	ldrb	r1, [r4, #12]
   18f3e:	4620      	mov	r0, r4
   18f40:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18f42:	69ad      	ldr	r5, [r5, #24]
   18f44:	e7f2      	b.n	18f2c <notify_connected+0x8>
		if (cb->connected) {
   18f46:	682b      	ldr	r3, [r5, #0]
   18f48:	b113      	cbz	r3, 18f50 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   18f4a:	7b21      	ldrb	r1, [r4, #12]
   18f4c:	4620      	mov	r0, r4
   18f4e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f50:	351c      	adds	r5, #28
   18f52:	e7ee      	b.n	18f32 <notify_connected+0xe>
   18f54:	20002f94 	.word	0x20002f94
   18f58:	0002a76c 	.word	0x0002a76c
   18f5c:	0002a7a4 	.word	0x0002a7a4

00018f60 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   18f60:	b580      	push	{r7, lr}
   18f62:	af00      	add	r7, sp, #0
		LOG_WRN("Unable to allocate buffer within timeout");
   18f64:	b088      	sub	sp, #32
   18f66:	466a      	mov	r2, sp
   18f68:	4b07      	ldr	r3, [pc, #28]	; (18f88 <bt_conn_create_pdu_timeout.part.0+0x28>)
   18f6a:	6153      	str	r3, [r2, #20]
   18f6c:	4b07      	ldr	r3, [pc, #28]	; (18f8c <bt_conn_create_pdu_timeout.part.0+0x2c>)
   18f6e:	6193      	str	r3, [r2, #24]
   18f70:	2303      	movs	r3, #3
   18f72:	f842 3f10 	str.w	r3, [r2, #16]!
   18f76:	4806      	ldr	r0, [pc, #24]	; (18f90 <bt_conn_create_pdu_timeout.part.0+0x30>)
   18f78:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18f7c:	f00e fa5c 	bl	27438 <z_log_msg_static_create.constprop.0>
}
   18f80:	2000      	movs	r0, #0
   18f82:	46bd      	mov	sp, r7
   18f84:	bd80      	pop	{r7, pc}
   18f86:	bf00      	nop
   18f88:	0002d5f8 	.word	0x0002d5f8
   18f8c:	0002d8c5 	.word	0x0002d8c5
   18f90:	0002a820 	.word	0x0002a820

00018f94 <tx_notify>:
{
   18f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18f98:	4f15      	ldr	r7, [pc, #84]	; (18ff0 <tx_notify+0x5c>)
{
   18f9a:	4604      	mov	r4, r0
	tx->cb = NULL;
   18f9c:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   18fa0:	f04f 0240 	mov.w	r2, #64	; 0x40
   18fa4:	f3ef 8311 	mrs	r3, BASEPRI
   18fa8:	f382 8812 	msr	BASEPRI_MAX, r2
   18fac:	f3bf 8f6f 	isb	sy
	return list->head;
   18fb0:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   18fb2:	b929      	cbnz	r1, 18fc0 <tx_notify+0x2c>
	__asm__ volatile(
   18fb4:	f383 8811 	msr	BASEPRI, r3
   18fb8:	f3bf 8f6f 	isb	sy
}
   18fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18fc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   18fc2:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18fc4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18fc6:	4281      	cmp	r1, r0
	list->tail = node;
   18fc8:	bf08      	it	eq
   18fca:	6262      	streq	r2, [r4, #36]	; 0x24
   18fcc:	f383 8811 	msr	BASEPRI, r3
   18fd0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18fd4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   18fd8:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18fdc:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   18fe0:	4638      	mov	r0, r7
   18fe2:	f010 fe0d 	bl	29c00 <k_queue_append>
		cb(conn, user_data, 0);
   18fe6:	2200      	movs	r2, #0
   18fe8:	4631      	mov	r1, r6
   18fea:	4620      	mov	r0, r4
   18fec:	47a8      	blx	r5
	while (1) {
   18fee:	e7d7      	b.n	18fa0 <tx_notify+0xc>
   18ff0:	20000bfc 	.word	0x20000bfc

00018ff4 <conn_tx_destroy>:
{
   18ff4:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   18ff6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18ffa:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18ffc:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   19000:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   19002:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   19004:	4805      	ldr	r0, [pc, #20]	; (1901c <conn_tx_destroy+0x28>)
   19006:	f010 fdfb 	bl	29c00 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   1900a:	4631      	mov	r1, r6
   1900c:	4620      	mov	r0, r4
   1900e:	462b      	mov	r3, r5
   19010:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   19014:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   19018:	4718      	bx	r3
   1901a:	bf00      	nop
   1901c:	20000bfc 	.word	0x20000bfc

00019020 <send_frag>:
{
   19020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   19024:	f8df 9188 	ldr.w	r9, [pc, #392]	; 191b0 <send_frag+0x190>
{
   19028:	b083      	sub	sp, #12
   1902a:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   1902c:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   19030:	2b00      	cmp	r3, #0
{
   19032:	af00      	add	r7, sp, #0
   19034:	4604      	mov	r4, r0
   19036:	460e      	mov	r6, r1
	return NULL;
   19038:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   1903c:	4615      	mov	r5, r2
	return NULL;
   1903e:	bf08      	it	eq
   19040:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   19042:	2200      	movs	r2, #0
   19044:	2300      	movs	r3, #0
   19046:	f00a fc03 	bl	23850 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   1904a:	2800      	cmp	r0, #0
   1904c:	f040 80ac 	bne.w	191a8 <send_frag+0x188>
	if (frag) {
   19050:	2d00      	cmp	r5, #0
   19052:	f000 8088 	beq.w	19166 <send_frag+0x146>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   19056:	f105 0b0c 	add.w	fp, r5, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1905a:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1905e:	607b      	str	r3, [r7, #4]
   19060:	4658      	mov	r0, fp
   19062:	f010 f874 	bl	2914e <net_buf_simple_tailroom>
   19066:	687b      	ldr	r3, [r7, #4]
   19068:	4298      	cmp	r0, r3
   1906a:	d977      	bls.n	1915c <send_frag+0x13c>
	return bt_dev.le.acl_mtu;
   1906c:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19070:	f856 1f0c 	ldr.w	r1, [r6, #12]!
   19074:	607a      	str	r2, [r7, #4]
   19076:	4658      	mov	r0, fp
   19078:	f010 f82c 	bl	290d4 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1907c:	687a      	ldr	r2, [r7, #4]
   1907e:	4630      	mov	r0, r6
   19080:	4611      	mov	r1, r2
   19082:	f010 f840 	bl	29106 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   19086:	7b63      	ldrb	r3, [r4, #13]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   19088:	69ae      	ldr	r6, [r5, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   1908a:	2b07      	cmp	r3, #7
   1908c:	f040 8089 	bne.w	191a2 <send_frag+0x182>
	__asm__ volatile(
   19090:	f04f 0340 	mov.w	r3, #64	; 0x40
   19094:	f3ef 8211 	mrs	r2, BASEPRI
   19098:	f383 8812 	msr	BASEPRI_MAX, r3
   1909c:	f3bf 8f6f 	isb	sy
	if (tx) {
   190a0:	2e00      	cmp	r6, #0
   190a2:	d06b      	beq.n	1917c <send_frag+0x15c>
	parent->next = child;
   190a4:	2300      	movs	r3, #0
   190a6:	6033      	str	r3, [r6, #0]
	return list->tail;
   190a8:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   190aa:	2b00      	cmp	r3, #0
   190ac:	d163      	bne.n	19176 <send_frag+0x156>
	list->head = node;
   190ae:	e9c4 6605 	strd	r6, r6, [r4, #20]
	__asm__ volatile(
   190b2:	f382 8811 	msr	BASEPRI, r2
   190b6:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   190ba:	2104      	movs	r1, #4
   190bc:	f105 000c 	add.w	r0, r5, #12
   190c0:	f010 f819 	bl	290f6 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   190c4:	8823      	ldrh	r3, [r4, #0]
   190c6:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   190ca:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   190ce:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   190d2:	8a2b      	ldrh	r3, [r5, #16]
   190d4:	3b04      	subs	r3, #4
   190d6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   190d8:	2302      	movs	r3, #2
   190da:	762b      	strb	r3, [r5, #24]
	return bt_send(buf);
   190dc:	4628      	mov	r0, r5
   190de:	f7fe f81b 	bl	17118 <bt_send>
	if (err) {
   190e2:	4680      	mov	r8, r0
   190e4:	2800      	cmp	r0, #0
   190e6:	d034      	beq.n	19152 <send_frag+0x132>
		LOG_ERR("Unable to send to driver (err %d)", err);
   190e8:	46eb      	mov	fp, sp
   190ea:	b088      	sub	sp, #32
   190ec:	466a      	mov	r2, sp
   190ee:	4b31      	ldr	r3, [pc, #196]	; (191b4 <send_frag+0x194>)
   190f0:	6153      	str	r3, [r2, #20]
   190f2:	4b31      	ldr	r3, [pc, #196]	; (191b8 <send_frag+0x198>)
   190f4:	e9c2 3006 	strd	r3, r0, [r2, #24]
   190f8:	2304      	movs	r3, #4
   190fa:	f842 3f10 	str.w	r3, [r2, #16]!
   190fe:	482f      	ldr	r0, [pc, #188]	; (191bc <send_frag+0x19c>)
   19100:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19104:	f00e f998 	bl	27438 <z_log_msg_static_create.constprop.0>
   19108:	46dd      	mov	sp, fp
	__asm__ volatile(
   1910a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1910e:	f3ef 8811 	mrs	r8, BASEPRI
   19112:	f383 8812 	msr	BASEPRI_MAX, r3
   19116:	f3bf 8f6f 	isb	sy
		if (tx) {
   1911a:	2e00      	cmp	r6, #0
   1911c:	d03b      	beq.n	19196 <send_frag+0x176>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1911e:	4631      	mov	r1, r6
   19120:	f104 0014 	add.w	r0, r4, #20
   19124:	f00e f95e 	bl	273e4 <sys_slist_find_and_remove>
	__asm__ volatile(
   19128:	f388 8811 	msr	BASEPRI, r8
   1912c:	f3bf 8f6f 	isb	sy
		err = -EIO;
   19130:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   19134:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   19138:	4821      	ldr	r0, [pc, #132]	; (191c0 <send_frag+0x1a0>)
   1913a:	2b00      	cmp	r3, #0
   1913c:	bf08      	it	eq
   1913e:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   19140:	f00a fb60 	bl	23804 <z_impl_k_sem_give>
	if (tx) {
   19144:	b12e      	cbz	r6, 19152 <send_frag+0x132>
		tx_data(buf)->tx = NULL;
   19146:	2300      	movs	r3, #0
   19148:	61ab      	str	r3, [r5, #24]
		conn_tx_destroy(conn, tx);
   1914a:	4631      	mov	r1, r6
   1914c:	4620      	mov	r0, r4
   1914e:	f7ff ff51 	bl	18ff4 <conn_tx_destroy>
}
   19152:	4640      	mov	r0, r8
   19154:	370c      	adds	r7, #12
   19156:	46bd      	mov	sp, r7
   19158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   1915c:	4658      	mov	r0, fp
   1915e:	f00f fff6 	bl	2914e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19162:	b282      	uxth	r2, r0
   19164:	e784      	b.n	19070 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   19166:	2200      	movs	r2, #0
   19168:	2300      	movs	r3, #0
   1916a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1916e:	f00f ff4a 	bl	29006 <net_buf_get>
   19172:	4605      	mov	r5, r0
		frag = buf;
   19174:	e787      	b.n	19086 <send_frag+0x66>
	parent->next = child;
   19176:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19178:	61a6      	str	r6, [r4, #24]
}
   1917a:	e79a      	b.n	190b2 <send_frag+0x92>
	return list->tail;
   1917c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1917e:	b133      	cbz	r3, 1918e <send_frag+0x16e>
			pending_no_cb = &tail_tx->pending_no_cb;
   19180:	f103 0a0c 	add.w	sl, r3, #12
   19184:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   19186:	3301      	adds	r3, #1
   19188:	f8ca 3000 	str.w	r3, [sl]
   1918c:	e791      	b.n	190b2 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   1918e:	69e3      	ldr	r3, [r4, #28]
   19190:	f104 0a1c 	add.w	sl, r4, #28
   19194:	e7f7      	b.n	19186 <send_frag+0x166>
			(*pending_no_cb)--;
   19196:	f8da 3000 	ldr.w	r3, [sl]
   1919a:	3b01      	subs	r3, #1
   1919c:	f8ca 3000 	str.w	r3, [sl]
   191a0:	e7c2      	b.n	19128 <send_frag+0x108>
		err = -ENOTCONN;
   191a2:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   191a6:	e7c5      	b.n	19134 <send_frag+0x114>
		return -ENOBUFS;
   191a8:	f06f 0868 	mvn.w	r8, #104	; 0x68
   191ac:	e7d1      	b.n	19152 <send_frag+0x132>
   191ae:	bf00      	nop
   191b0:	20000390 	.word	0x20000390
   191b4:	0002ca32 	.word	0x0002ca32
   191b8:	0002d8f2 	.word	0x0002d8f2
   191bc:	0002a820 	.word	0x0002a820
   191c0:	20000498 	.word	0x20000498

000191c4 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   191c4:	4804      	ldr	r0, [pc, #16]	; (191d8 <bt_conn_get_pkts+0x14>)
   191c6:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   191ca:	2b00      	cmp	r3, #0
   191cc:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   191d0:	bf08      	it	eq
   191d2:	2000      	moveq	r0, #0
   191d4:	4770      	bx	lr
   191d6:	bf00      	nop
   191d8:	20000390 	.word	0x20000390

000191dc <bt_conn_new>:
{
   191dc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   191de:	2200      	movs	r2, #0
   191e0:	4604      	mov	r4, r0
   191e2:	428a      	cmp	r2, r1
   191e4:	d102      	bne.n	191ec <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   191e6:	2400      	movs	r4, #0
}
   191e8:	4620      	mov	r0, r4
   191ea:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   191ec:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   191f0:	2001      	movs	r0, #1
   191f2:	f3bf 8f5b 	dmb	ish
   191f6:	e853 5f00 	ldrex	r5, [r3]
   191fa:	2d00      	cmp	r5, #0
   191fc:	d104      	bne.n	19208 <bt_conn_new+0x2c>
   191fe:	e843 0c00 	strex	ip, r0, [r3]
   19202:	f1bc 0f00 	cmp.w	ip, #0
   19206:	d1f6      	bne.n	191f6 <bt_conn_new+0x1a>
   19208:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1920c:	d002      	beq.n	19214 <bt_conn_new+0x38>
   1920e:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   19210:	4402      	add	r2, r0
   19212:	e7e6      	b.n	191e2 <bt_conn_new+0x6>
	if (!conn) {
   19214:	2c00      	cmp	r4, #0
   19216:	d0e6      	beq.n	191e6 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   19218:	22bc      	movs	r2, #188	; 0xbc
   1921a:	2100      	movs	r1, #0
   1921c:	4620      	mov	r0, r4
   1921e:	f00d fcf0 	bl	26c02 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19222:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19226:	4904      	ldr	r1, [pc, #16]	; (19238 <bt_conn_new+0x5c>)
   19228:	f010 fdca 	bl	29dc0 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1922c:	4903      	ldr	r1, [pc, #12]	; (1923c <bt_conn_new+0x60>)
   1922e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19232:	f010 fd81 	bl	29d38 <k_work_init>
	return conn;
   19236:	e7d7      	b.n	191e8 <bt_conn_new+0xc>
   19238:	00019b25 	.word	0x00019b25
   1923c:	0002743f 	.word	0x0002743f

00019240 <bt_conn_recv>:
{
   19240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19244:	4616      	mov	r6, r2
   19246:	af00      	add	r7, sp, #0
   19248:	4604      	mov	r4, r0
   1924a:	460d      	mov	r5, r1
	tx_notify(conn);
   1924c:	f7ff fea2 	bl	18f94 <tx_notify>
	switch (flags) {
   19250:	2e01      	cmp	r6, #1
   19252:	d038      	beq.n	192c6 <bt_conn_recv+0x86>
   19254:	2e02      	cmp	r6, #2
   19256:	d17b      	bne.n	19350 <bt_conn_recv+0x110>
		if (conn->rx) {
   19258:	6923      	ldr	r3, [r4, #16]
   1925a:	b193      	cbz	r3, 19282 <bt_conn_recv+0x42>
			LOG_ERR("Unexpected first L2CAP frame");
   1925c:	466e      	mov	r6, sp
   1925e:	b088      	sub	sp, #32
   19260:	466a      	mov	r2, sp
   19262:	4b48      	ldr	r3, [pc, #288]	; (19384 <bt_conn_recv+0x144>)
   19264:	6153      	str	r3, [r2, #20]
   19266:	4b48      	ldr	r3, [pc, #288]	; (19388 <bt_conn_recv+0x148>)
   19268:	6193      	str	r3, [r2, #24]
   1926a:	2303      	movs	r3, #3
   1926c:	4847      	ldr	r0, [pc, #284]	; (1938c <bt_conn_recv+0x14c>)
   1926e:	f842 3f10 	str.w	r3, [r2, #16]!
   19272:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19276:	f00e f8df 	bl	27438 <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1927a:	4620      	mov	r0, r4
   1927c:	46b5      	mov	sp, r6
   1927e:	f00e f8e1 	bl	27444 <bt_conn_reset_rx_state>
		conn->rx = buf;
   19282:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19284:	6921      	ldr	r1, [r4, #16]
   19286:	8a08      	ldrh	r0, [r1, #16]
   19288:	2801      	cmp	r0, #1
   1928a:	d937      	bls.n	192fc <bt_conn_recv+0xbc>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1928c:	68cb      	ldr	r3, [r1, #12]
   1928e:	881b      	ldrh	r3, [r3, #0]
   19290:	3304      	adds	r3, #4
   19292:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   19294:	4298      	cmp	r0, r3
   19296:	d331      	bcc.n	192fc <bt_conn_recv+0xbc>
	if (conn->rx->len > acl_total_len) {
   19298:	d96d      	bls.n	19376 <bt_conn_recv+0x136>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1929a:	466d      	mov	r5, sp
   1929c:	b08a      	sub	sp, #40	; 0x28
   1929e:	466a      	mov	r2, sp
   192a0:	493b      	ldr	r1, [pc, #236]	; (19390 <bt_conn_recv+0x150>)
   192a2:	6151      	str	r1, [r2, #20]
   192a4:	4938      	ldr	r1, [pc, #224]	; (19388 <bt_conn_recv+0x148>)
   192a6:	6213      	str	r3, [r2, #32]
   192a8:	2305      	movs	r3, #5
   192aa:	e9c2 1006 	strd	r1, r0, [r2, #24]
   192ae:	f842 3f10 	str.w	r3, [r2, #16]!
   192b2:	4836      	ldr	r0, [pc, #216]	; (1938c <bt_conn_recv+0x14c>)
   192b4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   192b8:	f00e f8be 	bl	27438 <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   192bc:	4620      	mov	r0, r4
   192be:	46ad      	mov	sp, r5
   192c0:	f00e f8c0 	bl	27444 <bt_conn_reset_rx_state>
		return;
   192c4:	e01a      	b.n	192fc <bt_conn_recv+0xbc>
		if (!conn->rx) {
   192c6:	6920      	ldr	r0, [r4, #16]
   192c8:	b998      	cbnz	r0, 192f2 <bt_conn_recv+0xb2>
			LOG_ERR("Unexpected L2CAP continuation");
   192ca:	466e      	mov	r6, sp
   192cc:	b088      	sub	sp, #32
   192ce:	466a      	mov	r2, sp
   192d0:	4b30      	ldr	r3, [pc, #192]	; (19394 <bt_conn_recv+0x154>)
   192d2:	6153      	str	r3, [r2, #20]
   192d4:	4b2c      	ldr	r3, [pc, #176]	; (19388 <bt_conn_recv+0x148>)
   192d6:	6193      	str	r3, [r2, #24]
   192d8:	2303      	movs	r3, #3
   192da:	f842 3f10 	str.w	r3, [r2, #16]!
   192de:	482b      	ldr	r0, [pc, #172]	; (1938c <bt_conn_recv+0x14c>)
   192e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   192e4:	f00e f8a8 	bl	27438 <z_log_msg_static_create.constprop.0>
   192e8:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   192ea:	4620      	mov	r0, r4
   192ec:	f00e f8aa 	bl	27444 <bt_conn_reset_rx_state>
   192f0:	e001      	b.n	192f6 <bt_conn_recv+0xb6>
		if (!buf->len) {
   192f2:	8a2e      	ldrh	r6, [r5, #16]
   192f4:	b92e      	cbnz	r6, 19302 <bt_conn_recv+0xc2>
		net_buf_unref(buf);
   192f6:	4628      	mov	r0, r5
   192f8:	f006 fb94 	bl	1fa24 <net_buf_unref>
}
   192fc:	46bd      	mov	sp, r7
   192fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19302:	300c      	adds	r0, #12
   19304:	f00f ff23 	bl	2914e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19308:	4286      	cmp	r6, r0
   1930a:	d917      	bls.n	1933c <bt_conn_recv+0xfc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1930c:	466e      	mov	r6, sp
   1930e:	b088      	sub	sp, #32
   19310:	466a      	mov	r2, sp
   19312:	4b21      	ldr	r3, [pc, #132]	; (19398 <bt_conn_recv+0x158>)
   19314:	6153      	str	r3, [r2, #20]
   19316:	4b1c      	ldr	r3, [pc, #112]	; (19388 <bt_conn_recv+0x148>)
   19318:	6193      	str	r3, [r2, #24]
   1931a:	2303      	movs	r3, #3
   1931c:	f842 3f10 	str.w	r3, [r2, #16]!
   19320:	481a      	ldr	r0, [pc, #104]	; (1938c <bt_conn_recv+0x14c>)
   19322:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19326:	f00e f887 	bl	27438 <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   1932a:	2200      	movs	r2, #0
   1932c:	6921      	ldr	r1, [r4, #16]
   1932e:	46b5      	mov	sp, r6
   19330:	4620      	mov	r0, r4
   19332:	f000 fe81 	bl	1a038 <bt_l2cap_recv>
			conn->rx = NULL;
   19336:	2300      	movs	r3, #0
   19338:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1933a:	e7dc      	b.n	192f6 <bt_conn_recv+0xb6>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1933c:	6920      	ldr	r0, [r4, #16]
   1933e:	8a2a      	ldrh	r2, [r5, #16]
   19340:	68e9      	ldr	r1, [r5, #12]
   19342:	300c      	adds	r0, #12
   19344:	f00f fec6 	bl	290d4 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19348:	4628      	mov	r0, r5
   1934a:	f006 fb6b 	bl	1fa24 <net_buf_unref>
		break;
   1934e:	e799      	b.n	19284 <bt_conn_recv+0x44>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19350:	46e8      	mov	r8, sp
   19352:	b088      	sub	sp, #32
   19354:	466b      	mov	r3, sp
   19356:	4a11      	ldr	r2, [pc, #68]	; (1939c <bt_conn_recv+0x15c>)
   19358:	615a      	str	r2, [r3, #20]
   1935a:	4a0b      	ldr	r2, [pc, #44]	; (19388 <bt_conn_recv+0x148>)
   1935c:	480b      	ldr	r0, [pc, #44]	; (1938c <bt_conn_recv+0x14c>)
	switch (flags) {
   1935e:	e9c3 2606 	strd	r2, r6, [r3, #24]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   19362:	461a      	mov	r2, r3
   19364:	2304      	movs	r3, #4
   19366:	f842 3f10 	str.w	r3, [r2, #16]!
   1936a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1936e:	f00e f863 	bl	27438 <z_log_msg_static_create.constprop.0>
   19372:	46c5      	mov	sp, r8
   19374:	e7b9      	b.n	192ea <bt_conn_recv+0xaa>
	conn->rx = NULL;
   19376:	2300      	movs	r3, #0
   19378:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1937a:	2201      	movs	r2, #1
   1937c:	4620      	mov	r0, r4
   1937e:	f000 fe5b 	bl	1a038 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   19382:	e7bb      	b.n	192fc <bt_conn_recv+0xbc>
   19384:	0002d625 	.word	0x0002d625
   19388:	0002d90f 	.word	0x0002d90f
   1938c:	0002a820 	.word	0x0002a820
   19390:	0002d6b5 	.word	0x0002d6b5
   19394:	0002d646 	.word	0x0002d646
   19398:	0002d668 	.word	0x0002d668
   1939c:	0002d693 	.word	0x0002d693

000193a0 <bt_conn_send_cb>:
{
   193a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   193a4:	4699      	mov	r9, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   193a6:	7acb      	ldrb	r3, [r1, #11]
   193a8:	2b07      	cmp	r3, #7
{
   193aa:	af00      	add	r7, sp, #0
   193ac:	4606      	mov	r6, r0
   193ae:	460d      	mov	r5, r1
   193b0:	4690      	mov	r8, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   193b2:	d814      	bhi.n	193de <bt_conn_send_cb+0x3e>
		LOG_ERR("not enough room in user_data");
   193b4:	466c      	mov	r4, sp
   193b6:	b088      	sub	sp, #32
   193b8:	466a      	mov	r2, sp
   193ba:	4b34      	ldr	r3, [pc, #208]	; (1948c <bt_conn_send_cb+0xec>)
   193bc:	6153      	str	r3, [r2, #20]
   193be:	4b34      	ldr	r3, [pc, #208]	; (19490 <bt_conn_send_cb+0xf0>)
   193c0:	6193      	str	r3, [r2, #24]
   193c2:	2303      	movs	r3, #3
   193c4:	4833      	ldr	r0, [pc, #204]	; (19494 <bt_conn_send_cb+0xf4>)
   193c6:	f842 3f10 	str.w	r3, [r2, #16]!
   193ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193ce:	f00e f833 	bl	27438 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   193d2:	f06f 0015 	mvn.w	r0, #21
   193d6:	46a5      	mov	sp, r4
}
   193d8:	46bd      	mov	sp, r7
   193da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   193de:	7b43      	ldrb	r3, [r0, #13]
   193e0:	2b07      	cmp	r3, #7
   193e2:	d012      	beq.n	1940a <bt_conn_send_cb+0x6a>
		LOG_ERR("not connected!");
   193e4:	466c      	mov	r4, sp
   193e6:	b088      	sub	sp, #32
   193e8:	466a      	mov	r2, sp
   193ea:	4b2b      	ldr	r3, [pc, #172]	; (19498 <bt_conn_send_cb+0xf8>)
   193ec:	6153      	str	r3, [r2, #20]
   193ee:	4b28      	ldr	r3, [pc, #160]	; (19490 <bt_conn_send_cb+0xf0>)
   193f0:	6193      	str	r3, [r2, #24]
   193f2:	2303      	movs	r3, #3
   193f4:	f842 3f10 	str.w	r3, [r2, #16]!
   193f8:	4826      	ldr	r0, [pc, #152]	; (19494 <bt_conn_send_cb+0xf4>)
   193fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   193fe:	f00e f81b 	bl	27438 <z_log_msg_static_create.constprop.0>
   19402:	46a5      	mov	sp, r4
		return -ENOTCONN;
   19404:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19408:	e7e6      	b.n	193d8 <bt_conn_send_cb+0x38>
	if (cb) {
   1940a:	2a00      	cmp	r2, #0
   1940c:	d039      	beq.n	19482 <bt_conn_send_cb+0xe2>
	return z_impl_z_current_get();
   1940e:	f00a ff15 	bl	2423c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19412:	4b22      	ldr	r3, [pc, #136]	; (1949c <bt_conn_send_cb+0xfc>)
   19414:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19416:	4822      	ldr	r0, [pc, #136]	; (194a0 <bt_conn_send_cb+0x100>)
   19418:	bf07      	ittee	eq
   1941a:	2200      	moveq	r2, #0
   1941c:	2300      	moveq	r3, #0
   1941e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   19422:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   19426:	f00a f9b9 	bl	2379c <z_impl_k_queue_get>
   1942a:	4604      	mov	r4, r0
		if (!tx) {
   1942c:	b358      	cbz	r0, 19486 <bt_conn_send_cb+0xe6>
		if (conn->state != BT_CONN_CONNECTED) {
   1942e:	7b73      	ldrb	r3, [r6, #13]
   19430:	2b07      	cmp	r3, #7
   19432:	d018      	beq.n	19466 <bt_conn_send_cb+0xc6>
			LOG_WRN("Disconnected while allocating context");
   19434:	466d      	mov	r5, sp
   19436:	b088      	sub	sp, #32
   19438:	466a      	mov	r2, sp
   1943a:	4b1a      	ldr	r3, [pc, #104]	; (194a4 <bt_conn_send_cb+0x104>)
   1943c:	6153      	str	r3, [r2, #20]
   1943e:	4b14      	ldr	r3, [pc, #80]	; (19490 <bt_conn_send_cb+0xf0>)
   19440:	6193      	str	r3, [r2, #24]
   19442:	2303      	movs	r3, #3
   19444:	f842 3f10 	str.w	r3, [r2, #16]!
   19448:	4812      	ldr	r0, [pc, #72]	; (19494 <bt_conn_send_cb+0xf4>)
   1944a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1944e:	f00d fff3 	bl	27438 <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19452:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19454:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   19458:	4811      	ldr	r0, [pc, #68]	; (194a0 <bt_conn_send_cb+0x100>)
	tx->pending_no_cb = 0U;
   1945a:	60e3      	str	r3, [r4, #12]
   1945c:	46ad      	mov	sp, r5
	k_fifo_put(&free_tx, tx);
   1945e:	4621      	mov	r1, r4
   19460:	f010 fbce 	bl	29c00 <k_queue_append>
}
   19464:	e7ce      	b.n	19404 <bt_conn_send_cb+0x64>
		tx->user_data = user_data;
   19466:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1946a:	2300      	movs	r3, #0
   1946c:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1946e:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   19470:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   19472:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   19476:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   19478:	4629      	mov	r1, r5
   1947a:	f00f fdf3 	bl	29064 <net_buf_put>
	return 0;
   1947e:	4620      	mov	r0, r4
   19480:	e7aa      	b.n	193d8 <bt_conn_send_cb+0x38>
   19482:	4614      	mov	r4, r2
   19484:	e7f3      	b.n	1946e <bt_conn_send_cb+0xce>
			return -ENOBUFS;
   19486:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1948a:	e7a5      	b.n	193d8 <bt_conn_send_cb+0x38>
   1948c:	0002d6d4 	.word	0x0002d6d4
   19490:	0002d8ff 	.word	0x0002d8ff
   19494:	0002a820 	.word	0x0002a820
   19498:	0002d6f5 	.word	0x0002d6f5
   1949c:	20002d90 	.word	0x20002d90
   194a0:	20000bfc 	.word	0x20000bfc
   194a4:	0002d708 	.word	0x0002d708

000194a8 <bt_conn_prepare_events>:
{
   194a8:	b570      	push	{r4, r5, r6, lr}
   194aa:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   194ac:	481f      	ldr	r0, [pc, #124]	; (1952c <bt_conn_prepare_events+0x84>)
   194ae:	f010 ffc2 	bl	2a436 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   194b2:	4b1e      	ldr	r3, [pc, #120]	; (1952c <bt_conn_prepare_events+0x84>)
   194b4:	2200      	movs	r2, #0
   194b6:	2101      	movs	r1, #1
   194b8:	4620      	mov	r0, r4
   194ba:	f010 ff9f 	bl	2a3fc <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194be:	f3bf 8f5b 	dmb	ish
   194c2:	4b1b      	ldr	r3, [pc, #108]	; (19530 <bt_conn_prepare_events+0x88>)
   194c4:	681a      	ldr	r2, [r3, #0]
   194c6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   194ca:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   194ce:	b90a      	cbnz	r2, 194d4 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   194d0:	2001      	movs	r0, #1
}
   194d2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   194d4:	f1a3 05bc 	sub.w	r5, r3, #188	; 0xbc
   194d8:	f813 3caf 	ldrb.w	r3, [r3, #-175]
   194dc:	b953      	cbnz	r3, 194f4 <bt_conn_prepare_events+0x4c>
   194de:	f06f 0140 	mvn.w	r1, #64	; 0x40
   194e2:	1d28      	adds	r0, r5, #4
   194e4:	f00d ff99 	bl	2741a <atomic_and>
   194e8:	0643      	lsls	r3, r0, #25
   194ea:	d503      	bpl.n	194f4 <bt_conn_prepare_events+0x4c>
		conn_cleanup(conn);
   194ec:	4628      	mov	r0, r5
   194ee:	f00d ffb2 	bl	27456 <conn_cleanup>
		return -ENOTCONN;
   194f2:	e7ed      	b.n	194d0 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   194f4:	7b6b      	ldrb	r3, [r5, #13]
   194f6:	2b07      	cmp	r3, #7
   194f8:	d1ea      	bne.n	194d0 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   194fa:	4b0e      	ldr	r3, [pc, #56]	; (19534 <bt_conn_prepare_events+0x8c>)
   194fc:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   19500:	2a00      	cmp	r2, #0
   19502:	d0e5      	beq.n	194d0 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   19504:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   19508:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1950a:	b159      	cbz	r1, 19524 <bt_conn_prepare_events+0x7c>
   1950c:	b952      	cbnz	r2, 19524 <bt_conn_prepare_events+0x7c>
		k_poll_event_init(&events[0],
   1950e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   19512:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   19514:	4630      	mov	r0, r6
   19516:	f010 ff71 	bl	2a3fc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1951a:	2301      	movs	r3, #1
   1951c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   19520:	2002      	movs	r0, #2
	return ev_count;
   19522:	e7d6      	b.n	194d2 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   19524:	4b04      	ldr	r3, [pc, #16]	; (19538 <bt_conn_prepare_events+0x90>)
   19526:	2200      	movs	r2, #0
   19528:	2104      	movs	r1, #4
   1952a:	e7f3      	b.n	19514 <bt_conn_prepare_events+0x6c>
   1952c:	2000079c 	.word	0x2000079c
   19530:	200020dc 	.word	0x200020dc
   19534:	20000390 	.word	0x20000390
   19538:	20002058 	.word	0x20002058

0001953c <bt_conn_lookup_handle>:
{
   1953c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1953e:	2101      	movs	r1, #1
   19540:	4801      	ldr	r0, [pc, #4]	; (19548 <bt_conn_lookup_handle+0xc>)
   19542:	f00d bfe3 	b.w	2750c <conn_lookup_handle>
   19546:	bf00      	nop
   19548:	20002020 	.word	0x20002020

0001954c <bt_conn_set_state>:
{
   1954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   19550:	7b46      	ldrb	r6, [r0, #13]
   19552:	428e      	cmp	r6, r1
{
   19554:	af00      	add	r7, sp, #0
   19556:	4604      	mov	r4, r0
   19558:	460d      	mov	r5, r1
	if (conn->state == state) {
   1955a:	d11a      	bne.n	19592 <bt_conn_set_state+0x46>
	switch (state) {
   1955c:	2e08      	cmp	r6, #8
   1955e:	bf96      	itet	ls
   19560:	4b74      	ldrls	r3, [pc, #464]	; (19734 <bt_conn_set_state+0x1e8>)
	if (conn->state == state) {
   19562:	4b75      	ldrhi	r3, [pc, #468]	; (19738 <bt_conn_set_state+0x1ec>)
   19564:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   19568:	466c      	mov	r4, sp
   1956a:	b08a      	sub	sp, #40	; 0x28
   1956c:	466a      	mov	r2, sp
   1956e:	4973      	ldr	r1, [pc, #460]	; (1973c <bt_conn_set_state+0x1f0>)
   19570:	6151      	str	r1, [r2, #20]
   19572:	4973      	ldr	r1, [pc, #460]	; (19740 <bt_conn_set_state+0x1f4>)
   19574:	e9c2 1306 	strd	r1, r3, [r2, #24]
   19578:	f240 3301 	movw	r3, #769	; 0x301
   1957c:	8413      	strh	r3, [r2, #32]
   1957e:	4b71      	ldr	r3, [pc, #452]	; (19744 <bt_conn_set_state+0x1f8>)
   19580:	f842 3f10 	str.w	r3, [r2, #16]!
   19584:	f44f 5112 	mov.w	r1, #9344	; 0x2480
		LOG_WRN("no valid (%u) state was set", state);
   19588:	486f      	ldr	r0, [pc, #444]	; (19748 <bt_conn_set_state+0x1fc>)
   1958a:	f00d ff55 	bl	27438 <z_log_msg_static_create.constprop.0>
   1958e:	46a5      	mov	sp, r4
   19590:	e04c      	b.n	1962c <bt_conn_set_state+0xe0>
	conn->state = state;
   19592:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   19594:	b926      	cbnz	r6, 195a0 <bt_conn_set_state+0x54>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19596:	7883      	ldrb	r3, [r0, #2]
   19598:	2b08      	cmp	r3, #8
   1959a:	d001      	beq.n	195a0 <bt_conn_set_state+0x54>
			bt_conn_ref(conn);
   1959c:	f00d ff7e 	bl	2749c <bt_conn_ref>
	switch (conn->state) {
   195a0:	7b63      	ldrb	r3, [r4, #13]
   195a2:	2b08      	cmp	r3, #8
   195a4:	f200 80c1 	bhi.w	1972a <bt_conn_set_state+0x1de>
   195a8:	e8df f003 	tbb	[pc, r3]
   195ac:	40400543 	.word	0x40400543
   195b0:	25404040 	.word	0x25404040
   195b4:	40          	.byte	0x40
   195b5:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   195b6:	4d65      	ldr	r5, [pc, #404]	; (1974c <bt_conn_set_state+0x200>)
		tx->pending_no_cb = 0U;
   195b8:	f04f 0800 	mov.w	r8, #0
	return NULL;
   195bc:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   195c0:	f04f 0240 	mov.w	r2, #64	; 0x40
   195c4:	f3ef 8311 	mrs	r3, BASEPRI
   195c8:	f382 8812 	msr	BASEPRI_MAX, r2
   195cc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   195d0:	69e2      	ldr	r2, [r4, #28]
   195d2:	2a00      	cmp	r2, #0
   195d4:	f000 8084 	beq.w	196e0 <bt_conn_set_state+0x194>
			conn->pending_no_cb--;
   195d8:	3a01      	subs	r2, #1
   195da:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   195dc:	f383 8811 	msr	BASEPRI, r3
   195e0:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   195e4:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   195e8:	2b00      	cmp	r3, #0
   195ea:	bf14      	ite	ne
   195ec:	4630      	movne	r0, r6
   195ee:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   195f0:	f00a f908 	bl	23804 <z_impl_k_sem_give>
}
   195f4:	e7e4      	b.n	195c0 <bt_conn_set_state+0x74>
		if (conn->type == BT_CONN_TYPE_SCO) {
   195f6:	78a3      	ldrb	r3, [r4, #2]
   195f8:	2b04      	cmp	r3, #4
   195fa:	d017      	beq.n	1962c <bt_conn_set_state+0xe0>
	z_impl_k_queue_init(queue);
   195fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19600:	f010 faf2 	bl	29be8 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   19604:	4852      	ldr	r0, [pc, #328]	; (19750 <bt_conn_set_state+0x204>)
   19606:	2100      	movs	r1, #0
   19608:	f00b f8e8 	bl	247dc <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1960c:	2300      	movs	r3, #0
	list->tail = NULL;
   1960e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19612:	78e3      	ldrb	r3, [r4, #3]
   19614:	2b01      	cmp	r3, #1
   19616:	d109      	bne.n	1962c <bt_conn_set_state+0xe0>
			conn->le.conn_param_retry_countdown =
   19618:	2303      	movs	r3, #3
   1961a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1961e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   19622:	2300      	movs	r3, #0
   19624:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19628:	f00a faf2 	bl	23c10 <k_work_schedule>
}
   1962c:	46bd      	mov	sp, r7
   1962e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19632:	78a3      	ldrb	r3, [r4, #2]
   19634:	2b04      	cmp	r3, #4
   19636:	d103      	bne.n	19640 <bt_conn_set_state+0xf4>
			bt_conn_unref(conn);
   19638:	4620      	mov	r0, r4
   1963a:	f00d ff4b 	bl	274d4 <bt_conn_unref>
			break;
   1963e:	e7f5      	b.n	1962c <bt_conn_set_state+0xe0>
		switch (old_state) {
   19640:	2e08      	cmp	r6, #8
   19642:	d8f3      	bhi.n	1962c <bt_conn_set_state+0xe0>
   19644:	a301      	add	r3, pc, #4	; (adr r3, 1964c <bt_conn_set_state+0x100>)
   19646:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1964a:	bf00      	nop
   1964c:	000196c5 	.word	0x000196c5
   19650:	00019671 	.word	0x00019671
   19654:	000196b7 	.word	0x000196b7
   19658:	00019639 	.word	0x00019639
   1965c:	00019639 	.word	0x00019639
   19660:	000196b7 	.word	0x000196b7
   19664:	000196b7 	.word	0x000196b7
   19668:	000196c5 	.word	0x000196c5
   1966c:	000196c5 	.word	0x000196c5
			tx_notify(conn);
   19670:	4620      	mov	r0, r4
   19672:	f7ff fc8f 	bl	18f94 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19676:	78a3      	ldrb	r3, [r4, #2]
   19678:	2b01      	cmp	r3, #1
   1967a:	d10a      	bne.n	19692 <bt_conn_set_state+0x146>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1967c:	f104 0558 	add.w	r5, r4, #88	; 0x58
   19680:	4628      	mov	r0, r5
   19682:	f010 fba9 	bl	29dd8 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   19686:	f010 0f0c 	tst.w	r0, #12
   1968a:	d002      	beq.n	19692 <bt_conn_set_state+0x146>
				k_work_cancel_delayable(&conn->deferred_work);
   1968c:	4628      	mov	r0, r5
   1968e:	f010 fba5 	bl	29ddc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19692:	f3bf 8f5b 	dmb	ish
   19696:	3404      	adds	r4, #4
   19698:	e854 3f00 	ldrex	r3, [r4]
   1969c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   196a0:	e844 3200 	strex	r2, r3, [r4]
   196a4:	2a00      	cmp	r2, #0
   196a6:	d1f7      	bne.n	19698 <bt_conn_set_state+0x14c>
   196a8:	f3bf 8f5b 	dmb	ish
   196ac:	2100      	movs	r1, #0
   196ae:	4828      	ldr	r0, [pc, #160]	; (19750 <bt_conn_set_state+0x204>)
   196b0:	f00b f894 	bl	247dc <z_impl_k_poll_signal_raise>
   196b4:	e7ba      	b.n	1962c <bt_conn_set_state+0xe0>
			if (conn->err) {
   196b6:	7b23      	ldrb	r3, [r4, #12]
   196b8:	2b00      	cmp	r3, #0
   196ba:	d0bd      	beq.n	19638 <bt_conn_set_state+0xec>
				notify_connected(conn);
   196bc:	4620      	mov	r0, r4
   196be:	f7ff fc31 	bl	18f24 <notify_connected>
   196c2:	e7b9      	b.n	19638 <bt_conn_set_state+0xec>
			LOG_WRN("Invalid (%u) old state", state);
   196c4:	466c      	mov	r4, sp
   196c6:	b088      	sub	sp, #32
   196c8:	466a      	mov	r2, sp
   196ca:	4b22      	ldr	r3, [pc, #136]	; (19754 <bt_conn_set_state+0x208>)
		LOG_WRN("no valid (%u) state was set", state);
   196cc:	6153      	str	r3, [r2, #20]
   196ce:	4b1c      	ldr	r3, [pc, #112]	; (19740 <bt_conn_set_state+0x1f4>)
   196d0:	e9c2 3506 	strd	r3, r5, [r2, #24]
   196d4:	2304      	movs	r3, #4
   196d6:	f842 3f10 	str.w	r3, [r2, #16]!
   196da:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   196de:	e753      	b.n	19588 <bt_conn_set_state+0x3c>
	return list->head;
   196e0:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   196e2:	b921      	cbnz	r1, 196ee <bt_conn_set_state+0x1a2>
   196e4:	f383 8811 	msr	BASEPRI, r3
   196e8:	f3bf 8f6f 	isb	sy
		if (!node) {
   196ec:	e79e      	b.n	1962c <bt_conn_set_state+0xe0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   196ee:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   196f0:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   196f2:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   196f4:	4281      	cmp	r1, r0
	list->tail = node;
   196f6:	bf08      	it	eq
   196f8:	61a2      	streq	r2, [r4, #24]
   196fa:	f383 8811 	msr	BASEPRI, r3
   196fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19702:	f04f 0240 	mov.w	r2, #64	; 0x40
   19706:	f3ef 8311 	mrs	r3, BASEPRI
   1970a:	f382 8812 	msr	BASEPRI_MAX, r2
   1970e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   19712:	68ca      	ldr	r2, [r1, #12]
   19714:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19716:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   1971a:	f383 8811 	msr	BASEPRI, r3
   1971e:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   19722:	4620      	mov	r0, r4
   19724:	f7ff fc66 	bl	18ff4 <conn_tx_destroy>
   19728:	e75c      	b.n	195e4 <bt_conn_set_state+0x98>
		LOG_WRN("no valid (%u) state was set", state);
   1972a:	466c      	mov	r4, sp
   1972c:	b088      	sub	sp, #32
   1972e:	466a      	mov	r2, sp
   19730:	4b09      	ldr	r3, [pc, #36]	; (19758 <bt_conn_set_state+0x20c>)
   19732:	e7cb      	b.n	196cc <bt_conn_set_state+0x180>
   19734:	0002b048 	.word	0x0002b048
   19738:	0002d732 	.word	0x0002d732
   1973c:	0002d73c 	.word	0x0002d73c
   19740:	0002d8e0 	.word	0x0002d8e0
   19744:	01000004 	.word	0x01000004
   19748:	0002a820 	.word	0x0002a820
   1974c:	20000390 	.word	0x20000390
   19750:	2000079c 	.word	0x2000079c
   19754:	0002d751 	.word	0x0002d751
   19758:	0002d76c 	.word	0x0002d76c

0001975c <bt_conn_foreach>:
{
   1975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1975e:	4607      	mov	r7, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19760:	4809      	ldr	r0, [pc, #36]	; (19788 <bt_conn_foreach+0x2c>)
{
   19762:	460d      	mov	r5, r1
   19764:	4616      	mov	r6, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19766:	f00d fe99 	bl	2749c <bt_conn_ref>
   1976a:	4604      	mov	r4, r0
		if (!conn) {
   1976c:	b150      	cbz	r0, 19784 <bt_conn_foreach+0x28>
		if (!(conn->type & type)) {
   1976e:	7883      	ldrb	r3, [r0, #2]
   19770:	423b      	tst	r3, r7
   19772:	d103      	bne.n	1977c <bt_conn_foreach+0x20>
}
   19774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   19778:	f00d beac 	b.w	274d4 <bt_conn_unref>
		func(conn, data);
   1977c:	4631      	mov	r1, r6
   1977e:	47a8      	blx	r5
		bt_conn_unref(conn);
   19780:	4620      	mov	r0, r4
   19782:	e7f7      	b.n	19774 <bt_conn_foreach+0x18>
}
   19784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19786:	bf00      	nop
   19788:	20002020 	.word	0x20002020

0001978c <bt_conn_index>:
		index = conn - acl_conns;
   1978c:	4b03      	ldr	r3, [pc, #12]	; (1979c <bt_conn_index+0x10>)
   1978e:	1ac0      	subs	r0, r0, r3
   19790:	4b03      	ldr	r3, [pc, #12]	; (197a0 <bt_conn_index+0x14>)
   19792:	1180      	asrs	r0, r0, #6
   19794:	4358      	muls	r0, r3
}
   19796:	b2c0      	uxtb	r0, r0
   19798:	4770      	bx	lr
   1979a:	bf00      	nop
   1979c:	20002020 	.word	0x20002020
   197a0:	aaaaaaab 	.word	0xaaaaaaab

000197a4 <bt_conn_create_pdu_timeout>:
{
   197a4:	b538      	push	{r3, r4, r5, lr}
   197a6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   197a8:	4908      	ldr	r1, [pc, #32]	; (197cc <bt_conn_create_pdu_timeout+0x28>)
   197aa:	2800      	cmp	r0, #0
   197ac:	bf08      	it	eq
   197ae:	4608      	moveq	r0, r1
   197b0:	f00f fc24 	bl	28ffc <net_buf_alloc_fixed>
	if (!buf) {
   197b4:	4604      	mov	r4, r0
   197b6:	b918      	cbnz	r0, 197c0 <bt_conn_create_pdu_timeout+0x1c>
}
   197b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   197bc:	f7ff bbd0 	b.w	18f60 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   197c0:	1d29      	adds	r1, r5, #4
   197c2:	300c      	adds	r0, #12
   197c4:	f00f fc7c 	bl	290c0 <net_buf_simple_reserve>
   197c8:	4620      	mov	r0, r4
   197ca:	bd38      	pop	{r3, r4, r5, pc}
   197cc:	20000c14 	.word	0x20000c14

000197d0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   197d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197d2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   197d4:	f3bf 8f5b 	dmb	ish
   197d8:	6863      	ldr	r3, [r4, #4]
   197da:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   197de:	059b      	lsls	r3, r3, #22
   197e0:	f100 0004 	add.w	r0, r0, #4
   197e4:	d511      	bpl.n	1980a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   197e6:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   197ea:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
   197ee:	429a      	cmp	r2, r3
   197f0:	d80b      	bhi.n	1980a <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
   197f2:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
   197f6:	429a      	cmp	r2, r3
   197f8:	d307      	bcc.n	1980a <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   197fa:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
   197fe:	429a      	cmp	r2, r3
   19800:	d103      	bne.n	1980a <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19802:	f46f 7100 	mvn.w	r1, #512	; 0x200
   19806:	f00d fe08 	bl	2741a <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1980a:	4b10      	ldr	r3, [pc, #64]	; (1984c <notify_le_param_updated+0x7c>)
   1980c:	681d      	ldr	r5, [r3, #0]
   1980e:	b925      	cbnz	r5, 1981a <notify_le_param_updated+0x4a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19810:	4d0f      	ldr	r5, [pc, #60]	; (19850 <notify_le_param_updated+0x80>)
   19812:	4f10      	ldr	r7, [pc, #64]	; (19854 <notify_le_param_updated+0x84>)
   19814:	42bd      	cmp	r5, r7
   19816:	d30c      	bcc.n	19832 <notify_le_param_updated+0x62>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   1981a:	68ee      	ldr	r6, [r5, #12]
   1981c:	b13e      	cbz	r6, 1982e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
   1981e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19822:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19826:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1982a:	4620      	mov	r0, r4
   1982c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1982e:	69ad      	ldr	r5, [r5, #24]
   19830:	e7ed      	b.n	1980e <notify_le_param_updated+0x3e>
		if (cb->le_param_updated) {
   19832:	68ee      	ldr	r6, [r5, #12]
   19834:	b13e      	cbz	r6, 19846 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   19836:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1983a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1983e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19842:	4620      	mov	r0, r4
   19844:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19846:	351c      	adds	r5, #28
   19848:	e7e4      	b.n	19814 <notify_le_param_updated+0x44>
   1984a:	bf00      	nop
   1984c:	20002f94 	.word	0x20002f94
   19850:	0002a76c 	.word	0x0002a76c
   19854:	0002a7a4 	.word	0x0002a7a4

00019858 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1985c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1985e:	4608      	mov	r0, r1
{
   19860:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   19862:	f00d fb8e 	bl	26f82 <bt_le_conn_params_valid>
   19866:	4605      	mov	r5, r0
   19868:	b918      	cbnz	r0, 19872 <le_param_req+0x1a>
		return false;
   1986a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1986c:	4628      	mov	r0, r5
   1986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   19872:	4b13      	ldr	r3, [pc, #76]	; (198c0 <le_param_req+0x68>)
   19874:	681e      	ldr	r6, [r3, #0]
   19876:	b946      	cbnz	r6, 1988a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19878:	4e12      	ldr	r6, [pc, #72]	; (198c4 <le_param_req+0x6c>)
   1987a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 198c8 <le_param_req+0x70>
   1987e:	4546      	cmp	r6, r8
   19880:	d2f4      	bcs.n	1986c <le_param_req+0x14>
		if (!cb->le_param_req) {
   19882:	68b3      	ldr	r3, [r6, #8]
   19884:	b983      	cbnz	r3, 198a8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19886:	361c      	adds	r6, #28
   19888:	e7f9      	b.n	1987e <le_param_req+0x26>
		if (!cb->le_param_req) {
   1988a:	68b3      	ldr	r3, [r6, #8]
   1988c:	b90b      	cbnz	r3, 19892 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1988e:	69b6      	ldr	r6, [r6, #24]
   19890:	e7f1      	b.n	19876 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19892:	4621      	mov	r1, r4
   19894:	4638      	mov	r0, r7
   19896:	4798      	blx	r3
   19898:	2800      	cmp	r0, #0
   1989a:	d0e6      	beq.n	1986a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1989c:	4620      	mov	r0, r4
   1989e:	f00d fb70 	bl	26f82 <bt_le_conn_params_valid>
   198a2:	2800      	cmp	r0, #0
   198a4:	d1f3      	bne.n	1988e <le_param_req+0x36>
   198a6:	e7e0      	b.n	1986a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   198a8:	4621      	mov	r1, r4
   198aa:	4638      	mov	r0, r7
   198ac:	4798      	blx	r3
   198ae:	2800      	cmp	r0, #0
   198b0:	d0db      	beq.n	1986a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   198b2:	4620      	mov	r0, r4
   198b4:	f00d fb65 	bl	26f82 <bt_le_conn_params_valid>
   198b8:	2800      	cmp	r0, #0
   198ba:	d1e4      	bne.n	19886 <le_param_req+0x2e>
   198bc:	e7d5      	b.n	1986a <le_param_req+0x12>
   198be:	bf00      	nop
   198c0:	20002f94 	.word	0x20002f94
   198c4:	0002a76c 	.word	0x0002a76c
   198c8:	0002a7a4 	.word	0x0002a7a4

000198cc <bt_conn_identity_resolved>:

	return false;
}

void bt_conn_identity_resolved(struct bt_conn *conn)
{
   198cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   198d0:	78c3      	ldrb	r3, [r0, #3]
{
   198d2:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   198d4:	b973      	cbnz	r3, 198f4 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   198d6:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   198da:	4b10      	ldr	r3, [pc, #64]	; (1991c <bt_conn_identity_resolved+0x50>)
   198dc:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   198de:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   198e2:	b955      	cbnz	r5, 198fa <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   198e4:	4d0e      	ldr	r5, [pc, #56]	; (19920 <bt_conn_identity_resolved+0x54>)
   198e6:	4f0f      	ldr	r7, [pc, #60]	; (19924 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   198e8:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   198ec:	42bd      	cmp	r5, r7
   198ee:	d30c      	bcc.n	1990a <bt_conn_identity_resolved+0x3e>
		}
	}
}
   198f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   198f4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   198f8:	e7ef      	b.n	198da <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   198fa:	692b      	ldr	r3, [r5, #16]
   198fc:	b11b      	cbz	r3, 19906 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   198fe:	463a      	mov	r2, r7
   19900:	4631      	mov	r1, r6
   19902:	4620      	mov	r0, r4
   19904:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19906:	69ad      	ldr	r5, [r5, #24]
   19908:	e7eb      	b.n	198e2 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   1990a:	692b      	ldr	r3, [r5, #16]
   1990c:	b11b      	cbz	r3, 19916 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   1990e:	4642      	mov	r2, r8
   19910:	4631      	mov	r1, r6
   19912:	4620      	mov	r0, r4
   19914:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19916:	351c      	adds	r5, #28
   19918:	e7e8      	b.n	198ec <bt_conn_identity_resolved+0x20>
   1991a:	bf00      	nop
   1991c:	20002f94 	.word	0x20002f94
   19920:	0002a76c 	.word	0x0002a76c
   19924:	0002a7a4 	.word	0x0002a7a4

00019928 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   19928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   1992a:	7a43      	ldrb	r3, [r0, #9]
   1992c:	7283      	strb	r3, [r0, #10]
{
   1992e:	4604      	mov	r4, r0
   19930:	4615      	mov	r5, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   19932:	f00d ff16 	bl	27762 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19936:	4b13      	ldr	r3, [pc, #76]	; (19984 <bt_conn_security_changed+0x5c>)
   19938:	681e      	ldr	r6, [r3, #0]
   1993a:	b98e      	cbnz	r6, 19960 <bt_conn_security_changed+0x38>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1993c:	4e12      	ldr	r6, [pc, #72]	; (19988 <bt_conn_security_changed+0x60>)
   1993e:	4f13      	ldr	r7, [pc, #76]	; (1998c <bt_conn_security_changed+0x64>)
   19940:	42be      	cmp	r6, r7
   19942:	d315      	bcc.n	19970 <bt_conn_security_changed+0x48>
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
   19944:	b9e5      	cbnz	r5, 19980 <bt_conn_security_changed+0x58>
   19946:	7a63      	ldrb	r3, [r4, #9]
   19948:	2b01      	cmp	r3, #1
   1994a:	d919      	bls.n	19980 <bt_conn_security_changed+0x58>
		if (conn->type == BT_CONN_TYPE_LE) {
   1994c:	78a3      	ldrb	r3, [r4, #2]
   1994e:	2b01      	cmp	r3, #1
   19950:	d116      	bne.n	19980 <bt_conn_security_changed+0x58>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   19952:	7a20      	ldrb	r0, [r4, #8]
   19954:	f104 0188 	add.w	r1, r4, #136	; 0x88
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   19958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
   1995c:	f005 bef0 	b.w	1f740 <bt_keys_update_usage>
		if (cb->security_changed) {
   19960:	6973      	ldr	r3, [r6, #20]
   19962:	b11b      	cbz	r3, 1996c <bt_conn_security_changed+0x44>
			cb->security_changed(conn, conn->sec_level, err);
   19964:	7a61      	ldrb	r1, [r4, #9]
   19966:	462a      	mov	r2, r5
   19968:	4620      	mov	r0, r4
   1996a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1996c:	69b6      	ldr	r6, [r6, #24]
   1996e:	e7e4      	b.n	1993a <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   19970:	6973      	ldr	r3, [r6, #20]
   19972:	b11b      	cbz	r3, 1997c <bt_conn_security_changed+0x54>
			cb->security_changed(conn, conn->sec_level, err);
   19974:	7a61      	ldrb	r1, [r4, #9]
   19976:	462a      	mov	r2, r5
   19978:	4620      	mov	r0, r4
   1997a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1997c:	361c      	adds	r6, #28
   1997e:	e7df      	b.n	19940 <bt_conn_security_changed+0x18>
}
   19980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19982:	bf00      	nop
   19984:	20002f94 	.word	0x20002f94
   19988:	0002a76c 	.word	0x0002a76c
   1998c:	0002a7a4 	.word	0x0002a7a4

00019990 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   19990:	4b02      	ldr	r3, [pc, #8]	; (1999c <bt_conn_cb_register+0xc>)
   19992:	681a      	ldr	r2, [r3, #0]
   19994:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   19996:	6018      	str	r0, [r3, #0]
}
   19998:	4770      	bx	lr
   1999a:	bf00      	nop
   1999c:	20002f94 	.word	0x20002f94

000199a0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   199a0:	b570      	push	{r4, r5, r6, lr}
   199a2:	4606      	mov	r6, r0
   199a4:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   199a6:	480a      	ldr	r0, [pc, #40]	; (199d0 <bt_conn_add_le+0x30>)
   199a8:	2101      	movs	r1, #1
   199aa:	f7ff fc17 	bl	191dc <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   199ae:	4604      	mov	r4, r0
   199b0:	b160      	cbz	r0, 199cc <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   199b2:	7206      	strb	r6, [r0, #8]
   199b4:	2207      	movs	r2, #7
   199b6:	4629      	mov	r1, r5
   199b8:	3088      	adds	r0, #136	; 0x88
   199ba:	f00d f917 	bl	26bec <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   199be:	2301      	movs	r3, #1
   199c0:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   199c2:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   199c4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   199c6:	4b03      	ldr	r3, [pc, #12]	; (199d4 <bt_conn_add_le+0x34>)
   199c8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   199cc:	4620      	mov	r0, r4
   199ce:	bd70      	pop	{r4, r5, r6, pc}
   199d0:	20002020 	.word	0x20002020
   199d4:	00280018 	.word	0x00280018

000199d8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   199d8:	b570      	push	{r4, r5, r6, lr}
   199da:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   199dc:	480a      	ldr	r0, [pc, #40]	; (19a08 <bt_conn_lookup_addr_le+0x30>)
{
   199de:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   199e0:	f00d fd5c 	bl	2749c <bt_conn_ref>
   199e4:	4604      	mov	r4, r0

		if (!conn) {
   199e6:	b120      	cbz	r0, 199f2 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   199e8:	7883      	ldrb	r3, [r0, #2]
   199ea:	2b01      	cmp	r3, #1
   199ec:	d004      	beq.n	199f8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   199ee:	f00d fd71 	bl	274d4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   199f2:	2400      	movs	r4, #0
}
   199f4:	4620      	mov	r0, r4
   199f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   199f8:	4632      	mov	r2, r6
   199fa:	4629      	mov	r1, r5
   199fc:	f00d fe1a 	bl	27634 <bt_conn_is_peer_addr_le>
   19a00:	2800      	cmp	r0, #0
   19a02:	d1f7      	bne.n	199f4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   19a04:	4620      	mov	r0, r4
   19a06:	e7f2      	b.n	199ee <bt_conn_lookup_addr_le+0x16>
   19a08:	20002020 	.word	0x20002020

00019a0c <bt_conn_exists_le>:
{
   19a0c:	b5b0      	push	{r4, r5, r7, lr}
   19a0e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19a10:	f7ff ffe2 	bl	199d8 <bt_conn_lookup_addr_le>
	if (conn) {
   19a14:	4604      	mov	r4, r0
   19a16:	b1f0      	cbz	r0, 19a56 <bt_conn_exists_le+0x4a>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19a18:	7b43      	ldrb	r3, [r0, #13]
	switch (state) {
   19a1a:	2b08      	cmp	r3, #8
   19a1c:	bf96      	itet	ls
   19a1e:	4a0f      	ldrls	r2, [pc, #60]	; (19a5c <bt_conn_exists_le+0x50>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19a20:	4b0f      	ldrhi	r3, [pc, #60]	; (19a60 <bt_conn_exists_le+0x54>)
   19a22:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   19a26:	466d      	mov	r5, sp
   19a28:	b08a      	sub	sp, #40	; 0x28
   19a2a:	466a      	mov	r2, sp
   19a2c:	490d      	ldr	r1, [pc, #52]	; (19a64 <bt_conn_exists_le+0x58>)
   19a2e:	6151      	str	r1, [r2, #20]
   19a30:	490d      	ldr	r1, [pc, #52]	; (19a68 <bt_conn_exists_le+0x5c>)
   19a32:	480e      	ldr	r0, [pc, #56]	; (19a6c <bt_conn_exists_le+0x60>)
   19a34:	e9c2 1306 	strd	r1, r3, [r2, #24]
   19a38:	f240 3301 	movw	r3, #769	; 0x301
   19a3c:	8413      	strh	r3, [r2, #32]
   19a3e:	4b0c      	ldr	r3, [pc, #48]	; (19a70 <bt_conn_exists_le+0x64>)
   19a40:	f842 3f10 	str.w	r3, [r2, #16]!
   19a44:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   19a48:	f00d fcf6 	bl	27438 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   19a4c:	4620      	mov	r0, r4
   19a4e:	46ad      	mov	sp, r5
   19a50:	f00d fd40 	bl	274d4 <bt_conn_unref>
		return true;
   19a54:	2001      	movs	r0, #1
}
   19a56:	46bd      	mov	sp, r7
   19a58:	bdb0      	pop	{r4, r5, r7, pc}
   19a5a:	bf00      	nop
   19a5c:	0002b048 	.word	0x0002b048
   19a60:	0002d732 	.word	0x0002d732
   19a64:	0002d78c 	.word	0x0002d78c
   19a68:	0002d8b3 	.word	0x0002d8b3
   19a6c:	0002a820 	.word	0x0002a820
   19a70:	01000004 	.word	0x01000004

00019a74 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   19a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a76:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19a78:	480e      	ldr	r0, [pc, #56]	; (19ab4 <bt_conn_lookup_state_le+0x40>)
{
   19a7a:	460e      	mov	r6, r1
   19a7c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19a7e:	f00d fd0d 	bl	2749c <bt_conn_ref>

		if (!conn) {
   19a82:	4604      	mov	r4, r0
   19a84:	b120      	cbz	r0, 19a90 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19a86:	7883      	ldrb	r3, [r0, #2]
   19a88:	2b01      	cmp	r3, #1
   19a8a:	d003      	beq.n	19a94 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   19a8c:	f00d fd22 	bl	274d4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19a90:	2400      	movs	r4, #0
   19a92:	e00d      	b.n	19ab0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19a94:	b136      	cbz	r6, 19aa4 <bt_conn_lookup_state_le+0x30>
   19a96:	4632      	mov	r2, r6
   19a98:	4629      	mov	r1, r5
   19a9a:	f00d fdcb 	bl	27634 <bt_conn_is_peer_addr_le>
   19a9e:	b908      	cbnz	r0, 19aa4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   19aa0:	4620      	mov	r0, r4
   19aa2:	e7f3      	b.n	19a8c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   19aa4:	7b63      	ldrb	r3, [r4, #13]
   19aa6:	42bb      	cmp	r3, r7
   19aa8:	d1fa      	bne.n	19aa0 <bt_conn_lookup_state_le+0x2c>
   19aaa:	7a23      	ldrb	r3, [r4, #8]
   19aac:	42ab      	cmp	r3, r5
   19aae:	d1f7      	bne.n	19aa0 <bt_conn_lookup_state_le+0x2c>
}
   19ab0:	4620      	mov	r0, r4
   19ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ab4:	20002020 	.word	0x20002020

00019ab8 <send_conn_le_param_update>:
{
   19ab8:	b538      	push	{r3, r4, r5, lr}
   19aba:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   19abc:	4608      	mov	r0, r1
{
   19abe:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19ac0:	f00d fa5f 	bl	26f82 <bt_le_conn_params_valid>
   19ac4:	b348      	cbz	r0, 19b1a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19ac6:	4b16      	ldr	r3, [pc, #88]	; (19b20 <send_conn_le_param_update+0x68>)
   19ac8:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   19acc:	0799      	lsls	r1, r3, #30
   19ace:	d407      	bmi.n	19ae0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   19ad0:	78e3      	ldrb	r3, [r4, #3]
   19ad2:	b183      	cbz	r3, 19af6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   19ad4:	4629      	mov	r1, r5
   19ad6:	4620      	mov	r0, r4
}
   19ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   19adc:	f000 baee 	b.w	1a0bc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19ae0:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   19ae4:	079a      	lsls	r2, r3, #30
   19ae6:	d5f3      	bpl.n	19ad0 <send_conn_le_param_update+0x18>
   19ae8:	f3bf 8f5b 	dmb	ish
   19aec:	6863      	ldr	r3, [r4, #4]
   19aee:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19af2:	055b      	lsls	r3, r3, #21
   19af4:	d4ec      	bmi.n	19ad0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   19af6:	4629      	mov	r1, r5
   19af8:	4620      	mov	r0, r4
   19afa:	f00d fdbd 	bl	27678 <bt_conn_le_conn_update>
		if (rc == 0) {
   19afe:	b958      	cbnz	r0, 19b18 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   19b00:	882b      	ldrh	r3, [r5, #0]
   19b02:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   19b06:	886b      	ldrh	r3, [r5, #2]
   19b08:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   19b0c:	88ab      	ldrh	r3, [r5, #4]
   19b0e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   19b12:	88eb      	ldrh	r3, [r5, #6]
   19b14:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   19b18:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19b1a:	f06f 0015 	mvn.w	r0, #21
   19b1e:	e7fb      	b.n	19b18 <send_conn_le_param_update+0x60>
   19b20:	20000390 	.word	0x20000390

00019b24 <deferred_work>:
{
   19b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b28:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   19b2a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   19b2e:	af00      	add	r7, sp, #0
   19b30:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   19b32:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   19b36:	bb0b      	cbnz	r3, 19b7c <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   19b38:	4630      	mov	r0, r6
   19b3a:	f00d fdfa 	bl	27732 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   19b3e:	4b3a      	ldr	r3, [pc, #232]	; (19c28 <deferred_work+0x104>)
   19b40:	681d      	ldr	r5, [r3, #0]
   19b42:	b95d      	cbnz	r5, 19b5c <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19b44:	4d39      	ldr	r5, [pc, #228]	; (19c2c <deferred_work+0x108>)
   19b46:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 19c30 <deferred_work+0x10c>
   19b4a:	4545      	cmp	r5, r8
   19b4c:	d30e      	bcc.n	19b6c <deferred_work+0x48>
		bt_conn_unref(conn);
   19b4e:	4630      	mov	r0, r6
   19b50:	f00d fcc0 	bl	274d4 <bt_conn_unref>
}
   19b54:	3708      	adds	r7, #8
   19b56:	46bd      	mov	sp, r7
   19b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   19b5c:	686b      	ldr	r3, [r5, #4]
   19b5e:	b11b      	cbz	r3, 19b68 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   19b60:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   19b64:	4630      	mov	r0, r6
   19b66:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19b68:	69ad      	ldr	r5, [r5, #24]
   19b6a:	e7ea      	b.n	19b42 <deferred_work+0x1e>
		if (cb->disconnected) {
   19b6c:	686b      	ldr	r3, [r5, #4]
   19b6e:	b11b      	cbz	r3, 19b78 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   19b70:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   19b74:	4630      	mov	r0, r6
   19b76:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19b78:	351c      	adds	r5, #28
   19b7a:	e7e6      	b.n	19b4a <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   19b7c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   19b80:	2b01      	cmp	r3, #1
   19b82:	d1e7      	bne.n	19b54 <deferred_work+0x30>
	if (atomic_test_and_clear_bit(conn->flags,
   19b84:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19b88:	f46f 7100 	mvn.w	r1, #512	; 0x200
   19b8c:	4628      	mov	r0, r5
   19b8e:	f00d fc44 	bl	2741a <atomic_and>
   19b92:	0581      	lsls	r1, r0, #22
   19b94:	d52c      	bpl.n	19bf0 <deferred_work+0xcc>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19b96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19b98:	603b      	str	r3, [r7, #0]
   19b9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19b9c:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   19b9e:	4639      	mov	r1, r7
   19ba0:	4630      	mov	r0, r6
   19ba2:	f7ff ff89 	bl	19ab8 <send_conn_le_param_update>
		if (!err) {
   19ba6:	b988      	cbnz	r0, 19bcc <deferred_work+0xa8>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19ba8:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19bac:	4628      	mov	r0, r5
   19bae:	f00d fc34 	bl	2741a <atomic_and>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19bb2:	f3bf 8f5b 	dmb	ish
   19bb6:	e855 3f00 	ldrex	r3, [r5]
   19bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19bbe:	e845 3200 	strex	r2, r3, [r5]
   19bc2:	2a00      	cmp	r2, #0
   19bc4:	d1f7      	bne.n	19bb6 <deferred_work+0x92>
   19bc6:	f3bf 8f5b 	dmb	ish
   19bca:	e7c3      	b.n	19b54 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   19bcc:	466c      	mov	r4, sp
   19bce:	b088      	sub	sp, #32
   19bd0:	466a      	mov	r2, sp
   19bd2:	4b18      	ldr	r3, [pc, #96]	; (19c34 <deferred_work+0x110>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   19bd4:	6153      	str	r3, [r2, #20]
   19bd6:	4b18      	ldr	r3, [pc, #96]	; (19c38 <deferred_work+0x114>)
   19bd8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19bdc:	2304      	movs	r3, #4
   19bde:	f842 3f10 	str.w	r3, [r2, #16]!
   19be2:	4816      	ldr	r0, [pc, #88]	; (19c3c <deferred_work+0x118>)
   19be4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19be8:	f00d fc26 	bl	27438 <z_log_msg_static_create.constprop.0>
   19bec:	46a5      	mov	sp, r4
   19bee:	e7e0      	b.n	19bb2 <deferred_work+0x8e>
		param = BT_LE_CONN_PARAM(
   19bf0:	4a13      	ldr	r2, [pc, #76]	; (19c40 <deferred_work+0x11c>)
   19bf2:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   19bf6:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   19bfa:	4639      	mov	r1, r7
   19bfc:	4630      	mov	r0, r6
   19bfe:	f7ff ff5b 	bl	19ab8 <send_conn_le_param_update>
		if (!err) {
   19c02:	b960      	cbnz	r0, 19c1e <deferred_work+0xfa>
   19c04:	f3bf 8f5b 	dmb	ish
   19c08:	e855 3f00 	ldrex	r3, [r5]
   19c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19c10:	e845 3200 	strex	r2, r3, [r5]
   19c14:	2a00      	cmp	r2, #0
   19c16:	d1f7      	bne.n	19c08 <deferred_work+0xe4>
   19c18:	f3bf 8f5b 	dmb	ish
   19c1c:	e7c9      	b.n	19bb2 <deferred_work+0x8e>
			LOG_WRN("Send auto LE param update failed (err %d)",
   19c1e:	466c      	mov	r4, sp
   19c20:	b088      	sub	sp, #32
   19c22:	466a      	mov	r2, sp
   19c24:	4b07      	ldr	r3, [pc, #28]	; (19c44 <deferred_work+0x120>)
   19c26:	e7d5      	b.n	19bd4 <deferred_work+0xb0>
   19c28:	20002f94 	.word	0x20002f94
   19c2c:	0002a76c 	.word	0x0002a76c
   19c30:	0002a7a4 	.word	0x0002a7a4
   19c34:	0002d7b3 	.word	0x0002d7b3
   19c38:	0002d91b 	.word	0x0002d91b
   19c3c:	0002a820 	.word	0x0002a820
   19c40:	00280018 	.word	0x00280018
   19c44:	0002d7dc 	.word	0x0002d7dc

00019c48 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19c48:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19c4a:	4801      	ldr	r0, [pc, #4]	; (19c50 <bt_conn_create_frag_timeout+0x8>)
   19c4c:	f7ff bdaa 	b.w	197a4 <bt_conn_create_pdu_timeout>
   19c50:	20000c6c 	.word	0x20000c6c

00019c54 <bt_conn_process_tx>:
{
   19c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19c58:	7b43      	ldrb	r3, [r0, #13]
{
   19c5a:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19c5c:	b95b      	cbnz	r3, 19c76 <bt_conn_process_tx+0x22>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19c5e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   19c62:	3004      	adds	r0, #4
   19c64:	f00d fbd9 	bl	2741a <atomic_and>
   19c68:	0643      	lsls	r3, r0, #25
   19c6a:	d504      	bpl.n	19c76 <bt_conn_process_tx+0x22>
		conn_cleanup(conn);
   19c6c:	4628      	mov	r0, r5
}
   19c6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   19c72:	f00d bbf0 	b.w	27456 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   19c76:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19c7a:	f00f ffd6 	bl	29c2a <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   19c7e:	4604      	mov	r4, r0
   19c80:	b960      	cbnz	r0, 19c9c <bt_conn_process_tx+0x48>
   19c82:	4a34      	ldr	r2, [pc, #208]	; (19d54 <bt_conn_process_tx+0x100>)
   19c84:	4934      	ldr	r1, [pc, #208]	; (19d58 <bt_conn_process_tx+0x104>)
   19c86:	4835      	ldr	r0, [pc, #212]	; (19d5c <bt_conn_process_tx+0x108>)
   19c88:	f44f 735d 	mov.w	r3, #884	; 0x374
   19c8c:	f00b fe00 	bl	25890 <assert_print>
   19c90:	4040      	eors	r0, r0
   19c92:	f380 8811 	msr	BASEPRI, r0
   19c96:	f04f 0003 	mov.w	r0, #3
   19c9a:	df02      	svc	2
	buf = net_buf_ref(buf);
   19c9c:	4620      	mov	r0, r4
   19c9e:	f00f f9e3 	bl	29068 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   19ca2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 19d60 <bt_conn_process_tx+0x10c>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   19ca6:	8a02      	ldrh	r2, [r0, #16]
   19ca8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19cac:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   19cae:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   19cb0:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   19cb2:	d807      	bhi.n	19cc4 <bt_conn_process_tx+0x70>
   19cb4:	b932      	cbnz	r2, 19cc4 <bt_conn_process_tx+0x70>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   19cb6:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   19cb8:	4621      	mov	r1, r4
   19cba:	4628      	mov	r0, r5
   19cbc:	f7ff f9b0 	bl	19020 <send_frag>
   19cc0:	4606      	mov	r6, r0
   19cc2:	e030      	b.n	19d26 <bt_conn_process_tx+0xd2>
	if (tx_data(buf)->is_cont) {
   19cc4:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   19cc6:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   19cca:	8a22      	ldrh	r2, [r4, #16]
   19ccc:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19cd0:	429a      	cmp	r2, r3
   19cd2:	d804      	bhi.n	19cde <bt_conn_process_tx+0x8a>
	tx_data(buf)->is_cont = true;
   19cd4:	2301      	movs	r3, #1
   19cd6:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   19cd8:	2200      	movs	r2, #0
   19cda:	2303      	movs	r3, #3
   19cdc:	e7ec      	b.n	19cb8 <bt_conn_process_tx+0x64>
		frag = bt_conn_create_frag(0);
   19cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19ce6:	2000      	movs	r0, #0
   19ce8:	f7ff ffae 	bl	19c48 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19cec:	7b6b      	ldrb	r3, [r5, #13]
   19cee:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19cf0:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19cf2:	d006      	beq.n	19d02 <bt_conn_process_tx+0xae>
		net_buf_unref(frag);
   19cf4:	f005 fe96 	bl	1fa24 <net_buf_unref>
	net_buf_unref(buf);
   19cf8:	4620      	mov	r0, r4
}
   19cfa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   19cfe:	f005 be91 	b.w	1fa24 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   19d02:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   19d06:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   19d0a:	4602      	mov	r2, r0
   19d0c:	463b      	mov	r3, r7
   19d0e:	4621      	mov	r1, r4
   19d10:	4628      	mov	r0, r5
   19d12:	f7ff f985 	bl	19020 <send_frag>
		if (err) {
   19d16:	4606      	mov	r6, r0
   19d18:	b1b8      	cbz	r0, 19d4a <bt_conn_process_tx+0xf6>
			tx_data(buf)->is_cont = flags != FRAG_START;
   19d1a:	f007 0701 	and.w	r7, r7, #1
   19d1e:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19d20:	4640      	mov	r0, r8
   19d22:	f005 fe7f 	bl	1fa24 <net_buf_unref>
	net_buf_unref(buf);
   19d26:	4620      	mov	r0, r4
   19d28:	f005 fe7c 	bl	1fa24 <net_buf_unref>
	if (err  == -EIO) {
   19d2c:	3605      	adds	r6, #5
   19d2e:	d10e      	bne.n	19d4e <bt_conn_process_tx+0xfa>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19d30:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   19d32:	2300      	movs	r3, #0
   19d34:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   19d36:	4620      	mov	r0, r4
   19d38:	f005 fe74 	bl	1fa24 <net_buf_unref>
		if (tx) {
   19d3c:	b13e      	cbz	r6, 19d4e <bt_conn_process_tx+0xfa>
			conn_tx_destroy(conn, tx);
   19d3e:	4631      	mov	r1, r6
   19d40:	4628      	mov	r0, r5
}
   19d42:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   19d46:	f7ff b955 	b.w	18ff4 <conn_tx_destroy>
		flags = FRAG_CONT;
   19d4a:	2701      	movs	r7, #1
   19d4c:	e7bd      	b.n	19cca <bt_conn_process_tx+0x76>
}
   19d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19d52:	bf00      	nop
   19d54:	0002d80a 	.word	0x0002d80a
   19d58:	0002ec40 	.word	0x0002ec40
   19d5c:	0002c743 	.word	0x0002c743
   19d60:	20000390 	.word	0x20000390

00019d64 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   19d64:	4b0b      	ldr	r3, [pc, #44]	; (19d94 <bt_conn_auth_cb_register+0x30>)
   19d66:	b158      	cbz	r0, 19d80 <bt_conn_auth_cb_register+0x1c>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   19d68:	681a      	ldr	r2, [r3, #0]
   19d6a:	b962      	cbnz	r2, 19d86 <bt_conn_auth_cb_register+0x22>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   19d6c:	6902      	ldr	r2, [r0, #16]
   19d6e:	b93a      	cbnz	r2, 19d80 <bt_conn_auth_cb_register+0x1c>
   19d70:	6802      	ldr	r2, [r0, #0]
   19d72:	b95a      	cbnz	r2, 19d8c <bt_conn_auth_cb_register+0x28>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   19d74:	6842      	ldr	r2, [r0, #4]
   19d76:	b94a      	cbnz	r2, 19d8c <bt_conn_auth_cb_register+0x28>
   19d78:	6882      	ldr	r2, [r0, #8]
   19d7a:	b93a      	cbnz	r2, 19d8c <bt_conn_auth_cb_register+0x28>
   19d7c:	6942      	ldr	r2, [r0, #20]
   19d7e:	b92a      	cbnz	r2, 19d8c <bt_conn_auth_cb_register+0x28>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   19d80:	6018      	str	r0, [r3, #0]
		return 0;
   19d82:	2000      	movs	r0, #0
   19d84:	4770      	bx	lr
		return -EALREADY;
   19d86:	f06f 0077 	mvn.w	r0, #119	; 0x77
   19d8a:	4770      	bx	lr
		return -EINVAL;
   19d8c:	f06f 0015 	mvn.w	r0, #21
	return 0;
}
   19d90:	4770      	bx	lr
   19d92:	bf00      	nop
   19d94:	20002fa0 	.word	0x20002fa0

00019d98 <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   19d98:	b168      	cbz	r0, 19db6 <bt_conn_auth_info_cb_register+0x1e>
	parent->next = child;
   19d9a:	2300      	movs	r3, #0
   19d9c:	60c3      	str	r3, [r0, #12]
	return list->tail;
   19d9e:	4b07      	ldr	r3, [pc, #28]	; (19dbc <bt_conn_auth_info_cb_register+0x24>)
   19da0:	6859      	ldr	r1, [r3, #4]
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   19da2:	f100 020c 	add.w	r2, r0, #12
Z_GENLIST_APPEND(slist, snode)
   19da6:	b919      	cbnz	r1, 19db0 <bt_conn_auth_info_cb_register+0x18>
	list->head = node;
   19da8:	e9c3 2200 	strd	r2, r2, [r3]

	return 0;
   19dac:	2000      	movs	r0, #0
   19dae:	4770      	bx	lr
	parent->next = child;
   19db0:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19db2:	605a      	str	r2, [r3, #4]
}
   19db4:	e7fa      	b.n	19dac <bt_conn_auth_info_cb_register+0x14>
		return -EINVAL;
   19db6:	f06f 0015 	mvn.w	r0, #21
}
   19dba:	4770      	bx	lr
   19dbc:	20002f98 	.word	0x20002f98

00019dc0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19dc0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   19dc2:	480c      	ldr	r0, [pc, #48]	; (19df4 <bt_conn_init+0x34>)
   19dc4:	f00f ff10 	bl	29be8 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19dc8:	490b      	ldr	r1, [pc, #44]	; (19df8 <bt_conn_init+0x38>)
   19dca:	480a      	ldr	r0, [pc, #40]	; (19df4 <bt_conn_init+0x34>)
   19dcc:	f00f ff18 	bl	29c00 <k_queue_append>
   19dd0:	490a      	ldr	r1, [pc, #40]	; (19dfc <bt_conn_init+0x3c>)
   19dd2:	4808      	ldr	r0, [pc, #32]	; (19df4 <bt_conn_init+0x34>)
   19dd4:	f00f ff14 	bl	29c00 <k_queue_append>
   19dd8:	4909      	ldr	r1, [pc, #36]	; (19e00 <bt_conn_init+0x40>)
   19dda:	4806      	ldr	r0, [pc, #24]	; (19df4 <bt_conn_init+0x34>)
   19ddc:	f00f ff10 	bl	29c00 <k_queue_append>
	}

	bt_att_init();
   19de0:	f001 fade 	bl	1b3a0 <bt_att_init>

	err = bt_smp_init();
   19de4:	f005 fa12 	bl	1f20c <bt_smp_init>
	if (err) {
   19de8:	4604      	mov	r4, r0
   19dea:	b908      	cbnz	r0, 19df0 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   19dec:	f00d fd06 	bl	277fc <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19df0:	4620      	mov	r0, r4
   19df2:	bd10      	pop	{r4, pc}
   19df4:	20000bfc 	.word	0x20000bfc
   19df8:	20002f64 	.word	0x20002f64
   19dfc:	20002f74 	.word	0x20002f74
   19e00:	20002f84 	.word	0x20002f84

00019e04 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19e04:	b580      	push	{r7, lr}
   19e06:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19e08:	b088      	sub	sp, #32
   19e0a:	466a      	mov	r2, sp
   19e0c:	4b07      	ldr	r3, [pc, #28]	; (19e2c <l2cap_create_le_sig_pdu.part.0+0x28>)
   19e0e:	6153      	str	r3, [r2, #20]
   19e10:	4b07      	ldr	r3, [pc, #28]	; (19e30 <l2cap_create_le_sig_pdu.part.0+0x2c>)
   19e12:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19e16:	2304      	movs	r3, #4
   19e18:	f842 3f10 	str.w	r3, [r2, #16]!
   19e1c:	4805      	ldr	r0, [pc, #20]	; (19e34 <l2cap_create_le_sig_pdu.part.0+0x30>)
   19e1e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19e22:	f00d fc52 	bl	276ca <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   19e26:	2000      	movs	r0, #0
   19e28:	46bd      	mov	sp, r7
   19e2a:	bd80      	pop	{r7, pc}
   19e2c:	0002d929 	.word	0x0002d929
   19e30:	0002dac3 	.word	0x0002dac3
   19e34:	0002a868 	.word	0x0002a868

00019e38 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19e38:	b580      	push	{r7, lr}
   19e3a:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   19e3c:	b088      	sub	sp, #32
   19e3e:	466a      	mov	r2, sp
   19e40:	4b08      	ldr	r3, [pc, #32]	; (19e64 <l2cap_accept.part.0+0x2c>)
   19e42:	6153      	str	r3, [r2, #20]
   19e44:	4b08      	ldr	r3, [pc, #32]	; (19e68 <l2cap_accept.part.0+0x30>)
   19e46:	e9c2 3006 	strd	r3, r0, [r2, #24]
   19e4a:	2304      	movs	r3, #4
   19e4c:	f842 3f10 	str.w	r3, [r2, #16]!
   19e50:	4806      	ldr	r0, [pc, #24]	; (19e6c <l2cap_accept.part.0+0x34>)
   19e52:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19e56:	f00d fc38 	bl	276ca <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   19e5a:	f06f 000b 	mvn.w	r0, #11
   19e5e:	46bd      	mov	sp, r7
   19e60:	bd80      	pop	{r7, pc}
   19e62:	bf00      	nop
   19e64:	0002d955 	.word	0x0002d955
   19e68:	0002dab6 	.word	0x0002dab6
   19e6c:	0002a868 	.word	0x0002a868

00019e70 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   19e70:	4b04      	ldr	r3, [pc, #16]	; (19e84 <l2cap_accept+0x14>)
   19e72:	681a      	ldr	r2, [r3, #0]
   19e74:	b10a      	cbz	r2, 19e7a <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19e76:	f7ff bfdf 	b.w	19e38 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   19e7a:	4803      	ldr	r0, [pc, #12]	; (19e88 <l2cap_accept+0x18>)
   19e7c:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   19e7e:	600b      	str	r3, [r1, #0]
}
   19e80:	4610      	mov	r0, r2
   19e82:	4770      	bx	lr
   19e84:	20002fa4 	.word	0x20002fa4
   19e88:	0002b08c 	.word	0x0002b08c

00019e8c <bt_l2cap_connected>:
{
   19e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19e8e:	4d24      	ldr	r5, [pc, #144]	; (19f20 <bt_l2cap_connected+0x94>)
   19e90:	4f24      	ldr	r7, [pc, #144]	; (19f24 <bt_l2cap_connected+0x98>)
{
   19e92:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19e94:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19e96:	42bd      	cmp	r5, r7
   19e98:	d301      	bcc.n	19e9e <bt_l2cap_connected+0x12>
}
   19e9a:	b003      	add	sp, #12
   19e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   19e9e:	686b      	ldr	r3, [r5, #4]
   19ea0:	a901      	add	r1, sp, #4
   19ea2:	4620      	mov	r0, r4
   19ea4:	4798      	blx	r3
   19ea6:	2800      	cmp	r0, #0
   19ea8:	db34      	blt.n	19f14 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   19eaa:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   19eac:	882a      	ldrh	r2, [r5, #0]
   19eae:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   19eb0:	849a      	strh	r2, [r3, #36]	; 0x24
   19eb2:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19eb6:	68a8      	ldr	r0, [r5, #8]
   19eb8:	f3bf 8f5b 	dmb	ish
   19ebc:	e852 1f00 	ldrex	r1, [r2]
   19ec0:	e842 6c00 	strex	ip, r6, [r2]
   19ec4:	f1bc 0f00 	cmp.w	ip, #0
   19ec8:	d1f8      	bne.n	19ebc <bt_l2cap_connected+0x30>
   19eca:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   19ece:	609e      	str	r6, [r3, #8]
	return list->tail;
   19ed0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   19ed2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   19ed6:	b9f9      	cbnz	r1, 19f18 <bt_l2cap_connected+0x8c>
	list->head = node;
   19ed8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   19edc:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   19ede:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   19ee0:	9801      	ldr	r0, [sp, #4]
   19ee2:	6843      	ldr	r3, [r0, #4]
   19ee4:	681b      	ldr	r3, [r3, #0]
   19ee6:	b103      	cbz	r3, 19eea <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   19ee8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19eea:	9b01      	ldr	r3, [sp, #4]
   19eec:	f3bf 8f5b 	dmb	ish
   19ef0:	3310      	adds	r3, #16
   19ef2:	e853 1f00 	ldrex	r1, [r3]
   19ef6:	f041 0101 	orr.w	r1, r1, #1
   19efa:	e843 1200 	strex	r2, r1, [r3]
   19efe:	2a00      	cmp	r2, #0
   19f00:	d1f7      	bne.n	19ef2 <bt_l2cap_connected+0x66>
   19f02:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19f06:	9801      	ldr	r0, [sp, #4]
   19f08:	6843      	ldr	r3, [r0, #4]
   19f0a:	69db      	ldr	r3, [r3, #28]
   19f0c:	b113      	cbz	r3, 19f14 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   19f0e:	f100 0110 	add.w	r1, r0, #16
   19f12:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19f14:	350c      	adds	r5, #12
   19f16:	e7be      	b.n	19e96 <bt_l2cap_connected+0xa>
	parent->next = child;
   19f18:	600a      	str	r2, [r1, #0]
	list->tail = node;
   19f1a:	6562      	str	r2, [r4, #84]	; 0x54
}
   19f1c:	e7de      	b.n	19edc <bt_l2cap_connected+0x50>
   19f1e:	bf00      	nop
   19f20:	0002a748 	.word	0x0002a748
   19f24:	0002a76c 	.word	0x0002a76c

00019f28 <l2cap_recv>:
{
   19f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f2a:	b083      	sub	sp, #12
	if (buf->len < sizeof(*hdr)) {
   19f2c:	8a0b      	ldrh	r3, [r1, #16]
   19f2e:	2b03      	cmp	r3, #3
{
   19f30:	af02      	add	r7, sp, #8
   19f32:	4606      	mov	r6, r0
   19f34:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19f36:	d80c      	bhi.n	19f52 <l2cap_recv+0x2a>
		LOG_ERR("Too small L2CAP signaling PDU");
   19f38:	466c      	mov	r4, sp
   19f3a:	b088      	sub	sp, #32
   19f3c:	aa02      	add	r2, sp, #8
   19f3e:	4b36      	ldr	r3, [pc, #216]	; (1a018 <l2cap_recv+0xf0>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19f40:	6153      	str	r3, [r2, #20]
   19f42:	4b36      	ldr	r3, [pc, #216]	; (1a01c <l2cap_recv+0xf4>)
		LOG_ERR("Too small LE conn param rsp");
   19f44:	6193      	str	r3, [r2, #24]
   19f46:	2303      	movs	r3, #3
   19f48:	f842 3f10 	str.w	r3, [r2, #16]!
   19f4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19f50:	e017      	b.n	19f82 <l2cap_recv+0x5a>
	return net_buf_simple_pull_mem(&buf->b, len);
   19f52:	2104      	movs	r1, #4
   19f54:	f105 000c 	add.w	r0, r5, #12
   19f58:	f00f f8dd 	bl	29116 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19f5c:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19f5e:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19f60:	4299      	cmp	r1, r3
   19f62:	4604      	mov	r4, r0
   19f64:	d015      	beq.n	19f92 <l2cap_recv+0x6a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19f66:	466c      	mov	r4, sp
   19f68:	b08a      	sub	sp, #40	; 0x28
   19f6a:	aa02      	add	r2, sp, #8
   19f6c:	482c      	ldr	r0, [pc, #176]	; (1a020 <l2cap_recv+0xf8>)
   19f6e:	6150      	str	r0, [r2, #20]
   19f70:	482a      	ldr	r0, [pc, #168]	; (1a01c <l2cap_recv+0xf4>)
   19f72:	6213      	str	r3, [r2, #32]
   19f74:	2305      	movs	r3, #5
   19f76:	e9c2 0106 	strd	r0, r1, [r2, #24]
   19f7a:	f842 3f10 	str.w	r3, [r2, #16]!
   19f7e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   19f82:	4828      	ldr	r0, [pc, #160]	; (1a024 <l2cap_recv+0xfc>)
   19f84:	f00d fba1 	bl	276ca <z_log_msg_static_create.constprop.0>
   19f88:	46a5      	mov	sp, r4
}
   19f8a:	2000      	movs	r0, #0
   19f8c:	3704      	adds	r7, #4
   19f8e:	46bd      	mov	sp, r7
   19f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19f92:	7843      	ldrb	r3, [r0, #1]
   19f94:	b923      	cbnz	r3, 19fa0 <l2cap_recv+0x78>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19f96:	466c      	mov	r4, sp
   19f98:	b088      	sub	sp, #32
   19f9a:	aa02      	add	r2, sp, #8
   19f9c:	4b22      	ldr	r3, [pc, #136]	; (1a028 <l2cap_recv+0x100>)
   19f9e:	e7cf      	b.n	19f40 <l2cap_recv+0x18>
	switch (hdr->code) {
   19fa0:	7803      	ldrb	r3, [r0, #0]
   19fa2:	2b01      	cmp	r3, #1
   19fa4:	d0f1      	beq.n	19f8a <l2cap_recv+0x62>
   19fa6:	2b13      	cmp	r3, #19
   19fa8:	d108      	bne.n	19fbc <l2cap_recv+0x94>
	if (buf->len < sizeof(*rsp)) {
   19faa:	2901      	cmp	r1, #1
   19fac:	d8ed      	bhi.n	19f8a <l2cap_recv+0x62>
		LOG_ERR("Too small LE conn param rsp");
   19fae:	466c      	mov	r4, sp
   19fb0:	b088      	sub	sp, #32
   19fb2:	aa02      	add	r2, sp, #8
   19fb4:	4b1d      	ldr	r3, [pc, #116]	; (1a02c <l2cap_recv+0x104>)
   19fb6:	6153      	str	r3, [r2, #20]
   19fb8:	4b1d      	ldr	r3, [pc, #116]	; (1a030 <l2cap_recv+0x108>)
   19fba:	e7c3      	b.n	19f44 <l2cap_recv+0x1c>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19fbc:	466d      	mov	r5, sp
   19fbe:	b088      	sub	sp, #32
   19fc0:	aa02      	add	r2, sp, #8
   19fc2:	491c      	ldr	r1, [pc, #112]	; (1a034 <l2cap_recv+0x10c>)
   19fc4:	6151      	str	r1, [r2, #20]
   19fc6:	4915      	ldr	r1, [pc, #84]	; (1a01c <l2cap_recv+0xf4>)
   19fc8:	4816      	ldr	r0, [pc, #88]	; (1a024 <l2cap_recv+0xfc>)
	switch (hdr->code) {
   19fca:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19fce:	2304      	movs	r3, #4
   19fd0:	f842 3f10 	str.w	r3, [r2, #16]!
   19fd4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   19fd8:	f00d fb77 	bl	276ca <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19fdc:	2202      	movs	r2, #2
   19fde:	7861      	ldrb	r1, [r4, #1]
   19fe0:	46ad      	mov	sp, r5
   19fe2:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   19fe4:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19fe6:	f00d fb73 	bl	276d0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19fea:	4604      	mov	r4, r0
   19fec:	2800      	cmp	r0, #0
   19fee:	d0cc      	beq.n	19f8a <l2cap_recv+0x62>
	return net_buf_simple_add(&buf->b, len);
   19ff0:	2102      	movs	r1, #2
   19ff2:	300c      	adds	r0, #12
   19ff4:	f00f f868 	bl	290c8 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19ff8:	2300      	movs	r3, #0
   19ffa:	7003      	strb	r3, [r0, #0]
   19ffc:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   19ffe:	4622      	mov	r2, r4
   1a000:	9300      	str	r3, [sp, #0]
   1a002:	2105      	movs	r1, #5
   1a004:	4628      	mov	r0, r5
   1a006:	f00d fbcc 	bl	277a2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a00a:	2800      	cmp	r0, #0
   1a00c:	d0bd      	beq.n	19f8a <l2cap_recv+0x62>
		net_buf_unref(buf);
   1a00e:	4620      	mov	r0, r4
   1a010:	f005 fd08 	bl	1fa24 <net_buf_unref>
   1a014:	e7b9      	b.n	19f8a <l2cap_recv+0x62>
   1a016:	bf00      	nop
   1a018:	0002d980 	.word	0x0002d980
   1a01c:	0002daab 	.word	0x0002daab
   1a020:	0002d9a2 	.word	0x0002d9a2
   1a024:	0002a868 	.word	0x0002a868
   1a028:	0002d9c7 	.word	0x0002d9c7
   1a02c:	0002d9ec 	.word	0x0002d9ec
   1a030:	0002da99 	.word	0x0002da99
   1a034:	0002da0c 	.word	0x0002da0c

0001a038 <bt_l2cap_recv>:
{
   1a038:	b5b0      	push	{r4, r5, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a03a:	8a0b      	ldrh	r3, [r1, #16]
   1a03c:	2b03      	cmp	r3, #3
{
   1a03e:	af00      	add	r7, sp, #0
   1a040:	4605      	mov	r5, r0
   1a042:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a044:	d814      	bhi.n	1a070 <bt_l2cap_recv+0x38>
		LOG_ERR("Too small L2CAP PDU received");
   1a046:	466d      	mov	r5, sp
   1a048:	b088      	sub	sp, #32
   1a04a:	466a      	mov	r2, sp
   1a04c:	4b17      	ldr	r3, [pc, #92]	; (1a0ac <bt_l2cap_recv+0x74>)
   1a04e:	6153      	str	r3, [r2, #20]
   1a050:	4b17      	ldr	r3, [pc, #92]	; (1a0b0 <bt_l2cap_recv+0x78>)
   1a052:	6193      	str	r3, [r2, #24]
   1a054:	2303      	movs	r3, #3
   1a056:	f842 3f10 	str.w	r3, [r2, #16]!
   1a05a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a05e:	4815      	ldr	r0, [pc, #84]	; (1a0b4 <bt_l2cap_recv+0x7c>)
   1a060:	f00d fb33 	bl	276ca <z_log_msg_static_create.constprop.0>
   1a064:	46ad      	mov	sp, r5
	net_buf_unref(buf);
   1a066:	4620      	mov	r0, r4
   1a068:	f005 fcdc 	bl	1fa24 <net_buf_unref>
}
   1a06c:	46bd      	mov	sp, r7
   1a06e:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a070:	2104      	movs	r1, #4
   1a072:	f104 000c 	add.w	r0, r4, #12
   1a076:	f00f f84e 	bl	29116 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a07a:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a07c:	4628      	mov	r0, r5
   1a07e:	f00d fbb3 	bl	277e8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a082:	b968      	cbnz	r0, 1a0a0 <bt_l2cap_recv+0x68>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a084:	466d      	mov	r5, sp
   1a086:	b088      	sub	sp, #32
   1a088:	466a      	mov	r2, sp
   1a08a:	4b0b      	ldr	r3, [pc, #44]	; (1a0b8 <bt_l2cap_recv+0x80>)
   1a08c:	6153      	str	r3, [r2, #20]
   1a08e:	4b08      	ldr	r3, [pc, #32]	; (1a0b0 <bt_l2cap_recv+0x78>)
   1a090:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1a094:	2304      	movs	r3, #4
   1a096:	f842 3f10 	str.w	r3, [r2, #16]!
   1a09a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a09e:	e7de      	b.n	1a05e <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1a0a0:	6843      	ldr	r3, [r0, #4]
   1a0a2:	4621      	mov	r1, r4
   1a0a4:	695b      	ldr	r3, [r3, #20]
   1a0a6:	4798      	blx	r3
   1a0a8:	e7dd      	b.n	1a066 <bt_l2cap_recv+0x2e>
   1a0aa:	bf00      	nop
   1a0ac:	0002da38 	.word	0x0002da38
   1a0b0:	0002dadb 	.word	0x0002dadb
   1a0b4:	0002a868 	.word	0x0002a868
   1a0b8:	0002da59 	.word	0x0002da59

0001a0bc <bt_l2cap_update_conn_param>:
{
   1a0bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1a0be:	4b17      	ldr	r3, [pc, #92]	; (1a11c <bt_l2cap_update_conn_param+0x60>)
{
   1a0c0:	460e      	mov	r6, r1
	ident++;
   1a0c2:	7819      	ldrb	r1, [r3, #0]
   1a0c4:	3101      	adds	r1, #1
   1a0c6:	b2c9      	uxtb	r1, r1
   1a0c8:	2901      	cmp	r1, #1
   1a0ca:	bf38      	it	cc
   1a0cc:	2101      	movcc	r1, #1
{
   1a0ce:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a0d0:	2208      	movs	r2, #8
   1a0d2:	2012      	movs	r0, #18
	ident++;
   1a0d4:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a0d6:	f00d fafb 	bl	276d0 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a0da:	4604      	mov	r4, r0
   1a0dc:	b1d0      	cbz	r0, 1a114 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1a0de:	2108      	movs	r1, #8
   1a0e0:	300c      	adds	r0, #12
   1a0e2:	f00e fff1 	bl	290c8 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1a0e6:	8833      	ldrh	r3, [r6, #0]
   1a0e8:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1a0ea:	8873      	ldrh	r3, [r6, #2]
   1a0ec:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1a0ee:	88b3      	ldrh	r3, [r6, #4]
   1a0f0:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1a0f2:	88f3      	ldrh	r3, [r6, #6]
   1a0f4:	80c3      	strh	r3, [r0, #6]
   1a0f6:	2300      	movs	r3, #0
   1a0f8:	4628      	mov	r0, r5
   1a0fa:	9300      	str	r3, [sp, #0]
   1a0fc:	4622      	mov	r2, r4
   1a0fe:	2105      	movs	r1, #5
   1a100:	f00d fb4f 	bl	277a2 <bt_l2cap_send_cb>
	if (err) {
   1a104:	4605      	mov	r5, r0
   1a106:	b110      	cbz	r0, 1a10e <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1a108:	4620      	mov	r0, r4
   1a10a:	f005 fc8b 	bl	1fa24 <net_buf_unref>
}
   1a10e:	4628      	mov	r0, r5
   1a110:	b002      	add	sp, #8
   1a112:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a114:	f06f 050b 	mvn.w	r5, #11
   1a118:	e7f9      	b.n	1a10e <bt_l2cap_update_conn_param+0x52>
   1a11a:	bf00      	nop
   1a11c:	200034b7 	.word	0x200034b7

0001a120 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1a120:	2823      	cmp	r0, #35	; 0x23
   1a122:	d81f      	bhi.n	1a164 <att_op_get_type+0x44>
   1a124:	281a      	cmp	r0, #26
   1a126:	d804      	bhi.n	1a132 <att_op_get_type+0x12>
   1a128:	1e43      	subs	r3, r0, #1
   1a12a:	2b18      	cmp	r3, #24
   1a12c:	d90e      	bls.n	1a14c <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1a12e:	2006      	movs	r0, #6
   1a130:	4770      	bx	lr
	switch (op) {
   1a132:	f1a0 031b 	sub.w	r3, r0, #27
   1a136:	2b08      	cmp	r3, #8
   1a138:	d81e      	bhi.n	1a178 <att_op_get_type+0x58>
   1a13a:	e8df f003 	tbb	[pc, r3]
   1a13e:	1d05      	.short	0x1d05
   1a140:	191d231b 	.word	0x191d231b
   1a144:	1d25      	.short	0x1d25
   1a146:	05          	.byte	0x05
   1a147:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1a148:	2003      	movs	r0, #3
   1a14a:	4770      	bx	lr
	switch (op) {
   1a14c:	4a0f      	ldr	r2, [pc, #60]	; (1a18c <att_op_get_type+0x6c>)
   1a14e:	2301      	movs	r3, #1
   1a150:	4083      	lsls	r3, r0
   1a152:	401a      	ands	r2, r3
   1a154:	b9c2      	cbnz	r2, 1a188 <att_op_get_type+0x68>
   1a156:	4a0e      	ldr	r2, [pc, #56]	; (1a190 <att_op_get_type+0x70>)
   1a158:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1a15a:	2a00      	cmp	r2, #0
   1a15c:	bf14      	ite	ne
   1a15e:	2001      	movne	r0, #1
   1a160:	2006      	moveq	r0, #6
   1a162:	4770      	bx	lr
	switch (op) {
   1a164:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1a168:	2b52      	cmp	r3, #82	; 0x52
   1a16a:	d105      	bne.n	1a178 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1a16c:	2000      	movs	r0, #0
}
   1a16e:	4770      	bx	lr
		return ATT_REQUEST;
   1a170:	2001      	movs	r0, #1
   1a172:	4770      	bx	lr
		return ATT_INDICATION;
   1a174:	2005      	movs	r0, #5
   1a176:	4770      	bx	lr
		return ATT_COMMAND;
   1a178:	f010 0f40 	tst.w	r0, #64	; 0x40
   1a17c:	bf0c      	ite	eq
   1a17e:	2006      	moveq	r0, #6
   1a180:	2000      	movne	r0, #0
   1a182:	4770      	bx	lr
	switch (op) {
   1a184:	2004      	movs	r0, #4
   1a186:	4770      	bx	lr
		return ATT_RESPONSE;
   1a188:	2002      	movs	r0, #2
   1a18a:	4770      	bx	lr
   1a18c:	028aaaaa 	.word	0x028aaaaa
   1a190:	01455554 	.word	0x01455554

0001a194 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1a194:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a196:	3804      	subs	r0, #4
   1a198:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a19a:	a901      	add	r1, sp, #4
   1a19c:	4802      	ldr	r0, [pc, #8]	; (1a1a8 <bt_att_released+0x14>)
   1a19e:	f00f fc65 	bl	29a6c <k_mem_slab_free>
}
   1a1a2:	b003      	add	sp, #12
   1a1a4:	f85d fb04 	ldr.w	pc, [sp], #4
   1a1a8:	20000b40 	.word	0x20000b40

0001a1ac <tx_meta_data_free>:
{
   1a1ac:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   1a1ae:	2100      	movs	r1, #0
{
   1a1b0:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1a1b2:	2214      	movs	r2, #20
   1a1b4:	f00c fd25 	bl	26c02 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1a1b8:	4621      	mov	r1, r4
   1a1ba:	4802      	ldr	r0, [pc, #8]	; (1a1c4 <tx_meta_data_free+0x18>)
}
   1a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1a1c0:	f00f bd1e 	b.w	29c00 <k_queue_append>
   1a1c4:	20000be4 	.word	0x20000be4

0001a1c8 <find_type_cb>:
{
   1a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1cc:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1a1ce:	f8d2 a000 	ldr.w	sl, [r2]
{
   1a1d2:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1d4:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a1d8:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a1da:	2500      	movs	r5, #0
   1a1dc:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1a1e0:	4680      	mov	r8, r0
   1a1e2:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a1e4:	6800      	ldr	r0, [r0, #0]
   1a1e6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a1ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a1ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1a1f0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a1f2:	f00c fd9f 	bl	26d34 <bt_uuid_cmp>
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	d072      	beq.n	1a2e0 <find_type_cb+0x118>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a1fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a1fe:	f8d8 0000 	ldr.w	r0, [r8]
   1a202:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a206:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a208:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1a20c:	f00c fd92 	bl	26d34 <bt_uuid_cmp>
   1a210:	b138      	cbz	r0, 1a222 <find_type_cb+0x5a>
		if (data->group &&
   1a212:	68a3      	ldr	r3, [r4, #8]
   1a214:	b11b      	cbz	r3, 1a21e <find_type_cb+0x56>
   1a216:	885a      	ldrh	r2, [r3, #2]
   1a218:	42b2      	cmp	r2, r6
   1a21a:	d200      	bcs.n	1a21e <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a21c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a21e:	2001      	movs	r0, #1
   1a220:	e009      	b.n	1a236 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a222:	6861      	ldr	r1, [r4, #4]
   1a224:	4608      	mov	r0, r1
   1a226:	f00d faf4 	bl	27812 <net_buf_frags_len>
   1a22a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a22e:	1a1b      	subs	r3, r3, r0
   1a230:	2b03      	cmp	r3, #3
   1a232:	d804      	bhi.n	1a23e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a234:	2000      	movs	r0, #0
}
   1a236:	3744      	adds	r7, #68	; 0x44
   1a238:	46bd      	mov	sp, r7
   1a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1a23e:	4608      	mov	r0, r1
   1a240:	f00e ff16 	bl	29070 <net_buf_frag_last>
   1a244:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a246:	6860      	ldr	r0, [r4, #4]
   1a248:	f00d fae3 	bl	27812 <net_buf_frags_len>
   1a24c:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1a250:	f105 090c 	add.w	r9, r5, #12
   1a254:	ebab 0b00 	sub.w	fp, fp, r0
   1a258:	4648      	mov	r0, r9
   1a25a:	f00e ff78 	bl	2914e <net_buf_simple_tailroom>
   1a25e:	4558      	cmp	r0, fp
   1a260:	d941      	bls.n	1a2e6 <find_type_cb+0x11e>
   1a262:	6860      	ldr	r0, [r4, #4]
   1a264:	f00d fad5 	bl	27812 <net_buf_frags_len>
   1a268:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a26c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1a26e:	b970      	cbnz	r0, 1a28e <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a270:	6863      	ldr	r3, [r4, #4]
   1a272:	7a98      	ldrb	r0, [r3, #10]
   1a274:	f005 fb14 	bl	1f8a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a278:	2200      	movs	r2, #0
   1a27a:	2300      	movs	r3, #0
   1a27c:	f00e febe 	bl	28ffc <net_buf_alloc_fixed>
		if (!frag) {
   1a280:	4605      	mov	r5, r0
   1a282:	2800      	cmp	r0, #0
   1a284:	d0d6      	beq.n	1a234 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1a286:	4601      	mov	r1, r0
   1a288:	6860      	ldr	r0, [r4, #4]
   1a28a:	f00e ff02 	bl	29092 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a28e:	2300      	movs	r3, #0
   1a290:	9300      	str	r3, [sp, #0]
   1a292:	f8d8 a004 	ldr.w	sl, [r8, #4]
   1a296:	6878      	ldr	r0, [r7, #4]
   1a298:	4641      	mov	r1, r8
   1a29a:	2310      	movs	r3, #16
   1a29c:	f107 0208 	add.w	r2, r7, #8
   1a2a0:	47d0      	blx	sl
	if (read < 0) {
   1a2a2:	f1b0 0800 	subs.w	r8, r0, #0
   1a2a6:	db1b      	blt.n	1a2e0 <find_type_cb+0x118>
	if (read != data->value_len) {
   1a2a8:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a2aa:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1a2ac:	4542      	cmp	r2, r8
   1a2ae:	d043      	beq.n	1a338 <find_type_cb+0x170>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a2b0:	4601      	mov	r1, r0
   1a2b2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a2b6:	f00c fd6b 	bl	26d90 <bt_uuid_create>
   1a2ba:	b9c0      	cbnz	r0, 1a2ee <find_type_cb+0x126>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1a2bc:	466d      	mov	r5, sp
   1a2be:	b088      	sub	sp, #32
   1a2c0:	7c23      	ldrb	r3, [r4, #16]
   1a2c2:	aa02      	add	r2, sp, #8
   1a2c4:	491f      	ldr	r1, [pc, #124]	; (1a344 <find_type_cb+0x17c>)
   1a2c6:	6151      	str	r1, [r2, #20]
   1a2c8:	491f      	ldr	r1, [pc, #124]	; (1a348 <find_type_cb+0x180>)
   1a2ca:	e9c2 1306 	strd	r1, r3, [r2, #24]
			LOG_WRN("Unable to create UUID: size %d", read);
   1a2ce:	2304      	movs	r3, #4
   1a2d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1a2d4:	481d      	ldr	r0, [pc, #116]	; (1a34c <find_type_cb+0x184>)
   1a2d6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a2da:	f00d fb86 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a2de:	46ad      	mov	sp, r5
	data->group = NULL;
   1a2e0:	2300      	movs	r3, #0
   1a2e2:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1a2e4:	e79b      	b.n	1a21e <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1a2e6:	4648      	mov	r0, r9
   1a2e8:	f00e ff31 	bl	2914e <net_buf_simple_tailroom>
   1a2ec:	e7bf      	b.n	1a26e <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a2ee:	fa5f f288 	uxtb.w	r2, r8
   1a2f2:	f107 0108 	add.w	r1, r7, #8
   1a2f6:	f107 0018 	add.w	r0, r7, #24
   1a2fa:	f00c fd49 	bl	26d90 <bt_uuid_create>
   1a2fe:	b940      	cbnz	r0, 1a312 <find_type_cb+0x14a>
			LOG_WRN("Unable to create UUID: size %d", read);
   1a300:	466d      	mov	r5, sp
   1a302:	b088      	sub	sp, #32
   1a304:	aa02      	add	r2, sp, #8
   1a306:	4b12      	ldr	r3, [pc, #72]	; (1a350 <find_type_cb+0x188>)
   1a308:	6153      	str	r3, [r2, #20]
   1a30a:	4b0f      	ldr	r3, [pc, #60]	; (1a348 <find_type_cb+0x180>)
   1a30c:	e9c2 3806 	strd	r3, r8, [r2, #24]
   1a310:	e7dd      	b.n	1a2ce <find_type_cb+0x106>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a312:	f107 0118 	add.w	r1, r7, #24
   1a316:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a31a:	f00c fd0b 	bl	26d34 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1a31e:	2800      	cmp	r0, #0
   1a320:	d1de      	bne.n	1a2e0 <find_type_cb+0x118>
	data->err = 0x00;
   1a322:	2300      	movs	r3, #0
   1a324:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1a326:	2104      	movs	r1, #4
   1a328:	f105 000c 	add.w	r0, r5, #12
   1a32c:	f00e fecc 	bl	290c8 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a330:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a332:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a334:	68a3      	ldr	r3, [r4, #8]
   1a336:	e771      	b.n	1a21c <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1a338:	f107 0108 	add.w	r1, r7, #8
   1a33c:	f00c fc46 	bl	26bcc <memcmp>
   1a340:	e7ed      	b.n	1a31e <find_type_cb+0x156>
   1a342:	bf00      	nop
   1a344:	0002dae9 	.word	0x0002dae9
   1a348:	0002dd6c 	.word	0x0002dd6c
   1a34c:	0002a818 	.word	0x0002a818
   1a350:	0002db0c 	.word	0x0002db0c

0001a354 <chan_send>:
{
   1a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a358:	b082      	sub	sp, #8
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1a35a:	f8d1 a018 	ldr.w	sl, [r1, #24]
	hdr = (void *)buf->data;
   1a35e:	68cb      	ldr	r3, [r1, #12]
{
   1a360:	af02      	add	r7, sp, #8
   1a362:	4606      	mov	r6, r0
   1a364:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1a366:	3034      	adds	r0, #52	; 0x34
   1a368:	2102      	movs	r1, #2
   1a36a:	f00d fa6a 	bl	27842 <atomic_test_bit>
   1a36e:	b9a8      	cbnz	r0, 1a39c <chan_send+0x48>
		LOG_ERR("ATT channel not connected");
   1a370:	466c      	mov	r4, sp
   1a372:	b088      	sub	sp, #32
   1a374:	aa02      	add	r2, sp, #8
   1a376:	4b36      	ldr	r3, [pc, #216]	; (1a450 <chan_send+0xfc>)
   1a378:	6153      	str	r3, [r2, #20]
   1a37a:	4b36      	ldr	r3, [pc, #216]	; (1a454 <chan_send+0x100>)
   1a37c:	6193      	str	r3, [r2, #24]
   1a37e:	2303      	movs	r3, #3
   1a380:	f842 3f10 	str.w	r3, [r2, #16]!
   1a384:	4834      	ldr	r0, [pc, #208]	; (1a458 <chan_send+0x104>)
   1a386:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a38a:	f00d fb2e 	bl	279ea <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   1a38e:	f06f 0515 	mvn.w	r5, #21
   1a392:	46a5      	mov	sp, r4
}
   1a394:	4628      	mov	r0, r5
   1a396:	46bd      	mov	sp, r7
   1a398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a39c:	781b      	ldrb	r3, [r3, #0]
   1a39e:	2bd2      	cmp	r3, #210	; 0xd2
   1a3a0:	d11d      	bne.n	1a3de <chan_send+0x8a>
		err = bt_smp_sign(chan->att->conn, buf);
   1a3a2:	6833      	ldr	r3, [r6, #0]
   1a3a4:	4621      	mov	r1, r4
   1a3a6:	6818      	ldr	r0, [r3, #0]
   1a3a8:	f003 ffea 	bl	1e380 <bt_smp_sign>
		if (err) {
   1a3ac:	4605      	mov	r5, r0
   1a3ae:	b1b0      	cbz	r0, 1a3de <chan_send+0x8a>
			LOG_ERR("Error signing data");
   1a3b0:	466e      	mov	r6, sp
   1a3b2:	b088      	sub	sp, #32
   1a3b4:	aa02      	add	r2, sp, #8
   1a3b6:	4b29      	ldr	r3, [pc, #164]	; (1a45c <chan_send+0x108>)
   1a3b8:	6153      	str	r3, [r2, #20]
   1a3ba:	4b26      	ldr	r3, [pc, #152]	; (1a454 <chan_send+0x100>)
   1a3bc:	6193      	str	r3, [r2, #24]
   1a3be:	2303      	movs	r3, #3
   1a3c0:	f842 3f10 	str.w	r3, [r2, #16]!
   1a3c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a3c8:	4823      	ldr	r0, [pc, #140]	; (1a458 <chan_send+0x104>)
   1a3ca:	f00d fb0e 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a3ce:	46b5      	mov	sp, r6
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a3d0:	69a0      	ldr	r0, [r4, #24]
   1a3d2:	f7ff feeb 	bl	1a1ac <tx_meta_data_free>
			net_buf_unref(buf);
   1a3d6:	4620      	mov	r0, r4
   1a3d8:	f005 fb24 	bl	1fa24 <net_buf_unref>
			return err;
   1a3dc:	e7da      	b.n	1a394 <chan_send+0x40>
	state->offset = net_buf_simple_headroom(buf);
   1a3de:	f104 000c 	add.w	r0, r4, #12
   1a3e2:	f00e feb0 	bl	29146 <net_buf_simple_headroom>
	state->len = buf->len;
   1a3e6:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   1a3ea:	f8ca 6000 	str.w	r6, [sl]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a3ee:	6833      	ldr	r3, [r6, #0]
   1a3f0:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a3f2:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a3f4:	4680      	mov	r8, r0
   1a3f6:	7818      	ldrb	r0, [r3, #0]
   1a3f8:	f7ff fe92 	bl	1a120 <att_op_get_type>
	switch (op_type) {
   1a3fc:	2805      	cmp	r0, #5
   1a3fe:	bf96      	itet	ls
   1a400:	4b17      	ldrls	r3, [pc, #92]	; (1a460 <chan_send+0x10c>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a402:	4b18      	ldrhi	r3, [pc, #96]	; (1a464 <chan_send+0x110>)
   1a404:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a408:	f8cd a000 	str.w	sl, [sp]
   1a40c:	4628      	mov	r0, r5
   1a40e:	4622      	mov	r2, r4
   1a410:	2104      	movs	r1, #4
   1a412:	f00d f9c6 	bl	277a2 <bt_l2cap_send_cb>
	if (err) {
   1a416:	4605      	mov	r5, r0
   1a418:	2800      	cmp	r0, #0
   1a41a:	d0bb      	beq.n	1a394 <chan_send+0x40>
		if (err == -ENOBUFS) {
   1a41c:	f110 0f69 	cmn.w	r0, #105	; 0x69
   1a420:	d10f      	bne.n	1a442 <chan_send+0xee>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1a422:	466e      	mov	r6, sp
   1a424:	b088      	sub	sp, #32
   1a426:	aa02      	add	r2, sp, #8
   1a428:	4b0f      	ldr	r3, [pc, #60]	; (1a468 <chan_send+0x114>)
   1a42a:	6153      	str	r3, [r2, #20]
   1a42c:	4b09      	ldr	r3, [pc, #36]	; (1a454 <chan_send+0x100>)
   1a42e:	6193      	str	r3, [r2, #24]
   1a430:	2303      	movs	r3, #3
   1a432:	f842 3f10 	str.w	r3, [r2, #16]!
   1a436:	4808      	ldr	r0, [pc, #32]	; (1a458 <chan_send+0x104>)
   1a438:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a43c:	f00d fad5 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a440:	46b5      	mov	sp, r6
	buf->data = buf->__buf + state->offset;
   1a442:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a444:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a448:	fa13 f388 	uxtah	r3, r3, r8
   1a44c:	60e3      	str	r3, [r4, #12]
}
   1a44e:	e7a1      	b.n	1a394 <chan_send+0x40>
   1a450:	0002db2f 	.word	0x0002db2f
   1a454:	0002dda9 	.word	0x0002dda9
   1a458:	0002a818 	.word	0x0002a818
   1a45c:	0002db4d 	.word	0x0002db4d
   1a460:	0002b0b4 	.word	0x0002b0b4
   1a464:	00027ddb 	.word	0x00027ddb
   1a468:	0002db64 	.word	0x0002db64

0001a46c <att_get>:
{
   1a46c:	b598      	push	{r3, r4, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a46e:	7b43      	ldrb	r3, [r0, #13]
   1a470:	2b07      	cmp	r3, #7
{
   1a472:	af00      	add	r7, sp, #0
	if (conn->state != BT_CONN_CONNECTED) {
   1a474:	d012      	beq.n	1a49c <att_get+0x30>
		LOG_WRN("Not connected");
   1a476:	466c      	mov	r4, sp
   1a478:	b088      	sub	sp, #32
   1a47a:	466a      	mov	r2, sp
   1a47c:	4b17      	ldr	r3, [pc, #92]	; (1a4dc <att_get+0x70>)
   1a47e:	6153      	str	r3, [r2, #20]
   1a480:	4b17      	ldr	r3, [pc, #92]	; (1a4e0 <att_get+0x74>)
   1a482:	6193      	str	r3, [r2, #24]
   1a484:	2303      	movs	r3, #3
   1a486:	f842 3f10 	str.w	r3, [r2, #16]!
   1a48a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Unable to find ATT channel");
   1a48e:	4815      	ldr	r0, [pc, #84]	; (1a4e4 <att_get+0x78>)
   1a490:	f00d faab 	bl	279ea <z_log_msg_static_create.constprop.0>
		return NULL;
   1a494:	2000      	movs	r0, #0
   1a496:	46a5      	mov	sp, r4
}
   1a498:	46bd      	mov	sp, r7
   1a49a:	bd98      	pop	{r3, r4, r7, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a49c:	2104      	movs	r1, #4
   1a49e:	f00d f9a3 	bl	277e8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a4a2:	4603      	mov	r3, r0
   1a4a4:	b960      	cbnz	r0, 1a4c0 <att_get+0x54>
		LOG_ERR("Unable to find ATT channel");
   1a4a6:	466c      	mov	r4, sp
   1a4a8:	b088      	sub	sp, #32
   1a4aa:	466a      	mov	r2, sp
   1a4ac:	4b0e      	ldr	r3, [pc, #56]	; (1a4e8 <att_get+0x7c>)
   1a4ae:	6153      	str	r3, [r2, #20]
   1a4b0:	4b0b      	ldr	r3, [pc, #44]	; (1a4e0 <att_get+0x74>)
   1a4b2:	6193      	str	r3, [r2, #24]
   1a4b4:	2303      	movs	r3, #3
   1a4b6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a4ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a4be:	e7e6      	b.n	1a48e <att_get+0x22>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   1a4c0:	2102      	movs	r1, #2
   1a4c2:	3030      	adds	r0, #48	; 0x30
   1a4c4:	f00d f9bd 	bl	27842 <atomic_test_bit>
   1a4c8:	b920      	cbnz	r0, 1a4d4 <att_get+0x68>
		LOG_ERR("ATT channel not connected");
   1a4ca:	466c      	mov	r4, sp
   1a4cc:	b088      	sub	sp, #32
   1a4ce:	466a      	mov	r2, sp
   1a4d0:	4b06      	ldr	r3, [pc, #24]	; (1a4ec <att_get+0x80>)
   1a4d2:	e7ec      	b.n	1a4ae <att_get+0x42>
	return att_chan->att;
   1a4d4:	f853 0c04 	ldr.w	r0, [r3, #-4]
   1a4d8:	e7de      	b.n	1a498 <att_get+0x2c>
   1a4da:	bf00      	nop
   1a4dc:	0002db8b 	.word	0x0002db8b
   1a4e0:	0002ddce 	.word	0x0002ddce
   1a4e4:	0002a818 	.word	0x0002a818
   1a4e8:	0002db9d 	.word	0x0002db9d
   1a4ec:	0002db2f 	.word	0x0002db2f

0001a4f0 <bt_att_connected>:
{
   1a4f0:	b510      	push	{r4, lr}
   1a4f2:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1a4f6:	4604      	mov	r4, r0
   1a4f8:	f3bf 8f5b 	dmb	ish
   1a4fc:	e853 1f00 	ldrex	r1, [r3]
   1a500:	f041 0104 	orr.w	r1, r1, #4
   1a504:	e843 1200 	strex	r2, r1, [r3]
   1a508:	2a00      	cmp	r2, #0
   1a50a:	d1f7      	bne.n	1a4fc <bt_att_connected+0xc>
   1a50c:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a510:	2317      	movs	r3, #23
   1a512:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a514:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1a516:	1f20      	subs	r0, r4, #4
   1a518:	f00d fa24 	bl	27964 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a51c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1a520:	4903      	ldr	r1, [pc, #12]	; (1a530 <bt_att_connected+0x40>)
   1a522:	f00f fc4d 	bl	29dc0 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1a526:	6820      	ldr	r0, [r4, #0]
}
   1a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1a52c:	f002 bd2a 	b.w	1cf84 <bt_gatt_connected>
   1a530:	0001b5d5 	.word	0x0001b5d5

0001a534 <read_group_cb>:
{
   1a534:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a538:	4605      	mov	r5, r0
   1a53a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a53c:	f04f 0800 	mov.w	r8, #0
   1a540:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a544:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1a546:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a548:	f88d 8008 	strb.w	r8, [sp, #8]
   1a54c:	a902      	add	r1, sp, #8
{
   1a54e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a550:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a554:	f00c fbee 	bl	26d34 <bt_uuid_cmp>
   1a558:	b1a0      	cbz	r0, 1a584 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a55a:	f642 0301 	movw	r3, #10241	; 0x2801
   1a55e:	6828      	ldr	r0, [r5, #0]
   1a560:	f88d 800c 	strb.w	r8, [sp, #12]
   1a564:	a903      	add	r1, sp, #12
   1a566:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a56a:	f00c fbe3 	bl	26d34 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a56e:	b148      	cbz	r0, 1a584 <read_group_cb+0x50>
		if (data->group &&
   1a570:	6923      	ldr	r3, [r4, #16]
   1a572:	b11b      	cbz	r3, 1a57c <read_group_cb+0x48>
   1a574:	885a      	ldrh	r2, [r3, #2]
   1a576:	42b2      	cmp	r2, r6
   1a578:	d200      	bcs.n	1a57c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a57a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a57c:	2001      	movs	r0, #1
}
   1a57e:	b004      	add	sp, #16
   1a580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a584:	6861      	ldr	r1, [r4, #4]
   1a586:	6828      	ldr	r0, [r5, #0]
   1a588:	f00c fbd4 	bl	26d34 <bt_uuid_cmp>
   1a58c:	b110      	cbz	r0, 1a594 <read_group_cb+0x60>
		data->group = NULL;
   1a58e:	2300      	movs	r3, #0
   1a590:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a592:	e7f3      	b.n	1a57c <read_group_cb+0x48>
	if (data->rsp->len &&
   1a594:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a596:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1a598:	781a      	ldrb	r2, [r3, #0]
   1a59a:	b132      	cbz	r2, 1a5aa <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a59c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a59e:	8a01      	ldrh	r1, [r0, #16]
   1a5a0:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a5a2:	4293      	cmp	r3, r2
   1a5a4:	da01      	bge.n	1a5aa <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a5a6:	2000      	movs	r0, #0
   1a5a8:	e7e9      	b.n	1a57e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a5aa:	2104      	movs	r1, #4
   1a5ac:	300c      	adds	r0, #12
   1a5ae:	f00e fd8b 	bl	290c8 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a5b2:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a5b4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a5b6:	6923      	ldr	r3, [r4, #16]
   1a5b8:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a5ba:	4b08      	ldr	r3, [pc, #32]	; (1a5dc <read_group_cb+0xa8>)
   1a5bc:	9300      	str	r3, [sp, #0]
   1a5be:	9401      	str	r4, [sp, #4]
   1a5c0:	68a2      	ldr	r2, [r4, #8]
   1a5c2:	2300      	movs	r3, #0
   1a5c4:	4629      	mov	r1, r5
   1a5c6:	4638      	mov	r0, r7
   1a5c8:	f00d fa8e 	bl	27ae8 <att_chan_read>
	if (read < 0) {
   1a5cc:	2800      	cmp	r0, #0
   1a5ce:	dbea      	blt.n	1a5a6 <read_group_cb+0x72>
	if (!data->group) {
   1a5d0:	6920      	ldr	r0, [r4, #16]
   1a5d2:	3800      	subs	r0, #0
   1a5d4:	bf18      	it	ne
   1a5d6:	2001      	movne	r0, #1
   1a5d8:	e7d1      	b.n	1a57e <read_group_cb+0x4a>
   1a5da:	bf00      	nop
   1a5dc:	000279cb 	.word	0x000279cb

0001a5e0 <read_type_cb>:
{
   1a5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a5e4:	6817      	ldr	r7, [r2, #0]
{
   1a5e6:	4605      	mov	r5, r0
   1a5e8:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a5ea:	6800      	ldr	r0, [r0, #0]
   1a5ec:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a5ee:	687e      	ldr	r6, [r7, #4]
{
   1a5f0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a5f2:	f00c fb9f 	bl	26d34 <bt_uuid_cmp>
   1a5f6:	4681      	mov	r9, r0
   1a5f8:	2800      	cmp	r0, #0
   1a5fa:	d13c      	bne.n	1a676 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a5fc:	4630      	mov	r0, r6
   1a5fe:	2295      	movs	r2, #149	; 0x95
   1a600:	4629      	mov	r1, r5
   1a602:	f00d fff2 	bl	285ea <bt_gatt_check_perm>
   1a606:	4606      	mov	r6, r0
   1a608:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a60a:	b140      	cbz	r0, 1a61e <read_type_cb+0x3e>
		if (data->rsp->len) {
   1a60c:	68e3      	ldr	r3, [r4, #12]
   1a60e:	781b      	ldrb	r3, [r3, #0]
   1a610:	b10b      	cbz	r3, 1a616 <read_type_cb+0x36>
			data->err = 0x00;
   1a612:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a616:	2000      	movs	r0, #0
}
   1a618:	b003      	add	sp, #12
   1a61a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a61e:	68a0      	ldr	r0, [r4, #8]
   1a620:	f00e fd26 	bl	29070 <net_buf_frag_last>
   1a624:	2102      	movs	r1, #2
   1a626:	300c      	adds	r0, #12
   1a628:	f00e fd4e 	bl	290c8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a62c:	4b13      	ldr	r3, [pc, #76]	; (1a67c <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a62e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a630:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a634:	9300      	str	r3, [sp, #0]
   1a636:	9401      	str	r4, [sp, #4]
   1a638:	68a2      	ldr	r2, [r4, #8]
   1a63a:	4633      	mov	r3, r6
   1a63c:	4629      	mov	r1, r5
   1a63e:	4638      	mov	r0, r7
   1a640:	f00d fa52 	bl	27ae8 <att_chan_read>
	if (read < 0) {
   1a644:	2800      	cmp	r0, #0
   1a646:	da07      	bge.n	1a658 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1a648:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a64c:	bf26      	itte	cs
   1a64e:	4240      	negcs	r0, r0
   1a650:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a652:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1a654:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a656:	e7de      	b.n	1a616 <read_type_cb+0x36>
	if (!data->item) {
   1a658:	6923      	ldr	r3, [r4, #16]
   1a65a:	2b00      	cmp	r3, #0
   1a65c:	d0db      	beq.n	1a616 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a65e:	68a0      	ldr	r0, [r4, #8]
   1a660:	f00d f8d7 	bl	27812 <net_buf_frags_len>
   1a664:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a666:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a668:	68e3      	ldr	r3, [r4, #12]
   1a66a:	781b      	ldrb	r3, [r3, #0]
   1a66c:	4298      	cmp	r0, r3
   1a66e:	bf94      	ite	ls
   1a670:	2000      	movls	r0, #0
   1a672:	2001      	movhi	r0, #1
   1a674:	e7d0      	b.n	1a618 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a676:	2001      	movs	r0, #1
   1a678:	e7ce      	b.n	1a618 <read_type_cb+0x38>
   1a67a:	bf00      	nop
   1a67c:	00027823 	.word	0x00027823

0001a680 <prep_write_cb>:
{
   1a680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a682:	4614      	mov	r4, r2
   1a684:	4605      	mov	r5, r0
   1a686:	460e      	mov	r6, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
   1a688:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1a68c:	4601      	mov	r1, r0
   1a68e:	6820      	ldr	r0, [r4, #0]
   1a690:	f00d ffab 	bl	285ea <bt_gatt_check_perm>
   1a694:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1a696:	b9a0      	cbnz	r0, 1a6c2 <prep_write_cb+0x42>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
   1a698:	8a6b      	ldrh	r3, [r5, #18]
   1a69a:	065b      	lsls	r3, r3, #25
   1a69c:	d514      	bpl.n	1a6c8 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
   1a69e:	2301      	movs	r3, #1
   1a6a0:	9301      	str	r3, [sp, #4]
   1a6a2:	89e3      	ldrh	r3, [r4, #14]
   1a6a4:	9300      	str	r3, [sp, #0]
   1a6a6:	68af      	ldr	r7, [r5, #8]
   1a6a8:	89a3      	ldrh	r3, [r4, #12]
   1a6aa:	68a2      	ldr	r2, [r4, #8]
   1a6ac:	6820      	ldr	r0, [r4, #0]
   1a6ae:	4629      	mov	r1, r5
   1a6b0:	47b8      	blx	r7
	if (write != 0) {
   1a6b2:	b148      	cbz	r0, 1a6c8 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
   1a6b4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a6b8:	bf26      	itte	cs
   1a6ba:	4240      	negcs	r0, r0
   1a6bc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a6be:	200e      	movcc	r0, #14
		data->err = err_to_att(write);
   1a6c0:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
   1a6c2:	2000      	movs	r0, #0
}
   1a6c4:	b003      	add	sp, #12
   1a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1a6c8:	480b      	ldr	r0, [pc, #44]	; (1a6f8 <prep_write_cb+0x78>)
   1a6ca:	2200      	movs	r2, #0
   1a6cc:	2300      	movs	r3, #0
   1a6ce:	f00e fc95 	bl	28ffc <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
   1a6d2:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
   1a6d4:	b910      	cbnz	r0, 1a6dc <prep_write_cb+0x5c>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
   1a6d6:	2309      	movs	r3, #9
   1a6d8:	7423      	strb	r3, [r4, #16]
		return BT_GATT_ITER_STOP;
   1a6da:	e7f2      	b.n	1a6c2 <prep_write_cb+0x42>
	attr_data->handle = handle;
   1a6dc:	8306      	strh	r6, [r0, #24]
	attr_data->offset = data->offset;
   1a6de:	89e3      	ldrh	r3, [r4, #14]
   1a6e0:	8343      	strh	r3, [r0, #26]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a6e2:	6860      	ldr	r0, [r4, #4]
   1a6e4:	89a2      	ldrh	r2, [r4, #12]
   1a6e6:	68a1      	ldr	r1, [r4, #8]
   1a6e8:	300c      	adds	r0, #12
   1a6ea:	f00e fcf3 	bl	290d4 <net_buf_simple_add_mem>
	data->err = 0U;
   1a6ee:	2300      	movs	r3, #0
   1a6f0:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
   1a6f2:	2001      	movs	r0, #1
   1a6f4:	e7e6      	b.n	1a6c4 <prep_write_cb+0x44>
   1a6f6:	bf00      	nop
   1a6f8:	20000d1c 	.word	0x20000d1c

0001a6fc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a700:	b082      	sub	sp, #8
   1a702:	af00      	add	r7, sp, #0
   1a704:	4604      	mov	r4, r0
   1a706:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a708:	483e      	ldr	r0, [pc, #248]	; (1a804 <bt_att_accept+0x108>)
   1a70a:	2200      	movs	r2, #0
   1a70c:	2300      	movs	r3, #0
   1a70e:	4639      	mov	r1, r7
   1a710:	f008 fe8a 	bl	23428 <k_mem_slab_alloc>
   1a714:	4605      	mov	r5, r0
   1a716:	b1b8      	cbz	r0, 1a748 <bt_att_accept+0x4c>
		LOG_ERR("No available ATT context for conn %p", conn);
   1a718:	466d      	mov	r5, sp
   1a71a:	b088      	sub	sp, #32
   1a71c:	466a      	mov	r2, sp
   1a71e:	4b3a      	ldr	r3, [pc, #232]	; (1a808 <bt_att_accept+0x10c>)
   1a720:	6153      	str	r3, [r2, #20]
   1a722:	4b3a      	ldr	r3, [pc, #232]	; (1a80c <bt_att_accept+0x110>)
   1a724:	483a      	ldr	r0, [pc, #232]	; (1a810 <bt_att_accept+0x114>)
   1a726:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1a72a:	2304      	movs	r3, #4
   1a72c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a730:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a734:	f00d f959 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a738:	46ad      	mov	sp, r5
		return -ENOMEM;
   1a73a:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1a73e:	4628      	mov	r0, r5
   1a740:	3708      	adds	r7, #8
   1a742:	46bd      	mov	sp, r7
   1a744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1a748:	f009 fd78 	bl	2423c <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1a74c:	4b31      	ldr	r3, [pc, #196]	; (1a814 <bt_att_accept+0x118>)
	(void)memset(att, 0, sizeof(*att));
   1a74e:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1a750:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1a752:	2234      	movs	r2, #52	; 0x34
   1a754:	6838      	ldr	r0, [r7, #0]
   1a756:	f00c fa54 	bl	26c02 <memset>
	att->conn = conn;
   1a75a:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a75c:	482e      	ldr	r0, [pc, #184]	; (1a818 <bt_att_accept+0x11c>)
	att->conn = conn;
   1a75e:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1a760:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a762:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1a764:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a768:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a76c:	2200      	movs	r2, #0
   1a76e:	2300      	movs	r3, #0
   1a770:	1d39      	adds	r1, r7, #4
   1a772:	f008 fe59 	bl	23428 <k_mem_slab_alloc>
   1a776:	4605      	mov	r5, r0
   1a778:	b190      	cbz	r0, 1a7a0 <bt_att_accept+0xa4>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1a77a:	6823      	ldr	r3, [r4, #0]
   1a77c:	466c      	mov	r4, sp
   1a77e:	b088      	sub	sp, #32
   1a780:	466a      	mov	r2, sp
   1a782:	4926      	ldr	r1, [pc, #152]	; (1a81c <bt_att_accept+0x120>)
   1a784:	6151      	str	r1, [r2, #20]
   1a786:	4926      	ldr	r1, [pc, #152]	; (1a820 <bt_att_accept+0x124>)
   1a788:	4821      	ldr	r0, [pc, #132]	; (1a810 <bt_att_accept+0x114>)
   1a78a:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1a78e:	2304      	movs	r3, #4
   1a790:	f842 3f10 	str.w	r3, [r2, #16]!
   1a794:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a798:	f00d f927 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a79c:	46a5      	mov	sp, r4
	if (!chan) {
   1a79e:	e7cc      	b.n	1a73a <bt_att_accept+0x3e>
	(void)memset(chan, 0, sizeof(*chan));
   1a7a0:	4601      	mov	r1, r0
   1a7a2:	2290      	movs	r2, #144	; 0x90
   1a7a4:	6878      	ldr	r0, [r7, #4]
   1a7a6:	f00c fa2c 	bl	26c02 <memset>
	chan->chan.chan.ops = &ops;
   1a7aa:	6878      	ldr	r0, [r7, #4]
   1a7ac:	4b1d      	ldr	r3, [pc, #116]	; (1a824 <bt_att_accept+0x128>)
   1a7ae:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1a7b0:	303c      	adds	r0, #60	; 0x3c
   1a7b2:	f00f fa19 	bl	29be8 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a7b6:	687b      	ldr	r3, [r7, #4]
   1a7b8:	f3bf 8f5b 	dmb	ish
   1a7bc:	3334      	adds	r3, #52	; 0x34
   1a7be:	e853 2f00 	ldrex	r2, [r3]
   1a7c2:	e843 5100 	strex	r1, r5, [r3]
   1a7c6:	2900      	cmp	r1, #0
   1a7c8:	d1f9      	bne.n	1a7be <bt_att_accept+0xc2>
   1a7ca:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a7ce:	687b      	ldr	r3, [r7, #4]
   1a7d0:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1a7d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	att_chan_attach(att, chan);
   1a7d4:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1a7d8:	b92b      	cbnz	r3, 1a7e6 <bt_att_accept+0xea>
   1a7da:	f104 000c 	add.w	r0, r4, #12
   1a7de:	f00f fa03 	bl	29be8 <z_impl_k_queue_init>
   1a7e2:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	return list->head;
   1a7e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	parent->next = child;
   1a7e8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   1a7ec:	6b22      	ldr	r2, [r4, #48]	; 0x30
	sys_slist_prepend(&att->chans, &chan->node);
   1a7ee:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   1a7f2:	62e3      	str	r3, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   1a7f4:	b902      	cbnz	r2, 1a7f8 <bt_att_accept+0xfc>
	list->tail = node;
   1a7f6:	6323      	str	r3, [r4, #48]	; 0x30
	return chan;
   1a7f8:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1a7fa:	2b00      	cmp	r3, #0
   1a7fc:	d09d      	beq.n	1a73a <bt_att_accept+0x3e>
	*ch = &chan->chan.chan;
   1a7fe:	3304      	adds	r3, #4
   1a800:	6033      	str	r3, [r6, #0]
	return 0;
   1a802:	e79c      	b.n	1a73e <bt_att_accept+0x42>
   1a804:	20000b24 	.word	0x20000b24
   1a808:	0002dbbc 	.word	0x0002dbbc
   1a80c:	0002ddc0 	.word	0x0002ddc0
   1a810:	0002a818 	.word	0x0002a818
   1a814:	20003010 	.word	0x20003010
   1a818:	20000b40 	.word	0x20000b40
   1a81c:	0002dbe5 	.word	0x0002dbe5
   1a820:	0002ddb3 	.word	0x0002ddb3
   1a824:	200007b8 	.word	0x200007b8

0001a828 <bt_att_chan_create_pdu>:
{
   1a828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1a82c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a82e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a830:	1c53      	adds	r3, r2, #1
   1a832:	428b      	cmp	r3, r1
{
   1a834:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a836:	d916      	bls.n	1a866 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a838:	466c      	mov	r4, sp
   1a83a:	b08a      	sub	sp, #40	; 0x28
   1a83c:	466a      	mov	r2, sp
   1a83e:	4831      	ldr	r0, [pc, #196]	; (1a904 <bt_att_chan_create_pdu+0xdc>)
   1a840:	6150      	str	r0, [r2, #20]
   1a842:	4831      	ldr	r0, [pc, #196]	; (1a908 <bt_att_chan_create_pdu+0xe0>)
   1a844:	6213      	str	r3, [r2, #32]
   1a846:	2305      	movs	r3, #5
   1a848:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1a84c:	f842 3f10 	str.w	r3, [r2, #16]!
   1a850:	f44f 5122 	mov.w	r1, #10368	; 0x2880
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a854:	482d      	ldr	r0, [pc, #180]	; (1a90c <bt_att_chan_create_pdu+0xe4>)
   1a856:	f00d f8c8 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a85a:	46a5      	mov	sp, r4
		return NULL;
   1a85c:	2400      	movs	r4, #0
}
   1a85e:	4620      	mov	r0, r4
   1a860:	46bd      	mov	sp, r7
   1a862:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a866:	4628      	mov	r0, r5
   1a868:	f7ff fc5a 	bl	1a120 <att_op_get_type>
   1a86c:	2802      	cmp	r0, #2
   1a86e:	d01b      	beq.n	1a8a8 <bt_att_chan_create_pdu+0x80>
   1a870:	2804      	cmp	r0, #4
   1a872:	d019      	beq.n	1a8a8 <bt_att_chan_create_pdu+0x80>
		timeout = K_FOREVER;
   1a874:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a878:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a87c:	2100      	movs	r1, #0
   1a87e:	4642      	mov	r2, r8
   1a880:	464b      	mov	r3, r9
   1a882:	4608      	mov	r0, r1
   1a884:	f00c ff8a 	bl	2779c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a888:	4604      	mov	r4, r0
   1a88a:	b990      	cbnz	r0, 1a8b2 <bt_att_chan_create_pdu+0x8a>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a88c:	466c      	mov	r4, sp
   1a88e:	b088      	sub	sp, #32
   1a890:	466a      	mov	r2, sp
   1a892:	4b1f      	ldr	r3, [pc, #124]	; (1a910 <bt_att_chan_create_pdu+0xe8>)
   1a894:	6153      	str	r3, [r2, #20]
   1a896:	4b1c      	ldr	r3, [pc, #112]	; (1a908 <bt_att_chan_create_pdu+0xe0>)
   1a898:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1a89c:	2304      	movs	r3, #4
   1a89e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8a2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a8a6:	e7d5      	b.n	1a854 <bt_att_chan_create_pdu+0x2c>
	switch (att_op_get_type(op)) {
   1a8a8:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a8ac:	f04f 0900 	mov.w	r9, #0
   1a8b0:	e7e4      	b.n	1a87c <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1a8b2:	f009 fcc3 	bl	2423c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a8b6:	4b17      	ldr	r3, [pc, #92]	; (1a914 <bt_att_chan_create_pdu+0xec>)
   1a8b8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1a8ba:	4817      	ldr	r0, [pc, #92]	; (1a918 <bt_att_chan_create_pdu+0xf0>)
   1a8bc:	bf07      	ittee	eq
   1a8be:	2200      	moveq	r2, #0
   1a8c0:	2300      	moveq	r3, #0
   1a8c2:	4642      	movne	r2, r8
   1a8c4:	464b      	movne	r3, r9
   1a8c6:	f008 ff69 	bl	2379c <z_impl_k_queue_get>
	if (!data) {
   1a8ca:	b998      	cbnz	r0, 1a8f4 <bt_att_chan_create_pdu+0xcc>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a8cc:	466d      	mov	r5, sp
   1a8ce:	b088      	sub	sp, #32
   1a8d0:	466a      	mov	r2, sp
   1a8d2:	4b12      	ldr	r3, [pc, #72]	; (1a91c <bt_att_chan_create_pdu+0xf4>)
   1a8d4:	6153      	str	r3, [r2, #20]
   1a8d6:	4b0c      	ldr	r3, [pc, #48]	; (1a908 <bt_att_chan_create_pdu+0xe0>)
   1a8d8:	6193      	str	r3, [r2, #24]
   1a8da:	2303      	movs	r3, #3
   1a8dc:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8e0:	480a      	ldr	r0, [pc, #40]	; (1a90c <bt_att_chan_create_pdu+0xe4>)
   1a8e2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a8e6:	f00d f880 	bl	279ea <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a8ea:	4620      	mov	r0, r4
   1a8ec:	46ad      	mov	sp, r5
   1a8ee:	f005 f899 	bl	1fa24 <net_buf_unref>
		return NULL;
   1a8f2:	e7b3      	b.n	1a85c <bt_att_chan_create_pdu+0x34>
	bt_att_tx_meta_data(buf) = data;
   1a8f4:	61a0      	str	r0, [r4, #24]
	return net_buf_simple_add(&buf->b, len);
   1a8f6:	2101      	movs	r1, #1
   1a8f8:	f104 000c 	add.w	r0, r4, #12
   1a8fc:	f00e fbe4 	bl	290c8 <net_buf_simple_add>
	hdr->code = op;
   1a900:	7005      	strb	r5, [r0, #0]
	return buf;
   1a902:	e7ac      	b.n	1a85e <bt_att_chan_create_pdu+0x36>
   1a904:	0002dc0e 	.word	0x0002dc0e
   1a908:	0002dde8 	.word	0x0002dde8
   1a90c:	0002a818 	.word	0x0002a818
   1a910:	0002d929 	.word	0x0002d929
   1a914:	20002d90 	.word	0x20002d90
   1a918:	20000be4 	.word	0x20000be4
   1a91c:	0002dc37 	.word	0x0002dc37

0001a920 <bt_att_recv>:
{
   1a920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (buf->len < sizeof(*hdr)) {
   1a924:	8a0b      	ldrh	r3, [r1, #16]
{
   1a926:	af00      	add	r7, sp, #0
   1a928:	4605      	mov	r5, r0
   1a92a:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
   1a92c:	b99b      	cbnz	r3, 1a956 <bt_att_recv+0x36>
		LOG_ERR("Too small ATT PDU received");
   1a92e:	466c      	mov	r4, sp
   1a930:	b088      	sub	sp, #32
   1a932:	466a      	mov	r2, sp
   1a934:	4b52      	ldr	r3, [pc, #328]	; (1aa80 <bt_att_recv+0x160>)
   1a936:	6153      	str	r3, [r2, #20]
   1a938:	4b52      	ldr	r3, [pc, #328]	; (1aa84 <bt_att_recv+0x164>)
   1a93a:	6193      	str	r3, [r2, #24]
   1a93c:	2303      	movs	r3, #3
   1a93e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a942:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_WRN("Ignoring unexpected request");
   1a946:	4850      	ldr	r0, [pc, #320]	; (1aa88 <bt_att_recv+0x168>)
   1a948:	f00d f84f 	bl	279ea <z_log_msg_static_create.constprop.0>
   1a94c:	46a5      	mov	sp, r4
}
   1a94e:	2000      	movs	r0, #0
   1a950:	46bd      	mov	sp, r7
   1a952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a956:	2101      	movs	r1, #1
   1a958:	f109 000c 	add.w	r0, r9, #12
   1a95c:	f00e fbdb 	bl	29116 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a960:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1a964:	4604      	mov	r4, r0
   1a966:	2b00      	cmp	r3, #0
   1a968:	d0f1      	beq.n	1a94e <bt_att_recv+0x2e>
		if (hdr->code == handlers[i].op) {
   1a96a:	7801      	ldrb	r1, [r0, #0]
   1a96c:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1aa8c <bt_att_recv+0x16c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a970:	1f2e      	subs	r6, r5, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a972:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a974:	f81b 0033 	ldrb.w	r0, [fp, r3, lsl #3]
   1a978:	4288      	cmp	r0, r1
   1a97a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   1a97e:	eb0b 02c3 	add.w	r2, fp, r3, lsl #3
   1a982:	d118      	bne.n	1a9b6 <bt_att_recv+0x96>
		if (handler->type == ATT_REQUEST &&
   1a984:	f892 8002 	ldrb.w	r8, [r2, #2]
   1a988:	f1b8 0f01 	cmp.w	r8, #1
   1a98c:	d137      	bne.n	1a9fe <bt_att_recv+0xde>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a98e:	2100      	movs	r1, #0
   1a990:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1a994:	f00d f893 	bl	27abe <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a998:	2800      	cmp	r0, #0
   1a99a:	d03e      	beq.n	1aa1a <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected request");
   1a99c:	466c      	mov	r4, sp
   1a99e:	b088      	sub	sp, #32
   1a9a0:	466a      	mov	r2, sp
   1a9a2:	4b3b      	ldr	r3, [pc, #236]	; (1aa90 <bt_att_recv+0x170>)
   1a9a4:	6153      	str	r3, [r2, #20]
   1a9a6:	4b37      	ldr	r3, [pc, #220]	; (1aa84 <bt_att_recv+0x164>)
   1a9a8:	6193      	str	r3, [r2, #24]
   1a9aa:	2303      	movs	r3, #3
   1a9ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1a9b0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a9b4:	e7c7      	b.n	1a946 <bt_att_recv+0x26>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a9b6:	3301      	adds	r3, #1
   1a9b8:	2b0f      	cmp	r3, #15
   1a9ba:	d1db      	bne.n	1a974 <bt_att_recv+0x54>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1a9bc:	466d      	mov	r5, sp
   1a9be:	b088      	sub	sp, #32
   1a9c0:	466a      	mov	r2, sp
   1a9c2:	4b34      	ldr	r3, [pc, #208]	; (1aa94 <bt_att_recv+0x174>)
   1a9c4:	6153      	str	r3, [r2, #20]
   1a9c6:	4b2f      	ldr	r3, [pc, #188]	; (1aa84 <bt_att_recv+0x164>)
   1a9c8:	482f      	ldr	r0, [pc, #188]	; (1aa88 <bt_att_recv+0x168>)
   1a9ca:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1a9ce:	2304      	movs	r3, #4
   1a9d0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1a9d4:	f842 3f10 	str.w	r3, [r2, #16]!
   1a9d8:	f00d f807 	bl	279ea <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1a9dc:	7821      	ldrb	r1, [r4, #0]
   1a9de:	46ad      	mov	sp, r5
   1a9e0:	4608      	mov	r0, r1
   1a9e2:	f7ff fb9d 	bl	1a120 <att_op_get_type>
   1a9e6:	2800      	cmp	r0, #0
   1a9e8:	d0b1      	beq.n	1a94e <bt_att_recv+0x2e>
   1a9ea:	2805      	cmp	r0, #5
   1a9ec:	d0af      	beq.n	1a94e <bt_att_recv+0x2e>
	if (!req) {
   1a9ee:	2900      	cmp	r1, #0
   1a9f0:	d0ad      	beq.n	1a94e <bt_att_recv+0x2e>
   1a9f2:	2306      	movs	r3, #6
   1a9f4:	2200      	movs	r2, #0
   1a9f6:	4630      	mov	r0, r6
   1a9f8:	f00d fa4a 	bl	27e90 <send_err_rsp.part.0>
   1a9fc:	e7a7      	b.n	1a94e <bt_att_recv+0x2e>
		} else if (handler->type == ATT_INDICATION &&
   1a9fe:	f1b8 0f05 	cmp.w	r8, #5
   1aa02:	d10a      	bne.n	1aa1a <bt_att_recv+0xfa>
			   atomic_test_and_set_bit(att_chan->flags,
   1aa04:	2101      	movs	r1, #1
   1aa06:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1aa0a:	f00d f858 	bl	27abe <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1aa0e:	b120      	cbz	r0, 1aa1a <bt_att_recv+0xfa>
			LOG_WRN("Ignoring unexpected indication");
   1aa10:	466c      	mov	r4, sp
   1aa12:	b088      	sub	sp, #32
   1aa14:	466a      	mov	r2, sp
   1aa16:	4b20      	ldr	r3, [pc, #128]	; (1aa98 <bt_att_recv+0x178>)
   1aa18:	e7c4      	b.n	1a9a4 <bt_att_recv+0x84>
	if (buf->len < handler->expect_len) {
   1aa1a:	44da      	add	sl, fp
   1aa1c:	f8b9 3010 	ldrh.w	r3, [r9, #16]
   1aa20:	f89a 2001 	ldrb.w	r2, [sl, #1]
   1aa24:	429a      	cmp	r2, r3
   1aa26:	d919      	bls.n	1aa5c <bt_att_recv+0x13c>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1aa28:	46e8      	mov	r8, sp
   1aa2a:	b08a      	sub	sp, #40	; 0x28
   1aa2c:	7821      	ldrb	r1, [r4, #0]
   1aa2e:	466a      	mov	r2, sp
   1aa30:	481a      	ldr	r0, [pc, #104]	; (1aa9c <bt_att_recv+0x17c>)
   1aa32:	6150      	str	r0, [r2, #20]
   1aa34:	4813      	ldr	r0, [pc, #76]	; (1aa84 <bt_att_recv+0x164>)
   1aa36:	6211      	str	r1, [r2, #32]
   1aa38:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1aa3c:	2305      	movs	r3, #5
   1aa3e:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa42:	4811      	ldr	r0, [pc, #68]	; (1aa88 <bt_att_recv+0x168>)
   1aa44:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1aa48:	f00c ffcf 	bl	279ea <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1aa4c:	f89a 3002 	ldrb.w	r3, [sl, #2]
   1aa50:	2b01      	cmp	r3, #1
   1aa52:	46c5      	mov	sp, r8
   1aa54:	f47f af7b 	bne.w	1a94e <bt_att_recv+0x2e>
		err = BT_ATT_ERR_INVALID_PDU;
   1aa58:	2304      	movs	r3, #4
   1aa5a:	e00c      	b.n	1aa76 <bt_att_recv+0x156>
		err = handler->func(att_chan, buf);
   1aa5c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1aa60:	4649      	mov	r1, r9
   1aa62:	4630      	mov	r0, r6
   1aa64:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1aa66:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
   1aa6a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1aa6c:	f47f af6f 	bne.w	1a94e <bt_att_recv+0x2e>
   1aa70:	2800      	cmp	r0, #0
   1aa72:	f43f af6c 	beq.w	1a94e <bt_att_recv+0x2e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1aa76:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   1aa78:	2900      	cmp	r1, #0
   1aa7a:	f43f af68 	beq.w	1a94e <bt_att_recv+0x2e>
   1aa7e:	e7b9      	b.n	1a9f4 <bt_att_recv+0xd4>
   1aa80:	0002dc5a 	.word	0x0002dc5a
   1aa84:	0002dd9d 	.word	0x0002dd9d
   1aa88:	0002a818 	.word	0x0002a818
   1aa8c:	0002b0cc 	.word	0x0002b0cc
   1aa90:	0002dc97 	.word	0x0002dc97
   1aa94:	0002dc79 	.word	0x0002dc79
   1aa98:	0002dcb7 	.word	0x0002dcb7
   1aa9c:	0002dcda 	.word	0x0002dcda

0001aaa0 <att_write_rsp>:
{
   1aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aaa2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aaa4:	6803      	ldr	r3, [r0, #0]
   1aaa6:	460d      	mov	r5, r1
   1aaa8:	3900      	subs	r1, #0
{
   1aaaa:	b087      	sub	sp, #28
   1aaac:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aaae:	bf18      	it	ne
   1aab0:	2101      	movne	r1, #1
   1aab2:	6818      	ldr	r0, [r3, #0]
{
   1aab4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aab6:	f00d fe56 	bl	28766 <bt_gatt_change_aware>
   1aaba:	b940      	cbnz	r0, 1aace <att_write_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1aabc:	2105      	movs	r1, #5
   1aabe:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1aac2:	f00c fffc 	bl	27abe <atomic_test_and_set_bit>
   1aac6:	2800      	cmp	r0, #0
   1aac8:	d149      	bne.n	1ab5e <att_write_rsp+0xbe>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1aaca:	2012      	movs	r0, #18
   1aacc:	e036      	b.n	1ab3c <att_write_rsp+0x9c>
	if (!handle) {
   1aace:	2e00      	cmp	r6, #0
   1aad0:	d047      	beq.n	1ab62 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
   1aad2:	2218      	movs	r2, #24
   1aad4:	2100      	movs	r1, #0
   1aad6:	4668      	mov	r0, sp
   1aad8:	f00c f893 	bl	26c02 <memset>
	if (rsp) {
   1aadc:	bb87      	cbnz	r7, 1ab40 <att_write_rsp+0xa0>
	data.conn = chan->att->conn;
   1aade:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1aae0:	4a21      	ldr	r2, [pc, #132]	; (1ab68 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
   1aae2:	681b      	ldr	r3, [r3, #0]
   1aae4:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1aae6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1aaea:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1aaee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aaf0:	9303      	str	r3, [sp, #12]
	data.len = len;
   1aaf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1aaf6:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1aafa:	2301      	movs	r3, #1
   1aafc:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1ab00:	4631      	mov	r1, r6
   1ab02:	466b      	mov	r3, sp
   1ab04:	4630      	mov	r0, r6
	data.req = req;
   1ab06:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1ab0a:	f00c fed4 	bl	278b6 <bt_gatt_foreach_attr>
	if (data.err) {
   1ab0e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ab12:	b1fb      	cbz	r3, 1ab54 <att_write_rsp+0xb4>
		if (rsp) {
   1ab14:	b177      	cbz	r7, 1ab34 <att_write_rsp+0x94>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ab16:	9b01      	ldr	r3, [sp, #4]
   1ab18:	6998      	ldr	r0, [r3, #24]
   1ab1a:	f7ff fb47 	bl	1a1ac <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ab1e:	9801      	ldr	r0, [sp, #4]
   1ab20:	f004 ff80 	bl	1fa24 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1ab24:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1ab28:	b1cd      	cbz	r5, 1ab5e <att_write_rsp+0xbe>
   1ab2a:	4632      	mov	r2, r6
   1ab2c:	4629      	mov	r1, r5
   1ab2e:	4620      	mov	r0, r4
   1ab30:	f00d f9ae 	bl	27e90 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1ab34:	2d18      	cmp	r5, #24
   1ab36:	d112      	bne.n	1ab5e <att_write_rsp+0xbe>
   1ab38:	f89d 0014 	ldrb.w	r0, [sp, #20]
}
   1ab3c:	b007      	add	sp, #28
   1ab3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1ab40:	2200      	movs	r2, #0
   1ab42:	4639      	mov	r1, r7
   1ab44:	4620      	mov	r0, r4
   1ab46:	f7ff fe6f 	bl	1a828 <bt_att_chan_create_pdu>
   1ab4a:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1ab4c:	2800      	cmp	r0, #0
   1ab4e:	d1c6      	bne.n	1aade <att_write_rsp+0x3e>
			return BT_ATT_ERR_UNLIKELY;
   1ab50:	200e      	movs	r0, #14
   1ab52:	e7f3      	b.n	1ab3c <att_write_rsp+0x9c>
	if (data.buf) {
   1ab54:	9901      	ldr	r1, [sp, #4]
   1ab56:	b111      	cbz	r1, 1ab5e <att_write_rsp+0xbe>
		bt_att_chan_send_rsp(chan, data.buf);
   1ab58:	4620      	mov	r0, r4
   1ab5a:	f00c ff7a 	bl	27a52 <bt_att_chan_send_rsp>
			return 0;
   1ab5e:	2000      	movs	r0, #0
   1ab60:	e7ec      	b.n	1ab3c <att_write_rsp+0x9c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1ab62:	2001      	movs	r0, #1
   1ab64:	e7ea      	b.n	1ab3c <att_write_rsp+0x9c>
   1ab66:	bf00      	nop
   1ab68:	00027855 	.word	0x00027855

0001ab6c <att_signed_write_cmd>:
{
   1ab6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab70:	b085      	sub	sp, #20
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab72:	6846      	ldr	r6, [r0, #4]
{
   1ab74:	af04      	add	r7, sp, #16
   1ab76:	4605      	mov	r5, r0
   1ab78:	460c      	mov	r4, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ab7a:	3034      	adds	r0, #52	; 0x34
   1ab7c:	2103      	movs	r1, #3
   1ab7e:	f00c fe60 	bl	27842 <atomic_test_bit>
   1ab82:	b9f0      	cbnz	r0, 1abc2 <att_signed_write_cmd+0x56>
	handle = sys_le16_to_cpu(req->handle);
   1ab84:	46a1      	mov	r9, r4
	return net_buf_simple_push(&buf->b, len);
   1ab86:	2101      	movs	r1, #1
   1ab88:	f859 3f0c 	ldr.w	r3, [r9, #12]!
   1ab8c:	4648      	mov	r0, r9
   1ab8e:	f8b3 8000 	ldrh.w	r8, [r3]
   1ab92:	f00e fab0 	bl	290f6 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   1ab96:	4630      	mov	r0, r6
   1ab98:	4621      	mov	r1, r4
   1ab9a:	f003 fb5f 	bl	1e25c <bt_smp_sign_verify>
	if (err) {
   1ab9e:	4606      	mov	r6, r0
   1aba0:	b1a0      	cbz	r0, 1abcc <att_signed_write_cmd+0x60>
		LOG_ERR("Error verifying data");
   1aba2:	466c      	mov	r4, sp
   1aba4:	b088      	sub	sp, #32
   1aba6:	aa04      	add	r2, sp, #16
   1aba8:	4b13      	ldr	r3, [pc, #76]	; (1abf8 <att_signed_write_cmd+0x8c>)
   1abaa:	6153      	str	r3, [r2, #20]
   1abac:	4b13      	ldr	r3, [pc, #76]	; (1abfc <att_signed_write_cmd+0x90>)
   1abae:	6193      	str	r3, [r2, #24]
   1abb0:	2303      	movs	r3, #3
   1abb2:	f842 3f10 	str.w	r3, [r2, #16]!
   1abb6:	4812      	ldr	r0, [pc, #72]	; (1ac00 <att_signed_write_cmd+0x94>)
   1abb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1abbc:	f00c ff15 	bl	279ea <z_log_msg_static_create.constprop.0>
   1abc0:	46a5      	mov	sp, r4
		return 0;
   1abc2:	2000      	movs	r0, #0
}
   1abc4:	3704      	adds	r7, #4
   1abc6:	46bd      	mov	sp, r7
   1abc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull(&buf->b, len);
   1abcc:	2101      	movs	r1, #1
   1abce:	4648      	mov	r0, r9
   1abd0:	f00e fa99 	bl	29106 <net_buf_simple_pull>
   1abd4:	2102      	movs	r1, #2
   1abd6:	4648      	mov	r0, r9
   1abd8:	f00e fa95 	bl	29106 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1abdc:	8a23      	ldrh	r3, [r4, #16]
   1abde:	3b0c      	subs	r3, #12
   1abe0:	b29b      	uxth	r3, r3
   1abe2:	9302      	str	r3, [sp, #8]
   1abe4:	68e3      	ldr	r3, [r4, #12]
   1abe6:	4632      	mov	r2, r6
   1abe8:	e9cd 6300 	strd	r6, r3, [sp]
   1abec:	4631      	mov	r1, r6
   1abee:	4643      	mov	r3, r8
   1abf0:	4628      	mov	r0, r5
   1abf2:	f7ff ff55 	bl	1aaa0 <att_write_rsp>
   1abf6:	e7e5      	b.n	1abc4 <att_signed_write_cmd+0x58>
   1abf8:	0002dcfd 	.word	0x0002dcfd
   1abfc:	0002dd88 	.word	0x0002dd88
   1ac00:	0002a818 	.word	0x0002a818

0001ac04 <bt_att_create_pdu>:
{
   1ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac06:	af00      	add	r7, sp, #0
   1ac08:	460e      	mov	r6, r1
   1ac0a:	4615      	mov	r5, r2
	att = att_get(conn);
   1ac0c:	f7ff fc2e 	bl	1a46c <att_get>
	if (!att) {
   1ac10:	b1f0      	cbz	r0, 1ac50 <bt_att_create_pdu+0x4c>
	return list->head;
   1ac12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac14:	4618      	mov	r0, r3
   1ac16:	b11b      	cbz	r3, 1ac20 <bt_att_create_pdu+0x1c>
	return node->next;
   1ac18:	f850 3988 	ldr.w	r3, [r0], #-136
   1ac1c:	b103      	cbz	r3, 1ac20 <bt_att_create_pdu+0x1c>
   1ac1e:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac20:	1c6c      	adds	r4, r5, #1
   1ac22:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac24:	b118      	cbz	r0, 1ac2e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac26:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1ac28:	42a1      	cmp	r1, r4
   1ac2a:	d21c      	bcs.n	1ac66 <bt_att_create_pdu+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac2c:	b993      	cbnz	r3, 1ac54 <bt_att_create_pdu+0x50>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1ac2e:	466d      	mov	r5, sp
   1ac30:	b088      	sub	sp, #32
   1ac32:	466a      	mov	r2, sp
   1ac34:	4b10      	ldr	r3, [pc, #64]	; (1ac78 <bt_att_create_pdu+0x74>)
   1ac36:	6153      	str	r3, [r2, #20]
   1ac38:	4b10      	ldr	r3, [pc, #64]	; (1ac7c <bt_att_create_pdu+0x78>)
   1ac3a:	4811      	ldr	r0, [pc, #68]	; (1ac80 <bt_att_create_pdu+0x7c>)
   1ac3c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1ac40:	2304      	movs	r3, #4
   1ac42:	f842 3f10 	str.w	r3, [r2, #16]!
   1ac46:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1ac4a:	f00c fece 	bl	279ea <z_log_msg_static_create.constprop.0>
   1ac4e:	46ad      	mov	sp, r5
		return NULL;
   1ac50:	2000      	movs	r0, #0
   1ac52:	e00c      	b.n	1ac6e <bt_att_create_pdu+0x6a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac54:	4618      	mov	r0, r3
   1ac56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1ac5a:	b153      	cbz	r3, 1ac72 <bt_att_create_pdu+0x6e>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac5c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1ac5e:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ac60:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac64:	d8f6      	bhi.n	1ac54 <bt_att_create_pdu+0x50>
		return bt_att_chan_create_pdu(chan, op, len);
   1ac66:	462a      	mov	r2, r5
   1ac68:	4631      	mov	r1, r6
   1ac6a:	f7ff fddd 	bl	1a828 <bt_att_chan_create_pdu>
}
   1ac6e:	46bd      	mov	sp, r7
   1ac70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac72:	4614      	mov	r4, r2
   1ac74:	e7d7      	b.n	1ac26 <bt_att_create_pdu+0x22>
   1ac76:	bf00      	nop
   1ac78:	0002dd16 	.word	0x0002dd16
   1ac7c:	0002ddd6 	.word	0x0002ddd6
   1ac80:	0002a818 	.word	0x0002a818

0001ac84 <att_exec_write_req>:
{
   1ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return att_exec_write_rsp(chan, req->flags);
   1ac88:	68cb      	ldr	r3, [r1, #12]
	buf->len  = 0U;
   1ac8a:	4f4d      	ldr	r7, [pc, #308]	; (1adc0 <att_exec_write_req+0x13c>)
   1ac8c:	781b      	ldrb	r3, [r3, #0]
{
   1ac8e:	b089      	sub	sp, #36	; 0x24
   1ac90:	4605      	mov	r5, r0
	return att_exec_write_rsp(chan, req->flags);
   1ac92:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac94:	6843      	ldr	r3, [r0, #4]
   1ac96:	9306      	str	r3, [sp, #24]
	uint8_t err = 0U;
   1ac98:	2400      	movs	r4, #0
	while (!sys_slist_is_empty(&chan->att->prep_queue)) {
   1ac9a:	6828      	ldr	r0, [r5, #0]
   1ac9c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ac9e:	b92b      	cbnz	r3, 1acac <att_exec_write_req+0x28>
	if (err) {
   1aca0:	2c00      	cmp	r4, #0
   1aca2:	d076      	beq.n	1ad92 <att_exec_write_req+0x10e>
			return 0;
   1aca4:	2000      	movs	r0, #0
}
   1aca6:	b009      	add	sp, #36	; 0x24
   1aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1acac:	3024      	adds	r0, #36	; 0x24
   1acae:	f00e f9c2 	bl	29036 <net_buf_slist_get>
   1acb2:	f04f 0300 	mov.w	r3, #0
		handle = data->handle;
   1acb6:	f8b0 a018 	ldrh.w	sl, [r0, #24]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1acba:	8a02      	ldrh	r2, [r0, #16]
   1acbc:	68c1      	ldr	r1, [r0, #12]
   1acbe:	80bb      	strh	r3, [r7, #4]
		buf = net_buf_slist_get(&chan->att->prep_queue);
   1acc0:	4606      	mov	r6, r0
	buf->data = buf->__buf;
   1acc2:	68bb      	ldr	r3, [r7, #8]
		net_buf_simple_add_mem(&reassembled_data, buf->data, buf->len);
   1acc4:	483e      	ldr	r0, [pc, #248]	; (1adc0 <att_exec_write_req+0x13c>)
   1acc6:	603b      	str	r3, [r7, #0]
   1acc8:	f00e fa04 	bl	290d4 <net_buf_simple_add_mem>
					    &chan->att->prep_queue,
   1accc:	f8d5 8000 	ldr.w	r8, [r5]
		err = exec_write_reassemble(handle, data->offset,
   1acd0:	8b73      	ldrh	r3, [r6, #26]
	return list->head;
   1acd2:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
   1acd6:	9307      	str	r3, [sp, #28]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1acd8:	b124      	cbz	r4, 1ace4 <att_exec_write_req+0x60>
	return node->next;
   1acda:	f8d4 9000 	ldr.w	r9, [r4]
   1acde:	f04f 0b00 	mov.w	fp, #0
   1ace2:	b9d4      	cbnz	r4, 1ad1a <att_exec_write_req+0x96>
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1ace4:	9b05      	ldr	r3, [sp, #20]
   1ace6:	2b01      	cmp	r3, #1
   1ace8:	d151      	bne.n	1ad8e <att_exec_write_req+0x10a>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1acea:	88bb      	ldrh	r3, [r7, #4]
   1acec:	9302      	str	r3, [sp, #8]
   1acee:	683b      	ldr	r3, [r7, #0]
   1acf0:	9301      	str	r3, [sp, #4]
   1acf2:	8b73      	ldrh	r3, [r6, #26]
   1acf4:	9300      	str	r3, [sp, #0]
   1acf6:	2200      	movs	r2, #0
   1acf8:	4653      	mov	r3, sl
   1acfa:	2118      	movs	r1, #24
   1acfc:	4628      	mov	r0, r5
   1acfe:	f7ff fecf 	bl	1aaa0 <att_write_rsp>
			if (err) {
   1ad02:	4604      	mov	r4, r0
   1ad04:	b128      	cbz	r0, 1ad12 <att_exec_write_req+0x8e>
	if (!req) {
   1ad06:	4603      	mov	r3, r0
   1ad08:	8b32      	ldrh	r2, [r6, #24]
   1ad0a:	2118      	movs	r1, #24
   1ad0c:	4628      	mov	r0, r5
   1ad0e:	f00d f8bf 	bl	27e90 <send_err_rsp.part.0>
		net_buf_unref(buf);
   1ad12:	4630      	mov	r0, r6
   1ad14:	f004 fe86 	bl	1fa24 <net_buf_unref>
   1ad18:	e7bf      	b.n	1ac9a <att_exec_write_req+0x16>
		if (tmp_data->handle == handle) {
   1ad1a:	8b22      	ldrh	r2, [r4, #24]
   1ad1c:	4552      	cmp	r2, sl
   1ad1e:	d132      	bne.n	1ad86 <att_exec_write_req+0x102>
			if (tmp_data->offset == 0) {
   1ad20:	8b62      	ldrh	r2, [r4, #26]
   1ad22:	2a00      	cmp	r2, #0
   1ad24:	d0de      	beq.n	1ace4 <att_exec_write_req+0x60>
			if (tmp_data->offset != buf->len + offset) {
   1ad26:	88b9      	ldrh	r1, [r7, #4]
   1ad28:	9b07      	ldr	r3, [sp, #28]
   1ad2a:	1858      	adds	r0, r3, r1
   1ad2c:	4282      	cmp	r2, r0
   1ad2e:	d13d      	bne.n	1adac <att_exec_write_req+0x128>
			if (buf->len + entry->len > buf->size) {
   1ad30:	8a22      	ldrh	r2, [r4, #16]
   1ad32:	88f8      	ldrh	r0, [r7, #6]
   1ad34:	4411      	add	r1, r2
   1ad36:	4281      	cmp	r1, r0
   1ad38:	dc3f      	bgt.n	1adba <att_exec_write_req+0x136>
			net_buf_simple_add_mem(buf, entry->data, entry->len);
   1ad3a:	68e1      	ldr	r1, [r4, #12]
   1ad3c:	4638      	mov	r0, r7
   1ad3e:	f00e f9c9 	bl	290d4 <net_buf_simple_add_mem>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1ad42:	6822      	ldr	r2, [r4, #0]
   1ad44:	f1bb 0f00 	cmp.w	fp, #0
   1ad48:	d114      	bne.n	1ad74 <att_exec_write_req+0xf0>
   1ad4a:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
	list->head = node;
   1ad4e:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
Z_GENLIST_REMOVE(slist, snode)
   1ad52:	428c      	cmp	r4, r1
   1ad54:	d101      	bne.n	1ad5a <att_exec_write_req+0xd6>
	list->tail = node;
   1ad56:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
	parent->next = child;
   1ad5a:	2300      	movs	r3, #0
   1ad5c:	6023      	str	r3, [r4, #0]
			net_buf_unref(entry);
   1ad5e:	4620      	mov	r0, r4
   1ad60:	f004 fe60 	bl	1fa24 <net_buf_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1ad64:	f1b9 0f00 	cmp.w	r9, #0
   1ad68:	d00f      	beq.n	1ad8a <att_exec_write_req+0x106>
	return node->next;
   1ad6a:	f8d9 2000 	ldr.w	r2, [r9]
   1ad6e:	464c      	mov	r4, r9
   1ad70:	4691      	mov	r9, r2
   1ad72:	e7b6      	b.n	1ace2 <att_exec_write_req+0x5e>
	parent->next = child;
   1ad74:	f8cb 2000 	str.w	r2, [fp]
Z_GENLIST_REMOVE(slist, snode)
   1ad78:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
   1ad7c:	4294      	cmp	r4, r2
	list->tail = node;
   1ad7e:	bf08      	it	eq
   1ad80:	f8c8 b028 	streq.w	fp, [r8, #40]	; 0x28
}
   1ad84:	e7e9      	b.n	1ad5a <att_exec_write_req+0xd6>
			prev = &entry->node;
   1ad86:	46a3      	mov	fp, r4
   1ad88:	e7ec      	b.n	1ad64 <att_exec_write_req+0xe0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, entry, next, node) {
   1ad8a:	464a      	mov	r2, r9
   1ad8c:	e7ef      	b.n	1ad6e <att_exec_write_req+0xea>
		err = exec_write_reassemble(handle, data->offset,
   1ad8e:	2400      	movs	r4, #0
   1ad90:	e7bf      	b.n	1ad12 <att_exec_write_req+0x8e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1ad92:	2119      	movs	r1, #25
   1ad94:	9806      	ldr	r0, [sp, #24]
   1ad96:	4622      	mov	r2, r4
   1ad98:	f7ff ff34 	bl	1ac04 <bt_att_create_pdu>
	if (!buf) {
   1ad9c:	4601      	mov	r1, r0
   1ad9e:	b118      	cbz	r0, 1ada8 <att_exec_write_req+0x124>
	bt_att_chan_send_rsp(chan, buf);
   1ada0:	4628      	mov	r0, r5
   1ada2:	f00c fe56 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1ada6:	e77d      	b.n	1aca4 <att_exec_write_req+0x20>
		return BT_ATT_ERR_UNLIKELY;
   1ada8:	200e      	movs	r0, #14
	return att_exec_write_rsp(chan, req->flags);
   1adaa:	e77c      	b.n	1aca6 <att_exec_write_req+0x22>
				return BT_ATT_ERR_INVALID_OFFSET;
   1adac:	2307      	movs	r3, #7
	if (!req) {
   1adae:	4652      	mov	r2, sl
   1adb0:	2118      	movs	r1, #24
   1adb2:	4628      	mov	r0, r5
   1adb4:	f00d f86c 	bl	27e90 <send_err_rsp.part.0>
			return 0;
   1adb8:	e774      	b.n	1aca4 <att_exec_write_req+0x20>
				return BT_ATT_ERR_INVALID_ATTRIBUTE_LEN;
   1adba:	230d      	movs	r3, #13
   1adbc:	e7f7      	b.n	1adae <att_exec_write_req+0x12a>
   1adbe:	bf00      	nop
   1adc0:	200007ac 	.word	0x200007ac

0001adc4 <att_prepare_write_req>:
{
   1adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adc8:	460d      	mov	r5, r1
   1adca:	b087      	sub	sp, #28
   1adcc:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1adce:	2104      	movs	r1, #4
   1add0:	f105 000c 	add.w	r0, r5, #12
   1add4:	f00e f99f 	bl	29116 <net_buf_simple_pull_mem>
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
   1add8:	68ef      	ldr	r7, [r5, #12]
   1adda:	8a2e      	ldrh	r6, [r5, #16]
	struct bt_conn *conn = chan->chan.chan.conn;
   1addc:	6865      	ldr	r5, [r4, #4]
	handle = sys_le16_to_cpu(req->handle);
   1adde:	f8b0 9000 	ldrh.w	r9, [r0]
	offset = sys_le16_to_cpu(req->offset);
   1ade2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	if (!bt_gatt_change_aware(conn, true)) {
   1ade6:	2101      	movs	r1, #1
   1ade8:	4628      	mov	r0, r5
	handle = sys_le16_to_cpu(req->handle);
   1adea:	fa1f fa89 	uxth.w	sl, r9
	if (!bt_gatt_change_aware(conn, true)) {
   1adee:	f00d fcba 	bl	28766 <bt_gatt_change_aware>
   1adf2:	b948      	cbnz	r0, 1ae08 <att_prepare_write_req+0x44>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1adf4:	2105      	movs	r1, #5
   1adf6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1adfa:	f00c fe60 	bl	27abe <atomic_test_and_set_bit>
   1adfe:	bb30      	cbnz	r0, 1ae4e <att_prepare_write_req+0x8a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ae00:	2012      	movs	r0, #18
}
   1ae02:	b007      	add	sp, #28
   1ae04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) {
   1ae08:	f1ba 0f00 	cmp.w	sl, #0
   1ae0c:	d045      	beq.n	1ae9a <att_prepare_write_req+0xd6>
	(void)memset(&data, 0, sizeof(data));
   1ae0e:	2214      	movs	r2, #20
   1ae10:	2100      	movs	r1, #0
   1ae12:	a801      	add	r0, sp, #4
   1ae14:	f00b fef5 	bl	26c02 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ae18:	2301      	movs	r3, #1
   1ae1a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ae1e:	4a21      	ldr	r2, [pc, #132]	; (1aea4 <att_prepare_write_req+0xe0>)
	data.conn = conn;
   1ae20:	9501      	str	r5, [sp, #4]
	data.len = len;
   1ae22:	b2f6      	uxtb	r6, r6
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ae24:	ab01      	add	r3, sp, #4
   1ae26:	4651      	mov	r1, sl
   1ae28:	4650      	mov	r0, sl
	data.offset = offset;
   1ae2a:	f8ad 8012 	strh.w	r8, [sp, #18]
	data.value = value;
   1ae2e:	9703      	str	r7, [sp, #12]
	data.len = len;
   1ae30:	f8ad 6010 	strh.w	r6, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
   1ae34:	f00c fd3f 	bl	278b6 <bt_gatt_foreach_attr>
	if (data.err) {
   1ae38:	f89d b014 	ldrb.w	fp, [sp, #20]
   1ae3c:	f1bb 0f00 	cmp.w	fp, #0
   1ae40:	d007      	beq.n	1ae52 <att_prepare_write_req+0x8e>
	if (!req) {
   1ae42:	465b      	mov	r3, fp
   1ae44:	4652      	mov	r2, sl
   1ae46:	2116      	movs	r1, #22
   1ae48:	4620      	mov	r0, r4
   1ae4a:	f00d f821 	bl	27e90 <send_err_rsp.part.0>
			return 0;
   1ae4e:	2000      	movs	r0, #0
   1ae50:	e7d7      	b.n	1ae02 <att_prepare_write_req+0x3e>
	net_buf_slist_put(&chan->att->prep_queue, data.buf);
   1ae52:	6820      	ldr	r0, [r4, #0]
   1ae54:	9902      	ldr	r1, [sp, #8]
   1ae56:	3024      	adds	r0, #36	; 0x24
   1ae58:	f00e f8d7 	bl	2900a <net_buf_slist_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
   1ae5c:	465a      	mov	r2, fp
   1ae5e:	2117      	movs	r1, #23
   1ae60:	4628      	mov	r0, r5
   1ae62:	f7ff fecf 	bl	1ac04 <bt_att_create_pdu>
   1ae66:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ae68:	b1c8      	cbz	r0, 1ae9e <att_prepare_write_req+0xda>
	return net_buf_simple_add(&buf->b, len);
   1ae6a:	2104      	movs	r1, #4
   1ae6c:	300c      	adds	r0, #12
   1ae6e:	f00e f92b 	bl	290c8 <net_buf_simple_add>
	rsp->handle = sys_cpu_to_le16(handle);
   1ae72:	f8a0 9000 	strh.w	r9, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
   1ae76:	f8a0 8002 	strh.w	r8, [r0, #2]
   1ae7a:	4605      	mov	r5, r0
   1ae7c:	9802      	ldr	r0, [sp, #8]
   1ae7e:	4631      	mov	r1, r6
   1ae80:	300c      	adds	r0, #12
   1ae82:	f00e f921 	bl	290c8 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
   1ae86:	4639      	mov	r1, r7
   1ae88:	4632      	mov	r2, r6
   1ae8a:	1d28      	adds	r0, r5, #4
   1ae8c:	f00b feae 	bl	26bec <memcpy>
	bt_att_chan_send_rsp(chan, data.buf);
   1ae90:	9902      	ldr	r1, [sp, #8]
   1ae92:	4620      	mov	r0, r4
   1ae94:	f00c fddd 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1ae98:	e7d9      	b.n	1ae4e <att_prepare_write_req+0x8a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1ae9a:	2001      	movs	r0, #1
   1ae9c:	e7b1      	b.n	1ae02 <att_prepare_write_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
   1ae9e:	200e      	movs	r0, #14
   1aea0:	e7af      	b.n	1ae02 <att_prepare_write_req+0x3e>
   1aea2:	bf00      	nop
   1aea4:	0001a681 	.word	0x0001a681

0001aea8 <att_read_group_req>:
{
   1aea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1aeac:	8a0e      	ldrh	r6, [r1, #16]
   1aeae:	3e04      	subs	r6, #4
   1aeb0:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1aeb2:	2e02      	cmp	r6, #2
{
   1aeb4:	4604      	mov	r4, r0
   1aeb6:	b08c      	sub	sp, #48	; 0x30
   1aeb8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1aeba:	d001      	beq.n	1aec0 <att_read_group_req+0x18>
   1aebc:	2e10      	cmp	r6, #16
   1aebe:	d16a      	bne.n	1af96 <att_read_group_req+0xee>
	return net_buf_simple_pull_mem(&buf->b, len);
   1aec0:	2104      	movs	r1, #4
   1aec2:	300c      	adds	r0, #12
   1aec4:	f00e f927 	bl	29116 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1aec8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1aecc:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1aece:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1aed0:	1d01      	adds	r1, r0, #4
   1aed2:	4632      	mov	r2, r6
   1aed4:	4640      	mov	r0, r8
   1aed6:	f00b ff5b 	bl	26d90 <bt_uuid_create>
   1aeda:	2800      	cmp	r0, #0
   1aedc:	d05d      	beq.n	1af9a <att_read_group_req+0xf2>
	if (!start || !end) {
   1aede:	2d00      	cmp	r5, #0
   1aee0:	d03a      	beq.n	1af58 <att_read_group_req+0xb0>
   1aee2:	2600      	movs	r6, #0
   1aee4:	2f00      	cmp	r7, #0
   1aee6:	d036      	beq.n	1af56 <att_read_group_req+0xae>
	if (start > end) {
   1aee8:	42bd      	cmp	r5, r7
   1aeea:	d835      	bhi.n	1af58 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1aeec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aef0:	a901      	add	r1, sp, #4
   1aef2:	4640      	mov	r0, r8
   1aef4:	f88d 6004 	strb.w	r6, [sp, #4]
   1aef8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aefc:	f00b ff1a 	bl	26d34 <bt_uuid_cmp>
   1af00:	bb70      	cbnz	r0, 1af60 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1af02:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1af04:	2214      	movs	r2, #20
   1af06:	2100      	movs	r1, #0
   1af08:	a807      	add	r0, sp, #28
   1af0a:	f00b fe7a 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1af0e:	2201      	movs	r2, #1
   1af10:	2111      	movs	r1, #17
   1af12:	4630      	mov	r0, r6
   1af14:	f7ff fe76 	bl	1ac04 <bt_att_create_pdu>
   1af18:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1af1a:	2800      	cmp	r0, #0
   1af1c:	d03d      	beq.n	1af9a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1af1e:	2101      	movs	r1, #1
   1af20:	300c      	adds	r0, #12
	data.uuid = uuid;
   1af22:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1af26:	f00e f8cf 	bl	290c8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1af2a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1af2c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1af2e:	4a1c      	ldr	r2, [pc, #112]	; (1afa0 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1af30:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1af32:	4639      	mov	r1, r7
	data.group = NULL;
   1af34:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1af36:	4628      	mov	r0, r5
   1af38:	ab07      	add	r3, sp, #28
   1af3a:	f00c fcbc 	bl	278b6 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1af3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1af40:	781b      	ldrb	r3, [r3, #0]
   1af42:	bb1b      	cbnz	r3, 1af8c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1af44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1af46:	6998      	ldr	r0, [r3, #24]
   1af48:	f7ff f930 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(data.buf);
   1af4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1af4e:	f004 fd69 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1af52:	230a      	movs	r3, #10
   1af54:	e001      	b.n	1af5a <att_read_group_req+0xb2>
			*err = 0U;
   1af56:	463d      	mov	r5, r7
	if (!req) {
   1af58:	2301      	movs	r3, #1
   1af5a:	462a      	mov	r2, r5
   1af5c:	2110      	movs	r1, #16
   1af5e:	e00e      	b.n	1af7e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1af60:	f642 0301 	movw	r3, #10241	; 0x2801
   1af64:	a907      	add	r1, sp, #28
   1af66:	4640      	mov	r0, r8
   1af68:	f88d 601c 	strb.w	r6, [sp, #28]
   1af6c:	f8ad 301e 	strh.w	r3, [sp, #30]
   1af70:	f00b fee0 	bl	26d34 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1af74:	2800      	cmp	r0, #0
   1af76:	d0c4      	beq.n	1af02 <att_read_group_req+0x5a>
	if (!req) {
   1af78:	2310      	movs	r3, #16
   1af7a:	462a      	mov	r2, r5
   1af7c:	4619      	mov	r1, r3
   1af7e:	4620      	mov	r0, r4
   1af80:	f00c ff86 	bl	27e90 <send_err_rsp.part.0>
		return 0;
   1af84:	2000      	movs	r0, #0
}
   1af86:	b00c      	add	sp, #48	; 0x30
   1af88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1af8c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1af8e:	4620      	mov	r0, r4
   1af90:	f00c fd5f 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1af94:	e7f6      	b.n	1af84 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1af96:	2004      	movs	r0, #4
   1af98:	e7f5      	b.n	1af86 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1af9a:	200e      	movs	r0, #14
   1af9c:	e7f3      	b.n	1af86 <att_read_group_req+0xde>
   1af9e:	bf00      	nop
   1afa0:	0001a535 	.word	0x0001a535

0001afa4 <att_read_mult_vl_req>:
{
   1afa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1afa8:	6846      	ldr	r6, [r0, #4]
{
   1afaa:	b085      	sub	sp, #20
   1afac:	4604      	mov	r4, r0
   1afae:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1afb0:	4630      	mov	r0, r6
   1afb2:	2101      	movs	r1, #1
   1afb4:	f00d fbd7 	bl	28766 <bt_gatt_change_aware>
   1afb8:	b950      	cbnz	r0, 1afd0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1afba:	2105      	movs	r1, #5
   1afbc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1afc0:	f00c fd7d 	bl	27abe <atomic_test_and_set_bit>
   1afc4:	2800      	cmp	r0, #0
   1afc6:	d13b      	bne.n	1b040 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1afc8:	2012      	movs	r0, #18
}
   1afca:	b005      	add	sp, #20
   1afcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1afd0:	2210      	movs	r2, #16
   1afd2:	2100      	movs	r1, #0
   1afd4:	4668      	mov	r0, sp
   1afd6:	f00b fe14 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1afda:	2200      	movs	r2, #0
   1afdc:	2121      	movs	r1, #33	; 0x21
   1afde:	4630      	mov	r0, r6
   1afe0:	f7ff fe10 	bl	1ac04 <bt_att_create_pdu>
   1afe4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1afe6:	b368      	cbz	r0, 1b044 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1afe8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b048 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1afec:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1afee:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1aff2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1aff6:	8a2b      	ldrh	r3, [r5, #16]
   1aff8:	2b01      	cmp	r3, #1
   1affa:	d804      	bhi.n	1b006 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1affc:	9902      	ldr	r1, [sp, #8]
   1affe:	4620      	mov	r0, r4
   1b000:	f00c fd27 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b004:	e01c      	b.n	1b040 <att_read_mult_vl_req+0x9c>
   1b006:	4638      	mov	r0, r7
   1b008:	f00e f895 	bl	29136 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b00c:	466b      	mov	r3, sp
   1b00e:	464a      	mov	r2, r9
   1b010:	4601      	mov	r1, r0
   1b012:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b014:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1b018:	f00c fc4d 	bl	278b6 <bt_gatt_foreach_attr>
		if (data.err) {
   1b01c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b020:	2b00      	cmp	r3, #0
   1b022:	d0e8      	beq.n	1aff6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b024:	9b02      	ldr	r3, [sp, #8]
   1b026:	6998      	ldr	r0, [r3, #24]
   1b028:	f7ff f8c0 	bl	1a1ac <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b02c:	9802      	ldr	r0, [sp, #8]
   1b02e:	f004 fcf9 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b032:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b036:	4632      	mov	r2, r6
   1b038:	2120      	movs	r1, #32
   1b03a:	4620      	mov	r0, r4
   1b03c:	f00c ff28 	bl	27e90 <send_err_rsp.part.0>
			return 0;
   1b040:	2000      	movs	r0, #0
   1b042:	e7c2      	b.n	1afca <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1b044:	200e      	movs	r0, #14
   1b046:	e7c0      	b.n	1afca <att_read_mult_vl_req+0x26>
   1b048:	00027c45 	.word	0x00027c45

0001b04c <att_read_mult_req>:
{
   1b04c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b050:	6846      	ldr	r6, [r0, #4]
{
   1b052:	b085      	sub	sp, #20
   1b054:	4604      	mov	r4, r0
   1b056:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b058:	4630      	mov	r0, r6
   1b05a:	2101      	movs	r1, #1
   1b05c:	f00d fb83 	bl	28766 <bt_gatt_change_aware>
   1b060:	b950      	cbnz	r0, 1b078 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b062:	2105      	movs	r1, #5
   1b064:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b068:	f00c fd29 	bl	27abe <atomic_test_and_set_bit>
   1b06c:	2800      	cmp	r0, #0
   1b06e:	d13b      	bne.n	1b0e8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b070:	2012      	movs	r0, #18
}
   1b072:	b005      	add	sp, #20
   1b074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1b078:	2210      	movs	r2, #16
   1b07a:	2100      	movs	r1, #0
   1b07c:	4668      	mov	r0, sp
   1b07e:	f00b fdc0 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b082:	2200      	movs	r2, #0
   1b084:	210f      	movs	r1, #15
   1b086:	4630      	mov	r0, r6
   1b088:	f7ff fdbc 	bl	1ac04 <bt_att_create_pdu>
   1b08c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b08e:	b368      	cbz	r0, 1b0ec <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b090:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1b0f0 <att_read_mult_req+0xa4>
	data.chan = chan;
   1b094:	9400      	str	r4, [sp, #0]
   1b096:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b09a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b09e:	8a2b      	ldrh	r3, [r5, #16]
   1b0a0:	2b01      	cmp	r3, #1
   1b0a2:	d804      	bhi.n	1b0ae <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1b0a4:	9902      	ldr	r1, [sp, #8]
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f00c fcd3 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b0ac:	e01c      	b.n	1b0e8 <att_read_mult_req+0x9c>
   1b0ae:	4638      	mov	r0, r7
   1b0b0:	f00e f841 	bl	29136 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b0b4:	466b      	mov	r3, sp
   1b0b6:	464a      	mov	r2, r9
   1b0b8:	4601      	mov	r1, r0
   1b0ba:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b0bc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b0c0:	f00c fbf9 	bl	278b6 <bt_gatt_foreach_attr>
		if (data.err) {
   1b0c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d0e8      	beq.n	1b09e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b0cc:	9b02      	ldr	r3, [sp, #8]
   1b0ce:	6998      	ldr	r0, [r3, #24]
   1b0d0:	f7ff f86c 	bl	1a1ac <tx_meta_data_free>
			net_buf_unref(data.buf);
   1b0d4:	9802      	ldr	r0, [sp, #8]
   1b0d6:	f004 fca5 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b0da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b0de:	4632      	mov	r2, r6
   1b0e0:	210e      	movs	r1, #14
   1b0e2:	4620      	mov	r0, r4
   1b0e4:	f00c fed4 	bl	27e90 <send_err_rsp.part.0>
			return 0;
   1b0e8:	2000      	movs	r0, #0
   1b0ea:	e7c2      	b.n	1b072 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1b0ec:	200e      	movs	r0, #14
   1b0ee:	e7c0      	b.n	1b072 <att_read_mult_req+0x26>
   1b0f0:	00027bff 	.word	0x00027bff

0001b0f4 <att_read_rsp>:
{
   1b0f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b0f8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1b0fc:	4604      	mov	r4, r0
   1b0fe:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b100:	4640      	mov	r0, r8
   1b102:	2101      	movs	r1, #1
{
   1b104:	4617      	mov	r7, r2
   1b106:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b108:	f00d fb2d 	bl	28766 <bt_gatt_change_aware>
   1b10c:	b948      	cbnz	r0, 1b122 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1b10e:	2105      	movs	r1, #5
   1b110:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1b114:	f00c fcd3 	bl	27abe <atomic_test_and_set_bit>
   1b118:	bb78      	cbnz	r0, 1b17a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b11a:	2012      	movs	r0, #18
}
   1b11c:	b004      	add	sp, #16
   1b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1b122:	b38d      	cbz	r5, 1b188 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1b124:	2210      	movs	r2, #16
   1b126:	2100      	movs	r1, #0
   1b128:	4668      	mov	r0, sp
   1b12a:	f00b fd6a 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b12e:	2200      	movs	r2, #0
   1b130:	4639      	mov	r1, r7
   1b132:	4640      	mov	r0, r8
   1b134:	f7ff fd66 	bl	1ac04 <bt_att_create_pdu>
   1b138:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b13a:	b338      	cbz	r0, 1b18c <att_read_rsp+0x98>
	data.offset = offset;
   1b13c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b140:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b144:	2301      	movs	r3, #1
   1b146:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b14a:	4a11      	ldr	r2, [pc, #68]	; (1b190 <att_read_rsp+0x9c>)
	data.chan = chan;
   1b14c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b14e:	466b      	mov	r3, sp
   1b150:	4629      	mov	r1, r5
   1b152:	4628      	mov	r0, r5
   1b154:	f00c fbaf 	bl	278b6 <bt_gatt_foreach_attr>
	if (data.err) {
   1b158:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b15c:	b17b      	cbz	r3, 1b17e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b15e:	9b02      	ldr	r3, [sp, #8]
   1b160:	6998      	ldr	r0, [r3, #24]
   1b162:	f7ff f823 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b166:	9802      	ldr	r0, [sp, #8]
   1b168:	f004 fc5c 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b16c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b170:	462a      	mov	r2, r5
   1b172:	4631      	mov	r1, r6
   1b174:	4620      	mov	r0, r4
   1b176:	f00c fe8b 	bl	27e90 <send_err_rsp.part.0>
			return 0;
   1b17a:	2000      	movs	r0, #0
   1b17c:	e7ce      	b.n	1b11c <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1b17e:	9902      	ldr	r1, [sp, #8]
   1b180:	4620      	mov	r0, r4
   1b182:	f00c fc66 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b186:	e7f8      	b.n	1b17a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b188:	2001      	movs	r0, #1
   1b18a:	e7c7      	b.n	1b11c <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1b18c:	200e      	movs	r0, #14
   1b18e:	e7c5      	b.n	1b11c <att_read_rsp+0x28>
   1b190:	00027bff 	.word	0x00027bff

0001b194 <att_read_type_req>:
{
   1b194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b198:	8a0d      	ldrh	r5, [r1, #16]
   1b19a:	3d04      	subs	r5, #4
   1b19c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1b19e:	2d02      	cmp	r5, #2
{
   1b1a0:	4604      	mov	r4, r0
   1b1a2:	b08c      	sub	sp, #48	; 0x30
   1b1a4:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b1a6:	d001      	beq.n	1b1ac <att_read_type_req+0x18>
   1b1a8:	2d10      	cmp	r5, #16
   1b1aa:	d150      	bne.n	1b24e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b1ac:	2104      	movs	r1, #4
   1b1ae:	300c      	adds	r0, #12
   1b1b0:	f00d ffb1 	bl	29116 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b1b4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b1b8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b1ba:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b1bc:	1d01      	adds	r1, r0, #4
   1b1be:	462a      	mov	r2, r5
   1b1c0:	4640      	mov	r0, r8
   1b1c2:	f00b fde5 	bl	26d90 <bt_uuid_create>
   1b1c6:	b188      	cbz	r0, 1b1ec <att_read_type_req+0x58>
	if (!start || !end) {
   1b1c8:	b19e      	cbz	r6, 1b1f2 <att_read_type_req+0x5e>
   1b1ca:	b18f      	cbz	r7, 1b1f0 <att_read_type_req+0x5c>
	if (start > end) {
   1b1cc:	42b7      	cmp	r7, r6
   1b1ce:	d310      	bcc.n	1b1f2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b1d0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b1d2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1b1d4:	2100      	movs	r1, #0
   1b1d6:	eb0d 0002 	add.w	r0, sp, r2
   1b1da:	f00b fd12 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b1de:	2201      	movs	r2, #1
   1b1e0:	2109      	movs	r1, #9
   1b1e2:	4628      	mov	r0, r5
   1b1e4:	f7ff fd0e 	bl	1ac04 <bt_att_create_pdu>
   1b1e8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b1ea:	b960      	cbnz	r0, 1b206 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1b1ec:	200e      	movs	r0, #14
   1b1ee:	e007      	b.n	1b200 <att_read_type_req+0x6c>
			*err = 0U;
   1b1f0:	463e      	mov	r6, r7
	if (!req) {
   1b1f2:	2301      	movs	r3, #1
   1b1f4:	4632      	mov	r2, r6
   1b1f6:	2108      	movs	r1, #8
   1b1f8:	4620      	mov	r0, r4
   1b1fa:	f00c fe49 	bl	27e90 <send_err_rsp.part.0>
		return 0;
   1b1fe:	2000      	movs	r0, #0
}
   1b200:	b00c      	add	sp, #48	; 0x30
   1b202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b206:	2101      	movs	r1, #1
   1b208:	300c      	adds	r0, #12
	data.uuid = uuid;
   1b20a:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1b20e:	f00d ff5b 	bl	290c8 <net_buf_simple_add>
	data.rsp->len = 0U;
   1b212:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b214:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1b216:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b218:	230a      	movs	r3, #10
   1b21a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b21e:	4a0d      	ldr	r2, [pc, #52]	; (1b254 <att_read_type_req+0xc0>)
   1b220:	ab06      	add	r3, sp, #24
   1b222:	4639      	mov	r1, r7
   1b224:	4630      	mov	r0, r6
   1b226:	f00c fb46 	bl	278b6 <bt_gatt_foreach_attr>
	if (data.err) {
   1b22a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b22e:	b14b      	cbz	r3, 1b244 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b230:	9b08      	ldr	r3, [sp, #32]
   1b232:	6998      	ldr	r0, [r3, #24]
   1b234:	f7fe ffba 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b238:	9808      	ldr	r0, [sp, #32]
   1b23a:	f004 fbf3 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b23e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b242:	e7d7      	b.n	1b1f4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1b244:	9908      	ldr	r1, [sp, #32]
   1b246:	4620      	mov	r0, r4
   1b248:	f00c fc03 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b24c:	e7d7      	b.n	1b1fe <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1b24e:	2004      	movs	r0, #4
   1b250:	e7d6      	b.n	1b200 <att_read_type_req+0x6c>
   1b252:	bf00      	nop
   1b254:	0001a5e1 	.word	0x0001a5e1

0001b258 <att_find_type_req>:
{
   1b258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b25c:	460f      	mov	r7, r1
   1b25e:	b086      	sub	sp, #24
   1b260:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b262:	2106      	movs	r1, #6
   1b264:	f107 000c 	add.w	r0, r7, #12
   1b268:	f00d ff55 	bl	29116 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b26c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b26e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1b272:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1b274:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1b278:	b1c5      	cbz	r5, 1b2ac <att_find_type_req+0x54>
   1b27a:	2300      	movs	r3, #0
   1b27c:	f1b8 0f00 	cmp.w	r8, #0
   1b280:	d013      	beq.n	1b2aa <att_find_type_req+0x52>
	if (start > end) {
   1b282:	4545      	cmp	r5, r8
   1b284:	d812      	bhi.n	1b2ac <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b286:	f88d 3000 	strb.w	r3, [sp]
   1b28a:	f88d 3004 	strb.w	r3, [sp, #4]
   1b28e:	a901      	add	r1, sp, #4
   1b290:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b294:	4668      	mov	r0, sp
   1b296:	f8ad 2002 	strh.w	r2, [sp, #2]
   1b29a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b29e:	f00b fd49 	bl	26d34 <bt_uuid_cmp>
   1b2a2:	4606      	mov	r6, r0
   1b2a4:	b160      	cbz	r0, 1b2c0 <att_find_type_req+0x68>
	if (!req) {
   1b2a6:	230a      	movs	r3, #10
   1b2a8:	e001      	b.n	1b2ae <att_find_type_req+0x56>
			*err = 0U;
   1b2aa:	4645      	mov	r5, r8
	if (!req) {
   1b2ac:	2301      	movs	r3, #1
   1b2ae:	462a      	mov	r2, r5
   1b2b0:	2106      	movs	r1, #6
   1b2b2:	4620      	mov	r0, r4
   1b2b4:	f00c fdec 	bl	27e90 <send_err_rsp.part.0>
		return 0;
   1b2b8:	2000      	movs	r0, #0
}
   1b2ba:	b006      	add	sp, #24
   1b2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b2c0:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b2c4:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1b2c6:	4601      	mov	r1, r0
   1b2c8:	2214      	movs	r2, #20
   1b2ca:	a801      	add	r0, sp, #4
   1b2cc:	f00b fc99 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b2d0:	4632      	mov	r2, r6
   1b2d2:	2107      	movs	r1, #7
   1b2d4:	4650      	mov	r0, sl
   1b2d6:	f7ff fc95 	bl	1ac04 <bt_att_create_pdu>
   1b2da:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b2dc:	b1f8      	cbz	r0, 1b31e <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b2de:	230a      	movs	r3, #10
   1b2e0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b2e4:	4a0f      	ldr	r2, [pc, #60]	; (1b324 <att_find_type_req+0xcc>)
	data.chan = chan;
   1b2e6:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b2e8:	ab01      	add	r3, sp, #4
   1b2ea:	4641      	mov	r1, r8
   1b2ec:	4628      	mov	r0, r5
	data.value = value;
   1b2ee:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1b2f2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b2f6:	f00c fade 	bl	278b6 <bt_gatt_foreach_attr>
	if (data.err) {
   1b2fa:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b2fe:	b14b      	cbz	r3, 1b314 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b300:	9b02      	ldr	r3, [sp, #8]
   1b302:	6998      	ldr	r0, [r3, #24]
   1b304:	f7fe ff52 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b308:	9802      	ldr	r0, [sp, #8]
   1b30a:	f004 fb8b 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b30e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b312:	e7cc      	b.n	1b2ae <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1b314:	9902      	ldr	r1, [sp, #8]
   1b316:	4620      	mov	r0, r4
   1b318:	f00c fb9b 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b31c:	e7cc      	b.n	1b2b8 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1b31e:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b320:	e7cb      	b.n	1b2ba <att_find_type_req+0x62>
   1b322:	bf00      	nop
   1b324:	0001a1c9 	.word	0x0001a1c9

0001b328 <att_find_info_req>:
{
   1b328:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b32a:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b32c:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b32e:	885e      	ldrh	r6, [r3, #2]
{
   1b330:	b085      	sub	sp, #20
   1b332:	4604      	mov	r4, r0
	if (!start || !end) {
   1b334:	b195      	cbz	r5, 1b35c <att_find_info_req+0x34>
   1b336:	b186      	cbz	r6, 1b35a <att_find_info_req+0x32>
	if (start > end) {
   1b338:	42b5      	cmp	r5, r6
   1b33a:	d80f      	bhi.n	1b35c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b33c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b33e:	2210      	movs	r2, #16
   1b340:	2100      	movs	r1, #0
   1b342:	4668      	mov	r0, sp
   1b344:	f00b fc5d 	bl	26c02 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b348:	2200      	movs	r2, #0
   1b34a:	2105      	movs	r1, #5
   1b34c:	4638      	mov	r0, r7
   1b34e:	f7ff fc59 	bl	1ac04 <bt_att_create_pdu>
   1b352:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b354:	b958      	cbnz	r0, 1b36e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b356:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b358:	e007      	b.n	1b36a <att_find_info_req+0x42>
			*err = 0U;
   1b35a:	4635      	mov	r5, r6
	if (!req) {
   1b35c:	2301      	movs	r3, #1
   1b35e:	462a      	mov	r2, r5
   1b360:	2104      	movs	r1, #4
   1b362:	4620      	mov	r0, r4
   1b364:	f00c fd94 	bl	27e90 <send_err_rsp.part.0>
		return 0;
   1b368:	2000      	movs	r0, #0
}
   1b36a:	b005      	add	sp, #20
   1b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b36e:	466b      	mov	r3, sp
   1b370:	4a0a      	ldr	r2, [pc, #40]	; (1b39c <att_find_info_req+0x74>)
	data.chan = chan;
   1b372:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b374:	4631      	mov	r1, r6
   1b376:	4628      	mov	r0, r5
   1b378:	f00c fa9d 	bl	278b6 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b37c:	9b02      	ldr	r3, [sp, #8]
   1b37e:	b943      	cbnz	r3, 1b392 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b380:	9b01      	ldr	r3, [sp, #4]
   1b382:	6998      	ldr	r0, [r3, #24]
   1b384:	f7fe ff12 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b388:	9801      	ldr	r0, [sp, #4]
   1b38a:	f004 fb4b 	bl	1fa24 <net_buf_unref>
	if (!req) {
   1b38e:	230a      	movs	r3, #10
   1b390:	e7e5      	b.n	1b35e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1b392:	9901      	ldr	r1, [sp, #4]
   1b394:	4620      	mov	r0, r4
   1b396:	f00c fb5c 	bl	27a52 <bt_att_chan_send_rsp>
	return 0;
   1b39a:	e7e5      	b.n	1b368 <att_find_info_req+0x40>
   1b39c:	000278cd 	.word	0x000278cd

0001b3a0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1b3a0:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1b3a2:	4c0b      	ldr	r4, [pc, #44]	; (1b3d0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1b3a4:	4d0b      	ldr	r5, [pc, #44]	; (1b3d4 <bt_att_init+0x34>)
   1b3a6:	4620      	mov	r0, r4
   1b3a8:	f00e fc1e 	bl	29be8 <z_impl_k_queue_init>
   1b3ac:	4629      	mov	r1, r5
   1b3ae:	4620      	mov	r0, r4
   1b3b0:	f00e fc26 	bl	29c00 <k_queue_append>
   1b3b4:	f105 0114 	add.w	r1, r5, #20
   1b3b8:	4620      	mov	r0, r4
   1b3ba:	f00e fc21 	bl	29c00 <k_queue_append>
   1b3be:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1b3c2:	4620      	mov	r0, r4
   1b3c4:	f00e fc1c 	bl	29c00 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1b3c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1b3cc:	f000 bfd4 	b.w	1c378 <bt_gatt_init>
   1b3d0:	20000be4 	.word	0x20000be4
   1b3d4:	20002fd4 	.word	0x20002fd4

0001b3d8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1b3da:	2300      	movs	r3, #0
{
   1b3dc:	4605      	mov	r5, r0
   1b3de:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1b3e0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1b3e2:	f008 ff2b 	bl	2423c <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1b3e6:	4b0b      	ldr	r3, [pc, #44]	; (1b414 <bt_att_req_alloc+0x3c>)
   1b3e8:	681b      	ldr	r3, [r3, #0]
   1b3ea:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1b3ec:	bf04      	itt	eq
   1b3ee:	2500      	moveq	r5, #0
   1b3f0:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b3f2:	a901      	add	r1, sp, #4
   1b3f4:	4808      	ldr	r0, [pc, #32]	; (1b418 <bt_att_req_alloc+0x40>)
   1b3f6:	462a      	mov	r2, r5
   1b3f8:	4623      	mov	r3, r4
   1b3fa:	f008 f815 	bl	23428 <k_mem_slab_alloc>
   1b3fe:	4601      	mov	r1, r0
   1b400:	b930      	cbnz	r0, 1b410 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b402:	9801      	ldr	r0, [sp, #4]
   1b404:	221c      	movs	r2, #28
   1b406:	f00b fbfc 	bl	26c02 <memset>

	return req;
   1b40a:	9801      	ldr	r0, [sp, #4]
}
   1b40c:	b003      	add	sp, #12
   1b40e:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b410:	2000      	movs	r0, #0
   1b412:	e7fb      	b.n	1b40c <bt_att_req_alloc+0x34>
   1b414:	20003010 	.word	0x20003010
   1b418:	20000b5c 	.word	0x20000b5c

0001b41c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b41c:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1b41e:	6883      	ldr	r3, [r0, #8]
{
   1b420:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1b422:	b14b      	cbz	r3, 1b438 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1b424:	6998      	ldr	r0, [r3, #24]
   1b426:	f7fe fec1 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(req->buf);
   1b42a:	9b01      	ldr	r3, [sp, #4]
   1b42c:	6898      	ldr	r0, [r3, #8]
   1b42e:	f004 faf9 	bl	1fa24 <net_buf_unref>
		req->buf = NULL;
   1b432:	9b01      	ldr	r3, [sp, #4]
   1b434:	2200      	movs	r2, #0
   1b436:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b438:	4803      	ldr	r0, [pc, #12]	; (1b448 <bt_att_req_free+0x2c>)
   1b43a:	a901      	add	r1, sp, #4
   1b43c:	f00e fb16 	bl	29a6c <k_mem_slab_free>
}
   1b440:	b003      	add	sp, #12
   1b442:	f85d fb04 	ldr.w	pc, [sp], #4
   1b446:	bf00      	nop
   1b448:	20000b5c 	.word	0x20000b5c

0001b44c <att_handle_rsp>:
{
   1b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b450:	4604      	mov	r4, r0
   1b452:	b083      	sub	sp, #12
	k_work_cancel_delayable(&chan->timeout_work);
   1b454:	3058      	adds	r0, #88	; 0x58
{
   1b456:	af02      	add	r7, sp, #8
   1b458:	460e      	mov	r6, r1
   1b45a:	4690      	mov	r8, r2
   1b45c:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b45e:	f00e fcbd 	bl	29ddc <k_work_cancel_delayable>
	if (!chan->req) {
   1b462:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1b464:	b9b8      	cbnz	r0, 1b496 <att_handle_rsp+0x4a>
		LOG_WRN("No pending ATT request");
   1b466:	466d      	mov	r5, sp
   1b468:	b088      	sub	sp, #32
   1b46a:	aa02      	add	r2, sp, #8
   1b46c:	4b1b      	ldr	r3, [pc, #108]	; (1b4dc <att_handle_rsp+0x90>)
   1b46e:	6153      	str	r3, [r2, #20]
   1b470:	4b1b      	ldr	r3, [pc, #108]	; (1b4e0 <att_handle_rsp+0x94>)
   1b472:	6193      	str	r3, [r2, #24]
   1b474:	2303      	movs	r3, #3
   1b476:	f842 3f10 	str.w	r3, [r2, #16]!
   1b47a:	481a      	ldr	r0, [pc, #104]	; (1b4e4 <att_handle_rsp+0x98>)
   1b47c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b480:	f00c fab3 	bl	279ea <z_log_msg_static_create.constprop.0>
   1b484:	46ad      	mov	sp, r5
	att_req_send_process(chan->att);
   1b486:	6820      	ldr	r0, [r4, #0]
   1b488:	f00c fc3d 	bl	27d06 <att_req_send_process>
}
   1b48c:	2000      	movs	r0, #0
   1b48e:	3704      	adds	r7, #4
   1b490:	46bd      	mov	sp, r7
   1b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1b496:	4b14      	ldr	r3, [pc, #80]	; (1b4e8 <att_handle_rsp+0x9c>)
   1b498:	4298      	cmp	r0, r3
   1b49a:	f04f 0900 	mov.w	r9, #0
   1b49e:	d102      	bne.n	1b4a6 <att_handle_rsp+0x5a>
		chan->req = NULL;
   1b4a0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
   1b4a4:	e7ef      	b.n	1b486 <att_handle_rsp+0x3a>
	func = chan->req->func;
   1b4a6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	chan->req->func = NULL;
   1b4aa:	f8c0 9004 	str.w	r9, [r0, #4]
	params = chan->req->user_data;
   1b4ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1b4b0:	f8d0 b018 	ldr.w	fp, [r0, #24]
	bt_att_req_free(chan->req);
   1b4b4:	f7ff ffb2 	bl	1b41c <bt_att_req_free>
	att_req_send_process(chan->att);
   1b4b8:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1b4ba:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1b4be:	f00c fc22 	bl	27d06 <att_req_send_process>
	if (func) {
   1b4c2:	f1ba 0f00 	cmp.w	sl, #0
   1b4c6:	d0e1      	beq.n	1b48c <att_handle_rsp+0x40>
		func(chan->att->conn, err, pdu, len, params);
   1b4c8:	6820      	ldr	r0, [r4, #0]
   1b4ca:	f8cd b000 	str.w	fp, [sp]
   1b4ce:	6800      	ldr	r0, [r0, #0]
   1b4d0:	4643      	mov	r3, r8
   1b4d2:	4632      	mov	r2, r6
   1b4d4:	4629      	mov	r1, r5
   1b4d6:	47d0      	blx	sl
   1b4d8:	e7d8      	b.n	1b48c <att_handle_rsp+0x40>
   1b4da:	bf00      	nop
   1b4dc:	0002dd35 	.word	0x0002dd35
   1b4e0:	0002dd79 	.word	0x0002dd79
   1b4e4:	0002a818 	.word	0x0002a818
   1b4e8:	20003014 	.word	0x20003014

0001b4ec <bt_att_disconnected>:
{
   1b4ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1b4f0:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1b4f4:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b4f6:	2e00      	cmp	r6, #0
   1b4f8:	d067      	beq.n	1b5ca <bt_att_disconnected+0xde>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b4fa:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1b4fe:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   1b502:	f00c fab4 	bl	27a6e <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b506:	1f27      	subs	r7, r4, #4
   1b508:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1b50c:	2200      	movs	r2, #0
   1b50e:	2300      	movs	r3, #0
   1b510:	4640      	mov	r0, r8
   1b512:	f00d fd78 	bl	29006 <net_buf_get>
   1b516:	4605      	mov	r5, r0
   1b518:	bb78      	cbnz	r0, 1b57a <bt_att_disconnected+0x8e>
	if (chan->req) {
   1b51a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b51c:	b12b      	cbz	r3, 1b52a <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b51e:	4602      	mov	r2, r0
   1b520:	4601      	mov	r1, r0
   1b522:	230e      	movs	r3, #14
   1b524:	4638      	mov	r0, r7
   1b526:	f7ff ff91 	bl	1b44c <att_handle_rsp>
	chan->att = NULL;
   1b52a:	2300      	movs	r3, #0
   1b52c:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1b530:	2102      	movs	r1, #2
   1b532:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b536:	f00c fab3 	bl	27aa0 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1b53a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   1b53c:	2b00      	cmp	r3, #0
   1b53e:	d144      	bne.n	1b5ca <bt_att_disconnected+0xde>
	att_reset(att);
   1b540:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_slist_get(&att->prep_queue))) {
   1b542:	9803      	ldr	r0, [sp, #12]
   1b544:	3024      	adds	r0, #36	; 0x24
   1b546:	f00d fd76 	bl	29036 <net_buf_slist_get>
   1b54a:	4605      	mov	r5, r0
   1b54c:	b9e0      	cbnz	r0, 1b588 <bt_att_disconnected+0x9c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b54e:	9803      	ldr	r0, [sp, #12]
   1b550:	2200      	movs	r2, #0
   1b552:	2300      	movs	r3, #0
   1b554:	300c      	adds	r0, #12
   1b556:	f00d fd56 	bl	29006 <net_buf_get>
   1b55a:	4605      	mov	r5, r0
   1b55c:	b9d8      	cbnz	r0, 1b596 <bt_att_disconnected+0xaa>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b55e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1b560:	6845      	ldr	r5, [r0, #4]
   1b562:	b9fd      	cbnz	r5, 1b5a4 <bt_att_disconnected+0xb8>
	att->conn = NULL;
   1b564:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1b566:	a903      	add	r1, sp, #12
   1b568:	4819      	ldr	r0, [pc, #100]	; (1b5d0 <bt_att_disconnected+0xe4>)
   1b56a:	f00e fa7f 	bl	29a6c <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b56e:	6820      	ldr	r0, [r4, #0]
}
   1b570:	b004      	add	sp, #16
   1b572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1b576:	f001 be55 	b.w	1d224 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b57a:	69a8      	ldr	r0, [r5, #24]
   1b57c:	f7fe fe16 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(buf);
   1b580:	4628      	mov	r0, r5
   1b582:	f004 fa4f 	bl	1fa24 <net_buf_unref>
   1b586:	e7c1      	b.n	1b50c <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b588:	69a8      	ldr	r0, [r5, #24]
   1b58a:	f7fe fe0f 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(buf);
   1b58e:	4628      	mov	r0, r5
   1b590:	f004 fa48 	bl	1fa24 <net_buf_unref>
   1b594:	e7d5      	b.n	1b542 <bt_att_disconnected+0x56>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b596:	69a8      	ldr	r0, [r5, #24]
   1b598:	f7fe fe08 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(buf);
   1b59c:	4628      	mov	r0, r5
   1b59e:	f004 fa41 	bl	1fa24 <net_buf_unref>
   1b5a2:	e7d4      	b.n	1b54e <bt_att_disconnected+0x62>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b5a4:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1b5a6:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b5a8:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b5aa:	4295      	cmp	r5, r2
	list->tail = node;
   1b5ac:	bf08      	it	eq
   1b5ae:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1b5b0:	686e      	ldr	r6, [r5, #4]
   1b5b2:	b136      	cbz	r6, 1b5c2 <bt_att_disconnected+0xd6>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b5b4:	69ab      	ldr	r3, [r5, #24]
   1b5b6:	9300      	str	r3, [sp, #0]
   1b5b8:	2300      	movs	r3, #0
   1b5ba:	6800      	ldr	r0, [r0, #0]
   1b5bc:	461a      	mov	r2, r3
   1b5be:	210e      	movs	r1, #14
   1b5c0:	47b0      	blx	r6
		bt_att_req_free(req);
   1b5c2:	4628      	mov	r0, r5
   1b5c4:	f7ff ff2a 	bl	1b41c <bt_att_req_free>
   1b5c8:	e7c9      	b.n	1b55e <bt_att_disconnected+0x72>
}
   1b5ca:	b004      	add	sp, #16
   1b5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5d0:	20000b24 	.word	0x20000b24

0001b5d4 <att_timeout>:
{
   1b5d4:	b5b0      	push	{r4, r5, r7, lr}
   1b5d6:	af00      	add	r7, sp, #0
	LOG_ERR("ATT Timeout");
   1b5d8:	466d      	mov	r5, sp
   1b5da:	b088      	sub	sp, #32
{
   1b5dc:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1b5de:	466a      	mov	r2, sp
   1b5e0:	4b09      	ldr	r3, [pc, #36]	; (1b608 <att_timeout+0x34>)
   1b5e2:	6153      	str	r3, [r2, #20]
   1b5e4:	4b09      	ldr	r3, [pc, #36]	; (1b60c <att_timeout+0x38>)
   1b5e6:	6193      	str	r3, [r2, #24]
   1b5e8:	2303      	movs	r3, #3
   1b5ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1b5ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b5f2:	4807      	ldr	r0, [pc, #28]	; (1b610 <att_timeout+0x3c>)
   1b5f4:	f00c f9f9 	bl	279ea <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1b5f8:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
   1b5fc:	46ad      	mov	sp, r5
   1b5fe:	f7ff ff75 	bl	1b4ec <bt_att_disconnected>
}
   1b602:	46bd      	mov	sp, r7
   1b604:	bdb0      	pop	{r4, r5, r7, pc}
   1b606:	bf00      	nop
   1b608:	0002dd50 	.word	0x0002dd50
   1b60c:	0002dd60 	.word	0x0002dd60
   1b610:	0002a818 	.word	0x0002a818

0001b614 <find_cf_cfg_by_addr>:
#endif
}

static struct gatt_cf_cfg *find_cf_cfg_by_addr(uint8_t id,
					       const bt_addr_le_t *addr)
{
   1b614:	b570      	push	{r4, r5, r6, lr}
	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		int i;

		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
			if (id == cf_cfg[i].id &&
   1b616:	4c0e      	ldr	r4, [pc, #56]	; (1b650 <find_cf_cfg_by_addr+0x3c>)
   1b618:	7823      	ldrb	r3, [r4, #0]
   1b61a:	4283      	cmp	r3, r0
{
   1b61c:	4606      	mov	r6, r0
   1b61e:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1b620:	d00b      	beq.n	1b63a <find_cf_cfg_by_addr+0x26>
   1b622:	7c23      	ldrb	r3, [r4, #16]
   1b624:	42b3      	cmp	r3, r6
   1b626:	d110      	bne.n	1b64a <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1b628:	490a      	ldr	r1, [pc, #40]	; (1b654 <find_cf_cfg_by_addr+0x40>)
   1b62a:	4628      	mov	r0, r5
   1b62c:	f00c fe1c 	bl	28268 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1b630:	b158      	cbz	r0, 1b64a <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b632:	2301      	movs	r3, #1
				return &cf_cfg[i];
   1b634:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1b638:	e008      	b.n	1b64c <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1b63a:	1c61      	adds	r1, r4, #1
   1b63c:	4628      	mov	r0, r5
   1b63e:	f00c fe13 	bl	28268 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1b642:	2800      	cmp	r0, #0
   1b644:	d0ed      	beq.n	1b622 <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1b646:	2300      	movs	r3, #0
   1b648:	e7f4      	b.n	1b634 <find_cf_cfg_by_addr+0x20>
			}
		}
	}

	return NULL;
   1b64a:	2000      	movs	r0, #0
}
   1b64c:	bd70      	pop	{r4, r5, r6, pc}
   1b64e:	bf00      	nop
   1b650:	20003048 	.word	0x20003048
   1b654:	20003059 	.word	0x20003059

0001b658 <gatt_delayed_store_find>:
{
   1b658:	b570      	push	{r4, r5, r6, lr}
		if (el->id == id &&
   1b65a:	4c0d      	ldr	r4, [pc, #52]	; (1b690 <gatt_delayed_store_find+0x38>)
   1b65c:	7823      	ldrb	r3, [r4, #0]
   1b65e:	4283      	cmp	r3, r0
{
   1b660:	4606      	mov	r6, r0
   1b662:	460d      	mov	r5, r1
		if (el->id == id &&
   1b664:	d009      	beq.n	1b67a <gatt_delayed_store_find+0x22>
   1b666:	7b23      	ldrb	r3, [r4, #12]
   1b668:	42b3      	cmp	r3, r6
   1b66a:	d104      	bne.n	1b676 <gatt_delayed_store_find+0x1e>
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1b66c:	4909      	ldr	r1, [pc, #36]	; (1b694 <gatt_delayed_store_find+0x3c>)
   1b66e:	4628      	mov	r0, r5
   1b670:	f00c fdfa 	bl	28268 <bt_addr_le_eq>
		if (el->id == id &&
   1b674:	b948      	cbnz	r0, 1b68a <gatt_delayed_store_find+0x32>
	return NULL;
   1b676:	2000      	movs	r0, #0
}
   1b678:	bd70      	pop	{r4, r5, r6, pc}
		    bt_addr_le_eq(peer_addr, &el->peer)) {
   1b67a:	1c61      	adds	r1, r4, #1
   1b67c:	4628      	mov	r0, r5
   1b67e:	f00c fdf3 	bl	28268 <bt_addr_le_eq>
		if (el->id == id &&
   1b682:	2800      	cmp	r0, #0
   1b684:	d0ef      	beq.n	1b666 <gatt_delayed_store_find+0xe>
		el = &gatt_delayed_store.peer_list[i];
   1b686:	4620      	mov	r0, r4
   1b688:	e7f6      	b.n	1b678 <gatt_delayed_store_find+0x20>
   1b68a:	4803      	ldr	r0, [pc, #12]	; (1b698 <gatt_delayed_store_find+0x40>)
   1b68c:	e7f4      	b.n	1b678 <gatt_delayed_store_find+0x20>
   1b68e:	bf00      	nop
   1b690:	200020e0 	.word	0x200020e0
   1b694:	200020ed 	.word	0x200020ed
   1b698:	200020ec 	.word	0x200020ec

0001b69c <find_sc_cfg>:
{
   1b69c:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1b69e:	4c0e      	ldr	r4, [pc, #56]	; (1b6d8 <find_sc_cfg+0x3c>)
   1b6a0:	7823      	ldrb	r3, [r4, #0]
   1b6a2:	4283      	cmp	r3, r0
{
   1b6a4:	4605      	mov	r5, r0
   1b6a6:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1b6a8:	d00c      	beq.n	1b6c4 <find_sc_cfg+0x28>
   1b6aa:	7b23      	ldrb	r3, [r4, #12]
   1b6ac:	42ab      	cmp	r3, r5
   1b6ae:	d110      	bne.n	1b6d2 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1b6b0:	480a      	ldr	r0, [pc, #40]	; (1b6dc <find_sc_cfg+0x40>)
   1b6b2:	4631      	mov	r1, r6
   1b6b4:	f00c fdd8 	bl	28268 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1b6b8:	b158      	cbz	r0, 1b6d2 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b6ba:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1b6bc:	220c      	movs	r2, #12
   1b6be:	fb02 4003 	mla	r0, r2, r3, r4
   1b6c2:	e007      	b.n	1b6d4 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1b6c4:	1c60      	adds	r0, r4, #1
   1b6c6:	f00c fdcf 	bl	28268 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1b6ca:	2800      	cmp	r0, #0
   1b6cc:	d0ed      	beq.n	1b6aa <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b6ce:	2300      	movs	r3, #0
   1b6d0:	e7f4      	b.n	1b6bc <find_sc_cfg+0x20>
	return NULL;
   1b6d2:	2000      	movs	r0, #0
}
   1b6d4:	bd70      	pop	{r4, r5, r6, pc}
   1b6d6:	bf00      	nop
   1b6d8:	20003396 	.word	0x20003396
   1b6dc:	200033a3 	.word	0x200033a3

0001b6e0 <ccc_load>:
{
   1b6e0:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b6e2:	4b20      	ldr	r3, [pc, #128]	; (1b764 <ccc_load+0x84>)
{
   1b6e4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b6e6:	6882      	ldr	r2, [r0, #8]
   1b6e8:	429a      	cmp	r2, r3
   1b6ea:	d10f      	bne.n	1b70c <ccc_load+0x2c>
	if (!load->entry) {
   1b6ec:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1b6ee:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1b6f0:	b975      	cbnz	r5, 1b710 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1b6f2:	7922      	ldrb	r2, [r4, #4]
   1b6f4:	6821      	ldr	r1, [r4, #0]
   1b6f6:	4630      	mov	r0, r6
   1b6f8:	f00c fdbe 	bl	28278 <ccc_find_cfg>
	if (!cfg) {
   1b6fc:	4604      	mov	r4, r0
   1b6fe:	b128      	cbz	r0, 1b70c <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b700:	4919      	ldr	r1, [pc, #100]	; (1b768 <ccc_load+0x88>)
   1b702:	3001      	adds	r0, #1
   1b704:	f00c fd38 	bl	28178 <bt_addr_le_copy>
	cfg->id = 0U;
   1b708:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b70a:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1b70c:	2001      	movs	r0, #1
}
   1b70e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1b710:	68e0      	ldr	r0, [r4, #12]
   1b712:	2800      	cmp	r0, #0
   1b714:	d0fb      	beq.n	1b70e <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1b716:	882b      	ldrh	r3, [r5, #0]
   1b718:	428b      	cmp	r3, r1
   1b71a:	d00a      	beq.n	1b732 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1b71c:	d2f6      	bcs.n	1b70c <ccc_load+0x2c>
	load->count--;
   1b71e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1b720:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1b722:	3801      	subs	r0, #1
	load->entry++;
   1b724:	3304      	adds	r3, #4
	load->count--;
   1b726:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b728:	3800      	subs	r0, #0
	load->entry++;
   1b72a:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1b72c:	bf18      	it	ne
   1b72e:	2001      	movne	r0, #1
   1b730:	e7ed      	b.n	1b70e <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1b732:	7922      	ldrb	r2, [r4, #4]
   1b734:	6821      	ldr	r1, [r4, #0]
   1b736:	4630      	mov	r0, r6
   1b738:	f00c fd9e 	bl	28278 <ccc_find_cfg>
	if (!cfg) {
   1b73c:	4605      	mov	r5, r0
   1b73e:	b968      	cbnz	r0, 1b75c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1b740:	4602      	mov	r2, r0
   1b742:	4909      	ldr	r1, [pc, #36]	; (1b768 <ccc_load+0x88>)
   1b744:	4630      	mov	r0, r6
   1b746:	f00c fd97 	bl	28278 <ccc_find_cfg>
		if (!cfg) {
   1b74a:	4605      	mov	r5, r0
   1b74c:	2800      	cmp	r0, #0
   1b74e:	d0e6      	beq.n	1b71e <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1b750:	6821      	ldr	r1, [r4, #0]
   1b752:	3001      	adds	r0, #1
   1b754:	f00c fd10 	bl	28178 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1b758:	7923      	ldrb	r3, [r4, #4]
   1b75a:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1b75c:	68a3      	ldr	r3, [r4, #8]
   1b75e:	885b      	ldrh	r3, [r3, #2]
   1b760:	812b      	strh	r3, [r5, #8]
   1b762:	e7dc      	b.n	1b71e <ccc_load+0x3e>
   1b764:	0001bf15 	.word	0x0001bf15
   1b768:	0002c330 	.word	0x0002c330

0001b76c <find_cf_cfg>:
{
   1b76c:	b570      	push	{r4, r5, r6, lr}
   1b76e:	4d14      	ldr	r5, [pc, #80]	; (1b7c0 <find_cf_cfg+0x54>)
		if (!conn) {
   1b770:	4606      	mov	r6, r0
   1b772:	b140      	cbz	r0, 1b786 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b774:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1b778:	462a      	mov	r2, r5
   1b77a:	1e6c      	subs	r4, r5, #1
   1b77c:	f00b ff5a 	bl	27634 <bt_conn_is_peer_addr_le>
   1b780:	b198      	cbz	r0, 1b7aa <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b782:	4620      	mov	r0, r4
   1b784:	e00c      	b.n	1b7a0 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b786:	490f      	ldr	r1, [pc, #60]	; (1b7c4 <find_cf_cfg+0x58>)
   1b788:	4628      	mov	r0, r5
   1b78a:	f00c fd6d 	bl	28268 <bt_addr_le_eq>
   1b78e:	b940      	cbnz	r0, 1b7a2 <find_cf_cfg+0x36>
   1b790:	490c      	ldr	r1, [pc, #48]	; (1b7c4 <find_cf_cfg+0x58>)
   1b792:	f105 0010 	add.w	r0, r5, #16
   1b796:	f00c fd67 	bl	28268 <bt_addr_le_eq>
   1b79a:	b120      	cbz	r0, 1b7a6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b79c:	f105 000f 	add.w	r0, r5, #15
}
   1b7a0:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b7a2:	1e68      	subs	r0, r5, #1
   1b7a4:	e7fc      	b.n	1b7a0 <find_cf_cfg+0x34>
	return NULL;
   1b7a6:	2000      	movs	r0, #0
   1b7a8:	e7fa      	b.n	1b7a0 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b7aa:	7c21      	ldrb	r1, [r4, #16]
   1b7ac:	f104 0211 	add.w	r2, r4, #17
   1b7b0:	4630      	mov	r0, r6
   1b7b2:	f00b ff3f 	bl	27634 <bt_conn_is_peer_addr_le>
   1b7b6:	2800      	cmp	r0, #0
   1b7b8:	d0f5      	beq.n	1b7a6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b7ba:	f104 0010 	add.w	r0, r4, #16
   1b7be:	e7ef      	b.n	1b7a0 <find_cf_cfg+0x34>
   1b7c0:	20003049 	.word	0x20003049
   1b7c4:	0002c330 	.word	0x0002c330

0001b7c8 <find_ccc_cfg>:
{
   1b7c8:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1b7ca:	1c4a      	adds	r2, r1, #1
{
   1b7cc:	460c      	mov	r4, r1
		if (conn) {
   1b7ce:	b138      	cbz	r0, 1b7e0 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b7d0:	7809      	ldrb	r1, [r1, #0]
   1b7d2:	f00b ff2f 	bl	27634 <bt_conn_is_peer_addr_le>
   1b7d6:	b108      	cbz	r0, 1b7dc <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1b7d8:	4620      	mov	r0, r4
}
   1b7da:	bd10      	pop	{r4, pc}
	return NULL;
   1b7dc:	2000      	movs	r0, #0
   1b7de:	e7fc      	b.n	1b7da <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b7e0:	4902      	ldr	r1, [pc, #8]	; (1b7ec <find_ccc_cfg+0x24>)
   1b7e2:	4610      	mov	r0, r2
   1b7e4:	f00c fd40 	bl	28268 <bt_addr_le_eq>
   1b7e8:	e7f5      	b.n	1b7d6 <find_ccc_cfg+0xe>
   1b7ea:	bf00      	nop
   1b7ec:	0002c330 	.word	0x0002c330

0001b7f0 <gatt_delayed_store_enqueue>:
{
   1b7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7f4:	4606      	mov	r6, r0
   1b7f6:	460f      	mov	r7, r1
   1b7f8:	4690      	mov	r8, r2
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1b7fa:	f00b fc01 	bl	27000 <bt_addr_le_is_bonded>
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1b7fe:	4639      	mov	r1, r7
	bool bonded = bt_addr_le_is_bonded(id, peer_addr);
   1b800:	4604      	mov	r4, r0
	struct ds_peer *el = gatt_delayed_store_find(id, peer_addr);
   1b802:	4630      	mov	r0, r6
   1b804:	f7ff ff28 	bl	1b658 <gatt_delayed_store_find>
   1b808:	4605      	mov	r5, r0
	if (bonded) {
   1b80a:	b33c      	cbz	r4, 1b85c <gatt_delayed_store_enqueue+0x6c>
		if (el == NULL) {
   1b80c:	b9a8      	cbnz	r0, 1b83a <gatt_delayed_store_enqueue+0x4a>
		if (atomic_get(el->flags) == 0) {
   1b80e:	4814      	ldr	r0, [pc, #80]	; (1b860 <gatt_delayed_store_enqueue+0x70>)
   1b810:	f00c fd5d 	bl	282ce <atomic_get>
   1b814:	4604      	mov	r4, r0
   1b816:	b1f8      	cbz	r0, 1b858 <gatt_delayed_store_enqueue+0x68>
   1b818:	4812      	ldr	r0, [pc, #72]	; (1b864 <gatt_delayed_store_enqueue+0x74>)
   1b81a:	f00c fd58 	bl	282ce <atomic_get>
   1b81e:	b960      	cbnz	r0, 1b83a <gatt_delayed_store_enqueue+0x4a>
		el = &gatt_delayed_store.peer_list[i];
   1b820:	4d11      	ldr	r5, [pc, #68]	; (1b868 <gatt_delayed_store_enqueue+0x78>)
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   1b822:	2401      	movs	r4, #1
			bt_addr_le_copy(&el->peer, peer_addr);
   1b824:	230c      	movs	r3, #12
   1b826:	435c      	muls	r4, r3
   1b828:	f8df 9040 	ldr.w	r9, [pc, #64]	; 1b86c <gatt_delayed_store_enqueue+0x7c>
   1b82c:	1c60      	adds	r0, r4, #1
   1b82e:	4639      	mov	r1, r7
   1b830:	4448      	add	r0, r9
   1b832:	f00c fca1 	bl	28178 <bt_addr_le_copy>
			el->id = id;
   1b836:	f809 6004 	strb.w	r6, [r9, r4]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b83a:	2101      	movs	r1, #1
   1b83c:	fa01 f108 	lsl.w	r1, r1, r8
   1b840:	f105 0008 	add.w	r0, r5, #8
   1b844:	f00c fd25 	bl	28292 <atomic_or>
}
   1b848:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		k_work_reschedule(&gatt_delayed_store.work,
   1b84c:	4808      	ldr	r0, [pc, #32]	; (1b870 <gatt_delayed_store_enqueue+0x80>)
   1b84e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1b852:	2300      	movs	r3, #0
   1b854:	f008 ba10 	b.w	23c78 <k_work_reschedule>
		el = &gatt_delayed_store.peer_list[i];
   1b858:	4d04      	ldr	r5, [pc, #16]	; (1b86c <gatt_delayed_store_enqueue+0x7c>)
   1b85a:	e7e3      	b.n	1b824 <gatt_delayed_store_enqueue+0x34>
}
   1b85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b860:	200020e8 	.word	0x200020e8
   1b864:	200020f4 	.word	0x200020f4
   1b868:	200020ec 	.word	0x200020ec
   1b86c:	200020e0 	.word	0x200020e0
   1b870:	200020f8 	.word	0x200020f8

0001b874 <ccc_set_direct.part.0>:
static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
   1b874:	b580      	push	{r7, lr}
   1b876:	af00      	add	r7, sp, #0
			LOG_ERR("Invalid key");
   1b878:	b088      	sub	sp, #32
   1b87a:	466a      	mov	r2, sp
   1b87c:	4b07      	ldr	r3, [pc, #28]	; (1b89c <ccc_set_direct.part.0+0x28>)
   1b87e:	6153      	str	r3, [r2, #20]
   1b880:	4b07      	ldr	r3, [pc, #28]	; (1b8a0 <ccc_set_direct.part.0+0x2c>)
   1b882:	6193      	str	r3, [r2, #24]
   1b884:	2303      	movs	r3, #3
   1b886:	f842 3f10 	str.w	r3, [r2, #16]!
   1b88a:	4806      	ldr	r0, [pc, #24]	; (1b8a4 <ccc_set_direct.part.0+0x30>)
   1b88c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b890:	f00c fd23 	bl	282da <z_log_msg_static_create.constprop.0>
}
   1b894:	f06f 0015 	mvn.w	r0, #21
   1b898:	46bd      	mov	sp, r7
   1b89a:	bd80      	pop	{r7, pc}
   1b89c:	0002de06 	.word	0x0002de06
   1b8a0:	0002e287 	.word	0x0002e287
   1b8a4:	0002a848 	.word	0x0002a848

0001b8a8 <sc_set>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static int sc_set(const char *name, size_t len_rd, settings_read_cb read_cb,
		  void *cb_arg)
{
   1b8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b8ac:	b085      	sub	sp, #20
   1b8ae:	460e      	mov	r6, r1
   1b8b0:	af00      	add	r7, sp, #0
   1b8b2:	4690      	mov	r8, r2
   1b8b4:	4699      	mov	r9, r3
	bt_addr_le_t addr;
	ssize_t len;
	int err;
	const char *next;

	if (!name) {
   1b8b6:	4604      	mov	r4, r0
   1b8b8:	b980      	cbnz	r0, 1b8dc <sc_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1b8ba:	466c      	mov	r4, sp
   1b8bc:	b088      	sub	sp, #32
   1b8be:	466a      	mov	r2, sp
   1b8c0:	4b48      	ldr	r3, [pc, #288]	; (1b9e4 <sc_set+0x13c>)
   1b8c2:	6153      	str	r3, [r2, #20]
   1b8c4:	4b48      	ldr	r3, [pc, #288]	; (1b9e8 <sc_set+0x140>)
   1b8c6:	6193      	str	r3, [r2, #24]
   1b8c8:	2303      	movs	r3, #3
   1b8ca:	f842 3f10 	str.w	r3, [r2, #16]!
   1b8ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		id = BT_ID_DEFAULT;
	} else {
		unsigned long next_id = strtoul(next, NULL, 10);

		if (next_id >= CONFIG_BT_ID_MAX) {
			LOG_ERR("Invalid local identity %lu", next_id);
   1b8d2:	4846      	ldr	r0, [pc, #280]	; (1b9ec <sc_set+0x144>)
   1b8d4:	f00c fd01 	bl	282da <z_log_msg_static_create.constprop.0>
   1b8d8:	46a5      	mov	sp, r4
			return -EINVAL;
   1b8da:	e019      	b.n	1b910 <sc_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1b8dc:	f107 0108 	add.w	r1, r7, #8
   1b8e0:	f00b fa04 	bl	26cec <bt_settings_decode_key>
	if (err) {
   1b8e4:	4605      	mov	r5, r0
   1b8e6:	b1d0      	cbz	r0, 1b91e <sc_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1b8e8:	466d      	mov	r5, sp
   1b8ea:	b08a      	sub	sp, #40	; 0x28
   1b8ec:	466a      	mov	r2, sp
   1b8ee:	4b40      	ldr	r3, [pc, #256]	; (1b9f0 <sc_set+0x148>)
   1b8f0:	6153      	str	r3, [r2, #20]
   1b8f2:	4b3d      	ldr	r3, [pc, #244]	; (1b9e8 <sc_set+0x140>)
   1b8f4:	483d      	ldr	r0, [pc, #244]	; (1b9ec <sc_set+0x144>)
   1b8f6:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b8fa:	f240 3301 	movw	r3, #769	; 0x301
   1b8fe:	8413      	strh	r3, [r2, #32]
   1b900:	4b3c      	ldr	r3, [pc, #240]	; (1b9f4 <sc_set+0x14c>)
   1b902:	f842 3f10 	str.w	r3, [r2, #16]!
   1b906:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1b90a:	f00c fce6 	bl	282da <z_log_msg_static_create.constprop.0>
   1b90e:	46ad      	mov	sp, r5
		return -EINVAL;
   1b910:	f06f 0515 	mvn.w	r5, #21

		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
	}

	return 0;
}
   1b914:	4628      	mov	r0, r5
   1b916:	3714      	adds	r7, #20
   1b918:	46bd      	mov	sp, r7
   1b91a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1b91e:	1d39      	adds	r1, r7, #4
   1b920:	4620      	mov	r0, r4
   1b922:	f00a fd83 	bl	2642c <settings_name_next>
	if (!next) {
   1b926:	6878      	ldr	r0, [r7, #4]
   1b928:	b190      	cbz	r0, 1b950 <sc_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1b92a:	220a      	movs	r2, #10
   1b92c:	4629      	mov	r1, r5
   1b92e:	f00b f888 	bl	26a42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1b932:	b168      	cbz	r0, 1b950 <sc_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1b934:	466c      	mov	r4, sp
   1b936:	b088      	sub	sp, #32
   1b938:	466a      	mov	r2, sp
   1b93a:	4b2f      	ldr	r3, [pc, #188]	; (1b9f8 <sc_set+0x150>)
   1b93c:	6153      	str	r3, [r2, #20]
   1b93e:	4b2a      	ldr	r3, [pc, #168]	; (1b9e8 <sc_set+0x140>)
   1b940:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1b944:	2304      	movs	r3, #4
   1b946:	f842 3f10 	str.w	r3, [r2, #16]!
   1b94a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b94e:	e7c0      	b.n	1b8d2 <sc_set+0x2a>
	cfg = find_sc_cfg(id, &addr);
   1b950:	f107 0108 	add.w	r1, r7, #8
   1b954:	2000      	movs	r0, #0
   1b956:	f7ff fea1 	bl	1b69c <find_sc_cfg>
	if (!cfg && len_rd) {
   1b95a:	4604      	mov	r4, r0
   1b95c:	2800      	cmp	r0, #0
   1b95e:	d13a      	bne.n	1b9d6 <sc_set+0x12e>
   1b960:	2e00      	cmp	r6, #0
   1b962:	d0d7      	beq.n	1b914 <sc_set+0x6c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b964:	4925      	ldr	r1, [pc, #148]	; (1b9fc <sc_set+0x154>)
   1b966:	f7ff fe99 	bl	1b69c <find_sc_cfg>
		if (!cfg) {
   1b96a:	4604      	mov	r4, r0
   1b96c:	b990      	cbnz	r0, 1b994 <sc_set+0xec>
			LOG_ERR("Unable to restore SC: no cfg left");
   1b96e:	466c      	mov	r4, sp
   1b970:	b088      	sub	sp, #32
   1b972:	466a      	mov	r2, sp
   1b974:	4b22      	ldr	r3, [pc, #136]	; (1ba00 <sc_set+0x158>)
   1b976:	6153      	str	r3, [r2, #20]
   1b978:	4b1b      	ldr	r3, [pc, #108]	; (1b9e8 <sc_set+0x140>)
   1b97a:	6193      	str	r3, [r2, #24]
   1b97c:	2303      	movs	r3, #3
   1b97e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b982:	481a      	ldr	r0, [pc, #104]	; (1b9ec <sc_set+0x144>)
   1b984:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b988:	f00c fca7 	bl	282da <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1b98c:	f06f 050b 	mvn.w	r5, #11
   1b990:	46a5      	mov	sp, r4
   1b992:	e7bf      	b.n	1b914 <sc_set+0x6c>
		cfg->id = id;
   1b994:	2300      	movs	r3, #0
   1b996:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1b99a:	f107 0108 	add.w	r1, r7, #8
   1b99e:	f00c fbeb 	bl	28178 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1b9a2:	f104 0108 	add.w	r1, r4, #8
   1b9a6:	2204      	movs	r2, #4
   1b9a8:	4648      	mov	r0, r9
   1b9aa:	47c0      	blx	r8
		if (len < 0) {
   1b9ac:	1e04      	subs	r4, r0, #0
   1b9ae:	dab1      	bge.n	1b914 <sc_set+0x6c>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1b9b0:	466d      	mov	r5, sp
   1b9b2:	b088      	sub	sp, #32
   1b9b4:	466a      	mov	r2, sp
   1b9b6:	4b13      	ldr	r3, [pc, #76]	; (1ba04 <sc_set+0x15c>)
   1b9b8:	6153      	str	r3, [r2, #20]
   1b9ba:	4b0b      	ldr	r3, [pc, #44]	; (1b9e8 <sc_set+0x140>)
   1b9bc:	480b      	ldr	r0, [pc, #44]	; (1b9ec <sc_set+0x144>)
   1b9be:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1b9c2:	2304      	movs	r3, #4
   1b9c4:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9c8:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b9cc:	f00c fc85 	bl	282da <z_log_msg_static_create.constprop.0>
   1b9d0:	46ad      	mov	sp, r5
			return len;
   1b9d2:	4625      	mov	r5, r4
   1b9d4:	e79e      	b.n	1b914 <sc_set+0x6c>
	if (len_rd) {
   1b9d6:	2e00      	cmp	r6, #0
   1b9d8:	d1e3      	bne.n	1b9a2 <sc_set+0xfa>
		memset(cfg, 0, sizeof(*cfg));
   1b9da:	220c      	movs	r2, #12
   1b9dc:	4631      	mov	r1, r6
   1b9de:	f00b f910 	bl	26c02 <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1b9e2:	e797      	b.n	1b914 <sc_set+0x6c>
   1b9e4:	0002c3b5 	.word	0x0002c3b5
   1b9e8:	0002e266 	.word	0x0002e266
   1b9ec:	0002a848 	.word	0x0002a848
   1b9f0:	0002de16 	.word	0x0002de16
   1b9f4:	01000004 	.word	0x01000004
   1b9f8:	0002de36 	.word	0x0002de36
   1b9fc:	0002c330 	.word	0x0002c330
   1ba00:	0002de55 	.word	0x0002de55
   1ba04:	0002de7b 	.word	0x0002de7b

0001ba08 <sc_store>:
{
   1ba08:	b5b0      	push	{r4, r5, r7, lr}
	if (cfg->id) {
   1ba0a:	4605      	mov	r5, r0
{
   1ba0c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1ba0e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1ba12:	af02      	add	r7, sp, #8
   1ba14:	4604      	mov	r4, r0
	if (cfg->id) {
   1ba16:	b32a      	cbz	r2, 1ba64 <sc_store+0x5c>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1ba18:	2104      	movs	r1, #4
   1ba1a:	4638      	mov	r0, r7
   1ba1c:	f009 fb7a 	bl	25114 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1ba20:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1ba22:	4a11      	ldr	r2, [pc, #68]	; (1ba68 <sc_store+0x60>)
   1ba24:	2124      	movs	r1, #36	; 0x24
   1ba26:	1d38      	adds	r0, r7, #4
   1ba28:	462b      	mov	r3, r5
   1ba2a:	f7fa f8b7 	bl	15b9c <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1ba2e:	2204      	movs	r2, #4
   1ba30:	f104 0108 	add.w	r1, r4, #8
   1ba34:	18b8      	adds	r0, r7, r2
   1ba36:	f7f8 fd67 	bl	14508 <settings_save_one>
	if (err) {
   1ba3a:	b180      	cbz	r0, 1ba5e <sc_store+0x56>
		LOG_ERR("failed to store SC (err %d)", err);
   1ba3c:	466c      	mov	r4, sp
   1ba3e:	b088      	sub	sp, #32
   1ba40:	aa02      	add	r2, sp, #8
   1ba42:	4b0a      	ldr	r3, [pc, #40]	; (1ba6c <sc_store+0x64>)
   1ba44:	6153      	str	r3, [r2, #20]
   1ba46:	4b0a      	ldr	r3, [pc, #40]	; (1ba70 <sc_store+0x68>)
   1ba48:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1ba4c:	2304      	movs	r3, #4
   1ba4e:	f842 3f10 	str.w	r3, [r2, #16]!
   1ba52:	4808      	ldr	r0, [pc, #32]	; (1ba74 <sc_store+0x6c>)
   1ba54:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ba58:	f00c fc3f 	bl	282da <z_log_msg_static_create.constprop.0>
   1ba5c:	46a5      	mov	sp, r4
}
   1ba5e:	3728      	adds	r7, #40	; 0x28
   1ba60:	46bd      	mov	sp, r7
   1ba62:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1ba64:	9200      	str	r2, [sp, #0]
   1ba66:	e7dc      	b.n	1ba22 <sc_store+0x1a>
   1ba68:	0002e361 	.word	0x0002e361
   1ba6c:	0002dea0 	.word	0x0002dea0
   1ba70:	0002e313 	.word	0x0002e313
   1ba74:	0002a848 	.word	0x0002a848

0001ba78 <sc_save>:
{
   1ba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba7c:	af00      	add	r7, sp, #0
   1ba7e:	4681      	mov	r9, r0
   1ba80:	4688      	mov	r8, r1
   1ba82:	4616      	mov	r6, r2
   1ba84:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1ba86:	f7ff fe09 	bl	1b69c <find_sc_cfg>
	if (!cfg) {
   1ba8a:	4604      	mov	r4, r0
   1ba8c:	b9e0      	cbnz	r0, 1bac8 <sc_save+0x50>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1ba8e:	491b      	ldr	r1, [pc, #108]	; (1bafc <sc_save+0x84>)
   1ba90:	f7ff fe04 	bl	1b69c <find_sc_cfg>
		if (!cfg) {
   1ba94:	4604      	mov	r4, r0
   1ba96:	b990      	cbnz	r0, 1babe <sc_save+0x46>
			LOG_ERR("unable to save SC: no cfg left");
   1ba98:	466c      	mov	r4, sp
   1ba9a:	b088      	sub	sp, #32
   1ba9c:	466a      	mov	r2, sp
   1ba9e:	4b18      	ldr	r3, [pc, #96]	; (1bb00 <sc_save+0x88>)
   1baa0:	6153      	str	r3, [r2, #20]
   1baa2:	4b18      	ldr	r3, [pc, #96]	; (1bb04 <sc_save+0x8c>)
   1baa4:	6193      	str	r3, [r2, #24]
   1baa6:	2303      	movs	r3, #3
   1baa8:	f842 3f10 	str.w	r3, [r2, #16]!
   1baac:	4816      	ldr	r0, [pc, #88]	; (1bb08 <sc_save+0x90>)
   1baae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bab2:	f00c fc12 	bl	282da <z_log_msg_static_create.constprop.0>
   1bab6:	46a5      	mov	sp, r4
}
   1bab8:	46bd      	mov	sp, r7
   1baba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg->id = id;
   1babe:	f800 9b01 	strb.w	r9, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1bac2:	4641      	mov	r1, r8
   1bac4:	f00c fb58 	bl	28178 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1bac8:	8922      	ldrh	r2, [r4, #8]
   1baca:	8963      	ldrh	r3, [r4, #10]
   1bacc:	b96a      	cbnz	r2, 1baea <sc_save+0x72>
   1bace:	b973      	cbnz	r3, 1baee <sc_save+0x76>
		cfg->data.start = start;
   1bad0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1bad2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1bad4:	4621      	mov	r1, r4
   1bad6:	f811 0b01 	ldrb.w	r0, [r1], #1
   1bada:	f00b fa91 	bl	27000 <bt_addr_le_is_bonded>
   1bade:	2800      	cmp	r0, #0
   1bae0:	d0ea      	beq.n	1bab8 <sc_save+0x40>
		sc_store(cfg);
   1bae2:	4620      	mov	r0, r4
   1bae4:	f7ff ff90 	bl	1ba08 <sc_store>
   1bae8:	e7e6      	b.n	1bab8 <sc_save+0x40>
	if (new_start >= *start && new_end <= *end) {
   1baea:	4296      	cmp	r6, r2
   1baec:	d302      	bcc.n	1baf4 <sc_save+0x7c>
   1baee:	429d      	cmp	r5, r3
   1baf0:	d8ef      	bhi.n	1bad2 <sc_save+0x5a>
   1baf2:	e7e1      	b.n	1bab8 <sc_save+0x40>
	if (*end < new_end) {
   1baf4:	429d      	cmp	r5, r3
		*start = new_start;
   1baf6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1baf8:	d9ec      	bls.n	1bad4 <sc_save+0x5c>
   1bafa:	e7ea      	b.n	1bad2 <sc_save+0x5a>
   1bafc:	0002c330 	.word	0x0002c330
   1bb00:	0002dec0 	.word	0x0002dec0
   1bb04:	0002e31c 	.word	0x0002e31c
   1bb08:	0002a848 	.word	0x0002a848

0001bb0c <db_hash_store>:
{
   1bb0c:	b598      	push	{r3, r4, r7, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bb0e:	490d      	ldr	r1, [pc, #52]	; (1bb44 <db_hash_store+0x38>)
   1bb10:	480d      	ldr	r0, [pc, #52]	; (1bb48 <db_hash_store+0x3c>)
{
   1bb12:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1bb14:	2210      	movs	r2, #16
   1bb16:	f7f8 fcf7 	bl	14508 <settings_save_one>
	if (err) {
   1bb1a:	b180      	cbz	r0, 1bb3e <db_hash_store+0x32>
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1bb1c:	466c      	mov	r4, sp
   1bb1e:	b088      	sub	sp, #32
   1bb20:	466a      	mov	r2, sp
   1bb22:	4b0a      	ldr	r3, [pc, #40]	; (1bb4c <db_hash_store+0x40>)
   1bb24:	6153      	str	r3, [r2, #20]
   1bb26:	4b0a      	ldr	r3, [pc, #40]	; (1bb50 <db_hash_store+0x44>)
   1bb28:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1bb2c:	2304      	movs	r3, #4
   1bb2e:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb32:	4808      	ldr	r0, [pc, #32]	; (1bb54 <db_hash_store+0x48>)
   1bb34:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bb38:	f00c fbcf 	bl	282da <z_log_msg_static_create.constprop.0>
   1bb3c:	46a5      	mov	sp, r4
}
   1bb3e:	46bd      	mov	sp, r7
   1bb40:	bd98      	pop	{r3, r4, r7, pc}
   1bb42:	bf00      	nop
   1bb44:	20002128 	.word	0x20002128
   1bb48:	0002dee3 	.word	0x0002dee3
   1bb4c:	0002deeb 	.word	0x0002deeb
   1bb50:	0002e32d 	.word	0x0002e32d
   1bb54:	0002a848 	.word	0x0002a848

0001bb58 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1bb58:	b5b0      	push	{r4, r5, r7, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bb5a:	490f      	ldr	r1, [pc, #60]	; (1bb98 <db_hash_set+0x40>)
{
   1bb5c:	4614      	mov	r4, r2
   1bb5e:	af00      	add	r7, sp, #0
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1bb60:	2210      	movs	r2, #16
   1bb62:	4618      	mov	r0, r3
   1bb64:	47a0      	blx	r4
	if (len < 0) {
   1bb66:	1e04      	subs	r4, r0, #0
   1bb68:	da13      	bge.n	1bb92 <db_hash_set+0x3a>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1bb6a:	466d      	mov	r5, sp
   1bb6c:	b088      	sub	sp, #32
   1bb6e:	466a      	mov	r2, sp
   1bb70:	4b0a      	ldr	r3, [pc, #40]	; (1bb9c <db_hash_set+0x44>)
   1bb72:	6153      	str	r3, [r2, #20]
   1bb74:	4b0a      	ldr	r3, [pc, #40]	; (1bba0 <db_hash_set+0x48>)
   1bb76:	480b      	ldr	r0, [pc, #44]	; (1bba4 <db_hash_set+0x4c>)
   1bb78:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1bb7c:	2304      	movs	r3, #4
   1bb7e:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb82:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bb86:	f00c fba8 	bl	282da <z_log_msg_static_create.constprop.0>
   1bb8a:	46ad      	mov	sp, r5
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1bb8c:	4620      	mov	r0, r4
   1bb8e:	46bd      	mov	sp, r7
   1bb90:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1bb92:	2400      	movs	r4, #0
   1bb94:	e7fa      	b.n	1bb8c <db_hash_set+0x34>
   1bb96:	bf00      	nop
   1bb98:	20002138 	.word	0x20002138
   1bb9c:	0002de7b 	.word	0x0002de7b
   1bba0:	0002e253 	.word	0x0002e253
   1bba4:	0002a848 	.word	0x0002a848

0001bba8 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1bba8:	b508      	push	{r3, lr}
   1bbaa:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbac:	6881      	ldr	r1, [r0, #8]
   1bbae:	4a07      	ldr	r2, [pc, #28]	; (1bbcc <remove_peer_from_attr+0x24>)
   1bbb0:	4291      	cmp	r1, r2
   1bbb2:	d109      	bne.n	1bbc8 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1bbb4:	791a      	ldrb	r2, [r3, #4]
   1bbb6:	6819      	ldr	r1, [r3, #0]
   1bbb8:	68c0      	ldr	r0, [r0, #12]
   1bbba:	f00c fb5d 	bl	28278 <ccc_find_cfg>
	if (cfg) {
   1bbbe:	b118      	cbz	r0, 1bbc8 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1bbc0:	220a      	movs	r2, #10
   1bbc2:	2100      	movs	r1, #0
   1bbc4:	f00b f81d 	bl	26c02 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1bbc8:	2001      	movs	r0, #1
   1bbca:	bd08      	pop	{r3, pc}
   1bbcc:	0001bf15 	.word	0x0001bf15

0001bbd0 <ccc_save>:
{
   1bbd0:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbd2:	4b0c      	ldr	r3, [pc, #48]	; (1bc04 <ccc_save+0x34>)
{
   1bbd4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbd6:	6882      	ldr	r2, [r0, #8]
   1bbd8:	429a      	cmp	r2, r3
{
   1bbda:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbdc:	d10f      	bne.n	1bbfe <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1bbde:	7922      	ldrb	r2, [r4, #4]
   1bbe0:	6821      	ldr	r1, [r4, #0]
   1bbe2:	68c0      	ldr	r0, [r0, #12]
   1bbe4:	f00c fb48 	bl	28278 <ccc_find_cfg>
	if (!cfg) {
   1bbe8:	b148      	cbz	r0, 1bbfe <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1bbea:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1bbee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1bbf2:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1bbf4:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1bbf6:	8901      	ldrh	r1, [r0, #8]
   1bbf8:	8151      	strh	r1, [r2, #10]
	save->count++;
   1bbfa:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1bbfe:	2001      	movs	r0, #1
   1bc00:	bd38      	pop	{r3, r4, r5, pc}
   1bc02:	bf00      	nop
   1bc04:	0001bf15 	.word	0x0001bf15

0001bc08 <convert_to_id_on_match>:
{
   1bc08:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc0a:	4b09      	ldr	r3, [pc, #36]	; (1bc30 <convert_to_id_on_match+0x28>)
{
   1bc0c:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc0e:	6882      	ldr	r2, [r0, #8]
   1bc10:	429a      	cmp	r2, r3
   1bc12:	d10a      	bne.n	1bc2a <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1bc14:	68c4      	ldr	r4, [r0, #12]
   1bc16:	6829      	ldr	r1, [r5, #0]
   1bc18:	3401      	adds	r4, #1
   1bc1a:	4620      	mov	r0, r4
   1bc1c:	f00c fb24 	bl	28268 <bt_addr_le_eq>
   1bc20:	b118      	cbz	r0, 1bc2a <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1bc22:	6869      	ldr	r1, [r5, #4]
   1bc24:	4620      	mov	r0, r4
   1bc26:	f00c faa7 	bl	28178 <bt_addr_le_copy>
}
   1bc2a:	2001      	movs	r0, #1
   1bc2c:	bd38      	pop	{r3, r4, r5, pc}
   1bc2e:	bf00      	nop
   1bc30:	0001bf15 	.word	0x0001bf15

0001bc34 <sc_commit.part.0>:
	k_work_reschedule(&gatt_sc.work, timeout);
   1bc34:	4802      	ldr	r0, [pc, #8]	; (1bc40 <sc_commit.part.0+0xc>)
   1bc36:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1bc3a:	2300      	movs	r3, #0
   1bc3c:	f008 b81c 	b.w	23c78 <k_work_reschedule>
   1bc40:	200021c0 	.word	0x200021c0

0001bc44 <sc_commit>:
{
   1bc44:	b508      	push	{r3, lr}
   1bc46:	2104      	movs	r1, #4
   1bc48:	4808      	ldr	r0, [pc, #32]	; (1bc6c <sc_commit+0x28>)
   1bc4a:	f00c fb22 	bl	28292 <atomic_or>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bc4e:	4807      	ldr	r0, [pc, #28]	; (1bc6c <sc_commit+0x28>)
   1bc50:	f06f 0102 	mvn.w	r1, #2
   1bc54:	f00c fb2c 	bl	282b0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bc58:	4804      	ldr	r0, [pc, #16]	; (1bc6c <sc_commit+0x28>)
   1bc5a:	f00c fb38 	bl	282ce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1bc5e:	07c3      	lsls	r3, r0, #31
   1bc60:	d501      	bpl.n	1bc66 <sc_commit+0x22>
   1bc62:	f7ff ffe7 	bl	1bc34 <sc_commit.part.0>
}
   1bc66:	2000      	movs	r0, #0
   1bc68:	bd08      	pop	{r3, pc}
   1bc6a:	bf00      	nop
   1bc6c:	200021f0 	.word	0x200021f0

0001bc70 <clear_cf_cfg>:
{
   1bc70:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bc72:	490c      	ldr	r1, [pc, #48]	; (1bca4 <clear_cf_cfg+0x34>)
{
   1bc74:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bc76:	3001      	adds	r0, #1
   1bc78:	f00c fa7e 	bl	28178 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1bc7c:	f104 0008 	add.w	r0, r4, #8
   1bc80:	2201      	movs	r2, #1
   1bc82:	2100      	movs	r1, #0
   1bc84:	f00a ffbd 	bl	26c02 <memset>
   1bc88:	f3bf 8f5b 	dmb	ish
   1bc8c:	340c      	adds	r4, #12
   1bc8e:	2300      	movs	r3, #0
   1bc90:	e854 2f00 	ldrex	r2, [r4]
   1bc94:	e844 3100 	strex	r1, r3, [r4]
   1bc98:	2900      	cmp	r1, #0
   1bc9a:	d1f9      	bne.n	1bc90 <clear_cf_cfg+0x20>
   1bc9c:	f3bf 8f5b 	dmb	ish
}
   1bca0:	bd10      	pop	{r4, pc}
   1bca2:	bf00      	nop
   1bca4:	0002c330 	.word	0x0002c330

0001bca8 <bt_gatt_clear_sc>:
{
   1bca8:	b5b0      	push	{r4, r5, r7, lr}
   1bcaa:	b08c      	sub	sp, #48	; 0x30
   1bcac:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1bcae:	f7ff fcf5 	bl	1b69c <find_sc_cfg>
	if (!cfg) {
   1bcb2:	4604      	mov	r4, r0
   1bcb4:	b340      	cbz	r0, 1bd08 <bt_gatt_clear_sc+0x60>
		if (cfg->id) {
   1bcb6:	4605      	mov	r5, r0
   1bcb8:	f815 2b01 	ldrb.w	r2, [r5], #1
   1bcbc:	b342      	cbz	r2, 1bd10 <bt_gatt_clear_sc+0x68>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1bcbe:	2104      	movs	r1, #4
   1bcc0:	4638      	mov	r0, r7
   1bcc2:	f009 fa27 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bcc6:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bcc8:	1d38      	adds	r0, r7, #4
   1bcca:	4a12      	ldr	r2, [pc, #72]	; (1bd14 <bt_gatt_clear_sc+0x6c>)
   1bccc:	462b      	mov	r3, r5
   1bcce:	2124      	movs	r1, #36	; 0x24
   1bcd0:	f7f9 ff64 	bl	15b9c <bt_settings_encode_key>
		err = settings_delete(key);
   1bcd4:	1d38      	adds	r0, r7, #4
   1bcd6:	f00a fb81 	bl	263dc <settings_delete>
		if (err) {
   1bcda:	b180      	cbz	r0, 1bcfe <bt_gatt_clear_sc+0x56>
			LOG_ERR("failed to delete SC (err %d)", err);
   1bcdc:	466d      	mov	r5, sp
   1bcde:	b088      	sub	sp, #32
   1bce0:	aa02      	add	r2, sp, #8
   1bce2:	4b0d      	ldr	r3, [pc, #52]	; (1bd18 <bt_gatt_clear_sc+0x70>)
   1bce4:	6153      	str	r3, [r2, #20]
   1bce6:	4b0d      	ldr	r3, [pc, #52]	; (1bd1c <bt_gatt_clear_sc+0x74>)
   1bce8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1bcec:	2304      	movs	r3, #4
   1bcee:	f842 3f10 	str.w	r3, [r2, #16]!
   1bcf2:	480b      	ldr	r0, [pc, #44]	; (1bd20 <bt_gatt_clear_sc+0x78>)
   1bcf4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bcf8:	f00c faef 	bl	282da <z_log_msg_static_create.constprop.0>
   1bcfc:	46ad      	mov	sp, r5
	memset(cfg, 0, sizeof(*cfg));
   1bcfe:	220c      	movs	r2, #12
   1bd00:	2100      	movs	r1, #0
   1bd02:	4620      	mov	r0, r4
   1bd04:	f00a ff7d 	bl	26c02 <memset>
}
   1bd08:	2000      	movs	r0, #0
   1bd0a:	3728      	adds	r7, #40	; 0x28
   1bd0c:	46bd      	mov	sp, r7
   1bd0e:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1bd10:	9200      	str	r2, [sp, #0]
   1bd12:	e7d9      	b.n	1bcc8 <bt_gatt_clear_sc+0x20>
   1bd14:	0002e361 	.word	0x0002e361
   1bd18:	0002df15 	.word	0x0002df15
   1bd1c:	0002e2f9 	.word	0x0002e2f9
   1bd20:	0002a848 	.word	0x0002a848

0001bd24 <sc_clear>:
{
   1bd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd26:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1bd2a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd2c:	4631      	mov	r1, r6
   1bd2e:	7a00      	ldrb	r0, [r0, #8]
{
   1bd30:	af00      	add	r7, sp, #0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd32:	f00b f965 	bl	27000 <bt_addr_le_is_bonded>
   1bd36:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1bd38:	4631      	mov	r1, r6
   1bd3a:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd3c:	b1ad      	cbz	r5, 1bd6a <sc_clear+0x46>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1bd3e:	f7ff ffb3 	bl	1bca8 <bt_gatt_clear_sc>
		if (err) {
   1bd42:	b180      	cbz	r0, 1bd66 <sc_clear+0x42>
			LOG_ERR("Failed to clear SC %d", err);
   1bd44:	466c      	mov	r4, sp
   1bd46:	b088      	sub	sp, #32
   1bd48:	466a      	mov	r2, sp
   1bd4a:	4b0c      	ldr	r3, [pc, #48]	; (1bd7c <sc_clear+0x58>)
   1bd4c:	6153      	str	r3, [r2, #20]
   1bd4e:	4b0c      	ldr	r3, [pc, #48]	; (1bd80 <sc_clear+0x5c>)
   1bd50:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1bd54:	2304      	movs	r3, #4
   1bd56:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd5a:	480a      	ldr	r0, [pc, #40]	; (1bd84 <sc_clear+0x60>)
   1bd5c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1bd60:	f00c fabb 	bl	282da <z_log_msg_static_create.constprop.0>
   1bd64:	46a5      	mov	sp, r4
}
   1bd66:	46bd      	mov	sp, r7
   1bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1bd6a:	f7ff fc97 	bl	1b69c <find_sc_cfg>
		if (cfg) {
   1bd6e:	2800      	cmp	r0, #0
   1bd70:	d0f9      	beq.n	1bd66 <sc_clear+0x42>
	memset(cfg, 0, sizeof(*cfg));
   1bd72:	220c      	movs	r2, #12
   1bd74:	4629      	mov	r1, r5
   1bd76:	f00a ff44 	bl	26c02 <memset>
}
   1bd7a:	e7f4      	b.n	1bd66 <sc_clear+0x42>
   1bd7c:	0002df36 	.word	0x0002df36
   1bd80:	0002e30a 	.word	0x0002e30a
   1bd84:	0002a848 	.word	0x0002a848

0001bd88 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(uint8_t id, const bt_addr_le_t *peer)
   1bd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd8c:	b08c      	sub	sp, #48	; 0x30
   1bd8e:	af02      	add	r7, sp, #8
   1bd90:	4605      	mov	r5, r0
   1bd92:	460e      	mov	r6, r1
	cfg = find_cf_cfg_by_addr(id, peer);
   1bd94:	f7ff fc3e 	bl	1b614 <find_cf_cfg_by_addr>
	if (!cfg) {
   1bd98:	4604      	mov	r4, r0
   1bd9a:	2800      	cmp	r0, #0
   1bd9c:	d040      	beq.n	1be20 <bt_gatt_store_cf.isra.0+0x98>
		str = (char *)cfg->data;
   1bd9e:	f100 0808 	add.w	r8, r0, #8
		if (id) {
   1bda2:	b15d      	cbz	r5, 1bdbc <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), id);
   1bda4:	462a      	mov	r2, r5
   1bda6:	2104      	movs	r1, #4
   1bda8:	4638      	mov	r0, r7
   1bdaa:	f009 f9b3 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1bdae:	4a1f      	ldr	r2, [pc, #124]	; (1be2c <bt_gatt_store_cf.isra.0+0xa4>)
   1bdb0:	9700      	str	r7, [sp, #0]
   1bdb2:	4633      	mov	r3, r6
   1bdb4:	2124      	movs	r1, #36	; 0x24
   1bdb6:	1d38      	adds	r0, r7, #4
   1bdb8:	f7f9 fef0 	bl	15b9c <bt_settings_encode_key>
		memcpy(dst, str, len);
   1bdbc:	2201      	movs	r2, #1
   1bdbe:	4641      	mov	r1, r8
   1bdc0:	4638      	mov	r0, r7
   1bdc2:	f00a ff13 	bl	26bec <memcpy>
   1bdc6:	f104 000c 	add.w	r0, r4, #12
   1bdca:	f00c fa80 	bl	282ce <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bdce:	f000 0001 	and.w	r0, r0, #1
   1bdd2:	7078      	strb	r0, [r7, #1]
	if (!cfg || !id) {
   1bdd4:	bb35      	cbnz	r5, 1be24 <bt_gatt_store_cf.isra.0+0x9c>
		len += CF_FLAGS_STORE_LEN;
   1bdd6:	2502      	movs	r5, #2
		str = dst;
   1bdd8:	463c      	mov	r4, r7
		bt_settings_encode_key(key, sizeof(key), "cf",
   1bdda:	2300      	movs	r3, #0
   1bddc:	9300      	str	r3, [sp, #0]
   1bdde:	4a13      	ldr	r2, [pc, #76]	; (1be2c <bt_gatt_store_cf.isra.0+0xa4>)
   1bde0:	4633      	mov	r3, r6
   1bde2:	2124      	movs	r1, #36	; 0x24
   1bde4:	1d38      	adds	r0, r7, #4
   1bde6:	f7f9 fed9 	bl	15b9c <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1bdea:	462a      	mov	r2, r5
   1bdec:	4621      	mov	r1, r4
   1bdee:	1d38      	adds	r0, r7, #4
   1bdf0:	f7f8 fb8a 	bl	14508 <settings_save_one>
	if (err) {
   1bdf4:	b180      	cbz	r0, 1be18 <bt_gatt_store_cf.isra.0+0x90>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1bdf6:	466c      	mov	r4, sp
   1bdf8:	b088      	sub	sp, #32
   1bdfa:	aa02      	add	r2, sp, #8
   1bdfc:	4b0c      	ldr	r3, [pc, #48]	; (1be30 <bt_gatt_store_cf.isra.0+0xa8>)
   1bdfe:	6153      	str	r3, [r2, #20]
   1be00:	4b0c      	ldr	r3, [pc, #48]	; (1be34 <bt_gatt_store_cf.isra.0+0xac>)
   1be02:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1be06:	2304      	movs	r3, #4
   1be08:	f842 3f10 	str.w	r3, [r2, #16]!
   1be0c:	480a      	ldr	r0, [pc, #40]	; (1be38 <bt_gatt_store_cf.isra.0+0xb0>)
   1be0e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1be12:	f00c fa62 	bl	282da <z_log_msg_static_create.constprop.0>
   1be16:	46a5      	mov	sp, r4
}
   1be18:	3728      	adds	r7, #40	; 0x28
   1be1a:	46bd      	mov	sp, r7
   1be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = 0;
   1be20:	4605      	mov	r5, r0
   1be22:	e7da      	b.n	1bdda <bt_gatt_store_cf.isra.0+0x52>
		len += CF_FLAGS_STORE_LEN;
   1be24:	2502      	movs	r5, #2
		str = dst;
   1be26:	463c      	mov	r4, r7
   1be28:	e7df      	b.n	1bdea <bt_gatt_store_cf.isra.0+0x62>
   1be2a:	bf00      	nop
   1be2c:	0002e35b 	.word	0x0002e35b
   1be30:	0002df50 	.word	0x0002df50
   1be34:	0002e33b 	.word	0x0002e33b
   1be38:	0002a848 	.word	0x0002a848

0001be3c <read_ppcp>:
{
   1be3c:	b513      	push	{r0, r1, r4, lr}
   1be3e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1be42:	4c0b      	ldr	r4, [pc, #44]	; (1be70 <read_ppcp+0x34>)
{
   1be44:	4610      	mov	r0, r2
	if (offset > value_len) {
   1be46:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1be48:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1be4c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1be50:	d80b      	bhi.n	1be6a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1be52:	f1c1 0408 	rsb	r4, r1, #8
   1be56:	429c      	cmp	r4, r3
   1be58:	bfa8      	it	ge
   1be5a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1be5c:	4622      	mov	r2, r4
   1be5e:	4469      	add	r1, sp
   1be60:	f00a fec4 	bl	26bec <memcpy>
}
   1be64:	4620      	mov	r0, r4
   1be66:	b002      	add	sp, #8
   1be68:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1be6a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1be6e:	e7f9      	b.n	1be64 <read_ppcp+0x28>
   1be70:	00280018 	.word	0x00280018

0001be74 <disconnected_cb>:
{
   1be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be78:	4b23      	ldr	r3, [pc, #140]	; (1bf08 <disconnected_cb+0x94>)
{
   1be7a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be7c:	6882      	ldr	r2, [r0, #8]
   1be7e:	429a      	cmp	r2, r3
{
   1be80:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1be82:	d102      	bne.n	1be8a <disconnected_cb+0x16>
	ccc = attr->user_data;
   1be84:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1be86:	8963      	ldrh	r3, [r4, #10]
   1be88:	bb33      	cbnz	r3, 1bed8 <disconnected_cb+0x64>
}
   1be8a:	2001      	movs	r0, #1
   1be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1be90:	f00b fb20 	bl	274d4 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1be94:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1be96:	2100      	movs	r1, #0
   1be98:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1be9a:	2b00      	cmp	r3, #0
   1be9c:	d0f5      	beq.n	1be8a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1be9e:	4638      	mov	r0, r7
   1bea0:	4798      	blx	r3
   1bea2:	e7f2      	b.n	1be8a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bea4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1bea8:	7a28      	ldrb	r0, [r5, #8]
   1beaa:	4641      	mov	r1, r8
   1beac:	f00b f8a8 	bl	27000 <bt_addr_le_is_bonded>
   1beb0:	b968      	cbnz	r0, 1bece <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1beb2:	4b16      	ldr	r3, [pc, #88]	; (1bf0c <disconnected_cb+0x98>)
   1beb4:	429c      	cmp	r4, r3
   1beb6:	d102      	bne.n	1bebe <disconnected_cb+0x4a>
					sc_clear(conn);
   1beb8:	4628      	mov	r0, r5
   1beba:	f7ff ff33 	bl	1bd24 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bebe:	4914      	ldr	r1, [pc, #80]	; (1bf10 <disconnected_cb+0x9c>)
   1bec0:	4630      	mov	r0, r6
   1bec2:	f00c f959 	bl	28178 <bt_addr_le_copy>
	cfg->id = 0U;
   1bec6:	2300      	movs	r3, #0
   1bec8:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1beca:	8123      	strh	r3, [r4, #8]
}
   1becc:	e7e2      	b.n	1be94 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bece:	4641      	mov	r1, r8
   1bed0:	4630      	mov	r0, r6
   1bed2:	f00c f951 	bl	28178 <bt_addr_le_copy>
   1bed6:	e7dd      	b.n	1be94 <disconnected_cb+0x20>
		if (!cfg->value) {
   1bed8:	8923      	ldrh	r3, [r4, #8]
   1beda:	2b00      	cmp	r3, #0
   1bedc:	d0da      	beq.n	1be94 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bede:	4626      	mov	r6, r4
   1bee0:	4628      	mov	r0, r5
   1bee2:	f816 1b01 	ldrb.w	r1, [r6], #1
   1bee6:	4632      	mov	r2, r6
   1bee8:	f00b fba4 	bl	27634 <bt_conn_is_peer_addr_le>
   1beec:	2800      	cmp	r0, #0
   1beee:	d1d9      	bne.n	1bea4 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bef0:	7820      	ldrb	r0, [r4, #0]
   1bef2:	4631      	mov	r1, r6
   1bef4:	f7fd fd70 	bl	199d8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1bef8:	2800      	cmp	r0, #0
   1befa:	d0cb      	beq.n	1be94 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1befc:	7b43      	ldrb	r3, [r0, #13]
   1befe:	2b07      	cmp	r3, #7
   1bf00:	d1c6      	bne.n	1be90 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1bf02:	f00b fae7 	bl	274d4 <bt_conn_unref>
	if (!value_used) {
   1bf06:	e7c0      	b.n	1be8a <disconnected_cb+0x16>
   1bf08:	0001bf15 	.word	0x0001bf15
   1bf0c:	20000824 	.word	0x20000824
   1bf10:	0002c330 	.word	0x0002c330

0001bf14 <bt_gatt_attr_write_ccc>:
{
   1bf14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf18:	af00      	add	r7, sp, #0
   1bf1a:	4698      	mov	r8, r3
   1bf1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bf1e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
{
   1bf22:	4606      	mov	r6, r0
   1bf24:	4689      	mov	r9, r1
	if (offset) {
   1bf26:	2b00      	cmp	r3, #0
   1bf28:	d15c      	bne.n	1bfe4 <bt_gatt_attr_write_ccc+0xd0>
	if (!len || len > sizeof(uint16_t)) {
   1bf2a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   1bf2e:	2b01      	cmp	r3, #1
   1bf30:	d85b      	bhi.n	1bfea <bt_gatt_attr_write_ccc+0xd6>
	if (len < sizeof(uint16_t)) {
   1bf32:	f1b8 0f01 	cmp.w	r8, #1
	cfg = find_ccc_cfg(conn, ccc);
   1bf36:	4651      	mov	r1, sl
		value = *(uint8_t *)buf;
   1bf38:	7815      	ldrb	r5, [r2, #0]
   1bf3a:	bf18      	it	ne
   1bf3c:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1bf3e:	f7ff fc43 	bl	1b7c8 <find_ccc_cfg>
	if (!cfg) {
   1bf42:	4604      	mov	r4, r0
   1bf44:	bb18      	cbnz	r0, 1bf8e <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
   1bf46:	b91d      	cbnz	r5, 1bf50 <bt_gatt_attr_write_ccc+0x3c>
			return len;
   1bf48:	4640      	mov	r0, r8
}
   1bf4a:	46bd      	mov	sp, r7
   1bf4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bf50:	4651      	mov	r1, sl
   1bf52:	f7ff fc39 	bl	1b7c8 <find_ccc_cfg>
		if (!cfg) {
   1bf56:	4604      	mov	r4, r0
   1bf58:	b990      	cbnz	r0, 1bf80 <bt_gatt_attr_write_ccc+0x6c>
			LOG_WRN("No space to store CCC cfg");
   1bf5a:	466c      	mov	r4, sp
   1bf5c:	b088      	sub	sp, #32
   1bf5e:	466a      	mov	r2, sp
   1bf60:	4b23      	ldr	r3, [pc, #140]	; (1bff0 <bt_gatt_attr_write_ccc+0xdc>)
   1bf62:	6153      	str	r3, [r2, #20]
   1bf64:	4b23      	ldr	r3, [pc, #140]	; (1bff4 <bt_gatt_attr_write_ccc+0xe0>)
   1bf66:	6193      	str	r3, [r2, #24]
   1bf68:	2303      	movs	r3, #3
   1bf6a:	4823      	ldr	r0, [pc, #140]	; (1bff8 <bt_gatt_attr_write_ccc+0xe4>)
   1bf6c:	f842 3f10 	str.w	r3, [r2, #16]!
   1bf70:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bf74:	f00c f9b1 	bl	282da <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bf78:	f06f 0010 	mvn.w	r0, #16
   1bf7c:	46a5      	mov	sp, r4
   1bf7e:	e7e4      	b.n	1bf4a <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bf80:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1bf84:	3001      	adds	r0, #1
   1bf86:	f00c f8f7 	bl	28178 <bt_addr_le_copy>
		cfg->id = conn->id;
   1bf8a:	7a33      	ldrb	r3, [r6, #8]
   1bf8c:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1bf8e:	f8da 3010 	ldr.w	r3, [sl, #16]
   1bf92:	b9db      	cbnz	r3, 1bfcc <bt_gatt_attr_write_ccc+0xb8>
	value_changed = cfg->value != value;
   1bf94:	f8b4 b008 	ldrh.w	fp, [r4, #8]
	cfg->value = value;
   1bf98:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1bf9a:	f8ba 300a 	ldrh.w	r3, [sl, #10]
   1bf9e:	42ab      	cmp	r3, r5
   1bfa0:	d003      	beq.n	1bfaa <bt_gatt_attr_write_ccc+0x96>
		gatt_ccc_changed(attr, ccc);
   1bfa2:	4651      	mov	r1, sl
   1bfa4:	4648      	mov	r0, r9
   1bfa6:	f00c f8c4 	bl	28132 <gatt_ccc_changed>
	if (value_changed) {
   1bfaa:	45ab      	cmp	fp, r5
   1bfac:	d005      	beq.n	1bfba <bt_gatt_attr_write_ccc+0xa6>
		gatt_delayed_store_enqueue(conn->id, &conn->le.dst, DELAYED_STORE_CCC);
   1bfae:	7a30      	ldrb	r0, [r6, #8]
   1bfb0:	2200      	movs	r2, #0
   1bfb2:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1bfb6:	f7ff fc1b 	bl	1b7f0 <gatt_delayed_store_enqueue>
	if (!value) {
   1bfba:	2d00      	cmp	r5, #0
   1bfbc:	d1c4      	bne.n	1bf48 <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bfbe:	490f      	ldr	r1, [pc, #60]	; (1bffc <bt_gatt_attr_write_ccc+0xe8>)
   1bfc0:	1c60      	adds	r0, r4, #1
   1bfc2:	f00c f8d9 	bl	28178 <bt_addr_le_copy>
	cfg->id = 0U;
   1bfc6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bfc8:	8125      	strh	r5, [r4, #8]
}
   1bfca:	e7bd      	b.n	1bf48 <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1bfcc:	462a      	mov	r2, r5
   1bfce:	4649      	mov	r1, r9
   1bfd0:	4630      	mov	r0, r6
   1bfd2:	4798      	blx	r3
		if (write < 0) {
   1bfd4:	2800      	cmp	r0, #0
   1bfd6:	dbb8      	blt.n	1bf4a <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
   1bfd8:	3801      	subs	r0, #1
   1bfda:	2801      	cmp	r0, #1
   1bfdc:	d9da      	bls.n	1bf94 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1bfde:	f06f 000d 	mvn.w	r0, #13
   1bfe2:	e7b2      	b.n	1bf4a <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfe4:	f06f 0006 	mvn.w	r0, #6
   1bfe8:	e7af      	b.n	1bf4a <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1bfea:	f06f 000c 	mvn.w	r0, #12
   1bfee:	e7ac      	b.n	1bf4a <bt_gatt_attr_write_ccc+0x36>
   1bff0:	0002df7d 	.word	0x0002df7d
   1bff4:	0002e2e2 	.word	0x0002e2e2
   1bff8:	0002a848 	.word	0x0002a848
   1bffc:	0002c330 	.word	0x0002c330

0001c000 <sc_indicate.constprop.0>:
static void sc_indicate(uint16_t start, uint16_t end)
   1c000:	b508      	push	{r3, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c002:	4812      	ldr	r0, [pc, #72]	; (1c04c <sc_indicate.constprop.0+0x4c>)
   1c004:	2101      	movs	r1, #1
   1c006:	f00c f944 	bl	28292 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c00a:	f010 0f01 	tst.w	r0, #1
   1c00e:	4b10      	ldr	r3, [pc, #64]	; (1c050 <sc_indicate.constprop.0+0x50>)
   1c010:	d10a      	bne.n	1c028 <sc_indicate.constprop.0+0x28>
		gatt_sc.start = start;
   1c012:	4a10      	ldr	r2, [pc, #64]	; (1c054 <sc_indicate.constprop.0+0x54>)
   1c014:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c016:	480d      	ldr	r0, [pc, #52]	; (1c04c <sc_indicate.constprop.0+0x4c>)
   1c018:	f00c f959 	bl	282ce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1c01c:	0783      	lsls	r3, r0, #30
   1c01e:	d413      	bmi.n	1c048 <sc_indicate.constprop.0+0x48>
}
   1c020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c024:	f7ff be06 	b.w	1bc34 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
   1c028:	8b1a      	ldrh	r2, [r3, #24]
   1c02a:	8b58      	ldrh	r0, [r3, #26]
   1c02c:	2a01      	cmp	r2, #1
   1c02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c032:	d805      	bhi.n	1c040 <sc_indicate.constprop.0+0x40>
   1c034:	4290      	cmp	r0, r2
   1c036:	d007      	beq.n	1c048 <sc_indicate.constprop.0+0x48>
		*end = new_end;
   1c038:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c03c:	835a      	strh	r2, [r3, #26]
   1c03e:	e7ea      	b.n	1c016 <sc_indicate.constprop.0+0x16>
	if (*end < new_end) {
   1c040:	4290      	cmp	r0, r2
		*start = new_start;
   1c042:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1c044:	d0e7      	beq.n	1c016 <sc_indicate.constprop.0+0x16>
   1c046:	e7f7      	b.n	1c038 <sc_indicate.constprop.0+0x38>
}
   1c048:	bd08      	pop	{r3, pc}
   1c04a:	bf00      	nop
   1c04c:	200021f0 	.word	0x200021f0
   1c050:	200021a0 	.word	0x200021a0
   1c054:	ffff0001 	.word	0xffff0001

0001c058 <set_all_change_unaware>:
{
   1c058:	b510      	push	{r4, lr}
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c05a:	4c10      	ldr	r4, [pc, #64]	; (1c09c <set_all_change_unaware+0x44>)
   1c05c:	4910      	ldr	r1, [pc, #64]	; (1c0a0 <set_all_change_unaware+0x48>)
   1c05e:	4620      	mov	r0, r4
   1c060:	f00c f902 	bl	28268 <bt_addr_le_eq>
   1c064:	4601      	mov	r1, r0
   1c066:	b938      	cbnz	r0, 1c078 <set_all_change_unaware+0x20>
			set_change_aware_no_store(cfg, false);
   1c068:	1e60      	subs	r0, r4, #1
   1c06a:	f00c f9f0 	bl	2844e <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c06e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c072:	4621      	mov	r1, r4
   1c074:	f7ff fe88 	bl	1bd88 <bt_gatt_store_cf.isra.0>
		if (!bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c078:	4909      	ldr	r1, [pc, #36]	; (1c0a0 <set_all_change_unaware+0x48>)
   1c07a:	480a      	ldr	r0, [pc, #40]	; (1c0a4 <set_all_change_unaware+0x4c>)
   1c07c:	f00c f8f4 	bl	28268 <bt_addr_le_eq>
   1c080:	4601      	mov	r1, r0
   1c082:	b950      	cbnz	r0, 1c09a <set_all_change_unaware+0x42>
			set_change_aware_no_store(cfg, false);
   1c084:	4808      	ldr	r0, [pc, #32]	; (1c0a8 <set_all_change_unaware+0x50>)
   1c086:	f00c f9e2 	bl	2844e <set_change_aware_no_store>
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c08a:	4b08      	ldr	r3, [pc, #32]	; (1c0ac <set_all_change_unaware+0x54>)
}
   1c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			bt_gatt_store_cf(cfg->id, &cfg->peer);
   1c090:	7c18      	ldrb	r0, [r3, #16]
   1c092:	f103 0111 	add.w	r1, r3, #17
   1c096:	f7ff be77 	b.w	1bd88 <bt_gatt_store_cf.isra.0>
}
   1c09a:	bd10      	pop	{r4, pc}
   1c09c:	20003049 	.word	0x20003049
   1c0a0:	0002c330 	.word	0x0002c330
   1c0a4:	20003059 	.word	0x20003059
   1c0a8:	20003058 	.word	0x20003058
   1c0ac:	20003048 	.word	0x20003048

0001c0b0 <cf_write>:
{
   1c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c0b4:	af00      	add	r7, sp, #0
   1c0b6:	4698      	mov	r8, r3
   1c0b8:	8c3b      	ldrh	r3, [r7, #32]
	if (offset > sizeof(cfg->data)) {
   1c0ba:	2b01      	cmp	r3, #1
{
   1c0bc:	4606      	mov	r6, r0
   1c0be:	4691      	mov	r9, r2
	if (offset > sizeof(cfg->data)) {
   1c0c0:	d843      	bhi.n	1c14a <cf_write+0x9a>
	if (offset + len > sizeof(cfg->data)) {
   1c0c2:	4443      	add	r3, r8
   1c0c4:	2b01      	cmp	r3, #1
   1c0c6:	4645      	mov	r5, r8
   1c0c8:	dc42      	bgt.n	1c150 <cf_write+0xa0>
	cfg = find_cf_cfg(conn);
   1c0ca:	f7ff fb4f 	bl	1b76c <find_cf_cfg>
	if (!cfg) {
   1c0ce:	4604      	mov	r4, r0
   1c0d0:	b9c8      	cbnz	r0, 1c106 <cf_write+0x56>
		cfg = find_cf_cfg(NULL);
   1c0d2:	f7ff fb4b 	bl	1b76c <find_cf_cfg>
	if (!cfg) {
   1c0d6:	4604      	mov	r4, r0
   1c0d8:	b9a8      	cbnz	r0, 1c106 <cf_write+0x56>
		LOG_WRN("No space to store Client Supported Features");
   1c0da:	466c      	mov	r4, sp
   1c0dc:	b088      	sub	sp, #32
   1c0de:	466a      	mov	r2, sp
   1c0e0:	4b1e      	ldr	r3, [pc, #120]	; (1c15c <cf_write+0xac>)
   1c0e2:	6153      	str	r3, [r2, #20]
   1c0e4:	4b1e      	ldr	r3, [pc, #120]	; (1c160 <cf_write+0xb0>)
   1c0e6:	6193      	str	r3, [r2, #24]
   1c0e8:	2303      	movs	r3, #3
   1c0ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1c0ee:	481d      	ldr	r0, [pc, #116]	; (1c164 <cf_write+0xb4>)
   1c0f0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c0f4:	f00c f8f1 	bl	282da <z_log_msg_static_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1c0f8:	f06f 0510 	mvn.w	r5, #16
   1c0fc:	46a5      	mov	sp, r4
}
   1c0fe:	4628      	mov	r0, r5
   1c100:	46bd      	mov	sp, r7
   1c102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c106:	f1b8 0f00 	cmp.w	r8, #0
   1c10a:	d012      	beq.n	1c132 <cf_write+0x82>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c10c:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1c10e:	f899 2000 	ldrb.w	r2, [r9]
   1c112:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c114:	fa21 f003 	lsr.w	r0, r1, r3
   1c118:	07c0      	lsls	r0, r0, #31
   1c11a:	d503      	bpl.n	1c124 <cf_write+0x74>
		    !(value[i / 8] & BIT(i % 8))) {
   1c11c:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c120:	07c0      	lsls	r0, r0, #31
   1c122:	d518      	bpl.n	1c156 <cf_write+0xa6>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c124:	3301      	adds	r3, #1
   1c126:	2b03      	cmp	r3, #3
   1c128:	d1f4      	bne.n	1c114 <cf_write+0x64>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1c12a:	f002 0207 	and.w	r2, r2, #7
   1c12e:	4311      	orrs	r1, r2
   1c130:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c132:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1c136:	1c60      	adds	r0, r4, #1
   1c138:	f00c f81e 	bl	28178 <bt_addr_le_copy>
	cfg->id = conn->id;
   1c13c:	7a33      	ldrb	r3, [r6, #8]
   1c13e:	7023      	strb	r3, [r4, #0]
	set_change_aware(cfg, true);
   1c140:	2101      	movs	r1, #1
   1c142:	4620      	mov	r0, r4
   1c144:	f00c f993 	bl	2846e <set_change_aware>
	return len;
   1c148:	e7d9      	b.n	1c0fe <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c14a:	f06f 0506 	mvn.w	r5, #6
   1c14e:	e7d6      	b.n	1c0fe <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c150:	f06f 050c 	mvn.w	r5, #12
   1c154:	e7d3      	b.n	1c0fe <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c156:	f06f 0512 	mvn.w	r5, #18
   1c15a:	e7d0      	b.n	1c0fe <cf_write+0x4e>
   1c15c:	0002df9b 	.word	0x0002df9b
   1c160:	0002e324 	.word	0x0002e324
   1c164:	0002a848 	.word	0x0002a848

0001c168 <sc_indicate_rsp>:
{
   1c168:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c16a:	f06f 0102 	mvn.w	r1, #2
   1c16e:	4604      	mov	r4, r0
   1c170:	480e      	ldr	r0, [pc, #56]	; (1c1ac <sc_indicate_rsp+0x44>)
   1c172:	f00c f89d 	bl	282b0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c176:	480d      	ldr	r0, [pc, #52]	; (1c1ac <sc_indicate_rsp+0x44>)
   1c178:	f00c f8a9 	bl	282ce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c17c:	07c2      	lsls	r2, r0, #31
   1c17e:	d504      	bpl.n	1c18a <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c180:	480b      	ldr	r0, [pc, #44]	; (1c1b0 <sc_indicate_rsp+0x48>)
   1c182:	2200      	movs	r2, #0
   1c184:	2300      	movs	r3, #0
   1c186:	f007 fd77 	bl	23c78 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1c18a:	4620      	mov	r0, r4
   1c18c:	f00b ffa9 	bl	280e2 <bt_att_fixed_chan_only>
   1c190:	b158      	cbz	r0, 1c1aa <sc_indicate_rsp+0x42>
		cfg = find_cf_cfg(conn);
   1c192:	4620      	mov	r0, r4
   1c194:	f7ff faea 	bl	1b76c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c198:	b138      	cbz	r0, 1c1aa <sc_indicate_rsp+0x42>
   1c19a:	7a03      	ldrb	r3, [r0, #8]
   1c19c:	07db      	lsls	r3, r3, #31
   1c19e:	d504      	bpl.n	1c1aa <sc_indicate_rsp+0x42>
}
   1c1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			set_change_aware(cfg, true);
   1c1a4:	2101      	movs	r1, #1
   1c1a6:	f00c b962 	b.w	2846e <set_change_aware>
}
   1c1aa:	bd10      	pop	{r4, pc}
   1c1ac:	200021f0 	.word	0x200021f0
   1c1b0:	200021c0 	.word	0x200021c0

0001c1b4 <cf_set>:
{
   1c1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c1b8:	b085      	sub	sp, #20
   1c1ba:	4689      	mov	r9, r1
   1c1bc:	af00      	add	r7, sp, #0
   1c1be:	4616      	mov	r6, r2
   1c1c0:	4698      	mov	r8, r3
	if (!name) {
   1c1c2:	4604      	mov	r4, r0
   1c1c4:	b980      	cbnz	r0, 1c1e8 <cf_set+0x34>
		LOG_ERR("Insufficient number of arguments");
   1c1c6:	466c      	mov	r4, sp
   1c1c8:	b088      	sub	sp, #32
   1c1ca:	466a      	mov	r2, sp
   1c1cc:	4b60      	ldr	r3, [pc, #384]	; (1c350 <cf_set+0x19c>)
   1c1ce:	6153      	str	r3, [r2, #20]
   1c1d0:	4b60      	ldr	r3, [pc, #384]	; (1c354 <cf_set+0x1a0>)
   1c1d2:	6193      	str	r3, [r2, #24]
   1c1d4:	2303      	movs	r3, #3
   1c1d6:	f842 3f10 	str.w	r3, [r2, #16]!
   1c1da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			LOG_ERR("Invalid local identity %lu", next_id);
   1c1de:	485e      	ldr	r0, [pc, #376]	; (1c358 <cf_set+0x1a4>)
   1c1e0:	f00c f87b 	bl	282da <z_log_msg_static_create.constprop.0>
   1c1e4:	46a5      	mov	sp, r4
			return -EINVAL;
   1c1e6:	e019      	b.n	1c21c <cf_set+0x68>
	err = bt_settings_decode_key(name, &addr);
   1c1e8:	f107 0108 	add.w	r1, r7, #8
   1c1ec:	f00a fd7e 	bl	26cec <bt_settings_decode_key>
	if (err) {
   1c1f0:	4605      	mov	r5, r0
   1c1f2:	b1d0      	cbz	r0, 1c22a <cf_set+0x76>
		LOG_ERR("Unable to decode address %s", name);
   1c1f4:	466d      	mov	r5, sp
   1c1f6:	b08a      	sub	sp, #40	; 0x28
   1c1f8:	466a      	mov	r2, sp
   1c1fa:	4b58      	ldr	r3, [pc, #352]	; (1c35c <cf_set+0x1a8>)
   1c1fc:	6153      	str	r3, [r2, #20]
   1c1fe:	4b55      	ldr	r3, [pc, #340]	; (1c354 <cf_set+0x1a0>)
   1c200:	4855      	ldr	r0, [pc, #340]	; (1c358 <cf_set+0x1a4>)
   1c202:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c206:	f240 3301 	movw	r3, #769	; 0x301
   1c20a:	8413      	strh	r3, [r2, #32]
   1c20c:	4b54      	ldr	r3, [pc, #336]	; (1c360 <cf_set+0x1ac>)
   1c20e:	f842 3f10 	str.w	r3, [r2, #16]!
   1c212:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c216:	f00c f860 	bl	282da <z_log_msg_static_create.constprop.0>
   1c21a:	46ad      	mov	sp, r5
		return -EINVAL;
   1c21c:	f06f 0515 	mvn.w	r5, #21
}
   1c220:	4628      	mov	r0, r5
   1c222:	3714      	adds	r7, #20
   1c224:	46bd      	mov	sp, r7
   1c226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	settings_name_next(name, &next);
   1c22a:	1d39      	adds	r1, r7, #4
   1c22c:	4620      	mov	r0, r4
   1c22e:	f00a f8fd 	bl	2642c <settings_name_next>
	if (!next) {
   1c232:	6878      	ldr	r0, [r7, #4]
   1c234:	b190      	cbz	r0, 1c25c <cf_set+0xa8>
		unsigned long next_id = strtoul(next, NULL, 10);
   1c236:	220a      	movs	r2, #10
   1c238:	4629      	mov	r1, r5
   1c23a:	f00a fc02 	bl	26a42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1c23e:	b168      	cbz	r0, 1c25c <cf_set+0xa8>
			LOG_ERR("Invalid local identity %lu", next_id);
   1c240:	466c      	mov	r4, sp
   1c242:	b088      	sub	sp, #32
   1c244:	466a      	mov	r2, sp
   1c246:	4b47      	ldr	r3, [pc, #284]	; (1c364 <cf_set+0x1b0>)
   1c248:	6153      	str	r3, [r2, #20]
   1c24a:	4b42      	ldr	r3, [pc, #264]	; (1c354 <cf_set+0x1a0>)
   1c24c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c250:	2304      	movs	r3, #4
   1c252:	f842 3f10 	str.w	r3, [r2, #16]!
   1c256:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c25a:	e7c0      	b.n	1c1de <cf_set+0x2a>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1c25c:	f107 0108 	add.w	r1, r7, #8
   1c260:	2000      	movs	r0, #0
   1c262:	f7ff f9d7 	bl	1b614 <find_cf_cfg_by_addr>
	if (!cfg) {
   1c266:	4604      	mov	r4, r0
   1c268:	b9e8      	cbnz	r0, 1c2a6 <cf_set+0xf2>
		cfg = find_cf_cfg(NULL);
   1c26a:	f7ff fa7f 	bl	1b76c <find_cf_cfg>
		if (!cfg) {
   1c26e:	4604      	mov	r4, r0
   1c270:	b990      	cbnz	r0, 1c298 <cf_set+0xe4>
			LOG_ERR("Unable to restore CF: no cfg left");
   1c272:	466c      	mov	r4, sp
   1c274:	b088      	sub	sp, #32
   1c276:	466a      	mov	r2, sp
   1c278:	4b3b      	ldr	r3, [pc, #236]	; (1c368 <cf_set+0x1b4>)
   1c27a:	6153      	str	r3, [r2, #20]
   1c27c:	4b35      	ldr	r3, [pc, #212]	; (1c354 <cf_set+0x1a0>)
   1c27e:	6193      	str	r3, [r2, #24]
   1c280:	2303      	movs	r3, #3
   1c282:	f842 3f10 	str.w	r3, [r2, #16]!
   1c286:	4834      	ldr	r0, [pc, #208]	; (1c358 <cf_set+0x1a4>)
   1c288:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c28c:	f00c f825 	bl	282da <z_log_msg_static_create.constprop.0>
			return -ENOMEM;
   1c290:	f06f 050b 	mvn.w	r5, #11
   1c294:	46a5      	mov	sp, r4
   1c296:	e7c3      	b.n	1c220 <cf_set+0x6c>
		cfg->id = id;
   1c298:	2300      	movs	r3, #0
   1c29a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1c29e:	f107 0108 	add.w	r1, r7, #8
   1c2a2:	f00b ff69 	bl	28178 <bt_addr_le_copy>
	if (len_rd) {
   1c2a6:	f1b9 0f00 	cmp.w	r9, #0
   1c2aa:	d04c      	beq.n	1c346 <cf_set+0x192>
		len = read_cb(cb_arg, dst, sizeof(dst));
   1c2ac:	2202      	movs	r2, #2
   1c2ae:	4639      	mov	r1, r7
   1c2b0:	4640      	mov	r0, r8
   1c2b2:	47b0      	blx	r6
		if (len < 0) {
   1c2b4:	1e06      	subs	r6, r0, #0
   1c2b6:	da12      	bge.n	1c2de <cf_set+0x12a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1c2b8:	466c      	mov	r4, sp
   1c2ba:	b088      	sub	sp, #32
   1c2bc:	466a      	mov	r2, sp
   1c2be:	4b2b      	ldr	r3, [pc, #172]	; (1c36c <cf_set+0x1b8>)
   1c2c0:	6153      	str	r3, [r2, #20]
   1c2c2:	4b24      	ldr	r3, [pc, #144]	; (1c354 <cf_set+0x1a0>)
   1c2c4:	4824      	ldr	r0, [pc, #144]	; (1c358 <cf_set+0x1a4>)
   1c2c6:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1c2ca:	2304      	movs	r3, #4
   1c2cc:	f842 3f10 	str.w	r3, [r2, #16]!
   1c2d0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c2d4:	f00c f801 	bl	282da <z_log_msg_static_create.constprop.0>
			return len;
   1c2d8:	4635      	mov	r5, r6
   1c2da:	46a5      	mov	sp, r4
   1c2dc:	e7a0      	b.n	1c220 <cf_set+0x6c>
		memcpy(cfg->data, dst, sizeof(cfg->data));
   1c2de:	2201      	movs	r2, #1
   1c2e0:	4639      	mov	r1, r7
   1c2e2:	f104 0008 	add.w	r0, r4, #8
   1c2e6:	f00a fc81 	bl	26bec <memcpy>
		if (len != sizeof(dst)) {
   1c2ea:	2e02      	cmp	r6, #2
   1c2ec:	d014      	beq.n	1c318 <cf_set+0x164>
			LOG_WRN("Change-aware status not found in settings, "
   1c2ee:	466e      	mov	r6, sp
   1c2f0:	b088      	sub	sp, #32
   1c2f2:	466a      	mov	r2, sp
   1c2f4:	4b1e      	ldr	r3, [pc, #120]	; (1c370 <cf_set+0x1bc>)
   1c2f6:	6153      	str	r3, [r2, #20]
   1c2f8:	4b16      	ldr	r3, [pc, #88]	; (1c354 <cf_set+0x1a0>)
   1c2fa:	6193      	str	r3, [r2, #24]
   1c2fc:	2303      	movs	r3, #3
   1c2fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1c302:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1c306:	4814      	ldr	r0, [pc, #80]	; (1c358 <cf_set+0x1a4>)
   1c308:	f00b ffe7 	bl	282da <z_log_msg_static_create.constprop.0>
				set_change_aware(cfg, false);
   1c30c:	2100      	movs	r1, #0
   1c30e:	46b5      	mov	sp, r6
   1c310:	4620      	mov	r0, r4
   1c312:	f00c f8ac 	bl	2846e <set_change_aware>
   1c316:	e783      	b.n	1c220 <cf_set+0x6c>
			uint8_t change_aware = dst[sizeof(cfg->data)];
   1c318:	7879      	ldrb	r1, [r7, #1]
			if (change_aware & ~BIT(CF_CHANGE_AWARE)) {
   1c31a:	2901      	cmp	r1, #1
   1c31c:	d90d      	bls.n	1c33a <cf_set+0x186>
				LOG_WRN("Read back bad change-aware value: 0x%x, "
   1c31e:	466e      	mov	r6, sp
   1c320:	b088      	sub	sp, #32
   1c322:	466a      	mov	r2, sp
   1c324:	4b13      	ldr	r3, [pc, #76]	; (1c374 <cf_set+0x1c0>)
   1c326:	6153      	str	r3, [r2, #20]
   1c328:	4b0a      	ldr	r3, [pc, #40]	; (1c354 <cf_set+0x1a0>)
   1c32a:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1c32e:	2304      	movs	r3, #4
   1c330:	f842 3f10 	str.w	r3, [r2, #16]!
   1c334:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1c338:	e7e5      	b.n	1c306 <cf_set+0x152>
				set_change_aware_no_store(cfg, change_aware);
   1c33a:	f001 0101 	and.w	r1, r1, #1
   1c33e:	4620      	mov	r0, r4
   1c340:	f00c f885 	bl	2844e <set_change_aware_no_store>
   1c344:	e76c      	b.n	1c220 <cf_set+0x6c>
		clear_cf_cfg(cfg);
   1c346:	4620      	mov	r0, r4
   1c348:	f7ff fc92 	bl	1bc70 <clear_cf_cfg>
   1c34c:	e768      	b.n	1c220 <cf_set+0x6c>
   1c34e:	bf00      	nop
   1c350:	0002c3b5 	.word	0x0002c3b5
   1c354:	0002e25f 	.word	0x0002e25f
   1c358:	0002a848 	.word	0x0002a848
   1c35c:	0002de16 	.word	0x0002de16
   1c360:	01000004 	.word	0x01000004
   1c364:	0002de36 	.word	0x0002de36
   1c368:	0002dfcb 	.word	0x0002dfcb
   1c36c:	0002de7b 	.word	0x0002de7b
   1c370:	0002dff1 	.word	0x0002dff1
   1c374:	0002e049 	.word	0x0002e049

0001c378 <bt_gatt_init>:
{
   1c378:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c37a:	481e      	ldr	r0, [pc, #120]	; (1c3f4 <bt_gatt_init+0x7c>)
   1c37c:	2101      	movs	r1, #1
   1c37e:	f00b ff88 	bl	28292 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1c382:	07c3      	lsls	r3, r0, #31
   1c384:	d435      	bmi.n	1c3f2 <bt_gatt_init+0x7a>
   1c386:	2102      	movs	r1, #2
   1c388:	481a      	ldr	r0, [pc, #104]	; (1c3f4 <bt_gatt_init+0x7c>)
   1c38a:	f00b ff82 	bl	28292 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1c38e:	4008      	ands	r0, r1
   1c390:	d107      	bne.n	1c3a2 <bt_gatt_init+0x2a>
   1c392:	4919      	ldr	r1, [pc, #100]	; (1c3f8 <bt_gatt_init+0x80>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c394:	4a19      	ldr	r2, [pc, #100]	; (1c3fc <bt_gatt_init+0x84>)
   1c396:	880b      	ldrh	r3, [r1, #0]
   1c398:	4c19      	ldr	r4, [pc, #100]	; (1c400 <bt_gatt_init+0x88>)
   1c39a:	42a2      	cmp	r2, r4
   1c39c:	d323      	bcc.n	1c3e6 <bt_gatt_init+0x6e>
   1c39e:	b100      	cbz	r0, 1c3a2 <bt_gatt_init+0x2a>
   1c3a0:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1c3a2:	4b18      	ldr	r3, [pc, #96]	; (1c404 <bt_gatt_init+0x8c>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c3a4:	4918      	ldr	r1, [pc, #96]	; (1c408 <bt_gatt_init+0x90>)
   1c3a6:	4819      	ldr	r0, [pc, #100]	; (1c40c <bt_gatt_init+0x94>)
   1c3a8:	2200      	movs	r2, #0
	list->tail = NULL;
   1c3aa:	e9c3 2200 	strd	r2, r2, [r3]
   1c3ae:	f00d fd07 	bl	29dc0 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c3b2:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	4814      	ldr	r0, [pc, #80]	; (1c40c <bt_gatt_init+0x94>)
   1c3ba:	f7f9 fcbf 	bl	15d3c <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c3be:	4914      	ldr	r1, [pc, #80]	; (1c410 <bt_gatt_init+0x98>)
   1c3c0:	4814      	ldr	r0, [pc, #80]	; (1c414 <bt_gatt_init+0x9c>)
   1c3c2:	f00d fcfd 	bl	29dc0 <k_work_init_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c3c6:	2102      	movs	r1, #2
   1c3c8:	4813      	ldr	r0, [pc, #76]	; (1c418 <bt_gatt_init+0xa0>)
   1c3ca:	f00b ff62 	bl	28292 <atomic_or>
	k_work_init_delayable(&gatt_delayed_store.work, delayed_store);
   1c3ce:	4913      	ldr	r1, [pc, #76]	; (1c41c <bt_gatt_init+0xa4>)
   1c3d0:	4813      	ldr	r0, [pc, #76]	; (1c420 <bt_gatt_init+0xa8>)
   1c3d2:	f00d fcf5 	bl	29dc0 <k_work_init_delayable>
	bt_conn_auth_info_cb_register(&gatt_conn_auth_info_cb);
   1c3d6:	4813      	ldr	r0, [pc, #76]	; (1c424 <bt_gatt_init+0xac>)
   1c3d8:	f7fd fcde 	bl	19d98 <bt_conn_auth_info_cb_register>
}
   1c3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1c3e0:	4811      	ldr	r0, [pc, #68]	; (1c428 <bt_gatt_init+0xb0>)
   1c3e2:	f7fd bad5 	b.w	19990 <bt_conn_cb_register>
		last_static_handle += svc->attr_count;
   1c3e6:	6850      	ldr	r0, [r2, #4]
   1c3e8:	4403      	add	r3, r0
   1c3ea:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c3ec:	3208      	adds	r2, #8
   1c3ee:	2001      	movs	r0, #1
   1c3f0:	e7d3      	b.n	1c39a <bt_gatt_init+0x22>
}
   1c3f2:	bd10      	pop	{r4, pc}
   1c3f4:	20003068 	.word	0x20003068
   1c3f8:	200033ae 	.word	0x200033ae
   1c3fc:	0002a7a4 	.word	0x0002a7a4
   1c400:	0002a7e4 	.word	0x0002a7e4
   1c404:	2000306c 	.word	0x2000306c
   1c408:	000285b1 	.word	0x000285b1
   1c40c:	20002148 	.word	0x20002148
   1c410:	0001cae1 	.word	0x0001cae1
   1c414:	200021c0 	.word	0x200021c0
   1c418:	200021f0 	.word	0x200021f0
   1c41c:	000287d9 	.word	0x000287d9
   1c420:	200020f8 	.word	0x200020f8
   1c424:	200007fc 	.word	0x200007fc
   1c428:	200007e0 	.word	0x200007e0

0001c42c <bt_gatt_cb_register>:
	parent->next = child;
   1c42c:	2300      	movs	r3, #0
   1c42e:	6043      	str	r3, [r0, #4]
	return list->tail;
   1c430:	4b04      	ldr	r3, [pc, #16]	; (1c444 <bt_gatt_cb_register+0x18>)
   1c432:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   1c434:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   1c436:	b911      	cbnz	r1, 1c43e <bt_gatt_cb_register+0x12>
	list->head = node;
   1c438:	e9c3 2200 	strd	r2, r2, [r3]
}
   1c43c:	4770      	bx	lr
	parent->next = child;
   1c43e:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1c440:	605a      	str	r2, [r3, #4]
}
   1c442:	4770      	bx	lr
   1c444:	2000306c 	.word	0x2000306c

0001c448 <bt_gatt_attr_get_handle>:
{
   1c448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1c44c:	4603      	mov	r3, r0
   1c44e:	b148      	cbz	r0, 1c464 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1c450:	8a00      	ldrh	r0, [r0, #16]
   1c452:	b938      	cbnz	r0, 1c464 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c454:	4912      	ldr	r1, [pc, #72]	; (1c4a0 <bt_gatt_attr_get_handle+0x58>)
   1c456:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1c4a4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1c45a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c45c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c460:	4571      	cmp	r1, lr
   1c462:	d301      	bcc.n	1c468 <bt_gatt_attr_get_handle+0x20>
}
   1c464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c468:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1c46c:	42bb      	cmp	r3, r7
   1c46e:	d304      	bcc.n	1c47a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c470:	fb0c 7206 	mla	r2, ip, r6, r7
   1c474:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1c476:	4293      	cmp	r3, r2
   1c478:	d90e      	bls.n	1c498 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1c47a:	4434      	add	r4, r6
   1c47c:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c47e:	3108      	adds	r1, #8
   1c480:	4614      	mov	r4, r2
   1c482:	e7ed      	b.n	1c460 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1c484:	fb0c 7805 	mla	r8, ip, r5, r7
   1c488:	4543      	cmp	r3, r8
   1c48a:	d007      	beq.n	1c49c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c48c:	3501      	adds	r5, #1
   1c48e:	1962      	adds	r2, r4, r5
   1c490:	42b5      	cmp	r5, r6
   1c492:	b292      	uxth	r2, r2
   1c494:	d1f6      	bne.n	1c484 <bt_gatt_attr_get_handle+0x3c>
   1c496:	e7f2      	b.n	1c47e <bt_gatt_attr_get_handle+0x36>
   1c498:	2500      	movs	r5, #0
   1c49a:	e7f8      	b.n	1c48e <bt_gatt_attr_get_handle+0x46>
   1c49c:	4610      	mov	r0, r2
   1c49e:	e7e1      	b.n	1c464 <bt_gatt_attr_get_handle+0x1c>
   1c4a0:	0002a7a4 	.word	0x0002a7a4
   1c4a4:	0002a7e4 	.word	0x0002a7e4

0001c4a8 <bt_gatt_foreach_attr_type>:
{
   1c4a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4ac:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1c4b0:	9100      	str	r1, [sp, #0]
   1c4b2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1c4b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c4b8:	2d00      	cmp	r5, #0
   1c4ba:	bf08      	it	eq
   1c4bc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1c4be:	4b24      	ldr	r3, [pc, #144]	; (1c550 <bt_gatt_foreach_attr_type+0xa8>)
   1c4c0:	881b      	ldrh	r3, [r3, #0]
   1c4c2:	4283      	cmp	r3, r0
{
   1c4c4:	4607      	mov	r7, r0
   1c4c6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1c4c8:	d23c      	bcs.n	1c544 <bt_gatt_foreach_attr_type+0x9c>
}
   1c4ca:	b003      	add	sp, #12
   1c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1c4d0:	6873      	ldr	r3, [r6, #4]
   1c4d2:	4423      	add	r3, r4
   1c4d4:	42bb      	cmp	r3, r7
   1c4d6:	d232      	bcs.n	1c53e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1c4d8:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c4da:	3608      	adds	r6, #8
   1c4dc:	4b1d      	ldr	r3, [pc, #116]	; (1c554 <bt_gatt_foreach_attr_type+0xac>)
   1c4de:	429e      	cmp	r6, r3
   1c4e0:	d3f6      	bcc.n	1c4d0 <bt_gatt_foreach_attr_type+0x28>
   1c4e2:	e7f2      	b.n	1c4ca <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c4e4:	5889      	ldr	r1, [r1, r2]
   1c4e6:	9301      	str	r3, [sp, #4]
   1c4e8:	4640      	mov	r0, r8
   1c4ea:	f00a fc23 	bl	26d34 <bt_uuid_cmp>
   1c4ee:	9b01      	ldr	r3, [sp, #4]
   1c4f0:	b190      	cbz	r0, 1c518 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c4f2:	3401      	adds	r4, #1
   1c4f4:	f10a 0a01 	add.w	sl, sl, #1
   1c4f8:	b2a4      	uxth	r4, r4
   1c4fa:	6873      	ldr	r3, [r6, #4]
   1c4fc:	4553      	cmp	r3, sl
   1c4fe:	d9ec      	bls.n	1c4da <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1c500:	9b00      	ldr	r3, [sp, #0]
   1c502:	429c      	cmp	r4, r3
   1c504:	d8e1      	bhi.n	1c4ca <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1c506:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c508:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1c50a:	d3f2      	bcc.n	1c4f2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c50c:	fb0b f20a 	mul.w	r2, fp, sl
   1c510:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c512:	f1b8 0f00 	cmp.w	r8, #0
   1c516:	d1e5      	bne.n	1c4e4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1c518:	f1b9 0f00 	cmp.w	r9, #0
   1c51c:	d10b      	bne.n	1c536 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1c51e:	3d01      	subs	r5, #1
   1c520:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c522:	4618      	mov	r0, r3
   1c524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1c526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c528:	4621      	mov	r1, r4
   1c52a:	4798      	blx	r3
	if (!*num_matches) {
   1c52c:	2d00      	cmp	r5, #0
   1c52e:	d0cc      	beq.n	1c4ca <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c530:	2800      	cmp	r0, #0
   1c532:	d1de      	bne.n	1c4f2 <bt_gatt_foreach_attr_type+0x4a>
   1c534:	e7c9      	b.n	1c4ca <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1c536:	68da      	ldr	r2, [r3, #12]
   1c538:	4591      	cmp	r9, r2
   1c53a:	d1da      	bne.n	1c4f2 <bt_gatt_foreach_attr_type+0x4a>
   1c53c:	e7ef      	b.n	1c51e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c53e:	f04f 0a00 	mov.w	sl, #0
   1c542:	e7da      	b.n	1c4fa <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c544:	4e04      	ldr	r6, [pc, #16]	; (1c558 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1c546:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c548:	f04f 0b14 	mov.w	fp, #20
   1c54c:	e7c6      	b.n	1c4dc <bt_gatt_foreach_attr_type+0x34>
   1c54e:	bf00      	nop
   1c550:	200033ae 	.word	0x200033ae
   1c554:	0002a7e4 	.word	0x0002a7e4
   1c558:	0002a7a4 	.word	0x0002a7a4

0001c55c <db_hash_gen>:
{
   1c55c:	b590      	push	{r4, r7, lr}
   1c55e:	b0c9      	sub	sp, #292	; 0x124
   1c560:	af00      	add	r7, sp, #0
	uint8_t key[16] = {};
   1c562:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c564:	f107 0270 	add.w	r2, r7, #112	; 0x70
   1c568:	4639      	mov	r1, r7
   1c56a:	f107 0010 	add.w	r0, r7, #16
	uint8_t key[16] = {};
   1c56e:	e9c7 4400 	strd	r4, r4, [r7]
   1c572:	e9c7 4402 	strd	r4, r4, [r7, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c576:	f00a f988 	bl	2688a <tc_cmac_setup>
   1c57a:	b998      	cbnz	r0, 1c5a4 <db_hash_gen+0x48>
		LOG_ERR("Unable to setup AES CMAC");
   1c57c:	466c      	mov	r4, sp
   1c57e:	b088      	sub	sp, #32
   1c580:	466a      	mov	r2, sp
   1c582:	4b1a      	ldr	r3, [pc, #104]	; (1c5ec <db_hash_gen+0x90>)
		LOG_ERR("Unable to calculate hash");
   1c584:	6153      	str	r3, [r2, #20]
   1c586:	4b1a      	ldr	r3, [pc, #104]	; (1c5f0 <db_hash_gen+0x94>)
   1c588:	6193      	str	r3, [r2, #24]
   1c58a:	2303      	movs	r3, #3
   1c58c:	f842 3f10 	str.w	r3, [r2, #16]!
   1c590:	4818      	ldr	r0, [pc, #96]	; (1c5f4 <db_hash_gen+0x98>)
   1c592:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c596:	f00b fea0 	bl	282da <z_log_msg_static_create.constprop.0>
   1c59a:	46a5      	mov	sp, r4
}
   1c59c:	f507 7792 	add.w	r7, r7, #292	; 0x124
   1c5a0:	46bd      	mov	sp, r7
   1c5a2:	bd90      	pop	{r4, r7, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c5a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c5a8:	2001      	movs	r0, #1
   1c5aa:	4a13      	ldr	r2, [pc, #76]	; (1c5f8 <db_hash_gen+0x9c>)
   1c5ac:	f107 0310 	add.w	r3, r7, #16
   1c5b0:	f00b fff3 	bl	2859a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c5b4:	4811      	ldr	r0, [pc, #68]	; (1c5fc <db_hash_gen+0xa0>)
   1c5b6:	f107 0110 	add.w	r1, r7, #16
   1c5ba:	f00a f9fb 	bl	269b4 <tc_cmac_final>
   1c5be:	b920      	cbnz	r0, 1c5ca <db_hash_gen+0x6e>
		LOG_ERR("Unable to calculate hash");
   1c5c0:	466c      	mov	r4, sp
   1c5c2:	b088      	sub	sp, #32
   1c5c4:	466a      	mov	r2, sp
   1c5c6:	4b0e      	ldr	r3, [pc, #56]	; (1c600 <db_hash_gen+0xa4>)
   1c5c8:	e7dc      	b.n	1c584 <db_hash_gen+0x28>
   1c5ca:	4b0c      	ldr	r3, [pc, #48]	; (1c5fc <db_hash_gen+0xa0>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1c5cc:	4621      	mov	r1, r4
   1c5ce:	f103 0210 	add.w	r2, r3, #16
   1c5d2:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c5d4:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c5d6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1c5da:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1c5de:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c5e0:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1c5e2:	d1f6      	bne.n	1c5d2 <db_hash_gen+0x76>
   1c5e4:	4807      	ldr	r0, [pc, #28]	; (1c604 <db_hash_gen+0xa8>)
   1c5e6:	f00b fe54 	bl	28292 <atomic_or>
   1c5ea:	e7d7      	b.n	1c59c <db_hash_gen+0x40>
   1c5ec:	0002e09e 	.word	0x0002e09e
   1c5f0:	0002e34c 	.word	0x0002e34c
   1c5f4:	0002a848 	.word	0x0002a848
   1c5f8:	000281c3 	.word	0x000281c3
   1c5fc:	20002128 	.word	0x20002128
   1c600:	0002e0bb 	.word	0x0002e0bb
   1c604:	200021f0 	.word	0x200021f0

0001c608 <db_hash_read>:
{
   1c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c60a:	491c      	ldr	r1, [pc, #112]	; (1c67c <db_hash_read+0x74>)
{
   1c60c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1c610:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c612:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1c616:	4615      	mov	r5, r2
   1c618:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1c61a:	f00d fbf3 	bl	29e04 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c61e:	4818      	ldr	r0, [pc, #96]	; (1c680 <db_hash_read+0x78>)
   1c620:	f00b fe55 	bl	282ce <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1c624:	0701      	lsls	r1, r0, #28
   1c626:	d405      	bmi.n	1c634 <db_hash_read+0x2c>
		db_hash_gen();
   1c628:	f7ff ff98 	bl	1c55c <db_hash_gen>
			set_all_change_unaware();
   1c62c:	f7ff fd14 	bl	1c058 <set_all_change_unaware>
			db_hash_store();
   1c630:	f7ff fa6c 	bl	1bb0c <db_hash_store>
	cfg = find_cf_cfg(conn);
   1c634:	4620      	mov	r0, r4
   1c636:	f7ff f899 	bl	1b76c <find_cf_cfg>
	if (cfg &&
   1c63a:	b168      	cbz	r0, 1c658 <db_hash_read+0x50>
   1c63c:	7a03      	ldrb	r3, [r0, #8]
   1c63e:	07da      	lsls	r2, r3, #31
   1c640:	d50a      	bpl.n	1c658 <db_hash_read+0x50>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c642:	f100 040c 	add.w	r4, r0, #12
   1c646:	4620      	mov	r0, r4
   1c648:	f00b fe41 	bl	282ce <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1c64c:	07c3      	lsls	r3, r0, #31
   1c64e:	d403      	bmi.n	1c658 <db_hash_read+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c650:	2102      	movs	r1, #2
   1c652:	4620      	mov	r0, r4
   1c654:	f00b fe1d 	bl	28292 <atomic_or>
	if (offset > value_len) {
   1c658:	2e10      	cmp	r6, #16
   1c65a:	d80c      	bhi.n	1c676 <db_hash_read+0x6e>
	len = MIN(buf_len, value_len - offset);
   1c65c:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1c660:	4908      	ldr	r1, [pc, #32]	; (1c684 <db_hash_read+0x7c>)
	len = MIN(buf_len, value_len - offset);
   1c662:	42bc      	cmp	r4, r7
   1c664:	bfa8      	it	ge
   1c666:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c668:	4622      	mov	r2, r4
   1c66a:	4431      	add	r1, r6
   1c66c:	4628      	mov	r0, r5
   1c66e:	f00a fabd 	bl	26bec <memcpy>
}
   1c672:	4620      	mov	r0, r4
   1c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c676:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1c67a:	e7fa      	b.n	1c672 <db_hash_read+0x6a>
   1c67c:	20002178 	.word	0x20002178
   1c680:	200021f0 	.word	0x200021f0
   1c684:	20002128 	.word	0x20002128

0001c688 <do_db_hash>:
{
   1c688:	b510      	push	{r4, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c68a:	481a      	ldr	r0, [pc, #104]	; (1c6f4 <do_db_hash+0x6c>)
   1c68c:	f00b fe1f 	bl	282ce <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c690:	f3c0 00c0 	ubfx	r0, r0, #3, #1
	if (new_hash) {
   1c694:	f080 0401 	eor.w	r4, r0, #1
   1c698:	b908      	cbnz	r0, 1c69e <do_db_hash+0x16>
		db_hash_gen();
   1c69a:	f7ff ff5f 	bl	1c55c <db_hash_gen>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c69e:	4815      	ldr	r0, [pc, #84]	; (1c6f4 <do_db_hash+0x6c>)
   1c6a0:	f00b fe15 	bl	282ce <atomic_get>
   1c6a4:	4603      	mov	r3, r0
   1c6a6:	4813      	ldr	r0, [pc, #76]	; (1c6f4 <do_db_hash+0x6c>)
   1c6a8:	f00b fe11 	bl	282ce <atomic_get>
	if (!hash_loaded_from_settings) {
   1c6ac:	06da      	lsls	r2, r3, #27
   1c6ae:	d51f      	bpl.n	1c6f0 <do_db_hash+0x68>
	if (already_processed) {
   1c6b0:	0683      	lsls	r3, r0, #26
   1c6b2:	d506      	bpl.n	1c6c2 <do_db_hash+0x3a>
		if (new_hash) {
   1c6b4:	b1e4      	cbz	r4, 1c6f0 <do_db_hash+0x68>
		set_all_change_unaware();
   1c6b6:	f7ff fccf 	bl	1c058 <set_all_change_unaware>
}
   1c6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		db_hash_store();
   1c6be:	f7ff ba25 	b.w	1bb0c <db_hash_store>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c6c2:	2120      	movs	r1, #32
   1c6c4:	480b      	ldr	r0, [pc, #44]	; (1c6f4 <do_db_hash+0x6c>)
   1c6c6:	f00b fde4 	bl	28292 <atomic_or>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1c6ca:	490b      	ldr	r1, [pc, #44]	; (1c6f8 <do_db_hash+0x70>)
   1c6cc:	2210      	movs	r2, #16
   1c6ce:	1888      	adds	r0, r1, r2
   1c6d0:	f00a fa7c 	bl	26bcc <memcmp>
   1c6d4:	b948      	cbnz	r0, 1c6ea <do_db_hash+0x62>
			k_work_cancel_delayable(&gatt_sc.work);
   1c6d6:	4809      	ldr	r0, [pc, #36]	; (1c6fc <do_db_hash+0x74>)
   1c6d8:	f00d fb80 	bl	29ddc <k_work_cancel_delayable>
}
   1c6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c6e0:	4804      	ldr	r0, [pc, #16]	; (1c6f4 <do_db_hash+0x6c>)
   1c6e2:	f06f 0101 	mvn.w	r1, #1
   1c6e6:	f00b bde3 	b.w	282b0 <atomic_and>
		sc_indicate(0x0001, 0xffff);
   1c6ea:	f7ff fc89 	bl	1c000 <sc_indicate.constprop.0>
   1c6ee:	e7e2      	b.n	1c6b6 <do_db_hash+0x2e>
}
   1c6f0:	bd10      	pop	{r4, pc}
   1c6f2:	bf00      	nop
   1c6f4:	200021f0 	.word	0x200021f0
   1c6f8:	20002128 	.word	0x20002128
   1c6fc:	200021c0 	.word	0x200021c0

0001c700 <db_hash_commit>:
{
   1c700:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c702:	2110      	movs	r1, #16
   1c704:	4803      	ldr	r0, [pc, #12]	; (1c714 <db_hash_commit+0x14>)
   1c706:	f00b fdc4 	bl	28292 <atomic_or>
	do_db_hash();
   1c70a:	f7ff ffbd 	bl	1c688 <do_db_hash>
}
   1c70e:	2000      	movs	r0, #0
   1c710:	bd08      	pop	{r3, pc}
   1c712:	bf00      	nop
   1c714:	200021f0 	.word	0x200021f0

0001c718 <ccc_set_direct>:
{
   1c718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c71c:	b0b8      	sub	sp, #224	; 0xe0
   1c71e:	af00      	add	r7, sp, #0
   1c720:	460c      	mov	r4, r1
   1c722:	4690      	mov	r8, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c724:	4943      	ldr	r1, [pc, #268]	; (1c834 <ccc_set_direct+0x11c>)
   1c726:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
   1c72a:	463a      	mov	r2, r7
{
   1c72c:	4699      	mov	r9, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1c72e:	f009 fe59 	bl	263e4 <settings_name_steq>
   1c732:	b938      	cbnz	r0, 1c744 <ccc_set_direct+0x2c>
   1c734:	f7ff f89e 	bl	1b874 <ccc_set_direct.part.0>
   1c738:	4605      	mov	r5, r0
}
   1c73a:	4628      	mov	r0, r5
   1c73c:	37e0      	adds	r7, #224	; 0xe0
   1c73e:	46bd      	mov	sp, r7
   1c740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1c744:	683e      	ldr	r6, [r7, #0]
		settings_name_next(name, &next);
   1c746:	1d39      	adds	r1, r7, #4
   1c748:	4630      	mov	r0, r6
   1c74a:	f009 fe6f 	bl	2642c <settings_name_next>
		if (!name) {
   1c74e:	b99e      	cbnz	r6, 1c778 <ccc_set_direct+0x60>
			LOG_ERR("Insufficient number of arguments");
   1c750:	466c      	mov	r4, sp
   1c752:	b088      	sub	sp, #32
   1c754:	466a      	mov	r2, sp
   1c756:	4b38      	ldr	r3, [pc, #224]	; (1c838 <ccc_set_direct+0x120>)
   1c758:	6153      	str	r3, [r2, #20]
   1c75a:	4b38      	ldr	r3, [pc, #224]	; (1c83c <ccc_set_direct+0x124>)
   1c75c:	6193      	str	r3, [r2, #24]
   1c75e:	2303      	movs	r3, #3
   1c760:	f842 3f10 	str.w	r3, [r2, #16]!
   1c764:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
				LOG_ERR("Invalid local identity %lu", next_id);
   1c768:	4835      	ldr	r0, [pc, #212]	; (1c840 <ccc_set_direct+0x128>)
   1c76a:	f00b fdb6 	bl	282da <z_log_msg_static_create.constprop.0>
   1c76e:	46a5      	mov	sp, r4
			return -EINVAL;
   1c770:	f06f 0415 	mvn.w	r4, #21
   1c774:	4625      	mov	r5, r4
   1c776:	e7e0      	b.n	1c73a <ccc_set_direct+0x22>
		} else if (!next) {
   1c778:	6878      	ldr	r0, [r7, #4]
   1c77a:	b9d0      	cbnz	r0, 1c7b2 <ccc_set_direct+0x9a>
		err = bt_settings_decode_key(name, &addr);
   1c77c:	f107 0a08 	add.w	sl, r7, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c780:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1c782:	4651      	mov	r1, sl
   1c784:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1c786:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   1c788:	f00a fab0 	bl	26cec <bt_settings_decode_key>
		if (err) {
   1c78c:	4605      	mov	r5, r0
   1c78e:	b320      	cbz	r0, 1c7da <ccc_set_direct+0xc2>
			LOG_ERR("Unable to decode address %s", name);
   1c790:	466c      	mov	r4, sp
   1c792:	b08a      	sub	sp, #40	; 0x28
   1c794:	466a      	mov	r2, sp
   1c796:	4b2b      	ldr	r3, [pc, #172]	; (1c844 <ccc_set_direct+0x12c>)
   1c798:	6153      	str	r3, [r2, #20]
   1c79a:	4b28      	ldr	r3, [pc, #160]	; (1c83c <ccc_set_direct+0x124>)
   1c79c:	e9c2 3606 	strd	r3, r6, [r2, #24]
   1c7a0:	f240 3301 	movw	r3, #769	; 0x301
   1c7a4:	8413      	strh	r3, [r2, #32]
   1c7a6:	4b28      	ldr	r3, [pc, #160]	; (1c848 <ccc_set_direct+0x130>)
   1c7a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7ac:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c7b0:	e7da      	b.n	1c768 <ccc_set_direct+0x50>
			unsigned long next_id = strtoul(next, NULL, 10);
   1c7b2:	220a      	movs	r2, #10
   1c7b4:	2100      	movs	r1, #0
   1c7b6:	f00a f944 	bl	26a42 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1c7ba:	2800      	cmp	r0, #0
   1c7bc:	d0de      	beq.n	1c77c <ccc_set_direct+0x64>
				LOG_ERR("Invalid local identity %lu", next_id);
   1c7be:	466c      	mov	r4, sp
   1c7c0:	b088      	sub	sp, #32
   1c7c2:	466a      	mov	r2, sp
   1c7c4:	4b21      	ldr	r3, [pc, #132]	; (1c84c <ccc_set_direct+0x134>)
   1c7c6:	6153      	str	r3, [r2, #20]
   1c7c8:	4b1c      	ldr	r3, [pc, #112]	; (1c83c <ccc_set_direct+0x124>)
   1c7ca:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1c7ce:	2304      	movs	r3, #4
   1c7d0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c7d4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c7d8:	e7c6      	b.n	1c768 <ccc_set_direct+0x50>
		load.addr_with_id.addr = &addr;
   1c7da:	f8c7 a010 	str.w	sl, [r7, #16]
		if (len_rd) {
   1c7de:	b334      	cbz	r4, 1c82e <ccc_set_direct+0x116>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1c7e0:	22c0      	movs	r2, #192	; 0xc0
   1c7e2:	f107 0120 	add.w	r1, r7, #32
   1c7e6:	4648      	mov	r0, r9
   1c7e8:	47c0      	blx	r8
			if (len < 0) {
   1c7ea:	1e04      	subs	r4, r0, #0
   1c7ec:	da11      	bge.n	1c812 <ccc_set_direct+0xfa>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1c7ee:	466d      	mov	r5, sp
   1c7f0:	b088      	sub	sp, #32
   1c7f2:	466a      	mov	r2, sp
   1c7f4:	4b16      	ldr	r3, [pc, #88]	; (1c850 <ccc_set_direct+0x138>)
   1c7f6:	6153      	str	r3, [r2, #20]
   1c7f8:	4b10      	ldr	r3, [pc, #64]	; (1c83c <ccc_set_direct+0x124>)
   1c7fa:	4811      	ldr	r0, [pc, #68]	; (1c840 <ccc_set_direct+0x128>)
   1c7fc:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1c800:	2304      	movs	r3, #4
   1c802:	f842 3f10 	str.w	r3, [r2, #16]!
   1c806:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1c80a:	f00b fd66 	bl	282da <z_log_msg_static_create.constprop.0>
   1c80e:	46ad      	mov	sp, r5
				return len;
   1c810:	e7b0      	b.n	1c774 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
   1c812:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1c814:	f107 0320 	add.w	r3, r7, #32
			load.count = len / sizeof(*ccc_store);
   1c818:	e9c7 3406 	strd	r3, r4, [r7, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1c81c:	4a0d      	ldr	r2, [pc, #52]	; (1c854 <ccc_set_direct+0x13c>)
   1c81e:	f107 0310 	add.w	r3, r7, #16
   1c822:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c826:	2001      	movs	r0, #1
   1c828:	f00b feb7 	bl	2859a <bt_gatt_foreach_attr>
	return 0;
   1c82c:	e785      	b.n	1c73a <ccc_set_direct+0x22>
   1c82e:	4623      	mov	r3, r4
   1c830:	e7f2      	b.n	1c818 <ccc_set_direct+0x100>
   1c832:	bf00      	nop
   1c834:	0002e0d8 	.word	0x0002e0d8
   1c838:	0002c3b5 	.word	0x0002c3b5
   1c83c:	0002e27f 	.word	0x0002e27f
   1c840:	0002a848 	.word	0x0002a848
   1c844:	0002de16 	.word	0x0002de16
   1c848:	01000004 	.word	0x01000004
   1c84c:	0002de36 	.word	0x0002de36
   1c850:	0002de7b 	.word	0x0002de7b
   1c854:	0001b6e1 	.word	0x0001b6e1

0001c858 <bt_gatt_attr_next>:
{
   1c858:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1c85a:	2300      	movs	r3, #0
   1c85c:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1c85e:	f7ff fdf3 	bl	1c448 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1c862:	1c41      	adds	r1, r0, #1
   1c864:	b289      	uxth	r1, r1
   1c866:	4608      	mov	r0, r1
   1c868:	4a03      	ldr	r2, [pc, #12]	; (1c878 <bt_gatt_attr_next+0x20>)
   1c86a:	ab01      	add	r3, sp, #4
   1c86c:	f00b fe95 	bl	2859a <bt_gatt_foreach_attr>
}
   1c870:	9801      	ldr	r0, [sp, #4]
   1c872:	b003      	add	sp, #12
   1c874:	f85d fb04 	ldr.w	pc, [sp], #4
   1c878:	0002812d 	.word	0x0002812d

0001c87c <bt_gatt_find_by_uuid>:
{
   1c87c:	b530      	push	{r4, r5, lr}
   1c87e:	b087      	sub	sp, #28
	struct bt_gatt_attr *found = NULL;
   1c880:	2300      	movs	r3, #0
{
   1c882:	460c      	mov	r4, r1
   1c884:	4615      	mov	r5, r2
	struct bt_gatt_attr *found = NULL;
   1c886:	9305      	str	r3, [sp, #20]
	uint16_t start_handle = bt_gatt_attr_value_handle(attr);
   1c888:	f00b fe39 	bl	284fe <bt_gatt_attr_value_handle>
	uint16_t end_handle = start_handle && attr_count ?
   1c88c:	b178      	cbz	r0, 1c8ae <bt_gatt_find_by_uuid+0x32>
   1c88e:	b174      	cbz	r4, 1c8ae <bt_gatt_find_by_uuid+0x32>
   1c890:	1901      	adds	r1, r0, r4
   1c892:	b289      	uxth	r1, r1
	bt_gatt_foreach_attr_type(start_handle, end_handle, uuid, NULL, 1,
   1c894:	ab05      	add	r3, sp, #20
   1c896:	9302      	str	r3, [sp, #8]
   1c898:	4b06      	ldr	r3, [pc, #24]	; (1c8b4 <bt_gatt_find_by_uuid+0x38>)
   1c89a:	9301      	str	r3, [sp, #4]
   1c89c:	2301      	movs	r3, #1
   1c89e:	9300      	str	r3, [sp, #0]
   1c8a0:	462a      	mov	r2, r5
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	f7ff fe00 	bl	1c4a8 <bt_gatt_foreach_attr_type>
}
   1c8a8:	9805      	ldr	r0, [sp, #20]
   1c8aa:	b007      	add	sp, #28
   1c8ac:	bd30      	pop	{r4, r5, pc}
	uint16_t end_handle = start_handle && attr_count ?
   1c8ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c8b2:	e7ef      	b.n	1c894 <bt_gatt_find_by_uuid+0x18>
   1c8b4:	0002812d 	.word	0x0002812d

0001c8b8 <gatt_indicate>:
{
   1c8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8bc:	4615      	mov	r5, r2
   1c8be:	af00      	add	r7, sp, #0
   1c8c0:	468a      	mov	sl, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c8c2:	2294      	movs	r2, #148	; 0x94
   1c8c4:	6869      	ldr	r1, [r5, #4]
{
   1c8c6:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1c8c8:	f00b fe8f 	bl	285ea <bt_gatt_check_perm>
   1c8cc:	4681      	mov	r9, r0
   1c8ce:	b1a8      	cbz	r0, 1c8fc <gatt_indicate+0x44>
		LOG_WRN("Link is not encrypted");
   1c8d0:	466c      	mov	r4, sp
   1c8d2:	b088      	sub	sp, #32
   1c8d4:	466a      	mov	r2, sp
   1c8d6:	4b40      	ldr	r3, [pc, #256]	; (1c9d8 <gatt_indicate+0x120>)
   1c8d8:	6153      	str	r3, [r2, #20]
   1c8da:	4b40      	ldr	r3, [pc, #256]	; (1c9dc <gatt_indicate+0x124>)
   1c8dc:	6193      	str	r3, [r2, #24]
   1c8de:	2303      	movs	r3, #3
   1c8e0:	f842 3f10 	str.w	r3, [r2, #16]!
   1c8e4:	483e      	ldr	r0, [pc, #248]	; (1c9e0 <gatt_indicate+0x128>)
   1c8e6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c8ea:	f00b fcf6 	bl	282da <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1c8ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1c8f2:	46a5      	mov	sp, r4
}
   1c8f4:	4628      	mov	r0, r5
   1c8f6:	46bd      	mov	sp, r7
   1c8f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1c8fc:	6869      	ldr	r1, [r5, #4]
   1c8fe:	2202      	movs	r2, #2
   1c900:	4630      	mov	r0, r6
   1c902:	f00b feac 	bl	2865e <bt_gatt_is_subscribed>
   1c906:	b990      	cbnz	r0, 1c92e <gatt_indicate+0x76>
			LOG_WRN("Device is not subscribed to characteristic");
   1c908:	466c      	mov	r4, sp
   1c90a:	b088      	sub	sp, #32
   1c90c:	466a      	mov	r2, sp
   1c90e:	4b35      	ldr	r3, [pc, #212]	; (1c9e4 <gatt_indicate+0x12c>)
   1c910:	6153      	str	r3, [r2, #20]
   1c912:	4b32      	ldr	r3, [pc, #200]	; (1c9dc <gatt_indicate+0x124>)
   1c914:	6193      	str	r3, [r2, #24]
   1c916:	2303      	movs	r3, #3
   1c918:	f842 3f10 	str.w	r3, [r2, #16]!
   1c91c:	4830      	ldr	r0, [pc, #192]	; (1c9e0 <gatt_indicate+0x128>)
   1c91e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c922:	f00b fcda 	bl	282da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1c926:	f06f 0515 	mvn.w	r5, #21
   1c92a:	46a5      	mov	sp, r4
   1c92c:	e7e2      	b.n	1c8f4 <gatt_indicate+0x3c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c92e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c932:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c934:	f8b5 8014 	ldrh.w	r8, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c938:	f7fe fd4e 	bl	1b3d8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c93c:	f108 0802 	add.w	r8, r8, #2
	if (!req) {
   1c940:	4604      	mov	r4, r0
   1c942:	b308      	cbz	r0, 1c988 <gatt_indicate+0xd0>
	req->func = func;
   1c944:	4b28      	ldr	r3, [pc, #160]	; (1c9e8 <gatt_indicate+0x130>)
	req->len = len;
   1c946:	f8c0 8014 	str.w	r8, [r0, #20]
	req->att_op = op;
   1c94a:	211d      	movs	r1, #29
   1c94c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1c94e:	f8c0 900c 	str.w	r9, [r0, #12]
	req->func = func;
   1c952:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c954:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c956:	4642      	mov	r2, r8
   1c958:	4630      	mov	r0, r6
   1c95a:	f7fe f953 	bl	1ac04 <bt_att_create_pdu>
	if (!buf) {
   1c95e:	4680      	mov	r8, r0
   1c960:	b9a8      	cbnz	r0, 1c98e <gatt_indicate+0xd6>
		LOG_WRN("No buffer available to send indication");
   1c962:	466d      	mov	r5, sp
   1c964:	b088      	sub	sp, #32
   1c966:	466a      	mov	r2, sp
   1c968:	4b20      	ldr	r3, [pc, #128]	; (1c9ec <gatt_indicate+0x134>)
   1c96a:	6153      	str	r3, [r2, #20]
   1c96c:	4b1b      	ldr	r3, [pc, #108]	; (1c9dc <gatt_indicate+0x124>)
   1c96e:	6193      	str	r3, [r2, #24]
   1c970:	2303      	movs	r3, #3
   1c972:	481b      	ldr	r0, [pc, #108]	; (1c9e0 <gatt_indicate+0x128>)
   1c974:	f842 3f10 	str.w	r3, [r2, #16]!
   1c978:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1c97c:	f00b fcad 	bl	282da <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1c980:	4620      	mov	r0, r4
   1c982:	46ad      	mov	sp, r5
   1c984:	f7fe fd4a 	bl	1b41c <bt_att_req_free>
		return -ENOMEM;
   1c988:	f06f 050b 	mvn.w	r5, #11
   1c98c:	e7b2      	b.n	1c8f4 <gatt_indicate+0x3c>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1c98e:	2301      	movs	r3, #1
   1c990:	464a      	mov	r2, r9
   1c992:	4649      	mov	r1, r9
	return net_buf_simple_add(&buf->b, len);
   1c994:	f108 0b0c 	add.w	fp, r8, #12
   1c998:	f00b fbc1 	bl	2811e <bt_att_set_tx_meta_data>
   1c99c:	2102      	movs	r1, #2
   1c99e:	4658      	mov	r0, fp
   1c9a0:	f00c fb92 	bl	290c8 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c9a4:	4681      	mov	r9, r0
   1c9a6:	4658      	mov	r0, fp
   1c9a8:	f829 ab02 	strh.w	sl, [r9], #2
   1c9ac:	8aa9      	ldrh	r1, [r5, #20]
   1c9ae:	f00c fb8b 	bl	290c8 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1c9b2:	8aaa      	ldrh	r2, [r5, #20]
   1c9b4:	6929      	ldr	r1, [r5, #16]
   1c9b6:	4648      	mov	r0, r9
   1c9b8:	f00a f918 	bl	26bec <memcpy>
	req->buf = buf;
   1c9bc:	f8c4 8008 	str.w	r8, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c9c0:	4621      	mov	r1, r4
   1c9c2:	4630      	mov	r0, r6
   1c9c4:	f00b fb78 	bl	280b8 <bt_att_req_send>
	if (err) {
   1c9c8:	4605      	mov	r5, r0
   1c9ca:	2800      	cmp	r0, #0
   1c9cc:	d092      	beq.n	1c8f4 <gatt_indicate+0x3c>
		bt_att_req_free(req);
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	f7fe fd24 	bl	1b41c <bt_att_req_free>
   1c9d4:	e78e      	b.n	1c8f4 <gatt_indicate+0x3c>
   1c9d6:	bf00      	nop
   1c9d8:	0002e0df 	.word	0x0002e0df
   1c9dc:	0002e2ca 	.word	0x0002e2ca
   1c9e0:	0002a848 	.word	0x0002a848
   1c9e4:	0002e0f9 	.word	0x0002e0f9
   1c9e8:	00028147 	.word	0x00028147
   1c9ec:	0002e128 	.word	0x0002e128

0001c9f0 <bt_gatt_indicate>:
{
   1c9f0:	b530      	push	{r4, r5, lr}
   1c9f2:	4604      	mov	r4, r0
   1c9f4:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c9f6:	4837      	ldr	r0, [pc, #220]	; (1cad4 <bt_gatt_indicate+0xe4>)
   1c9f8:	f00b fc69 	bl	282ce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c9fc:	0742      	lsls	r2, r0, #29
{
   1c9fe:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1ca00:	d561      	bpl.n	1cac6 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1ca02:	b114      	cbz	r4, 1ca0a <bt_gatt_indicate+0x1a>
   1ca04:	7b63      	ldrb	r3, [r4, #13]
   1ca06:	2b07      	cmp	r3, #7
   1ca08:	d160      	bne.n	1cacc <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   1ca0a:	6868      	ldr	r0, [r5, #4]
   1ca0c:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ca0e:	f7ff fd1b 	bl	1c448 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1ca12:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1ca14:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1ca18:	b33a      	cbz	r2, 1ca6a <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca1a:	a905      	add	r1, sp, #20
   1ca1c:	9102      	str	r1, [sp, #8]
   1ca1e:	492e      	ldr	r1, [pc, #184]	; (1cad8 <bt_gatt_indicate+0xe8>)
   1ca20:	9101      	str	r1, [sp, #4]
   1ca22:	2101      	movs	r1, #1
	found->attr = NULL;
   1ca24:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca26:	9100      	str	r1, [sp, #0]
   1ca28:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1ca2c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1ca2e:	f7ff fd3b 	bl	1c4a8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1ca32:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1ca34:	b91b      	cbnz	r3, 1ca3e <bt_gatt_indicate+0x4e>
			return -ENOENT;
   1ca36:	f06f 0001 	mvn.w	r0, #1
}
   1ca3a:	b00b      	add	sp, #44	; 0x2c
   1ca3c:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1ca3e:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1ca40:	9b05      	ldr	r3, [sp, #20]
   1ca42:	6818      	ldr	r0, [r3, #0]
   1ca44:	2300      	movs	r3, #0
   1ca46:	f88d 3010 	strb.w	r3, [sp, #16]
   1ca4a:	a904      	add	r1, sp, #16
   1ca4c:	f642 0303 	movw	r3, #10243	; 0x2803
   1ca50:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ca54:	f00a f96e 	bl	26d34 <bt_uuid_cmp>
   1ca58:	b970      	cbnz	r0, 1ca78 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1ca5a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1ca5c:	68c3      	ldr	r3, [r0, #12]
   1ca5e:	799b      	ldrb	r3, [r3, #6]
   1ca60:	069b      	lsls	r3, r3, #26
   1ca62:	d405      	bmi.n	1ca70 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1ca64:	f06f 0015 	mvn.w	r0, #21
   1ca68:	e7e7      	b.n	1ca3a <bt_gatt_indicate+0x4a>
		if (!data.handle) {
   1ca6a:	2800      	cmp	r0, #0
   1ca6c:	d1e8      	bne.n	1ca40 <bt_gatt_indicate+0x50>
   1ca6e:	e7e2      	b.n	1ca36 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1ca70:	f00b fd45 	bl	284fe <bt_gatt_attr_value_handle>
   1ca74:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1ca78:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1ca7c:	b13c      	cbz	r4, 1ca8e <bt_gatt_indicate+0x9e>
		params->_ref = 1;
   1ca7e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1ca80:	4601      	mov	r1, r0
		params->_ref = 1;
   1ca82:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1ca84:	462a      	mov	r2, r5
   1ca86:	4620      	mov	r0, r4
   1ca88:	f7ff ff16 	bl	1c8b8 <gatt_indicate>
   1ca8c:	e7d5      	b.n	1ca3a <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
   1ca8e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ca92:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1ca94:	2302      	movs	r3, #2
   1ca96:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ca9a:	f642 1302 	movw	r3, #10498	; 0x2902
   1ca9e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1caa2:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1caa4:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1caa6:	9302      	str	r3, [sp, #8]
   1caa8:	4b0c      	ldr	r3, [pc, #48]	; (1cadc <bt_gatt_indicate+0xec>)
   1caaa:	9301      	str	r3, [sp, #4]
   1caac:	2301      	movs	r3, #1
   1caae:	9300      	str	r3, [sp, #0]
   1cab0:	aa04      	add	r2, sp, #16
   1cab2:	4623      	mov	r3, r4
   1cab4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1cab8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1caba:	f88d 4010 	strb.w	r4, [sp, #16]
   1cabe:	f7ff fcf3 	bl	1c4a8 <bt_gatt_foreach_attr_type>
	return data.err;
   1cac2:	9807      	ldr	r0, [sp, #28]
   1cac4:	e7b9      	b.n	1ca3a <bt_gatt_indicate+0x4a>
		return -EAGAIN;
   1cac6:	f06f 000a 	mvn.w	r0, #10
   1caca:	e7b6      	b.n	1ca3a <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
   1cacc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cad0:	e7b3      	b.n	1ca3a <bt_gatt_indicate+0x4a>
   1cad2:	bf00      	nop
   1cad4:	20000464 	.word	0x20000464
   1cad8:	0002816d 	.word	0x0002816d
   1cadc:	0001ce45 	.word	0x0001ce45

0001cae0 <sc_process>:
{
   1cae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1cae2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1cae6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1cae8:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1caec:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1caee:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1caf2:	f06f 0101 	mvn.w	r1, #1
   1caf6:	4628      	mov	r0, r5
   1caf8:	f00b fbda 	bl	282b0 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1cafc:	4b0d      	ldr	r3, [pc, #52]	; (1cb34 <sc_process+0x54>)
   1cafe:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1cb02:	4b0d      	ldr	r3, [pc, #52]	; (1cb38 <sc_process+0x58>)
   1cb04:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1cb08:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1cb0a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1cb0c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1cb10:	2304      	movs	r3, #4
	sc->start = 0U;
   1cb12:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1cb16:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1cb1a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1cb1e:	4631      	mov	r1, r6
   1cb20:	f7ff ff66 	bl	1c9f0 <bt_gatt_indicate>
   1cb24:	b918      	cbnz	r0, 1cb2e <sc_process+0x4e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1cb26:	2102      	movs	r1, #2
   1cb28:	4628      	mov	r0, r5
   1cb2a:	f00b fbb2 	bl	28292 <atomic_or>
}
   1cb2e:	b002      	add	sp, #8
   1cb30:	bd70      	pop	{r4, r5, r6, pc}
   1cb32:	bf00      	nop
   1cb34:	0002b17c 	.word	0x0002b17c
   1cb38:	0001c169 	.word	0x0001c169

0001cb3c <update_ccc>:
{
   1cb3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cb40:	b083      	sub	sp, #12
	struct bt_conn *conn = data->conn;
   1cb42:	6814      	ldr	r4, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb44:	4b3d      	ldr	r3, [pc, #244]	; (1cc3c <update_ccc+0x100>)
{
   1cb46:	4690      	mov	r8, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb48:	6882      	ldr	r2, [r0, #8]
   1cb4a:	429a      	cmp	r2, r3
{
   1cb4c:	af00      	add	r7, sp, #0
   1cb4e:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1cb50:	d134      	bne.n	1cbbc <update_ccc+0x80>
	ccc = attr->user_data;
   1cb52:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1cb54:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cb56:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1cb58:	b383      	cbz	r3, 1cbbc <update_ccc+0x80>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cb5a:	7831      	ldrb	r1, [r6, #0]
   1cb5c:	4620      	mov	r0, r4
   1cb5e:	f00a fd69 	bl	27634 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1cb62:	b358      	cbz	r0, 1cbbc <update_ccc+0x80>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1cb64:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1cb68:	4629      	mov	r1, r5
   1cb6a:	4620      	mov	r0, r4
   1cb6c:	f00b fd3d 	bl	285ea <bt_gatt_check_perm>
		if (err) {
   1cb70:	b348      	cbz	r0, 1cbc6 <update_ccc+0x8a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1cb72:	2803      	cmp	r0, #3
   1cb74:	d111      	bne.n	1cb9a <update_ccc+0x5e>
				LOG_WRN("CCC %p not writable", attr);
   1cb76:	466c      	mov	r4, sp
   1cb78:	b088      	sub	sp, #32
   1cb7a:	466a      	mov	r2, sp
   1cb7c:	4b30      	ldr	r3, [pc, #192]	; (1cc40 <update_ccc+0x104>)
   1cb7e:	6153      	str	r3, [r2, #20]
   1cb80:	4b30      	ldr	r3, [pc, #192]	; (1cc44 <update_ccc+0x108>)
   1cb82:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1cb86:	2304      	movs	r3, #4
   1cb88:	f842 3f10 	str.w	r3, [r2, #16]!
   1cb8c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("SC restore indication failed");
   1cb90:	482d      	ldr	r0, [pc, #180]	; (1cc48 <update_ccc+0x10c>)
   1cb92:	f00b fba2 	bl	282da <z_log_msg_static_create.constprop.0>
   1cb96:	46a5      	mov	sp, r4
   1cb98:	e010      	b.n	1cbbc <update_ccc+0x80>
			sec = BT_SECURITY_L2;
   1cb9a:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1cb9c:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1cb9e:	bf0c      	ite	eq
   1cba0:	f04f 0903 	moveq.w	r9, #3
   1cba4:	f04f 0902 	movne.w	r9, #2
			    bt_conn_get_security(conn) < sec) {
   1cba8:	f00a fd42 	bl	27630 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1cbac:	4581      	cmp	r9, r0
   1cbae:	d90a      	bls.n	1cbc6 <update_ccc+0x8a>
				if (data->sec < sec) {
   1cbb0:	f898 3004 	ldrb.w	r3, [r8, #4]
   1cbb4:	454b      	cmp	r3, r9
   1cbb6:	d201      	bcs.n	1cbbc <update_ccc+0x80>
					data->sec = sec;
   1cbb8:	f888 9004 	strb.w	r9, [r8, #4]
}
   1cbbc:	2001      	movs	r0, #1
   1cbbe:	370c      	adds	r7, #12
   1cbc0:	46bd      	mov	sp, r7
   1cbc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		gatt_ccc_changed(attr, ccc);
   1cbc6:	4631      	mov	r1, r6
   1cbc8:	4628      	mov	r0, r5
   1cbca:	f00b fab2 	bl	28132 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1cbce:	4b1f      	ldr	r3, [pc, #124]	; (1cc4c <update_ccc+0x110>)
   1cbd0:	429e      	cmp	r6, r3
   1cbd2:	d1f3      	bne.n	1cbbc <update_ccc+0x80>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1cbd4:	7a20      	ldrb	r0, [r4, #8]
   1cbd6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1cbda:	f7fe fd5f 	bl	1b69c <find_sc_cfg>
	if (!cfg) {
   1cbde:	2800      	cmp	r0, #0
   1cbe0:	d0ec      	beq.n	1cbbc <update_ccc+0x80>
	if (!(cfg->data.start || cfg->data.end)) {
   1cbe2:	8902      	ldrh	r2, [r0, #8]
   1cbe4:	8943      	ldrh	r3, [r0, #10]
   1cbe6:	ea52 0103 	orrs.w	r1, r2, r3
   1cbea:	d0e7      	beq.n	1cbbc <update_ccc+0x80>
	index = bt_conn_index(conn);
   1cbec:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1cbee:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1cbf0:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1cbf2:	f7fc fdcb 	bl	1978c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cbf6:	4916      	ldr	r1, [pc, #88]	; (1cc50 <update_ccc+0x114>)
   1cbf8:	4a16      	ldr	r2, [pc, #88]	; (1cc54 <update_ccc+0x118>)
   1cbfa:	2318      	movs	r3, #24
   1cbfc:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc00:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cc02:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1cc04:	4a14      	ldr	r2, [pc, #80]	; (1cc58 <update_ccc+0x11c>)
   1cc06:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1cc0c:	1d3a      	adds	r2, r7, #4
   1cc0e:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1cc14:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc16:	4620      	mov	r0, r4
	sc_restore_params[index].len = sizeof(sc_range);
   1cc18:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cc1a:	f7ff fee9 	bl	1c9f0 <bt_gatt_indicate>
   1cc1e:	2800      	cmp	r0, #0
   1cc20:	d0cc      	beq.n	1cbbc <update_ccc+0x80>
		LOG_ERR("SC restore indication failed");
   1cc22:	466c      	mov	r4, sp
   1cc24:	b088      	sub	sp, #32
   1cc26:	466a      	mov	r2, sp
   1cc28:	4b0c      	ldr	r3, [pc, #48]	; (1cc5c <update_ccc+0x120>)
   1cc2a:	6153      	str	r3, [r2, #20]
   1cc2c:	4b0c      	ldr	r3, [pc, #48]	; (1cc60 <update_ccc+0x124>)
   1cc2e:	6193      	str	r3, [r2, #24]
   1cc30:	2303      	movs	r3, #3
   1cc32:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1cc3a:	e7a9      	b.n	1cb90 <update_ccc+0x54>
   1cc3c:	0001bf15 	.word	0x0001bf15
   1cc40:	0002e153 	.word	0x0002e153
   1cc44:	0002e2a1 	.word	0x0002e2a1
   1cc48:	0002a848 	.word	0x0002a848
   1cc4c:	20000824 	.word	0x20000824
   1cc50:	20003030 	.word	0x20003030
   1cc54:	0002b17c 	.word	0x0002b17c
   1cc58:	0002848b 	.word	0x0002848b
   1cc5c:	0002e16b 	.word	0x0002e16b
   1cc60:	0002e296 	.word	0x0002e296

0001cc64 <gatt_notify>:
{
   1cc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cc68:	4614      	mov	r4, r2
   1cc6a:	af00      	add	r7, sp, #0
   1cc6c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cc6e:	2294      	movs	r2, #148	; 0x94
   1cc70:	6861      	ldr	r1, [r4, #4]
{
   1cc72:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cc74:	f00b fcb9 	bl	285ea <bt_gatt_check_perm>
   1cc78:	b1a0      	cbz	r0, 1cca4 <gatt_notify+0x40>
		LOG_WRN("Link is not encrypted");
   1cc7a:	466c      	mov	r4, sp
   1cc7c:	b088      	sub	sp, #32
   1cc7e:	466a      	mov	r2, sp
   1cc80:	4b31      	ldr	r3, [pc, #196]	; (1cd48 <gatt_notify+0xe4>)
   1cc82:	6153      	str	r3, [r2, #20]
   1cc84:	4b31      	ldr	r3, [pc, #196]	; (1cd4c <gatt_notify+0xe8>)
   1cc86:	6193      	str	r3, [r2, #24]
   1cc88:	2303      	movs	r3, #3
   1cc8a:	4831      	ldr	r0, [pc, #196]	; (1cd50 <gatt_notify+0xec>)
   1cc8c:	f842 3f10 	str.w	r3, [r2, #16]!
   1cc90:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cc94:	f00b fb21 	bl	282da <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1cc98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cc9c:	46a5      	mov	sp, r4
}
   1cc9e:	46bd      	mov	sp, r7
   1cca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1cca4:	6861      	ldr	r1, [r4, #4]
   1cca6:	2201      	movs	r2, #1
   1cca8:	4630      	mov	r0, r6
   1ccaa:	f00b fcd8 	bl	2865e <bt_gatt_is_subscribed>
   1ccae:	b990      	cbnz	r0, 1ccd6 <gatt_notify+0x72>
			LOG_WRN("Device is not subscribed to characteristic");
   1ccb0:	466c      	mov	r4, sp
   1ccb2:	b088      	sub	sp, #32
   1ccb4:	466a      	mov	r2, sp
   1ccb6:	4b27      	ldr	r3, [pc, #156]	; (1cd54 <gatt_notify+0xf0>)
   1ccb8:	6153      	str	r3, [r2, #20]
   1ccba:	4b24      	ldr	r3, [pc, #144]	; (1cd4c <gatt_notify+0xe8>)
   1ccbc:	6193      	str	r3, [r2, #24]
   1ccbe:	2303      	movs	r3, #3
   1ccc0:	4823      	ldr	r0, [pc, #140]	; (1cd50 <gatt_notify+0xec>)
   1ccc2:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccc6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ccca:	f00b fb06 	bl	282da <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1ccce:	f06f 0015 	mvn.w	r0, #21
   1ccd2:	46a5      	mov	sp, r4
   1ccd4:	e7e3      	b.n	1cc9e <gatt_notify+0x3a>
				sizeof(*nfy) + params->len);
   1ccd6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1ccd8:	211b      	movs	r1, #27
   1ccda:	3202      	adds	r2, #2
   1ccdc:	4630      	mov	r0, r6
   1ccde:	f7fd ff91 	bl	1ac04 <bt_att_create_pdu>
	if (!buf) {
   1cce2:	4605      	mov	r5, r0
   1cce4:	b990      	cbnz	r0, 1cd0c <gatt_notify+0xa8>
		LOG_WRN("No buffer available to send notification");
   1cce6:	466c      	mov	r4, sp
   1cce8:	b088      	sub	sp, #32
   1ccea:	466a      	mov	r2, sp
   1ccec:	4b1a      	ldr	r3, [pc, #104]	; (1cd58 <gatt_notify+0xf4>)
   1ccee:	6153      	str	r3, [r2, #20]
   1ccf0:	4b16      	ldr	r3, [pc, #88]	; (1cd4c <gatt_notify+0xe8>)
   1ccf2:	6193      	str	r3, [r2, #24]
   1ccf4:	2303      	movs	r3, #3
   1ccf6:	4816      	ldr	r0, [pc, #88]	; (1cd50 <gatt_notify+0xec>)
   1ccf8:	f842 3f10 	str.w	r3, [r2, #16]!
   1ccfc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cd00:	f00b faeb 	bl	282da <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1cd04:	f06f 000b 	mvn.w	r0, #11
   1cd08:	46a5      	mov	sp, r4
   1cd0a:	e7c8      	b.n	1cc9e <gatt_notify+0x3a>
   1cd0c:	f100 0a0c 	add.w	sl, r0, #12
   1cd10:	2102      	movs	r1, #2
   1cd12:	4650      	mov	r0, sl
   1cd14:	f00c f9d8 	bl	290c8 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1cd18:	4680      	mov	r8, r0
   1cd1a:	4650      	mov	r0, sl
   1cd1c:	f828 9b02 	strh.w	r9, [r8], #2
   1cd20:	89a1      	ldrh	r1, [r4, #12]
   1cd22:	f00c f9d1 	bl	290c8 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1cd26:	89a2      	ldrh	r2, [r4, #12]
   1cd28:	68a1      	ldr	r1, [r4, #8]
   1cd2a:	4640      	mov	r0, r8
   1cd2c:	f009 ff5e 	bl	26bec <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1cd30:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1cd34:	4628      	mov	r0, r5
   1cd36:	2301      	movs	r3, #1
   1cd38:	f00b f9f1 	bl	2811e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1cd3c:	4629      	mov	r1, r5
   1cd3e:	4630      	mov	r0, r6
   1cd40:	f00b f97c 	bl	2803c <bt_att_send>
   1cd44:	e7ab      	b.n	1cc9e <gatt_notify+0x3a>
   1cd46:	bf00      	nop
   1cd48:	0002e0df 	.word	0x0002e0df
   1cd4c:	0002e2be 	.word	0x0002e2be
   1cd50:	0002a848 	.word	0x0002a848
   1cd54:	0002e0f9 	.word	0x0002e0f9
   1cd58:	0002e18c 	.word	0x0002e18c

0001cd5c <bt_gatt_notify_cb>:
{
   1cd5c:	b530      	push	{r4, r5, lr}
   1cd5e:	4604      	mov	r4, r0
   1cd60:	b08b      	sub	sp, #44	; 0x2c
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1cd62:	4835      	ldr	r0, [pc, #212]	; (1ce38 <bt_gatt_notify_cb+0xdc>)
   1cd64:	f00b fab3 	bl	282ce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cd68:	0742      	lsls	r2, r0, #29
{
   1cd6a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1cd6c:	d55d      	bpl.n	1ce2a <bt_gatt_notify_cb+0xce>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1cd6e:	b114      	cbz	r4, 1cd76 <bt_gatt_notify_cb+0x1a>
   1cd70:	7b63      	ldrb	r3, [r4, #13]
   1cd72:	2b07      	cmp	r3, #7
   1cd74:	d15c      	bne.n	1ce30 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   1cd76:	6868      	ldr	r0, [r5, #4]
   1cd78:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cd7a:	f7ff fb65 	bl	1c448 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1cd7e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1cd80:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1cd84:	b33a      	cbz	r2, 1cdd6 <bt_gatt_notify_cb+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cd86:	a905      	add	r1, sp, #20
   1cd88:	9102      	str	r1, [sp, #8]
   1cd8a:	492c      	ldr	r1, [pc, #176]	; (1ce3c <bt_gatt_notify_cb+0xe0>)
   1cd8c:	9101      	str	r1, [sp, #4]
   1cd8e:	2101      	movs	r1, #1
	found->attr = NULL;
   1cd90:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cd92:	9100      	str	r1, [sp, #0]
   1cd94:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1cd98:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1cd9a:	f7ff fb85 	bl	1c4a8 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1cd9e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1cda0:	b91b      	cbnz	r3, 1cdaa <bt_gatt_notify_cb+0x4e>
			return -ENOENT;
   1cda2:	f06f 0001 	mvn.w	r0, #1
}
   1cda6:	b00b      	add	sp, #44	; 0x2c
   1cda8:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1cdaa:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1cdac:	9b05      	ldr	r3, [sp, #20]
   1cdae:	6818      	ldr	r0, [r3, #0]
   1cdb0:	2300      	movs	r3, #0
   1cdb2:	f88d 3010 	strb.w	r3, [sp, #16]
   1cdb6:	a904      	add	r1, sp, #16
   1cdb8:	f642 0303 	movw	r3, #10243	; 0x2803
   1cdbc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cdc0:	f009 ffb8 	bl	26d34 <bt_uuid_cmp>
   1cdc4:	b970      	cbnz	r0, 1cde4 <bt_gatt_notify_cb+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1cdc6:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1cdc8:	68c3      	ldr	r3, [r0, #12]
   1cdca:	799b      	ldrb	r3, [r3, #6]
   1cdcc:	06db      	lsls	r3, r3, #27
   1cdce:	d405      	bmi.n	1cddc <bt_gatt_notify_cb+0x80>
			return -EINVAL;
   1cdd0:	f06f 0015 	mvn.w	r0, #21
   1cdd4:	e7e7      	b.n	1cda6 <bt_gatt_notify_cb+0x4a>
		if (!data.handle) {
   1cdd6:	2800      	cmp	r0, #0
   1cdd8:	d1e8      	bne.n	1cdac <bt_gatt_notify_cb+0x50>
   1cdda:	e7e2      	b.n	1cda2 <bt_gatt_notify_cb+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1cddc:	f00b fb8f 	bl	284fe <bt_gatt_attr_value_handle>
   1cde0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1cde4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1cde8:	b12c      	cbz	r4, 1cdf6 <bt_gatt_notify_cb+0x9a>
		return gatt_notify(conn, data.handle, params);
   1cdea:	4601      	mov	r1, r0
   1cdec:	462a      	mov	r2, r5
   1cdee:	4620      	mov	r0, r4
   1cdf0:	f7ff ff38 	bl	1cc64 <gatt_notify>
   1cdf4:	e7d7      	b.n	1cda6 <bt_gatt_notify_cb+0x4a>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1cdf6:	f642 1202 	movw	r2, #10498	; 0x2902
   1cdfa:	f8ad 2012 	strh.w	r2, [sp, #18]
   1cdfe:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1ce00:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ce04:	9202      	str	r2, [sp, #8]
   1ce06:	4a0e      	ldr	r2, [pc, #56]	; (1ce40 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
   1ce08:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1ce0a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ce0c:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1ce10:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ce14:	aa04      	add	r2, sp, #16
   1ce16:	4623      	mov	r3, r4
   1ce18:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1ce1c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1ce1e:	f88d 4010 	strb.w	r4, [sp, #16]
   1ce22:	f7ff fb41 	bl	1c4a8 <bt_gatt_foreach_attr_type>
	return data.err;
   1ce26:	9807      	ldr	r0, [sp, #28]
   1ce28:	e7bd      	b.n	1cda6 <bt_gatt_notify_cb+0x4a>
		return -EAGAIN;
   1ce2a:	f06f 000a 	mvn.w	r0, #10
   1ce2e:	e7ba      	b.n	1cda6 <bt_gatt_notify_cb+0x4a>
		return -ENOTCONN;
   1ce30:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ce34:	e7b7      	b.n	1cda6 <bt_gatt_notify_cb+0x4a>
   1ce36:	bf00      	nop
   1ce38:	20000464 	.word	0x20000464
   1ce3c:	0002816d 	.word	0x0002816d
   1ce40:	0001ce45 	.word	0x0001ce45

0001ce44 <notify_cb>:
{
   1ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce48:	4b47      	ldr	r3, [pc, #284]	; (1cf68 <notify_cb+0x124>)
{
   1ce4a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce4c:	6882      	ldr	r2, [r0, #8]
   1ce4e:	429a      	cmp	r2, r3
{
   1ce50:	af00      	add	r7, sp, #0
   1ce52:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ce54:	d005      	beq.n	1ce62 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   1ce56:	f04f 0801 	mov.w	r8, #1
}
   1ce5a:	4640      	mov	r0, r8
   1ce5c:	46bd      	mov	sp, r7
   1ce5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ccc = attr->user_data;
   1ce62:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1ce64:	4b41      	ldr	r3, [pc, #260]	; (1cf6c <notify_cb+0x128>)
   1ce66:	429e      	cmp	r6, r3
   1ce68:	d011      	beq.n	1ce8e <notify_cb+0x4a>
		if (cfg->value != data->type) {
   1ce6a:	8932      	ldrh	r2, [r6, #8]
   1ce6c:	89ab      	ldrh	r3, [r5, #12]
   1ce6e:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ce70:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1ce74:	d1ef      	bne.n	1ce56 <notify_cb+0x12>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ce76:	7830      	ldrb	r0, [r6, #0]
   1ce78:	f7fc fdae 	bl	199d8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ce7c:	4604      	mov	r4, r0
   1ce7e:	2800      	cmp	r0, #0
   1ce80:	d0e9      	beq.n	1ce56 <notify_cb+0x12>
		if (conn->state != BT_CONN_CONNECTED) {
   1ce82:	7b43      	ldrb	r3, [r0, #13]
   1ce84:	2b07      	cmp	r3, #7
   1ce86:	d026      	beq.n	1ced6 <notify_cb+0x92>
			bt_conn_unref(conn);
   1ce88:	f00a fb24 	bl	274d4 <bt_conn_unref>
			continue;
   1ce8c:	e7e3      	b.n	1ce56 <notify_cb+0x12>
   1ce8e:	4c38      	ldr	r4, [pc, #224]	; (1cf70 <notify_cb+0x12c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ce90:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1cf74 <notify_cb+0x130>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ce94:	f04f 0900 	mov.w	r9, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ce98:	4651      	mov	r1, sl
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	f00b f9e4 	bl	28268 <bt_addr_le_eq>
   1cea0:	b978      	cbnz	r0, 1cec2 <notify_cb+0x7e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1cea2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1cea6:	2207      	movs	r2, #7
   1cea8:	4621      	mov	r1, r4
   1ceaa:	f7fc fde3 	bl	19a74 <bt_conn_lookup_state_le>
			if (!conn) {
   1ceae:	b978      	cbnz	r0, 1ced0 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1ceb0:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1ceb2:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1ceb6:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1ceb8:	4621      	mov	r1, r4
   1ceba:	8853      	ldrh	r3, [r2, #2]
   1cebc:	8812      	ldrh	r2, [r2, #0]
   1cebe:	f7fe fddb 	bl	1ba78 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1cec2:	340c      	adds	r4, #12
   1cec4:	f1b9 0f00 	cmp.w	r9, #0
   1cec8:	d1cf      	bne.n	1ce6a <notify_cb+0x26>
   1ceca:	f04f 0901 	mov.w	r9, #1
   1cece:	e7e3      	b.n	1ce98 <notify_cb+0x54>
			bt_conn_unref(conn);
   1ced0:	f00a fb00 	bl	274d4 <bt_conn_unref>
   1ced4:	e7f5      	b.n	1cec2 <notify_cb+0x7e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ced6:	6973      	ldr	r3, [r6, #20]
   1ced8:	b123      	cbz	r3, 1cee4 <notify_cb+0xa0>
   1ceda:	4641      	mov	r1, r8
   1cedc:	4798      	blx	r3
   1cede:	b908      	cbnz	r0, 1cee4 <notify_cb+0xa0>
			bt_conn_unref(conn);
   1cee0:	4620      	mov	r0, r4
   1cee2:	e7d1      	b.n	1ce88 <notify_cb+0x44>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1cee4:	4641      	mov	r1, r8
   1cee6:	2294      	movs	r2, #148	; 0x94
   1cee8:	4620      	mov	r0, r4
   1ceea:	f00b fb7e 	bl	285ea <bt_gatt_check_perm>
   1ceee:	4680      	mov	r8, r0
   1cef0:	b180      	cbz	r0, 1cf14 <notify_cb+0xd0>
			LOG_WRN("Link is not encrypted");
   1cef2:	466d      	mov	r5, sp
   1cef4:	b088      	sub	sp, #32
   1cef6:	466a      	mov	r2, sp
   1cef8:	4b1f      	ldr	r3, [pc, #124]	; (1cf78 <notify_cb+0x134>)
   1cefa:	6153      	str	r3, [r2, #20]
   1cefc:	4b1f      	ldr	r3, [pc, #124]	; (1cf7c <notify_cb+0x138>)
   1cefe:	6193      	str	r3, [r2, #24]
   1cf00:	2303      	movs	r3, #3
   1cf02:	f842 3f10 	str.w	r3, [r2, #16]!
   1cf06:	481e      	ldr	r0, [pc, #120]	; (1cf80 <notify_cb+0x13c>)
   1cf08:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1cf0c:	f00b f9e5 	bl	282da <z_log_msg_static_create.constprop.0>
   1cf10:	46ad      	mov	sp, r5
   1cf12:	e7e5      	b.n	1cee0 <notify_cb+0x9c>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1cf14:	89ab      	ldrh	r3, [r5, #12]
   1cf16:	2b02      	cmp	r3, #2
   1cf18:	d114      	bne.n	1cf44 <notify_cb+0x100>
   1cf1a:	8933      	ldrh	r3, [r6, #8]
   1cf1c:	079a      	lsls	r2, r3, #30
   1cf1e:	d405      	bmi.n	1cf2c <notify_cb+0xe8>
		bt_conn_unref(conn);
   1cf20:	4620      	mov	r0, r4
   1cf22:	f00a fad7 	bl	274d4 <bt_conn_unref>
		data->err = 0;
   1cf26:	2300      	movs	r3, #0
   1cf28:	60ab      	str	r3, [r5, #8]
   1cf2a:	e794      	b.n	1ce56 <notify_cb+0x12>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1cf2c:	692a      	ldr	r2, [r5, #16]
   1cf2e:	88a9      	ldrh	r1, [r5, #4]
   1cf30:	4620      	mov	r0, r4
   1cf32:	f7ff fcc1 	bl	1c8b8 <gatt_indicate>
			if (err == 0) {
   1cf36:	4606      	mov	r6, r0
   1cf38:	b978      	cbnz	r0, 1cf5a <notify_cb+0x116>
				data->ind_params->_ref++;
   1cf3a:	692a      	ldr	r2, [r5, #16]
   1cf3c:	7d93      	ldrb	r3, [r2, #22]
   1cf3e:	3301      	adds	r3, #1
   1cf40:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1cf42:	e7ed      	b.n	1cf20 <notify_cb+0xdc>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1cf44:	2b01      	cmp	r3, #1
   1cf46:	d1eb      	bne.n	1cf20 <notify_cb+0xdc>
   1cf48:	8933      	ldrh	r3, [r6, #8]
   1cf4a:	07db      	lsls	r3, r3, #31
   1cf4c:	d5e8      	bpl.n	1cf20 <notify_cb+0xdc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1cf4e:	692a      	ldr	r2, [r5, #16]
   1cf50:	88a9      	ldrh	r1, [r5, #4]
   1cf52:	4620      	mov	r0, r4
   1cf54:	f7ff fe86 	bl	1cc64 <gatt_notify>
   1cf58:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1cf5a:	4620      	mov	r0, r4
   1cf5c:	f00a faba 	bl	274d4 <bt_conn_unref>
		if (err < 0) {
   1cf60:	2e00      	cmp	r6, #0
   1cf62:	f6ff af7a 	blt.w	1ce5a <notify_cb+0x16>
   1cf66:	e7de      	b.n	1cf26 <notify_cb+0xe2>
   1cf68:	0001bf15 	.word	0x0001bf15
   1cf6c:	20000824 	.word	0x20000824
   1cf70:	20003397 	.word	0x20003397
   1cf74:	0002c330 	.word	0x0002c330
   1cf78:	0002e0df 	.word	0x0002e0df
   1cf7c:	0002e2d8 	.word	0x0002e2d8
   1cf80:	0002a848 	.word	0x0002a848

0001cf84 <bt_gatt_connected>:
{
   1cf84:	b5b0      	push	{r4, r5, r7, lr}
   1cf86:	b08e      	sub	sp, #56	; 0x38
   1cf88:	af02      	add	r7, sp, #8
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cf8a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   1cf8e:	4604      	mov	r4, r0
	data.conn = conn;
   1cf90:	6078      	str	r0, [r7, #4]
	data.sec = BT_SECURITY_L1;
   1cf92:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cf94:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1cf96:	723b      	strb	r3, [r7, #8]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cf98:	4629      	mov	r1, r5
   1cf9a:	f00a f831 	bl	27000 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1cf9e:	b1a0      	cbz	r0, 1cfca <bt_gatt_connected+0x46>
		if (conn->id) {
   1cfa0:	7a22      	ldrb	r2, [r4, #8]
   1cfa2:	2a00      	cmp	r2, #0
   1cfa4:	d036      	beq.n	1d014 <bt_gatt_connected+0x90>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1cfa6:	2104      	movs	r1, #4
   1cfa8:	4638      	mov	r0, r7
   1cfaa:	f008 f8b3 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cfae:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1cfb0:	4a19      	ldr	r2, [pc, #100]	; (1d018 <bt_gatt_connected+0x94>)
   1cfb2:	2124      	movs	r1, #36	; 0x24
   1cfb4:	f107 000c 	add.w	r0, r7, #12
   1cfb8:	462b      	mov	r3, r5
   1cfba:	f7f8 fdef 	bl	15b9c <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1cfbe:	f107 020c 	add.w	r2, r7, #12
   1cfc2:	4916      	ldr	r1, [pc, #88]	; (1d01c <bt_gatt_connected+0x98>)
   1cfc4:	4610      	mov	r0, r2
   1cfc6:	f7f7 faff 	bl	145c8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1cfca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cfce:	4a14      	ldr	r2, [pc, #80]	; (1d020 <bt_gatt_connected+0x9c>)
   1cfd0:	1d3b      	adds	r3, r7, #4
   1cfd2:	2001      	movs	r0, #1
   1cfd4:	f00b fae1 	bl	2859a <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1cfd8:	4620      	mov	r0, r4
   1cfda:	f00a fb29 	bl	27630 <bt_conn_get_security>
   1cfde:	7a39      	ldrb	r1, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1cfe0:	4288      	cmp	r0, r1
   1cfe2:	d214      	bcs.n	1d00e <bt_gatt_connected+0x8a>
		int err = bt_conn_set_security(conn, data.sec);
   1cfe4:	4620      	mov	r0, r4
   1cfe6:	f00a faf3 	bl	275d0 <bt_conn_set_security>
		if (err) {
   1cfea:	b180      	cbz	r0, 1d00e <bt_gatt_connected+0x8a>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1cfec:	466c      	mov	r4, sp
   1cfee:	b088      	sub	sp, #32
   1cff0:	aa02      	add	r2, sp, #8
   1cff2:	4b0c      	ldr	r3, [pc, #48]	; (1d024 <bt_gatt_connected+0xa0>)
   1cff4:	6153      	str	r3, [r2, #20]
   1cff6:	4b0c      	ldr	r3, [pc, #48]	; (1d028 <bt_gatt_connected+0xa4>)
   1cff8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1cffc:	2304      	movs	r3, #4
   1cffe:	f842 3f10 	str.w	r3, [r2, #16]!
   1d002:	480a      	ldr	r0, [pc, #40]	; (1d02c <bt_gatt_connected+0xa8>)
   1d004:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1d008:	f00b f967 	bl	282da <z_log_msg_static_create.constprop.0>
   1d00c:	46a5      	mov	sp, r4
}
   1d00e:	3730      	adds	r7, #48	; 0x30
   1d010:	46bd      	mov	sp, r7
   1d012:	bdb0      	pop	{r4, r5, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d014:	9200      	str	r2, [sp, #0]
   1d016:	e7cb      	b.n	1cfb0 <bt_gatt_connected+0x2c>
   1d018:	0002e0db 	.word	0x0002e0db
   1d01c:	0001c719 	.word	0x0001c719
   1d020:	0001cb3d 	.word	0x0001cb3d
   1d024:	0002e1b9 	.word	0x0002e1b9
   1d028:	0002e2ac 	.word	0x0002e2ac
   1d02c:	0002a848 	.word	0x0002a848

0001d030 <bt_gatt_att_max_mtu_changed>:
{
   1d030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1d032:	4b08      	ldr	r3, [pc, #32]	; (1d054 <bt_gatt_att_max_mtu_changed+0x24>)
   1d034:	681c      	ldr	r4, [r3, #0]
   1d036:	4605      	mov	r5, r0
   1d038:	460e      	mov	r6, r1
   1d03a:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d03c:	b14c      	cbz	r4, 1d052 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1d03e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d042:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1d044:	b11b      	cbz	r3, 1d04e <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1d046:	463a      	mov	r2, r7
   1d048:	4631      	mov	r1, r6
   1d04a:	4628      	mov	r0, r5
   1d04c:	4798      	blx	r3
	return node->next;
   1d04e:	6864      	ldr	r4, [r4, #4]
   1d050:	e7f4      	b.n	1d03c <bt_gatt_att_max_mtu_changed+0xc>
}
   1d052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d054:	2000306c 	.word	0x2000306c

0001d058 <bt_gatt_encrypt_change>:
{
   1d058:	b513      	push	{r0, r1, r4, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1d05a:	4a0a      	ldr	r2, [pc, #40]	; (1d084 <bt_gatt_encrypt_change+0x2c>)
	data.conn = conn;
   1d05c:	9000      	str	r0, [sp, #0]
{
   1d05e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1d060:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1d064:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1d066:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1d068:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1d06c:	f00b fa95 	bl	2859a <bt_gatt_foreach_attr>
	if (!bt_gatt_change_aware(conn, false)) {
   1d070:	2100      	movs	r1, #0
   1d072:	4620      	mov	r0, r4
   1d074:	f00b fb77 	bl	28766 <bt_gatt_change_aware>
   1d078:	b908      	cbnz	r0, 1d07e <bt_gatt_encrypt_change+0x26>
		sc_indicate(0x0001, 0xffff);
   1d07a:	f7fe ffc1 	bl	1c000 <sc_indicate.constprop.0>
}
   1d07e:	b002      	add	sp, #8
   1d080:	bd10      	pop	{r4, pc}
   1d082:	bf00      	nop
   1d084:	0001cb3d 	.word	0x0001cb3d

0001d088 <bt_gatt_store_ccc>:
{
   1d088:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d08a:	b0c1      	sub	sp, #260	; 0x104
   1d08c:	af02      	add	r7, sp, #8
	save.count = 0;
   1d08e:	2300      	movs	r3, #0
{
   1d090:	4604      	mov	r4, r0
   1d092:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1d094:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   1d096:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   1d09a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1d09e:	4a1e      	ldr	r2, [pc, #120]	; (1d118 <bt_gatt_store_ccc+0x90>)
   1d0a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   1d0a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d0a8:	2001      	movs	r0, #1
   1d0aa:	f00b fa76 	bl	2859a <bt_gatt_foreach_attr>
	if (id) {
   1d0ae:	b374      	cbz	r4, 1d10e <bt_gatt_store_ccc+0x86>
		u8_to_dec(id_str, sizeof(id_str), id);
   1d0b0:	1d3e      	adds	r6, r7, #4
   1d0b2:	4622      	mov	r2, r4
   1d0b4:	2104      	movs	r1, #4
   1d0b6:	4630      	mov	r0, r6
   1d0b8:	f008 f82c 	bl	25114 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1d0bc:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1d0be:	4a17      	ldr	r2, [pc, #92]	; (1d11c <bt_gatt_store_ccc+0x94>)
   1d0c0:	462b      	mov	r3, r5
   1d0c2:	2124      	movs	r1, #36	; 0x24
   1d0c4:	f107 0008 	add.w	r0, r7, #8
   1d0c8:	f7f8 fd68 	bl	15b9c <bt_settings_encode_key>
	if (save.count) {
   1d0cc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   1d0d0:	b1fa      	cbz	r2, 1d112 <bt_gatt_store_ccc+0x8a>
		len = save.count * sizeof(*save.store);
   1d0d2:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1d0d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   1d0d8:	f107 0008 	add.w	r0, r7, #8
   1d0dc:	f7f7 fa14 	bl	14508 <settings_save_one>
	if (err) {
   1d0e0:	4604      	mov	r4, r0
   1d0e2:	b180      	cbz	r0, 1d106 <bt_gatt_store_ccc+0x7e>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1d0e4:	466d      	mov	r5, sp
   1d0e6:	b088      	sub	sp, #32
   1d0e8:	aa02      	add	r2, sp, #8
   1d0ea:	4b0d      	ldr	r3, [pc, #52]	; (1d120 <bt_gatt_store_ccc+0x98>)
   1d0ec:	6153      	str	r3, [r2, #20]
   1d0ee:	4b0d      	ldr	r3, [pc, #52]	; (1d124 <bt_gatt_store_ccc+0x9c>)
   1d0f0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d0f4:	2304      	movs	r3, #4
   1d0f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d0fa:	480b      	ldr	r0, [pc, #44]	; (1d128 <bt_gatt_store_ccc+0xa0>)
   1d0fc:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d100:	f00b f8eb 	bl	282da <z_log_msg_static_create.constprop.0>
   1d104:	46ad      	mov	sp, r5
}
   1d106:	4620      	mov	r0, r4
   1d108:	37fc      	adds	r7, #252	; 0xfc
   1d10a:	46bd      	mov	sp, r7
   1d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1d10e:	9400      	str	r4, [sp, #0]
   1d110:	e7d5      	b.n	1d0be <bt_gatt_store_ccc+0x36>
		str = NULL;
   1d112:	4611      	mov	r1, r2
   1d114:	e7e0      	b.n	1d0d8 <bt_gatt_store_ccc+0x50>
   1d116:	bf00      	nop
   1d118:	0001bbd1 	.word	0x0001bbd1
   1d11c:	0002e0db 	.word	0x0002e0db
   1d120:	0002e1e9 	.word	0x0002e1e9
   1d124:	0002e26d 	.word	0x0002e26d
   1d128:	0002a848 	.word	0x0002a848

0001d12c <bt_gatt_identity_resolved>:
{
   1d12c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1d130:	f100 0888 	add.w	r8, r0, #136	; 0x88
	struct addr_match user_data = {
   1d134:	e9cd 1200 	strd	r1, r2, [sp]
{
   1d138:	4604      	mov	r4, r0
   1d13a:	460f      	mov	r7, r1
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1d13c:	7a00      	ldrb	r0, [r0, #8]
   1d13e:	4641      	mov	r1, r8
{
   1d140:	4616      	mov	r6, r2
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1d142:	f009 ff5d 	bl	27000 <bt_addr_le_is_bonded>
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1d146:	4a0f      	ldr	r2, [pc, #60]	; (1d184 <bt_gatt_identity_resolved+0x58>)
	bool is_bonded = bt_addr_le_is_bonded(conn->id, &conn->le.dst);
   1d148:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1d14a:	466b      	mov	r3, sp
   1d14c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d150:	2001      	movs	r0, #1
   1d152:	f00b fa22 	bl	2859a <bt_gatt_foreach_attr>
	if (is_bonded) {
   1d156:	b11d      	cbz	r5, 1d160 <bt_gatt_identity_resolved+0x34>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1d158:	7a20      	ldrb	r0, [r4, #8]
   1d15a:	4641      	mov	r1, r8
   1d15c:	f7ff ff94 	bl	1d088 <bt_gatt_store_ccc>
	struct gatt_cf_cfg *cfg = find_cf_cfg_by_addr(conn->id, private_addr);
   1d160:	7a20      	ldrb	r0, [r4, #8]
   1d162:	4639      	mov	r1, r7
   1d164:	f7fe fa56 	bl	1b614 <find_cf_cfg_by_addr>
	if (cfg) {
   1d168:	b140      	cbz	r0, 1d17c <bt_gatt_identity_resolved+0x50>
		bt_addr_le_copy(&cfg->peer, id_addr);
   1d16a:	4631      	mov	r1, r6
   1d16c:	3001      	adds	r0, #1
   1d16e:	f00b f803 	bl	28178 <bt_addr_le_copy>
		if (is_bonded) {
   1d172:	b11d      	cbz	r5, 1d17c <bt_gatt_identity_resolved+0x50>
			bt_gatt_store_cf(conn->id, &conn->le.dst);
   1d174:	7a20      	ldrb	r0, [r4, #8]
   1d176:	4641      	mov	r1, r8
   1d178:	f7fe fe06 	bl	1bd88 <bt_gatt_store_cf.isra.0>
}
   1d17c:	b002      	add	sp, #8
   1d17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d182:	bf00      	nop
   1d184:	0001bc09 	.word	0x0001bc09

0001d188 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1d188:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d18a:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1d18c:	ae03      	add	r6, sp, #12
{
   1d18e:	4604      	mov	r4, r0
   1d190:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1d192:	9103      	str	r1, [sp, #12]
   1d194:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1d198:	4a1f      	ldr	r2, [pc, #124]	; (1d218 <bt_gatt_clear+0x90>)
   1d19a:	4633      	mov	r3, r6
   1d19c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d1a0:	2001      	movs	r0, #1
   1d1a2:	f00b f9fa 	bl	2859a <bt_gatt_foreach_attr>
		if (id) {
   1d1a6:	b394      	cbz	r4, 1d20e <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
   1d1a8:	af02      	add	r7, sp, #8
   1d1aa:	4622      	mov	r2, r4
   1d1ac:	2104      	movs	r1, #4
   1d1ae:	4638      	mov	r0, r7
   1d1b0:	f007 ffb0 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d1b4:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d1b6:	4a19      	ldr	r2, [pc, #100]	; (1d21c <bt_gatt_clear+0x94>)
   1d1b8:	462b      	mov	r3, r5
   1d1ba:	2124      	movs	r1, #36	; 0x24
   1d1bc:	a805      	add	r0, sp, #20
   1d1be:	f7f8 fced 	bl	15b9c <bt_settings_encode_key>
		return settings_delete(key);
   1d1c2:	a805      	add	r0, sp, #20
   1d1c4:	f009 f90a 	bl	263dc <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
   1d1c8:	2800      	cmp	r0, #0
   1d1ca:	db1e      	blt.n	1d20a <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
   1d1cc:	4629      	mov	r1, r5
   1d1ce:	4620      	mov	r0, r4
   1d1d0:	f7fe fd6a 	bl	1bca8 <bt_gatt_clear_sc>
		if (err < 0) {
   1d1d4:	2800      	cmp	r0, #0
   1d1d6:	db18      	blt.n	1d20a <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
   1d1d8:	4629      	mov	r1, r5
   1d1da:	4620      	mov	r0, r4
   1d1dc:	f7fe fa1a 	bl	1b614 <find_cf_cfg_by_addr>
	if (cfg) {
   1d1e0:	b108      	cbz	r0, 1d1e6 <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
   1d1e2:	f7fe fd45 	bl	1bc70 <clear_cf_cfg>
		if (id) {
   1d1e6:	b1a4      	cbz	r4, 1d212 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
   1d1e8:	4622      	mov	r2, r4
   1d1ea:	2104      	movs	r1, #4
   1d1ec:	4630      	mov	r0, r6
   1d1ee:	f007 ff91 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d1f2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d1f4:	4a0a      	ldr	r2, [pc, #40]	; (1d220 <bt_gatt_clear+0x98>)
   1d1f6:	462b      	mov	r3, r5
   1d1f8:	2124      	movs	r1, #36	; 0x24
   1d1fa:	a805      	add	r0, sp, #20
   1d1fc:	f7f8 fcce 	bl	15b9c <bt_settings_encode_key>
		return settings_delete(key);
   1d200:	a805      	add	r0, sp, #20
   1d202:	f009 f8eb 	bl	263dc <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
   1d206:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1d20a:	b00f      	add	sp, #60	; 0x3c
   1d20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1d20e:	9400      	str	r4, [sp, #0]
   1d210:	e7d1      	b.n	1d1b6 <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1d212:	9400      	str	r4, [sp, #0]
   1d214:	e7ee      	b.n	1d1f4 <bt_gatt_clear+0x6c>
   1d216:	bf00      	nop
   1d218:	0001bba9 	.word	0x0001bba9
   1d21c:	0002e0db 	.word	0x0002e0db
   1d220:	0002e35b 	.word	0x0002e35b

0001d224 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d224:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d226:	4604      	mov	r4, r0
   1d228:	b083      	sub	sp, #12
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1d22a:	4603      	mov	r3, r0
{
   1d22c:	af00      	add	r7, sp, #0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1d22e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d232:	2001      	movs	r0, #1
   1d234:	4a22      	ldr	r2, [pc, #136]	; (1d2c0 <bt_gatt_disconnected+0x9c>)
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_DELAYED_STORE)
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1d236:	f104 0688 	add.w	r6, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1d23a:	f00b f9ae 	bl	2859a <bt_gatt_foreach_attr>
	if (gatt_delayed_store_find(conn->id, &conn->le.dst)) {
   1d23e:	7a20      	ldrb	r0, [r4, #8]
   1d240:	4631      	mov	r1, r6
   1d242:	f7fe fa09 	bl	1b658 <gatt_delayed_store_find>
   1d246:	b1b8      	cbz	r0, 1d278 <bt_gatt_disconnected+0x54>
		int err = k_work_reschedule(&gatt_delayed_store.work, K_NO_WAIT);
   1d248:	481e      	ldr	r0, [pc, #120]	; (1d2c4 <bt_gatt_disconnected+0xa0>)
   1d24a:	2200      	movs	r2, #0
   1d24c:	2300      	movs	r3, #0
   1d24e:	f006 fd13 	bl	23c78 <k_work_reschedule>

		if (err < 0) {
   1d252:	2800      	cmp	r0, #0
   1d254:	da10      	bge.n	1d278 <bt_gatt_disconnected+0x54>
			LOG_ERR("Unable to reschedule settings storage (err %d)",
   1d256:	466d      	mov	r5, sp
   1d258:	b088      	sub	sp, #32
   1d25a:	466a      	mov	r2, sp
   1d25c:	4b1a      	ldr	r3, [pc, #104]	; (1d2c8 <bt_gatt_disconnected+0xa4>)
   1d25e:	6153      	str	r3, [r2, #20]
   1d260:	4b1a      	ldr	r3, [pc, #104]	; (1d2cc <bt_gatt_disconnected+0xa8>)
   1d262:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d266:	2304      	movs	r3, #4
   1d268:	f842 3f10 	str.w	r3, [r2, #16]!
   1d26c:	4818      	ldr	r0, [pc, #96]	; (1d2d0 <bt_gatt_disconnected+0xac>)
   1d26e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d272:	f00b f832 	bl	282da <z_log_msg_static_create.constprop.0>
   1d276:	46ad      	mov	sp, r5
	}
#endif	/* CONFIG_BT_SETTINGS_DELAYED_STORE */

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d278:	7a20      	ldrb	r0, [r4, #8]
   1d27a:	4631      	mov	r1, r6
   1d27c:	f009 fec0 	bl	27000 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1d280:	b148      	cbz	r0, 1d296 <bt_gatt_disconnected+0x72>
		struct addr_with_id addr_with_id = {
   1d282:	7a23      	ldrb	r3, [r4, #8]
   1d284:	713b      	strb	r3, [r7, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1d286:	4a13      	ldr	r2, [pc, #76]	; (1d2d4 <bt_gatt_disconnected+0xb0>)
		struct addr_with_id addr_with_id = {
   1d288:	603e      	str	r6, [r7, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1d28a:	463b      	mov	r3, r7
   1d28c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d290:	2001      	movs	r0, #1
   1d292:	f00b f982 	bl	2859a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1d296:	4620      	mov	r0, r4
   1d298:	f7fe fa68 	bl	1b76c <find_cf_cfg>
	if (!cfg) {
   1d29c:	4605      	mov	r5, r0
   1d29e:	b138      	cbz	r0, 1d2b0 <bt_gatt_disconnected+0x8c>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d2a0:	7a20      	ldrb	r0, [r4, #8]
   1d2a2:	4631      	mov	r1, r6
   1d2a4:	f009 feac 	bl	27000 <bt_addr_le_is_bonded>
   1d2a8:	b928      	cbnz	r0, 1d2b6 <bt_gatt_disconnected+0x92>
		clear_cf_cfg(cfg);
   1d2aa:	4628      	mov	r0, r5
   1d2ac:	f7fe fce0 	bl	1bc70 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1d2b0:	370c      	adds	r7, #12
   1d2b2:	46bd      	mov	sp, r7
   1d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d2b6:	4631      	mov	r1, r6
   1d2b8:	1c68      	adds	r0, r5, #1
   1d2ba:	f00a ff5d 	bl	28178 <bt_addr_le_copy>
}
   1d2be:	e7f7      	b.n	1d2b0 <bt_gatt_disconnected+0x8c>
   1d2c0:	0001be75 	.word	0x0001be75
   1d2c4:	200020f8 	.word	0x200020f8
   1d2c8:	0002e20b 	.word	0x0002e20b
   1d2cc:	0002e23e 	.word	0x0002e23e
   1d2d0:	0002a848 	.word	0x0002a848
   1d2d4:	0001bba9 	.word	0x0001bba9

0001d2d8 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1d2d8:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1d2da:	4b05      	ldr	r3, [pc, #20]	; (1d2f0 <smp_find+0x18>)
{
   1d2dc:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1d2de:	4618      	mov	r0, r3
   1d2e0:	f00b fad8 	bl	28894 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1d2e4:	3b04      	subs	r3, #4
   1d2e6:	2800      	cmp	r0, #0
}
   1d2e8:	bf14      	ite	ne
   1d2ea:	4618      	movne	r0, r3
   1d2ec:	2000      	moveq	r0, #0
   1d2ee:	bd08      	pop	{r3, pc}
   1d2f0:	200021fc 	.word	0x200021fc

0001d2f4 <latch_auth_cb>:
{
   1d2f4:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1d2f6:	4a0c      	ldr	r2, [pc, #48]	; (1d328 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d2f8:	6811      	ldr	r1, [r2, #0]
   1d2fa:	4a0c      	ldr	r2, [pc, #48]	; (1d32c <latch_auth_cb+0x38>)
   1d2fc:	f3bf 8f5b 	dmb	ish
   1d300:	f500 73a8 	add.w	r3, r0, #336	; 0x150
   1d304:	e853 4f00 	ldrex	r4, [r3]
   1d308:	4294      	cmp	r4, r2
   1d30a:	d104      	bne.n	1d316 <latch_auth_cb+0x22>
   1d30c:	e843 1c00 	strex	ip, r1, [r3]
   1d310:	f1bc 0f00 	cmp.w	ip, #0
   1d314:	d1f6      	bne.n	1d304 <latch_auth_cb+0x10>
   1d316:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d31a:	f3bf 8f5b 	dmb	ish
   1d31e:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
   1d322:	f3bf 8f5b 	dmb	ish
}
   1d326:	bd10      	pop	{r4, pc}
   1d328:	20002fa0 	.word	0x20002fa0
   1d32c:	200021f8 	.word	0x200021f8

0001d330 <get_io_capa>:
{
   1d330:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d332:	f7ff ffdf 	bl	1d2f4 <latch_auth_cb>
	if (!smp_auth_cb) {
   1d336:	4603      	mov	r3, r0
   1d338:	b1c8      	cbz	r0, 1d36e <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1d33a:	e9d0 1200 	ldrd	r1, r2, [r0]
   1d33e:	b921      	cbnz	r1, 1d34a <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1d340:	2a00      	cmp	r2, #0
   1d342:	bf0c      	ite	eq
   1d344:	2003      	moveq	r0, #3
   1d346:	2002      	movne	r0, #2
   1d348:	e010      	b.n	1d36c <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1d34a:	b132      	cbz	r2, 1d35a <get_io_capa+0x2a>
   1d34c:	6883      	ldr	r3, [r0, #8]
   1d34e:	b913      	cbnz	r3, 1d356 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1d350:	4b09      	ldr	r3, [pc, #36]	; (1d378 <get_io_capa+0x48>)
   1d352:	781b      	ldrb	r3, [r3, #0]
   1d354:	b933      	cbnz	r3, 1d364 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1d356:	2004      	movs	r0, #4
   1d358:	e008      	b.n	1d36c <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1d35a:	4907      	ldr	r1, [pc, #28]	; (1d378 <get_io_capa+0x48>)
   1d35c:	7808      	ldrb	r0, [r1, #0]
   1d35e:	b128      	cbz	r0, 1d36c <get_io_capa+0x3c>
   1d360:	689b      	ldr	r3, [r3, #8]
   1d362:	b933      	cbnz	r3, 1d372 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1d364:	3a00      	subs	r2, #0
   1d366:	bf18      	it	ne
   1d368:	2201      	movne	r2, #1
   1d36a:	0050      	lsls	r0, r2, #1
}
   1d36c:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1d36e:	2003      	movs	r0, #3
   1d370:	e7fc      	b.n	1d36c <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1d372:	2001      	movs	r0, #1
   1d374:	e7fa      	b.n	1d36c <get_io_capa+0x3c>
   1d376:	bf00      	nop
   1d378:	200034b8 	.word	0x200034b8

0001d37c <get_auth>:
{
   1d37c:	b510      	push	{r4, lr}
	if (sc_supported) {
   1d37e:	4b0c      	ldr	r3, [pc, #48]	; (1d3b0 <get_auth+0x34>)
   1d380:	781b      	ldrb	r3, [r3, #0]
   1d382:	b17b      	cbz	r3, 1d3a4 <get_auth+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   1d384:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d388:	f7ff ffd2 	bl	1d330 <get_io_capa>
	if (bondable) {
   1d38c:	4b09      	ldr	r3, [pc, #36]	; (1d3b4 <get_auth+0x38>)
   1d38e:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d390:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   1d392:	bf0c      	ite	eq
   1d394:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   1d398:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   1d39c:	b12b      	cbz	r3, 1d3aa <get_auth+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   1d39e:	f044 0001 	orr.w	r0, r4, #1
}
   1d3a2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   1d3a4:	f001 0407 	and.w	r4, r1, #7
   1d3a8:	e7ee      	b.n	1d388 <get_auth+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   1d3aa:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   1d3ae:	e7f8      	b.n	1d3a2 <get_auth+0x26>
   1d3b0:	200034b8 	.word	0x200034b8
   1d3b4:	20000acd 	.word	0x20000acd

0001d3b8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d3b8:	b5b0      	push	{r4, r5, r7, lr}
   1d3ba:	b082      	sub	sp, #8
   1d3bc:	4613      	mov	r3, r2
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1d3be:	2200      	movs	r2, #0
   1d3c0:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1d3c2:	af02      	add	r7, sp, #8
   1d3c4:	4604      	mov	r4, r0
   1d3c6:	460d      	mov	r5, r1
	int err = bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
   1d3c8:	460a      	mov	r2, r1
   1d3ca:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   1d3ce:	2106      	movs	r1, #6
   1d3d0:	f00a f9e7 	bl	277a2 <bt_l2cap_send_cb>
	if (err) {
   1d3d4:	b1b0      	cbz	r0, 1d404 <smp_send.constprop.0+0x4c>
		if (err == -ENOBUFS) {
   1d3d6:	3069      	adds	r0, #105	; 0x69
   1d3d8:	d10f      	bne.n	1d3fa <smp_send.constprop.0+0x42>
			LOG_ERR("Ran out of TX buffers or contexts.");
   1d3da:	466c      	mov	r4, sp
   1d3dc:	b088      	sub	sp, #32
   1d3de:	aa02      	add	r2, sp, #8
   1d3e0:	4b0c      	ldr	r3, [pc, #48]	; (1d414 <smp_send.constprop.0+0x5c>)
   1d3e2:	6153      	str	r3, [r2, #20]
   1d3e4:	4b0c      	ldr	r3, [pc, #48]	; (1d418 <smp_send.constprop.0+0x60>)
   1d3e6:	6193      	str	r3, [r2, #24]
   1d3e8:	2303      	movs	r3, #3
   1d3ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3ee:	480b      	ldr	r0, [pc, #44]	; (1d41c <smp_send.constprop.0+0x64>)
   1d3f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d3f4:	f00b fa87 	bl	28906 <z_log_msg_static_create.constprop.0>
   1d3f8:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   1d3fa:	4628      	mov	r0, r5
   1d3fc:	f002 fb12 	bl	1fa24 <net_buf_unref>
}
   1d400:	46bd      	mov	sp, r7
   1d402:	bdb0      	pop	{r4, r5, r7, pc}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1d404:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d408:	2300      	movs	r3, #0
   1d40a:	f504 7090 	add.w	r0, r4, #288	; 0x120
   1d40e:	f006 fc33 	bl	23c78 <k_work_reschedule>
   1d412:	e7f5      	b.n	1d400 <smp_send.constprop.0+0x48>
   1d414:	0002db64 	.word	0x0002db64
   1d418:	0002eaaa 	.word	0x0002eaaa
   1d41c:	0002a898 	.word	0x0002a898

0001d420 <bt_smp_pkey_ready.part.0>:
	}

	return 0;
}

static void bt_smp_pkey_ready(const uint8_t *pkey)
   1d420:	b580      	push	{r7, lr}
   1d422:	af00      	add	r7, sp, #0
	LOG_DBG("");

	sc_public_key = pkey;

	if (!pkey) {
		LOG_WRN("Public key not available");
   1d424:	b088      	sub	sp, #32
   1d426:	466a      	mov	r2, sp
   1d428:	4b06      	ldr	r3, [pc, #24]	; (1d444 <bt_smp_pkey_ready.part.0+0x24>)
   1d42a:	6153      	str	r3, [r2, #20]
   1d42c:	4b06      	ldr	r3, [pc, #24]	; (1d448 <bt_smp_pkey_ready.part.0+0x28>)
   1d42e:	6193      	str	r3, [r2, #24]
   1d430:	2303      	movs	r3, #3
   1d432:	f842 3f10 	str.w	r3, [r2, #16]!
   1d436:	4805      	ldr	r0, [pc, #20]	; (1d44c <bt_smp_pkey_ready.part.0+0x2c>)
   1d438:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1d43c:	f00b fa63 	bl	28906 <z_log_msg_static_create.constprop.0>
		if (err) {
			smp_error(smp, err);
		}
#endif /* CONFIG_BT_PERIPHERAL */
	}
}
   1d440:	46bd      	mov	sp, r7
   1d442:	bd80      	pop	{r7, pc}
   1d444:	0002e36c 	.word	0x0002e36c
   1d448:	0002e8cb 	.word	0x0002e8cb
   1d44c:	0002a898 	.word	0x0002a898

0001d450 <bt_smp_accept.part.0>:
	} else {
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1d450:	b580      	push	{r7, lr}
   1d452:	af00      	add	r7, sp, #0
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1d454:	b088      	sub	sp, #32
   1d456:	466a      	mov	r2, sp
   1d458:	4b08      	ldr	r3, [pc, #32]	; (1d47c <bt_smp_accept.part.0+0x2c>)
   1d45a:	6153      	str	r3, [r2, #20]
   1d45c:	4b08      	ldr	r3, [pc, #32]	; (1d480 <bt_smp_accept.part.0+0x30>)
   1d45e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d462:	2304      	movs	r3, #4
   1d464:	f842 3f10 	str.w	r3, [r2, #16]!
   1d468:	4806      	ldr	r0, [pc, #24]	; (1d484 <bt_smp_accept.part.0+0x34>)
   1d46a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d46e:	f00b fa4a 	bl	28906 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1d472:	f06f 000b 	mvn.w	r0, #11
   1d476:	46bd      	mov	sp, r7
   1d478:	bd80      	pop	{r7, pc}
   1d47a:	bf00      	nop
   1d47c:	0002e389 	.word	0x0002e389
   1d480:	0002ea3c 	.word	0x0002ea3c
   1d484:	0002a898 	.word	0x0002a898

0001d488 <bt_smp_accept>:
		if (smp->chan.chan.conn) {
   1d488:	4b06      	ldr	r3, [pc, #24]	; (1d4a4 <bt_smp_accept+0x1c>)
   1d48a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
   1d48e:	b10a      	cbz	r2, 1d494 <bt_smp_accept+0xc>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d490:	f7ff bfde 	b.w	1d450 <bt_smp_accept.part.0>
		smp->chan.chan.ops = &ops;
   1d494:	4804      	ldr	r0, [pc, #16]	; (1d4a8 <bt_smp_accept+0x20>)
   1d496:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
		*chan = &smp->chan.chan;
   1d49a:	33ec      	adds	r3, #236	; 0xec
   1d49c:	600b      	str	r3, [r1, #0]
}
   1d49e:	4610      	mov	r0, r2
   1d4a0:	4770      	bx	lr
   1d4a2:	bf00      	nop
   1d4a4:	200021f8 	.word	0x200021f8
   1d4a8:	0002b280 	.word	0x0002b280

0001d4ac <smp_chan_get.part.0>:
static struct bt_smp *smp_chan_get(struct bt_conn *conn)
   1d4ac:	b580      	push	{r7, lr}
   1d4ae:	af00      	add	r7, sp, #0
		LOG_ERR("Unable to find SMP channel");
   1d4b0:	b088      	sub	sp, #32
   1d4b2:	466a      	mov	r2, sp
   1d4b4:	4b07      	ldr	r3, [pc, #28]	; (1d4d4 <smp_chan_get.part.0+0x28>)
   1d4b6:	6153      	str	r3, [r2, #20]
   1d4b8:	4b07      	ldr	r3, [pc, #28]	; (1d4d8 <smp_chan_get.part.0+0x2c>)
   1d4ba:	6193      	str	r3, [r2, #24]
   1d4bc:	2303      	movs	r3, #3
   1d4be:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4c2:	4806      	ldr	r0, [pc, #24]	; (1d4dc <smp_chan_get.part.0+0x30>)
   1d4c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d4c8:	f00b fa1d 	bl	28906 <z_log_msg_static_create.constprop.0>
}
   1d4cc:	2000      	movs	r0, #0
   1d4ce:	46bd      	mov	sp, r7
   1d4d0:	bd80      	pop	{r7, pc}
   1d4d2:	bf00      	nop
   1d4d4:	0002e3b2 	.word	0x0002e3b2
   1d4d8:	0002eadf 	.word	0x0002eadf
   1d4dc:	0002a898 	.word	0x0002a898

0001d4e0 <smp_sign_buf>:
{
   1d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4e4:	b08a      	sub	sp, #40	; 0x28
	sys_mem_swap(m, len + sizeof(cnt));
   1d4e6:	1d14      	adds	r4, r2, #4
{
   1d4e8:	af00      	add	r7, sp, #0
   1d4ea:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1d4ec:	588b      	ldr	r3, [r1, r2]
   1d4ee:	607b      	str	r3, [r7, #4]
   1d4f0:	eb01 0802 	add.w	r8, r1, r2
{
   1d4f4:	4606      	mov	r6, r0
	sys_mem_swap(m, len + sizeof(cnt));
   1d4f6:	4621      	mov	r1, r4
   1d4f8:	4628      	mov	r0, r5
   1d4fa:	f00b f9bc 	bl	28876 <sys_mem_swap>
	for (; length > 0; length--) {
   1d4fe:	f107 0208 	add.w	r2, r7, #8
   1d502:	f106 0310 	add.w	r3, r6, #16
   1d506:	4610      	mov	r0, r2
		*pdst++ = *psrc--;
   1d508:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
   1d50c:	f802 1b01 	strb.w	r1, [r2], #1
	for (; length > 0; length--) {
   1d510:	42b3      	cmp	r3, r6
   1d512:	d1f9      	bne.n	1d508 <smp_sign_buf+0x28>
	err = bt_crypto_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1d514:	f107 0318 	add.w	r3, r7, #24
   1d518:	4622      	mov	r2, r4
   1d51a:	4629      	mov	r1, r5
   1d51c:	f00b fcde 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   1d520:	4606      	mov	r6, r0
   1d522:	b1a0      	cbz	r0, 1d54e <smp_sign_buf+0x6e>
		LOG_ERR("Data signing failed");
   1d524:	466c      	mov	r4, sp
   1d526:	b088      	sub	sp, #32
   1d528:	466a      	mov	r2, sp
   1d52a:	4b14      	ldr	r3, [pc, #80]	; (1d57c <smp_sign_buf+0x9c>)
   1d52c:	6153      	str	r3, [r2, #20]
   1d52e:	4b14      	ldr	r3, [pc, #80]	; (1d580 <smp_sign_buf+0xa0>)
   1d530:	6193      	str	r3, [r2, #24]
   1d532:	2303      	movs	r3, #3
   1d534:	f842 3f10 	str.w	r3, [r2, #16]!
   1d538:	4812      	ldr	r0, [pc, #72]	; (1d584 <smp_sign_buf+0xa4>)
   1d53a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d53e:	f00b f9e2 	bl	28906 <z_log_msg_static_create.constprop.0>
   1d542:	46a5      	mov	sp, r4
}
   1d544:	4630      	mov	r0, r6
   1d546:	3728      	adds	r7, #40	; 0x28
   1d548:	46bd      	mov	sp, r7
   1d54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_mem_swap(tmp, sizeof(tmp));
   1d54e:	f107 0018 	add.w	r0, r7, #24
   1d552:	2110      	movs	r1, #16
   1d554:	f00b f98f 	bl	28876 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1d558:	2204      	movs	r2, #4
   1d55a:	18b9      	adds	r1, r7, r2
   1d55c:	f107 001c 	add.w	r0, r7, #28
   1d560:	f009 fb44 	bl	26bec <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1d564:	4621      	mov	r1, r4
   1d566:	4628      	mov	r0, r5
   1d568:	f00b f985 	bl	28876 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1d56c:	220c      	movs	r2, #12
   1d56e:	f107 011c 	add.w	r1, r7, #28
   1d572:	4640      	mov	r0, r8
   1d574:	f009 fb3a 	bl	26bec <memcpy>
	return 0;
   1d578:	e7e4      	b.n	1d544 <smp_sign_buf+0x64>
   1d57a:	bf00      	nop
   1d57c:	0002e3d1 	.word	0x0002e3d1
   1d580:	0002eabf 	.word	0x0002eabf
   1d584:	0002a898 	.word	0x0002a898

0001d588 <smp_init>:
{
   1d588:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d58a:	22ec      	movs	r2, #236	; 0xec
{
   1d58c:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d58e:	2100      	movs	r1, #0
   1d590:	f009 fb37 	bl	26c02 <memset>
	if (bt_rand(smp->prnd, 16)) {
   1d594:	2110      	movs	r1, #16
   1d596:	f105 0027 	add.w	r0, r5, #39	; 0x27
   1d59a:	f004 fcab 	bl	21ef4 <bt_rand>
   1d59e:	4604      	mov	r4, r0
   1d5a0:	b948      	cbnz	r0, 1d5b6 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1d5a2:	2105      	movs	r1, #5
   1d5a4:	4628      	mov	r0, r5
   1d5a6:	f00b f9bc 	bl	28922 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1d5aa:	f7fb fbff 	bl	18dac <bt_pub_key_get>
   1d5ae:	4b03      	ldr	r3, [pc, #12]	; (1d5bc <smp_init+0x34>)
   1d5b0:	6018      	str	r0, [r3, #0]
}
   1d5b2:	4620      	mov	r0, r4
   1d5b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d5b6:	2408      	movs	r4, #8
   1d5b8:	e7fb      	b.n	1d5b2 <smp_init+0x2a>
   1d5ba:	bf00      	nop
   1d5bc:	20003074 	.word	0x20003074

0001d5c0 <smp_dhkey_generate>:
{
   1d5c0:	b5b0      	push	{r4, r5, r7, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d5c2:	1d05      	adds	r5, r0, #4
{
   1d5c4:	af00      	add	r7, sp, #0
   1d5c6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d5c8:	2108      	movs	r1, #8
   1d5ca:	4628      	mov	r0, r5
   1d5cc:	f00b f9a9 	bl	28922 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1d5d0:	490e      	ldr	r1, [pc, #56]	; (1d60c <smp_dhkey_generate+0x4c>)
   1d5d2:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d5d6:	f7fb fbf9 	bl	18dcc <bt_dh_key_gen>
	if (err) {
   1d5da:	b1a0      	cbz	r0, 1d606 <smp_dhkey_generate+0x46>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1d5dc:	2108      	movs	r1, #8
   1d5de:	4628      	mov	r0, r5
   1d5e0:	f00b f982 	bl	288e8 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1d5e4:	466c      	mov	r4, sp
   1d5e6:	b088      	sub	sp, #32
   1d5e8:	466a      	mov	r2, sp
   1d5ea:	4b09      	ldr	r3, [pc, #36]	; (1d610 <smp_dhkey_generate+0x50>)
   1d5ec:	6153      	str	r3, [r2, #20]
   1d5ee:	4b09      	ldr	r3, [pc, #36]	; (1d614 <smp_dhkey_generate+0x54>)
   1d5f0:	6193      	str	r3, [r2, #24]
   1d5f2:	2303      	movs	r3, #3
   1d5f4:	4808      	ldr	r0, [pc, #32]	; (1d618 <smp_dhkey_generate+0x58>)
   1d5f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1d5fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d5fe:	f00b f982 	bl	28906 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1d602:	2008      	movs	r0, #8
   1d604:	46a5      	mov	sp, r4
}
   1d606:	46bd      	mov	sp, r7
   1d608:	bdb0      	pop	{r4, r5, r7, pc}
   1d60a:	bf00      	nop
   1d60c:	00028d3f 	.word	0x00028d3f
   1d610:	0002e3e9 	.word	0x0002e3e9
   1d614:	0002e9f8 	.word	0x0002e9f8
   1d618:	0002a898 	.word	0x0002a898

0001d61c <smp_ident_info>:
{
   1d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d61e:	4604      	mov	r4, r0
   1d620:	af00      	add	r7, sp, #0
   1d622:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d624:	3004      	adds	r0, #4
   1d626:	210d      	movs	r1, #13
   1d628:	f00b f934 	bl	28894 <atomic_test_bit>
   1d62c:	b348      	cbz	r0, 1d682 <smp_ident_info+0x66>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1d62e:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d630:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1d634:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1d638:	7a19      	ldrb	r1, [r3, #8]
   1d63a:	462a      	mov	r2, r5
   1d63c:	2002      	movs	r0, #2
   1d63e:	f00b fc21 	bl	28e84 <bt_keys_get_type>
		if (!keys) {
   1d642:	b9c8      	cbnz	r0, 1d678 <smp_ident_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d644:	4628      	mov	r0, r5
   1d646:	f7f8 f949 	bl	158dc <bt_addr_le_str>
   1d64a:	466c      	mov	r4, sp
   1d64c:	b08a      	sub	sp, #40	; 0x28
   1d64e:	466a      	mov	r2, sp
   1d650:	4b0f      	ldr	r3, [pc, #60]	; (1d690 <smp_ident_info+0x74>)
   1d652:	6153      	str	r3, [r2, #20]
   1d654:	4b0f      	ldr	r3, [pc, #60]	; (1d694 <smp_ident_info+0x78>)
   1d656:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d65a:	f240 3301 	movw	r3, #769	; 0x301
   1d65e:	8413      	strh	r3, [r2, #32]
   1d660:	4b0d      	ldr	r3, [pc, #52]	; (1d698 <smp_ident_info+0x7c>)
   1d662:	480e      	ldr	r0, [pc, #56]	; (1d69c <smp_ident_info+0x80>)
   1d664:	f842 3f10 	str.w	r3, [r2, #16]!
   1d668:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d66c:	f00b f94b 	bl	28906 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d670:	2008      	movs	r0, #8
   1d672:	46a5      	mov	sp, r4
}
   1d674:	46bd      	mov	sp, r7
   1d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1d678:	2210      	movs	r2, #16
   1d67a:	4631      	mov	r1, r6
   1d67c:	302a      	adds	r0, #42	; 0x2a
   1d67e:	f009 fab5 	bl	26bec <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1d682:	4620      	mov	r0, r4
   1d684:	2109      	movs	r1, #9
   1d686:	f00b f94c 	bl	28922 <atomic_set_bit>
	return 0;
   1d68a:	2000      	movs	r0, #0
   1d68c:	e7f2      	b.n	1d674 <smp_ident_info+0x58>
   1d68e:	bf00      	nop
   1d690:	0002e406 	.word	0x0002e406
   1d694:	0002e9b1 	.word	0x0002e9b1
   1d698:	01000004 	.word	0x01000004
   1d69c:	0002a898 	.word	0x0002a898

0001d6a0 <smp_encrypt_info>:
{
   1d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6a2:	4604      	mov	r4, r0
   1d6a4:	af00      	add	r7, sp, #0
   1d6a6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d6a8:	3004      	adds	r0, #4
   1d6aa:	210d      	movs	r1, #13
   1d6ac:	f00b f8f2 	bl	28894 <atomic_test_bit>
   1d6b0:	b348      	cbz	r0, 1d706 <smp_encrypt_info+0x66>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1d6b2:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1d6b4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1d6b8:	f103 0588 	add.w	r5, r3, #136	; 0x88
   1d6bc:	7a19      	ldrb	r1, [r3, #8]
   1d6be:	462a      	mov	r2, r5
   1d6c0:	2004      	movs	r0, #4
   1d6c2:	f00b fbdf 	bl	28e84 <bt_keys_get_type>
		if (!keys) {
   1d6c6:	b9c8      	cbnz	r0, 1d6fc <smp_encrypt_info+0x5c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1d6c8:	4628      	mov	r0, r5
   1d6ca:	f7f8 f907 	bl	158dc <bt_addr_le_str>
   1d6ce:	466c      	mov	r4, sp
   1d6d0:	b08a      	sub	sp, #40	; 0x28
   1d6d2:	466a      	mov	r2, sp
   1d6d4:	4b0f      	ldr	r3, [pc, #60]	; (1d714 <smp_encrypt_info+0x74>)
   1d6d6:	6153      	str	r3, [r2, #20]
   1d6d8:	4b0f      	ldr	r3, [pc, #60]	; (1d718 <smp_encrypt_info+0x78>)
   1d6da:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1d6de:	f240 3301 	movw	r3, #769	; 0x301
   1d6e2:	8413      	strh	r3, [r2, #32]
   1d6e4:	4b0d      	ldr	r3, [pc, #52]	; (1d71c <smp_encrypt_info+0x7c>)
   1d6e6:	480e      	ldr	r0, [pc, #56]	; (1d720 <smp_encrypt_info+0x80>)
   1d6e8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d6ec:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d6f0:	f00b f909 	bl	28906 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1d6f4:	2008      	movs	r0, #8
   1d6f6:	46a5      	mov	sp, r4
}
   1d6f8:	46bd      	mov	sp, r7
   1d6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1d6fc:	2210      	movs	r2, #16
   1d6fe:	4631      	mov	r1, r6
   1d700:	301a      	adds	r0, #26
   1d702:	f009 fa73 	bl	26bec <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1d706:	4620      	mov	r0, r4
   1d708:	2107      	movs	r1, #7
   1d70a:	f00b f90a 	bl	28922 <atomic_set_bit>
	return 0;
   1d70e:	2000      	movs	r0, #0
   1d710:	e7f2      	b.n	1d6f8 <smp_encrypt_info+0x58>
   1d712:	bf00      	nop
   1d714:	0002e406 	.word	0x0002e406
   1d718:	0002e98e 	.word	0x0002e98e
   1d71c:	01000004 	.word	0x01000004
   1d720:	0002a898 	.word	0x0002a898

0001d724 <smp_send_pairing_confirm>:
{
   1d724:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d726:	b083      	sub	sp, #12
	switch (smp->method) {
   1d728:	7a04      	ldrb	r4, [r0, #8]
   1d72a:	2c02      	cmp	r4, #2
{
   1d72c:	af02      	add	r7, sp, #8
   1d72e:	4605      	mov	r5, r0
	switch (smp->method) {
   1d730:	d823      	bhi.n	1d77a <smp_send_pairing_confirm+0x56>
   1d732:	b144      	cbz	r4, 1d746 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d734:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1d738:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1d73c:	40dc      	lsrs	r4, r3
   1d73e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1d742:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d746:	2103      	movs	r1, #3
   1d748:	4628      	mov	r0, r5
   1d74a:	f00b f8fe 	bl	2894a <smp_create_pdu.constprop.0>
	if (!buf) {
   1d74e:	4606      	mov	r6, r0
   1d750:	b330      	cbz	r0, 1d7a0 <smp_send_pairing_confirm+0x7c>
   1d752:	2110      	movs	r1, #16
   1d754:	300c      	adds	r0, #12
   1d756:	f00b fcb7 	bl	290c8 <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1d75a:	9000      	str	r0, [sp, #0]
   1d75c:	4819      	ldr	r0, [pc, #100]	; (1d7c4 <smp_send_pairing_confirm+0xa0>)
   1d75e:	4623      	mov	r3, r4
   1d760:	6800      	ldr	r0, [r0, #0]
   1d762:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1d766:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1d76a:	f00b fbd5 	bl	28f18 <bt_crypto_f4>
   1d76e:	4604      	mov	r4, r0
   1d770:	b1e0      	cbz	r0, 1d7ac <smp_send_pairing_confirm+0x88>
		net_buf_unref(buf);
   1d772:	4630      	mov	r0, r6
   1d774:	f002 f956 	bl	1fa24 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d778:	e012      	b.n	1d7a0 <smp_send_pairing_confirm+0x7c>
	switch (smp->method) {
   1d77a:	2c03      	cmp	r4, #3
   1d77c:	d014      	beq.n	1d7a8 <smp_send_pairing_confirm+0x84>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d77e:	466d      	mov	r5, sp
   1d780:	b088      	sub	sp, #32
   1d782:	aa02      	add	r2, sp, #8
   1d784:	4b10      	ldr	r3, [pc, #64]	; (1d7c8 <smp_send_pairing_confirm+0xa4>)
   1d786:	6153      	str	r3, [r2, #20]
   1d788:	4b10      	ldr	r3, [pc, #64]	; (1d7cc <smp_send_pairing_confirm+0xa8>)
   1d78a:	4811      	ldr	r0, [pc, #68]	; (1d7d0 <smp_send_pairing_confirm+0xac>)
	switch (smp->method) {
   1d78c:	e9c2 3406 	strd	r3, r4, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d790:	2304      	movs	r3, #4
   1d792:	f842 3f10 	str.w	r3, [r2, #16]!
   1d796:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d79a:	f00b f8b4 	bl	28906 <z_log_msg_static_create.constprop.0>
   1d79e:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   1d7a0:	2008      	movs	r0, #8
}
   1d7a2:	3704      	adds	r7, #4
   1d7a4:	46bd      	mov	sp, r7
   1d7a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (smp->method) {
   1d7a8:	2400      	movs	r4, #0
   1d7aa:	e7cc      	b.n	1d746 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
   1d7ac:	4602      	mov	r2, r0
   1d7ae:	4631      	mov	r1, r6
   1d7b0:	4628      	mov	r0, r5
   1d7b2:	f7ff fe01 	bl	1d3b8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d7b6:	1d28      	adds	r0, r5, #4
   1d7b8:	4621      	mov	r1, r4
   1d7ba:	f00b f895 	bl	288e8 <atomic_clear_bit>
	return 0;
   1d7be:	4620      	mov	r0, r4
   1d7c0:	e7ef      	b.n	1d7a2 <smp_send_pairing_confirm+0x7e>
   1d7c2:	bf00      	nop
   1d7c4:	20003074 	.word	0x20003074
   1d7c8:	0002e424 	.word	0x0002e424
   1d7cc:	0002ea91 	.word	0x0002ea91
   1d7d0:	0002a898 	.word	0x0002a898

0001d7d4 <smp_public_key_periph>:
{
   1d7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d7d8:	af00      	add	r7, sp, #0
   1d7da:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7dc:	f7ff fd8a 	bl	1d2f4 <latch_auth_cb>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d7e0:	1d26      	adds	r6, r4, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7e2:	4680      	mov	r8, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d7e4:	210e      	movs	r1, #14
   1d7e6:	4630      	mov	r0, r6
   1d7e8:	f00b f854 	bl	28894 <atomic_test_bit>
   1d7ec:	b9c8      	cbnz	r0, 1d822 <smp_public_key_periph+0x4e>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1d7ee:	4b54      	ldr	r3, [pc, #336]	; (1d940 <smp_public_key_periph+0x16c>)
   1d7f0:	2220      	movs	r2, #32
   1d7f2:	6819      	ldr	r1, [r3, #0]
   1d7f4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1d7f8:	f009 f9e8 	bl	26bcc <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d7fc:	b988      	cbnz	r0, 1d822 <smp_public_key_periph+0x4e>
		LOG_WRN("Remote public key rejected");
   1d7fe:	466c      	mov	r4, sp
   1d800:	b088      	sub	sp, #32
   1d802:	466a      	mov	r2, sp
   1d804:	4b4f      	ldr	r3, [pc, #316]	; (1d944 <smp_public_key_periph+0x170>)
   1d806:	6153      	str	r3, [r2, #20]
   1d808:	4b4f      	ldr	r3, [pc, #316]	; (1d948 <smp_public_key_periph+0x174>)
   1d80a:	6193      	str	r3, [r2, #24]
   1d80c:	2303      	movs	r3, #3
   1d80e:	f842 3f10 	str.w	r3, [r2, #16]!
   1d812:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d816:	484d      	ldr	r0, [pc, #308]	; (1d94c <smp_public_key_periph+0x178>)
   1d818:	f00b f875 	bl	28906 <z_log_msg_static_create.constprop.0>
   1d81c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1d81e:	2008      	movs	r0, #8
   1d820:	e02f      	b.n	1d882 <smp_public_key_periph+0xae>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d822:	210c      	movs	r1, #12
   1d824:	4620      	mov	r0, r4
   1d826:	f00b f890 	bl	2894a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d82a:	4605      	mov	r5, r0
   1d82c:	2800      	cmp	r0, #0
   1d82e:	d0f6      	beq.n	1d81e <smp_public_key_periph+0x4a>
   1d830:	2140      	movs	r1, #64	; 0x40
   1d832:	300c      	adds	r0, #12
   1d834:	f00b fc48 	bl	290c8 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1d838:	f8df a104 	ldr.w	sl, [pc, #260]	; 1d940 <smp_public_key_periph+0x16c>
   1d83c:	2220      	movs	r2, #32
   1d83e:	f8da 1000 	ldr.w	r1, [sl]
   1d842:	4681      	mov	r9, r0
   1d844:	f009 f9d2 	bl	26bec <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1d848:	f8da 1000 	ldr.w	r1, [sl]
   1d84c:	2220      	movs	r2, #32
   1d84e:	4411      	add	r1, r2
   1d850:	eb09 0002 	add.w	r0, r9, r2
   1d854:	f009 f9ca 	bl	26bec <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d858:	2200      	movs	r2, #0
   1d85a:	4629      	mov	r1, r5
   1d85c:	4620      	mov	r0, r4
   1d85e:	f7ff fdab 	bl	1d3b8 <smp_send.constprop.0>
	switch (smp->method) {
   1d862:	7a23      	ldrb	r3, [r4, #8]
   1d864:	2b05      	cmp	r3, #5
   1d866:	d85a      	bhi.n	1d91e <smp_public_key_periph+0x14a>
   1d868:	e8df f003 	tbb	[pc, r3]
   1d86c:	030e3a03 	.word	0x030e3a03
   1d870:	5659      	.short	0x5659
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d872:	2104      	movs	r1, #4
   1d874:	4620      	mov	r0, r4
   1d876:	f00b f854 	bl	28922 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   1d87a:	f7ff ff53 	bl	1d724 <smp_send_pairing_confirm>
		if (err) {
   1d87e:	2800      	cmp	r0, #0
   1d880:	d03e      	beq.n	1d900 <smp_public_key_periph+0x12c>
}
   1d882:	46bd      	mov	sp, r7
   1d884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d888:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d88a:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d88e:	f7ff fd31 	bl	1d2f4 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d892:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d894:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d896:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1d89a:	f004 fb2b 	bl	21ef4 <bt_rand>
   1d89e:	2800      	cmp	r0, #0
   1d8a0:	d1bd      	bne.n	1d81e <smp_public_key_periph+0x4a>
		smp->passkey %= 1000000;
   1d8a2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d8a6:	4a2a      	ldr	r2, [pc, #168]	; (1d950 <smp_public_key_periph+0x17c>)
   1d8a8:	fbb3 f1f2 	udiv	r1, r3, r2
   1d8ac:	fb02 3311 	mls	r3, r2, r1, r3
   1d8b0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1d8b4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d8b8:	b155      	cbz	r5, 1d8d0 <smp_public_key_periph+0xfc>
   1d8ba:	682b      	ldr	r3, [r5, #0]
   1d8bc:	b143      	cbz	r3, 1d8d0 <smp_public_key_periph+0xfc>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d8be:	210b      	movs	r1, #11
   1d8c0:	4630      	mov	r0, r6
   1d8c2:	f00b f82e 	bl	28922 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1d8c6:	682b      	ldr	r3, [r5, #0]
   1d8c8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1d8cc:	4640      	mov	r0, r8
   1d8ce:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d8d0:	2103      	movs	r1, #3
   1d8d2:	4620      	mov	r0, r4
   1d8d4:	f00b f825 	bl	28922 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d8d8:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d8da:	f00b f822 	bl	28922 <atomic_set_bit>
		break;
   1d8de:	e00f      	b.n	1d900 <smp_public_key_periph+0x12c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1d8e0:	4620      	mov	r0, r4
   1d8e2:	2103      	movs	r1, #3
   1d8e4:	f00b f81d 	bl	28922 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1d8e8:	210e      	movs	r1, #14
   1d8ea:	f00b f81a 	bl	28922 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d8ee:	4630      	mov	r0, r6
   1d8f0:	210a      	movs	r1, #10
   1d8f2:	f00b f816 	bl	28922 <atomic_set_bit>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1d8f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d8fa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d8fe:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d900:	4630      	mov	r0, r6
   1d902:	2107      	movs	r1, #7
   1d904:	f00b f80d 	bl	28922 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1d908:	2008      	movs	r0, #8
   1d90a:	f7ff fce5 	bl	1d2d8 <smp_find>
   1d90e:	b9a0      	cbnz	r0, 1d93a <smp_public_key_periph+0x166>
		return smp_dhkey_generate(smp);
   1d910:	4620      	mov	r0, r4
   1d912:	f7ff fe55 	bl	1d5c0 <smp_dhkey_generate>
   1d916:	e7b4      	b.n	1d882 <smp_public_key_periph+0xae>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1d918:	2104      	movs	r1, #4
   1d91a:	4620      	mov	r0, r4
   1d91c:	e7dd      	b.n	1d8da <smp_public_key_periph+0x106>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d91e:	466c      	mov	r4, sp
   1d920:	b088      	sub	sp, #32
   1d922:	466a      	mov	r2, sp
   1d924:	490b      	ldr	r1, [pc, #44]	; (1d954 <smp_public_key_periph+0x180>)
   1d926:	6151      	str	r1, [r2, #20]
   1d928:	4907      	ldr	r1, [pc, #28]	; (1d948 <smp_public_key_periph+0x174>)
	switch (smp->method) {
   1d92a:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d92e:	2304      	movs	r3, #4
   1d930:	f842 3f10 	str.w	r3, [r2, #16]!
   1d934:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d938:	e76d      	b.n	1d816 <smp_public_key_periph+0x42>
	return 0;
   1d93a:	2000      	movs	r0, #0
   1d93c:	e7a1      	b.n	1d882 <smp_public_key_periph+0xae>
   1d93e:	bf00      	nop
   1d940:	20003074 	.word	0x20003074
   1d944:	0002e444 	.word	0x0002e444
   1d948:	0002ea0b 	.word	0x0002ea0b
   1d94c:	0002a898 	.word	0x0002a898
   1d950:	000f4240 	.word	0x000f4240
   1d954:	0002e424 	.word	0x0002e424

0001d958 <smp_public_key>:
{
   1d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d95a:	460c      	mov	r4, r1
   1d95c:	af00      	add	r7, sp, #0
   1d95e:	4605      	mov	r5, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d960:	f7ff fcc8 	bl	1d2f4 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1d964:	68e6      	ldr	r6, [r4, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d966:	f105 0457 	add.w	r4, r5, #87	; 0x57
   1d96a:	2220      	movs	r2, #32
   1d96c:	4631      	mov	r1, r6
   1d96e:	4620      	mov	r0, r4
   1d970:	f009 f93c 	bl	26bec <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1d974:	2220      	movs	r2, #32
   1d976:	18b1      	adds	r1, r6, r2
   1d978:	f105 0077 	add.w	r0, r5, #119	; 0x77
   1d97c:	f009 f936 	bl	26bec <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1d980:	4620      	mov	r0, r4
   1d982:	f7fb f95b 	bl	18c3c <bt_pub_key_is_debug>
   1d986:	b948      	cbnz	r0, 1d99c <smp_public_key+0x44>
	if (!sc_public_key) {
   1d988:	4b1e      	ldr	r3, [pc, #120]	; (1da04 <smp_public_key+0xac>)
   1d98a:	681c      	ldr	r4, [r3, #0]
   1d98c:	2c00      	cmp	r4, #0
   1d98e:	d134      	bne.n	1d9fa <smp_public_key+0xa2>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1d990:	1d28      	adds	r0, r5, #4
   1d992:	2106      	movs	r1, #6
   1d994:	f00a ffc5 	bl	28922 <atomic_set_bit>
	return 0;
   1d998:	4620      	mov	r0, r4
		return 0;
   1d99a:	e02c      	b.n	1d9f6 <smp_public_key+0x9e>
		LOG_INF("Remote is using Debug Public key");
   1d99c:	466c      	mov	r4, sp
   1d99e:	b088      	sub	sp, #32
   1d9a0:	466a      	mov	r2, sp
   1d9a2:	4b19      	ldr	r3, [pc, #100]	; (1da08 <smp_public_key+0xb0>)
   1d9a4:	6153      	str	r3, [r2, #20]
   1d9a6:	4b19      	ldr	r3, [pc, #100]	; (1da0c <smp_public_key+0xb4>)
   1d9a8:	6193      	str	r3, [r2, #24]
   1d9aa:	2303      	movs	r3, #3
   1d9ac:	f842 3f10 	str.w	r3, [r2, #16]!
   1d9b0:	4817      	ldr	r0, [pc, #92]	; (1da10 <smp_public_key+0xb8>)
   1d9b2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   1d9b6:	f00a ffa6 	bl	28906 <z_log_msg_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1d9ba:	210e      	movs	r1, #14
   1d9bc:	46a5      	mov	sp, r4
   1d9be:	1d28      	adds	r0, r5, #4
   1d9c0:	f00a ffaf 	bl	28922 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1d9c4:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
	if (!conn->le.keys) {
   1d9c8:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d9cc:	b933      	cbnz	r3, 1d9dc <smp_public_key+0x84>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d9ce:	7a20      	ldrb	r0, [r4, #8]
   1d9d0:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1d9d4:	f001 fc30 	bl	1f238 <bt_keys_get_addr>
   1d9d8:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1d9dc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1d9e0:	2b00      	cmp	r3, #0
   1d9e2:	d0d1      	beq.n	1d988 <smp_public_key+0x30>
   1d9e4:	89da      	ldrh	r2, [r3, #14]
   1d9e6:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1d9ea:	2a00      	cmp	r2, #0
   1d9ec:	d0cc      	beq.n	1d988 <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1d9ee:	7b5b      	ldrb	r3, [r3, #13]
   1d9f0:	079b      	lsls	r3, r3, #30
   1d9f2:	d4c9      	bmi.n	1d988 <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d9f4:	2003      	movs	r0, #3
}
   1d9f6:	46bd      	mov	sp, r7
   1d9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = smp_public_key_periph(smp);
   1d9fa:	4628      	mov	r0, r5
   1d9fc:	f7ff feea 	bl	1d7d4 <smp_public_key_periph>
	if (err) {
   1da00:	e7f9      	b.n	1d9f6 <smp_public_key+0x9e>
   1da02:	bf00      	nop
   1da04:	20003074 	.word	0x20003074
   1da08:	0002e463 	.word	0x0002e463
   1da0c:	0002ea21 	.word	0x0002ea21
   1da10:	0002a898 	.word	0x0002a898

0001da14 <smp_pairing_req>:
{
   1da14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da18:	460d      	mov	r5, r1
   1da1a:	b083      	sub	sp, #12
   1da1c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1da1e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1da22:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1da24:	f7ff fc66 	bl	1d2f4 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   1da28:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1da2c:	f899 3003 	ldrb.w	r3, [r9, #3]
   1da30:	3b07      	subs	r3, #7
   1da32:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1da34:	4680      	mov	r8, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1da36:	d904      	bls.n	1da42 <smp_pairing_req+0x2e>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1da38:	2006      	movs	r0, #6
}
   1da3a:	370c      	adds	r7, #12
   1da3c:	46bd      	mov	sp, r7
   1da3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1da42:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
   1da46:	b15b      	cbz	r3, 1da60 <smp_pairing_req+0x4c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1da48:	1d25      	adds	r5, r4, #4
   1da4a:	210f      	movs	r1, #15
   1da4c:	4628      	mov	r0, r5
   1da4e:	f00a ff21 	bl	28894 <atomic_test_bit>
   1da52:	b980      	cbnz	r0, 1da76 <smp_pairing_req+0x62>
		int ret = smp_init(smp);
   1da54:	4620      	mov	r0, r4
   1da56:	f7ff fd97 	bl	1d588 <smp_init>
		if (ret) {
   1da5a:	b160      	cbz	r0, 1da76 <smp_pairing_req+0x62>
			return ret;
   1da5c:	b2c0      	uxtb	r0, r0
   1da5e:	e7ec      	b.n	1da3a <smp_pairing_req+0x26>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1da60:	7a30      	ldrb	r0, [r6, #8]
   1da62:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1da66:	f001 fbe7 	bl	1f238 <bt_keys_get_addr>
   1da6a:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
		if (!conn->le.keys) {
   1da6e:	2800      	cmp	r0, #0
   1da70:	d1ea      	bne.n	1da48 <smp_pairing_req+0x34>
			return BT_SMP_ERR_UNSPECIFIED;
   1da72:	2008      	movs	r0, #8
   1da74:	e7e1      	b.n	1da3a <smp_pairing_req+0x26>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1da76:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   1da78:	2206      	movs	r2, #6
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1da7a:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1da7c:	4649      	mov	r1, r9
   1da7e:	f104 000a 	add.w	r0, r4, #10
   1da82:	f009 f8b3 	bl	26bec <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1da86:	2302      	movs	r3, #2
   1da88:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   1da8a:	f899 1002 	ldrb.w	r1, [r9, #2]
   1da8e:	4620      	mov	r0, r4
   1da90:	f7ff fc74 	bl	1d37c <get_auth>
   1da94:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   1da96:	4620      	mov	r0, r4
   1da98:	f7ff fc4a 	bl	1d330 <get_io_capa>
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1da9c:	2310      	movs	r3, #16
	rsp->io_capability = get_io_capa(smp);
   1da9e:	7460      	strb	r0, [r4, #17]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1daa0:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   1daa2:	f899 3004 	ldrb.w	r3, [r9, #4]
   1daa6:	f003 0307 	and.w	r3, r3, #7
   1daaa:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1daac:	f899 3005 	ldrb.w	r3, [r9, #5]
   1dab0:	f003 0307 	and.w	r3, r3, #7
   1dab4:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1dab6:	7ce3      	ldrb	r3, [r4, #19]
   1dab8:	071b      	lsls	r3, r3, #28
   1daba:	d50f      	bpl.n	1dadc <smp_pairing_req+0xc8>
   1dabc:	f899 3002 	ldrb.w	r3, [r9, #2]
   1dac0:	0718      	lsls	r0, r3, #28
   1dac2:	d50b      	bpl.n	1dadc <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1dac4:	2105      	movs	r1, #5
   1dac6:	4628      	mov	r0, r5
   1dac8:	f00a ff2b 	bl	28922 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   1dacc:	7d63      	ldrb	r3, [r4, #21]
   1dace:	f003 0306 	and.w	r3, r3, #6
   1dad2:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   1dad4:	7da3      	ldrb	r3, [r4, #22]
   1dad6:	f003 0306 	and.w	r3, r3, #6
   1dada:	75a3      	strb	r3, [r4, #22]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dadc:	2105      	movs	r1, #5
   1dade:	4628      	mov	r0, r5
   1dae0:	f00a fed8 	bl	28894 <atomic_test_bit>
   1dae4:	2800      	cmp	r0, #0
   1dae6:	d051      	beq.n	1db8c <smp_pairing_req+0x178>
		rsp->oob_flag = sc_oobd_present ? BT_SMP_OOB_PRESENT :
   1dae8:	4ba1      	ldr	r3, [pc, #644]	; (1dd70 <smp_pairing_req+0x35c>)
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1daea:	781b      	ldrb	r3, [r3, #0]
   1daec:	74a3      	strb	r3, [r4, #18]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1daee:	7ce3      	ldrb	r3, [r4, #19]
   1daf0:	0699      	lsls	r1, r3, #26
   1daf2:	d507      	bpl.n	1db04 <smp_pairing_req+0xf0>
   1daf4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1daf8:	069a      	lsls	r2, r3, #26
   1dafa:	d503      	bpl.n	1db04 <smp_pairing_req+0xf0>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1dafc:	2114      	movs	r1, #20
   1dafe:	4628      	mov	r0, r5
   1db00:	f00a ff0f 	bl	28922 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1db04:	7ce3      	ldrb	r3, [r4, #19]
   1db06:	07db      	lsls	r3, r3, #31
   1db08:	d542      	bpl.n	1db90 <smp_pairing_req+0x17c>
   1db0a:	f899 3002 	ldrb.w	r3, [r9, #2]
   1db0e:	07d8      	lsls	r0, r3, #31
   1db10:	d53e      	bpl.n	1db90 <smp_pairing_req+0x17c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1db12:	210d      	movs	r1, #13
   1db14:	4628      	mov	r0, r5
   1db16:	f00a ff04 	bl	28922 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   1db1a:	7da3      	ldrb	r3, [r4, #22]
   1db1c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   1db20:	7d63      	ldrb	r3, [r4, #21]
   1db22:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1db26:	2103      	movs	r1, #3
   1db28:	4628      	mov	r0, r5
   1db2a:	f00a fefa 	bl	28922 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1db2e:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   1db30:	f899 9000 	ldrb.w	r9, [r9]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1db34:	f00a feae 	bl	28894 <atomic_test_bit>
   1db38:	bb70      	cbnz	r0, 1db98 <smp_pairing_req+0x184>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1db3a:	f1b9 0f04 	cmp.w	r9, #4
   1db3e:	d84b      	bhi.n	1dbd8 <smp_pairing_req+0x1c4>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1db40:	7ae3      	ldrb	r3, [r4, #11]
   1db42:	7ca2      	ldrb	r2, [r4, #18]
   1db44:	4013      	ands	r3, r2
   1db46:	07d9      	lsls	r1, r3, #31
   1db48:	d444      	bmi.n	1dbd4 <smp_pairing_req+0x1c0>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1db4a:	7b21      	ldrb	r1, [r4, #12]
   1db4c:	7ce3      	ldrb	r3, [r4, #19]
   1db4e:	4319      	orrs	r1, r3
   1db50:	f011 0104 	ands.w	r1, r1, #4
   1db54:	d011      	beq.n	1db7a <smp_pairing_req+0x166>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1db56:	4620      	mov	r0, r4
   1db58:	f7ff fbea 	bl	1d330 <get_io_capa>
   1db5c:	4b85      	ldr	r3, [pc, #532]	; (1dd74 <smp_pairing_req+0x360>)
   1db5e:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1db62:	4499      	add	r9, r3
   1db64:	f819 1000 	ldrb.w	r1, [r9, r0]
	if (method == PASSKEY_ROLE) {
   1db68:	2904      	cmp	r1, #4
   1db6a:	d106      	bne.n	1db7a <smp_pairing_req+0x166>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1db6c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1db70:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1db72:	2b00      	cmp	r3, #0
   1db74:	bf14      	ite	ne
   1db76:	2101      	movne	r1, #1
   1db78:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, req->io_capability);
   1db7a:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1db7c:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
   1db80:	4620      	mov	r0, r4
   1db82:	f00a fe90 	bl	288a6 <update_keys_check>
   1db86:	bb48      	cbnz	r0, 1dbdc <smp_pairing_req+0x1c8>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1db88:	2003      	movs	r0, #3
   1db8a:	e756      	b.n	1da3a <smp_pairing_req+0x26>
		rsp->oob_flag = legacy_oobd_present ? BT_SMP_OOB_PRESENT :
   1db8c:	4b7a      	ldr	r3, [pc, #488]	; (1dd78 <smp_pairing_req+0x364>)
   1db8e:	e7ac      	b.n	1daea <smp_pairing_req+0xd6>
		rsp->init_key_dist = 0;
   1db90:	2300      	movs	r3, #0
   1db92:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist = 0;
   1db94:	75a3      	strb	r3, [r4, #22]
   1db96:	e7c0      	b.n	1db1a <smp_pairing_req+0x106>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1db98:	7b23      	ldrb	r3, [r4, #12]
   1db9a:	7ce0      	ldrb	r0, [r4, #19]
   1db9c:	ea03 0200 	and.w	r2, r3, r0
   1dba0:	0712      	lsls	r2, r2, #28
   1dba2:	d506      	bpl.n	1dbb2 <smp_pairing_req+0x19e>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1dba4:	7ae2      	ldrb	r2, [r4, #11]
   1dba6:	f894 c012 	ldrb.w	ip, [r4, #18]
   1dbaa:	ea42 020c 	orr.w	r2, r2, ip
   1dbae:	07d2      	lsls	r2, r2, #31
   1dbb0:	d4e3      	bmi.n	1db7a <smp_pairing_req+0x166>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1dbb2:	f1b9 0f04 	cmp.w	r9, #4
   1dbb6:	d80f      	bhi.n	1dbd8 <smp_pairing_req+0x1c4>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1dbb8:	ea43 0100 	orr.w	r1, r3, r0
   1dbbc:	f011 0104 	ands.w	r1, r1, #4
   1dbc0:	d0db      	beq.n	1db7a <smp_pairing_req+0x166>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1dbc2:	4620      	mov	r0, r4
   1dbc4:	f7ff fbb4 	bl	1d330 <get_io_capa>
   1dbc8:	4b6c      	ldr	r3, [pc, #432]	; (1dd7c <smp_pairing_req+0x368>)
   1dbca:	eb09 0989 	add.w	r9, r9, r9, lsl #2
   1dbce:	444b      	add	r3, r9
   1dbd0:	5c19      	ldrb	r1, [r3, r0]
   1dbd2:	e7d2      	b.n	1db7a <smp_pairing_req+0x166>
		return LEGACY_OOB;
   1dbd4:	2106      	movs	r1, #6
   1dbd6:	e7d0      	b.n	1db7a <smp_pairing_req+0x166>
		return JUST_WORKS;
   1dbd8:	2100      	movs	r1, #0
   1dbda:	e7ce      	b.n	1db7a <smp_pairing_req+0x166>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1dbdc:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1dbe0:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1dbe2:	2b03      	cmp	r3, #3
   1dbe4:	d043      	beq.n	1dc6e <smp_pairing_req+0x25a>
   1dbe6:	d831      	bhi.n	1dc4c <smp_pairing_req+0x238>
   1dbe8:	3b01      	subs	r3, #1
   1dbea:	2b01      	cmp	r3, #1
   1dbec:	f63f af41 	bhi.w	1da72 <smp_pairing_req+0x5e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dbf0:	2105      	movs	r1, #5
   1dbf2:	4628      	mov	r0, r5
   1dbf4:	f00a fe4e 	bl	28894 <atomic_test_bit>
   1dbf8:	2800      	cmp	r0, #0
   1dbfa:	f040 80cb 	bne.w	1dd94 <smp_pairing_req+0x380>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dbfe:	4620      	mov	r0, r4
   1dc00:	f7ff fb78 	bl	1d2f4 <latch_auth_cb>
   1dc04:	4680      	mov	r8, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc06:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1dc08:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc0c:	f7ff fb72 	bl	1d2f4 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1dc10:	f109 0188 	add.w	r1, r9, #136	; 0x88
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dc14:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1dc16:	f899 0008 	ldrb.w	r0, [r9, #8]
   1dc1a:	f001 fbf7 	bl	1f40c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1dc1e:	7a23      	ldrb	r3, [r4, #8]
   1dc20:	b348      	cbz	r0, 1dc76 <smp_pairing_req+0x262>
   1dc22:	7b42      	ldrb	r2, [r0, #13]
   1dc24:	07d2      	lsls	r2, r2, #31
   1dc26:	d526      	bpl.n	1dc76 <smp_pairing_req+0x262>
   1dc28:	bb2b      	cbnz	r3, 1dc76 <smp_pairing_req+0x262>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1dc2a:	466c      	mov	r4, sp
   1dc2c:	b088      	sub	sp, #32
   1dc2e:	466a      	mov	r2, sp
   1dc30:	4b53      	ldr	r3, [pc, #332]	; (1dd80 <smp_pairing_req+0x36c>)
   1dc32:	6153      	str	r3, [r2, #20]
   1dc34:	4b53      	ldr	r3, [pc, #332]	; (1dd84 <smp_pairing_req+0x370>)
   1dc36:	6193      	str	r3, [r2, #24]
   1dc38:	2303      	movs	r3, #3
   1dc3a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc3e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dc42:	4851      	ldr	r0, [pc, #324]	; (1dd88 <smp_pairing_req+0x374>)
   1dc44:	f00a fe5f 	bl	28906 <z_log_msg_static_create.constprop.0>
   1dc48:	46a5      	mov	sp, r4
	if (ret) {
   1dc4a:	e712      	b.n	1da72 <smp_pairing_req+0x5e>
	switch (sec) {
   1dc4c:	2b04      	cmp	r3, #4
   1dc4e:	f47f af10 	bne.w	1da72 <smp_pairing_req+0x5e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1dc52:	7d23      	ldrb	r3, [r4, #20]
   1dc54:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1dc56:	4293      	cmp	r3, r2
   1dc58:	bf28      	it	cs
   1dc5a:	4613      	movcs	r3, r2
   1dc5c:	2b10      	cmp	r3, #16
   1dc5e:	f47f aeeb 	bne.w	1da38 <smp_pairing_req+0x24>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dc62:	2105      	movs	r1, #5
   1dc64:	4628      	mov	r0, r5
   1dc66:	f00a fe15 	bl	28894 <atomic_test_bit>
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	d08c      	beq.n	1db88 <smp_pairing_req+0x174>
		if (smp->method == JUST_WORKS) {
   1dc6e:	7a23      	ldrb	r3, [r4, #8]
   1dc70:	2b00      	cmp	r3, #0
   1dc72:	d1bd      	bne.n	1dbf0 <smp_pairing_req+0x1dc>
   1dc74:	e788      	b.n	1db88 <smp_pairing_req+0x174>
	switch (smp->method) {
   1dc76:	2b06      	cmp	r3, #6
   1dc78:	d85f      	bhi.n	1dd3a <smp_pairing_req+0x326>
   1dc7a:	e8df f003 	tbb	[pc, r3]
   1dc7e:	5617      	.short	0x5617
   1dc80:	5e5e5e2f 	.word	0x5e5e5e2f
   1dc84:	04          	.byte	0x04
   1dc85:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1dc86:	2e00      	cmp	r6, #0
   1dc88:	d065      	beq.n	1dd56 <smp_pairing_req+0x342>
   1dc8a:	68f3      	ldr	r3, [r6, #12]
   1dc8c:	2b00      	cmp	r3, #0
   1dc8e:	d062      	beq.n	1dd56 <smp_pairing_req+0x342>
			struct bt_conn_oob_info info = {
   1dc90:	2300      	movs	r3, #0
   1dc92:	80bb      	strh	r3, [r7, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dc94:	210a      	movs	r1, #10
   1dc96:	4628      	mov	r0, r5
   1dc98:	f00a fe43 	bl	28922 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1dc9c:	68f3      	ldr	r3, [r6, #12]
   1dc9e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dca2:	1d39      	adds	r1, r7, #4
   1dca4:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1dca6:	7a23      	ldrb	r3, [r4, #8]
   1dca8:	2b00      	cmp	r3, #0
   1dcaa:	d156      	bne.n	1dd5a <smp_pairing_req+0x346>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1dcac:	210f      	movs	r1, #15
   1dcae:	4628      	mov	r0, r5
   1dcb0:	f00a fdf0 	bl	28894 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1dcb4:	2800      	cmp	r0, #0
   1dcb6:	d150      	bne.n	1dd5a <smp_pairing_req+0x346>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1dcb8:	f1b8 0f00 	cmp.w	r8, #0
   1dcbc:	d04d      	beq.n	1dd5a <smp_pairing_req+0x346>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1dcbe:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1dcc2:	2b00      	cmp	r3, #0
   1dcc4:	d049      	beq.n	1dd5a <smp_pairing_req+0x346>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dcc6:	4628      	mov	r0, r5
   1dcc8:	210a      	movs	r1, #10
   1dcca:	f00a fe2a 	bl	28922 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1dcce:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1dcd2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1dcd6:	4798      	blx	r3
		return 0;
   1dcd8:	2000      	movs	r0, #0
   1dcda:	e6ae      	b.n	1da3a <smp_pairing_req+0x26>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1dcdc:	2104      	movs	r1, #4
   1dcde:	1878      	adds	r0, r7, r1
   1dce0:	f004 f908 	bl	21ef4 <bt_rand>
   1dce4:	2800      	cmp	r0, #0
   1dce6:	f47f aec4 	bne.w	1da72 <smp_pairing_req+0x5e>
			passkey %= 1000000;
   1dcea:	687b      	ldr	r3, [r7, #4]
   1dcec:	4a27      	ldr	r2, [pc, #156]	; (1dd8c <smp_pairing_req+0x378>)
   1dcee:	fbb3 f1f2 	udiv	r1, r3, r2
   1dcf2:	fb02 3311 	mls	r3, r2, r1, r3
   1dcf6:	607b      	str	r3, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1dcf8:	b14e      	cbz	r6, 1dd0e <smp_pairing_req+0x2fa>
   1dcfa:	6833      	ldr	r3, [r6, #0]
   1dcfc:	b13b      	cbz	r3, 1dd0e <smp_pairing_req+0x2fa>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dcfe:	210b      	movs	r1, #11
   1dd00:	4628      	mov	r0, r5
   1dd02:	f00a fe0e 	bl	28922 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1dd06:	6833      	ldr	r3, [r6, #0]
   1dd08:	6879      	ldr	r1, [r7, #4]
   1dd0a:	4648      	mov	r0, r9
   1dd0c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1dd0e:	687b      	ldr	r3, [r7, #4]
	dst[0] = val;
   1dd10:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1dd14:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1dd18:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1dd1a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1dd1e:	0a1b      	lsrs	r3, r3, #8
   1dd20:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1dd24:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1dd28:	e7bd      	b.n	1dca6 <smp_pairing_req+0x292>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dd2a:	4628      	mov	r0, r5
   1dd2c:	210a      	movs	r1, #10
   1dd2e:	f00a fdf8 	bl	28922 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1dd32:	6873      	ldr	r3, [r6, #4]
   1dd34:	4648      	mov	r0, r9
   1dd36:	4798      	blx	r3
	if (ret) {
   1dd38:	e7b5      	b.n	1dca6 <smp_pairing_req+0x292>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dd3a:	466c      	mov	r4, sp
   1dd3c:	b088      	sub	sp, #32
   1dd3e:	466a      	mov	r2, sp
   1dd40:	4913      	ldr	r1, [pc, #76]	; (1dd90 <smp_pairing_req+0x37c>)
   1dd42:	6151      	str	r1, [r2, #20]
   1dd44:	490f      	ldr	r1, [pc, #60]	; (1dd84 <smp_pairing_req+0x370>)
	switch (smp->method) {
   1dd46:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dd4a:	2304      	movs	r3, #4
   1dd4c:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd50:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dd54:	e775      	b.n	1dc42 <smp_pairing_req+0x22e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1dd56:	2002      	movs	r0, #2
   1dd58:	e66f      	b.n	1da3a <smp_pairing_req+0x26>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1dd5a:	2103      	movs	r1, #3
   1dd5c:	4620      	mov	r0, r4
   1dd5e:	f00a fde0 	bl	28922 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1dd62:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1dd64:	f00a fddd 	bl	28922 <atomic_set_bit>
	return send_pairing_rsp(smp);
   1dd68:	f00a fe0e 	bl	28988 <send_pairing_rsp>
   1dd6c:	e665      	b.n	1da3a <smp_pairing_req+0x26>
   1dd6e:	bf00      	nop
   1dd70:	200034ba 	.word	0x200034ba
   1dd74:	0002eb05 	.word	0x0002eb05
   1dd78:	200034b9 	.word	0x200034b9
   1dd7c:	0002eaec 	.word	0x0002eaec
   1dd80:	0002e488 	.word	0x0002e488
   1dd84:	0002e917 	.word	0x0002e917
   1dd88:	0002a898 	.word	0x0002a898
   1dd8c:	000f4240 	.word	0x000f4240
   1dd90:	0002e424 	.word	0x0002e424
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1dd94:	7a23      	ldrb	r3, [r4, #8]
   1dd96:	b993      	cbnz	r3, 1ddbe <smp_pairing_req+0x3aa>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1dd98:	210f      	movs	r1, #15
   1dd9a:	4628      	mov	r0, r5
   1dd9c:	f00a fd7a 	bl	28894 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1dda0:	b968      	cbnz	r0, 1ddbe <smp_pairing_req+0x3aa>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1dda2:	f1b8 0f00 	cmp.w	r8, #0
   1dda6:	d00a      	beq.n	1ddbe <smp_pairing_req+0x3aa>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1dda8:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ddac:	b13b      	cbz	r3, 1ddbe <smp_pairing_req+0x3aa>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1ddae:	4628      	mov	r0, r5
   1ddb0:	210a      	movs	r1, #10
   1ddb2:	f00a fdb6 	bl	28922 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1ddb6:	f8d8 3014 	ldr.w	r3, [r8, #20]
   1ddba:	4630      	mov	r0, r6
   1ddbc:	e78b      	b.n	1dcd6 <smp_pairing_req+0x2c2>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1ddbe:	210c      	movs	r1, #12
   1ddc0:	4620      	mov	r0, r4
   1ddc2:	e7cf      	b.n	1dd64 <smp_pairing_req+0x350>

0001ddc4 <compute_and_check_and_send_periph_dhcheck>:
{
   1ddc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ddc8:	b091      	sub	sp, #68	; 0x44
   1ddca:	4604      	mov	r4, r0
   1ddcc:	af04      	add	r7, sp, #16
	(void)memset(r, 0, sizeof(r));
   1ddce:	2210      	movs	r2, #16
   1ddd0:	2100      	movs	r1, #0
   1ddd2:	f107 0020 	add.w	r0, r7, #32
   1ddd6:	f008 ff14 	bl	26c02 <memset>
	switch (smp->method) {
   1ddda:	7a23      	ldrb	r3, [r4, #8]
   1dddc:	2b05      	cmp	r3, #5
   1ddde:	d835      	bhi.n	1de4c <compute_and_check_and_send_periph_dhcheck+0x88>
   1dde0:	e8df f003 	tbb	[pc, r3]
   1dde4:	0a03030a 	.word	0x0a03030a
   1dde8:	2e34      	.short	0x2e34
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1ddea:	2204      	movs	r2, #4
   1ddec:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1ddf0:	f107 0020 	add.w	r0, r7, #32
   1ddf4:	f008 fefa 	bl	26bec <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1ddf8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1ddfc:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1de00:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1de04:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1de08:	f104 0637 	add.w	r6, r4, #55	; 0x37
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1de0c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   1de10:	f104 0927 	add.w	r9, r4, #39	; 0x27
   1de14:	9200      	str	r2, [sp, #0]
   1de16:	338f      	adds	r3, #143	; 0x8f
   1de18:	464a      	mov	r2, r9
   1de1a:	4631      	mov	r1, r6
   1de1c:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1de20:	f001 fca2 	bl	1f768 <bt_crypto_f5>
   1de24:	b340      	cbz	r0, 1de78 <compute_and_check_and_send_periph_dhcheck+0xb4>
		LOG_ERR("Calculate LTK failed");
   1de26:	466c      	mov	r4, sp
   1de28:	b088      	sub	sp, #32
   1de2a:	aa04      	add	r2, sp, #16
   1de2c:	4b45      	ldr	r3, [pc, #276]	; (1df44 <compute_and_check_and_send_periph_dhcheck+0x180>)
   1de2e:	6153      	str	r3, [r2, #20]
   1de30:	4b45      	ldr	r3, [pc, #276]	; (1df48 <compute_and_check_and_send_periph_dhcheck+0x184>)
   1de32:	6193      	str	r3, [r2, #24]
   1de34:	2303      	movs	r3, #3
   1de36:	f842 3f10 	str.w	r3, [r2, #16]!
   1de3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de3e:	e012      	b.n	1de66 <compute_and_check_and_send_periph_dhcheck+0xa2>
		if (smp->oobd_remote) {
   1de40:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1de44:	2900      	cmp	r1, #0
   1de46:	d0d7      	beq.n	1ddf8 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1de48:	2210      	movs	r2, #16
   1de4a:	e7d1      	b.n	1ddf0 <compute_and_check_and_send_periph_dhcheck+0x2c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1de4c:	466c      	mov	r4, sp
   1de4e:	b088      	sub	sp, #32
   1de50:	aa04      	add	r2, sp, #16
   1de52:	493e      	ldr	r1, [pc, #248]	; (1df4c <compute_and_check_and_send_periph_dhcheck+0x188>)
   1de54:	6151      	str	r1, [r2, #20]
   1de56:	493c      	ldr	r1, [pc, #240]	; (1df48 <compute_and_check_and_send_periph_dhcheck+0x184>)
	switch (smp->method) {
   1de58:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1de5c:	2304      	movs	r3, #4
   1de5e:	f842 3f10 	str.w	r3, [r2, #16]!
   1de62:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Calculate LTK failed");
   1de66:	483a      	ldr	r0, [pc, #232]	; (1df50 <compute_and_check_and_send_periph_dhcheck+0x18c>)
   1de68:	f00a fd4d 	bl	28906 <z_log_msg_static_create.constprop.0>
   1de6c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1de6e:	2008      	movs	r0, #8
}
   1de70:	3734      	adds	r7, #52	; 0x34
   1de72:	46bd      	mov	sp, r7
   1de74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   1de78:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1de7c:	f103 028f 	add.w	r2, r3, #143	; 0x8f
   1de80:	3396      	adds	r3, #150	; 0x96
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   1de82:	f107 0810 	add.w	r8, r7, #16
   1de86:	9301      	str	r3, [sp, #4]
   1de88:	f104 0311 	add.w	r3, r4, #17
   1de8c:	9202      	str	r2, [sp, #8]
   1de8e:	9300      	str	r3, [sp, #0]
   1de90:	f8cd 800c 	str.w	r8, [sp, #12]
   1de94:	f107 0320 	add.w	r3, r7, #32
   1de98:	4632      	mov	r2, r6
   1de9a:	4649      	mov	r1, r9
   1de9c:	4628      	mov	r0, r5
   1de9e:	f00b f860 	bl	28f62 <bt_crypto_f6>
   1dea2:	b120      	cbz	r0, 1deae <compute_and_check_and_send_periph_dhcheck+0xea>
		LOG_ERR("Calculate local DHKey check failed");
   1dea4:	466c      	mov	r4, sp
   1dea6:	b088      	sub	sp, #32
   1dea8:	aa04      	add	r2, sp, #16
   1deaa:	4b2a      	ldr	r3, [pc, #168]	; (1df54 <compute_and_check_and_send_periph_dhcheck+0x190>)
   1deac:	e7bf      	b.n	1de2e <compute_and_check_and_send_periph_dhcheck+0x6a>
	if (smp->method == LE_SC_OOB) {
   1deae:	7a23      	ldrb	r3, [r4, #8]
   1deb0:	2b05      	cmp	r3, #5
   1deb2:	d107      	bne.n	1dec4 <compute_and_check_and_send_periph_dhcheck+0x100>
		if (smp->oobd_local) {
   1deb4:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1deb8:	2210      	movs	r2, #16
   1deba:	f107 0020 	add.w	r0, r7, #32
		if (smp->oobd_local) {
   1debe:	b1c9      	cbz	r1, 1def4 <compute_and_check_and_send_periph_dhcheck+0x130>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   1dec0:	f008 fe94 	bl	26bec <memcpy>
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1dec4:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1dec8:	9703      	str	r7, [sp, #12]
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1deca:	f103 0296 	add.w	r2, r3, #150	; 0x96
   1dece:	338f      	adds	r3, #143	; 0x8f
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   1ded0:	9301      	str	r3, [sp, #4]
   1ded2:	f104 030a 	add.w	r3, r4, #10
   1ded6:	9202      	str	r2, [sp, #8]
   1ded8:	9300      	str	r3, [sp, #0]
   1deda:	464a      	mov	r2, r9
   1dedc:	f107 0320 	add.w	r3, r7, #32
   1dee0:	4631      	mov	r1, r6
   1dee2:	4628      	mov	r0, r5
   1dee4:	f00b f83d 	bl	28f62 <bt_crypto_f6>
   1dee8:	b138      	cbz	r0, 1defa <compute_and_check_and_send_periph_dhcheck+0x136>
		LOG_ERR("Calculate remote DHKey check failed");
   1deea:	466c      	mov	r4, sp
   1deec:	b088      	sub	sp, #32
   1deee:	aa04      	add	r2, sp, #16
   1def0:	4b19      	ldr	r3, [pc, #100]	; (1df58 <compute_and_check_and_send_periph_dhcheck+0x194>)
   1def2:	e79c      	b.n	1de2e <compute_and_check_and_send_periph_dhcheck+0x6a>
			memset(r, 0, sizeof(r));
   1def4:	f008 fe85 	bl	26c02 <memset>
   1def8:	e7e4      	b.n	1dec4 <compute_and_check_and_send_periph_dhcheck+0x100>
	if (memcmp(smp->e, re, 16)) {
   1defa:	2210      	movs	r2, #16
   1defc:	4639      	mov	r1, r7
   1defe:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1df02:	f008 fe63 	bl	26bcc <memcmp>
   1df06:	4605      	mov	r5, r0
   1df08:	b9c8      	cbnz	r0, 1df3e <compute_and_check_and_send_periph_dhcheck+0x17a>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1df0a:	210d      	movs	r1, #13
   1df0c:	4620      	mov	r0, r4
   1df0e:	f00a fd1c 	bl	2894a <smp_create_pdu.constprop.0>
	if (!buf) {
   1df12:	4606      	mov	r6, r0
   1df14:	2800      	cmp	r0, #0
   1df16:	d0aa      	beq.n	1de6e <compute_and_check_and_send_periph_dhcheck+0xaa>
   1df18:	2110      	movs	r1, #16
   1df1a:	300c      	adds	r0, #12
   1df1c:	f00b f8d4 	bl	290c8 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1df20:	2210      	movs	r2, #16
   1df22:	4641      	mov	r1, r8
   1df24:	f008 fe62 	bl	26bec <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1df28:	462a      	mov	r2, r5
   1df2a:	4631      	mov	r1, r6
   1df2c:	4620      	mov	r0, r4
   1df2e:	f7ff fa43 	bl	1d3b8 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1df32:	1d20      	adds	r0, r4, #4
   1df34:	2101      	movs	r1, #1
   1df36:	f00a fcf4 	bl	28922 <atomic_set_bit>
	return 0;
   1df3a:	4628      	mov	r0, r5
   1df3c:	e798      	b.n	1de70 <compute_and_check_and_send_periph_dhcheck+0xac>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1df3e:	200b      	movs	r0, #11
   1df40:	e796      	b.n	1de70 <compute_and_check_and_send_periph_dhcheck+0xac>
   1df42:	bf00      	nop
   1df44:	0002e4b9 	.word	0x0002e4b9
   1df48:	0002ea5d 	.word	0x0002ea5d
   1df4c:	0002e424 	.word	0x0002e424
   1df50:	0002a898 	.word	0x0002a898
   1df54:	0002e4d2 	.word	0x0002e4d2
   1df58:	0002e4f9 	.word	0x0002e4f9

0001df5c <bt_smp_connected>:
{
   1df5c:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1df5e:	490b      	ldr	r1, [pc, #44]	; (1df8c <bt_smp_connected+0x30>)
{
   1df60:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1df62:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1df66:	3034      	adds	r0, #52	; 0x34
   1df68:	f00b ff2a 	bl	29dc0 <k_work_init_delayable>
	smp_reset(smp);
   1df6c:	4628      	mov	r0, r5
   1df6e:	f00a fd7e 	bl	28a6e <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1df72:	f3bf 8f5b 	dmb	ish
   1df76:	4b06      	ldr	r3, [pc, #24]	; (1df90 <bt_smp_connected+0x34>)
   1df78:	3464      	adds	r4, #100	; 0x64
   1df7a:	e854 2f00 	ldrex	r2, [r4]
   1df7e:	e844 3100 	strex	r1, r3, [r4]
   1df82:	2900      	cmp	r1, #0
   1df84:	d1f9      	bne.n	1df7a <bt_smp_connected+0x1e>
   1df86:	f3bf 8f5b 	dmb	ish
}
   1df8a:	bd38      	pop	{r3, r4, r5, pc}
   1df8c:	0001f079 	.word	0x0001f079
   1df90:	200021f8 	.word	0x200021f8

0001df94 <smp_pairing_confirm>:
{
   1df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1df96:	1d05      	adds	r5, r0, #4
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1df98:	68ce      	ldr	r6, [r1, #12]
{
   1df9a:	af00      	add	r7, sp, #0
   1df9c:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1df9e:	210b      	movs	r1, #11
   1dfa0:	4628      	mov	r0, r5
   1dfa2:	f00a fca1 	bl	288e8 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1dfa6:	4631      	mov	r1, r6
   1dfa8:	2210      	movs	r2, #16
   1dfaa:	f104 0017 	add.w	r0, r4, #23
   1dfae:	f008 fe1d 	bl	26bec <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dfb2:	2105      	movs	r1, #5
   1dfb4:	4628      	mov	r0, r5
   1dfb6:	f00a fc6d 	bl	28894 <atomic_test_bit>
   1dfba:	b920      	cbnz	r0, 1dfc6 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1dfbc:	4620      	mov	r0, r4
   1dfbe:	f00a fdd3 	bl	28b68 <legacy_pairing_confirm>
}
   1dfc2:	46bd      	mov	sp, r7
   1dfc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (smp->method) {
   1dfc6:	7a23      	ldrb	r3, [r4, #8]
   1dfc8:	2b01      	cmp	r3, #1
   1dfca:	d008      	beq.n	1dfde <smp_pairing_confirm+0x4a>
   1dfcc:	2b02      	cmp	r3, #2
   1dfce:	d112      	bne.n	1dff6 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1dfd0:	2104      	movs	r1, #4
   1dfd2:	4620      	mov	r0, r4
   1dfd4:	f00a fca5 	bl	28922 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1dfd8:	f7ff fba4 	bl	1d724 <smp_send_pairing_confirm>
   1dfdc:	e7f1      	b.n	1dfc2 <smp_pairing_confirm+0x2e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1dfde:	210a      	movs	r1, #10
   1dfe0:	4628      	mov	r0, r5
   1dfe2:	f00a fc57 	bl	28894 <atomic_test_bit>
   1dfe6:	2800      	cmp	r0, #0
   1dfe8:	d0f2      	beq.n	1dfd0 <smp_pairing_confirm+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1dfea:	4628      	mov	r0, r5
   1dfec:	2100      	movs	r1, #0
   1dfee:	f00a fc98 	bl	28922 <atomic_set_bit>
			return 0;
   1dff2:	2000      	movs	r0, #0
   1dff4:	e7e5      	b.n	1dfc2 <smp_pairing_confirm+0x2e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dff6:	466c      	mov	r4, sp
   1dff8:	b088      	sub	sp, #32
   1dffa:	466a      	mov	r2, sp
   1dffc:	4907      	ldr	r1, [pc, #28]	; (1e01c <smp_pairing_confirm+0x88>)
   1dffe:	6151      	str	r1, [r2, #20]
   1e000:	4907      	ldr	r1, [pc, #28]	; (1e020 <smp_pairing_confirm+0x8c>)
   1e002:	4808      	ldr	r0, [pc, #32]	; (1e024 <smp_pairing_confirm+0x90>)
	switch (smp->method) {
   1e004:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1e008:	2304      	movs	r3, #4
   1e00a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e00e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e012:	f00a fc78 	bl	28906 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
   1e016:	2008      	movs	r0, #8
   1e018:	46a5      	mov	sp, r4
   1e01a:	e7d2      	b.n	1dfc2 <smp_pairing_confirm+0x2e>
   1e01c:	0002e424 	.word	0x0002e424
   1e020:	0002e929 	.word	0x0002e929
   1e024:	0002a898 	.word	0x0002a898

0001e028 <smp_pairing_random>:
{
   1e028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e02c:	b088      	sub	sp, #32
   1e02e:	af04      	add	r7, sp, #16
   1e030:	4604      	mov	r4, r0
   1e032:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e034:	f7ff f95e 	bl	1d2f4 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1e038:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1e03c:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e03e:	4606      	mov	r6, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1e040:	2210      	movs	r2, #16
   1e042:	4640      	mov	r0, r8
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e044:	1d25      	adds	r5, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1e046:	f008 fdd1 	bl	26bec <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e04a:	2105      	movs	r1, #5
   1e04c:	4628      	mov	r0, r5
   1e04e:	f00a fc21 	bl	28894 <atomic_test_bit>
   1e052:	2800      	cmp	r0, #0
   1e054:	d14d      	bne.n	1e0f2 <smp_pairing_random+0xca>
	struct bt_conn *conn = smp->chan.chan.conn;
   1e056:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1e05a:	9702      	str	r7, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1e05c:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1e060:	f104 0647 	add.w	r6, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1e064:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1e066:	9201      	str	r2, [sp, #4]
   1e068:	9300      	str	r3, [sp, #0]
   1e06a:	f104 0209 	add.w	r2, r4, #9
   1e06e:	f104 0310 	add.w	r3, r4, #16
   1e072:	4641      	mov	r1, r8
   1e074:	4630      	mov	r0, r6
   1e076:	f00a fd1d 	bl	28ab4 <smp_c1>
	if (err) {
   1e07a:	bb40      	cbnz	r0, 1e0ce <smp_pairing_random+0xa6>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1e07c:	2210      	movs	r2, #16
   1e07e:	4639      	mov	r1, r7
   1e080:	f104 0017 	add.w	r0, r4, #23
   1e084:	f008 fda2 	bl	26bcc <memcmp>
   1e088:	2800      	cmp	r0, #0
   1e08a:	d176      	bne.n	1e17a <smp_pairing_random+0x152>
	memcpy(out, r2, 8);
   1e08c:	2208      	movs	r2, #8
   1e08e:	4641      	mov	r1, r8
   1e090:	4638      	mov	r0, r7
   1e092:	f008 fdab 	bl	26bec <memcpy>
	memcpy(out + 8, r1, 8);
   1e096:	2208      	movs	r2, #8
   1e098:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1e09c:	18b8      	adds	r0, r7, r2
   1e09e:	f008 fda5 	bl	26bec <memcpy>
	return bt_encrypt_le(k, out, out);
   1e0a2:	463a      	mov	r2, r7
   1e0a4:	4639      	mov	r1, r7
   1e0a6:	4630      	mov	r0, r6
   1e0a8:	f00b fb72 	bl	29790 <bt_encrypt_le>
		if (err) {
   1e0ac:	b1a0      	cbz	r0, 1e0d8 <smp_pairing_random+0xb0>
			LOG_ERR("Calculate STK failed");
   1e0ae:	466c      	mov	r4, sp
   1e0b0:	b088      	sub	sp, #32
   1e0b2:	aa04      	add	r2, sp, #16
   1e0b4:	4b60      	ldr	r3, [pc, #384]	; (1e238 <smp_pairing_random+0x210>)
   1e0b6:	6153      	str	r3, [r2, #20]
   1e0b8:	4b60      	ldr	r3, [pc, #384]	; (1e23c <smp_pairing_random+0x214>)
		LOG_ERR("Calculate confirm failed");
   1e0ba:	6193      	str	r3, [r2, #24]
   1e0bc:	2303      	movs	r3, #3
   1e0be:	f842 3f10 	str.w	r3, [r2, #16]!
   1e0c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e0c6:	485e      	ldr	r0, [pc, #376]	; (1e240 <smp_pairing_random+0x218>)
   1e0c8:	f00a fc1d 	bl	28906 <z_log_msg_static_create.constprop.0>
   1e0cc:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   1e0ce:	2008      	movs	r0, #8
}
   1e0d0:	3710      	adds	r7, #16
   1e0d2:	46bd      	mov	sp, r7
   1e0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   1e0d8:	4639      	mov	r1, r7
   1e0da:	2210      	movs	r2, #16
   1e0dc:	4630      	mov	r0, r6
   1e0de:	f008 fd85 	bl	26bec <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e0e2:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1e0e4:	4628      	mov	r0, r5
   1e0e6:	f00a fc1c 	bl	28922 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1e0ea:	4620      	mov	r0, r4
   1e0ec:	f00a fc65 	bl	289ba <smp_send_pairing_random>
   1e0f0:	e7ee      	b.n	1e0d0 <smp_pairing_random+0xa8>
	switch (smp->method) {
   1e0f2:	7a23      	ldrb	r3, [r4, #8]
   1e0f4:	2b05      	cmp	r3, #5
   1e0f6:	f200 808e 	bhi.w	1e216 <smp_pairing_random+0x1ee>
   1e0fa:	e8df f003 	tbb	[pc, r3]
   1e0fe:	1e18      	.short	0x1e18
   1e100:	648c031e 	.word	0x648c031e
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   1e104:	494f      	ldr	r1, [pc, #316]	; (1e244 <smp_pairing_random+0x21c>)
   1e106:	9700      	str	r7, [sp, #0]
   1e108:	6809      	ldr	r1, [r1, #0]
   1e10a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   1e10e:	4642      	mov	r2, r8
   1e110:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e114:	f001 fb90 	bl	1f838 <bt_crypto_g2>
   1e118:	2800      	cmp	r0, #0
   1e11a:	d1d8      	bne.n	1e0ce <smp_pairing_random+0xa6>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1e11c:	210a      	movs	r1, #10
   1e11e:	4628      	mov	r0, r5
   1e120:	f00a fbff 	bl	28922 <atomic_set_bit>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1e124:	68b3      	ldr	r3, [r6, #8]
   1e126:	6839      	ldr	r1, [r7, #0]
   1e128:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e12c:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1e12e:	210d      	movs	r1, #13
   1e130:	4620      	mov	r0, r4
   1e132:	f00a fbf6 	bl	28922 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1e136:	2110      	movs	r1, #16
   1e138:	e7d4      	b.n	1e0e4 <smp_pairing_random+0xbc>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e13a:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1e13e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1e142:	4940      	ldr	r1, [pc, #256]	; (1e244 <smp_pairing_random+0x21c>)
   1e144:	9700      	str	r7, [sp, #0]
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1e146:	40d3      	lsrs	r3, r2
   1e148:	f003 0301 	and.w	r3, r3, #1
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1e14c:	6809      	ldr	r1, [r1, #0]
   1e14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e152:	4642      	mov	r2, r8
   1e154:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1e158:	f00a fede 	bl	28f18 <bt_crypto_f4>
   1e15c:	b130      	cbz	r0, 1e16c <smp_pairing_random+0x144>
		LOG_ERR("Calculate confirm failed");
   1e15e:	466c      	mov	r4, sp
   1e160:	b088      	sub	sp, #32
   1e162:	aa04      	add	r2, sp, #16
   1e164:	4b38      	ldr	r3, [pc, #224]	; (1e248 <smp_pairing_random+0x220>)
   1e166:	6153      	str	r3, [r2, #20]
   1e168:	4b38      	ldr	r3, [pc, #224]	; (1e24c <smp_pairing_random+0x224>)
   1e16a:	e7a6      	b.n	1e0ba <smp_pairing_random+0x92>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1e16c:	2210      	movs	r2, #16
   1e16e:	4639      	mov	r1, r7
   1e170:	f104 0017 	add.w	r0, r4, #23
   1e174:	f008 fd2a 	bl	26bcc <memcmp>
   1e178:	b108      	cbz	r0, 1e17e <smp_pairing_random+0x156>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1e17a:	2004      	movs	r0, #4
   1e17c:	e7a8      	b.n	1e0d0 <smp_pairing_random+0xa8>
		atomic_set_bit(smp->allowed_cmds,
   1e17e:	2103      	movs	r1, #3
   1e180:	4620      	mov	r0, r4
   1e182:	f00a fbce 	bl	28922 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1e186:	f00a fc18 	bl	289ba <smp_send_pairing_random>
		if (err) {
   1e18a:	2800      	cmp	r0, #0
   1e18c:	d1a0      	bne.n	1e0d0 <smp_pairing_random+0xa8>
		smp->passkey_round++;
   1e18e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1e192:	3301      	adds	r3, #1
   1e194:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1e196:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1e198:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1e19c:	d109      	bne.n	1e1b2 <smp_pairing_random+0x18a>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1e19e:	210d      	movs	r1, #13
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	f00a fbbe 	bl	28922 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1e1a6:	2110      	movs	r1, #16
   1e1a8:	4628      	mov	r0, r5
   1e1aa:	f00a fbba 	bl	28922 <atomic_set_bit>
			return 0;
   1e1ae:	2000      	movs	r0, #0
   1e1b0:	e78e      	b.n	1e0d0 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1e1b2:	2110      	movs	r1, #16
   1e1b4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e1b8:	f003 fe9c 	bl	21ef4 <bt_rand>
   1e1bc:	3800      	subs	r0, #0
   1e1be:	bf18      	it	ne
   1e1c0:	2001      	movne	r0, #1
   1e1c2:	00c0      	lsls	r0, r0, #3
   1e1c4:	e784      	b.n	1e0d0 <smp_pairing_random+0xa8>
		if (bt_rand(smp->prnd, 16)) {
   1e1c6:	2110      	movs	r1, #16
   1e1c8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1e1cc:	f003 fe92 	bl	21ef4 <bt_rand>
   1e1d0:	2800      	cmp	r0, #0
   1e1d2:	f47f af7c 	bne.w	1e0ce <smp_pairing_random+0xa6>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1e1d6:	b366      	cbz	r6, 1e232 <smp_pairing_random+0x20a>
   1e1d8:	68f3      	ldr	r3, [r6, #12]
   1e1da:	b353      	cbz	r3, 1e232 <smp_pairing_random+0x20a>
			struct bt_conn_oob_info info = {
   1e1dc:	4b1c      	ldr	r3, [pc, #112]	; (1e250 <smp_pairing_random+0x228>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e1de:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   1e1e0:	881b      	ldrh	r3, [r3, #0]
   1e1e2:	803b      	strh	r3, [r7, #0]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e1e4:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1e1e6:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1e1e8:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   1e1ec:	d411      	bmi.n	1e212 <smp_pairing_random+0x1ea>
   1e1ee:	2b00      	cmp	r3, #0
   1e1f0:	bf14      	ite	ne
   1e1f2:	2301      	movne	r3, #1
   1e1f4:	2303      	moveq	r3, #3
	info->lesc.oob_config = oob_config;
   1e1f6:	707b      	strb	r3, [r7, #1]
			smp->oobd_local = NULL;
   1e1f8:	2300      	movs	r3, #0
			smp->oobd_remote = NULL;
   1e1fa:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   1e1fe:	4628      	mov	r0, r5
   1e200:	210c      	movs	r1, #12
   1e202:	f00a fb8e 	bl	28922 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1e206:	68f3      	ldr	r3, [r6, #12]
   1e208:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1e20c:	4639      	mov	r1, r7
   1e20e:	4798      	blx	r3
			return 0;
   1e210:	e7cd      	b.n	1e1ae <smp_pairing_random+0x186>
		if (rsp_oob_present) {
   1e212:	005b      	lsls	r3, r3, #1
   1e214:	e7ef      	b.n	1e1f6 <smp_pairing_random+0x1ce>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1e216:	466c      	mov	r4, sp
   1e218:	b088      	sub	sp, #32
   1e21a:	aa04      	add	r2, sp, #16
   1e21c:	490d      	ldr	r1, [pc, #52]	; (1e254 <smp_pairing_random+0x22c>)
   1e21e:	6151      	str	r1, [r2, #20]
   1e220:	490d      	ldr	r1, [pc, #52]	; (1e258 <smp_pairing_random+0x230>)
	switch (smp->method) {
   1e222:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1e226:	2304      	movs	r3, #4
   1e228:	f842 3f10 	str.w	r3, [r2, #16]!
   1e22c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e230:	e749      	b.n	1e0c6 <smp_pairing_random+0x9e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1e232:	2002      	movs	r0, #2
   1e234:	e74c      	b.n	1e0d0 <smp_pairing_random+0xa8>
   1e236:	bf00      	nop
   1e238:	0002e521 	.word	0x0002e521
   1e23c:	0002e952 	.word	0x0002e952
   1e240:	0002a898 	.word	0x0002a898
   1e244:	20003074 	.word	0x20003074
   1e248:	0002e53a 	.word	0x0002e53a
   1e24c:	0002e93d 	.word	0x0002e93d
   1e250:	0002aa64 	.word	0x0002aa64
   1e254:	0002e424 	.word	0x0002e424
   1e258:	0002e968 	.word	0x0002e968

0001e25c <bt_smp_sign_verify>:
{
   1e25c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e25e:	b085      	sub	sp, #20
	return buf->data + buf->len;
   1e260:	8a0b      	ldrh	r3, [r1, #16]
   1e262:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1e264:	68c9      	ldr	r1, [r1, #12]
{
   1e266:	4605      	mov	r5, r0
   1e268:	af00      	add	r7, sp, #0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1e26a:	3b0c      	subs	r3, #12
   1e26c:	4419      	add	r1, r3
   1e26e:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1e270:	f105 0688 	add.w	r6, r5, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1e274:	1d38      	adds	r0, r7, #4
   1e276:	f008 fcb9 	bl	26bec <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1e27a:	7a29      	ldrb	r1, [r5, #8]
   1e27c:	4632      	mov	r2, r6
   1e27e:	2010      	movs	r0, #16
   1e280:	f001 f85e 	bl	1f340 <bt_keys_find>
	if (!keys) {
   1e284:	4605      	mov	r5, r0
   1e286:	b9d8      	cbnz	r0, 1e2c0 <bt_smp_sign_verify+0x64>
		LOG_ERR("Unable to find Remote CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1e288:	4630      	mov	r0, r6
   1e28a:	f7f7 fb27 	bl	158dc <bt_addr_le_str>
   1e28e:	466c      	mov	r4, sp
   1e290:	b08a      	sub	sp, #40	; 0x28
   1e292:	466a      	mov	r2, sp
   1e294:	4b34      	ldr	r3, [pc, #208]	; (1e368 <bt_smp_sign_verify+0x10c>)
   1e296:	6153      	str	r3, [r2, #20]
   1e298:	4b34      	ldr	r3, [pc, #208]	; (1e36c <bt_smp_sign_verify+0x110>)
   1e29a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e29e:	f240 3301 	movw	r3, #769	; 0x301
   1e2a2:	8413      	strh	r3, [r2, #32]
   1e2a4:	4b32      	ldr	r3, [pc, #200]	; (1e370 <bt_smp_sign_verify+0x114>)
   1e2a6:	4833      	ldr	r0, [pc, #204]	; (1e374 <bt_smp_sign_verify+0x118>)
   1e2a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1e2ac:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e2b0:	f00a fb29 	bl	28906 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1e2b4:	f06f 0001 	mvn.w	r0, #1
   1e2b8:	46a5      	mov	sp, r4
}
   1e2ba:	3714      	adds	r7, #20
   1e2bc:	46bd      	mov	sp, r7
   1e2be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1e2c0:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1e2c2:	603b      	str	r3, [r7, #0]
   1e2c4:	8a23      	ldrh	r3, [r4, #16]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1e2c6:	68e0      	ldr	r0, [r4, #12]
   1e2c8:	3b0c      	subs	r3, #12
   1e2ca:	2204      	movs	r2, #4
   1e2cc:	4639      	mov	r1, r7
   1e2ce:	4418      	add	r0, r3
   1e2d0:	f008 fc8c 	bl	26bec <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1e2d4:	8a22      	ldrh	r2, [r4, #16]
   1e2d6:	68e1      	ldr	r1, [r4, #12]
   1e2d8:	3a0c      	subs	r2, #12
   1e2da:	b292      	uxth	r2, r2
   1e2dc:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1e2e0:	f7ff f8fe 	bl	1d4e0 <smp_sign_buf>
	if (err) {
   1e2e4:	b1c8      	cbz	r0, 1e31a <bt_smp_sign_verify+0xbe>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1e2e6:	4630      	mov	r0, r6
   1e2e8:	f7f7 faf8 	bl	158dc <bt_addr_le_str>
   1e2ec:	466c      	mov	r4, sp
   1e2ee:	b08a      	sub	sp, #40	; 0x28
   1e2f0:	466a      	mov	r2, sp
   1e2f2:	4b21      	ldr	r3, [pc, #132]	; (1e378 <bt_smp_sign_verify+0x11c>)
   1e2f4:	6153      	str	r3, [r2, #20]
   1e2f6:	4b1d      	ldr	r3, [pc, #116]	; (1e36c <bt_smp_sign_verify+0x110>)
   1e2f8:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e2fc:	f240 3301 	movw	r3, #769	; 0x301
   1e300:	8413      	strh	r3, [r2, #32]
   1e302:	4b1b      	ldr	r3, [pc, #108]	; (1e370 <bt_smp_sign_verify+0x114>)
   1e304:	481b      	ldr	r0, [pc, #108]	; (1e374 <bt_smp_sign_verify+0x118>)
   1e306:	f842 3f10 	str.w	r3, [r2, #16]!
   1e30a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e30e:	f00a fafa 	bl	28906 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1e312:	f06f 0004 	mvn.w	r0, #4
   1e316:	46a5      	mov	sp, r4
   1e318:	e7cf      	b.n	1e2ba <bt_smp_sign_verify+0x5e>
   1e31a:	8a23      	ldrh	r3, [r4, #16]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1e31c:	68e1      	ldr	r1, [r4, #12]
   1e31e:	3b0c      	subs	r3, #12
   1e320:	220c      	movs	r2, #12
   1e322:	4419      	add	r1, r3
   1e324:	1d38      	adds	r0, r7, #4
   1e326:	f008 fc51 	bl	26bcc <memcmp>
   1e32a:	b1c8      	cbz	r0, 1e360 <bt_smp_sign_verify+0x104>
		LOG_ERR("Unable to verify signature for %s", bt_addr_le_str(&conn->le.dst));
   1e32c:	4630      	mov	r0, r6
   1e32e:	f7f7 fad5 	bl	158dc <bt_addr_le_str>
   1e332:	466c      	mov	r4, sp
   1e334:	b08a      	sub	sp, #40	; 0x28
   1e336:	466a      	mov	r2, sp
   1e338:	4b10      	ldr	r3, [pc, #64]	; (1e37c <bt_smp_sign_verify+0x120>)
   1e33a:	6153      	str	r3, [r2, #20]
   1e33c:	4b0b      	ldr	r3, [pc, #44]	; (1e36c <bt_smp_sign_verify+0x110>)
   1e33e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e342:	f240 3301 	movw	r3, #769	; 0x301
   1e346:	8413      	strh	r3, [r2, #32]
   1e348:	4b09      	ldr	r3, [pc, #36]	; (1e370 <bt_smp_sign_verify+0x114>)
   1e34a:	480a      	ldr	r0, [pc, #40]	; (1e374 <bt_smp_sign_verify+0x118>)
   1e34c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e350:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e354:	f00a fad7 	bl	28906 <z_log_msg_static_create.constprop.0>
		return -EBADMSG;
   1e358:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1e35c:	46a5      	mov	sp, r4
   1e35e:	e7ac      	b.n	1e2ba <bt_smp_sign_verify+0x5e>
	keys->remote_csrk.cnt++;
   1e360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e362:	3301      	adds	r3, #1
   1e364:	666b      	str	r3, [r5, #100]	; 0x64
	return 0;
   1e366:	e7a8      	b.n	1e2ba <bt_smp_sign_verify+0x5e>
   1e368:	0002e557 	.word	0x0002e557
   1e36c:	0002eacc 	.word	0x0002eacc
   1e370:	01000004 	.word	0x01000004
   1e374:	0002a898 	.word	0x0002a898
   1e378:	0002e57d 	.word	0x0002e57d
   1e37c:	0002e5a3 	.word	0x0002e5a3

0001e380 <bt_smp_sign>:
{
   1e380:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e382:	b083      	sub	sp, #12
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e384:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1e388:	af00      	add	r7, sp, #0
   1e38a:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e38c:	4632      	mov	r2, r6
   1e38e:	7a01      	ldrb	r1, [r0, #8]
   1e390:	2008      	movs	r0, #8
   1e392:	f000 ffd5 	bl	1f340 <bt_keys_find>
	if (!keys) {
   1e396:	4604      	mov	r4, r0
   1e398:	b9d8      	cbnz	r0, 1e3d2 <bt_smp_sign+0x52>
		LOG_ERR("Unable to find local CSRK for %s", bt_addr_le_str(&conn->le.dst));
   1e39a:	4630      	mov	r0, r6
   1e39c:	f7f7 fa9e 	bl	158dc <bt_addr_le_str>
   1e3a0:	466c      	mov	r4, sp
   1e3a2:	b08a      	sub	sp, #40	; 0x28
   1e3a4:	466a      	mov	r2, sp
   1e3a6:	4b25      	ldr	r3, [pc, #148]	; (1e43c <bt_smp_sign+0xbc>)
   1e3a8:	6153      	str	r3, [r2, #20]
   1e3aa:	4b25      	ldr	r3, [pc, #148]	; (1e440 <bt_smp_sign+0xc0>)
   1e3ac:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e3b0:	f240 3301 	movw	r3, #769	; 0x301
   1e3b4:	8413      	strh	r3, [r2, #32]
   1e3b6:	4b23      	ldr	r3, [pc, #140]	; (1e444 <bt_smp_sign+0xc4>)
   1e3b8:	4823      	ldr	r0, [pc, #140]	; (1e448 <bt_smp_sign+0xc8>)
   1e3ba:	f842 3f10 	str.w	r3, [r2, #16]!
   1e3be:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e3c2:	f00a faa0 	bl	28906 <z_log_msg_static_create.constprop.0>
		return -ENOENT;
   1e3c6:	f06f 0001 	mvn.w	r0, #1
   1e3ca:	46a5      	mov	sp, r4
}
   1e3cc:	370c      	adds	r7, #12
   1e3ce:	46bd      	mov	sp, r7
   1e3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1e3d2:	210c      	movs	r1, #12
   1e3d4:	1868      	adds	r0, r5, r1
   1e3d6:	f00a fe77 	bl	290c8 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1e3da:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e3dc:	607b      	str	r3, [r7, #4]
	return buf->data + buf->len;
   1e3de:	8a2b      	ldrh	r3, [r5, #16]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1e3e0:	68e8      	ldr	r0, [r5, #12]
   1e3e2:	2204      	movs	r2, #4
   1e3e4:	3b0c      	subs	r3, #12
   1e3e6:	18b9      	adds	r1, r7, r2
   1e3e8:	4418      	add	r0, r3
   1e3ea:	f008 fbff 	bl	26bec <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1e3ee:	8a2a      	ldrh	r2, [r5, #16]
   1e3f0:	68e9      	ldr	r1, [r5, #12]
   1e3f2:	3a0c      	subs	r2, #12
   1e3f4:	b292      	uxth	r2, r2
   1e3f6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e3fa:	f7ff f871 	bl	1d4e0 <smp_sign_buf>
	if (err) {
   1e3fe:	b1c8      	cbz	r0, 1e434 <bt_smp_sign+0xb4>
		LOG_ERR("Unable to create signature for %s", bt_addr_le_str(&conn->le.dst));
   1e400:	4630      	mov	r0, r6
   1e402:	f7f7 fa6b 	bl	158dc <bt_addr_le_str>
   1e406:	466c      	mov	r4, sp
   1e408:	b08a      	sub	sp, #40	; 0x28
   1e40a:	466a      	mov	r2, sp
   1e40c:	4b0f      	ldr	r3, [pc, #60]	; (1e44c <bt_smp_sign+0xcc>)
   1e40e:	6153      	str	r3, [r2, #20]
   1e410:	4b0b      	ldr	r3, [pc, #44]	; (1e440 <bt_smp_sign+0xc0>)
   1e412:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e416:	f240 3301 	movw	r3, #769	; 0x301
   1e41a:	8413      	strh	r3, [r2, #32]
   1e41c:	4b09      	ldr	r3, [pc, #36]	; (1e444 <bt_smp_sign+0xc4>)
   1e41e:	480a      	ldr	r0, [pc, #40]	; (1e448 <bt_smp_sign+0xc8>)
   1e420:	f842 3f10 	str.w	r3, [r2, #16]!
   1e424:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e428:	f00a fa6d 	bl	28906 <z_log_msg_static_create.constprop.0>
		return -EIO;
   1e42c:	f06f 0004 	mvn.w	r0, #4
   1e430:	46a5      	mov	sp, r4
   1e432:	e7cb      	b.n	1e3cc <bt_smp_sign+0x4c>
	keys->local_csrk.cnt++;
   1e434:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e436:	3301      	adds	r3, #1
   1e438:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
   1e43a:	e7c7      	b.n	1e3cc <bt_smp_sign+0x4c>
   1e43c:	0002e5c9 	.word	0x0002e5c9
   1e440:	0002eab3 	.word	0x0002eab3
   1e444:	01000004 	.word	0x01000004
   1e448:	0002a898 	.word	0x0002a898
   1e44c:	0002e57d 	.word	0x0002e57d

0001e450 <bt_smp_start_security>:
{
   1e450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   1e454:	78c6      	ldrb	r6, [r0, #3]
   1e456:	2e01      	cmp	r6, #1
{
   1e458:	4604      	mov	r4, r0
	switch (conn->role) {
   1e45a:	d005      	beq.n	1e468 <bt_smp_start_security+0x18>
		return -EINVAL;
   1e45c:	f06f 0415 	mvn.w	r4, #21
}
   1e460:	4620      	mov	r0, r4
   1e462:	b003      	add	sp, #12
   1e464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   1e468:	f00a fa50 	bl	2890c <smp_chan_get>
	if (!smp) {
   1e46c:	4605      	mov	r5, r0
   1e46e:	2800      	cmp	r0, #0
   1e470:	f000 80ac 	beq.w	1e5cc <bt_smp_start_security+0x17c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e474:	1d07      	adds	r7, r0, #4
   1e476:	2104      	movs	r1, #4
   1e478:	4638      	mov	r0, r7
   1e47a:	f00a fa0b 	bl	28894 <atomic_test_bit>
   1e47e:	2800      	cmp	r0, #0
   1e480:	f040 80a7 	bne.w	1e5d2 <bt_smp_start_security+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e484:	2103      	movs	r1, #3
   1e486:	4638      	mov	r0, r7
   1e488:	f00a fa04 	bl	28894 <atomic_test_bit>
   1e48c:	b110      	cbz	r0, 1e494 <bt_smp_start_security+0x44>
		return -EBUSY;
   1e48e:	f06f 040f 	mvn.w	r4, #15
   1e492:	e7e5      	b.n	1e460 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e494:	4631      	mov	r1, r6
   1e496:	4638      	mov	r0, r7
   1e498:	f00a f9fc 	bl	28894 <atomic_test_bit>
   1e49c:	2800      	cmp	r0, #0
   1e49e:	d1f6      	bne.n	1e48e <bt_smp_start_security+0x3e>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e4a0:	4628      	mov	r0, r5
   1e4a2:	f7fe ff27 	bl	1d2f4 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e4a6:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1e4aa:	7a9b      	ldrb	r3, [r3, #10]
   1e4ac:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e4ae:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1e4b0:	d042      	beq.n	1e538 <bt_smp_start_security+0xe8>
   1e4b2:	d832      	bhi.n	1e51a <bt_smp_start_security+0xca>
   1e4b4:	3b01      	subs	r3, #1
   1e4b6:	2b01      	cmp	r3, #1
   1e4b8:	d948      	bls.n	1e54c <bt_smp_start_security+0xfc>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1e4ba:	210b      	movs	r1, #11
   1e4bc:	1d20      	adds	r0, r4, #4
   1e4be:	f00a f9e9 	bl	28894 <atomic_test_bit>
   1e4c2:	2800      	cmp	r0, #0
   1e4c4:	d1ca      	bne.n	1e45c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   1e4c6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1e4ca:	b983      	cbnz	r3, 1e4ee <bt_smp_start_security+0x9e>
						     conn->id, &conn->le.dst);
   1e4cc:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   1e4d0:	7a21      	ldrb	r1, [r4, #8]
   1e4d2:	4632      	mov	r2, r6
   1e4d4:	2020      	movs	r0, #32
   1e4d6:	f000 ff33 	bl	1f340 <bt_keys_find>
   1e4da:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1e4de:	b930      	cbnz	r0, 1e4ee <bt_smp_start_security+0x9e>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   1e4e0:	7a21      	ldrb	r1, [r4, #8]
   1e4e2:	4632      	mov	r2, r6
   1e4e4:	2004      	movs	r0, #4
   1e4e6:	f000 ff2b 	bl	1f340 <bt_keys_find>
   1e4ea:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys ||
   1e4ee:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1e4f2:	2b00      	cmp	r3, #0
   1e4f4:	d0b2      	beq.n	1e45c <bt_smp_start_security+0xc>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   1e4f6:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   1e4f8:	f012 0f24 	tst.w	r2, #36	; 0x24
   1e4fc:	d0ae      	beq.n	1e45c <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   1e4fe:	7aa1      	ldrb	r1, [r4, #10]
   1e500:	2902      	cmp	r1, #2
   1e502:	d923      	bls.n	1e54c <bt_smp_start_security+0xfc>
   1e504:	7b58      	ldrb	r0, [r3, #13]
   1e506:	07c0      	lsls	r0, r0, #31
   1e508:	d5a8      	bpl.n	1e45c <bt_smp_start_security+0xc>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   1e50a:	2903      	cmp	r1, #3
   1e50c:	d01e      	beq.n	1e54c <bt_smp_start_security+0xfc>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   1e50e:	0692      	lsls	r2, r2, #26
   1e510:	d5a4      	bpl.n	1e45c <bt_smp_start_security+0xc>
   1e512:	7b1b      	ldrb	r3, [r3, #12]
   1e514:	2b10      	cmp	r3, #16
   1e516:	d1a1      	bne.n	1e45c <bt_smp_start_security+0xc>
   1e518:	e018      	b.n	1e54c <bt_smp_start_security+0xfc>
	switch (smp->chan.chan.conn->required_sec_level) {
   1e51a:	2b04      	cmp	r3, #4
   1e51c:	d1cd      	bne.n	1e4ba <bt_smp_start_security+0x6a>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e51e:	4628      	mov	r0, r5
   1e520:	f7fe ff06 	bl	1d330 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e524:	2803      	cmp	r0, #3
   1e526:	d104      	bne.n	1e532 <bt_smp_start_security+0xe2>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e528:	2e00      	cmp	r6, #0
   1e52a:	d0c6      	beq.n	1e4ba <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e52c:	68f3      	ldr	r3, [r6, #12]
   1e52e:	2b00      	cmp	r3, #0
   1e530:	d0c3      	beq.n	1e4ba <bt_smp_start_security+0x6a>
   1e532:	4b29      	ldr	r3, [pc, #164]	; (1e5d8 <bt_smp_start_security+0x188>)
   1e534:	781b      	ldrb	r3, [r3, #0]
   1e536:	e007      	b.n	1e548 <bt_smp_start_security+0xf8>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1e538:	4628      	mov	r0, r5
   1e53a:	f7fe fef9 	bl	1d330 <get_io_capa>
   1e53e:	2803      	cmp	r0, #3
   1e540:	d104      	bne.n	1e54c <bt_smp_start_security+0xfc>
   1e542:	2e00      	cmp	r6, #0
   1e544:	d0b9      	beq.n	1e4ba <bt_smp_start_security+0x6a>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1e546:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1e548:	2b00      	cmp	r3, #0
   1e54a:	d0b6      	beq.n	1e4ba <bt_smp_start_security+0x6a>
	if (!conn->le.keys) {
   1e54c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   1e550:	b13b      	cbz	r3, 1e562 <bt_smp_start_security+0x112>
	if (smp_init(smp) != 0) {
   1e552:	4628      	mov	r0, r5
   1e554:	f7ff f818 	bl	1d588 <smp_init>
   1e558:	4680      	mov	r8, r0
   1e55a:	b170      	cbz	r0, 1e57a <bt_smp_start_security+0x12a>
		return -ENOBUFS;
   1e55c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1e560:	e77e      	b.n	1e460 <bt_smp_start_security+0x10>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e562:	7a20      	ldrb	r0, [r4, #8]
   1e564:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e568:	f000 fe66 	bl	1f238 <bt_keys_get_addr>
   1e56c:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   1e570:	2800      	cmp	r0, #0
   1e572:	d1ee      	bne.n	1e552 <bt_smp_start_security+0x102>
			return -ENOMEM;
   1e574:	f06f 040b 	mvn.w	r4, #11
   1e578:	e772      	b.n	1e460 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   1e57a:	210b      	movs	r1, #11
   1e57c:	4628      	mov	r0, r5
   1e57e:	f00a f9e4 	bl	2894a <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1e582:	4606      	mov	r6, r0
   1e584:	2800      	cmp	r0, #0
   1e586:	d0e9      	beq.n	1e55c <bt_smp_start_security+0x10c>
	return net_buf_simple_add(&buf->b, len);
   1e588:	2101      	movs	r1, #1
   1e58a:	300c      	adds	r0, #12
   1e58c:	f00a fd9c 	bl	290c8 <net_buf_simple_add>
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1e590:	2109      	movs	r1, #9
   1e592:	4681      	mov	r9, r0
   1e594:	4628      	mov	r0, r5
   1e596:	f7fe fef1 	bl	1d37c <get_auth>
   1e59a:	4643      	mov	r3, r8
   1e59c:	f889 0000 	strb.w	r0, [r9]
   1e5a0:	4632      	mov	r2, r6
   1e5a2:	4620      	mov	r0, r4
   1e5a4:	f8cd 8000 	str.w	r8, [sp]
   1e5a8:	2106      	movs	r1, #6
   1e5aa:	f009 f8fa 	bl	277a2 <bt_l2cap_send_cb>
	if (err) {
   1e5ae:	4604      	mov	r4, r0
   1e5b0:	b118      	cbz	r0, 1e5ba <bt_smp_start_security+0x16a>
		net_buf_unref(req_buf);
   1e5b2:	4630      	mov	r0, r6
   1e5b4:	f001 fa36 	bl	1fa24 <net_buf_unref>
		return err;
   1e5b8:	e752      	b.n	1e460 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1e5ba:	4638      	mov	r0, r7
   1e5bc:	210f      	movs	r1, #15
   1e5be:	f00a f9b0 	bl	28922 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1e5c2:	2101      	movs	r1, #1
   1e5c4:	4628      	mov	r0, r5
   1e5c6:	f00a f9ac 	bl	28922 <atomic_set_bit>
	return 0;
   1e5ca:	e749      	b.n	1e460 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   1e5cc:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1e5d0:	e746      	b.n	1e460 <bt_smp_start_security+0x10>
		return -EIO;
   1e5d2:	f06f 0404 	mvn.w	r4, #4
   1e5d6:	e743      	b.n	1e460 <bt_smp_start_security+0x10>
   1e5d8:	200034b8 	.word	0x200034b8

0001e5dc <smp_pairing_complete>:
{
   1e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5de:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e5e0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e5e4:	1d04      	adds	r4, r0, #4
	if (!status) {
   1e5e6:	bb61      	cbnz	r1, 1e642 <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1e5e8:	210d      	movs	r1, #13
   1e5ea:	4620      	mov	r0, r4
   1e5ec:	f00a f952 	bl	28894 <atomic_test_bit>
		if (bond_flag) {
   1e5f0:	4607      	mov	r7, r0
   1e5f2:	b118      	cbz	r0, 1e5fc <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1e5f4:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1e5f8:	f001 f866 	bl	1f6c8 <bt_keys_store>
	return list->head;
   1e5fc:	4b36      	ldr	r3, [pc, #216]	; (1e6d8 <smp_pairing_complete+0xfc>)
   1e5fe:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e600:	b19b      	cbz	r3, 1e62a <smp_pairing_complete+0x4e>
	return node->next;
   1e602:	681c      	ldr	r4, [r3, #0]
   1e604:	b104      	cbz	r4, 1e608 <smp_pairing_complete+0x2c>
   1e606:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1e608:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1e60c:	b113      	cbz	r3, 1e614 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1e60e:	4639      	mov	r1, r7
   1e610:	4628      	mov	r0, r5
   1e612:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1e614:	b14c      	cbz	r4, 1e62a <smp_pairing_complete+0x4e>
   1e616:	4623      	mov	r3, r4
   1e618:	68e4      	ldr	r4, [r4, #12]
   1e61a:	681b      	ldr	r3, [r3, #0]
   1e61c:	b11c      	cbz	r4, 1e626 <smp_pairing_complete+0x4a>
   1e61e:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1e620:	2b00      	cmp	r3, #0
   1e622:	d1f4      	bne.n	1e60e <smp_pairing_complete+0x32>
   1e624:	e7f7      	b.n	1e616 <smp_pairing_complete+0x3a>
   1e626:	2b00      	cmp	r3, #0
   1e628:	d1f1      	bne.n	1e60e <smp_pairing_complete+0x32>
	smp_reset(smp);
   1e62a:	4630      	mov	r0, r6
   1e62c:	f00a fa1f 	bl	28a6e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1e630:	7a6a      	ldrb	r2, [r5, #9]
   1e632:	7aab      	ldrb	r3, [r5, #10]
   1e634:	429a      	cmp	r2, r3
   1e636:	d04d      	beq.n	1e6d4 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1e638:	4628      	mov	r0, r5
}
   1e63a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1e63e:	f7ff bf07 	b.w	1e450 <bt_smp_start_security>
	switch (smp_err) {
   1e642:	3901      	subs	r1, #1
   1e644:	b2c9      	uxtb	r1, r1
   1e646:	290e      	cmp	r1, #14
   1e648:	bf9c      	itt	ls
   1e64a:	4b24      	ldrls	r3, [pc, #144]	; (1e6dc <smp_pairing_complete+0x100>)
   1e64c:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1e64e:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
	if (!status) {
   1e652:	bf88      	it	hi
   1e654:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1e656:	b143      	cbz	r3, 1e66a <smp_pairing_complete+0x8e>
   1e658:	7b1b      	ldrb	r3, [r3, #12]
   1e65a:	bb2b      	cbnz	r3, 1e6a8 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1e65c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
   1e660:	f000 fefe 	bl	1f460 <bt_keys_clear>
			conn->le.keys = NULL;
   1e664:	2300      	movs	r3, #0
   1e666:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e66a:	2102      	movs	r1, #2
   1e66c:	4620      	mov	r0, r4
   1e66e:	f00a f911 	bl	28894 <atomic_test_bit>
   1e672:	b940      	cbnz	r0, 1e686 <smp_pairing_complete+0xaa>
	switch (err) {
   1e674:	2f07      	cmp	r7, #7
   1e676:	bf96      	itet	ls
   1e678:	4b19      	ldrls	r3, [pc, #100]	; (1e6e0 <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1e67a:	211f      	movhi	r1, #31
   1e67c:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1e67e:	463a      	mov	r2, r7
   1e680:	4628      	mov	r0, r5
   1e682:	f7fb f951 	bl	19928 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e686:	2103      	movs	r1, #3
   1e688:	4620      	mov	r0, r4
   1e68a:	f00a f903 	bl	28894 <atomic_test_bit>
   1e68e:	2800      	cmp	r0, #0
   1e690:	d0cb      	beq.n	1e62a <smp_pairing_complete+0x4e>
	return list->head;
   1e692:	4b11      	ldr	r3, [pc, #68]	; (1e6d8 <smp_pairing_complete+0xfc>)
   1e694:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e696:	2b00      	cmp	r3, #0
   1e698:	d0c7      	beq.n	1e62a <smp_pairing_complete+0x4e>
	return node->next;
   1e69a:	681c      	ldr	r4, [r3, #0]
   1e69c:	b104      	cbz	r4, 1e6a0 <smp_pairing_complete+0xc4>
   1e69e:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1e6a0:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1e6a4:	b94b      	cbnz	r3, 1e6ba <smp_pairing_complete+0xde>
   1e6a6:	e00b      	b.n	1e6c0 <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1e6a8:	2102      	movs	r1, #2
   1e6aa:	4620      	mov	r0, r4
   1e6ac:	f00a f8f2 	bl	28894 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1e6b0:	2800      	cmp	r0, #0
   1e6b2:	d1d3      	bne.n	1e65c <smp_pairing_complete+0x80>
   1e6b4:	e7d9      	b.n	1e66a <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e6b6:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1e6b8:	b123      	cbz	r3, 1e6c4 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1e6ba:	4639      	mov	r1, r7
   1e6bc:	4628      	mov	r0, r5
   1e6be:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1e6c0:	2c00      	cmp	r4, #0
   1e6c2:	d0b2      	beq.n	1e62a <smp_pairing_complete+0x4e>
   1e6c4:	4623      	mov	r3, r4
   1e6c6:	68e4      	ldr	r4, [r4, #12]
   1e6c8:	685b      	ldr	r3, [r3, #4]
   1e6ca:	2c00      	cmp	r4, #0
   1e6cc:	d1f3      	bne.n	1e6b6 <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1e6ce:	2b00      	cmp	r3, #0
   1e6d0:	d1f3      	bne.n	1e6ba <smp_pairing_complete+0xde>
   1e6d2:	e7aa      	b.n	1e62a <smp_pairing_complete+0x4e>
}
   1e6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e6d6:	bf00      	nop
   1e6d8:	20002f98 	.word	0x20002f98
   1e6dc:	0002e8bc 	.word	0x0002e8bc
   1e6e0:	0002e8ab 	.word	0x0002e8ab

0001e6e4 <smp_error>:
{
   1e6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1e6e8:	1d03      	adds	r3, r0, #4
{
   1e6ea:	b082      	sub	sp, #8
   1e6ec:	4605      	mov	r5, r0
   1e6ee:	af02      	add	r7, sp, #8
   1e6f0:	4688      	mov	r8, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1e6f2:	4618      	mov	r0, r3
   1e6f4:	2102      	movs	r1, #2
   1e6f6:	f00a f8cd 	bl	28894 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1e6fa:	4604      	mov	r4, r0
   1e6fc:	b120      	cbz	r0, 1e708 <smp_error+0x24>
   1e6fe:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   1e702:	fab4 f484 	clz	r4, r4
   1e706:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1e708:	2103      	movs	r1, #3
   1e70a:	4618      	mov	r0, r3
   1e70c:	f00a f8c2 	bl	28894 <atomic_test_bit>
   1e710:	b1e8      	cbz	r0, 1e74e <smp_error+0x6a>
		smp_pairing_complete(smp, reason);
   1e712:	4641      	mov	r1, r8
   1e714:	4628      	mov	r0, r5
   1e716:	f7ff ff61 	bl	1e5dc <smp_pairing_complete>
	if (remote_already_completed) {
   1e71a:	b32c      	cbz	r4, 1e768 <smp_error+0x84>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1e71c:	466c      	mov	r4, sp
   1e71e:	b088      	sub	sp, #32
   1e720:	aa02      	add	r2, sp, #8
   1e722:	4b20      	ldr	r3, [pc, #128]	; (1e7a4 <smp_error+0xc0>)
   1e724:	6153      	str	r3, [r2, #20]
   1e726:	4b20      	ldr	r3, [pc, #128]	; (1e7a8 <smp_error+0xc4>)
   1e728:	6193      	str	r3, [r2, #24]
   1e72a:	2303      	movs	r3, #3
   1e72c:	481f      	ldr	r0, [pc, #124]	; (1e7ac <smp_error+0xc8>)
   1e72e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e732:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1e736:	f00a f8e6 	bl	28906 <z_log_msg_static_create.constprop.0>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1e73a:	2105      	movs	r1, #5
   1e73c:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1e740:	46a5      	mov	sp, r4
   1e742:	f008 ff0e 	bl	27562 <bt_conn_disconnect>
		return 0;
   1e746:	2000      	movs	r0, #0
}
   1e748:	46bd      	mov	sp, r7
   1e74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1e74e:	2101      	movs	r1, #1
   1e750:	4618      	mov	r0, r3
   1e752:	f00a f89f 	bl	28894 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1e756:	2800      	cmp	r0, #0
   1e758:	d1db      	bne.n	1e712 <smp_error+0x2e>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1e75a:	210f      	movs	r1, #15
   1e75c:	4618      	mov	r0, r3
   1e75e:	f00a f899 	bl	28894 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1e762:	2800      	cmp	r0, #0
   1e764:	d1d5      	bne.n	1e712 <smp_error+0x2e>
   1e766:	e7d8      	b.n	1e71a <smp_error+0x36>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1e768:	2105      	movs	r1, #5
   1e76a:	4628      	mov	r0, r5
   1e76c:	f00a f8ed 	bl	2894a <smp_create_pdu.constprop.0>
	if (!buf) {
   1e770:	4606      	mov	r6, r0
   1e772:	b198      	cbz	r0, 1e79c <smp_error+0xb8>
   1e774:	2101      	movs	r1, #1
   1e776:	300c      	adds	r0, #12
   1e778:	f00a fca6 	bl	290c8 <net_buf_simple_add>
	rsp->reason = reason;
   1e77c:	f880 8000 	strb.w	r8, [r0]
   1e780:	9400      	str	r4, [sp, #0]
   1e782:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
   1e786:	4623      	mov	r3, r4
   1e788:	4632      	mov	r2, r6
   1e78a:	2106      	movs	r1, #6
   1e78c:	f009 f809 	bl	277a2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1e790:	2800      	cmp	r0, #0
   1e792:	d0d8      	beq.n	1e746 <smp_error+0x62>
		net_buf_unref(buf);
   1e794:	4630      	mov	r0, r6
   1e796:	f001 f945 	bl	1fa24 <net_buf_unref>
   1e79a:	e7d4      	b.n	1e746 <smp_error+0x62>
		return -ENOBUFS;
   1e79c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e7a0:	e7d2      	b.n	1e748 <smp_error+0x64>
   1e7a2:	bf00      	nop
   1e7a4:	0002e5ee 	.word	0x0002e5ee
   1e7a8:	0002ea87 	.word	0x0002ea87
   1e7ac:	0002a898 	.word	0x0002a898

0001e7b0 <bt_smp_recv>:
{
   1e7b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*hdr)) {
   1e7b4:	8a0b      	ldrh	r3, [r1, #16]
{
   1e7b6:	af00      	add	r7, sp, #0
   1e7b8:	4605      	mov	r5, r0
   1e7ba:	460e      	mov	r6, r1
	if (buf->len < sizeof(*hdr)) {
   1e7bc:	b99b      	cbnz	r3, 1e7e6 <bt_smp_recv+0x36>
		LOG_ERR("Too small SMP PDU received");
   1e7be:	466c      	mov	r4, sp
   1e7c0:	b088      	sub	sp, #32
   1e7c2:	466a      	mov	r2, sp
   1e7c4:	4b49      	ldr	r3, [pc, #292]	; (1e8ec <bt_smp_recv+0x13c>)
   1e7c6:	6153      	str	r3, [r2, #20]
   1e7c8:	4b49      	ldr	r3, [pc, #292]	; (1e8f0 <bt_smp_recv+0x140>)
   1e7ca:	6193      	str	r3, [r2, #24]
   1e7cc:	2303      	movs	r3, #3
   1e7ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1e7d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1e7d6:	4847      	ldr	r0, [pc, #284]	; (1e8f4 <bt_smp_recv+0x144>)
   1e7d8:	f00a f895 	bl	28906 <z_log_msg_static_create.constprop.0>
   1e7dc:	46a5      	mov	sp, r4
}
   1e7de:	2000      	movs	r0, #0
   1e7e0:	46bd      	mov	sp, r7
   1e7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1e7e6:	2101      	movs	r1, #1
   1e7e8:	f106 000c 	add.w	r0, r6, #12
   1e7ec:	f00a fc93 	bl	29116 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1e7f0:	f1a5 04ec 	sub.w	r4, r5, #236	; 0xec
   1e7f4:	3de8      	subs	r5, #232	; 0xe8
   1e7f6:	4680      	mov	r8, r0
   1e7f8:	2104      	movs	r1, #4
   1e7fa:	4628      	mov	r0, r5
   1e7fc:	f00a f84a 	bl	28894 <atomic_test_bit>
   1e800:	f898 3000 	ldrb.w	r3, [r8]
   1e804:	b160      	cbz	r0, 1e820 <bt_smp_recv+0x70>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1e806:	466c      	mov	r4, sp
   1e808:	b088      	sub	sp, #32
   1e80a:	466a      	mov	r2, sp
   1e80c:	483a      	ldr	r0, [pc, #232]	; (1e8f8 <bt_smp_recv+0x148>)
   1e80e:	6150      	str	r0, [r2, #20]
   1e810:	4837      	ldr	r0, [pc, #220]	; (1e8f0 <bt_smp_recv+0x140>)
   1e812:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1e816:	f842 1f10 	str.w	r1, [r2, #16]!
   1e81a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e81e:	e7da      	b.n	1e7d6 <bt_smp_recv+0x26>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1e820:	2b0e      	cmp	r3, #14
   1e822:	d904      	bls.n	1e82e <bt_smp_recv+0x7e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1e824:	466c      	mov	r4, sp
   1e826:	b088      	sub	sp, #32
   1e828:	466a      	mov	r2, sp
   1e82a:	4834      	ldr	r0, [pc, #208]	; (1e8fc <bt_smp_recv+0x14c>)
   1e82c:	e7ef      	b.n	1e80e <bt_smp_recv+0x5e>
	if (!handlers[hdr->code].func) {
   1e82e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1e900 <bt_smp_recv+0x150>
   1e832:	f859 2033 	ldr.w	r2, [r9, r3, lsl #3]
   1e836:	b9a2      	cbnz	r2, 1e862 <bt_smp_recv+0xb2>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1e838:	466d      	mov	r5, sp
   1e83a:	b088      	sub	sp, #32
   1e83c:	466a      	mov	r2, sp
   1e83e:	4831      	ldr	r0, [pc, #196]	; (1e904 <bt_smp_recv+0x154>)
   1e840:	6150      	str	r0, [r2, #20]
   1e842:	482b      	ldr	r0, [pc, #172]	; (1e8f0 <bt_smp_recv+0x140>)
   1e844:	e9c2 0306 	strd	r0, r3, [r2, #24]
   1e848:	f842 1f10 	str.w	r1, [r2, #16]!
   1e84c:	4829      	ldr	r0, [pc, #164]	; (1e8f4 <bt_smp_recv+0x144>)
   1e84e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e852:	f00a f858 	bl	28906 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1e856:	2107      	movs	r1, #7
   1e858:	46ad      	mov	sp, r5
		smp_error(smp, err);
   1e85a:	4620      	mov	r0, r4
   1e85c:	f7ff ff42 	bl	1e6e4 <smp_error>
   1e860:	e7bd      	b.n	1e7de <bt_smp_recv+0x2e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1e862:	4619      	mov	r1, r3
   1e864:	4620      	mov	r0, r4
   1e866:	f00a f8ec 	bl	28a42 <atomic_test_and_clear_bit>
   1e86a:	f898 3000 	ldrb.w	r3, [r8]
   1e86e:	b9c0      	cbnz	r0, 1e8a2 <bt_smp_recv+0xf2>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1e870:	466e      	mov	r6, sp
   1e872:	b088      	sub	sp, #32
   1e874:	466a      	mov	r2, sp
   1e876:	4924      	ldr	r1, [pc, #144]	; (1e908 <bt_smp_recv+0x158>)
   1e878:	6151      	str	r1, [r2, #20]
   1e87a:	491d      	ldr	r1, [pc, #116]	; (1e8f0 <bt_smp_recv+0x140>)
   1e87c:	481d      	ldr	r0, [pc, #116]	; (1e8f4 <bt_smp_recv+0x144>)
   1e87e:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1e882:	2304      	movs	r3, #4
   1e884:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1e888:	f842 3f10 	str.w	r3, [r2, #16]!
   1e88c:	f00a f83b 	bl	28906 <z_log_msg_static_create.constprop.0>
	return atomic_test_bit(smp->flags, SMP_FLAG_PAIRING);
   1e890:	2103      	movs	r1, #3
   1e892:	46b5      	mov	sp, r6
   1e894:	4628      	mov	r0, r5
   1e896:	f009 fffd 	bl	28894 <atomic_test_bit>
		if (is_in_pairing_procedure(smp)) {
   1e89a:	2800      	cmp	r0, #0
   1e89c:	d09f      	beq.n	1e7de <bt_smp_recv+0x2e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e89e:	2108      	movs	r1, #8
   1e8a0:	e7db      	b.n	1e85a <bt_smp_recv+0xaa>
	if (buf->len != handlers[hdr->code].expect_len) {
   1e8a2:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
   1e8a6:	8a31      	ldrh	r1, [r6, #16]
   1e8a8:	7912      	ldrb	r2, [r2, #4]
   1e8aa:	428a      	cmp	r2, r1
   1e8ac:	d013      	beq.n	1e8d6 <bt_smp_recv+0x126>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1e8ae:	466d      	mov	r5, sp
   1e8b0:	b08a      	sub	sp, #40	; 0x28
   1e8b2:	466a      	mov	r2, sp
   1e8b4:	4815      	ldr	r0, [pc, #84]	; (1e90c <bt_smp_recv+0x15c>)
   1e8b6:	6150      	str	r0, [r2, #20]
   1e8b8:	480d      	ldr	r0, [pc, #52]	; (1e8f0 <bt_smp_recv+0x140>)
   1e8ba:	6213      	str	r3, [r2, #32]
   1e8bc:	2305      	movs	r3, #5
   1e8be:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1e8c2:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1e8c6:	f842 3f10 	str.w	r3, [r2, #16]!
   1e8ca:	480a      	ldr	r0, [pc, #40]	; (1e8f4 <bt_smp_recv+0x144>)
   1e8cc:	f00a f81b 	bl	28906 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1e8d0:	210a      	movs	r1, #10
   1e8d2:	46ad      	mov	sp, r5
   1e8d4:	e7c1      	b.n	1e85a <bt_smp_recv+0xaa>
	err = handlers[hdr->code].func(smp, buf);
   1e8d6:	4631      	mov	r1, r6
   1e8d8:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
   1e8dc:	4620      	mov	r0, r4
   1e8de:	4798      	blx	r3
	if (err) {
   1e8e0:	4601      	mov	r1, r0
   1e8e2:	2800      	cmp	r0, #0
   1e8e4:	f43f af7b 	beq.w	1e7de <bt_smp_recv+0x2e>
   1e8e8:	e7b7      	b.n	1e85a <bt_smp_recv+0xaa>
   1e8ea:	bf00      	nop
   1e8ec:	0002e64a 	.word	0x0002e64a
   1e8f0:	0002ea30 	.word	0x0002ea30
   1e8f4:	0002a898 	.word	0x0002a898
   1e8f8:	0002e669 	.word	0x0002e669
   1e8fc:	0002e69e 	.word	0x0002e69e
   1e900:	0002b2a8 	.word	0x0002b2a8
   1e904:	0002e6c4 	.word	0x0002e6c4
   1e908:	0002e6e2 	.word	0x0002e6e2
   1e90c:	0002dcda 	.word	0x0002dcda

0001e910 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1e910:	4b0e      	ldr	r3, [pc, #56]	; (1e94c <bt_smp_pkey_ready+0x3c>)
{
   1e912:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1e914:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1e916:	b918      	cbnz	r0, 1e920 <bt_smp_pkey_ready+0x10>
}
   1e918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e91c:	f7fe bd80 	b.w	1d420 <bt_smp_pkey_ready.part.0>
		err = smp_public_key_periph(smp);
   1e920:	4c0b      	ldr	r4, [pc, #44]	; (1e950 <bt_smp_pkey_ready+0x40>)
	z_impl_k_sem_give(sem);
   1e922:	480c      	ldr	r0, [pc, #48]	; (1e954 <bt_smp_pkey_ready+0x44>)
   1e924:	f004 ff6e 	bl	23804 <z_impl_k_sem_give>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e928:	f3bf 8f5b 	dmb	ish
   1e92c:	f854 3904 	ldr.w	r3, [r4], #-4
   1e930:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1e934:	065b      	lsls	r3, r3, #25
   1e936:	d507      	bpl.n	1e948 <bt_smp_pkey_ready+0x38>
		err = smp_public_key_periph(smp);
   1e938:	4620      	mov	r0, r4
   1e93a:	f7fe ff4b 	bl	1d7d4 <smp_public_key_periph>
		if (err) {
   1e93e:	4601      	mov	r1, r0
   1e940:	b110      	cbz	r0, 1e948 <bt_smp_pkey_ready+0x38>
			smp_error(smp, err);
   1e942:	4620      	mov	r0, r4
   1e944:	f7ff fece 	bl	1e6e4 <smp_error>
}
   1e948:	bd10      	pop	{r4, pc}
   1e94a:	bf00      	nop
   1e94c:	20003074 	.word	0x20003074
   1e950:	200021fc 	.word	0x200021fc
   1e954:	20000bcc 	.word	0x20000bcc

0001e958 <smp_signing_info>:
{
   1e958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e95c:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e95e:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1e962:	af00      	add	r7, sp, #0
   1e964:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e966:	210d      	movs	r1, #13
   1e968:	3004      	adds	r0, #4
   1e96a:	f009 ff93 	bl	28894 <atomic_test_bit>
   1e96e:	b348      	cbz	r0, 1e9c4 <smp_signing_info+0x6c>
					&conn->le.dst);
   1e970:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e974:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1e976:	f8d3 800c 	ldr.w	r8, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1e97a:	462a      	mov	r2, r5
   1e97c:	2010      	movs	r0, #16
   1e97e:	f00a fa81 	bl	28e84 <bt_keys_get_type>
		if (!keys) {
   1e982:	b9d0      	cbnz	r0, 1e9ba <smp_signing_info+0x62>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e984:	4628      	mov	r0, r5
   1e986:	f7f6 ffa9 	bl	158dc <bt_addr_le_str>
   1e98a:	466c      	mov	r4, sp
   1e98c:	b08a      	sub	sp, #40	; 0x28
   1e98e:	466a      	mov	r2, sp
   1e990:	4b14      	ldr	r3, [pc, #80]	; (1e9e4 <smp_signing_info+0x8c>)
   1e992:	6153      	str	r3, [r2, #20]
   1e994:	4b14      	ldr	r3, [pc, #80]	; (1e9e8 <smp_signing_info+0x90>)
   1e996:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1e99a:	f240 3301 	movw	r3, #769	; 0x301
   1e99e:	8413      	strh	r3, [r2, #32]
   1e9a0:	4b12      	ldr	r3, [pc, #72]	; (1e9ec <smp_signing_info+0x94>)
   1e9a2:	4813      	ldr	r0, [pc, #76]	; (1e9f0 <smp_signing_info+0x98>)
   1e9a4:	f842 3f10 	str.w	r3, [r2, #16]!
   1e9a8:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e9ac:	f009 ffab 	bl	28906 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1e9b0:	2008      	movs	r0, #8
   1e9b2:	46a5      	mov	sp, r4
}
   1e9b4:	46bd      	mov	sp, r7
   1e9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
   1e9ba:	2210      	movs	r2, #16
   1e9bc:	4641      	mov	r1, r8
   1e9be:	3054      	adds	r0, #84	; 0x54
   1e9c0:	f008 f914 	bl	26bec <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1e9c4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e9c8:	f023 0304 	bic.w	r3, r3, #4
   1e9cc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
   1e9d0:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e9d4:	b109      	cbz	r1, 1e9da <smp_signing_info+0x82>
	return 0;
   1e9d6:	2000      	movs	r0, #0
   1e9d8:	e7ec      	b.n	1e9b4 <smp_signing_info+0x5c>
		smp_pairing_complete(smp, 0);
   1e9da:	4620      	mov	r0, r4
   1e9dc:	f7ff fdfe 	bl	1e5dc <smp_pairing_complete>
   1e9e0:	e7f9      	b.n	1e9d6 <smp_signing_info+0x7e>
   1e9e2:	bf00      	nop
   1e9e4:	0002e406 	.word	0x0002e406
   1e9e8:	0002e9e7 	.word	0x0002e9e7
   1e9ec:	01000004 	.word	0x01000004
   1e9f0:	0002a898 	.word	0x0002a898

0001e9f4 <smp_ident_addr_info>:
{
   1e9f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e9f8:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1e9fc:	f8d1 800c 	ldr.w	r8, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1ea00:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1ea04:	f023 0302 	bic.w	r3, r3, #2
   1ea08:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1ea0c:	f898 3000 	ldrb.w	r3, [r8]
{
   1ea10:	af00      	add	r7, sp, #0
   1ea12:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ea14:	f105 0988 	add.w	r9, r5, #136	; 0x88
   1ea18:	b3c3      	cbz	r3, 1ea8c <smp_ident_addr_info+0x98>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1ea1a:	f898 3006 	ldrb.w	r3, [r8, #6]
   1ea1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1ea22:	2bc0      	cmp	r3, #192	; 0xc0
   1ea24:	d032      	beq.n	1ea8c <smp_ident_addr_info+0x98>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1ea26:	4640      	mov	r0, r8
   1ea28:	f7f6 ff58 	bl	158dc <bt_addr_le_str>
   1ea2c:	466e      	mov	r6, sp
   1ea2e:	b08a      	sub	sp, #40	; 0x28
   1ea30:	466c      	mov	r4, sp
   1ea32:	f8df b178 	ldr.w	fp, [pc, #376]	; 1ebac <smp_ident_addr_info+0x1b8>
   1ea36:	4b5e      	ldr	r3, [pc, #376]	; (1ebb0 <smp_ident_addr_info+0x1bc>)
   1ea38:	f8df 8178 	ldr.w	r8, [pc, #376]	; 1ebb4 <smp_ident_addr_info+0x1c0>
   1ea3c:	6163      	str	r3, [r4, #20]
   1ea3e:	4625      	mov	r5, r4
   1ea40:	f240 3a01 	movw	sl, #769	; 0x301
   1ea44:	e9c4 b006 	strd	fp, r0, [r4, #24]
   1ea48:	f8a4 a020 	strh.w	sl, [r4, #32]
   1ea4c:	f845 8f10 	str.w	r8, [r5, #16]!
   1ea50:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ea54:	462a      	mov	r2, r5
   1ea56:	4858      	ldr	r0, [pc, #352]	; (1ebb8 <smp_ident_addr_info+0x1c4>)
   1ea58:	f009 ff55 	bl	28906 <z_log_msg_static_create.constprop.0>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1ea5c:	4648      	mov	r0, r9
   1ea5e:	46b5      	mov	sp, r6
   1ea60:	f7f6 ff3c 	bl	158dc <bt_addr_le_str>
   1ea64:	46a5      	mov	sp, r4
   1ea66:	4b55      	ldr	r3, [pc, #340]	; (1ebbc <smp_ident_addr_info+0x1c8>)
   1ea68:	61e0      	str	r0, [r4, #28]
   1ea6a:	e9c4 3b05 	strd	r3, fp, [r4, #20]
   1ea6e:	4852      	ldr	r0, [pc, #328]	; (1ebb8 <smp_ident_addr_info+0x1c4>)
   1ea70:	f8a4 a020 	strh.w	sl, [r4, #32]
   1ea74:	f8c4 8010 	str.w	r8, [r4, #16]
   1ea78:	462a      	mov	r2, r5
   1ea7a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ea7e:	f009 ff42 	bl	28906 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   1ea82:	200a      	movs	r0, #10
   1ea84:	46b5      	mov	sp, r6
}
   1ea86:	46bd      	mov	sp, r7
   1ea88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return memcmp(a, b, sizeof(*a));
   1ea8c:	2207      	movs	r2, #7
   1ea8e:	4641      	mov	r1, r8
   1ea90:	4648      	mov	r0, r9
   1ea92:	f008 f89b 	bl	26bcc <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1ea96:	b168      	cbz	r0, 1eab4 <smp_ident_addr_info+0xc0>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1ea98:	7a28      	ldrb	r0, [r5, #8]
   1ea9a:	4641      	mov	r1, r8
   1ea9c:	f000 fcb6 	bl	1f40c <bt_keys_find_addr>
		if (keys) {
   1eaa0:	4606      	mov	r6, r0
   1eaa2:	b138      	cbz	r0, 1eab4 <smp_ident_addr_info+0xc0>
			if (!update_keys_check(smp, keys)) {
   1eaa4:	4601      	mov	r1, r0
   1eaa6:	4620      	mov	r0, r4
   1eaa8:	f009 fefd 	bl	288a6 <update_keys_check>
   1eaac:	b330      	cbz	r0, 1eafc <smp_ident_addr_info+0x108>
			bt_keys_clear(keys);
   1eaae:	4630      	mov	r0, r6
   1eab0:	f000 fcd6 	bl	1f460 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1eab4:	210d      	movs	r1, #13
   1eab6:	1d20      	adds	r0, r4, #4
   1eab8:	f009 feec 	bl	28894 <atomic_test_bit>
   1eabc:	2800      	cmp	r0, #0
   1eabe:	d064      	beq.n	1eb8a <smp_ident_addr_info+0x196>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1eac0:	7a29      	ldrb	r1, [r5, #8]
   1eac2:	464a      	mov	r2, r9
   1eac4:	2002      	movs	r0, #2
   1eac6:	f00a f9dd 	bl	28e84 <bt_keys_get_type>
		if (!keys) {
   1eaca:	4606      	mov	r6, r0
   1eacc:	b9c0      	cbnz	r0, 1eb00 <smp_ident_addr_info+0x10c>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1eace:	4648      	mov	r0, r9
   1ead0:	f7f6 ff04 	bl	158dc <bt_addr_le_str>
   1ead4:	466c      	mov	r4, sp
   1ead6:	b08a      	sub	sp, #40	; 0x28
   1ead8:	466a      	mov	r2, sp
   1eada:	4b39      	ldr	r3, [pc, #228]	; (1ebc0 <smp_ident_addr_info+0x1cc>)
   1eadc:	6153      	str	r3, [r2, #20]
   1eade:	4b33      	ldr	r3, [pc, #204]	; (1ebac <smp_ident_addr_info+0x1b8>)
   1eae0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1eae4:	f240 3301 	movw	r3, #769	; 0x301
   1eae8:	8413      	strh	r3, [r2, #32]
   1eaea:	4b32      	ldr	r3, [pc, #200]	; (1ebb4 <smp_ident_addr_info+0x1c0>)
   1eaec:	f842 3f10 	str.w	r3, [r2, #16]!
   1eaf0:	4831      	ldr	r0, [pc, #196]	; (1ebb8 <smp_ident_addr_info+0x1c4>)
   1eaf2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1eaf6:	f009 ff06 	bl	28906 <z_log_msg_static_create.constprop.0>
   1eafa:	46a5      	mov	sp, r4
				return BT_SMP_ERR_UNSPECIFIED;
   1eafc:	2008      	movs	r0, #8
   1eafe:	e7c2      	b.n	1ea86 <smp_ident_addr_info+0x92>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1eb00:	78eb      	ldrb	r3, [r5, #3]
   1eb02:	2b00      	cmp	r3, #0
   1eb04:	d13b      	bne.n	1eb7e <smp_ident_addr_info+0x18a>
			dst = &conn->le.resp_addr;
   1eb06:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1eb0a:	780b      	ldrb	r3, [r1, #0]
   1eb0c:	2b01      	cmp	r3, #1
   1eb0e:	d120      	bne.n	1eb52 <smp_ident_addr_info+0x15e>
		if (bt_addr_le_is_rpa(dst)) {
   1eb10:	798b      	ldrb	r3, [r1, #6]
   1eb12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1eb16:	2b40      	cmp	r3, #64	; 0x40
   1eb18:	d11b      	bne.n	1eb52 <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1eb1a:	2206      	movs	r2, #6
   1eb1c:	3101      	adds	r1, #1
   1eb1e:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1eb22:	f008 f863 	bl	26bec <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1eb26:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
   1eb2a:	b193      	cbz	r3, 1eb52 <smp_ident_addr_info+0x15e>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1eb2c:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
   1eb30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1eb34:	2bc0      	cmp	r3, #192	; 0xc0
   1eb36:	d00c      	beq.n	1eb52 <smp_ident_addr_info+0x15e>
	memcpy(dst, src, sizeof(*dst));
   1eb38:	2207      	movs	r2, #7
   1eb3a:	4641      	mov	r1, r8
   1eb3c:	1c70      	adds	r0, r6, #1
   1eb3e:	f008 f855 	bl	26bec <memcpy>
   1eb42:	2207      	movs	r2, #7
   1eb44:	4641      	mov	r1, r8
   1eb46:	4648      	mov	r0, r9
   1eb48:	f008 f850 	bl	26bec <memcpy>
				bt_conn_identity_resolved(conn);
   1eb4c:	4628      	mov	r0, r5
   1eb4e:	f7fa febd 	bl	198cc <bt_conn_identity_resolved>
	conflict = bt_id_find_conflict(new_bond);
   1eb52:	4630      	mov	r0, r6
   1eb54:	f7f9 fa7e 	bl	18054 <bt_id_find_conflict>
	if (conflict) {
   1eb58:	b1a0      	cbz	r0, 1eb84 <smp_ident_addr_info+0x190>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1eb5a:	466d      	mov	r5, sp
   1eb5c:	b088      	sub	sp, #32
   1eb5e:	466a      	mov	r2, sp
   1eb60:	4b18      	ldr	r3, [pc, #96]	; (1ebc4 <smp_ident_addr_info+0x1d0>)
   1eb62:	6153      	str	r3, [r2, #20]
   1eb64:	2403      	movs	r4, #3
   1eb66:	4b18      	ldr	r3, [pc, #96]	; (1ebc8 <smp_ident_addr_info+0x1d4>)
   1eb68:	4813      	ldr	r0, [pc, #76]	; (1ebb8 <smp_ident_addr_info+0x1c4>)
   1eb6a:	6193      	str	r3, [r2, #24]
   1eb6c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1eb70:	f842 4f10 	str.w	r4, [r2, #16]!
   1eb74:	f009 fec7 	bl	28906 <z_log_msg_static_create.constprop.0>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1eb78:	4620      	mov	r0, r4
   1eb7a:	46ad      	mov	sp, r5
		if (err) {
   1eb7c:	e783      	b.n	1ea86 <smp_ident_addr_info+0x92>
			dst = &conn->le.init_addr;
   1eb7e:	f105 018f 	add.w	r1, r5, #143	; 0x8f
   1eb82:	e7c2      	b.n	1eb0a <smp_ident_addr_info+0x116>
	bt_id_add(new_bond);
   1eb84:	4630      	mov	r0, r6
   1eb86:	f7f9 fa75 	bl	18074 <bt_id_add>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1eb8a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1eb8e:	075b      	lsls	r3, r3, #29
   1eb90:	d503      	bpl.n	1eb9a <smp_ident_addr_info+0x1a6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1eb92:	210a      	movs	r1, #10
   1eb94:	4620      	mov	r0, r4
   1eb96:	f009 fec4 	bl	28922 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1eb9a:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1eb9e:	b109      	cbz	r1, 1eba4 <smp_ident_addr_info+0x1b0>
	return 0;
   1eba0:	2000      	movs	r0, #0
   1eba2:	e770      	b.n	1ea86 <smp_ident_addr_info+0x92>
		smp_pairing_complete(smp, 0);
   1eba4:	4620      	mov	r0, r4
   1eba6:	f7ff fd19 	bl	1e5dc <smp_pairing_complete>
   1ebaa:	e7f9      	b.n	1eba0 <smp_ident_addr_info+0x1ac>
   1ebac:	0002e9d3 	.word	0x0002e9d3
   1ebb0:	0002e701 	.word	0x0002e701
   1ebb4:	01000004 	.word	0x01000004
   1ebb8:	0002a898 	.word	0x0002a898
   1ebbc:	0002e719 	.word	0x0002e719
   1ebc0:	0002e406 	.word	0x0002e406
   1ebc4:	0002e725 	.word	0x0002e725
   1ebc8:	0002e9c0 	.word	0x0002e9c0

0001ebcc <smp_central_ident>:
{
   1ebcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebd0:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1ebd2:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
{
   1ebd6:	af00      	add	r7, sp, #0
   1ebd8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ebda:	210d      	movs	r1, #13
   1ebdc:	3004      	adds	r0, #4
   1ebde:	f009 fe59 	bl	28894 <atomic_test_bit>
   1ebe2:	b378      	cbz	r0, 1ec44 <smp_central_ident+0x78>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ebe4:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1ebe8:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1ebea:	68de      	ldr	r6, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ebec:	4642      	mov	r2, r8
   1ebee:	2004      	movs	r0, #4
   1ebf0:	f00a f948 	bl	28e84 <bt_keys_get_type>
		if (!keys) {
   1ebf4:	4605      	mov	r5, r0
   1ebf6:	b9d0      	cbnz	r0, 1ec2e <smp_central_ident+0x62>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ebf8:	4640      	mov	r0, r8
   1ebfa:	f7f6 fe6f 	bl	158dc <bt_addr_le_str>
   1ebfe:	466c      	mov	r4, sp
   1ec00:	b08a      	sub	sp, #40	; 0x28
   1ec02:	466a      	mov	r2, sp
   1ec04:	4b1c      	ldr	r3, [pc, #112]	; (1ec78 <smp_central_ident+0xac>)
   1ec06:	6153      	str	r3, [r2, #20]
   1ec08:	4b1c      	ldr	r3, [pc, #112]	; (1ec7c <smp_central_ident+0xb0>)
   1ec0a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1ec0e:	f240 3301 	movw	r3, #769	; 0x301
   1ec12:	8413      	strh	r3, [r2, #32]
   1ec14:	4b1a      	ldr	r3, [pc, #104]	; (1ec80 <smp_central_ident+0xb4>)
   1ec16:	481b      	ldr	r0, [pc, #108]	; (1ec84 <smp_central_ident+0xb8>)
   1ec18:	f842 3f10 	str.w	r3, [r2, #16]!
   1ec1c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1ec20:	f009 fe71 	bl	28906 <z_log_msg_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   1ec24:	2008      	movs	r0, #8
   1ec26:	46a5      	mov	sp, r4
}
   1ec28:	46bd      	mov	sp, r7
   1ec2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1ec2e:	2202      	movs	r2, #2
   1ec30:	4631      	mov	r1, r6
   1ec32:	3018      	adds	r0, #24
   1ec34:	f007 ffda 	bl	26bec <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1ec38:	2208      	movs	r2, #8
   1ec3a:	1cb1      	adds	r1, r6, #2
   1ec3c:	f105 0010 	add.w	r0, r5, #16
   1ec40:	f007 ffd4 	bl	26bec <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1ec44:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1ec48:	f023 0201 	bic.w	r2, r3, #1
   1ec4c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ec50:	079a      	lsls	r2, r3, #30
   1ec52:	d508      	bpl.n	1ec66 <smp_central_ident+0x9a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ec54:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ec56:	4620      	mov	r0, r4
   1ec58:	f009 fe63 	bl	28922 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ec5c:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1ec60:	b129      	cbz	r1, 1ec6e <smp_central_ident+0xa2>
	return 0;
   1ec62:	2000      	movs	r0, #0
   1ec64:	e7e0      	b.n	1ec28 <smp_central_ident+0x5c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ec66:	075b      	lsls	r3, r3, #29
   1ec68:	d5f8      	bpl.n	1ec5c <smp_central_ident+0x90>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ec6a:	210a      	movs	r1, #10
   1ec6c:	e7f3      	b.n	1ec56 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   1ec6e:	4620      	mov	r0, r4
   1ec70:	f7ff fcb4 	bl	1e5dc <smp_pairing_complete>
   1ec74:	e7f5      	b.n	1ec62 <smp_central_ident+0x96>
   1ec76:	bf00      	nop
   1ec78:	0002e406 	.word	0x0002e406
   1ec7c:	0002e99f 	.word	0x0002e99f
   1ec80:	01000004 	.word	0x01000004
   1ec84:	0002a898 	.word	0x0002a898

0001ec88 <smp_pairing_failed>:
{
   1ec88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec8c:	460e      	mov	r6, r1
   1ec8e:	af00      	add	r7, sp, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   1ec90:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
{
   1ec94:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1ec96:	f7fe fb2d 	bl	1d2f4 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1ec9a:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1ec9c:	46e9      	mov	r9, sp
   1ec9e:	b088      	sub	sp, #32
   1eca0:	7833      	ldrb	r3, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1eca2:	4605      	mov	r5, r0
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1eca4:	466a      	mov	r2, sp
   1eca6:	4915      	ldr	r1, [pc, #84]	; (1ecfc <smp_pairing_failed+0x74>)
   1eca8:	6151      	str	r1, [r2, #20]
   1ecaa:	4915      	ldr	r1, [pc, #84]	; (1ed00 <smp_pairing_failed+0x78>)
   1ecac:	4815      	ldr	r0, [pc, #84]	; (1ed04 <smp_pairing_failed+0x7c>)
   1ecae:	e9c2 1306 	strd	r1, r3, [r2, #24]
   1ecb2:	2304      	movs	r3, #4
   1ecb4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1ecb8:	f842 3f10 	str.w	r3, [r2, #16]!
   1ecbc:	f009 fe23 	bl	28906 <z_log_msg_static_create.constprop.0>
   1ecc0:	46cd      	mov	sp, r9
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ecc2:	f104 0904 	add.w	r9, r4, #4
   1ecc6:	210a      	movs	r1, #10
   1ecc8:	4648      	mov	r0, r9
   1ecca:	f009 feba 	bl	28a42 <atomic_test_and_clear_bit>
   1ecce:	b140      	cbz	r0, 1ece2 <smp_pairing_failed+0x5a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ecd0:	b975      	cbnz	r5, 1ecf0 <smp_pairing_failed+0x68>
	smp_pairing_complete(smp, req->reason);
   1ecd2:	4620      	mov	r0, r4
   1ecd4:	7831      	ldrb	r1, [r6, #0]
   1ecd6:	f7ff fc81 	bl	1e5dc <smp_pairing_complete>
}
   1ecda:	2000      	movs	r0, #0
   1ecdc:	46bd      	mov	sp, r7
   1ecde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1ece2:	210b      	movs	r1, #11
   1ece4:	4648      	mov	r0, r9
   1ece6:	f009 feac 	bl	28a42 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1ecea:	2800      	cmp	r0, #0
   1ecec:	d1f0      	bne.n	1ecd0 <smp_pairing_failed+0x48>
   1ecee:	e7f0      	b.n	1ecd2 <smp_pairing_failed+0x4a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1ecf0:	692b      	ldr	r3, [r5, #16]
   1ecf2:	2b00      	cmp	r3, #0
   1ecf4:	d0ed      	beq.n	1ecd2 <smp_pairing_failed+0x4a>
			smp_auth_cb->cancel(conn);
   1ecf6:	4640      	mov	r0, r8
   1ecf8:	4798      	blx	r3
   1ecfa:	e7ea      	b.n	1ecd2 <smp_pairing_failed+0x4a>
   1ecfc:	0002e764 	.word	0x0002e764
   1ed00:	0002e97b 	.word	0x0002e97b
   1ed04:	0002a898 	.word	0x0002a898

0001ed08 <bt_smp_encrypt_change>:
{
   1ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
   1ed0c:	4604      	mov	r4, r0
{
   1ed0e:	b08b      	sub	sp, #44	; 0x2c
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ed10:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1ed14:	4605      	mov	r5, r0
   1ed16:	af00      	add	r7, sp, #0
   1ed18:	4688      	mov	r8, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ed1a:	4630      	mov	r0, r6
   1ed1c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1ed1e:	f854 99ec 	ldr.w	r9, [r4], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1ed22:	f009 fe8e 	bl	28a42 <atomic_test_and_clear_bit>
   1ed26:	b328      	cbz	r0, 1ed74 <bt_smp_encrypt_change+0x6c>
	if (hci_status) {
   1ed28:	f1b8 0f00 	cmp.w	r8, #0
   1ed2c:	d017      	beq.n	1ed5e <bt_smp_encrypt_change+0x56>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ed2e:	2103      	movs	r1, #3
   1ed30:	4630      	mov	r0, r6
   1ed32:	f009 fdaf 	bl	28894 <atomic_test_bit>
   1ed36:	b1e8      	cbz	r0, 1ed74 <bt_smp_encrypt_change+0x6c>
			uint8_t smp_err = smp_err_get(
   1ed38:	4640      	mov	r0, r8
   1ed3a:	f7f8 f925 	bl	16f88 <bt_security_err_get>
	switch (auth_err) {
   1ed3e:	3801      	subs	r0, #1
   1ed40:	b2c0      	uxtb	r0, r0
   1ed42:	2808      	cmp	r0, #8
   1ed44:	bf9a      	itte	ls
   1ed46:	4bbc      	ldrls	r3, [pc, #752]	; (1f038 <bt_smp_encrypt_change+0x330>)
   1ed48:	5c1d      	ldrbls	r5, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1ed4a:	2500      	movhi	r5, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1ed4c:	2102      	movs	r1, #2
   1ed4e:	4630      	mov	r0, r6
   1ed50:	f009 fde7 	bl	28922 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1ed54:	4629      	mov	r1, r5
		smp_pairing_complete(smp, 0);
   1ed56:	4620      	mov	r0, r4
   1ed58:	f7ff fc40 	bl	1e5dc <smp_pairing_complete>
   1ed5c:	e00a      	b.n	1ed74 <bt_smp_encrypt_change+0x6c>
	if (!conn->encrypt) {
   1ed5e:	f899 300b 	ldrb.w	r3, [r9, #11]
   1ed62:	b13b      	cbz	r3, 1ed74 <bt_smp_encrypt_change+0x6c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1ed64:	2103      	movs	r1, #3
   1ed66:	4630      	mov	r0, r6
   1ed68:	f009 fd94 	bl	28894 <atomic_test_bit>
   1ed6c:	b930      	cbnz	r0, 1ed7c <bt_smp_encrypt_change+0x74>
		smp_reset(smp);
   1ed6e:	4620      	mov	r0, r4
   1ed70:	f009 fe7d 	bl	28a6e <smp_reset>
}
   1ed74:	372c      	adds	r7, #44	; 0x2c
   1ed76:	46bd      	mov	sp, r7
   1ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ed7c:	2105      	movs	r1, #5
   1ed7e:	4630      	mov	r0, r6
   1ed80:	f009 fd88 	bl	28894 <atomic_test_bit>
   1ed84:	b1b8      	cbz	r0, 1edb6 <bt_smp_encrypt_change+0xae>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1ed86:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ed8a:	071b      	lsls	r3, r3, #28
   1ed8c:	d507      	bpl.n	1ed9e <bt_smp_encrypt_change+0x96>
   1ed8e:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1ed92:	0718      	lsls	r0, r3, #28
   1ed94:	d503      	bpl.n	1ed9e <bt_smp_encrypt_change+0x96>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1ed96:	2111      	movs	r1, #17
   1ed98:	4630      	mov	r0, r6
   1ed9a:	f009 fdc2 	bl	28922 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1ed9e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1eda2:	f023 0308 	bic.w	r3, r3, #8
   1eda6:	f805 3c04 	strb.w	r3, [r5, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1edaa:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1edae:	f023 0308 	bic.w	r3, r3, #8
   1edb2:	f805 3c03 	strb.w	r3, [r5, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1edb6:	f815 3c03 	ldrb.w	r3, [r5, #-3]
   1edba:	07d9      	lsls	r1, r3, #31
   1edbc:	d527      	bpl.n	1ee0e <bt_smp_encrypt_change+0x106>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1edbe:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1edc0:	4620      	mov	r0, r4
   1edc2:	f009 fdae 	bl	28922 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1edc6:	2102      	movs	r1, #2
   1edc8:	4630      	mov	r0, r6
   1edca:	f009 fdaa 	bl	28922 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   1edce:	f8d5 b000 	ldr.w	fp, [r5]
	struct bt_keys *keys = conn->le.keys;
   1edd2:	f8db a0b8 	ldr.w	sl, [fp, #184]	; 0xb8
	if (!keys) {
   1edd6:	f1ba 0f00 	cmp.w	sl, #0
   1edda:	d120      	bne.n	1ee1e <bt_smp_encrypt_change+0x116>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1eddc:	f10b 0088 	add.w	r0, fp, #136	; 0x88
   1ede0:	f7f6 fd7c 	bl	158dc <bt_addr_le_str>
   1ede4:	466c      	mov	r4, sp
   1ede6:	b08a      	sub	sp, #40	; 0x28
   1ede8:	466a      	mov	r2, sp
   1edea:	4b94      	ldr	r3, [pc, #592]	; (1f03c <bt_smp_encrypt_change+0x334>)
   1edec:	6153      	str	r3, [r2, #20]
   1edee:	4b94      	ldr	r3, [pc, #592]	; (1f040 <bt_smp_encrypt_change+0x338>)
   1edf0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1edf4:	f240 3301 	movw	r3, #769	; 0x301
   1edf8:	8413      	strh	r3, [r2, #32]
   1edfa:	4b92      	ldr	r3, [pc, #584]	; (1f044 <bt_smp_encrypt_change+0x33c>)
   1edfc:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee00:	f44f 5111 	mov.w	r1, #9280	; 0x2440
			LOG_ERR("Unable to allocate Signing Info buffer");
   1ee04:	4890      	ldr	r0, [pc, #576]	; (1f048 <bt_smp_encrypt_change+0x340>)
   1ee06:	f009 fd7e 	bl	28906 <z_log_msg_static_create.constprop.0>
   1ee0a:	46a5      	mov	sp, r4
			return BT_SMP_ERR_UNSPECIFIED;
   1ee0c:	e7b2      	b.n	1ed74 <bt_smp_encrypt_change+0x6c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1ee0e:	079a      	lsls	r2, r3, #30
   1ee10:	d501      	bpl.n	1ee16 <bt_smp_encrypt_change+0x10e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ee12:	2108      	movs	r1, #8
   1ee14:	e7d4      	b.n	1edc0 <bt_smp_encrypt_change+0xb8>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1ee16:	0758      	lsls	r0, r3, #29
   1ee18:	d5d5      	bpl.n	1edc6 <bt_smp_encrypt_change+0xbe>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ee1a:	210a      	movs	r1, #10
   1ee1c:	e7d0      	b.n	1edc0 <bt_smp_encrypt_change+0xb8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1ee1e:	2105      	movs	r1, #5
   1ee20:	f009 fd38 	bl	28894 <atomic_test_bit>
   1ee24:	b9e8      	cbnz	r0, 1ee62 <bt_smp_encrypt_change+0x15a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1ee26:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ee2a:	07d9      	lsls	r1, r3, #31
   1ee2c:	d519      	bpl.n	1ee62 <bt_smp_encrypt_change+0x15a>
	struct bt_keys *keys = conn->le.keys;
   1ee2e:	682b      	ldr	r3, [r5, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ee30:	211a      	movs	r1, #26
   1ee32:	f107 000c 	add.w	r0, r7, #12
	struct bt_keys *keys = conn->le.keys;
   1ee36:	f8d3 80b8 	ldr.w	r8, [r3, #184]	; 0xb8
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1ee3a:	f003 f85b 	bl	21ef4 <bt_rand>
   1ee3e:	6078      	str	r0, [r7, #4]
   1ee40:	b340      	cbz	r0, 1ee94 <bt_smp_encrypt_change+0x18c>
			LOG_ERR("Unable to get random bytes");
   1ee42:	46e8      	mov	r8, sp
   1ee44:	b088      	sub	sp, #32
   1ee46:	466a      	mov	r2, sp
   1ee48:	4b80      	ldr	r3, [pc, #512]	; (1f04c <bt_smp_encrypt_change+0x344>)
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1ee4a:	6153      	str	r3, [r2, #20]
   1ee4c:	4b80      	ldr	r3, [pc, #512]	; (1f050 <bt_smp_encrypt_change+0x348>)
   1ee4e:	6193      	str	r3, [r2, #24]
   1ee50:	2303      	movs	r3, #3
   1ee52:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee56:	487c      	ldr	r0, [pc, #496]	; (1f048 <bt_smp_encrypt_change+0x340>)
   1ee58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee5c:	f009 fd53 	bl	28906 <z_log_msg_static_create.constprop.0>
   1ee60:	46c5      	mov	sp, r8
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1ee62:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1ee66:	079a      	lsls	r2, r3, #30
   1ee68:	f140 80ae 	bpl.w	1efc8 <bt_smp_encrypt_change+0x2c0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1ee6c:	2108      	movs	r1, #8
   1ee6e:	4620      	mov	r0, r4
   1ee70:	f009 fd6b 	bl	2894a <smp_create_pdu.constprop.0>
		if (!buf) {
   1ee74:	4680      	mov	r8, r0
   1ee76:	2800      	cmp	r0, #0
   1ee78:	d175      	bne.n	1ef66 <bt_smp_encrypt_change+0x25e>
			LOG_ERR("Unable to allocate Ident Info buffer");
   1ee7a:	466c      	mov	r4, sp
   1ee7c:	b088      	sub	sp, #32
   1ee7e:	466a      	mov	r2, sp
   1ee80:	4b74      	ldr	r3, [pc, #464]	; (1f054 <bt_smp_encrypt_change+0x34c>)
			LOG_ERR("Unable to allocate Signing Info buffer");
   1ee82:	6153      	str	r3, [r2, #20]
   1ee84:	4b6e      	ldr	r3, [pc, #440]	; (1f040 <bt_smp_encrypt_change+0x338>)
   1ee86:	6193      	str	r3, [r2, #24]
   1ee88:	2303      	movs	r3, #3
   1ee8a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ee8e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ee92:	e7b7      	b.n	1ee04 <bt_smp_encrypt_change+0xfc>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1ee94:	2106      	movs	r1, #6
   1ee96:	4620      	mov	r0, r4
   1ee98:	f009 fd57 	bl	2894a <smp_create_pdu.constprop.0>
		if (!buf) {
   1ee9c:	4681      	mov	r9, r0
   1ee9e:	b920      	cbnz	r0, 1eeaa <bt_smp_encrypt_change+0x1a2>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1eea0:	46e8      	mov	r8, sp
   1eea2:	b088      	sub	sp, #32
   1eea4:	466a      	mov	r2, sp
   1eea6:	4b6c      	ldr	r3, [pc, #432]	; (1f058 <bt_smp_encrypt_change+0x350>)
   1eea8:	e7cf      	b.n	1ee4a <bt_smp_encrypt_change+0x142>
	return net_buf_simple_add(&buf->b, len);
   1eeaa:	2110      	movs	r1, #16
   1eeac:	300c      	adds	r0, #12
   1eeae:	f00a f90b 	bl	290c8 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1eeb2:	f898 200c 	ldrb.w	r2, [r8, #12]
   1eeb6:	6038      	str	r0, [r7, #0]
   1eeb8:	f107 010c 	add.w	r1, r7, #12
   1eebc:	f007 fe96 	bl	26bec <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1eec0:	f898 000c 	ldrb.w	r0, [r8, #12]
   1eec4:	683b      	ldr	r3, [r7, #0]
   1eec6:	280f      	cmp	r0, #15
   1eec8:	d805      	bhi.n	1eed6 <bt_smp_encrypt_change+0x1ce>
			(void)memset(info->ltk + keys->enc_size, 0,
   1eeca:	f1c0 0210 	rsb	r2, r0, #16
   1eece:	6879      	ldr	r1, [r7, #4]
   1eed0:	4418      	add	r0, r3
   1eed2:	f007 fe96 	bl	26c02 <memset>
		smp_send(smp, buf, NULL, NULL);
   1eed6:	4649      	mov	r1, r9
   1eed8:	2200      	movs	r2, #0
   1eeda:	4620      	mov	r0, r4
   1eedc:	f7fe fa6c 	bl	1d3b8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1eee0:	2107      	movs	r1, #7
   1eee2:	4620      	mov	r0, r4
   1eee4:	f009 fd31 	bl	2894a <smp_create_pdu.constprop.0>
		if (!buf) {
   1eee8:	4681      	mov	r9, r0
   1eeea:	b920      	cbnz	r0, 1eef6 <bt_smp_encrypt_change+0x1ee>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1eeec:	46e8      	mov	r8, sp
   1eeee:	b088      	sub	sp, #32
   1eef0:	466a      	mov	r2, sp
   1eef2:	4b5a      	ldr	r3, [pc, #360]	; (1f05c <bt_smp_encrypt_change+0x354>)
   1eef4:	e7a9      	b.n	1ee4a <bt_smp_encrypt_change+0x142>
   1eef6:	210a      	movs	r1, #10
   1eef8:	300c      	adds	r0, #12
   1eefa:	f00a f8e5 	bl	290c8 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1eefe:	2208      	movs	r2, #8
   1ef00:	4603      	mov	r3, r0
   1ef02:	f107 011c 	add.w	r1, r7, #28
   1ef06:	3002      	adds	r0, #2
   1ef08:	607b      	str	r3, [r7, #4]
   1ef0a:	f007 fe6f 	bl	26bec <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1ef0e:	687b      	ldr	r3, [r7, #4]
   1ef10:	2202      	movs	r2, #2
   1ef12:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1ef16:	4618      	mov	r0, r3
   1ef18:	f007 fe68 	bl	26bec <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1ef1c:	4649      	mov	r1, r9
   1ef1e:	4620      	mov	r0, r4
   1ef20:	4a4f      	ldr	r2, [pc, #316]	; (1f060 <bt_smp_encrypt_change+0x358>)
   1ef22:	f7fe fa49 	bl	1d3b8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ef26:	210d      	movs	r1, #13
   1ef28:	4630      	mov	r0, r6
   1ef2a:	f009 fcb3 	bl	28894 <atomic_test_bit>
   1ef2e:	2800      	cmp	r0, #0
   1ef30:	d097      	beq.n	1ee62 <bt_smp_encrypt_change+0x15a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1ef32:	4640      	mov	r0, r8
   1ef34:	2101      	movs	r1, #1
   1ef36:	f009 ffb5 	bl	28ea4 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1ef3a:	f107 010c 	add.w	r1, r7, #12
   1ef3e:	2210      	movs	r2, #16
   1ef40:	f108 0072 	add.w	r0, r8, #114	; 0x72
   1ef44:	f007 fe52 	bl	26bec <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1ef48:	f107 011c 	add.w	r1, r7, #28
   1ef4c:	2208      	movs	r2, #8
   1ef4e:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1ef52:	f007 fe4b 	bl	26bec <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1ef56:	2202      	movs	r2, #2
   1ef58:	f107 0124 	add.w	r1, r7, #36	; 0x24
   1ef5c:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1ef60:	f007 fe44 	bl	26bec <memcpy>
   1ef64:	e77d      	b.n	1ee62 <bt_smp_encrypt_change+0x15a>
   1ef66:	2110      	movs	r1, #16
   1ef68:	300c      	adds	r0, #12
   1ef6a:	f00a f8ad 	bl	290c8 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1ef6e:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1ef72:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 1f064 <bt_smp_encrypt_change+0x35c>
   1ef76:	f44f 73b4 	mov.w	r3, #360	; 0x168
   1ef7a:	2210      	movs	r2, #16
   1ef7c:	fb12 3101 	smlabb	r1, r2, r1, r3
   1ef80:	4449      	add	r1, r9
   1ef82:	f007 fe33 	bl	26bec <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1ef86:	4641      	mov	r1, r8
   1ef88:	2200      	movs	r2, #0
   1ef8a:	4620      	mov	r0, r4
   1ef8c:	f7fe fa14 	bl	1d3b8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1ef90:	2109      	movs	r1, #9
   1ef92:	4620      	mov	r0, r4
   1ef94:	f009 fcd9 	bl	2894a <smp_create_pdu.constprop.0>
		if (!buf) {
   1ef98:	4680      	mov	r8, r0
   1ef9a:	b920      	cbnz	r0, 1efa6 <bt_smp_encrypt_change+0x29e>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1ef9c:	466c      	mov	r4, sp
   1ef9e:	b088      	sub	sp, #32
   1efa0:	466a      	mov	r2, sp
   1efa2:	4b31      	ldr	r3, [pc, #196]	; (1f068 <bt_smp_encrypt_change+0x360>)
   1efa4:	e76d      	b.n	1ee82 <bt_smp_encrypt_change+0x17a>
   1efa6:	2107      	movs	r1, #7
   1efa8:	300c      	adds	r0, #12
   1efaa:	f00a f88d 	bl	290c8 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1efae:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1efb2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1efb6:	2207      	movs	r2, #7
   1efb8:	4449      	add	r1, r9
   1efba:	f007 fe17 	bl	26bec <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1efbe:	4a2b      	ldr	r2, [pc, #172]	; (1f06c <bt_smp_encrypt_change+0x364>)
   1efc0:	4641      	mov	r1, r8
   1efc2:	4620      	mov	r0, r4
   1efc4:	f7fe f9f8 	bl	1d3b8 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1efc8:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1efcc:	075b      	lsls	r3, r3, #29
   1efce:	d52c      	bpl.n	1f02a <bt_smp_encrypt_change+0x322>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   1efd0:	210a      	movs	r1, #10
   1efd2:	4620      	mov	r0, r4
   1efd4:	f009 fcb9 	bl	2894a <smp_create_pdu.constprop.0>
		if (!buf) {
   1efd8:	4680      	mov	r8, r0
   1efda:	b920      	cbnz	r0, 1efe6 <bt_smp_encrypt_change+0x2de>
			LOG_ERR("Unable to allocate Signing Info buffer");
   1efdc:	466c      	mov	r4, sp
   1efde:	b088      	sub	sp, #32
   1efe0:	466a      	mov	r2, sp
   1efe2:	4b23      	ldr	r3, [pc, #140]	; (1f070 <bt_smp_encrypt_change+0x368>)
   1efe4:	e74d      	b.n	1ee82 <bt_smp_encrypt_change+0x17a>
   1efe6:	2110      	movs	r1, #16
   1efe8:	300c      	adds	r0, #12
   1efea:	f00a f86d 	bl	290c8 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   1efee:	2110      	movs	r1, #16
   1eff0:	4683      	mov	fp, r0
   1eff2:	f002 ff7f 	bl	21ef4 <bt_rand>
   1eff6:	4681      	mov	r9, r0
   1eff8:	2800      	cmp	r0, #0
   1effa:	f47f aebb 	bne.w	1ed74 <bt_smp_encrypt_change+0x6c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1effe:	210d      	movs	r1, #13
   1f000:	4630      	mov	r0, r6
   1f002:	f009 fc47 	bl	28894 <atomic_test_bit>
   1f006:	b158      	cbz	r0, 1f020 <bt_smp_encrypt_change+0x318>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   1f008:	2108      	movs	r1, #8
   1f00a:	4650      	mov	r0, sl
   1f00c:	f009 ff4a 	bl	28ea4 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   1f010:	2210      	movs	r2, #16
   1f012:	4659      	mov	r1, fp
   1f014:	f10a 0040 	add.w	r0, sl, #64	; 0x40
   1f018:	f007 fde8 	bl	26bec <memcpy>
			keys->local_csrk.cnt = 0U;
   1f01c:	f8ca 9050 	str.w	r9, [sl, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   1f020:	4a14      	ldr	r2, [pc, #80]	; (1f074 <bt_smp_encrypt_change+0x36c>)
   1f022:	4641      	mov	r1, r8
   1f024:	4620      	mov	r0, r4
   1f026:	f7fe f9c7 	bl	1d3b8 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   1f02a:	f835 1c04 	ldrh.w	r1, [r5, #-4]
   1f02e:	2900      	cmp	r1, #0
   1f030:	f47f aea0 	bne.w	1ed74 <bt_smp_encrypt_change+0x6c>
   1f034:	e68f      	b.n	1ed56 <bt_smp_encrypt_change+0x4e>
   1f036:	bf00      	nop
   1f038:	0002e8b3 	.word	0x0002e8b3
   1f03c:	0002e78a 	.word	0x0002e78a
   1f040:	0002e900 	.word	0x0002e900
   1f044:	01000004 	.word	0x01000004
   1f048:	0002a898 	.word	0x0002a898
   1f04c:	0002e7a3 	.word	0x0002e7a3
   1f050:	0002e8e9 	.word	0x0002e8e9
   1f054:	0002e819 	.word	0x0002e819
   1f058:	0002e7c2 	.word	0x0002e7c2
   1f05c:	0002e7ed 	.word	0x0002e7ed
   1f060:	00028e03 	.word	0x00028e03
   1f064:	20000390 	.word	0x20000390
   1f068:	0002e842 	.word	0x0002e842
   1f06c:	00028df9 	.word	0x00028df9
   1f070:	0002e870 	.word	0x0002e870
   1f074:	00028def 	.word	0x00028def

0001f078 <smp_timeout>:
{
   1f078:	b5b0      	push	{r4, r5, r7, lr}
   1f07a:	af00      	add	r7, sp, #0
	LOG_ERR("SMP Timeout");
   1f07c:	466d      	mov	r5, sp
   1f07e:	b088      	sub	sp, #32
{
   1f080:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1f082:	466a      	mov	r2, sp
   1f084:	4b0c      	ldr	r3, [pc, #48]	; (1f0b8 <smp_timeout+0x40>)
   1f086:	6153      	str	r3, [r2, #20]
   1f088:	4b0c      	ldr	r3, [pc, #48]	; (1f0bc <smp_timeout+0x44>)
   1f08a:	6193      	str	r3, [r2, #24]
   1f08c:	2303      	movs	r3, #3
   1f08e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f092:	480b      	ldr	r0, [pc, #44]	; (1f0c0 <smp_timeout+0x48>)
   1f094:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f098:	f009 fc35 	bl	28906 <z_log_msg_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1f09c:	f5a4 7090 	sub.w	r0, r4, #288	; 0x120
   1f0a0:	46ad      	mov	sp, r5
   1f0a2:	2108      	movs	r1, #8
   1f0a4:	f7ff fa9a 	bl	1e5dc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f0a8:	2104      	movs	r1, #4
   1f0aa:	f5a4 708e 	sub.w	r0, r4, #284	; 0x11c
   1f0ae:	f009 fc38 	bl	28922 <atomic_set_bit>
}
   1f0b2:	46bd      	mov	sp, r7
   1f0b4:	bdb0      	pop	{r4, r5, r7, pc}
   1f0b6:	bf00      	nop
   1f0b8:	0002e89b 	.word	0x0002e89b
   1f0bc:	0002e8dd 	.word	0x0002e8dd
   1f0c0:	0002a898 	.word	0x0002a898

0001f0c4 <bt_smp_update_keys>:
{
   1f0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0c8:	af00      	add	r7, sp, #0
   1f0ca:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f0cc:	f009 fc1e 	bl	2890c <smp_chan_get>
	if (!smp) {
   1f0d0:	4605      	mov	r5, r0
   1f0d2:	b370      	cbz	r0, 1f132 <bt_smp_update_keys+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1f0d4:	1d06      	adds	r6, r0, #4
   1f0d6:	2103      	movs	r1, #3
   1f0d8:	4630      	mov	r0, r6
   1f0da:	f009 fbdb 	bl	28894 <atomic_test_bit>
   1f0de:	b340      	cbz	r0, 1f132 <bt_smp_update_keys+0x6e>
	if (conn->le.keys) {
   1f0e0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f0e4:	b108      	cbz	r0, 1f0ea <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   1f0e6:	f000 f9bb 	bl	1f460 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1f0ea:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1f0ee:	7a20      	ldrb	r0, [r4, #8]
   1f0f0:	4641      	mov	r1, r8
   1f0f2:	f000 f8a1 	bl	1f238 <bt_keys_get_addr>
   1f0f6:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (!conn->le.keys) {
   1f0fa:	b9e8      	cbnz	r0, 1f138 <bt_smp_update_keys+0x74>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1f0fc:	4640      	mov	r0, r8
   1f0fe:	f7f6 fbed 	bl	158dc <bt_addr_le_str>
   1f102:	466c      	mov	r4, sp
   1f104:	b08a      	sub	sp, #40	; 0x28
   1f106:	466a      	mov	r2, sp
   1f108:	4b3c      	ldr	r3, [pc, #240]	; (1f1fc <bt_smp_update_keys+0x138>)
   1f10a:	6153      	str	r3, [r2, #20]
   1f10c:	4b3c      	ldr	r3, [pc, #240]	; (1f200 <bt_smp_update_keys+0x13c>)
   1f10e:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f112:	f240 3301 	movw	r3, #769	; 0x301
   1f116:	8413      	strh	r3, [r2, #32]
   1f118:	4b3a      	ldr	r3, [pc, #232]	; (1f204 <bt_smp_update_keys+0x140>)
   1f11a:	483b      	ldr	r0, [pc, #236]	; (1f208 <bt_smp_update_keys+0x144>)
   1f11c:	f842 3f10 	str.w	r3, [r2, #16]!
   1f120:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f124:	f009 fbef 	bl	28906 <z_log_msg_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1f128:	2108      	movs	r1, #8
   1f12a:	46a5      	mov	sp, r4
   1f12c:	4628      	mov	r0, r5
   1f12e:	f7ff fad9 	bl	1e6e4 <smp_error>
}
   1f132:	46bd      	mov	sp, r7
   1f134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1f138:	210e      	movs	r1, #14
   1f13a:	4630      	mov	r0, r6
   1f13c:	f009 fbaa 	bl	28894 <atomic_test_bit>
   1f140:	b128      	cbz	r0, 1f14e <bt_smp_update_keys+0x8a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1f142:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1f146:	7b53      	ldrb	r3, [r2, #13]
   1f148:	f043 0302 	orr.w	r3, r3, #2
   1f14c:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1f14e:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1f150:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
	switch (smp->method) {
   1f154:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1f156:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1f158:	d83c      	bhi.n	1f1d4 <bt_smp_update_keys+0x110>
   1f15a:	2a00      	cmp	r2, #0
   1f15c:	d041      	beq.n	1f1e2 <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1f15e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1f162:	7b53      	ldrb	r3, [r2, #13]
   1f164:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f168:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1f16a:	7d2b      	ldrb	r3, [r5, #20]
   1f16c:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f16e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	return MIN(req->max_key_size, rsp->max_key_size);
   1f172:	428b      	cmp	r3, r1
   1f174:	bf28      	it	cs
   1f176:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1f178:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f17a:	2105      	movs	r1, #5
   1f17c:	4630      	mov	r0, r6
   1f17e:	f009 fb89 	bl	28894 <atomic_test_bit>
   1f182:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
		conn->le.keys->flags |= BT_KEYS_SC;
   1f186:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f188:	b3a0      	cbz	r0, 1f1f4 <bt_smp_update_keys+0x130>
		conn->le.keys->flags |= BT_KEYS_SC;
   1f18a:	f042 0210 	orr.w	r2, r2, #16
   1f18e:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1f190:	210d      	movs	r1, #13
   1f192:	4630      	mov	r0, r6
   1f194:	f009 fb7e 	bl	28894 <atomic_test_bit>
   1f198:	2800      	cmp	r0, #0
   1f19a:	d0ca      	beq.n	1f132 <bt_smp_update_keys+0x6e>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1f19c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f1a0:	2120      	movs	r1, #32
   1f1a2:	f009 fe7f 	bl	28ea4 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1f1a6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f1aa:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f1ae:	2210      	movs	r2, #16
   1f1b0:	301a      	adds	r0, #26
   1f1b2:	f007 fd1b 	bl	26bec <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1f1b6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f1ba:	2208      	movs	r2, #8
   1f1bc:	2100      	movs	r1, #0
   1f1be:	3010      	adds	r0, #16
   1f1c0:	f007 fd1f 	bl	26c02 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1f1c4:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   1f1c8:	2202      	movs	r2, #2
   1f1ca:	2100      	movs	r1, #0
   1f1cc:	3018      	adds	r0, #24
   1f1ce:	f007 fd18 	bl	26c02 <memset>
   1f1d2:	e7ae      	b.n	1f132 <bt_smp_update_keys+0x6e>
	switch (smp->method) {
   1f1d4:	3a05      	subs	r2, #5
   1f1d6:	2a01      	cmp	r2, #1
   1f1d8:	d803      	bhi.n	1f1e2 <bt_smp_update_keys+0x11e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1f1da:	f043 0320 	orr.w	r3, r3, #32
   1f1de:	734b      	strb	r3, [r1, #13]
   1f1e0:	e7bd      	b.n	1f15e <bt_smp_update_keys+0x9a>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1f1e2:	f023 0320 	bic.w	r3, r3, #32
   1f1e6:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1f1e8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
   1f1ec:	7b53      	ldrb	r3, [r2, #13]
   1f1ee:	f023 0301 	bic.w	r3, r3, #1
   1f1f2:	e7b9      	b.n	1f168 <bt_smp_update_keys+0xa4>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1f1f4:	f022 0210 	bic.w	r2, r2, #16
   1f1f8:	735a      	strb	r2, [r3, #13]
   1f1fa:	e79a      	b.n	1f132 <bt_smp_update_keys+0x6e>
   1f1fc:	0002e406 	.word	0x0002e406
   1f200:	0002ea4a 	.word	0x0002ea4a
   1f204:	01000004 	.word	0x01000004
   1f208:	0002a898 	.word	0x0002a898

0001f20c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1f20c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1f20e:	4b07      	ldr	r3, [pc, #28]	; (1f22c <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1f210:	4807      	ldr	r0, [pc, #28]	; (1f230 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1f212:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
   1f216:	f003 0306 	and.w	r3, r3, #6
   1f21a:	1f9a      	subs	r2, r3, #6
   1f21c:	4253      	negs	r3, r2
   1f21e:	4153      	adcs	r3, r2
   1f220:	4a04      	ldr	r2, [pc, #16]	; (1f234 <bt_smp_init+0x28>)
   1f222:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1f224:	f7f9 fd16 	bl	18c54 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1f228:	2000      	movs	r0, #0
   1f22a:	bd08      	pop	{r3, pc}
   1f22c:	20000390 	.word	0x20000390
   1f230:	20000854 	.word	0x20000854
   1f234:	200034b8 	.word	0x200034b8

0001f238 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   1f238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	LOG_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1f23a:	4c20      	ldr	r4, [pc, #128]	; (1f2bc <bt_keys_get_addr+0x84>)
   1f23c:	4626      	mov	r6, r4
{
   1f23e:	4605      	mov	r5, r0
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1f240:	f816 3b01 	ldrb.w	r3, [r6], #1
   1f244:	4283      	cmp	r3, r0
{
   1f246:	460f      	mov	r7, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1f248:	d013      	beq.n	1f272 <bt_keys_get_addr+0x3a>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    bt_addr_le_eq(&keys->addr, BT_ADDR_LE_ANY)) {
   1f24a:	491d      	ldr	r1, [pc, #116]	; (1f2c0 <bt_keys_get_addr+0x88>)
   1f24c:	481d      	ldr	r0, [pc, #116]	; (1f2c4 <bt_keys_get_addr+0x8c>)
   1f24e:	f009 fe0f 	bl	28e70 <bt_addr_le_eq>
			first_free_slot = i;
		}
	}

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
	if (first_free_slot == ARRAY_SIZE(key_pool)) {
   1f252:	b1a8      	cbz	r0, 1f280 <bt_keys_get_addr+0x48>
   1f254:	2207      	movs	r2, #7
   1f256:	481b      	ldr	r0, [pc, #108]	; (1f2c4 <bt_keys_get_addr+0x8c>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
   1f258:	7025      	strb	r5, [r4, #0]
   1f25a:	4639      	mov	r1, r7
   1f25c:	f007 fcc6 	bl	26bec <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   1f260:	4a19      	ldr	r2, [pc, #100]	; (1f2c8 <bt_keys_get_addr+0x90>)
   1f262:	6813      	ldr	r3, [r2, #0]
   1f264:	3301      	adds	r3, #1
   1f266:	6013      	str	r3, [r2, #0]
   1f268:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   1f26c:	4b17      	ldr	r3, [pc, #92]	; (1f2cc <bt_keys_get_addr+0x94>)
   1f26e:	601c      	str	r4, [r3, #0]
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		LOG_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   1f270:	e004      	b.n	1f27c <bt_keys_get_addr+0x44>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1f272:	4630      	mov	r0, r6
   1f274:	f009 fdfc 	bl	28e70 <bt_addr_le_eq>
   1f278:	2800      	cmp	r0, #0
   1f27a:	d0e6      	beq.n	1f24a <bt_keys_get_addr+0x12>
		keys = &key_pool[i];
   1f27c:	480f      	ldr	r0, [pc, #60]	; (1f2bc <bt_keys_get_addr+0x84>)
   1f27e:	e01a      	b.n	1f2b6 <bt_keys_get_addr+0x7e>
	struct key_data kdata = { false, id };
   1f280:	f8ad 0000 	strh.w	r0, [sp]
	bt_conn_foreach(BT_CONN_TYPE_ALL, find_key_in_use, &kdata);
   1f284:	4912      	ldr	r1, [pc, #72]	; (1f2d0 <bt_keys_get_addr+0x98>)
   1f286:	466a      	mov	r2, sp
   1f288:	200f      	movs	r0, #15
   1f28a:	f7fa fa67 	bl	1975c <bt_conn_foreach>
	return kdata.in_use;
   1f28e:	f89d 3000 	ldrb.w	r3, [sp]
			if (key_in_use) {
   1f292:	b97b      	cbnz	r3, 1f2b4 <bt_keys_get_addr+0x7c>
   1f294:	490b      	ldr	r1, [pc, #44]	; (1f2c4 <bt_keys_get_addr+0x8c>)
   1f296:	2207      	movs	r2, #7
   1f298:	4668      	mov	r0, sp
   1f29a:	f007 fca7 	bl	26bec <memcpy>
		bt_unpair(oldest->id, &oldest_addr);
   1f29e:	4669      	mov	r1, sp
   1f2a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1f2a4:	f7f7 fe4c 	bl	16f40 <bt_unpair>
		if (bt_addr_le_eq(&oldest->addr, BT_ADDR_LE_ANY)) {
   1f2a8:	4905      	ldr	r1, [pc, #20]	; (1f2c0 <bt_keys_get_addr+0x88>)
   1f2aa:	4806      	ldr	r0, [pc, #24]	; (1f2c4 <bt_keys_get_addr+0x8c>)
   1f2ac:	f009 fde0 	bl	28e70 <bt_addr_le_eq>
   1f2b0:	2800      	cmp	r0, #0
   1f2b2:	d1cf      	bne.n	1f254 <bt_keys_get_addr+0x1c>
			return NULL;
   1f2b4:	2000      	movs	r0, #0
	}

	LOG_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
   1f2b6:	b003      	add	sp, #12
   1f2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f2ba:	bf00      	nop
   1f2bc:	20003080 	.word	0x20003080
   1f2c0:	0002c330 	.word	0x0002c330
   1f2c4:	20003081 	.word	0x20003081
   1f2c8:	2000307c 	.word	0x2000307c
   1f2cc:	20003078 	.word	0x20003078
   1f2d0:	0001f42d 	.word	0x0001f42d

0001f2d4 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   1f2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   1f2d6:	4f0c      	ldr	r7, [pc, #48]	; (1f308 <bt_foreach_bond+0x34>)
{
   1f2d8:	4604      	mov	r4, r0
   1f2da:	460d      	mov	r5, r1
   1f2dc:	4616      	mov	r6, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f2de:	2300      	movs	r3, #0
		if (keys->keys && keys->id == id) {
   1f2e0:	89f9      	ldrh	r1, [r7, #14]
   1f2e2:	783a      	ldrb	r2, [r7, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f2e4:	b10b      	cbz	r3, 1f2ea <bt_foreach_bond+0x16>

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
		}
	}
}
   1f2e6:	b003      	add	sp, #12
   1f2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (keys->keys && keys->id == id) {
   1f2ea:	2900      	cmp	r1, #0
   1f2ec:	d0fb      	beq.n	1f2e6 <bt_foreach_bond+0x12>
   1f2ee:	42a2      	cmp	r2, r4
   1f2f0:	d1f9      	bne.n	1f2e6 <bt_foreach_bond+0x12>
   1f2f2:	4906      	ldr	r1, [pc, #24]	; (1f30c <bt_foreach_bond+0x38>)
   1f2f4:	2207      	movs	r2, #7
   1f2f6:	4668      	mov	r0, sp
   1f2f8:	f007 fc78 	bl	26bec <memcpy>
			func(&info, user_data);
   1f2fc:	4631      	mov	r1, r6
   1f2fe:	4668      	mov	r0, sp
   1f300:	47a8      	blx	r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f302:	2301      	movs	r3, #1
   1f304:	e7ec      	b.n	1f2e0 <bt_foreach_bond+0xc>
   1f306:	bf00      	nop
   1f308:	20003080 	.word	0x20003080
   1f30c:	20003081 	.word	0x20003081

0001f310 <bt_keys_foreach_type>:

void bt_keys_foreach_type(enum bt_keys_type type, void (*func)(struct bt_keys *keys, void *data),
			  void *data)
{
   1f310:	b410      	push	{r4}
   1f312:	460b      	mov	r3, r1
   1f314:	4611      	mov	r1, r2
	int i;

	__ASSERT_NO_MSG(func != NULL);

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   1f316:	4a04      	ldr	r2, [pc, #16]	; (1f328 <bt_keys_foreach_type+0x18>)
   1f318:	89d4      	ldrh	r4, [r2, #14]
   1f31a:	4204      	tst	r4, r0
   1f31c:	d002      	beq.n	1f324 <bt_keys_foreach_type+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1f31e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1f320:	4610      	mov	r0, r2
   1f322:	4718      	bx	r3
}
   1f324:	bc10      	pop	{r4}
   1f326:	4770      	bx	lr
   1f328:	20003080 	.word	0x20003080

0001f32c <keys_commit>:

	bt_id_add(keys);
}

static int keys_commit(void)
{
   1f32c:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   1f32e:	4903      	ldr	r1, [pc, #12]	; (1f33c <keys_commit+0x10>)
   1f330:	2200      	movs	r2, #0
   1f332:	2002      	movs	r0, #2
   1f334:	f7ff ffec 	bl	1f310 <bt_keys_foreach_type>
	}

	return 0;
}
   1f338:	2000      	movs	r0, #0
   1f33a:	bd08      	pop	{r3, pc}
   1f33c:	00028e81 	.word	0x00028e81

0001f340 <bt_keys_find>:
{
   1f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f344:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1f37c <bt_keys_find+0x3c>
{
   1f348:	4605      	mov	r5, r0
   1f34a:	460e      	mov	r6, r1
   1f34c:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f34e:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f350:	f8b8 400e 	ldrh.w	r4, [r8, #14]
   1f354:	f898 2000 	ldrb.w	r2, [r8]
   1f358:	402c      	ands	r4, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f35a:	b113      	cbz	r3, 1f362 <bt_keys_find+0x22>
	return NULL;
   1f35c:	2000      	movs	r0, #0
}
   1f35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f362:	2c00      	cmp	r4, #0
   1f364:	d0fa      	beq.n	1f35c <bt_keys_find+0x1c>
   1f366:	4296      	cmp	r6, r2
   1f368:	d1f8      	bne.n	1f35c <bt_keys_find+0x1c>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1f36a:	4805      	ldr	r0, [pc, #20]	; (1f380 <bt_keys_find+0x40>)
   1f36c:	4639      	mov	r1, r7
   1f36e:	f009 fd7f 	bl	28e70 <bt_addr_le_eq>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f372:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1f374:	2800      	cmp	r0, #0
   1f376:	d0eb      	beq.n	1f350 <bt_keys_find+0x10>
			return &key_pool[i];
   1f378:	4800      	ldr	r0, [pc, #0]	; (1f37c <bt_keys_find+0x3c>)
   1f37a:	e7f0      	b.n	1f35e <bt_keys_find+0x1e>
   1f37c:	20003080 	.word	0x20003080
   1f380:	20003081 	.word	0x20003081

0001f384 <bt_keys_find_irk>:
{
   1f384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f386:	780b      	ldrb	r3, [r1, #0]
   1f388:	2b01      	cmp	r3, #1
   1f38a:	4606      	mov	r6, r0
   1f38c:	460c      	mov	r4, r1
   1f38e:	d001      	beq.n	1f394 <bt_keys_find_irk+0x10>
		return NULL;
   1f390:	2000      	movs	r0, #0
}
   1f392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1f394:	798b      	ldrb	r3, [r1, #6]
   1f396:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f39a:	2b40      	cmp	r3, #64	; 0x40
   1f39c:	d1f8      	bne.n	1f390 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1f39e:	4d18      	ldr	r5, [pc, #96]	; (1f400 <bt_keys_find_irk+0x7c>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f3a0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1f3a2:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1f3a6:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1f3a8:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f3aa:	f002 0202 	and.w	r2, r2, #2
   1f3ae:	b1c3      	cbz	r3, 1f3e2 <bt_keys_find_irk+0x5e>
   1f3b0:	2300      	movs	r3, #0
   1f3b2:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1f3b4:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1f3b6:	f002 0202 	and.w	r2, r2, #2
   1f3ba:	2b00      	cmp	r3, #0
   1f3bc:	d1e8      	bne.n	1f390 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1f3be:	2a00      	cmp	r2, #0
   1f3c0:	d0e6      	beq.n	1f390 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1f3c2:	42b1      	cmp	r1, r6
   1f3c4:	d1e4      	bne.n	1f390 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1f3c6:	1c67      	adds	r7, r4, #1
   1f3c8:	480e      	ldr	r0, [pc, #56]	; (1f404 <bt_keys_find_irk+0x80>)
   1f3ca:	4639      	mov	r1, r7
   1f3cc:	f007 fc61 	bl	26c92 <bt_rpa_irk_matches>
   1f3d0:	2301      	movs	r3, #1
   1f3d2:	2800      	cmp	r0, #0
   1f3d4:	d0ed      	beq.n	1f3b2 <bt_keys_find_irk+0x2e>
	memcpy(dst, src, sizeof(*dst));
   1f3d6:	2206      	movs	r2, #6
   1f3d8:	4639      	mov	r1, r7
   1f3da:	480b      	ldr	r0, [pc, #44]	; (1f408 <bt_keys_find_irk+0x84>)
   1f3dc:	f007 fc06 	bl	26bec <memcpy>
}
   1f3e0:	e00b      	b.n	1f3fa <bt_keys_find_irk+0x76>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1f3e2:	2a00      	cmp	r2, #0
   1f3e4:	d0e5      	beq.n	1f3b2 <bt_keys_find_irk+0x2e>
		if (key_pool[i].id == id &&
   1f3e6:	42b0      	cmp	r0, r6
   1f3e8:	d1e3      	bne.n	1f3b2 <bt_keys_find_irk+0x2e>
	return memcmp(a, b, sizeof(*a));
   1f3ea:	2206      	movs	r2, #6
   1f3ec:	4639      	mov	r1, r7
   1f3ee:	1c60      	adds	r0, r4, #1
   1f3f0:	f007 fbec 	bl	26bcc <memcmp>
   1f3f4:	2301      	movs	r3, #1
   1f3f6:	2800      	cmp	r0, #0
   1f3f8:	d1d5      	bne.n	1f3a6 <bt_keys_find_irk+0x22>
			return &key_pool[i];
   1f3fa:	4801      	ldr	r0, [pc, #4]	; (1f400 <bt_keys_find_irk+0x7c>)
   1f3fc:	e7c9      	b.n	1f392 <bt_keys_find_irk+0xe>
   1f3fe:	bf00      	nop
   1f400:	20003080 	.word	0x20003080
   1f404:	200030aa 	.word	0x200030aa
   1f408:	200030ba 	.word	0x200030ba

0001f40c <bt_keys_find_addr>:
{
   1f40c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1f40e:	4c06      	ldr	r4, [pc, #24]	; (1f428 <bt_keys_find_addr+0x1c>)
   1f410:	7823      	ldrb	r3, [r4, #0]
   1f412:	4283      	cmp	r3, r0
   1f414:	d103      	bne.n	1f41e <bt_keys_find_addr+0x12>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   1f416:	1c60      	adds	r0, r4, #1
   1f418:	f009 fd2a 	bl	28e70 <bt_addr_le_eq>
		if (key_pool[i].id == id &&
   1f41c:	b908      	cbnz	r0, 1f422 <bt_keys_find_addr+0x16>
	return NULL;
   1f41e:	2000      	movs	r0, #0
}
   1f420:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1f422:	4620      	mov	r0, r4
   1f424:	e7fc      	b.n	1f420 <bt_keys_find_addr+0x14>
   1f426:	bf00      	nop
   1f428:	20003080 	.word	0x20003080

0001f42c <find_key_in_use>:
{
   1f42c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == BT_CONN_CONNECTED) {
   1f42e:	7b42      	ldrb	r2, [r0, #13]
   1f430:	2a07      	cmp	r2, #7
{
   1f432:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_CONNECTED) {
   1f434:	d111      	bne.n	1f45a <find_key_in_use+0x2e>
		key = bt_keys_find_addr(conn->id, bt_conn_get_dst(conn));
   1f436:	7a05      	ldrb	r5, [r0, #8]
   1f438:	f008 f91c 	bl	27674 <bt_conn_get_dst>
   1f43c:	4601      	mov	r1, r0
   1f43e:	4628      	mov	r0, r5
   1f440:	f7ff ffe4 	bl	1f40c <bt_keys_find_addr>
		if (key == NULL) {
   1f444:	b148      	cbz	r0, 1f45a <find_key_in_use+0x2e>
		if (key == &key_pool[kdata->id]) {
   1f446:	7863      	ldrb	r3, [r4, #1]
   1f448:	4a04      	ldr	r2, [pc, #16]	; (1f45c <find_key_in_use+0x30>)
   1f44a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1f44e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f452:	4298      	cmp	r0, r3
			kdata->in_use = true;
   1f454:	bf04      	itt	eq
   1f456:	2301      	moveq	r3, #1
   1f458:	7023      	strbeq	r3, [r4, #0]
}
   1f45a:	bd38      	pop	{r3, r4, r5, pc}
   1f45c:	20003080 	.word	0x20003080

0001f460 <bt_keys_clear>:
{
   1f460:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f462:	7a03      	ldrb	r3, [r0, #8]
   1f464:	075b      	lsls	r3, r3, #29
{
   1f466:	b08c      	sub	sp, #48	; 0x30
   1f468:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f46a:	d501      	bpl.n	1f470 <bt_keys_clear+0x10>
		bt_id_del(keys);
   1f46c:	f7f8 fe1c 	bl	180a8 <bt_id_del>
		if (keys->id) {
   1f470:	4625      	mov	r5, r4
   1f472:	f815 2b01 	ldrb.w	r2, [r5], #1
   1f476:	b1b2      	cbz	r2, 1f4a6 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   1f478:	ae02      	add	r6, sp, #8
   1f47a:	2104      	movs	r1, #4
   1f47c:	4630      	mov	r0, r6
   1f47e:	f005 fe49 	bl	25114 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f482:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f484:	4a09      	ldr	r2, [pc, #36]	; (1f4ac <bt_keys_clear+0x4c>)
   1f486:	462b      	mov	r3, r5
   1f488:	2124      	movs	r1, #36	; 0x24
   1f48a:	a803      	add	r0, sp, #12
   1f48c:	f7f6 fb86 	bl	15b9c <bt_settings_encode_key>
		settings_delete(key);
   1f490:	a803      	add	r0, sp, #12
   1f492:	f006 ffa3 	bl	263dc <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1f496:	2288      	movs	r2, #136	; 0x88
   1f498:	2100      	movs	r1, #0
   1f49a:	4620      	mov	r0, r4
}
   1f49c:	b00c      	add	sp, #48	; 0x30
   1f49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1f4a2:	f007 bbae 	b.w	26c02 <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1f4a6:	9200      	str	r2, [sp, #0]
   1f4a8:	e7ec      	b.n	1f484 <bt_keys_clear+0x24>
   1f4aa:	bf00      	nop
   1f4ac:	0002ec15 	.word	0x0002ec15

0001f4b0 <keys_set>:
{
   1f4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f4b4:	b0a3      	sub	sp, #140	; 0x8c
   1f4b6:	4614      	mov	r4, r2
   1f4b8:	af00      	add	r7, sp, #0
	if (!name) {
   1f4ba:	4605      	mov	r5, r0
   1f4bc:	b988      	cbnz	r0, 1f4e2 <keys_set+0x32>
		LOG_ERR("Insufficient number of arguments");
   1f4be:	466c      	mov	r4, sp
   1f4c0:	b088      	sub	sp, #32
   1f4c2:	466a      	mov	r2, sp
   1f4c4:	4b74      	ldr	r3, [pc, #464]	; (1f698 <keys_set+0x1e8>)
   1f4c6:	6153      	str	r3, [r2, #20]
   1f4c8:	4b74      	ldr	r3, [pc, #464]	; (1f69c <keys_set+0x1ec>)
   1f4ca:	6193      	str	r3, [r2, #24]
   1f4cc:	2303      	movs	r3, #3
   1f4ce:	f842 3f10 	str.w	r3, [r2, #16]!
   1f4d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1f4d6:	4603      	mov	r3, r0
   1f4d8:	4871      	ldr	r0, [pc, #452]	; (1f6a0 <keys_set+0x1f0>)
   1f4da:	f7f4 fa25 	bl	13928 <z_impl_z_log_msg_static_create>
   1f4de:	46a5      	mov	sp, r4
			return -EINVAL;
   1f4e0:	e018      	b.n	1f514 <keys_set+0x64>
	len = read_cb(cb_arg, val, sizeof(val));
   1f4e2:	227c      	movs	r2, #124	; 0x7c
   1f4e4:	f107 010c 	add.w	r1, r7, #12
   1f4e8:	4618      	mov	r0, r3
   1f4ea:	47a0      	blx	r4
	if (len < 0) {
   1f4ec:	1e04      	subs	r4, r0, #0
   1f4ee:	da18      	bge.n	1f522 <keys_set+0x72>
		LOG_ERR("Failed to read value (err %zd)", len);
   1f4f0:	466d      	mov	r5, sp
   1f4f2:	b088      	sub	sp, #32
   1f4f4:	466a      	mov	r2, sp
   1f4f6:	4b6b      	ldr	r3, [pc, #428]	; (1f6a4 <keys_set+0x1f4>)
   1f4f8:	6153      	str	r3, [r2, #20]
   1f4fa:	4b68      	ldr	r3, [pc, #416]	; (1f69c <keys_set+0x1ec>)
   1f4fc:	e9c2 3406 	strd	r3, r4, [r2, #24]
   1f500:	2304      	movs	r3, #4
   1f502:	f842 3f10 	str.w	r3, [r2, #16]!
   1f506:	4866      	ldr	r0, [pc, #408]	; (1f6a0 <keys_set+0x1f0>)
   1f508:	2300      	movs	r3, #0
   1f50a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f50e:	f7f4 fa0b 	bl	13928 <z_impl_z_log_msg_static_create>
   1f512:	46ad      	mov	sp, r5
		return -EINVAL;
   1f514:	f06f 0615 	mvn.w	r6, #21
}
   1f518:	4630      	mov	r0, r6
   1f51a:	378c      	adds	r7, #140	; 0x8c
   1f51c:	46bd      	mov	sp, r7
   1f51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1f522:	1d39      	adds	r1, r7, #4
   1f524:	4628      	mov	r0, r5
   1f526:	f007 fbe1 	bl	26cec <bt_settings_decode_key>
	if (err) {
   1f52a:	4606      	mov	r6, r0
   1f52c:	b188      	cbz	r0, 1f552 <keys_set+0xa2>
		LOG_ERR("Unable to decode address %s", name);
   1f52e:	466c      	mov	r4, sp
   1f530:	b08a      	sub	sp, #40	; 0x28
   1f532:	466a      	mov	r2, sp
   1f534:	4b5c      	ldr	r3, [pc, #368]	; (1f6a8 <keys_set+0x1f8>)
   1f536:	6153      	str	r3, [r2, #20]
   1f538:	4b58      	ldr	r3, [pc, #352]	; (1f69c <keys_set+0x1ec>)
   1f53a:	e9c2 3506 	strd	r3, r5, [r2, #24]
   1f53e:	f240 3301 	movw	r3, #769	; 0x301
   1f542:	8413      	strh	r3, [r2, #32]
   1f544:	4b59      	ldr	r3, [pc, #356]	; (1f6ac <keys_set+0x1fc>)
   1f546:	f842 3f10 	str.w	r3, [r2, #16]!
   1f54a:	2300      	movs	r3, #0
   1f54c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f550:	e7c2      	b.n	1f4d8 <keys_set+0x28>
	settings_name_next(name, &next);
   1f552:	4639      	mov	r1, r7
   1f554:	4628      	mov	r0, r5
   1f556:	f006 ff69 	bl	2642c <settings_name_next>
	if (!next) {
   1f55a:	6838      	ldr	r0, [r7, #0]
   1f55c:	b198      	cbz	r0, 1f586 <keys_set+0xd6>
		unsigned long next_id = strtoul(next, NULL, 10);
   1f55e:	220a      	movs	r2, #10
   1f560:	4631      	mov	r1, r6
   1f562:	f007 fa6e 	bl	26a42 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1f566:	b170      	cbz	r0, 1f586 <keys_set+0xd6>
			LOG_ERR("Invalid local identity %lu", next_id);
   1f568:	466c      	mov	r4, sp
   1f56a:	b088      	sub	sp, #32
   1f56c:	466a      	mov	r2, sp
   1f56e:	4b50      	ldr	r3, [pc, #320]	; (1f6b0 <keys_set+0x200>)
   1f570:	6153      	str	r3, [r2, #20]
   1f572:	4b4a      	ldr	r3, [pc, #296]	; (1f69c <keys_set+0x1ec>)
   1f574:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f578:	2304      	movs	r3, #4
   1f57a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f57e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f582:	4633      	mov	r3, r6
   1f584:	e7a8      	b.n	1f4d8 <keys_set+0x28>
	if (!len) {
   1f586:	bb1c      	cbnz	r4, 1f5d0 <keys_set+0x120>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1f588:	1d3a      	adds	r2, r7, #4
   1f58a:	4621      	mov	r1, r4
   1f58c:	203f      	movs	r0, #63	; 0x3f
   1f58e:	f7ff fed7 	bl	1f340 <bt_keys_find>
		if (keys) {
   1f592:	b120      	cbz	r0, 1f59e <keys_set+0xee>
			(void)memset(keys, 0, sizeof(*keys));
   1f594:	2288      	movs	r2, #136	; 0x88
   1f596:	4621      	mov	r1, r4
   1f598:	f007 fb33 	bl	26c02 <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1f59c:	e7bc      	b.n	1f518 <keys_set+0x68>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1f59e:	1d38      	adds	r0, r7, #4
   1f5a0:	f7f6 f99c 	bl	158dc <bt_addr_le_str>
   1f5a4:	466d      	mov	r5, sp
   1f5a6:	b08a      	sub	sp, #40	; 0x28
   1f5a8:	466a      	mov	r2, sp
   1f5aa:	4b42      	ldr	r3, [pc, #264]	; (1f6b4 <keys_set+0x204>)
   1f5ac:	6153      	str	r3, [r2, #20]
   1f5ae:	4b3b      	ldr	r3, [pc, #236]	; (1f69c <keys_set+0x1ec>)
   1f5b0:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f5b4:	f240 3301 	movw	r3, #769	; 0x301
   1f5b8:	8413      	strh	r3, [r2, #32]
   1f5ba:	4b3c      	ldr	r3, [pc, #240]	; (1f6ac <keys_set+0x1fc>)
   1f5bc:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5c0:	4837      	ldr	r0, [pc, #220]	; (1f6a0 <keys_set+0x1f0>)
   1f5c2:	4623      	mov	r3, r4
   1f5c4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1f5c8:	f7f4 f9ae 	bl	13928 <z_impl_z_log_msg_static_create>
   1f5cc:	46ad      	mov	sp, r5
   1f5ce:	e7a3      	b.n	1f518 <keys_set+0x68>
	keys = bt_keys_get_addr(id, &addr);
   1f5d0:	1d39      	adds	r1, r7, #4
   1f5d2:	2000      	movs	r0, #0
   1f5d4:	f7ff fe30 	bl	1f238 <bt_keys_get_addr>
	if (!keys) {
   1f5d8:	4605      	mov	r5, r0
   1f5da:	b9d0      	cbnz	r0, 1f612 <keys_set+0x162>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1f5dc:	1d38      	adds	r0, r7, #4
   1f5de:	f7f6 f97d 	bl	158dc <bt_addr_le_str>
   1f5e2:	466c      	mov	r4, sp
   1f5e4:	b08a      	sub	sp, #40	; 0x28
   1f5e6:	466a      	mov	r2, sp
   1f5e8:	4b33      	ldr	r3, [pc, #204]	; (1f6b8 <keys_set+0x208>)
   1f5ea:	6153      	str	r3, [r2, #20]
   1f5ec:	4b2b      	ldr	r3, [pc, #172]	; (1f69c <keys_set+0x1ec>)
   1f5ee:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f5f2:	f240 3301 	movw	r3, #769	; 0x301
   1f5f6:	8413      	strh	r3, [r2, #32]
   1f5f8:	4b2c      	ldr	r3, [pc, #176]	; (1f6ac <keys_set+0x1fc>)
   1f5fa:	f842 3f10 	str.w	r3, [r2, #16]!
   1f5fe:	4828      	ldr	r0, [pc, #160]	; (1f6a0 <keys_set+0x1f0>)
   1f600:	462b      	mov	r3, r5
   1f602:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f606:	f7f4 f98f 	bl	13928 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   1f60a:	f06f 060b 	mvn.w	r6, #11
   1f60e:	46a5      	mov	sp, r4
   1f610:	e782      	b.n	1f518 <keys_set+0x68>
	if (len != BT_KEYS_STORAGE_LEN) {
   1f612:	2c7c      	cmp	r4, #124	; 0x7c
   1f614:	d01a      	beq.n	1f64c <keys_set+0x19c>
		if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1f616:	2c78      	cmp	r4, #120	; 0x78
   1f618:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1f69c <keys_set+0x1ec>
   1f61c:	d125      	bne.n	1f66a <keys_set+0x1ba>
			LOG_WRN("Keys for %s have no aging counter", bt_addr_le_str(&addr));
   1f61e:	1d38      	adds	r0, r7, #4
   1f620:	f7f6 f95c 	bl	158dc <bt_addr_le_str>
   1f624:	46e8      	mov	r8, sp
   1f626:	b08a      	sub	sp, #40	; 0x28
   1f628:	466a      	mov	r2, sp
   1f62a:	4b24      	ldr	r3, [pc, #144]	; (1f6bc <keys_set+0x20c>)
   1f62c:	61d0      	str	r0, [r2, #28]
   1f62e:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f632:	f240 3301 	movw	r3, #769	; 0x301
   1f636:	8413      	strh	r3, [r2, #32]
   1f638:	4b1c      	ldr	r3, [pc, #112]	; (1f6ac <keys_set+0x1fc>)
   1f63a:	f842 3f10 	str.w	r3, [r2, #16]!
   1f63e:	4818      	ldr	r0, [pc, #96]	; (1f6a0 <keys_set+0x1f0>)
   1f640:	2300      	movs	r3, #0
   1f642:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1f646:	f7f4 f96f 	bl	13928 <z_impl_z_log_msg_static_create>
   1f64a:	46c5      	mov	sp, r8
		memcpy(keys->storage_start, val, len);
   1f64c:	4622      	mov	r2, r4
   1f64e:	f107 010c 	add.w	r1, r7, #12
   1f652:	f105 000c 	add.w	r0, r5, #12
   1f656:	f007 fac9 	bl	26bec <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   1f65a:	4b19      	ldr	r3, [pc, #100]	; (1f6c0 <keys_set+0x210>)
   1f65c:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   1f660:	6819      	ldr	r1, [r3, #0]
   1f662:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   1f664:	bf88      	it	hi
   1f666:	601a      	strhi	r2, [r3, #0]
   1f668:	e756      	b.n	1f518 <keys_set+0x68>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1f66a:	466e      	mov	r6, sp
   1f66c:	b08a      	sub	sp, #40	; 0x28
   1f66e:	466a      	mov	r2, sp
   1f670:	4b14      	ldr	r3, [pc, #80]	; (1f6c4 <keys_set+0x214>)
   1f672:	61d4      	str	r4, [r2, #28]
   1f674:	e9c2 3905 	strd	r3, r9, [r2, #20]
   1f678:	237c      	movs	r3, #124	; 0x7c
   1f67a:	6213      	str	r3, [r2, #32]
   1f67c:	2305      	movs	r3, #5
   1f67e:	f842 3f10 	str.w	r3, [r2, #16]!
   1f682:	4807      	ldr	r0, [pc, #28]	; (1f6a0 <keys_set+0x1f0>)
   1f684:	2300      	movs	r3, #0
   1f686:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1f68a:	f7f4 f94d 	bl	13928 <z_impl_z_log_msg_static_create>
			bt_keys_clear(keys);
   1f68e:	4628      	mov	r0, r5
   1f690:	46b5      	mov	sp, r6
   1f692:	f7ff fee5 	bl	1f460 <bt_keys_clear>
			return -EINVAL;
   1f696:	e73d      	b.n	1f514 <keys_set+0x64>
   1f698:	0002c3b5 	.word	0x0002c3b5
   1f69c:	0002ebfb 	.word	0x0002ebfb
   1f6a0:	0002a860 	.word	0x0002a860
   1f6a4:	0002eb25 	.word	0x0002eb25
   1f6a8:	0002de16 	.word	0x0002de16
   1f6ac:	01000004 	.word	0x01000004
   1f6b0:	0002de36 	.word	0x0002de36
   1f6b4:	0002eb48 	.word	0x0002eb48
   1f6b8:	0002eb6f 	.word	0x0002eb6f
   1f6bc:	0002eb92 	.word	0x0002eb92
   1f6c0:	2000307c 	.word	0x2000307c
   1f6c4:	0002ebb8 	.word	0x0002ebb8

0001f6c8 <bt_keys_store>:
{
   1f6c8:	b5b0      	push	{r4, r5, r7, lr}
	if (keys->id) {
   1f6ca:	4605      	mov	r5, r0
{
   1f6cc:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1f6ce:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1f6d2:	af02      	add	r7, sp, #8
   1f6d4:	4604      	mov	r4, r0
	if (keys->id) {
   1f6d6:	b342      	cbz	r2, 1f72a <bt_keys_store+0x62>
		u8_to_dec(id, sizeof(id), keys->id);
   1f6d8:	2104      	movs	r1, #4
   1f6da:	4638      	mov	r0, r7
   1f6dc:	f005 fd1a 	bl	25114 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f6e0:	9700      	str	r7, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f6e2:	4a13      	ldr	r2, [pc, #76]	; (1f730 <bt_keys_store+0x68>)
   1f6e4:	462b      	mov	r3, r5
   1f6e6:	2124      	movs	r1, #36	; 0x24
   1f6e8:	1d38      	adds	r0, r7, #4
   1f6ea:	f7f6 fa57 	bl	15b9c <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1f6ee:	f104 010c 	add.w	r1, r4, #12
   1f6f2:	227c      	movs	r2, #124	; 0x7c
   1f6f4:	1d38      	adds	r0, r7, #4
   1f6f6:	f7f4 ff07 	bl	14508 <settings_save_one>
	if (err) {
   1f6fa:	4604      	mov	r4, r0
   1f6fc:	b188      	cbz	r0, 1f722 <bt_keys_store+0x5a>
		LOG_ERR("Failed to save keys (err %d)", err);
   1f6fe:	466d      	mov	r5, sp
   1f700:	b088      	sub	sp, #32
   1f702:	aa02      	add	r2, sp, #8
   1f704:	4b0b      	ldr	r3, [pc, #44]	; (1f734 <bt_keys_store+0x6c>)
   1f706:	6153      	str	r3, [r2, #20]
   1f708:	4b0b      	ldr	r3, [pc, #44]	; (1f738 <bt_keys_store+0x70>)
   1f70a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   1f70e:	2304      	movs	r3, #4
   1f710:	f842 3f10 	str.w	r3, [r2, #16]!
   1f714:	4809      	ldr	r0, [pc, #36]	; (1f73c <bt_keys_store+0x74>)
   1f716:	2300      	movs	r3, #0
   1f718:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1f71c:	f7f4 f904 	bl	13928 <z_impl_z_log_msg_static_create>
   1f720:	46ad      	mov	sp, r5
}
   1f722:	4620      	mov	r0, r4
   1f724:	3728      	adds	r7, #40	; 0x28
   1f726:	46bd      	mov	sp, r7
   1f728:	bdb0      	pop	{r4, r5, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1f72a:	9200      	str	r2, [sp, #0]
   1f72c:	e7d9      	b.n	1f6e2 <bt_keys_store+0x1a>
   1f72e:	bf00      	nop
   1f730:	0002ec15 	.word	0x0002ec15
   1f734:	0002ebda 	.word	0x0002ebda
   1f738:	0002ec04 	.word	0x0002ec04
   1f73c:	0002a860 	.word	0x0002a860

0001f740 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if defined(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1f740:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);

	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1f742:	f7ff fe63 	bl	1f40c <bt_keys_find_addr>

	if (!keys) {
   1f746:	b150      	cbz	r0, 1f75e <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   1f748:	4a05      	ldr	r2, [pc, #20]	; (1f760 <bt_keys_update_usage+0x20>)
   1f74a:	6813      	ldr	r3, [r2, #0]
   1f74c:	4283      	cmp	r3, r0
   1f74e:	d006      	beq.n	1f75e <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1f750:	4904      	ldr	r1, [pc, #16]	; (1f764 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1f752:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   1f754:	680b      	ldr	r3, [r1, #0]
   1f756:	3301      	adds	r3, #1
   1f758:	600b      	str	r3, [r1, #0]
   1f75a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	LOG_DBG("Aging counter for %s is set to %u", bt_addr_le_str(addr), keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1f75e:	bd08      	pop	{r3, pc}
   1f760:	20003078 	.word	0x20003078
   1f764:	2000307c 	.word	0x2000307c

0001f768 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1f768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f76c:	b09a      	sub	sp, #104	; 0x68
   1f76e:	461d      	mov	r5, r3
   1f770:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1f774:	4b2e      	ldr	r3, [pc, #184]	; (1f830 <bt_crypto_f5+0xc8>)
{
   1f776:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1f778:	aa0c      	add	r2, sp, #48	; 0x30
{
   1f77a:	4684      	mov	ip, r0
   1f77c:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1f77e:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1f782:	4690      	mov	r8, r2
   1f784:	6818      	ldr	r0, [r3, #0]
   1f786:	6859      	ldr	r1, [r3, #4]
   1f788:	4614      	mov	r4, r2
   1f78a:	c403      	stmia	r4!, {r0, r1}
   1f78c:	3308      	adds	r3, #8
   1f78e:	4573      	cmp	r3, lr
   1f790:	4622      	mov	r2, r4
   1f792:	d1f7      	bne.n	1f784 <bt_crypto_f5+0x1c>
   1f794:	6818      	ldr	r0, [r3, #0]
   1f796:	791b      	ldrb	r3, [r3, #4]
   1f798:	6020      	str	r0, [r4, #0]
   1f79a:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1f79c:	4661      	mov	r1, ip
   1f79e:	2220      	movs	r2, #32
   1f7a0:	a804      	add	r0, sp, #16
   1f7a2:	f009 fb83 	bl	28eac <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1f7a6:	4823      	ldr	r0, [pc, #140]	; (1f834 <bt_crypto_f5+0xcc>)
   1f7a8:	466b      	mov	r3, sp
   1f7aa:	2220      	movs	r2, #32
   1f7ac:	a904      	add	r1, sp, #16
   1f7ae:	f009 fb95 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   1f7b2:	4604      	mov	r4, r0
   1f7b4:	bbc0      	cbnz	r0, 1f828 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1f7b6:	2210      	movs	r2, #16
   1f7b8:	4651      	mov	r1, sl
   1f7ba:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1f7be:	f009 fb75 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1f7c2:	2210      	movs	r2, #16
   1f7c4:	4631      	mov	r1, r6
   1f7c6:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1f7ca:	f009 fb6f 	bl	28eac <sys_memcpy_swap>
	m[37] = a1->type;
   1f7ce:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1f7d0:	2206      	movs	r2, #6
	m[37] = a1->type;
   1f7d2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f7d6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1f7da:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1f7de:	f009 fb65 	bl	28eac <sys_memcpy_swap>
	m[44] = a2->type;
   1f7e2:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1f7e4:	2206      	movs	r2, #6
	m[44] = a2->type;
   1f7e6:	f811 3b01 	ldrb.w	r3, [r1], #1
   1f7ea:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1f7ee:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1f7f2:	f009 fb5b 	bl	28eac <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1f7f6:	464b      	mov	r3, r9
   1f7f8:	2235      	movs	r2, #53	; 0x35
   1f7fa:	4641      	mov	r1, r8
   1f7fc:	4668      	mov	r0, sp
   1f7fe:	f009 fb6d 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   1f802:	4604      	mov	r4, r0
   1f804:	b980      	cbnz	r0, 1f828 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1f806:	4648      	mov	r0, r9
   1f808:	f009 fb5a 	bl	28ec0 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1f80c:	2301      	movs	r3, #1
   1f80e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1f812:	2235      	movs	r2, #53	; 0x35
   1f814:	463b      	mov	r3, r7
   1f816:	4641      	mov	r1, r8
   1f818:	4668      	mov	r0, sp
   1f81a:	f009 fb5f 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   1f81e:	4604      	mov	r4, r0
   1f820:	b910      	cbnz	r0, 1f828 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1f822:	4638      	mov	r0, r7
   1f824:	f009 fb4c 	bl	28ec0 <sys_mem_swap.constprop.0>

	return 0;
}
   1f828:	4620      	mov	r0, r4
   1f82a:	b01a      	add	sp, #104	; 0x68
   1f82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f830:	0002aa66 	.word	0x0002aa66
   1f834:	0002ec22 	.word	0x0002ec22

0001f838 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1f838:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f83a:	b099      	sub	sp, #100	; 0x64
   1f83c:	4614      	mov	r4, r2
   1f83e:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1f840:	2220      	movs	r2, #32
   1f842:	4601      	mov	r1, r0
   1f844:	a804      	add	r0, sp, #16
{
   1f846:	461e      	mov	r6, r3
   1f848:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1f84a:	f009 fb2f 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f84e:	2220      	movs	r2, #32
   1f850:	4639      	mov	r1, r7
   1f852:	a80c      	add	r0, sp, #48	; 0x30
   1f854:	f009 fb2a 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1f858:	2210      	movs	r2, #16
   1f85a:	4631      	mov	r1, r6
   1f85c:	a814      	add	r0, sp, #80	; 0x50
   1f85e:	f009 fb25 	bl	28eac <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1f862:	4621      	mov	r1, r4
   1f864:	2210      	movs	r2, #16
   1f866:	4668      	mov	r0, sp
   1f868:	f009 fb20 	bl	28eac <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1f86c:	466b      	mov	r3, sp
   1f86e:	2250      	movs	r2, #80	; 0x50
   1f870:	a904      	add	r1, sp, #16
   1f872:	4618      	mov	r0, r3
   1f874:	f009 fb32 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   1f878:	4604      	mov	r4, r0
   1f87a:	b960      	cbnz	r0, 1f896 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1f87c:	2204      	movs	r2, #4
   1f87e:	a903      	add	r1, sp, #12
   1f880:	4628      	mov	r0, r5
   1f882:	f007 f9b3 	bl	26bec <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1f886:	682b      	ldr	r3, [r5, #0]
   1f888:	4a04      	ldr	r2, [pc, #16]	; (1f89c <bt_crypto_g2+0x64>)
   1f88a:	ba1b      	rev	r3, r3
   1f88c:	fbb3 f1f2 	udiv	r1, r3, r2
   1f890:	fb02 3311 	mls	r3, r2, r1, r3
   1f894:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1f896:	4620      	mov	r0, r4
   1f898:	b019      	add	sp, #100	; 0x64
   1f89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f89c:	000f4240 	.word	0x000f4240

0001f8a0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1f8a0:	4b02      	ldr	r3, [pc, #8]	; (1f8ac <net_buf_pool_get+0xc>)
   1f8a2:	222c      	movs	r2, #44	; 0x2c
   1f8a4:	fb02 3000 	mla	r0, r2, r0, r3
   1f8a8:	4770      	bx	lr
   1f8aa:	bf00      	nop
   1f8ac:	20000c14 	.word	0x20000c14

0001f8b0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f8b0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f8b2:	4b06      	ldr	r3, [pc, #24]	; (1f8cc <net_buf_id+0x1c>)
   1f8b4:	212c      	movs	r1, #44	; 0x2c
   1f8b6:	fb01 3302 	mla	r3, r1, r2, r3
   1f8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f8bc:	7f1b      	ldrb	r3, [r3, #28]
   1f8be:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1f8c0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f8c2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1f8c6:	fbb0 f0f3 	udiv	r0, r0, r3
   1f8ca:	4770      	bx	lr
   1f8cc:	20000c14 	.word	0x20000c14

0001f8d0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1f8d0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f8d2:	4b0a      	ldr	r3, [pc, #40]	; (1f8fc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f8d4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f8d6:	242c      	movs	r4, #44	; 0x2c
   1f8d8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1f8dc:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1f8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f8e0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1f8e2:	681a      	ldr	r2, [r3, #0]
   1f8e4:	4294      	cmp	r4, r2
   1f8e6:	bf94      	ite	ls
   1f8e8:	600c      	strls	r4, [r1, #0]
   1f8ea:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1f8ec:	e9d3 5400 	ldrd	r5, r4, [r3]
   1f8f0:	f7ff ffde 	bl	1f8b0 <net_buf_id>
}
   1f8f4:	fb05 4000 	mla	r0, r5, r0, r4
   1f8f8:	bd38      	pop	{r3, r4, r5, pc}
   1f8fa:	bf00      	nop
   1f8fc:	20000c14 	.word	0x20000c14

0001f900 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1f900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f904:	4605      	mov	r5, r0
   1f906:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f908:	4610      	mov	r0, r2
   1f90a:	4619      	mov	r1, r3
{
   1f90c:	4691      	mov	r9, r2
   1f90e:	4698      	mov	r8, r3
   1f910:	4617      	mov	r7, r2
   1f912:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1f914:	f00a fbf6 	bl	2a104 <sys_clock_timeout_end_calc>
   1f918:	4682      	mov	sl, r0
   1f91a:	468b      	mov	fp, r1
	__asm__ volatile(
   1f91c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f920:	f3ef 8111 	mrs	r1, BASEPRI
   1f924:	f383 8812 	msr	BASEPRI_MAX, r3
   1f928:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1f92c:	8b6b      	ldrh	r3, [r5, #26]
   1f92e:	2b00      	cmp	r3, #0
   1f930:	d058      	beq.n	1f9e4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1f932:	8b2a      	ldrh	r2, [r5, #24]
   1f934:	429a      	cmp	r2, r3
   1f936:	d93c      	bls.n	1f9b2 <net_buf_alloc_len+0xb2>
   1f938:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1f93a:	2200      	movs	r2, #0
   1f93c:	2300      	movs	r3, #0
   1f93e:	4628      	mov	r0, r5
   1f940:	f003 ff2c 	bl	2379c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1f944:	9900      	ldr	r1, [sp, #0]
   1f946:	4604      	mov	r4, r0
   1f948:	2800      	cmp	r0, #0
   1f94a:	d032      	beq.n	1f9b2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1f94c:	f381 8811 	msr	BASEPRI, r1
   1f950:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1f954:	9b01      	ldr	r3, [sp, #4]
   1f956:	2b00      	cmp	r3, #0
   1f958:	d055      	beq.n	1fa06 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1f95a:	ea58 0309 	orrs.w	r3, r8, r9
   1f95e:	d00f      	beq.n	1f980 <net_buf_alloc_len+0x80>
   1f960:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1f964:	bf08      	it	eq
   1f966:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1f96a:	d009      	beq.n	1f980 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1f96c:	f004 fe1e 	bl	245ac <sys_clock_tick_get>
   1f970:	ebba 0700 	subs.w	r7, sl, r0
   1f974:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1f978:	2e00      	cmp	r6, #0
   1f97a:	bfbc      	itt	lt
   1f97c:	2700      	movlt	r7, #0
   1f97e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1f980:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1f982:	4d26      	ldr	r5, [pc, #152]	; (1fa1c <net_buf_alloc_len+0x11c>)
   1f984:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1f988:	fb08 5303 	mla	r3, r8, r3, r5
   1f98c:	463a      	mov	r2, r7
   1f98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f990:	681b      	ldr	r3, [r3, #0]
   1f992:	a901      	add	r1, sp, #4
   1f994:	f8d3 9000 	ldr.w	r9, [r3]
   1f998:	4620      	mov	r0, r4
   1f99a:	4633      	mov	r3, r6
   1f99c:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1f99e:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1f9a0:	2800      	cmp	r0, #0
   1f9a2:	d131      	bne.n	1fa08 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1f9a4:	7aa0      	ldrb	r0, [r4, #10]
   1f9a6:	4621      	mov	r1, r4
   1f9a8:	fb00 5008 	mla	r0, r0, r8, r5
   1f9ac:	f00a f933 	bl	29c16 <k_queue_prepend>
}
   1f9b0:	e024      	b.n	1f9fc <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1f9b2:	8b68      	ldrh	r0, [r5, #26]
   1f9b4:	1e43      	subs	r3, r0, #1
   1f9b6:	836b      	strh	r3, [r5, #26]
   1f9b8:	f381 8811 	msr	BASEPRI, r1
   1f9bc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f9c0:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1f9c2:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1f9c4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1f9c6:	331b      	adds	r3, #27
   1f9c8:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1f9cc:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1f9ce:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1f9d2:	4b12      	ldr	r3, [pc, #72]	; (1fa1c <net_buf_alloc_len+0x11c>)
   1f9d4:	4a12      	ldr	r2, [pc, #72]	; (1fa20 <net_buf_alloc_len+0x120>)
   1f9d6:	1aeb      	subs	r3, r5, r3
   1f9d8:	109b      	asrs	r3, r3, #2
   1f9da:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1f9dc:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1f9de:	7f2b      	ldrb	r3, [r5, #28]
   1f9e0:	72e3      	strb	r3, [r4, #11]
		goto success;
   1f9e2:	e7b7      	b.n	1f954 <net_buf_alloc_len+0x54>
   1f9e4:	f381 8811 	msr	BASEPRI, r1
   1f9e8:	f3bf 8f6f 	isb	sy
   1f9ec:	464a      	mov	r2, r9
   1f9ee:	4643      	mov	r3, r8
   1f9f0:	4628      	mov	r0, r5
   1f9f2:	f003 fed3 	bl	2379c <z_impl_k_queue_get>
	if (!buf) {
   1f9f6:	4604      	mov	r4, r0
   1f9f8:	2800      	cmp	r0, #0
   1f9fa:	d1ab      	bne.n	1f954 <net_buf_alloc_len+0x54>
		return NULL;
   1f9fc:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1f9fe:	4620      	mov	r0, r4
   1fa00:	b003      	add	sp, #12
   1fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1fa06:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1fa08:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1fa0a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1fa0c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1fa0e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1fa10:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1fa12:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1fa14:	6963      	ldr	r3, [r4, #20]
   1fa16:	8262      	strh	r2, [r4, #18]
   1fa18:	60e3      	str	r3, [r4, #12]
	return buf;
   1fa1a:	e7f0      	b.n	1f9fe <net_buf_alloc_len+0xfe>
   1fa1c:	20000c14 	.word	0x20000c14
   1fa20:	ba2e8ba3 	.word	0xba2e8ba3

0001fa24 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1fa24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa28:	4d16      	ldr	r5, [pc, #88]	; (1fa84 <net_buf_unref+0x60>)
   1fa2a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1fa2c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1fa2e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1fa30:	b90c      	cbnz	r4, 1fa36 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1fa32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1fa36:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1fa38:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1fa3c:	3b01      	subs	r3, #1
   1fa3e:	b2db      	uxtb	r3, r3
   1fa40:	7223      	strb	r3, [r4, #8]
   1fa42:	2b00      	cmp	r3, #0
   1fa44:	d1f5      	bne.n	1fa32 <net_buf_unref+0xe>
		if (buf->__buf) {
   1fa46:	6961      	ldr	r1, [r4, #20]
   1fa48:	b159      	cbz	r1, 1fa62 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1fa4a:	7a63      	ldrb	r3, [r4, #9]
   1fa4c:	07db      	lsls	r3, r3, #31
   1fa4e:	d407      	bmi.n	1fa60 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fa50:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1fa52:	fb07 5303 	mla	r3, r7, r3, r5
   1fa56:	4620      	mov	r0, r4
   1fa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fa5a:	681b      	ldr	r3, [r3, #0]
   1fa5c:	689b      	ldr	r3, [r3, #8]
   1fa5e:	4798      	blx	r3
			buf->__buf = NULL;
   1fa60:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1fa62:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1fa64:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1fa66:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1fa6a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1fa6c:	6a1b      	ldr	r3, [r3, #32]
   1fa6e:	b11b      	cbz	r3, 1fa78 <net_buf_unref+0x54>
			pool->destroy(buf);
   1fa70:	4620      	mov	r0, r4
   1fa72:	4798      	blx	r3
{
   1fa74:	4644      	mov	r4, r8
   1fa76:	e7db      	b.n	1fa30 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1fa78:	4621      	mov	r1, r4
   1fa7a:	fb00 5007 	mla	r0, r0, r7, r5
   1fa7e:	f00a f8ca 	bl	29c16 <k_queue_prepend>
}
   1fa82:	e7f7      	b.n	1fa74 <net_buf_unref+0x50>
   1fa84:	20000c14 	.word	0x20000c14

0001fa88 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   1fa88:	2813      	cmp	r0, #19
   1fa8a:	d80e      	bhi.n	1faaa <adc_gain_invert+0x22>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   1fa8c:	4a08      	ldr	r2, [pc, #32]	; (1fab0 <adc_gain_invert+0x28>)
   1fa8e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
   1fa92:	b153      	cbz	r3, 1faaa <adc_gain_invert+0x22>
   1fa94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
   1fa98:	7852      	ldrb	r2, [r2, #1]
   1fa9a:	b132      	cbz	r2, 1faaa <adc_gain_invert+0x22>
			*value = (gdp->mul * *value) / gdp->div;
   1fa9c:	6808      	ldr	r0, [r1, #0]
   1fa9e:	4343      	muls	r3, r0
			rv = 0;
   1faa0:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   1faa2:	fb93 f3f2 	sdiv	r3, r3, r2
   1faa6:	600b      	str	r3, [r1, #0]
			rv = 0;
   1faa8:	4770      	bx	lr
	int rv = -EINVAL;
   1faaa:	f06f 0015 	mvn.w	r0, #21
		}
	}

	return rv;
}
   1faae:	4770      	bx	lr
   1fab0:	0002ec53 	.word	0x0002ec53

0001fab4 <adc_context_start_sampling>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   1fab4:	4b05      	ldr	r3, [pc, #20]	; (1facc <adc_context_start_sampling+0x18>)
   1fab6:	2201      	movs	r2, #1
   1fab8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   1fabc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   1fac0:	b109      	cbz	r1, 1fac6 <adc_context_start_sampling+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fac2:	60da      	str	r2, [r3, #12]
}
   1fac4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fac6:	601a      	str	r2, [r3, #0]
   1fac8:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   1faca:	4770      	bx	lr
   1facc:	40007000 	.word	0x40007000

0001fad0 <adc_nrfx_channel_setup>:
{
   1fad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   1fad2:	7908      	ldrb	r0, [r1, #4]
   1fad4:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   1fad8:	2c07      	cmp	r4, #7
{
   1fada:	af00      	add	r7, sp, #0
	if (channel_id >= SAADC_CH_NUM) {
   1fadc:	d82c      	bhi.n	1fb38 <adc_nrfx_channel_setup+0x68>
	switch (channel_cfg->gain) {
   1fade:	780b      	ldrb	r3, [r1, #0]
   1fae0:	2b0b      	cmp	r3, #11
   1fae2:	d818      	bhi.n	1fb16 <adc_nrfx_channel_setup+0x46>
   1fae4:	e8df f003 	tbb	[pc, r3]
   1fae8:	07070707 	.word	0x07070707
   1faec:	17170617 	.word	0x17170617
   1faf0:	15171311 	.word	0x15171311
		config.gain = NRF_SAADC_GAIN1_2;
   1faf4:	2304      	movs	r3, #4
	switch (channel_cfg->reference) {
   1faf6:	784a      	ldrb	r2, [r1, #1]
   1faf8:	2a03      	cmp	r2, #3
   1fafa:	d021      	beq.n	1fb40 <adc_nrfx_channel_setup+0x70>
   1fafc:	2a04      	cmp	r2, #4
   1fafe:	d034      	beq.n	1fb6a <adc_nrfx_channel_setup+0x9a>
		LOG_ERR("Selected ADC reference is not valid");
   1fb00:	466c      	mov	r4, sp
   1fb02:	b088      	sub	sp, #32
   1fb04:	466a      	mov	r2, sp
   1fb06:	4b36      	ldr	r3, [pc, #216]	; (1fbe0 <adc_nrfx_channel_setup+0x110>)
   1fb08:	e009      	b.n	1fb1e <adc_nrfx_channel_setup+0x4e>
		config.gain = NRF_SAADC_GAIN1;
   1fb0a:	2305      	movs	r3, #5
		break;
   1fb0c:	e7f3      	b.n	1faf6 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN2;
   1fb0e:	2306      	movs	r3, #6
		break;
   1fb10:	e7f1      	b.n	1faf6 <adc_nrfx_channel_setup+0x26>
		config.gain = NRF_SAADC_GAIN4;
   1fb12:	2307      	movs	r3, #7
		break;
   1fb14:	e7ef      	b.n	1faf6 <adc_nrfx_channel_setup+0x26>
		LOG_ERR("Selected ADC gain is not valid");
   1fb16:	466c      	mov	r4, sp
   1fb18:	b088      	sub	sp, #32
   1fb1a:	466a      	mov	r2, sp
   1fb1c:	4b31      	ldr	r3, [pc, #196]	; (1fbe4 <adc_nrfx_channel_setup+0x114>)
   1fb1e:	6153      	str	r3, [r2, #20]
   1fb20:	4b31      	ldr	r3, [pc, #196]	; (1fbe8 <adc_nrfx_channel_setup+0x118>)
   1fb22:	6193      	str	r3, [r2, #24]
   1fb24:	2303      	movs	r3, #3
   1fb26:	f842 3f10 	str.w	r3, [r2, #16]!
   1fb2a:	4830      	ldr	r0, [pc, #192]	; (1fbec <adc_nrfx_channel_setup+0x11c>)
   1fb2c:	2300      	movs	r3, #0
   1fb2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fb32:	f7f3 fef9 	bl	13928 <z_impl_z_log_msg_static_create>
   1fb36:	46a5      	mov	sp, r4
		return -EINVAL;
   1fb38:	f06f 0015 	mvn.w	r0, #21
}
   1fb3c:	46bd      	mov	sp, r7
   1fb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (channel_cfg->reference) {
   1fb40:	2501      	movs	r5, #1
	switch (channel_cfg->acquisition_time) {
   1fb42:	884a      	ldrh	r2, [r1, #2]
   1fb44:	f244 060a 	movw	r6, #16394	; 0x400a
   1fb48:	42b2      	cmp	r2, r6
   1fb4a:	d042      	beq.n	1fbd2 <adc_nrfx_channel_setup+0x102>
   1fb4c:	d80f      	bhi.n	1fb6e <adc_nrfx_channel_setup+0x9e>
   1fb4e:	f244 0603 	movw	r6, #16387	; 0x4003
   1fb52:	42b2      	cmp	r2, r6
   1fb54:	d019      	beq.n	1fb8a <adc_nrfx_channel_setup+0xba>
   1fb56:	f244 0605 	movw	r6, #16389	; 0x4005
   1fb5a:	42b2      	cmp	r2, r6
   1fb5c:	d037      	beq.n	1fbce <adc_nrfx_channel_setup+0xfe>
   1fb5e:	b3c2      	cbz	r2, 1fbd2 <adc_nrfx_channel_setup+0x102>
		LOG_ERR("Selected ADC acquisition time is not valid");
   1fb60:	466c      	mov	r4, sp
   1fb62:	b088      	sub	sp, #32
   1fb64:	466a      	mov	r2, sp
   1fb66:	4b22      	ldr	r3, [pc, #136]	; (1fbf0 <adc_nrfx_channel_setup+0x120>)
   1fb68:	e7d9      	b.n	1fb1e <adc_nrfx_channel_setup+0x4e>
	nrf_saadc_channel_config_t config = {
   1fb6a:	2500      	movs	r5, #0
   1fb6c:	e7e9      	b.n	1fb42 <adc_nrfx_channel_setup+0x72>
	switch (channel_cfg->acquisition_time) {
   1fb6e:	f244 0614 	movw	r6, #16404	; 0x4014
   1fb72:	42b2      	cmp	r2, r6
   1fb74:	d02f      	beq.n	1fbd6 <adc_nrfx_channel_setup+0x106>
   1fb76:	f244 0628 	movw	r6, #16424	; 0x4028
   1fb7a:	42b2      	cmp	r2, r6
   1fb7c:	d02d      	beq.n	1fbda <adc_nrfx_channel_setup+0x10a>
   1fb7e:	f244 060f 	movw	r6, #16399	; 0x400f
   1fb82:	42b2      	cmp	r2, r6
   1fb84:	d1ec      	bne.n	1fb60 <adc_nrfx_channel_setup+0x90>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   1fb86:	2203      	movs	r2, #3
   1fb88:	e000      	b.n	1fb8c <adc_nrfx_channel_setup+0xbc>
	nrf_saadc_channel_config_t config = {
   1fb8a:	2200      	movs	r2, #0
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1fb8c:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   1fb90:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   1fb92:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   1fb96:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   1fb9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   1fb9e:	0122      	lsls	r2, r4, #4
   1fba0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1fba4:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   1fba8:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   1fbaa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   1fbae:	0123      	lsls	r3, r4, #4
   1fbb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fbb4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   1fbb8:	798a      	ldrb	r2, [r1, #6]
   1fbba:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   1fbbe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   1fbc2:	4b0c      	ldr	r3, [pc, #48]	; (1fbf4 <adc_nrfx_channel_setup+0x124>)
   1fbc4:	794a      	ldrb	r2, [r1, #5]
   1fbc6:	4423      	add	r3, r4
   1fbc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	return 0;
   1fbcc:	e7b6      	b.n	1fb3c <adc_nrfx_channel_setup+0x6c>
	switch (channel_cfg->acquisition_time) {
   1fbce:	2201      	movs	r2, #1
   1fbd0:	e7dc      	b.n	1fb8c <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   1fbd2:	2202      	movs	r2, #2
   1fbd4:	e7da      	b.n	1fb8c <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   1fbd6:	2204      	movs	r2, #4
   1fbd8:	e7d8      	b.n	1fb8c <adc_nrfx_channel_setup+0xbc>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   1fbda:	2205      	movs	r2, #5
   1fbdc:	e7d6      	b.n	1fb8c <adc_nrfx_channel_setup+0xbc>
   1fbde:	bf00      	nop
   1fbe0:	0002ec9e 	.word	0x0002ec9e
   1fbe4:	0002ec7b 	.word	0x0002ec7b
   1fbe8:	0002ede4 	.word	0x0002ede4
   1fbec:	0002a800 	.word	0x0002a800
   1fbf0:	0002ecc6 	.word	0x0002ecc6
   1fbf4:	20000580 	.word	0x20000580

0001fbf8 <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
   1fbf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbfc:	b082      	sub	sp, #8
   1fbfe:	460c      	mov	r4, r1
   1fc00:	af02      	add	r7, sp, #8
	return z_impl_k_sem_take(sem, timeout);
   1fc02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc06:	4880      	ldr	r0, [pc, #512]	; (1fe08 <adc_nrfx_read+0x210>)
   1fc08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fc0c:	f003 fe20 	bl	23850 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1fc10:	6866      	ldr	r6, [r4, #4]
	if (!selected_channels ||
   1fc12:	1e73      	subs	r3, r6, #1
   1fc14:	2bfe      	cmp	r3, #254	; 0xfe
   1fc16:	d90d      	bls.n	1fc34 <adc_nrfx_read+0x3c>
		LOG_ERR("Invalid selection of channels");
   1fc18:	466c      	mov	r4, sp
   1fc1a:	b088      	sub	sp, #32
   1fc1c:	aa02      	add	r2, sp, #8
   1fc1e:	4b7b      	ldr	r3, [pc, #492]	; (1fe0c <adc_nrfx_read+0x214>)
   1fc20:	6153      	str	r3, [r2, #20]
   1fc22:	4b7b      	ldr	r3, [pc, #492]	; (1fe10 <adc_nrfx_read+0x218>)
		LOG_ERR(
   1fc24:	6193      	str	r3, [r2, #24]
   1fc26:	2303      	movs	r3, #3
   1fc28:	f842 3f10 	str.w	r3, [r2, #16]!
   1fc2c:	2300      	movs	r3, #0
   1fc2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1fc32:	e019      	b.n	1fc68 <adc_nrfx_read+0x70>
   1fc34:	2100      	movs	r1, #0
    p_reg->CH[channel].PSELP = pselp;
   1fc36:	4d77      	ldr	r5, [pc, #476]	; (1fe14 <adc_nrfx_read+0x21c>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1fc38:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 1fe18 <adc_nrfx_read+0x220>
	active_channels = 0U;
   1fc3c:	460a      	mov	r2, r1
		if (selected_channels & BIT(channel_id)) {
   1fc3e:	fa26 f301 	lsr.w	r3, r6, r1
   1fc42:	f013 0301 	ands.w	r3, r3, #1
   1fc46:	d041      	beq.n	1fccc <adc_nrfx_read+0xd4>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1fc48:	f81c 3001 	ldrb.w	r3, [ip, r1]
   1fc4c:	b9cb      	cbnz	r3, 1fc82 <adc_nrfx_read+0x8a>
				LOG_ERR("Channel %u not configured",
   1fc4e:	466c      	mov	r4, sp
   1fc50:	b088      	sub	sp, #32
   1fc52:	aa02      	add	r2, sp, #8
   1fc54:	4871      	ldr	r0, [pc, #452]	; (1fe1c <adc_nrfx_read+0x224>)
   1fc56:	6150      	str	r0, [r2, #20]
   1fc58:	486d      	ldr	r0, [pc, #436]	; (1fe10 <adc_nrfx_read+0x218>)
   1fc5a:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1fc5e:	2104      	movs	r1, #4
   1fc60:	f842 1f10 	str.w	r1, [r2, #16]!
   1fc64:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1fc68:	486d      	ldr	r0, [pc, #436]	; (1fe20 <adc_nrfx_read+0x228>)
   1fc6a:	f7f3 fe5d 	bl	13928 <z_impl_z_log_msg_static_create>
   1fc6e:	46a5      	mov	sp, r4
		return -EINVAL;
   1fc70:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
   1fc74:	4864      	ldr	r0, [pc, #400]	; (1fe08 <adc_nrfx_read+0x210>)
   1fc76:	f003 fdc5 	bl	23804 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
   1fc7a:	4620      	mov	r0, r4
   1fc7c:	46bd      	mov	sp, r7
   1fc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   1fc82:	eb05 1801 	add.w	r8, r5, r1, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   1fc86:	f894 e011 	ldrb.w	lr, [r4, #17]
   1fc8a:	f8d8 0518 	ldr.w	r0, [r8, #1304]	; 0x518
   1fc8e:	f1be 0e00 	subs.w	lr, lr, #0
   1fc92:	bf18      	it	ne
   1fc94:	f04f 0e01 	movne.w	lr, #1
   1fc98:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
   1fc9c:	ea40 600e 	orr.w	r0, r0, lr, lsl #24
   1fca0:	f8c8 0518 	str.w	r0, [r8, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   1fca4:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1fca8:	0100      	lsls	r0, r0, #4
			++active_channels;
   1fcaa:	3201      	adds	r2, #1
   1fcac:	502b      	str	r3, [r5, r0]
   1fcae:	b2d2      	uxtb	r2, r2
	} while (++channel_id < SAADC_CH_NUM);
   1fcb0:	3101      	adds	r1, #1
   1fcb2:	2908      	cmp	r1, #8
   1fcb4:	d1c3      	bne.n	1fc3e <adc_nrfx_read+0x46>
	error = set_resolution(sequence);
   1fcb6:	7c23      	ldrb	r3, [r4, #16]
	switch (sequence->resolution) {
   1fcb8:	f1a3 0108 	sub.w	r1, r3, #8
   1fcbc:	2906      	cmp	r1, #6
   1fcbe:	d81b      	bhi.n	1fcf8 <adc_nrfx_read+0x100>
   1fcc0:	e8df f001 	tbb	[pc, r1]
   1fcc4:	1a291a27 	.word	0x1a291a27
   1fcc8:	1a09      	.short	0x1a09
   1fcca:	18          	.byte	0x18
   1fccb:	00          	.byte	0x00
   1fccc:	f101 0051 	add.w	r0, r1, #81	; 0x51
   1fcd0:	0100      	lsls	r0, r0, #4
   1fcd2:	502b      	str	r3, [r5, r0]
}
   1fcd4:	e7ec      	b.n	1fcb0 <adc_nrfx_read+0xb8>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   1fcd6:	2302      	movs	r3, #2
    p_reg->RESOLUTION = resolution;
   1fcd8:	494e      	ldr	r1, [pc, #312]	; (1fe14 <adc_nrfx_read+0x21c>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1fcda:	2a01      	cmp	r2, #1
   1fcdc:	f8c1 35f0 	str.w	r3, [r1, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   1fce0:	7c63      	ldrb	r3, [r4, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1fce2:	d91a      	bls.n	1fd1a <adc_nrfx_read+0x122>
   1fce4:	b1db      	cbz	r3, 1fd1e <adc_nrfx_read+0x126>
		LOG_ERR(
   1fce6:	466c      	mov	r4, sp
   1fce8:	b088      	sub	sp, #32
   1fcea:	aa02      	add	r2, sp, #8
   1fcec:	4b4d      	ldr	r3, [pc, #308]	; (1fe24 <adc_nrfx_read+0x22c>)
   1fcee:	6153      	str	r3, [r2, #20]
   1fcf0:	4b4d      	ldr	r3, [pc, #308]	; (1fe28 <adc_nrfx_read+0x230>)
   1fcf2:	e797      	b.n	1fc24 <adc_nrfx_read+0x2c>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   1fcf4:	2303      	movs	r3, #3
		break;
   1fcf6:	e7ef      	b.n	1fcd8 <adc_nrfx_read+0xe0>
		LOG_ERR("ADC resolution value %d is not valid",
   1fcf8:	466c      	mov	r4, sp
   1fcfa:	b088      	sub	sp, #32
   1fcfc:	aa02      	add	r2, sp, #8
   1fcfe:	494b      	ldr	r1, [pc, #300]	; (1fe2c <adc_nrfx_read+0x234>)
   1fd00:	6151      	str	r1, [r2, #20]
   1fd02:	494b      	ldr	r1, [pc, #300]	; (1fe30 <adc_nrfx_read+0x238>)
	switch (sequence->oversampling) {
   1fd04:	e9c2 1306 	strd	r1, r3, [r2, #24]
		LOG_ERR("Oversampling value %d is not valid",
   1fd08:	2304      	movs	r3, #4
   1fd0a:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd0e:	2300      	movs	r3, #0
   1fd10:	e7a8      	b.n	1fc64 <adc_nrfx_read+0x6c>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   1fd12:	2300      	movs	r3, #0
   1fd14:	e7e0      	b.n	1fcd8 <adc_nrfx_read+0xe0>
	switch (sequence->resolution) {
   1fd16:	2301      	movs	r3, #1
   1fd18:	e7de      	b.n	1fcd8 <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
   1fd1a:	2b08      	cmp	r3, #8
   1fd1c:	d81d      	bhi.n	1fd5a <adc_nrfx_read+0x162>
    p_reg->OVERSAMPLE = oversample;
   1fd1e:	f8c1 35f4 	str.w	r3, [r1, #1524]	; 0x5f4
	if (sequence->options) {
   1fd22:	6821      	ldr	r1, [r4, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   1fd24:	0053      	lsls	r3, r2, #1
	if (sequence->options) {
   1fd26:	b9f9      	cbnz	r1, 1fd68 <adc_nrfx_read+0x170>
	if (sequence->buffer_size < needed_buffer_size) {
   1fd28:	68e1      	ldr	r1, [r4, #12]
   1fd2a:	4299      	cmp	r1, r3
   1fd2c:	d220      	bcs.n	1fd70 <adc_nrfx_read+0x178>
		LOG_ERR("Provided buffer is too small (%u/%u)",
   1fd2e:	466c      	mov	r4, sp
   1fd30:	b08a      	sub	sp, #40	; 0x28
   1fd32:	aa02      	add	r2, sp, #8
   1fd34:	483f      	ldr	r0, [pc, #252]	; (1fe34 <adc_nrfx_read+0x23c>)
   1fd36:	6150      	str	r0, [r2, #20]
   1fd38:	483f      	ldr	r0, [pc, #252]	; (1fe38 <adc_nrfx_read+0x240>)
   1fd3a:	6213      	str	r3, [r2, #32]
   1fd3c:	2305      	movs	r3, #5
   1fd3e:	e9c2 0106 	strd	r0, r1, [r2, #24]
   1fd42:	f842 3f10 	str.w	r3, [r2, #16]!
   1fd46:	4836      	ldr	r0, [pc, #216]	; (1fe20 <adc_nrfx_read+0x228>)
   1fd48:	2300      	movs	r3, #0
   1fd4a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1fd4e:	f7f3 fdeb 	bl	13928 <z_impl_z_log_msg_static_create>
   1fd52:	46a5      	mov	sp, r4
		return -ENOMEM;
   1fd54:	f06f 040b 	mvn.w	r4, #11
   1fd58:	e78c      	b.n	1fc74 <adc_nrfx_read+0x7c>
		LOG_ERR("Oversampling value %d is not valid",
   1fd5a:	466c      	mov	r4, sp
   1fd5c:	b088      	sub	sp, #32
   1fd5e:	aa02      	add	r2, sp, #8
   1fd60:	4936      	ldr	r1, [pc, #216]	; (1fe3c <adc_nrfx_read+0x244>)
   1fd62:	6151      	str	r1, [r2, #20]
   1fd64:	4930      	ldr	r1, [pc, #192]	; (1fe28 <adc_nrfx_read+0x230>)
   1fd66:	e7cd      	b.n	1fd04 <adc_nrfx_read+0x10c>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   1fd68:	8989      	ldrh	r1, [r1, #12]
   1fd6a:	fb01 3303 	mla	r3, r1, r3, r3
   1fd6e:	e7db      	b.n	1fd28 <adc_nrfx_read+0x130>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1fd70:	4b28      	ldr	r3, [pc, #160]	; (1fe14 <adc_nrfx_read+0x21c>)
   1fd72:	68a1      	ldr	r1, [r4, #8]
   1fd74:	f8c3 162c 	str.w	r1, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
   1fd78:	46a4      	mov	ip, r4
    p_reg->RESULT.MAXCNT = size;
   1fd7a:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
   1fd7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1fd82:	4d2f      	ldr	r5, [pc, #188]	; (1fe40 <adc_nrfx_read+0x248>)
   1fd84:	f105 0674 	add.w	r6, r5, #116	; 0x74
   1fd88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fd8a:	f8dc 3000 	ldr.w	r3, [ip]
   1fd8e:	6033      	str	r3, [r6, #0]
	ctx->status = 0;
   1fd90:	2600      	movs	r6, #0
   1fd92:	672e      	str	r6, [r5, #112]	; 0x70

	if (sequence->options) {
   1fd94:	6823      	ldr	r3, [r4, #0]
   1fd96:	46ac      	mov	ip, r5
   1fd98:	b38b      	cbz	r3, 1fdfe <adc_nrfx_read+0x206>
		ctx->options = *sequence->options;
   1fd9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1fd9c:	f105 0488 	add.w	r4, r5, #136	; 0x88
   1fda0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
   1fda4:	676c      	str	r4, [r5, #116]	; 0x74
		ctx->sampling_index = 0U;
   1fda6:	f8a5 6098 	strh.w	r6, [r5, #152]	; 0x98

		if (ctx->options.interval_us != 0U) {
   1fdaa:	b340      	cbz	r0, 1fdfe <adc_nrfx_read+0x206>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fdac:	f3bf 8f5b 	dmb	ish
   1fdb0:	e85c 3f00 	ldrex	r3, [ip]
   1fdb4:	e84c 6200 	strex	r2, r6, [ip]
   1fdb8:	2a00      	cmp	r2, #0
   1fdba:	d1f9      	bne.n	1fdb0 <adc_nrfx_read+0x1b8>
   1fdbc:	f3bf 8f5b 	dmb	ish
   1fdc0:	4920      	ldr	r1, [pc, #128]	; (1fe44 <adc_nrfx_read+0x24c>)
   1fdc2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1fdc6:	4a20      	ldr	r2, [pc, #128]	; (1fe48 <adc_nrfx_read+0x250>)
   1fdc8:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   1fdcc:	468c      	mov	ip, r1
   1fdce:	4631      	mov	r1, r6
   1fdd0:	fbe0 c104 	umlal	ip, r1, r0, r4
   1fdd4:	2300      	movs	r3, #0
   1fdd6:	4660      	mov	r0, ip
   1fdd8:	f7e0 f982 	bl	e0 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   1fddc:	2200      	movs	r2, #0
   1fdde:	e9cd 0100 	strd	r0, r1, [sp]
   1fde2:	2300      	movs	r3, #0
   1fde4:	f105 0008 	add.w	r0, r5, #8
   1fde8:	f004 fc6c 	bl	246c4 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   1fdec:	4817      	ldr	r0, [pc, #92]	; (1fe4c <adc_nrfx_read+0x254>)
   1fdee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fdf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fdf6:	f003 fd2b 	bl	23850 <z_impl_k_sem_take>
	return ctx->status;
   1fdfa:	6f2c      	ldr	r4, [r5, #112]	; 0x70
	return error;
   1fdfc:	e73a      	b.n	1fc74 <adc_nrfx_read+0x7c>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
   1fdfe:	4810      	ldr	r0, [pc, #64]	; (1fe40 <adc_nrfx_read+0x248>)
   1fe00:	f7ff fe58 	bl	1fab4 <adc_context_start_sampling>
   1fe04:	e7f2      	b.n	1fdec <adc_nrfx_read+0x1f4>
   1fe06:	bf00      	nop
   1fe08:	200005c0 	.word	0x200005c0
   1fe0c:	0002ecf5 	.word	0x0002ecf5
   1fe10:	0002ee2d 	.word	0x0002ee2d
   1fe14:	40007000 	.word	0x40007000
   1fe18:	20000620 	.word	0x20000620
   1fe1c:	0002ed17 	.word	0x0002ed17
   1fe20:	0002a800 	.word	0x0002a800
   1fe24:	0002ed5e 	.word	0x0002ed5e
   1fe28:	0002ee0d 	.word	0x0002ee0d
   1fe2c:	0002ed35 	.word	0x0002ed35
   1fe30:	0002ee1e 	.word	0x0002ee1e
   1fe34:	0002edbb 	.word	0x0002edbb
   1fe38:	0002edfb 	.word	0x0002edfb
   1fe3c:	0002ed94 	.word	0x0002ed94
   1fe40:	20000580 	.word	0x20000580
   1fe44:	000f423f 	.word	0x000f423f
   1fe48:	000f4240 	.word	0x000f4240
   1fe4c:	200005d8 	.word	0x200005d8

0001fe50 <init_saadc>:
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
   1fe50:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe52:	4b0e      	ldr	r3, [pc, #56]	; (1fe8c <init_saadc+0x3c>)
   1fe54:	2400      	movs	r4, #0
   1fe56:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1fe5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1fe5e:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
   1fe62:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
   1fe66:	2212      	movs	r2, #18
   1fe68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   1fe6c:	2007      	movs	r0, #7
   1fe6e:	f7f4 fe5f 	bl	14b30 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fe72:	4622      	mov	r2, r4
   1fe74:	2101      	movs	r1, #1
   1fe76:	2007      	movs	r0, #7
   1fe78:	f7f4 fe8a 	bl	14b90 <z_arm_irq_priority_set>
   1fe7c:	4804      	ldr	r0, [pc, #16]	; (1fe90 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
   1fe7e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1fe80:	b913      	cbnz	r3, 1fe88 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
   1fe82:	3040      	adds	r0, #64	; 0x40
   1fe84:	f003 fcbe 	bl	23804 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   1fe88:	2000      	movs	r0, #0
   1fe8a:	bd10      	pop	{r4, pc}
   1fe8c:	40007000 	.word	0x40007000
   1fe90:	20000580 	.word	0x20000580

0001fe94 <saadc_irq_handler>:
{
   1fe94:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe96:	4b2f      	ldr	r3, [pc, #188]	; (1ff54 <saadc_irq_handler+0xc0>)
   1fe98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   1fe9c:	2a00      	cmp	r2, #0
   1fe9e:	d04c      	beq.n	1ff3a <saadc_irq_handler+0xa6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fea0:	2200      	movs	r2, #0
   1fea2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1fea6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   1feaa:	4c2b      	ldr	r4, [pc, #172]	; (1ff58 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1feac:	2101      	movs	r1, #1
   1feae:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   1feb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1feb4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1feb6:	4625      	mov	r5, r4
   1feb8:	b3d3      	cbz	r3, 1ff30 <saadc_irq_handler+0x9c>
		adc_sequence_callback callback = ctx->options.callback;
   1feba:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
			action = callback(dev,
   1febe:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
		if (callback) {
   1fec2:	b133      	cbz	r3, 1fed2 <saadc_irq_handler+0x3e>
			action = callback(dev,
   1fec4:	f104 0174 	add.w	r1, r4, #116	; 0x74
   1fec8:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   1feca:	2801      	cmp	r0, #1
   1fecc:	d014      	beq.n	1fef8 <saadc_irq_handler+0x64>
   1fece:	2802      	cmp	r0, #2
   1fed0:	d028      	beq.n	1ff24 <saadc_irq_handler+0x90>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   1fed2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
   1fed6:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1feda:	429a      	cmp	r2, r3
   1fedc:	d922      	bls.n	1ff24 <saadc_irq_handler+0x90>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   1fede:	3301      	adds	r3, #1
   1fee0:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   1fee4:	4b1b      	ldr	r3, [pc, #108]	; (1ff54 <saadc_irq_handler+0xc0>)
   1fee6:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   1feea:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   1feee:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   1fef0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   1fef4:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   1fef8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1fefc:	b923      	cbnz	r3, 1ff08 <saadc_irq_handler+0x74>
}
   1fefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				adc_context_start_sampling(ctx);
   1ff02:	4815      	ldr	r0, [pc, #84]	; (1ff58 <saadc_irq_handler+0xc4>)
   1ff04:	f7ff bdd6 	b.w	1fab4 <adc_context_start_sampling>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1ff08:	f3bf 8f5b 	dmb	ish
   1ff0c:	e855 3f00 	ldrex	r3, [r5]
   1ff10:	1e5a      	subs	r2, r3, #1
   1ff12:	e845 2100 	strex	r1, r2, [r5]
   1ff16:	2900      	cmp	r1, #0
   1ff18:	d1f8      	bne.n	1ff0c <saadc_irq_handler+0x78>
   1ff1a:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   1ff1e:	2b01      	cmp	r3, #1
   1ff20:	dced      	bgt.n	1fefe <saadc_irq_handler+0x6a>
   1ff22:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   1ff24:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1ff28:	b113      	cbz	r3, 1ff30 <saadc_irq_handler+0x9c>
	z_impl_k_timer_stop(timer);
   1ff2a:	480c      	ldr	r0, [pc, #48]	; (1ff5c <saadc_irq_handler+0xc8>)
   1ff2c:	f00a f918 	bl	2a160 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1ff30:	480b      	ldr	r0, [pc, #44]	; (1ff60 <saadc_irq_handler+0xcc>)
   1ff32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ff36:	f003 bc65 	b.w	23804 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff3a:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
   1ff3e:	2900      	cmp	r1, #0
   1ff40:	d0ef      	beq.n	1ff22 <saadc_irq_handler+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff42:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1ff46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff4a:	2201      	movs	r2, #1
   1ff4c:	609a      	str	r2, [r3, #8]
   1ff4e:	601a      	str	r2, [r3, #0]
   1ff50:	605a      	str	r2, [r3, #4]
}
   1ff52:	e7e6      	b.n	1ff22 <saadc_irq_handler+0x8e>
   1ff54:	40007000 	.word	0x40007000
   1ff58:	20000580 	.word	0x20000580
   1ff5c:	20000588 	.word	0x20000588
   1ff60:	200005d8 	.word	0x200005d8

0001ff64 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1ff64:	4b08      	ldr	r3, [pc, #32]	; (1ff88 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ff66:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ff68:	1ac3      	subs	r3, r0, r3
{
   1ff6a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ff6c:	4907      	ldr	r1, [pc, #28]	; (1ff8c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ff6e:	109b      	asrs	r3, r3, #2
{
   1ff70:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ff72:	4359      	muls	r1, r3
   1ff74:	4806      	ldr	r0, [pc, #24]	; (1ff90 <onoff_stop+0x2c>)
   1ff76:	2240      	movs	r2, #64	; 0x40
   1ff78:	f009 f924 	bl	291c4 <stop>
	notify(mgr, res);
   1ff7c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1ff7e:	4601      	mov	r1, r0
	notify(mgr, res);
   1ff80:	4620      	mov	r0, r4
}
   1ff82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1ff86:	4718      	bx	r3
   1ff88:	2000311c 	.word	0x2000311c
   1ff8c:	b6db6db7 	.word	0xb6db6db7
   1ff90:	0002a520 	.word	0x0002a520

0001ff94 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1ff94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1ff96:	4c0c      	ldr	r4, [pc, #48]	; (1ffc8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ff98:	4a0c      	ldr	r2, [pc, #48]	; (1ffcc <onoff_start+0x38>)
   1ff9a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1ff9c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ff9e:	9300      	str	r3, [sp, #0]
{
   1ffa0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ffa2:	460b      	mov	r3, r1
   1ffa4:	490a      	ldr	r1, [pc, #40]	; (1ffd0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1ffa6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ffa8:	4361      	muls	r1, r4
{
   1ffaa:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1ffac:	4809      	ldr	r0, [pc, #36]	; (1ffd4 <onoff_start+0x40>)
   1ffae:	f009 f935 	bl	2921c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1ffb2:	1e01      	subs	r1, r0, #0
   1ffb4:	da05      	bge.n	1ffc2 <onoff_start+0x2e>
		notify(mgr, err);
   1ffb6:	4630      	mov	r0, r6
   1ffb8:	462b      	mov	r3, r5
	}
}
   1ffba:	b002      	add	sp, #8
   1ffbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1ffc0:	4718      	bx	r3
}
   1ffc2:	b002      	add	sp, #8
   1ffc4:	bd70      	pop	{r4, r5, r6, pc}
   1ffc6:	bf00      	nop
   1ffc8:	2000311c 	.word	0x2000311c
   1ffcc:	00029287 	.word	0x00029287
   1ffd0:	b6db6db7 	.word	0xb6db6db7
   1ffd4:	0002a520 	.word	0x0002a520

0001ffd8 <generic_hfclk_stop>:
{
   1ffd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ffda:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffde:	f3ef 8411 	mrs	r4, BASEPRI
   1ffe2:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffe6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1ffea:	4a07      	ldr	r2, [pc, #28]	; (20008 <generic_hfclk_stop+0x30>)
   1ffec:	6813      	ldr	r3, [r2, #0]
   1ffee:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1fff2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1fff4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1fff6:	d402      	bmi.n	1fffe <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1fff8:	2001      	movs	r0, #1
   1fffa:	f009 fc50 	bl	2989e <nrfx_clock_stop>
	__asm__ volatile(
   1fffe:	f384 8811 	msr	BASEPRI, r4
   20002:	f3bf 8f6f 	isb	sy
}
   20006:	bd10      	pop	{r4, pc}
   20008:	2000316c 	.word	0x2000316c

0002000c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2000c:	2200      	movs	r2, #0
{
   2000e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20010:	2101      	movs	r1, #1
{
   20012:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20014:	4610      	mov	r0, r2
   20016:	f7f4 fdbb 	bl	14b90 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2001a:	480f      	ldr	r0, [pc, #60]	; (20058 <clk_init+0x4c>)
   2001c:	f002 f9a8 	bl	22370 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20020:	4b0e      	ldr	r3, [pc, #56]	; (2005c <clk_init+0x50>)
   20022:	4298      	cmp	r0, r3
   20024:	d115      	bne.n	20052 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20026:	f009 fc3f 	bl	298a8 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2002a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2002c:	490c      	ldr	r1, [pc, #48]	; (20060 <clk_init+0x54>)
   2002e:	4630      	mov	r0, r6
   20030:	f005 fb39 	bl	256a6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   20034:	2800      	cmp	r0, #0
   20036:	db0b      	blt.n	20050 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20038:	2501      	movs	r5, #1
   2003a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   2003c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2003e:	4908      	ldr	r1, [pc, #32]	; (20060 <clk_init+0x54>)
   20040:	f104 001c 	add.w	r0, r4, #28
   20044:	f005 fb2f 	bl	256a6 <onoff_manager_init>
		if (err < 0) {
   20048:	2800      	cmp	r0, #0
   2004a:	db01      	blt.n	20050 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2004c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   2004e:	2000      	movs	r0, #0
}
   20050:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20052:	f06f 0004 	mvn.w	r0, #4
   20056:	e7fb      	b.n	20050 <clk_init+0x44>
   20058:	00020099 	.word	0x00020099
   2005c:	0bad0000 	.word	0x0bad0000
   20060:	0002b338 	.word	0x0002b338

00020064 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20064:	b570      	push	{r4, r5, r6, lr}
   20066:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20068:	230c      	movs	r3, #12
   2006a:	4809      	ldr	r0, [pc, #36]	; (20090 <clkstarted_handle.constprop.0+0x2c>)
   2006c:	434b      	muls	r3, r1
   2006e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   20070:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   20074:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   20076:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   20078:	4418      	add	r0, r3
	sub_data->cb = NULL;
   2007a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2007c:	f009 f88f 	bl	2919e <set_on_state>
	if (callback) {
   20080:	b12d      	cbz	r5, 2008e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20082:	4632      	mov	r2, r6
   20084:	462b      	mov	r3, r5
   20086:	4803      	ldr	r0, [pc, #12]	; (20094 <clkstarted_handle.constprop.0+0x30>)
}
   20088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2008c:	4718      	bx	r3
}
   2008e:	bd70      	pop	{r4, r5, r6, pc}
   20090:	2000311c 	.word	0x2000311c
   20094:	0002a520 	.word	0x0002a520

00020098 <clock_event_handler>:
	switch (event) {
   20098:	b110      	cbz	r0, 200a0 <clock_event_handler+0x8>
   2009a:	2801      	cmp	r0, #1
   2009c:	d004      	beq.n	200a8 <clock_event_handler+0x10>
   2009e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   200a0:	4b03      	ldr	r3, [pc, #12]	; (200b0 <clock_event_handler+0x18>)
   200a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   200a4:	075b      	lsls	r3, r3, #29
   200a6:	d101      	bne.n	200ac <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   200a8:	f7ff bfdc 	b.w	20064 <clkstarted_handle.constprop.0>
}
   200ac:	4770      	bx	lr
   200ae:	bf00      	nop
   200b0:	2000311c 	.word	0x2000311c

000200b4 <generic_hfclk_start>:
{
   200b4:	b508      	push	{r3, lr}
	__asm__ volatile(
   200b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   200ba:	f3ef 8111 	mrs	r1, BASEPRI
   200be:	f383 8812 	msr	BASEPRI_MAX, r3
   200c2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   200c6:	4a12      	ldr	r2, [pc, #72]	; (20110 <generic_hfclk_start+0x5c>)
   200c8:	6813      	ldr	r3, [r2, #0]
   200ca:	f043 0002 	orr.w	r0, r3, #2
   200ce:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   200d0:	07da      	lsls	r2, r3, #31
   200d2:	d408      	bmi.n	200e6 <generic_hfclk_start+0x32>
	__asm__ volatile(
   200d4:	f381 8811 	msr	BASEPRI, r1
   200d8:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   200dc:	2001      	movs	r0, #1
}
   200de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   200e2:	f002 b935 	b.w	22350 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   200e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   200ea:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   200ee:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   200f2:	07d3      	lsls	r3, r2, #31
   200f4:	d5ee      	bpl.n	200d4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   200f6:	4807      	ldr	r0, [pc, #28]	; (20114 <generic_hfclk_start+0x60>)
   200f8:	f009 f851 	bl	2919e <set_on_state>
   200fc:	f381 8811 	msr	BASEPRI, r1
   20100:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   20104:	2000      	movs	r0, #0
}
   20106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   2010a:	f7ff bfab 	b.w	20064 <clkstarted_handle.constprop.0>
   2010e:	bf00      	nop
   20110:	2000316c 	.word	0x2000316c
   20114:	2000315c 	.word	0x2000315c

00020118 <api_blocking_start>:
{
   20118:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2011a:	2200      	movs	r2, #0
   2011c:	2301      	movs	r3, #1
   2011e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20122:	ab04      	add	r3, sp, #16
   20124:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20128:	4a09      	ldr	r2, [pc, #36]	; (20150 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2012a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2012e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20130:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20134:	f009 f8a0 	bl	29278 <api_start>
	if (err < 0) {
   20138:	2800      	cmp	r0, #0
   2013a:	db05      	blt.n	20148 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   2013c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20140:	2300      	movs	r3, #0
   20142:	4668      	mov	r0, sp
   20144:	f003 fb84 	bl	23850 <z_impl_k_sem_take>
}
   20148:	b007      	add	sp, #28
   2014a:	f85d fb04 	ldr.w	pc, [sp], #4
   2014e:	bf00      	nop
   20150:	0002929f 	.word	0x0002929f

00020154 <lfclk_start>:
{
   20154:	b510      	push	{r4, lr}
	if (!once) {
   20156:	4c07      	ldr	r4, [pc, #28]	; (20174 <lfclk_start+0x20>)
   20158:	7823      	ldrb	r3, [r4, #0]
   2015a:	b92b      	cbnz	r3, 20168 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   2015c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   20160:	f009 ffcc 	bl	2a0fc <z_impl_k_busy_wait>
		once = true;
   20164:	2301      	movs	r3, #1
   20166:	7023      	strb	r3, [r4, #0]
}
   20168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2016c:	2000      	movs	r0, #0
   2016e:	f002 b8ef 	b.w	22350 <nrfx_clock_start>
   20172:	bf00      	nop
   20174:	200034bb 	.word	0x200034bb

00020178 <z_nrf_clock_control_lf_on>:
{
   20178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2017c:	4938      	ldr	r1, [pc, #224]	; (20260 <z_nrf_clock_control_lf_on+0xe8>)
   2017e:	f3bf 8f5b 	dmb	ish
   20182:	4607      	mov	r7, r0
   20184:	2201      	movs	r2, #1
   20186:	e851 3f00 	ldrex	r3, [r1]
   2018a:	e841 2000 	strex	r0, r2, [r1]
   2018e:	2800      	cmp	r0, #0
   20190:	d1f9      	bne.n	20186 <z_nrf_clock_control_lf_on+0xe>
   20192:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20196:	b933      	cbnz	r3, 201a6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   20198:	4932      	ldr	r1, [pc, #200]	; (20264 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   2019a:	4833      	ldr	r0, [pc, #204]	; (20268 <z_nrf_clock_control_lf_on+0xf0>)
   2019c:	604b      	str	r3, [r1, #4]
   2019e:	60cb      	str	r3, [r1, #12]
   201a0:	608a      	str	r2, [r1, #8]
   201a2:	f005 fa93 	bl	256cc <onoff_request>
	switch (start_mode) {
   201a6:	1e7b      	subs	r3, r7, #1
   201a8:	2b01      	cmp	r3, #1
   201aa:	d82b      	bhi.n	20204 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   201ac:	2f01      	cmp	r7, #1
   201ae:	d107      	bne.n	201c0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   201b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201b4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   201b8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   201bc:	2b01      	cmp	r3, #1
   201be:	d021      	beq.n	20204 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   201c0:	f009 fc7d 	bl	29abe <k_is_in_isr>
   201c4:	4605      	mov	r5, r0
   201c6:	b9f8      	cbnz	r0, 20208 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   201c8:	4b28      	ldr	r3, [pc, #160]	; (2026c <z_nrf_clock_control_lf_on+0xf4>)
   201ca:	781b      	ldrb	r3, [r3, #0]
   201cc:	b1e3      	cbz	r3, 20208 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   201ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   201d2:	2202      	movs	r2, #2
   201d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   201d8:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   201da:	f8df 8094 	ldr.w	r8, [pc, #148]	; 20270 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   201de:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   201e2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   201e6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   201ea:	03d2      	lsls	r2, r2, #15
   201ec:	d516      	bpl.n	2021c <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   201ee:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   201f2:	2b01      	cmp	r3, #1
   201f4:	d001      	beq.n	201fa <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   201f6:	2f01      	cmp	r7, #1
   201f8:	d110      	bne.n	2021c <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   201fa:	b35d      	cbz	r5, 20254 <z_nrf_clock_control_lf_on+0xdc>
   201fc:	f386 8811 	msr	BASEPRI, r6
   20200:	f3bf 8f6f 	isb	sy
}
   20204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   20208:	f04f 0340 	mov.w	r3, #64	; 0x40
   2020c:	f3ef 8611 	mrs	r6, BASEPRI
   20210:	f383 8812 	msr	BASEPRI_MAX, r3
   20214:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20218:	2501      	movs	r5, #1
   2021a:	e7de      	b.n	201da <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2021c:	b1ad      	cbz	r5, 2024a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2021e:	4630      	mov	r0, r6
   20220:	f7f4 fc0c 	bl	14a3c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20224:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20228:	2b00      	cmp	r3, #0
   2022a:	d1da      	bne.n	201e2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2022c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20230:	2a00      	cmp	r2, #0
   20232:	d0d6      	beq.n	201e2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20234:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20238:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   2023c:	2301      	movs	r3, #1
   2023e:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   20242:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20246:	60a3      	str	r3, [r4, #8]
}
   20248:	e7cb      	b.n	201e2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   2024a:	2100      	movs	r1, #0
   2024c:	2021      	movs	r0, #33	; 0x21
   2024e:	f003 ffdb 	bl	24208 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20252:	e7e7      	b.n	20224 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   20254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20258:	2202      	movs	r2, #2
   2025a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2025e:	e7d1      	b.n	20204 <z_nrf_clock_control_lf_on+0x8c>
   20260:	20003118 	.word	0x20003118
   20264:	20003108 	.word	0x20003108
   20268:	20003138 	.word	0x20003138
   2026c:	200039be 	.word	0x200039be
   20270:	e000e100 	.word	0xe000e100

00020274 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   20274:	b508      	push	{r3, lr}
   20276:	4807      	ldr	r0, [pc, #28]	; (20294 <uart_console_init+0x20>)
   20278:	f009 fb61 	bl	2993e <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   2027c:	b138      	cbz	r0, 2028e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   2027e:	4806      	ldr	r0, [pc, #24]	; (20298 <uart_console_init+0x24>)
   20280:	f7f5 faa6 	bl	157d0 <__stdout_hook_install>
	__printk_hook_install(console_out);
   20284:	4804      	ldr	r0, [pc, #16]	; (20298 <uart_console_init+0x24>)
   20286:	f7f2 f835 	bl	122f4 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   2028a:	2000      	movs	r0, #0
}
   2028c:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2028e:	f06f 0012 	mvn.w	r0, #18
   20292:	e7fb      	b.n	2028c <uart_console_init+0x18>
   20294:	0002a580 	.word	0x0002a580
   20298:	0002029d 	.word	0x0002029d

0002029c <console_out>:
	if ('\n' == c) {
   2029c:	280a      	cmp	r0, #10
{
   2029e:	b538      	push	{r3, r4, r5, lr}
   202a0:	4d07      	ldr	r5, [pc, #28]	; (202c0 <console_out+0x24>)
   202a2:	4604      	mov	r4, r0
	if ('\n' == c) {
   202a4:	d104      	bne.n	202b0 <console_out+0x14>
   202a6:	68ab      	ldr	r3, [r5, #8]
   202a8:	210d      	movs	r1, #13
   202aa:	685b      	ldr	r3, [r3, #4]
   202ac:	4628      	mov	r0, r5
   202ae:	4798      	blx	r3
   202b0:	68ab      	ldr	r3, [r5, #8]
   202b2:	4803      	ldr	r0, [pc, #12]	; (202c0 <console_out+0x24>)
   202b4:	685b      	ldr	r3, [r3, #4]
   202b6:	b2e1      	uxtb	r1, r4
   202b8:	4798      	blx	r3
}
   202ba:	4620      	mov	r0, r4
   202bc:	bd38      	pop	{r3, r4, r5, pc}
   202be:	bf00      	nop
   202c0:	0002a580 	.word	0x0002a580

000202c4 <random_byte_get>:
   202c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   202c8:	f3ef 8211 	mrs	r2, BASEPRI
   202cc:	f383 8812 	msr	BASEPRI_MAX, r3
   202d0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   202d4:	4b09      	ldr	r3, [pc, #36]	; (202fc <random_byte_get+0x38>)
   202d6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   202da:	b161      	cbz	r1, 202f6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   202dc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   202de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   202e2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   202e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   202ea:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   202ec:	f382 8811 	msr	BASEPRI, r2
   202f0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   202f4:	4770      	bx	lr
	int retval = -EAGAIN;
   202f6:	f06f 000a 	mvn.w	r0, #10
   202fa:	e7f7      	b.n	202ec <random_byte_get+0x28>
   202fc:	4000d000 	.word	0x4000d000

00020300 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   20300:	b5f0      	push	{r4, r5, r6, r7, lr}
   20302:	4603      	mov	r3, r0
   20304:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   20306:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   20308:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   2030c:	f04f 0540 	mov.w	r5, #64	; 0x40
   20310:	f3ef 8211 	mrs	r2, BASEPRI
   20314:	f385 8812 	msr	BASEPRI_MAX, r5
   20318:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   2031c:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2031e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   20322:	1be4      	subs	r4, r4, r7
   20324:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   20328:	42a0      	cmp	r0, r4
		len = available;
   2032a:	bf88      	it	hi
   2032c:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2032e:	183e      	adds	r6, r7, r0
   20330:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   20334:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   20336:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   20338:	f382 8811 	msr	BASEPRI, r2
   2033c:	f3bf 8f6f 	isb	sy
   20340:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   20342:	428a      	cmp	r2, r1
   20344:	d117      	bne.n	20376 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20346:	4577      	cmp	r7, lr
   20348:	d10d      	bne.n	20366 <rng_pool_get+0x66>
	__asm__ volatile(
   2034a:	f04f 0140 	mov.w	r1, #64	; 0x40
   2034e:	f3ef 8211 	mrs	r2, BASEPRI
   20352:	f381 8812 	msr	BASEPRI_MAX, r1
   20356:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   2035a:	7819      	ldrb	r1, [r3, #0]
   2035c:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   2035e:	f382 8811 	msr	BASEPRI, r2
   20362:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   20366:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   20368:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   2036a:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2036c:	bf22      	ittt	cs
   2036e:	4b06      	ldrcs	r3, [pc, #24]	; (20388 <rng_pool_get+0x88>)
   20370:	2201      	movcs	r2, #1
   20372:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   20374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   20376:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   20378:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2037a:	7976      	ldrb	r6, [r6, #5]
   2037c:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   20380:	ea05 050c 	and.w	r5, r5, ip
   20384:	e7dd      	b.n	20342 <rng_pool_get+0x42>
   20386:	bf00      	nop
   20388:	4000d000 	.word	0x4000d000

0002038c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2038c:	43db      	mvns	r3, r3
{
   2038e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20392:	f013 0501 	ands.w	r5, r3, #1
{
   20396:	460e      	mov	r6, r1
   20398:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2039a:	d004      	beq.n	203a6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2039c:	4823      	ldr	r0, [pc, #140]	; (2042c <entropy_nrf5_get_entropy_isr+0xa0>)
   2039e:	f7ff ffaf 	bl	20300 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   203a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   203a6:	b3a2      	cbz	r2, 20412 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   203a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ac:	f3ef 8811 	mrs	r8, BASEPRI
   203b0:	f383 8812 	msr	BASEPRI_MAX, r3
   203b4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   203b8:	200d      	movs	r0, #13
   203ba:	f7f4 fbdb 	bl	14b74 <arch_irq_is_enabled>
   203be:	4607      	mov	r7, r0
		irq_disable(IRQN);
   203c0:	200d      	movs	r0, #13
   203c2:	f7f4 fbc3 	bl	14b4c <arch_irq_disable>
	__asm__ volatile(
   203c6:	f388 8811 	msr	BASEPRI, r8
   203ca:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   203ce:	f8df a060 	ldr.w	sl, [pc, #96]	; 20430 <entropy_nrf5_get_entropy_isr+0xa4>
   203d2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 20434 <entropy_nrf5_get_entropy_isr+0xa8>
   203d6:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   203da:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   203de:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   203e2:	2301      	movs	r3, #1
   203e4:	f8ca 3000 	str.w	r3, [sl]
   203e8:	4625      	mov	r5, r4
   203ea:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   203ee:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   203f2:	b183      	cbz	r3, 20416 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   203f4:	f7ff ff66 	bl	202c4 <random_byte_get>
			if (byte < 0) {
   203f8:	1e03      	subs	r3, r0, #0
   203fa:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   203fe:	dbf6      	blt.n	203ee <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   20400:	3d01      	subs	r5, #1
   20402:	b2ad      	uxth	r5, r5
   20404:	5573      	strb	r3, [r6, r5]
		} while (len);
   20406:	2d00      	cmp	r5, #0
   20408:	d1f1      	bne.n	203ee <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   2040a:	b117      	cbz	r7, 20412 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   2040c:	200d      	movs	r0, #13
   2040e:	f7f4 fb8f 	bl	14b30 <arch_irq_enable>
	return cnt;
   20412:	4620      	mov	r0, r4
   20414:	e7c5      	b.n	203a2 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   20416:	f04f 0340 	mov.w	r3, #64	; 0x40
   2041a:	f3ef 8011 	mrs	r0, BASEPRI
   2041e:	f383 8812 	msr	BASEPRI_MAX, r3
   20422:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   20426:	f7f4 fb09 	bl	14a3c <arch_cpu_atomic_idle>
}
   2042a:	e7e0      	b.n	203ee <entropy_nrf5_get_entropy_isr+0x62>
   2042c:	200031a0 	.word	0x200031a0
   20430:	4000d000 	.word	0x4000d000
   20434:	e000e100 	.word	0xe000e100

00020438 <entropy_nrf5_get_entropy>:
{
   20438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   2043c:	4f12      	ldr	r7, [pc, #72]	; (20488 <entropy_nrf5_get_entropy+0x50>)
   2043e:	460d      	mov	r5, r1
   20440:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20442:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   20446:	b914      	cbnz	r4, 2044e <entropy_nrf5_get_entropy+0x16>
}
   20448:	4620      	mov	r0, r4
   2044a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2044e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20452:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20456:	4638      	mov	r0, r7
   20458:	f003 f9fa 	bl	23850 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2045c:	4622      	mov	r2, r4
   2045e:	4629      	mov	r1, r5
   20460:	4640      	mov	r0, r8
   20462:	f7ff ff4d 	bl	20300 <rng_pool_get>
   20466:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   20468:	4638      	mov	r0, r7
   2046a:	f003 f9cb 	bl	23804 <z_impl_k_sem_give>
		if (bytes == 0U) {
   2046e:	b93e      	cbnz	r6, 20480 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   20470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20478:	4804      	ldr	r0, [pc, #16]	; (2048c <entropy_nrf5_get_entropy+0x54>)
   2047a:	f003 f9e9 	bl	23850 <z_impl_k_sem_take>
	while (len) {
   2047e:	e7e6      	b.n	2044e <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   20480:	1ba4      	subs	r4, r4, r6
   20482:	b2a4      	uxth	r4, r4
		buf += bytes;
   20484:	4435      	add	r5, r6
   20486:	e7de      	b.n	20446 <entropy_nrf5_get_entropy+0xe>
   20488:	20003170 	.word	0x20003170
   2048c:	20003188 	.word	0x20003188

00020490 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   20490:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20492:	4c19      	ldr	r4, [pc, #100]	; (204f8 <entropy_nrf5_init+0x68>)
   20494:	2201      	movs	r2, #1
   20496:	4611      	mov	r1, r2
   20498:	4620      	mov	r0, r4
   2049a:	f009 fbca 	bl	29c32 <z_impl_k_sem_init>
   2049e:	2201      	movs	r2, #1
   204a0:	2100      	movs	r1, #0
   204a2:	f104 0018 	add.w	r0, r4, #24
   204a6:	f009 fbc4 	bl	29c32 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   204aa:	f240 4307 	movw	r3, #1031	; 0x407
   204ae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   204b2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   204b6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   204b8:	230c      	movs	r3, #12
   204ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   204be:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   204c0:	4b0e      	ldr	r3, [pc, #56]	; (204fc <entropy_nrf5_init+0x6c>)
   204c2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   204c6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   204ca:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   204ce:	f022 0201 	bic.w	r2, r2, #1
   204d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   204d6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   204d8:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   204dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   204e0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   204e4:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   204e6:	6019      	str	r1, [r3, #0]
   204e8:	200d      	movs	r0, #13
   204ea:	f7f4 fb51 	bl	14b90 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   204ee:	200d      	movs	r0, #13
   204f0:	f7f4 fb1e 	bl	14b30 <arch_irq_enable>

	return 0;
}
   204f4:	4628      	mov	r0, r5
   204f6:	bd38      	pop	{r3, r4, r5, pc}
   204f8:	20003170 	.word	0x20003170
   204fc:	4000d000 	.word	0x4000d000

00020500 <isr>:
{
   20500:	b510      	push	{r4, lr}
	byte = random_byte_get();
   20502:	f7ff fedf 	bl	202c4 <random_byte_get>
	if (byte < 0) {
   20506:	2800      	cmp	r0, #0
   20508:	db20      	blt.n	2054c <isr+0x4c>
	uint8_t last  = rngp->last;
   2050a:	4b17      	ldr	r3, [pc, #92]	; (20568 <isr+0x68>)
   2050c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   20510:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   20514:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   20518:	1b14      	subs	r4, r2, r4
   2051a:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2051e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   20520:	d10d      	bne.n	2053e <isr+0x3e>
	uint8_t last  = rngp->last;
   20522:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   20526:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2052a:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   2052e:	1b14      	subs	r4, r2, r4
   20530:	ea31 0404 	bics.w	r4, r1, r4
   20534:	d10b      	bne.n	2054e <isr+0x4e>
   20536:	4b0d      	ldr	r3, [pc, #52]	; (2056c <isr+0x6c>)
   20538:	2201      	movs	r2, #1
   2053a:	605a      	str	r2, [r3, #4]
}
   2053c:	e00e      	b.n	2055c <isr+0x5c>
	rngp->buffer[last] = byte;
   2053e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   20540:	3201      	adds	r2, #1
   20542:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   20544:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20548:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   2054c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   2054e:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   20550:	3201      	adds	r2, #1
   20552:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   20554:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   20558:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   2055c:	4804      	ldr	r0, [pc, #16]	; (20570 <isr+0x70>)
}
   2055e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20562:	f003 b94f 	b.w	23804 <z_impl_k_sem_give>
   20566:	bf00      	nop
   20568:	20003170 	.word	0x20003170
   2056c:	4000d000 	.word	0x4000d000
   20570:	20003188 	.word	0x20003188

00020574 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   20574:	4b02      	ldr	r3, [pc, #8]	; (20580 <flash_nrf_pages_layout+0xc>)
   20576:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   20578:	2301      	movs	r3, #1
   2057a:	6013      	str	r3, [r2, #0]
}
   2057c:	4770      	bx	lr
   2057e:	bf00      	nop
   20580:	200031c4 	.word	0x200031c4

00020584 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   20584:	4800      	ldr	r0, [pc, #0]	; (20588 <flash_nrf_get_parameters+0x4>)
   20586:	4770      	bx	lr
   20588:	0002b39c 	.word	0x0002b39c

0002058c <flash_nrf_read.part.0>:
static int flash_nrf_read(const struct device *dev, off_t addr,
   2058c:	b580      	push	{r7, lr}
   2058e:	af00      	add	r7, sp, #0
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20590:	b08a      	sub	sp, #40	; 0x28
   20592:	466a      	mov	r2, sp
   20594:	4b09      	ldr	r3, [pc, #36]	; (205bc <flash_nrf_read.part.0+0x30>)
   20596:	6153      	str	r3, [r2, #20]
   20598:	4b09      	ldr	r3, [pc, #36]	; (205c0 <flash_nrf_read.part.0+0x34>)
   2059a:	6211      	str	r1, [r2, #32]
   2059c:	e9c2 3006 	strd	r3, r0, [r2, #24]
   205a0:	2305      	movs	r3, #5
   205a2:	f842 3f10 	str.w	r3, [r2, #16]!
   205a6:	4807      	ldr	r0, [pc, #28]	; (205c4 <flash_nrf_read.part.0+0x38>)
   205a8:	2300      	movs	r3, #0
   205aa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   205ae:	f7f3 f9bb 	bl	13928 <z_impl_z_log_msg_static_create>
}
   205b2:	f06f 0015 	mvn.w	r0, #21
   205b6:	46bd      	mov	sp, r7
   205b8:	bd80      	pop	{r7, pc}
   205ba:	bf00      	nop
   205bc:	0002ee9c 	.word	0x0002ee9c
   205c0:	0002ef02 	.word	0x0002ef02
   205c4:	0002a8b8 	.word	0x0002a8b8

000205c8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   205c8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   205ca:	2201      	movs	r2, #1
   205cc:	4611      	mov	r1, r2
   205ce:	4807      	ldr	r0, [pc, #28]	; (205ec <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   205d0:	4c07      	ldr	r4, [pc, #28]	; (205f0 <nrf_flash_init+0x28>)
   205d2:	f009 fb2e 	bl	29c32 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   205d6:	f001 ff15 	bl	22404 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   205da:	f009 f9a4 	bl	29926 <nrfx_nvmc_flash_page_count_get>
   205de:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   205e0:	f009 f99d 	bl	2991e <nrfx_nvmc_flash_page_size_get>
   205e4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   205e6:	2000      	movs	r0, #0
   205e8:	bd10      	pop	{r4, pc}
   205ea:	bf00      	nop
   205ec:	200031cc 	.word	0x200031cc
   205f0:	200031c4 	.word	0x200031c4

000205f4 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
   205f4:	b538      	push	{r3, r4, r5, lr}
	struct flash_context *w_ctx = context;

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	uint32_t i = 1U;

	if (w_ctx->enable_time_limit) {
   205f6:	7b03      	ldrb	r3, [r0, #12]
{
   205f8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   205fa:	b10b      	cbz	r3, 20600 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   205fc:	f009 f959 	bl	298b2 <nrf_flash_sync_get_timestamp_begin>
{
   20600:	2501      	movs	r5, #1
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   20602:	68a3      	ldr	r3, [r4, #8]
   20604:	2b03      	cmp	r3, #3
   20606:	d806      	bhi.n	20616 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   20608:	4a12      	ldr	r2, [pc, #72]	; (20654 <write_op+0x60>)
   2060a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2060e:	07db      	lsls	r3, r3, #31
   20610:	d5fb      	bpl.n	2060a <write_op+0x16>
		shift_write_context(w_ctx->len, w_ctx);
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	nvmc_wait_ready();

	return FLASH_OP_DONE;
   20612:	2000      	movs	r0, #0
}
   20614:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   20616:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20618:	6860      	ldr	r0, [r4, #4]
   2061a:	6819      	ldr	r1, [r3, #0]
   2061c:	f002 fcbe 	bl	22f9c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   20620:	6863      	ldr	r3, [r4, #4]
   20622:	3304      	adds	r3, #4
   20624:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   20626:	6823      	ldr	r3, [r4, #0]
   20628:	3304      	adds	r3, #4
   2062a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   2062c:	68a3      	ldr	r3, [r4, #8]
   2062e:	3b04      	subs	r3, #4
   20630:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   20632:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20634:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   20636:	2b00      	cmp	r3, #0
   20638:	d0e3      	beq.n	20602 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   2063a:	4628      	mov	r0, r5
   2063c:	f001 ff8e 	bl	2255c <nrf_flash_sync_check_time_limit>
   20640:	2800      	cmp	r0, #0
   20642:	d0de      	beq.n	20602 <write_op+0xe>
   20644:	4a03      	ldr	r2, [pc, #12]	; (20654 <write_op+0x60>)
   20646:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2064a:	07d9      	lsls	r1, r3, #31
   2064c:	d5fb      	bpl.n	20646 <write_op+0x52>
				return FLASH_OP_ONGOING;
   2064e:	2001      	movs	r0, #1
   20650:	e7e0      	b.n	20614 <write_op+0x20>
   20652:	bf00      	nop
   20654:	4001e000 	.word	0x4001e000

00020658 <flash_nrf_erase>:
{
   20658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2065c:	b086      	sub	sp, #24
   2065e:	af00      	add	r7, sp, #0
   20660:	460e      	mov	r6, r1
   20662:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20664:	f009 f95b 	bl	2991e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   20668:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2066a:	4680      	mov	r8, r0
	if (is_regular_addr_valid(addr, size)) {
   2066c:	4630      	mov	r0, r6
   2066e:	f008 fe4e 	bl	2930e <is_regular_addr_valid>
   20672:	4603      	mov	r3, r0
   20674:	2800      	cmp	r0, #0
   20676:	d03b      	beq.n	206f0 <flash_nrf_erase+0x98>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   20678:	fbb6 f3f8 	udiv	r3, r6, r8
   2067c:	fb08 6313 	mls	r3, r8, r3, r6
   20680:	b923      	cbnz	r3, 2068c <flash_nrf_erase+0x34>
   20682:	fbb5 f4f8 	udiv	r4, r5, r8
   20686:	fb08 5414 	mls	r4, r8, r4, r5
   2068a:	b1cc      	cbz	r4, 206c0 <flash_nrf_erase+0x68>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2068c:	466c      	mov	r4, sp
   2068e:	b08a      	sub	sp, #40	; 0x28
   20690:	466a      	mov	r2, sp
   20692:	4b29      	ldr	r3, [pc, #164]	; (20738 <flash_nrf_erase+0xe0>)
   20694:	6153      	str	r3, [r2, #20]
   20696:	4b29      	ldr	r3, [pc, #164]	; (2073c <flash_nrf_erase+0xe4>)
   20698:	6215      	str	r5, [r2, #32]
   2069a:	e9c2 3606 	strd	r3, r6, [r2, #24]
   2069e:	2305      	movs	r3, #5
   206a0:	f842 3f10 	str.w	r3, [r2, #16]!
   206a4:	2300      	movs	r3, #0
   206a6:	4826      	ldr	r0, [pc, #152]	; (20740 <flash_nrf_erase+0xe8>)
   206a8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   206ac:	f7f3 f93c 	bl	13928 <z_impl_z_log_msg_static_create>
   206b0:	46a5      	mov	sp, r4
			return -EINVAL;
   206b2:	f06f 0415 	mvn.w	r4, #21
}
   206b6:	4620      	mov	r0, r4
   206b8:	3718      	adds	r7, #24
   206ba:	46bd      	mov	sp, r7
   206bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!n_pages) {
   206c0:	45a8      	cmp	r8, r5
   206c2:	d8f8      	bhi.n	206b6 <flash_nrf_erase+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   206c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   206c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   206cc:	481d      	ldr	r0, [pc, #116]	; (20744 <flash_nrf_erase+0xec>)
   206ce:	f003 f8bf 	bl	23850 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   206d2:	f009 f8ec 	bl	298ae <nrf_flash_sync_is_required>
   206d6:	f107 0308 	add.w	r3, r7, #8
   206da:	4601      	mov	r1, r0
   206dc:	b9a8      	cbnz	r0, 2070a <flash_nrf_erase+0xb2>

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   206de:	2210      	movs	r2, #16
   206e0:	4618      	mov	r0, r3
   206e2:	f006 fa8e 	bl	26c02 <memset>
   206e6:	e9c7 6503 	strd	r6, r5, [r7, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   206ea:	f008 fdec 	bl	292c6 <erase_op>
   206ee:	e01e      	b.n	2072e <flash_nrf_erase+0xd6>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   206f0:	466c      	mov	r4, sp
   206f2:	b08a      	sub	sp, #40	; 0x28
   206f4:	466a      	mov	r2, sp
   206f6:	4914      	ldr	r1, [pc, #80]	; (20748 <flash_nrf_erase+0xf0>)
   206f8:	6151      	str	r1, [r2, #20]
   206fa:	4910      	ldr	r1, [pc, #64]	; (2073c <flash_nrf_erase+0xe4>)
   206fc:	6215      	str	r5, [r2, #32]
   206fe:	e9c2 1606 	strd	r1, r6, [r2, #24]
   20702:	2105      	movs	r1, #5
   20704:	f842 1f10 	str.w	r1, [r2, #16]!
	compiler_barrier();
   20708:	e7cd      	b.n	206a6 <flash_nrf_erase+0x4e>
	struct flash_context context = {
   2070a:	2210      	movs	r2, #16
   2070c:	4621      	mov	r1, r4
   2070e:	4618      	mov	r0, r3
   20710:	f006 fa77 	bl	26c02 <memset>
   20714:	2201      	movs	r2, #1
   20716:	753a      	strb	r2, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   20718:	4a0c      	ldr	r2, [pc, #48]	; (2074c <flash_nrf_erase+0xf4>)
	struct flash_context context = {
   2071a:	e9c7 6503 	strd	r6, r5, [r7, #12]
	struct flash_op_desc flash_op_desc = {
   2071e:	e9c7 2000 	strd	r2, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   20722:	480b      	ldr	r0, [pc, #44]	; (20750 <flash_nrf_erase+0xf8>)
   20724:	f001 fe76 	bl	22414 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   20728:	4638      	mov	r0, r7
   2072a:	f001 fe79 	bl	22420 <nrf_flash_sync_exe>
	return	erase_op(&context);
   2072e:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   20730:	4804      	ldr	r0, [pc, #16]	; (20744 <flash_nrf_erase+0xec>)
   20732:	f003 f867 	bl	23804 <z_impl_k_sem_give>
}
   20736:	e7be      	b.n	206b6 <flash_nrf_erase+0x5e>
   20738:	0002eebd 	.word	0x0002eebd
   2073c:	0002ef21 	.word	0x0002ef21
   20740:	0002a8b8 	.word	0x0002a8b8
   20744:	200031cc 	.word	0x200031cc
   20748:	0002ee9c 	.word	0x0002ee9c
   2074c:	000292c7 	.word	0x000292c7
   20750:	00015e64 	.word	0x00015e64

00020754 <flash_nrf_write>:
{
   20754:	b5f0      	push	{r4, r5, r6, r7, lr}
   20756:	460d      	mov	r5, r1
   20758:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   2075a:	4619      	mov	r1, r3
{
   2075c:	af00      	add	r7, sp, #0
	if (is_regular_addr_valid(addr, len)) {
   2075e:	4628      	mov	r0, r5
{
   20760:	461c      	mov	r4, r3
   20762:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   20764:	f008 fdd3 	bl	2930e <is_regular_addr_valid>
   20768:	4603      	mov	r3, r0
   2076a:	b9b8      	cbnz	r0, 2079c <flash_nrf_write+0x48>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2076c:	466e      	mov	r6, sp
   2076e:	b08a      	sub	sp, #40	; 0x28
   20770:	466a      	mov	r2, sp
   20772:	4927      	ldr	r1, [pc, #156]	; (20810 <flash_nrf_write+0xbc>)
   20774:	6151      	str	r1, [r2, #20]
   20776:	4927      	ldr	r1, [pc, #156]	; (20814 <flash_nrf_write+0xc0>)
   20778:	6214      	str	r4, [r2, #32]
   2077a:	e9c2 1506 	strd	r1, r5, [r2, #24]
   2077e:	2105      	movs	r1, #5
   20780:	f842 1f10 	str.w	r1, [r2, #16]!
	z_impl_z_log_msg_static_create(source, desc, package, data);
   20784:	4824      	ldr	r0, [pc, #144]	; (20818 <flash_nrf_write+0xc4>)
   20786:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   2078a:	f7f3 f8cd 	bl	13928 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2078e:	f06f 0415 	mvn.w	r4, #21
   20792:	46b5      	mov	sp, r6
}
   20794:	4620      	mov	r0, r4
   20796:	371c      	adds	r7, #28
   20798:	46bd      	mov	sp, r7
   2079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2079c:	ea45 0304 	orr.w	r3, r5, r4
   207a0:	079b      	lsls	r3, r3, #30
   207a2:	d00d      	beq.n	207c0 <flash_nrf_write+0x6c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   207a4:	466e      	mov	r6, sp
   207a6:	b08a      	sub	sp, #40	; 0x28
   207a8:	466a      	mov	r2, sp
   207aa:	4b1c      	ldr	r3, [pc, #112]	; (2081c <flash_nrf_write+0xc8>)
   207ac:	6153      	str	r3, [r2, #20]
   207ae:	4b19      	ldr	r3, [pc, #100]	; (20814 <flash_nrf_write+0xc0>)
   207b0:	6214      	str	r4, [r2, #32]
   207b2:	e9c2 3506 	strd	r3, r5, [r2, #24]
   207b6:	2305      	movs	r3, #5
   207b8:	f842 3f10 	str.w	r3, [r2, #16]!
   207bc:	2300      	movs	r3, #0
   207be:	e7e1      	b.n	20784 <flash_nrf_write+0x30>
	if (!len) {
   207c0:	2c00      	cmp	r4, #0
   207c2:	d0e7      	beq.n	20794 <flash_nrf_write+0x40>
	return z_impl_k_sem_take(sem, timeout);
   207c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   207cc:	4814      	ldr	r0, [pc, #80]	; (20820 <flash_nrf_write+0xcc>)
   207ce:	f003 f83f 	bl	23850 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   207d2:	f009 f86c 	bl	298ae <nrf_flash_sync_is_required>
   207d6:	4603      	mov	r3, r0
	struct flash_context context = {
   207d8:	e9c7 6502 	strd	r6, r5, [r7, #8]
   207dc:	f107 0008 	add.w	r0, r7, #8
   207e0:	613c      	str	r4, [r7, #16]
	if (nrf_flash_sync_is_required()) {
   207e2:	b183      	cbz	r3, 20806 <flash_nrf_write+0xb2>
	struct flash_context context = {
   207e4:	2301      	movs	r3, #1
   207e6:	753b      	strb	r3, [r7, #20]
	struct flash_op_desc flash_op_desc = {
   207e8:	4b0e      	ldr	r3, [pc, #56]	; (20824 <flash_nrf_write+0xd0>)
   207ea:	e9c7 3000 	strd	r3, r0, [r7]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   207ee:	f641 504c 	movw	r0, #7500	; 0x1d4c
   207f2:	f001 fe0f 	bl	22414 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   207f6:	4638      	mov	r0, r7
   207f8:	f001 fe12 	bl	22420 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   207fc:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   207fe:	4808      	ldr	r0, [pc, #32]	; (20820 <flash_nrf_write+0xcc>)
   20800:	f003 f800 	bl	23804 <z_impl_k_sem_give>
}
   20804:	e7c6      	b.n	20794 <flash_nrf_write+0x40>
	struct flash_context context = {
   20806:	753b      	strb	r3, [r7, #20]
	return write_op(&context);
   20808:	f7ff fef4 	bl	205f4 <write_op>
   2080c:	e7f6      	b.n	207fc <flash_nrf_write+0xa8>
   2080e:	bf00      	nop
   20810:	0002ee9c 	.word	0x0002ee9c
   20814:	0002ef11 	.word	0x0002ef11
   20818:	0002a8b8 	.word	0x0002a8b8
   2081c:	0002eee0 	.word	0x0002eee0
   20820:	200031cc 	.word	0x200031cc
   20824:	000205f5 	.word	0x000205f5

00020828 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20828:	b530      	push	{r4, r5, lr}
	return port->config;
   2082a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2082c:	7b05      	ldrb	r5, [r0, #12]
   2082e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   20832:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   20836:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20838:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2083c:	d105      	bne.n	2084a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   2083e:	4620      	mov	r0, r4
   20840:	f002 fa8c 	bl	22d5c <nrfx_gpiote_trigger_disable>

		return 0;
   20844:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   20846:	b005      	add	sp, #20
   20848:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   2084a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   2084c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20850:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20854:	d114      	bne.n	20880 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2085a:	bf0c      	ite	eq
   2085c:	2304      	moveq	r3, #4
   2085e:	2305      	movne	r3, #5
   20860:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20864:	2300      	movs	r3, #0
   20866:	4619      	mov	r1, r3
   20868:	aa02      	add	r2, sp, #8
   2086a:	4620      	mov	r0, r4
   2086c:	f002 f8ac 	bl	229c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20870:	4b1d      	ldr	r3, [pc, #116]	; (208e8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   20872:	4298      	cmp	r0, r3
   20874:	d135      	bne.n	208e2 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   20876:	2101      	movs	r1, #1
   20878:	4620      	mov	r0, r4
   2087a:	f002 fa2b 	bl	22cd4 <nrfx_gpiote_trigger_enable>
	return 0;
   2087e:	e7e1      	b.n	20844 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20880:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   20884:	d022      	beq.n	208cc <gpio_nrfx_pin_interrupt_configure+0xa4>
   20886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2088a:	bf14      	ite	ne
   2088c:	2301      	movne	r3, #1
   2088e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   20890:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20894:	6883      	ldr	r3, [r0, #8]
   20896:	40cb      	lsrs	r3, r1
   20898:	07d9      	lsls	r1, r3, #31
   2089a:	d4e3      	bmi.n	20864 <gpio_nrfx_pin_interrupt_configure+0x3c>
   2089c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   208a0:	d1e0      	bne.n	20864 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   208a2:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   208a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   208aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   208ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   208b2:	07db      	lsls	r3, r3, #31
   208b4:	d4d6      	bmi.n	20864 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   208b6:	f10d 0507 	add.w	r5, sp, #7
   208ba:	4629      	mov	r1, r5
   208bc:	4620      	mov	r0, r4
   208be:	f002 f9b5 	bl	22c2c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   208c2:	4b0a      	ldr	r3, [pc, #40]	; (208ec <gpio_nrfx_pin_interrupt_configure+0xc4>)
   208c4:	4298      	cmp	r0, r3
   208c6:	d003      	beq.n	208d0 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
   208c8:	9503      	str	r5, [sp, #12]
   208ca:	e7cb      	b.n	20864 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   208cc:	2303      	movs	r3, #3
   208ce:	e7df      	b.n	20890 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   208d0:	4628      	mov	r0, r5
   208d2:	f002 f9f9 	bl	22cc8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   208d6:	4b04      	ldr	r3, [pc, #16]	; (208e8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   208d8:	4298      	cmp	r0, r3
   208da:	d0f5      	beq.n	208c8 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
   208dc:	f06f 000b 	mvn.w	r0, #11
   208e0:	e7b1      	b.n	20846 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   208e2:	f06f 0015 	mvn.w	r0, #21
   208e6:	e7ae      	b.n	20846 <gpio_nrfx_pin_interrupt_configure+0x1e>
   208e8:	0bad0000 	.word	0x0bad0000
   208ec:	0bad0004 	.word	0x0bad0004

000208f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   208f0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   208f2:	f002 f9d9 	bl	22ca8 <nrfx_gpiote_is_init>
   208f6:	4604      	mov	r4, r0
   208f8:	b968      	cbnz	r0, 20916 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   208fa:	f002 f9ad 	bl	22c58 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   208fe:	4b08      	ldr	r3, [pc, #32]	; (20920 <gpio_nrfx_init+0x30>)
   20900:	4298      	cmp	r0, r3
   20902:	d10a      	bne.n	2091a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20904:	4807      	ldr	r0, [pc, #28]	; (20924 <gpio_nrfx_init+0x34>)
   20906:	4621      	mov	r1, r4
   20908:	f002 f98a 	bl	22c20 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2090c:	4622      	mov	r2, r4
   2090e:	2105      	movs	r1, #5
   20910:	2006      	movs	r0, #6
   20912:	f7f4 f93d 	bl	14b90 <z_arm_irq_priority_set>
		return 0;
   20916:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20918:	bd10      	pop	{r4, pc}
		return -EIO;
   2091a:	f06f 0004 	mvn.w	r0, #4
   2091e:	e7fb      	b.n	20918 <gpio_nrfx_init+0x28>
   20920:	0bad0000 	.word	0x0bad0000
   20924:	00020929 	.word	0x00020929

00020928 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20928:	0943      	lsrs	r3, r0, #5
{
   2092a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2092c:	d107      	bne.n	2093e <nrfx_gpio_handler+0x16>
	return list->head;
   2092e:	4b0b      	ldr	r3, [pc, #44]	; (2095c <nrfx_gpio_handler+0x34>)
   20930:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20932:	b121      	cbz	r1, 2093e <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   20934:	2501      	movs	r5, #1
	return node->next;
   20936:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   20938:	4e09      	ldr	r6, [pc, #36]	; (20960 <nrfx_gpio_handler+0x38>)
   2093a:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2093c:	b901      	cbnz	r1, 20940 <nrfx_gpio_handler+0x18>
}
   2093e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   20940:	688a      	ldr	r2, [r1, #8]
   20942:	402a      	ands	r2, r5
   20944:	d002      	beq.n	2094c <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
   20946:	684b      	ldr	r3, [r1, #4]
   20948:	4630      	mov	r0, r6
   2094a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2094c:	b11c      	cbz	r4, 20956 <nrfx_gpio_handler+0x2e>
   2094e:	6823      	ldr	r3, [r4, #0]
   20950:	4621      	mov	r1, r4
   20952:	461c      	mov	r4, r3
   20954:	e7f2      	b.n	2093c <nrfx_gpio_handler+0x14>
   20956:	4623      	mov	r3, r4
   20958:	e7fa      	b.n	20950 <nrfx_gpio_handler+0x28>
   2095a:	bf00      	nop
   2095c:	200031e4 	.word	0x200031e4
   20960:	0002a538 	.word	0x0002a538

00020964 <gpio_nrfx_pin_configure>:
{
   20964:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   20968:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2096a:	7b3b      	ldrb	r3, [r7, #12]
   2096c:	f001 051f 	and.w	r5, r1, #31
   20970:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   20974:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20976:	4628      	mov	r0, r5
   20978:	f10d 0103 	add.w	r1, sp, #3
{
   2097c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2097e:	f002 f955 	bl	22c2c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20982:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20986:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   20988:	d10b      	bne.n	209a2 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2098a:	4628      	mov	r0, r5
   2098c:	f002 fa0e 	bl	22dac <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   20990:	4b3d      	ldr	r3, [pc, #244]	; (20a88 <gpio_nrfx_pin_configure+0x124>)
   20992:	4598      	cmp	r8, r3
   20994:	d103      	bne.n	2099e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   20996:	f89d 0003 	ldrb.w	r0, [sp, #3]
   2099a:	f002 f98f 	bl	22cbc <nrfx_gpiote_channel_free>
		return 0;
   2099e:	2000      	movs	r0, #0
   209a0:	e00c      	b.n	209bc <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   209a2:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   209a4:	4619      	mov	r1, r3
   209a6:	aa02      	add	r2, sp, #8
   209a8:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   209aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   209ae:	f002 f80b 	bl	229c8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   209b2:	4b35      	ldr	r3, [pc, #212]	; (20a88 <gpio_nrfx_pin_configure+0x124>)
   209b4:	4298      	cmp	r0, r3
   209b6:	d004      	beq.n	209c2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   209b8:	f06f 0015 	mvn.w	r0, #21
}
   209bc:	b004      	add	sp, #16
   209be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   209c2:	4580      	cmp	r8, r0
   209c4:	d103      	bne.n	209ce <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   209c6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   209ca:	f002 f977 	bl	22cbc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   209ce:	03a3      	lsls	r3, r4, #14
   209d0:	d54b      	bpl.n	20a6a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   209d2:	f240 3306 	movw	r3, #774	; 0x306
   209d6:	4023      	ands	r3, r4
   209d8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   209dc:	d019      	beq.n	20a12 <gpio_nrfx_pin_configure+0xae>
   209de:	d80c      	bhi.n	209fa <gpio_nrfx_pin_configure+0x96>
   209e0:	2b06      	cmp	r3, #6
   209e2:	d017      	beq.n	20a14 <gpio_nrfx_pin_configure+0xb0>
   209e4:	d804      	bhi.n	209f0 <gpio_nrfx_pin_configure+0x8c>
   209e6:	b1ab      	cbz	r3, 20a14 <gpio_nrfx_pin_configure+0xb0>
   209e8:	2b02      	cmp	r3, #2
   209ea:	d1e5      	bne.n	209b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   209ec:	2304      	movs	r3, #4
   209ee:	e011      	b.n	20a14 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   209f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   209f4:	d1e0      	bne.n	209b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   209f6:	2301      	movs	r3, #1
   209f8:	e00c      	b.n	20a14 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   209fa:	f240 2202 	movw	r2, #514	; 0x202
   209fe:	4293      	cmp	r3, r2
   20a00:	d027      	beq.n	20a52 <gpio_nrfx_pin_configure+0xee>
   20a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   20a06:	d026      	beq.n	20a56 <gpio_nrfx_pin_configure+0xf2>
   20a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   20a0c:	d1d4      	bne.n	209b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   20a0e:	2302      	movs	r3, #2
   20a10:	e000      	b.n	20a14 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   20a12:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   20a14:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   20a18:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   20a1c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   20a20:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20a22:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   20a26:	bf54      	ite	pl
   20a28:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   20a2c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20a2e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   20a30:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20a34:	d511      	bpl.n	20a5a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20a36:	687a      	ldr	r2, [r7, #4]
   20a38:	2301      	movs	r3, #1
   20a3a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   20a3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20a40:	2200      	movs	r2, #0
   20a42:	a901      	add	r1, sp, #4
   20a44:	4628      	mov	r0, r5
   20a46:	f002 f86d 	bl	22b24 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20a4a:	4b0f      	ldr	r3, [pc, #60]	; (20a88 <gpio_nrfx_pin_configure+0x124>)
   20a4c:	4298      	cmp	r0, r3
   20a4e:	d0a6      	beq.n	2099e <gpio_nrfx_pin_configure+0x3a>
   20a50:	e7b2      	b.n	209b8 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   20a52:	2305      	movs	r3, #5
   20a54:	e7de      	b.n	20a14 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   20a56:	2303      	movs	r3, #3
   20a58:	e7dc      	b.n	20a14 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20a5a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20a5c:	bf41      	itttt	mi
   20a5e:	2301      	movmi	r3, #1
   20a60:	687a      	ldrmi	r2, [r7, #4]
   20a62:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   20a64:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   20a68:	e7ea      	b.n	20a40 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   20a6a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a6c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   20a70:	bf54      	ite	pl
   20a72:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   20a76:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a78:	461a      	mov	r2, r3
   20a7a:	a901      	add	r1, sp, #4
   20a7c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   20a7e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20a82:	f001 ffa1 	bl	229c8 <nrfx_gpiote_input_configure>
   20a86:	e7e0      	b.n	20a4a <gpio_nrfx_pin_configure+0xe6>
   20a88:	0bad0000 	.word	0x0bad0000

00020a8c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20a8c:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   20a8e:	794b      	ldrb	r3, [r1, #5]
   20a90:	2b01      	cmp	r3, #1
   20a92:	d120      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20a94:	798b      	ldrb	r3, [r1, #6]
   20a96:	2b03      	cmp	r3, #3
   20a98:	d11d      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20a9a:	79cd      	ldrb	r5, [r1, #7]
   20a9c:	b10d      	cbz	r5, 20aa2 <uarte_nrfx_configure+0x16>
   20a9e:	2d01      	cmp	r5, #1
   20aa0:	d119      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20aa2:	790a      	ldrb	r2, [r1, #4]
   20aa4:	b112      	cbz	r2, 20aac <uarte_nrfx_configure+0x20>
   20aa6:	2a02      	cmp	r2, #2
   20aa8:	d115      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
   20aaa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20aac:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20aae:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   20ab0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   20ab4:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   20ab6:	d064      	beq.n	20b82 <uarte_nrfx_configure+0xf6>
   20ab8:	d82b      	bhi.n	20b12 <uarte_nrfx_configure+0x86>
   20aba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20abe:	d063      	beq.n	20b88 <uarte_nrfx_configure+0xfc>
   20ac0:	d814      	bhi.n	20aec <uarte_nrfx_configure+0x60>
   20ac2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20ac6:	d061      	beq.n	20b8c <uarte_nrfx_configure+0x100>
   20ac8:	d808      	bhi.n	20adc <uarte_nrfx_configure+0x50>
   20aca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20ace:	d060      	beq.n	20b92 <uarte_nrfx_configure+0x106>
   20ad0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20ad4:	d060      	beq.n	20b98 <uarte_nrfx_configure+0x10c>
   20ad6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20ada:	e051      	b.n	20b80 <uarte_nrfx_configure+0xf4>
   20adc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20ae0:	d05d      	beq.n	20b9e <uarte_nrfx_configure+0x112>
   20ae2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20ae6:	d1f6      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20ae8:	4b37      	ldr	r3, [pc, #220]	; (20bc8 <uarte_nrfx_configure+0x13c>)
   20aea:	e03c      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20aec:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20af0:	d058      	beq.n	20ba4 <uarte_nrfx_configure+0x118>
   20af2:	d807      	bhi.n	20b04 <uarte_nrfx_configure+0x78>
   20af4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20af8:	d056      	beq.n	20ba8 <uarte_nrfx_configure+0x11c>
   20afa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20afe:	d1ea      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20b00:	4b32      	ldr	r3, [pc, #200]	; (20bcc <uarte_nrfx_configure+0x140>)
   20b02:	e030      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b04:	f647 2412 	movw	r4, #31250	; 0x7a12
   20b08:	42a3      	cmp	r3, r4
   20b0a:	d1e4      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20b0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20b10:	e029      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b12:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20b16:	d049      	beq.n	20bac <uarte_nrfx_configure+0x120>
   20b18:	d813      	bhi.n	20b42 <uarte_nrfx_configure+0xb6>
   20b1a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20b1e:	d048      	beq.n	20bb2 <uarte_nrfx_configure+0x126>
   20b20:	d809      	bhi.n	20b36 <uarte_nrfx_configure+0xaa>
   20b22:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   20b26:	42a3      	cmp	r3, r4
   20b28:	d045      	beq.n	20bb6 <uarte_nrfx_configure+0x12a>
   20b2a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20b2e:	d1d2      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20b30:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20b34:	e017      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b36:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20b3a:	d1cc      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20b3c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20b40:	e011      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b42:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20b46:	d039      	beq.n	20bbc <uarte_nrfx_configure+0x130>
   20b48:	d808      	bhi.n	20b5c <uarte_nrfx_configure+0xd0>
   20b4a:	4c21      	ldr	r4, [pc, #132]	; (20bd0 <uarte_nrfx_configure+0x144>)
   20b4c:	42a3      	cmp	r3, r4
   20b4e:	d038      	beq.n	20bc2 <uarte_nrfx_configure+0x136>
   20b50:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20b54:	d1bf      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20b56:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20b5a:	e004      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b5c:	4c1d      	ldr	r4, [pc, #116]	; (20bd4 <uarte_nrfx_configure+0x148>)
   20b5e:	42a3      	cmp	r3, r4
   20b60:	d1b9      	bne.n	20ad6 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   20b66:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20b68:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   20b6c:	6843      	ldr	r3, [r0, #4]
   20b6e:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   20b70:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20b72:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   20b76:	c903      	ldmia	r1, {r0, r1}
   20b78:	1d23      	adds	r3, r4, #4
   20b7a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   20b7e:	2000      	movs	r0, #0
}
   20b80:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20b82:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20b86:	e7ee      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20b88:	4b13      	ldr	r3, [pc, #76]	; (20bd8 <uarte_nrfx_configure+0x14c>)
   20b8a:	e7ec      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20b8c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20b90:	e7e9      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   20b92:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20b96:	e7e6      	b.n	20b66 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   20b98:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20b9c:	e7e3      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20b9e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20ba2:	e7e0      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20ba4:	4b0d      	ldr	r3, [pc, #52]	; (20bdc <uarte_nrfx_configure+0x150>)
   20ba6:	e7de      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20ba8:	4b0d      	ldr	r3, [pc, #52]	; (20be0 <uarte_nrfx_configure+0x154>)
   20baa:	e7dc      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20bac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20bb0:	e7d9      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20bb2:	4b0c      	ldr	r3, [pc, #48]	; (20be4 <uarte_nrfx_configure+0x158>)
   20bb4:	e7d7      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20bb6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20bba:	e7d4      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20bbc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20bc0:	e7d1      	b.n	20b66 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20bc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20bc6:	e7ce      	b.n	20b66 <uarte_nrfx_configure+0xda>
   20bc8:	0013b000 	.word	0x0013b000
   20bcc:	004ea000 	.word	0x004ea000
   20bd0:	0003d090 	.word	0x0003d090
   20bd4:	000f4240 	.word	0x000f4240
   20bd8:	00275000 	.word	0x00275000
   20bdc:	0075c000 	.word	0x0075c000
   20be0:	003af000 	.word	0x003af000
   20be4:	013a9000 	.word	0x013a9000

00020be8 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   20be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bec:	b082      	sub	sp, #8
   20bee:	4681      	mov	r9, r0
   20bf0:	2200      	movs	r2, #0
   20bf2:	2101      	movs	r1, #1
   20bf4:	2002      	movs	r0, #2
   20bf6:	af00      	add	r7, sp, #0
   20bf8:	f7f3 ffca 	bl	14b90 <z_arm_irq_priority_set>
   20bfc:	2002      	movs	r0, #2
   20bfe:	f7f3 ff97 	bl	14b30 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   20c02:	f8d9 8004 	ldr.w	r8, [r9, #4]
	struct uarte_nrfx_data *data = dev->data;
   20c06:	f8d9 6010 	ldr.w	r6, [r9, #16]
	return config->uarte_regs;
   20c0a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20c0e:	2100      	movs	r1, #0
   20c10:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   20c14:	f8c6 9000 	str.w	r9, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   20c18:	f8d8 a00c 	ldr.w	sl, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   20c1c:	1d3a      	adds	r2, r7, #4
   20c1e:	4650      	mov	r0, sl
   20c20:	f008 fc53 	bl	294ca <pinctrl_lookup_state>
	if (ret < 0) {
   20c24:	1e05      	subs	r5, r0, #0
   20c26:	db2c      	blt.n	20c82 <uarte_0_init+0x9a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   20c28:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   20c2a:	f8da 2000 	ldr.w	r2, [sl]
   20c2e:	7919      	ldrb	r1, [r3, #4]
   20c30:	6818      	ldr	r0, [r3, #0]
   20c32:	f008 fc5d 	bl	294f0 <pinctrl_configure_pins>
	if (err < 0) {
   20c36:	1e05      	subs	r5, r0, #0
   20c38:	db23      	blt.n	20c82 <uarte_0_init+0x9a>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   20c3a:	1d31      	adds	r1, r6, #4
   20c3c:	4648      	mov	r0, r9
   20c3e:	f7ff ff25 	bl	20a8c <uarte_nrfx_configure>
	if (err) {
   20c42:	4605      	mov	r5, r0
   20c44:	b9e8      	cbnz	r0, 20c82 <uarte_0_init+0x9a>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20c46:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20c4a:	0799      	lsls	r1, r3, #30
   20c4c:	d532      	bpl.n	20cb4 <uarte_0_init+0xcc>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   20c4e:	f106 0018 	add.w	r0, r6, #24
   20c52:	f002 f9b1 	bl	22fb8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   20c56:	4b2d      	ldr	r3, [pc, #180]	; (20d0c <uarte_0_init+0x124>)
   20c58:	4298      	cmp	r0, r3
   20c5a:	d017      	beq.n	20c8c <uarte_0_init+0xa4>
		LOG_ERR("Failed to allocate PPI Channel");
   20c5c:	466c      	mov	r4, sp
   20c5e:	b088      	sub	sp, #32
   20c60:	466a      	mov	r2, sp
   20c62:	4b2b      	ldr	r3, [pc, #172]	; (20d10 <uarte_0_init+0x128>)
   20c64:	6153      	str	r3, [r2, #20]
   20c66:	4b2b      	ldr	r3, [pc, #172]	; (20d14 <uarte_0_init+0x12c>)
   20c68:	6193      	str	r3, [r2, #24]
   20c6a:	2303      	movs	r3, #3
   20c6c:	f842 3f10 	str.w	r3, [r2, #16]!
   20c70:	4829      	ldr	r0, [pc, #164]	; (20d18 <uarte_0_init+0x130>)
   20c72:	462b      	mov	r3, r5
   20c74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   20c78:	f7f2 fe56 	bl	13928 <z_impl_z_log_msg_static_create>
		return -EIO;
   20c7c:	f06f 0504 	mvn.w	r5, #4
   20c80:	46a5      	mov	sp, r4
UART_NRF_UARTE_DEVICE(0);
   20c82:	4628      	mov	r0, r5
   20c84:	3708      	adds	r7, #8
   20c86:	46bd      	mov	sp, r7
   20c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20c8c:	7e33      	ldrb	r3, [r6, #24]
   20c8e:	00db      	lsls	r3, r3, #3
   20c90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20c94:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   20c98:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20c9c:	f504 7190 	add.w	r1, r4, #288	; 0x120
   20ca0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20ca4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20ca8:	7e32      	ldrb	r2, [r6, #24]
   20caa:	2301      	movs	r3, #1
   20cac:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   20cae:	4a1b      	ldr	r2, [pc, #108]	; (20d1c <uarte_0_init+0x134>)
   20cb0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20cb4:	2308      	movs	r3, #8
   20cb6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   20cba:	f898 3008 	ldrb.w	r3, [r8, #8]
   20cbe:	b953      	cbnz	r3, 20cd6 <uarte_0_init+0xee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20cc0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   20cc4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20cc8:	6973      	ldr	r3, [r6, #20]
   20cca:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20cce:	2301      	movs	r3, #1
   20cd0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20cd4:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   20cd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20cda:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20cdc:	bf5c      	itt	pl
   20cde:	f44f 7380 	movpl.w	r3, #256	; 0x100
   20ce2:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20ce6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20cea:	06db      	lsls	r3, r3, #27
   20cec:	bf44      	itt	mi
   20cee:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   20cf2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20cf6:	6933      	ldr	r3, [r6, #16]
   20cf8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20cfc:	2300      	movs	r3, #0
   20cfe:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20d02:	2301      	movs	r3, #1
   20d04:	60a3      	str	r3, [r4, #8]
   20d06:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   20d08:	e7bb      	b.n	20c82 <uarte_0_init+0x9a>
   20d0a:	bf00      	nop
   20d0c:	0bad0000 	.word	0x0bad0000
   20d10:	0002ef63 	.word	0x0002ef63
   20d14:	0002ef86 	.word	0x0002ef86
   20d18:	0002a940 	.word	0x0002a940
   20d1c:	4001f000 	.word	0x4001f000

00020d20 <uarte_nrfx_poll_out>:
{
   20d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d22:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   20d24:	6907      	ldr	r7, [r0, #16]
{
   20d26:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20d28:	f008 fec9 	bl	29abe <k_is_in_isr>
   20d2c:	b9b0      	cbnz	r0, 20d5c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   20d2e:	4b2e      	ldr	r3, [pc, #184]	; (20de8 <uarte_nrfx_poll_out+0xc8>)
   20d30:	781b      	ldrb	r3, [r3, #0]
   20d32:	b19b      	cbz	r3, 20d5c <uarte_nrfx_poll_out+0x3c>
{
   20d34:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   20d36:	6860      	ldr	r0, [r4, #4]
   20d38:	f008 fc84 	bl	29644 <is_tx_ready.isra.0>
   20d3c:	bb00      	cbnz	r0, 20d80 <uarte_nrfx_poll_out+0x60>
   20d3e:	2001      	movs	r0, #1
   20d40:	f008 fdd7 	bl	298f2 <nrfx_busy_wait>
   20d44:	3e01      	subs	r6, #1
   20d46:	d1f6      	bne.n	20d36 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   20d48:	2100      	movs	r1, #0
   20d4a:	2021      	movs	r0, #33	; 0x21
   20d4c:	f003 fa5c 	bl	24208 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20d50:	e7f0      	b.n	20d34 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   20d52:	f386 8811 	msr	BASEPRI, r6
   20d56:	f3bf 8f6f 	isb	sy
}
   20d5a:	e7f5      	b.n	20d48 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   20d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d60:	f3ef 8611 	mrs	r6, BASEPRI
   20d64:	f383 8812 	msr	BASEPRI_MAX, r3
   20d68:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20d6c:	6860      	ldr	r0, [r4, #4]
   20d6e:	4631      	mov	r1, r6
   20d70:	f008 fc68 	bl	29644 <is_tx_ready.isra.0>
   20d74:	b990      	cbnz	r0, 20d9c <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   20d76:	f386 8811 	msr	BASEPRI, r6
   20d7a:	f3bf 8f6f 	isb	sy
}
   20d7e:	e7ed      	b.n	20d5c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   20d80:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d84:	f3ef 8611 	mrs	r6, BASEPRI
   20d88:	f383 8812 	msr	BASEPRI_MAX, r3
   20d8c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20d90:	6860      	ldr	r0, [r4, #4]
   20d92:	4631      	mov	r1, r6
   20d94:	f008 fc56 	bl	29644 <is_tx_ready.isra.0>
   20d98:	2800      	cmp	r0, #0
   20d9a:	d0da      	beq.n	20d52 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   20d9c:	693b      	ldr	r3, [r7, #16]
   20d9e:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   20da0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20da2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   20da4:	6813      	ldr	r3, [r2, #0]
   20da6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20daa:	2001      	movs	r0, #1
   20dac:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20db0:	2000      	movs	r0, #0
   20db2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   20db6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   20dba:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20dbe:	6852      	ldr	r2, [r2, #4]
   20dc0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   20dc4:	06d2      	lsls	r2, r2, #27
   20dc6:	d508      	bpl.n	20dda <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   20dc8:	6862      	ldr	r2, [r4, #4]
   20dca:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20dcc:	2008      	movs	r0, #8
   20dce:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   20dd2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   20dd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20dda:	2201      	movs	r2, #1
   20ddc:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   20dde:	f381 8811 	msr	BASEPRI, r1
   20de2:	f3bf 8f6f 	isb	sy
}
   20de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20de8:	200039be 	.word	0x200039be

00020dec <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   20dec:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   20dee:	2301      	movs	r3, #1
   20df0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20df2:	4a0e      	ldr	r2, [pc, #56]	; (20e2c <compare_int_lock+0x40>)
   20df4:	f3bf 8f5b 	dmb	ish
   20df8:	43dc      	mvns	r4, r3
   20dfa:	e852 1f00 	ldrex	r1, [r2]
   20dfe:	ea01 0504 	and.w	r5, r1, r4
   20e02:	e842 5600 	strex	r6, r5, [r2]
   20e06:	2e00      	cmp	r6, #0
   20e08:	d1f7      	bne.n	20dfa <compare_int_lock+0xe>
   20e0a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20e12:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   20e14:	4806      	ldr	r0, [pc, #24]	; (20e30 <compare_int_lock+0x44>)
   20e16:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   20e1a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20e1e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   20e22:	420b      	tst	r3, r1
}
   20e24:	bf14      	ite	ne
   20e26:	2001      	movne	r0, #1
   20e28:	2000      	moveq	r0, #0
   20e2a:	bd70      	pop	{r4, r5, r6, pc}
   20e2c:	200031f4 	.word	0x200031f4
   20e30:	40011000 	.word	0x40011000

00020e34 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   20e34:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   20e36:	490e      	ldr	r1, [pc, #56]	; (20e70 <sys_clock_timeout_handler+0x3c>)
   20e38:	e9d1 3400 	ldrd	r3, r4, [r1]
   20e3c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   20e3e:	18c3      	adds	r3, r0, r3
   20e40:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   20e44:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   20e48:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   20e4c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   20e50:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   20e54:	d209      	bcs.n	20e6a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   20e56:	4b07      	ldr	r3, [pc, #28]	; (20e74 <sys_clock_timeout_handler+0x40>)
   20e58:	681b      	ldr	r3, [r3, #0]
   20e5a:	0a1a      	lsrs	r2, r3, #8
   20e5c:	061b      	lsls	r3, r3, #24
   20e5e:	199c      	adds	r4, r3, r6
   20e60:	4b05      	ldr	r3, [pc, #20]	; (20e78 <sys_clock_timeout_handler+0x44>)
   20e62:	f142 0500 	adc.w	r5, r2, #0
   20e66:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   20e6a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   20e6c:	f003 bb34 	b.w	244d8 <sys_clock_announce>
   20e70:	20002360 	.word	0x20002360
   20e74:	200031f8 	.word	0x200031f8
   20e78:	20002368 	.word	0x20002368

00020e7c <compare_int_unlock>:
	if (key) {
   20e7c:	b311      	cbz	r1, 20ec4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20e7e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   20e82:	2301      	movs	r3, #1
   20e84:	4a10      	ldr	r2, [pc, #64]	; (20ec8 <compare_int_unlock+0x4c>)
   20e86:	4083      	lsls	r3, r0
   20e88:	e852 cf00 	ldrex	ip, [r2]
   20e8c:	ea4c 0c03 	orr.w	ip, ip, r3
   20e90:	e842 c100 	strex	r1, ip, [r2]
   20e94:	2900      	cmp	r1, #0
   20e96:	d1f7      	bne.n	20e88 <compare_int_unlock+0xc>
   20e98:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   20e9c:	4a0b      	ldr	r2, [pc, #44]	; (20ecc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20ea2:	4083      	lsls	r3, r0
   20ea4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20ea8:	4b09      	ldr	r3, [pc, #36]	; (20ed0 <compare_int_unlock+0x54>)
   20eaa:	f3bf 8f5b 	dmb	ish
   20eae:	681b      	ldr	r3, [r3, #0]
   20eb0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   20eb4:	40c3      	lsrs	r3, r0
   20eb6:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20eb8:	bf42      	ittt	mi
   20eba:	4b06      	ldrmi	r3, [pc, #24]	; (20ed4 <compare_int_unlock+0x58>)
   20ebc:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   20ec0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   20ec4:	4770      	bx	lr
   20ec6:	bf00      	nop
   20ec8:	200031f4 	.word	0x200031f4
   20ecc:	40011000 	.word	0x40011000
   20ed0:	200031f0 	.word	0x200031f0
   20ed4:	e000e100 	.word	0xe000e100

00020ed8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   20ed8:	4b0d      	ldr	r3, [pc, #52]	; (20f10 <z_nrf_rtc_timer_read+0x38>)
   20eda:	6818      	ldr	r0, [r3, #0]
   20edc:	0a01      	lsrs	r1, r0, #8
   20ede:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   20ee0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   20ee4:	4b0b      	ldr	r3, [pc, #44]	; (20f14 <z_nrf_rtc_timer_read+0x3c>)
   20ee6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   20eea:	1818      	adds	r0, r3, r0
   20eec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   20ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20ef4:	d20a      	bcs.n	20f0c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   20ef6:	4b08      	ldr	r3, [pc, #32]	; (20f18 <z_nrf_rtc_timer_read+0x40>)
   20ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
   20efc:	4290      	cmp	r0, r2
   20efe:	eb71 0303 	sbcs.w	r3, r1, r3
   20f02:	d203      	bcs.n	20f0c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   20f04:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   20f08:	f141 0100 	adc.w	r1, r1, #0
}
   20f0c:	4770      	bx	lr
   20f0e:	bf00      	nop
   20f10:	200031f8 	.word	0x200031f8
   20f14:	40011000 	.word	0x40011000
   20f18:	20002368 	.word	0x20002368

00020f1c <compare_set>:
{
   20f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f20:	4616      	mov	r6, r2
   20f22:	461f      	mov	r7, r3
   20f24:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   20f26:	f7ff ff61 	bl	20dec <compare_int_lock>
   20f2a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   20f2c:	f7ff ffd4 	bl	20ed8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   20f30:	42b0      	cmp	r0, r6
   20f32:	eb71 0307 	sbcs.w	r3, r1, r7
   20f36:	d251      	bcs.n	20fdc <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   20f38:	4b3a      	ldr	r3, [pc, #232]	; (21024 <compare_set+0x108>)
   20f3a:	1a30      	subs	r0, r6, r0
   20f3c:	eb67 0101 	sbc.w	r1, r7, r1
   20f40:	4298      	cmp	r0, r3
   20f42:	f171 0100 	sbcs.w	r1, r1, #0
   20f46:	d26a      	bcs.n	2101e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   20f48:	4b37      	ldr	r3, [pc, #220]	; (21028 <compare_set+0x10c>)
   20f4a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   20f4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   20f52:	429f      	cmp	r7, r3
   20f54:	bf08      	it	eq
   20f56:	4296      	cmpeq	r6, r2
   20f58:	d04e      	beq.n	20ff8 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20f5a:	4934      	ldr	r1, [pc, #208]	; (2102c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20f5c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20f60:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20f64:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20f68:	00ad      	lsls	r5, r5, #2
   20f6a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   20f6e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20f70:	b2ad      	uxth	r5, r5
   20f72:	f008 fbb1 	bl	296d8 <event_clear>
	return absolute_time & COUNTER_MAX;
   20f76:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   20f7a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   20f7e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20f82:	4a2b      	ldr	r2, [pc, #172]	; (21030 <compare_set+0x114>)
   20f84:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20f86:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   20f8a:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   20f8c:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   20f90:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20f92:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   20f96:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   20f9a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   20f9e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20fa2:	f06f 0002 	mvn.w	r0, #2
   20fa6:	eba0 0008 	sub.w	r0, r0, r8
   20faa:	4460      	add	r0, ip
   20fac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20fb0:	4290      	cmp	r0, r2
   20fb2:	d921      	bls.n	20ff8 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20fb4:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   20fb6:	b160      	cbz	r0, 20fd2 <compare_set+0xb6>
     return p_reg->COUNTER;
   20fb8:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20fbc:	eba8 000b 	sub.w	r0, r8, fp
   20fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   20fc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20fc8:	d916      	bls.n	20ff8 <compare_set+0xdc>
					event_clear(chan);
   20fca:	4620      	mov	r0, r4
   20fcc:	f008 fb84 	bl	296d8 <event_clear>
   20fd0:	4a17      	ldr	r2, [pc, #92]	; (21030 <compare_set+0x114>)
			cc_val = now + cc_inc;
   20fd2:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   20fd6:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   20fda:	e7d9      	b.n	20f90 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   20fdc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20fde:	4a15      	ldr	r2, [pc, #84]	; (21034 <compare_set+0x118>)
   20fe0:	f3bf 8f5b 	dmb	ish
   20fe4:	40a3      	lsls	r3, r4
   20fe6:	e852 0f00 	ldrex	r0, [r2]
   20fea:	4318      	orrs	r0, r3
   20fec:	e842 0100 	strex	r1, r0, [r2]
   20ff0:	2900      	cmp	r1, #0
   20ff2:	d1f8      	bne.n	20fe6 <compare_set+0xca>
   20ff4:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   20ff8:	490b      	ldr	r1, [pc, #44]	; (21028 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   20ffa:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   20ffc:	0123      	lsls	r3, r4, #4
   20ffe:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   21002:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   21006:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   21008:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2100a:	6053      	str	r3, [r2, #4]
	return ret;
   2100c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   2100e:	4620      	mov	r0, r4
   21010:	9900      	ldr	r1, [sp, #0]
   21012:	f7ff ff33 	bl	20e7c <compare_int_unlock>
}
   21016:	4628      	mov	r0, r5
   21018:	b003      	add	sp, #12
   2101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   2101e:	f06f 0515 	mvn.w	r5, #21
   21022:	e7f4      	b.n	2100e <compare_set+0xf2>
   21024:	00800001 	.word	0x00800001
   21028:	20002350 	.word	0x20002350
   2102c:	40011000 	.word	0x40011000
   21030:	007ffffd 	.word	0x007ffffd
   21034:	200031f0 	.word	0x200031f0

00021038 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   21038:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   2103a:	4c1b      	ldr	r4, [pc, #108]	; (210a8 <sys_clock_driver_init+0x70>)
   2103c:	4b1b      	ldr	r3, [pc, #108]	; (210ac <sys_clock_driver_init+0x74>)
   2103e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   21042:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21046:	4b1a      	ldr	r3, [pc, #104]	; (210b0 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
   21048:	2500      	movs	r5, #0
   2104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2104e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21052:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   21056:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   2105a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2105e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21062:	4b14      	ldr	r3, [pc, #80]	; (210b4 <sys_clock_driver_init+0x7c>)
   21064:	2602      	movs	r6, #2
   21066:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2106a:	2101      	movs	r1, #1
   2106c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
   21070:	2011      	movs	r0, #17
   21072:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21076:	462a      	mov	r2, r5
   21078:	f7f3 fd8a 	bl	14b90 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2107c:	2011      	movs	r0, #17
   2107e:	f7f3 fd57 	bl	14b30 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21082:	4a0d      	ldr	r2, [pc, #52]	; (210b8 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21084:	2301      	movs	r3, #1
   21086:	60a3      	str	r3, [r4, #8]
   21088:	6023      	str	r3, [r4, #0]
   2108a:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2108c:	4b0b      	ldr	r3, [pc, #44]	; (210bc <sys_clock_driver_init+0x84>)
   2108e:	4a0c      	ldr	r2, [pc, #48]	; (210c0 <sys_clock_driver_init+0x88>)
   21090:	9300      	str	r3, [sp, #0]
   21092:	9501      	str	r5, [sp, #4]
   21094:	2300      	movs	r3, #0
   21096:	4628      	mov	r0, r5
   21098:	f7ff ff40 	bl	20f1c <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2109c:	4630      	mov	r0, r6
   2109e:	f7ff f86b 	bl	20178 <z_nrf_clock_control_lf_on>

	return 0;
}
   210a2:	4628      	mov	r0, r5
   210a4:	b002      	add	sp, #8
   210a6:	bd70      	pop	{r4, r5, r6, pc}
   210a8:	40011000 	.word	0x40011000
   210ac:	000f0003 	.word	0x000f0003
   210b0:	20002350 	.word	0x20002350
   210b4:	e000e100 	.word	0xe000e100
   210b8:	200031f4 	.word	0x200031f4
   210bc:	00020e35 	.word	0x00020e35
   210c0:	007fffff 	.word	0x007fffff

000210c4 <rtc_nrf_isr>:
{
   210c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   210c8:	4c2b      	ldr	r4, [pc, #172]	; (21178 <rtc_nrf_isr+0xb4>)
   210ca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   210ce:	0799      	lsls	r1, r3, #30
   210d0:	d50b      	bpl.n	210ea <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   210d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   210d6:	b143      	cbz	r3, 210ea <rtc_nrf_isr+0x26>
		overflow_cnt++;
   210d8:	4a28      	ldr	r2, [pc, #160]	; (2117c <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   210da:	2300      	movs	r3, #0
   210dc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   210e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   210e4:	6813      	ldr	r3, [r2, #0]
   210e6:	3301      	adds	r3, #1
   210e8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   210ea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   210ee:	03da      	lsls	r2, r3, #15
   210f0:	d523      	bpl.n	2113a <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   210f2:	f3bf 8f5b 	dmb	ish
   210f6:	4b22      	ldr	r3, [pc, #136]	; (21180 <rtc_nrf_isr+0xbc>)
   210f8:	e853 2f00 	ldrex	r2, [r3]
   210fc:	f022 0101 	bic.w	r1, r2, #1
   21100:	e843 1000 	strex	r0, r1, [r3]
   21104:	2800      	cmp	r0, #0
   21106:	d1f7      	bne.n	210f8 <rtc_nrf_isr+0x34>
   21108:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2110c:	07d3      	lsls	r3, r2, #31
   2110e:	d402      	bmi.n	21116 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21110:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   21114:	b18b      	cbz	r3, 2113a <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21116:	2500      	movs	r5, #0
   21118:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2111c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   21120:	f7ff feda 	bl	20ed8 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   21124:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   21128:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   2112a:	4b16      	ldr	r3, [pc, #88]	; (21184 <rtc_nrf_isr+0xc0>)
   2112c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   21130:	42b0      	cmp	r0, r6
   21132:	41b9      	sbcs	r1, r7
   21134:	d204      	bcs.n	21140 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   21136:	f382 8810 	msr	PRIMASK, r2
}
   2113a:	b003      	add	sp, #12
   2113c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21140:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   21144:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   21148:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   2114c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   21150:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   21152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21156:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2115a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   2115e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   21162:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   21166:	2900      	cmp	r1, #0
   21168:	d0e7      	beq.n	2113a <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   2116a:	9000      	str	r0, [sp, #0]
   2116c:	4632      	mov	r2, r6
   2116e:	463b      	mov	r3, r7
   21170:	4628      	mov	r0, r5
   21172:	4788      	blx	r1
   21174:	e7e1      	b.n	2113a <rtc_nrf_isr+0x76>
   21176:	bf00      	nop
   21178:	40011000 	.word	0x40011000
   2117c:	200031f8 	.word	0x200031f8
   21180:	200031f0 	.word	0x200031f0
   21184:	20002350 	.word	0x20002350

00021188 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   21188:	1c43      	adds	r3, r0, #1
{
   2118a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   2118c:	d022      	beq.n	211d4 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2118e:	2801      	cmp	r0, #1
   21190:	dd22      	ble.n	211d8 <sys_clock_set_timeout+0x50>
   21192:	4a12      	ldr	r2, [pc, #72]	; (211dc <sys_clock_set_timeout+0x54>)
   21194:	4b12      	ldr	r3, [pc, #72]	; (211e0 <sys_clock_set_timeout+0x58>)
   21196:	4290      	cmp	r0, r2
   21198:	bfd4      	ite	le
   2119a:	4604      	movle	r4, r0
   2119c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2119e:	f7ff fe9b 	bl	20ed8 <z_nrf_rtc_timer_read>
   211a2:	4b10      	ldr	r3, [pc, #64]	; (211e4 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   211a4:	490e      	ldr	r1, [pc, #56]	; (211e0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   211a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   211aa:	1a80      	subs	r0, r0, r2
		cyc = 0;
   211ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   211b0:	bf28      	it	cs
   211b2:	2400      	movcs	r4, #0
	cyc += unannounced;
   211b4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   211b6:	428c      	cmp	r4, r1
   211b8:	bf28      	it	cs
   211ba:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   211bc:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   211be:	490a      	ldr	r1, [pc, #40]	; (211e8 <sys_clock_set_timeout+0x60>)
   211c0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   211c2:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   211c6:	9001      	str	r0, [sp, #4]
   211c8:	f143 0300 	adc.w	r3, r3, #0
   211cc:	f7ff fea6 	bl	20f1c <compare_set>
}
   211d0:	b002      	add	sp, #8
   211d2:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   211d4:	4c02      	ldr	r4, [pc, #8]	; (211e0 <sys_clock_set_timeout+0x58>)
   211d6:	e7e2      	b.n	2119e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   211d8:	2401      	movs	r4, #1
   211da:	e7e0      	b.n	2119e <sys_clock_set_timeout+0x16>
   211dc:	007ffffe 	.word	0x007ffffe
   211e0:	007fffff 	.word	0x007fffff
   211e4:	20002360 	.word	0x20002360
   211e8:	00020e35 	.word	0x00020e35

000211ec <sys_clock_elapsed>:
{
   211ec:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   211ee:	f7ff fe73 	bl	20ed8 <z_nrf_rtc_timer_read>
   211f2:	4b02      	ldr	r3, [pc, #8]	; (211fc <sys_clock_elapsed+0x10>)
   211f4:	681b      	ldr	r3, [r3, #0]
}
   211f6:	1ac0      	subs	r0, r0, r3
   211f8:	bd08      	pop	{r3, pc}
   211fa:	bf00      	nop
   211fc:	20002360 	.word	0x20002360

00021200 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   21200:	4602      	mov	r2, r0
   21202:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   21204:	4801      	ldr	r0, [pc, #4]	; (2120c <multithreading_lock_acquire+0xc>)
   21206:	f002 ba13 	b.w	23630 <z_impl_k_mutex_lock>
   2120a:	bf00      	nop
   2120c:	20000b78 	.word	0x20000b78

00021210 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   21210:	4801      	ldr	r0, [pc, #4]	; (21218 <multithreading_lock_release+0x8>)
   21212:	f002 ba87 	b.w	23724 <z_impl_k_mutex_unlock>
   21216:	bf00      	nop
   21218:	20000b78 	.word	0x20000b78

0002121c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2121c:	b598      	push	{r3, r4, r7, lr}
   2121e:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   21220:	f7f2 faa2 	bl	13768 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21224:	466c      	mov	r4, sp
   21226:	b088      	sub	sp, #32
   21228:	466a      	mov	r2, sp
   2122a:	4b08      	ldr	r3, [pc, #32]	; (2124c <k_sys_fatal_error_handler+0x30>)
   2122c:	6153      	str	r3, [r2, #20]
   2122e:	4b08      	ldr	r3, [pc, #32]	; (21250 <k_sys_fatal_error_handler+0x34>)
   21230:	6193      	str	r3, [r2, #24]
   21232:	2303      	movs	r3, #3
   21234:	f842 3f10 	str.w	r3, [r2, #16]!
   21238:	4806      	ldr	r0, [pc, #24]	; (21254 <k_sys_fatal_error_handler+0x38>)
   2123a:	2300      	movs	r3, #0
   2123c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21240:	f7f2 fb72 	bl	13928 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   21244:	2000      	movs	r0, #0
   21246:	46a5      	mov	sp, r4
   21248:	f7f4 fafa 	bl	15840 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2124c:	0002efba 	.word	0x0002efba
   21250:	0002efcf 	.word	0x0002efcf
   21254:	0002a8b0 	.word	0x0002a8b0

00021258 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   21258:	b598      	push	{r3, r4, r7, lr}
   2125a:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   2125c:	466c      	mov	r4, sp
   2125e:	b08a      	sub	sp, #40	; 0x28
   21260:	466a      	mov	r2, sp
   21262:	4b0d      	ldr	r3, [pc, #52]	; (21298 <sdc_assertion_handler+0x40>)
   21264:	6153      	str	r3, [r2, #20]
   21266:	4b0d      	ldr	r3, [pc, #52]	; (2129c <sdc_assertion_handler+0x44>)
   21268:	6211      	str	r1, [r2, #32]
   2126a:	e9c2 3006 	strd	r3, r0, [r2, #24]
   2126e:	f240 3301 	movw	r3, #769	; 0x301
   21272:	8493      	strh	r3, [r2, #36]	; 0x24
   21274:	4b0a      	ldr	r3, [pc, #40]	; (212a0 <sdc_assertion_handler+0x48>)
   21276:	f842 3f10 	str.w	r3, [r2, #16]!
   2127a:	480a      	ldr	r0, [pc, #40]	; (212a4 <sdc_assertion_handler+0x4c>)
   2127c:	2300      	movs	r3, #0
   2127e:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   21282:	f7f2 fb51 	bl	13928 <z_impl_z_log_msg_static_create>
   21286:	46a5      	mov	sp, r4
	k_oops();
   21288:	4040      	eors	r0, r0
   2128a:	f380 8811 	msr	BASEPRI, r0
   2128e:	f04f 0003 	mov.w	r0, #3
   21292:	df02      	svc	2
}
   21294:	46bd      	mov	sp, r7
   21296:	bd98      	pop	{r3, r4, r7, pc}
   21298:	0002eff5 	.word	0x0002eff5
   2129c:	0002f199 	.word	0x0002f199
   212a0:	01000005 	.word	0x01000005
   212a4:	0002a888 	.word	0x0002a888

000212a8 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   212a8:	b538      	push	{r3, r4, r5, lr}
   212aa:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   212ac:	4807      	ldr	r0, [pc, #28]	; (212cc <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   212ae:	6883      	ldr	r3, [r0, #8]
   212b0:	685d      	ldr	r5, [r3, #4]
   212b2:	460a      	mov	r2, r1
   212b4:	b135      	cbz	r5, 212c4 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   212b6:	2300      	movs	r3, #0
   212b8:	4621      	mov	r1, r4
   212ba:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   212bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   212c0:	b2c0      	uxtb	r0, r0
   212c2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   212c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   212c8:	e7f8      	b.n	212bc <rand_prio_low_vector_get+0x14>
   212ca:	bf00      	nop
   212cc:	0002a550 	.word	0x0002a550

000212d0 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   212d0:	4901      	ldr	r1, [pc, #4]	; (212d8 <receive_signal_raise+0x8>)
   212d2:	4802      	ldr	r0, [pc, #8]	; (212dc <receive_signal_raise+0xc>)
   212d4:	f008 bd5d 	b.w	29d92 <k_work_submit_to_queue>
   212d8:	200031fc 	.word	0x200031fc
   212dc:	20002bf0 	.word	0x20002bf0

000212e0 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   212e0:	b410      	push	{r4}
   212e2:	4603      	mov	r3, r0
   212e4:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   212e6:	4803      	ldr	r0, [pc, #12]	; (212f4 <rand_prio_low_vector_get_blocking+0x14>)
   212e8:	6881      	ldr	r1, [r0, #8]
   212ea:	680c      	ldr	r4, [r1, #0]
   212ec:	4619      	mov	r1, r3
   212ee:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   212f0:	bc10      	pop	{r4}
   212f2:	4718      	bx	r3
   212f4:	0002a550 	.word	0x0002a550

000212f8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   212f8:	b5b0      	push	{r4, r5, r7, lr}
   212fa:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   212fc:	483a      	ldr	r0, [pc, #232]	; (213e8 <hci_driver_init+0xf0>)
{
   212fe:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   21300:	f7f6 f996 	bl	17630 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   21304:	4839      	ldr	r0, [pc, #228]	; (213ec <hci_driver_init+0xf4>)
   21306:	f7df fafd 	bl	904 <sdc_init>
		err = sdc_support_adv();
   2130a:	f7df fb75 	bl	9f8 <sdc_support_adv>
		if (err) {
   2130e:	b120      	cbz	r0, 2131a <hci_driver_init+0x22>
			return -ENOTSUP;
   21310:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   21314:	3708      	adds	r7, #8
   21316:	46bd      	mov	sp, r7
   21318:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   2131a:	f7df fb9d 	bl	a58 <sdc_support_peripheral>
		if (err) {
   2131e:	2800      	cmp	r0, #0
   21320:	d1f6      	bne.n	21310 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   21322:	f7df fb79 	bl	a18 <sdc_support_dle_peripheral>
			if (err) {
   21326:	2800      	cmp	r0, #0
   21328:	d1f2      	bne.n	21310 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   2132a:	f7df fb85 	bl	a38 <sdc_support_le_2m_phy>
		if (err) {
   2132e:	2800      	cmp	r0, #0
   21330:	d1ee      	bne.n	21310 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   21332:	f7df fba1 	bl	a78 <sdc_support_phy_update_peripheral>
			if (err) {
   21336:	4604      	mov	r4, r0
   21338:	2800      	cmp	r0, #0
   2133a:	d1e9      	bne.n	21310 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   2133c:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2133e:	1d3a      	adds	r2, r7, #4
   21340:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   21342:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21344:	f7df fa54 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   21348:	2800      	cmp	r0, #0
   2134a:	dbe3      	blt.n	21314 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   2134c:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2134e:	1d3a      	adds	r2, r7, #4
   21350:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   21352:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21354:	f7df fa4c 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   21358:	2800      	cmp	r0, #0
   2135a:	dbdb      	blt.n	21314 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   2135c:	4b24      	ldr	r3, [pc, #144]	; (213f0 <hci_driver_init+0xf8>)
   2135e:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21360:	1d3a      	adds	r2, r7, #4
   21362:	2103      	movs	r1, #3
   21364:	4620      	mov	r0, r4
   21366:	f7df fa43 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   2136a:	2800      	cmp	r0, #0
   2136c:	dbd2      	blt.n	21314 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   2136e:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21372:	1d3a      	adds	r2, r7, #4
   21374:	2104      	movs	r1, #4
   21376:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   21378:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2137a:	f7df fa39 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   2137e:	2800      	cmp	r0, #0
   21380:	dbc8      	blt.n	21314 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21382:	1d3a      	adds	r2, r7, #4
   21384:	2105      	movs	r1, #5
   21386:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   21388:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2138a:	f7df fa31 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   2138e:	2800      	cmp	r0, #0
   21390:	dbc0      	blt.n	21314 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   21392:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21394:	1d3a      	adds	r2, r7, #4
   21396:	2107      	movs	r1, #7
   21398:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   2139a:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2139c:	f7df fa28 	bl	7f0 <sdc_cfg_set>
	if (required_memory < 0) {
   213a0:	2800      	cmp	r0, #0
   213a2:	dbb7      	blt.n	21314 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   213a4:	f240 73fa 	movw	r3, #2042	; 0x7fa
   213a8:	4298      	cmp	r0, r3
   213aa:	dd1b      	ble.n	213e4 <hci_driver_init+0xec>
		LOG_ERR("Allocated memory too low: %u < %u",
   213ac:	466c      	mov	r4, sp
   213ae:	b08a      	sub	sp, #40	; 0x28
   213b0:	466a      	mov	r2, sp
   213b2:	4910      	ldr	r1, [pc, #64]	; (213f4 <hci_driver_init+0xfc>)
   213b4:	6151      	str	r1, [r2, #20]
   213b6:	4910      	ldr	r1, [pc, #64]	; (213f8 <hci_driver_init+0x100>)
   213b8:	6210      	str	r0, [r2, #32]
   213ba:	e9c2 1306 	strd	r1, r3, [r2, #24]
   213be:	2305      	movs	r3, #5
   213c0:	f842 3f10 	str.w	r3, [r2, #16]!
   213c4:	480d      	ldr	r0, [pc, #52]	; (213fc <hci_driver_init+0x104>)
   213c6:	2300      	movs	r3, #0
   213c8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   213cc:	f7f2 faac 	bl	13928 <z_impl_z_log_msg_static_create>
   213d0:	46a5      	mov	sp, r4
		k_panic();
   213d2:	4040      	eors	r0, r0
   213d4:	f380 8811 	msr	BASEPRI, r0
   213d8:	f04f 0004 	mov.w	r0, #4
   213dc:	df02      	svc	2
		return -ENOMEM;
   213de:	f06f 000b 	mvn.w	r0, #11
   213e2:	e797      	b.n	21314 <hci_driver_init+0x1c>
	return 0;
   213e4:	2000      	movs	r0, #0
	if (err) {
   213e6:	e795      	b.n	21314 <hci_driver_init+0x1c>
   213e8:	0002b420 	.word	0x0002b420
   213ec:	00021259 	.word	0x00021259
   213f0:	02031b1b 	.word	0x02031b1b
   213f4:	0002f01e 	.word	0x0002f01e
   213f8:	0002f12f 	.word	0x0002f12f
   213fc:	0002a888 	.word	0x0002a888

00021400 <hci_driver_open>:
{
   21400:	b5b0      	push	{r4, r5, r7, lr}
   21402:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   21404:	4932      	ldr	r1, [pc, #200]	; (214d0 <hci_driver_open+0xd0>)
   21406:	4833      	ldr	r0, [pc, #204]	; (214d4 <hci_driver_open+0xd4>)
{
   21408:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   2140a:	f008 fc95 	bl	29d38 <k_work_init>
		hci_ecdh_init();
   2140e:	f000 fe99 	bl	22144 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   21412:	f107 000c 	add.w	r0, r7, #12
   21416:	f7df f9dd 	bl	7d4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   2141a:	466c      	mov	r4, sp
   2141c:	b08a      	sub	sp, #40	; 0x28
   2141e:	466a      	mov	r2, sp
   21420:	4b2d      	ldr	r3, [pc, #180]	; (214d8 <hci_driver_open+0xd8>)
   21422:	6153      	str	r3, [r2, #20]
   21424:	4b2d      	ldr	r3, [pc, #180]	; (214dc <hci_driver_open+0xdc>)
   21426:	61d3      	str	r3, [r2, #28]
   21428:	f240 3301 	movw	r3, #769	; 0x301
   2142c:	8413      	strh	r3, [r2, #32]
   2142e:	4d2c      	ldr	r5, [pc, #176]	; (214e0 <hci_driver_open+0xe0>)
   21430:	4b2c      	ldr	r3, [pc, #176]	; (214e4 <hci_driver_open+0xe4>)
   21432:	6195      	str	r5, [r2, #24]
   21434:	f842 3f10 	str.w	r3, [r2, #16]!
   21438:	492b      	ldr	r1, [pc, #172]	; (214e8 <hci_driver_open+0xe8>)
   2143a:	482c      	ldr	r0, [pc, #176]	; (214ec <hci_driver_open+0xec>)
   2143c:	f107 030c 	add.w	r3, r7, #12
   21440:	f7f2 fa72 	bl	13928 <z_impl_z_log_msg_static_create>
   21444:	46a5      	mov	sp, r4
   21446:	482a      	ldr	r0, [pc, #168]	; (214f0 <hci_driver_open+0xf0>)
   21448:	f008 fa79 	bl	2993e <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   2144c:	4603      	mov	r3, r0
   2144e:	b998      	cbnz	r0, 21478 <hci_driver_open+0x78>
		LOG_ERR("Entropy source device not ready");
   21450:	b088      	sub	sp, #32
   21452:	466a      	mov	r2, sp
   21454:	4927      	ldr	r1, [pc, #156]	; (214f4 <hci_driver_open+0xf4>)
   21456:	e9c2 1505 	strd	r1, r5, [r2, #20]
   2145a:	2103      	movs	r1, #3
   2145c:	f842 1f10 	str.w	r1, [r2, #16]!
   21460:	4822      	ldr	r0, [pc, #136]	; (214ec <hci_driver_open+0xec>)
   21462:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21466:	f7f2 fa5f 	bl	13928 <z_impl_z_log_msg_static_create>
   2146a:	46a5      	mov	sp, r4
		return -ENODEV;
   2146c:	f06f 0412 	mvn.w	r4, #18
}
   21470:	4620      	mov	r0, r4
   21472:	3720      	adds	r7, #32
   21474:	46bd      	mov	sp, r7
   21476:	bdb0      	pop	{r4, r5, r7, pc}
	sdc_rand_source_t rand_functions = {
   21478:	4a1f      	ldr	r2, [pc, #124]	; (214f8 <hci_driver_open+0xf8>)
   2147a:	ca07      	ldmia	r2, {r0, r1, r2}
   2147c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   21480:	4638      	mov	r0, r7
   21482:	f7df fb51 	bl	b28 <sdc_rand_source_register>
	if (err) {
   21486:	b190      	cbz	r0, 214ae <hci_driver_open+0xae>
		LOG_ERR("Failed to register rand source (%d)", err);
   21488:	b088      	sub	sp, #32
   2148a:	466a      	mov	r2, sp
   2148c:	4b1b      	ldr	r3, [pc, #108]	; (214fc <hci_driver_open+0xfc>)
   2148e:	61d0      	str	r0, [r2, #28]
   21490:	e9c2 3505 	strd	r3, r5, [r2, #20]
   21494:	2304      	movs	r3, #4
   21496:	f842 3f10 	str.w	r3, [r2, #16]!
   2149a:	4814      	ldr	r0, [pc, #80]	; (214ec <hci_driver_open+0xec>)
   2149c:	2300      	movs	r3, #0
   2149e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   214a2:	f7f2 fa41 	bl	13928 <z_impl_z_log_msg_static_create>
   214a6:	46a5      	mov	sp, r4
		return -EINVAL;
   214a8:	f06f 0415 	mvn.w	r4, #21
   214ac:	e7e0      	b.n	21470 <hci_driver_open+0x70>
	err = MULTITHREADING_LOCK_ACQUIRE();
   214ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   214b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   214b6:	f7ff fea3 	bl	21200 <multithreading_lock_acquire>
	if (err) {
   214ba:	4604      	mov	r4, r0
   214bc:	2800      	cmp	r0, #0
   214be:	d1d7      	bne.n	21470 <hci_driver_open+0x70>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   214c0:	490f      	ldr	r1, [pc, #60]	; (21500 <hci_driver_open+0x100>)
   214c2:	4810      	ldr	r0, [pc, #64]	; (21504 <hci_driver_open+0x104>)
   214c4:	f7df f9f4 	bl	8b0 <sdc_enable>
	if (err) {
   214c8:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   214ca:	f7ff fea1 	bl	21210 <multithreading_lock_release>
	return 0;
   214ce:	e7cf      	b.n	21470 <hci_driver_open+0x70>
   214d0:	0002978d 	.word	0x0002978d
   214d4:	200031fc 	.word	0x200031fc
   214d8:	0002caf8 	.word	0x0002caf8
   214dc:	0002f044 	.word	0x0002f044
   214e0:	0002f146 	.word	0x0002f146
   214e4:	01000004 	.word	0x01000004
   214e8:	014024c0 	.word	0x014024c0
   214ec:	0002a888 	.word	0x0002a888
   214f0:	0002a550 	.word	0x0002a550
   214f4:	0002f06b 	.word	0x0002f06b
   214f8:	0002aa58 	.word	0x0002aa58
   214fc:	0002f08f 	.word	0x0002f08f
   21500:	20002370 	.word	0x20002370
   21504:	000212d1 	.word	0x000212d1

00021508 <hci_driver_receive_process>:
{
   21508:	b5f0      	push	{r4, r5, r6, r7, lr}
   2150a:	b083      	sub	sp, #12
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
{
   21510:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21512:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21516:	f7ff fe73 	bl	21200 <multithreading_lock_acquire>
	if (!errcode) {
   2151a:	2800      	cmp	r0, #0
   2151c:	d142      	bne.n	215a4 <hci_driver_receive_process+0x9c>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   2151e:	4d37      	ldr	r5, [pc, #220]	; (215fc <hci_driver_receive_process+0xf4>)
   21520:	1df9      	adds	r1, r7, #7
   21522:	4628      	mov	r0, r5
   21524:	f000 fcd0 	bl	21ec8 <hci_internal_msg_get>
   21528:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2152a:	f7ff fe71 	bl	21210 <multithreading_lock_release>
	if (errcode) {
   2152e:	2c00      	cmp	r4, #0
   21530:	d138      	bne.n	215a4 <hci_driver_receive_process+0x9c>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   21532:	79fb      	ldrb	r3, [r7, #7]
   21534:	2b04      	cmp	r3, #4
   21536:	d138      	bne.n	215aa <hci_driver_receive_process+0xa2>
	switch (hdr->evt) {
   21538:	7828      	ldrb	r0, [r5, #0]
   2153a:	283e      	cmp	r0, #62	; 0x3e
   2153c:	d01d      	beq.n	2157a <hci_driver_receive_process+0x72>
   2153e:	28ff      	cmp	r0, #255	; 0xff
   21540:	d022      	beq.n	21588 <hci_driver_receive_process+0x80>
		switch (subevent) {
   21542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   2154a:	4621      	mov	r1, r4
   2154c:	f7f4 fcc0 	bl	15ed0 <bt_buf_get_evt>
	if (!evt_buf) {
   21550:	4606      	mov	r6, r0
   21552:	b9e0      	cbnz	r0, 2158e <hci_driver_receive_process+0x86>
		if (discardable) {
   21554:	bb24      	cbnz	r4, 215a0 <hci_driver_receive_process+0x98>
		LOG_ERR("No event buffer available");
   21556:	466d      	mov	r5, sp
   21558:	b088      	sub	sp, #32
   2155a:	466a      	mov	r2, sp
   2155c:	4b28      	ldr	r3, [pc, #160]	; (21600 <hci_driver_receive_process+0xf8>)
   2155e:	6153      	str	r3, [r2, #20]
   21560:	4b28      	ldr	r3, [pc, #160]	; (21604 <hci_driver_receive_process+0xfc>)
		LOG_ERR("No data buffer available");
   21562:	6193      	str	r3, [r2, #24]
   21564:	2303      	movs	r3, #3
   21566:	f842 3f10 	str.w	r3, [r2, #16]!
   2156a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   2156e:	4623      	mov	r3, r4
   21570:	4825      	ldr	r0, [pc, #148]	; (21608 <hci_driver_receive_process+0x100>)
   21572:	f7f2 f9d9 	bl	13928 <z_impl_z_log_msg_static_create>
   21576:	46ad      	mov	sp, r5
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   21578:	e012      	b.n	215a0 <hci_driver_receive_process+0x98>
		switch (me->subevent) {
   2157a:	78ab      	ldrb	r3, [r5, #2]
   2157c:	2b02      	cmp	r3, #2
		switch (subevent) {
   2157e:	d1e0      	bne.n	21542 <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   21580:	2200      	movs	r2, #0
   21582:	2300      	movs	r3, #0
			return true;
   21584:	2401      	movs	r4, #1
   21586:	e7e0      	b.n	2154a <hci_driver_receive_process+0x42>
		switch (subevent) {
   21588:	78ab      	ldrb	r3, [r5, #2]
   2158a:	2b80      	cmp	r3, #128	; 0x80
   2158c:	e7f7      	b.n	2157e <hci_driver_receive_process+0x76>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   2158e:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   21590:	491a      	ldr	r1, [pc, #104]	; (215fc <hci_driver_receive_process+0xf4>)
   21592:	3202      	adds	r2, #2
   21594:	300c      	adds	r0, #12
   21596:	f007 fd9d 	bl	290d4 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   2159a:	4630      	mov	r0, r6
	bt_recv(data_buf);
   2159c:	f7f6 f810 	bl	175c0 <bt_recv>
		receive_signal_raise();
   215a0:	f7ff fe96 	bl	212d0 <receive_signal_raise>
}
   215a4:	370c      	adds	r7, #12
   215a6:	46bd      	mov	sp, r7
   215a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   215aa:	2b02      	cmp	r3, #2
   215ac:	d117      	bne.n	215de <hci_driver_receive_process+0xd6>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   215ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   215b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   215b6:	2003      	movs	r0, #3
   215b8:	f7f4 fc5a 	bl	15e70 <bt_buf_get_rx>
	if (!data_buf) {
   215bc:	4604      	mov	r4, r0
   215be:	b930      	cbnz	r0, 215ce <hci_driver_receive_process+0xc6>
		LOG_ERR("No data buffer available");
   215c0:	466d      	mov	r5, sp
   215c2:	b088      	sub	sp, #32
   215c4:	466a      	mov	r2, sp
   215c6:	4b11      	ldr	r3, [pc, #68]	; (2160c <hci_driver_receive_process+0x104>)
   215c8:	6153      	str	r3, [r2, #20]
   215ca:	4b11      	ldr	r3, [pc, #68]	; (21610 <hci_driver_receive_process+0x108>)
   215cc:	e7c9      	b.n	21562 <hci_driver_receive_process+0x5a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   215ce:	886a      	ldrh	r2, [r5, #2]
   215d0:	4629      	mov	r1, r5
   215d2:	3204      	adds	r2, #4
   215d4:	300c      	adds	r0, #12
   215d6:	f007 fd7d 	bl	290d4 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   215da:	4620      	mov	r0, r4
   215dc:	e7de      	b.n	2159c <hci_driver_receive_process+0x94>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   215de:	466d      	mov	r5, sp
   215e0:	b088      	sub	sp, #32
   215e2:	466a      	mov	r2, sp
   215e4:	490b      	ldr	r1, [pc, #44]	; (21614 <hci_driver_receive_process+0x10c>)
   215e6:	6151      	str	r1, [r2, #20]
   215e8:	490b      	ldr	r1, [pc, #44]	; (21618 <hci_driver_receive_process+0x110>)
   215ea:	e9c2 1306 	strd	r1, r3, [r2, #24]
   215ee:	2304      	movs	r3, #4
   215f0:	f842 3f10 	str.w	r3, [r2, #16]!
   215f4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   215f8:	4623      	mov	r3, r4
   215fa:	e7b9      	b.n	21570 <hci_driver_receive_process+0x68>
   215fc:	200034be 	.word	0x200034be
   21600:	0002f0b7 	.word	0x0002f0b7
   21604:	0002f16a 	.word	0x0002f16a
   21608:	0002a888 	.word	0x0002a888
   2160c:	0002f0d5 	.word	0x0002f0d5
   21610:	0002f156 	.word	0x0002f156
   21614:	0002f0f2 	.word	0x0002f0f2
   21618:	0002f17f 	.word	0x0002f17f

0002161c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   2161c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2161e:	4cca      	ldr	r4, [pc, #808]	; (21948 <hci_internal_cmd_put+0x32c>)
   21620:	8806      	ldrh	r6, [r0, #0]
   21622:	7823      	ldrb	r3, [r4, #0]
{
   21624:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   21626:	2b00      	cmp	r3, #0
   21628:	f040 8446 	bne.w	21eb8 <hci_internal_cmd_put+0x89c>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2162c:	2304      	movs	r3, #4
   2162e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   21632:	4bc6      	ldr	r3, [pc, #792]	; (2194c <hci_internal_cmd_put+0x330>)
   21634:	681f      	ldr	r7, [r3, #0]
   21636:	b1bf      	cbz	r7, 21668 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   21638:	f10d 0306 	add.w	r3, sp, #6
   2163c:	f10d 0207 	add.w	r2, sp, #7
   21640:	1c61      	adds	r1, r4, #1
   21642:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   21644:	2801      	cmp	r0, #1
   21646:	d00f      	beq.n	21668 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   21648:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2164c:	2b00      	cmp	r3, #0
   2164e:	f040 8411 	bne.w	21e74 <hci_internal_cmd_put+0x858>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   21652:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   21656:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21658:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   2165a:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2165c:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   2165e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21660:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   21662:	71a0      	strb	r0, [r4, #6]
}
   21664:	f000 bc0f 	b.w	21e86 <hci_internal_cmd_put+0x86a>
		switch (BT_OGF(opcode)) {
   21668:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   2166c:	ea4f 2396 	mov.w	r3, r6, lsr #10
   21670:	d20f      	bcs.n	21692 <hci_internal_cmd_put+0x76>
   21672:	2b00      	cmp	r3, #0
   21674:	d079      	beq.n	2176a <hci_internal_cmd_put+0x14e>
   21676:	3b01      	subs	r3, #1
   21678:	2b07      	cmp	r3, #7
   2167a:	f200 83f1 	bhi.w	21e60 <hci_internal_cmd_put+0x844>
   2167e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21682:	000d      	.short	0x000d
   21684:	003f03ef 	.word	0x003f03ef
   21688:	03ef008e 	.word	0x03ef008e
   2168c:	03ef03ef 	.word	0x03ef03ef
   21690:	0169      	.short	0x0169
   21692:	2b3f      	cmp	r3, #63	; 0x3f
   21694:	f000 8315 	beq.w	21cc2 <hci_internal_cmd_put+0x6a6>
	switch (opcode)	{
   21698:	2001      	movs	r0, #1
   2169a:	e36d      	b.n	21d78 <hci_internal_cmd_put+0x75c>
	return ((uint16_t)src[1] << 8) | src[0];
   2169c:	4628      	mov	r0, r5
	switch (opcode)	{
   2169e:	f240 4206 	movw	r2, #1030	; 0x406
   216a2:	f930 3b03 	ldrsh.w	r3, [r0], #3
   216a6:	4293      	cmp	r3, r2
   216a8:	d010      	beq.n	216cc <hci_internal_cmd_put+0xb0>
   216aa:	f240 421d 	movw	r2, #1053	; 0x41d
   216ae:	4293      	cmp	r3, r2
   216b0:	d023      	beq.n	216fa <hci_internal_cmd_put+0xde>
   216b2:	2001      	movs	r0, #1
	switch (hci_opcode) {
   216b4:	f240 4306 	movw	r3, #1030	; 0x406
   216b8:	429e      	cmp	r6, r3
   216ba:	f040 83cb 	bne.w	21e54 <hci_internal_cmd_put+0x838>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   216be:	230f      	movs	r3, #15
   216c0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   216c2:	2304      	movs	r3, #4
   216c4:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   216c6:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   216c8:	2301      	movs	r3, #1
   216ca:	e033      	b.n	21734 <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   216cc:	f7eb fdbd 	bl	d24a <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   216d0:	f242 0332 	movw	r3, #8242	; 0x2032
   216d4:	429e      	cmp	r6, r3
   216d6:	f240 83b5 	bls.w	21e44 <hci_internal_cmd_put+0x828>
   216da:	f242 0385 	movw	r3, #8325	; 0x2085
   216de:	429e      	cmp	r6, r3
   216e0:	d840      	bhi.n	21764 <hci_internal_cmd_put+0x148>
   216e2:	f242 036c 	movw	r3, #8300	; 0x206c
   216e6:	429e      	cmp	r6, r3
   216e8:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   216ec:	f200 83ba 	bhi.w	21e64 <hci_internal_cmd_put+0x848>
   216f0:	3b03      	subs	r3, #3
   216f2:	b29b      	uxth	r3, r3
   216f4:	2b01      	cmp	r3, #1
   216f6:	d835      	bhi.n	21764 <hci_internal_cmd_put+0x148>
   216f8:	e7e1      	b.n	216be <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   216fa:	f7eb fda8 	bl	d24e <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   216fe:	e7e7      	b.n	216d0 <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21700:	4628      	mov	r0, r5
	switch (opcode)	{
   21702:	f640 4263 	movw	r2, #3171	; 0xc63
   21706:	f930 3b03 	ldrsh.w	r3, [r0], #3
   2170a:	4293      	cmp	r3, r2
   2170c:	d03b      	beq.n	21786 <hci_internal_cmd_put+0x16a>
   2170e:	dc16      	bgt.n	2173e <hci_internal_cmd_put+0x122>
   21710:	f640 4203 	movw	r2, #3075	; 0xc03
   21714:	4293      	cmp	r3, r2
   21716:	d02a      	beq.n	2176e <hci_internal_cmd_put+0x152>
   21718:	f640 422d 	movw	r2, #3117	; 0xc2d
   2171c:	4293      	cmp	r3, r2
   2171e:	d029      	beq.n	21774 <hci_internal_cmd_put+0x158>
   21720:	f640 4201 	movw	r2, #3073	; 0xc01
   21724:	4293      	cmp	r3, r2
   21726:	d01b      	beq.n	21760 <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21728:	230f      	movs	r3, #15
   2172a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2172c:	2304      	movs	r3, #4
   2172e:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21730:	2301      	movs	r3, #1
   21732:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   21734:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21736:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   2173a:	7023      	strb	r3, [r4, #0]
   2173c:	e0db      	b.n	218f6 <hci_internal_cmd_put+0x2da>
	switch (opcode)	{
   2173e:	f640 427b 	movw	r2, #3195	; 0xc7b
   21742:	4293      	cmp	r3, r2
   21744:	d022      	beq.n	2178c <hci_internal_cmd_put+0x170>
   21746:	f640 427c 	movw	r2, #3196	; 0xc7c
   2174a:	4293      	cmp	r3, r2
   2174c:	d1ec      	bne.n	21728 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   2174e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   21752:	497f      	ldr	r1, [pc, #508]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   21754:	3302      	adds	r3, #2
   21756:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2175a:	f7eb fcf6 	bl	d14a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   2175e:	e001      	b.n	21764 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   21760:	f7eb fce9 	bl	d136 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   21764:	2801      	cmp	r0, #1
   21766:	f47f af74 	bne.w	21652 <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   2176a:	2001      	movs	r0, #1
   2176c:	e382      	b.n	21e74 <hci_internal_cmd_put+0x858>
		return sdc_hci_cmd_cb_reset();
   2176e:	f7df fadb 	bl	d28 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   21772:	e7f7      	b.n	21764 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   21774:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   21778:	4975      	ldr	r1, [pc, #468]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2177a:	3303      	adds	r3, #3
   2177c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   21780:	f7eb fcd7 	bl	d132 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   21784:	e7ee      	b.n	21764 <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   21786:	f7eb fcdb 	bl	d140 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   2178a:	e7eb      	b.n	21764 <hci_internal_cmd_put+0x148>
		*param_length_out +=
   2178c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   21790:	496f      	ldr	r1, [pc, #444]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out +=
   21792:	3304      	adds	r3, #4
   21794:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   21798:	f7eb fcc9 	bl	d12e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   2179c:	e7e2      	b.n	21764 <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   2179e:	882b      	ldrh	r3, [r5, #0]
   217a0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   217a4:	3b01      	subs	r3, #1
   217a6:	2b08      	cmp	r3, #8
   217a8:	d8be      	bhi.n	21728 <hci_internal_cmd_put+0x10c>
   217aa:	a201      	add	r2, pc, #4	; (adr r2, 217b0 <hci_internal_cmd_put+0x194>)
   217ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   217b0:	000217d5 	.word	0x000217d5
   217b4:	000217e7 	.word	0x000217e7
   217b8:	000218fd 	.word	0x000218fd
   217bc:	00021729 	.word	0x00021729
   217c0:	00021729 	.word	0x00021729
   217c4:	00021729 	.word	0x00021729
   217c8:	00021729 	.word	0x00021729
   217cc:	00021729 	.word	0x00021729
   217d0:	00021935 	.word	0x00021935
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   217d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   217d8:	485d      	ldr	r0, [pc, #372]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   217da:	3308      	adds	r3, #8
   217dc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   217e0:	f7eb fce6 	bl	d1b0 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   217e4:	e7be      	b.n	21764 <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   217e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   217ea:	4d59      	ldr	r5, [pc, #356]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   217ec:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   217ee:	2230      	movs	r2, #48	; 0x30
   217f0:	2100      	movs	r1, #0
   217f2:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   217f4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   217f8:	f005 fa03 	bl	26c02 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   217fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   21800:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   21802:	2300      	movs	r3, #0
   21804:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   21806:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   21808:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   2180a:	f043 0320 	orr.w	r3, r3, #32
   2180e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   21810:	7a63      	ldrb	r3, [r4, #9]
   21812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21816:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   21818:	7b23      	ldrb	r3, [r4, #12]
   2181a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2181e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   21820:	7c63      	ldrb	r3, [r4, #17]
   21822:	f043 0304 	orr.w	r3, r3, #4
   21826:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   21828:	7d63      	ldrb	r3, [r4, #21]
   2182a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   2182e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   21832:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   21834:	7da3      	ldrb	r3, [r4, #22]
   21836:	f043 0302 	orr.w	r3, r3, #2
   2183a:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   2183c:	7f63      	ldrb	r3, [r4, #29]
   2183e:	f043 0304 	orr.w	r3, r3, #4
   21842:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   21844:	f894 3020 	ldrb.w	r3, [r4, #32]
   21848:	f063 0308 	orn	r3, r3, #8
   2184c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   21850:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   21854:	f063 033c 	orn	r3, r3, #60	; 0x3c
   21858:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   2185c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   21860:	f063 030c 	orn	r3, r3, #12
   21864:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   21868:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2186c:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   21870:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   21874:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   21878:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2187c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   21880:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21884:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   21888:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2188c:	220e      	movs	r2, #14
   2188e:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   21890:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   21894:	2201      	movs	r2, #1
   21896:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   21898:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   2189c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   218a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   218a4:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   218a8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   218ac:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   218b0:	f063 0301 	orn	r3, r3, #1
   218b4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   218b8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   218bc:	4313      	orrs	r3, r2
   218be:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   218c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   218c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   218ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   218ce:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   218d2:	f043 0304 	orr.w	r3, r3, #4
   218d6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   218da:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   218de:	f043 0304 	orr.w	r3, r3, #4
   218e2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   218e6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   218ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   218ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   218f2:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   218f6:	2000      	movs	r0, #0
}
   218f8:	b003      	add	sp, #12
   218fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   218fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21900:	4d13      	ldr	r5, [pc, #76]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   21902:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   21904:	2208      	movs	r2, #8
   21906:	2100      	movs	r1, #0
   21908:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2190a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   2190e:	f005 f978 	bl	26c02 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   21912:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   21916:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   21918:	2300      	movs	r3, #0
   2191a:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   2191c:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   2191e:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21920:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   21922:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21926:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   21928:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   2192c:	2201      	movs	r2, #1
   2192e:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   21930:	72e3      	strb	r3, [r4, #11]
   21932:	e7de      	b.n	218f2 <hci_internal_cmd_put+0x2d6>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   21934:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   21938:	4805      	ldr	r0, [pc, #20]	; (21950 <hci_internal_cmd_put+0x334>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2193a:	3306      	adds	r3, #6
   2193c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   21940:	f7eb fc34 	bl	d1ac <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   21944:	e70e      	b.n	21764 <hci_internal_cmd_put+0x148>
   21946:	bf00      	nop
   21948:	20003507 	.word	0x20003507
   2194c:	2000320c 	.word	0x2000320c
   21950:	2000350e 	.word	0x2000350e
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21954:	4628      	mov	r0, r5
	switch (opcode)	{
   21956:	f242 015e 	movw	r1, #8286	; 0x205e
   2195a:	f830 3b03 	ldrh.w	r3, [r0], #3
   2195e:	b21a      	sxth	r2, r3
   21960:	428a      	cmp	r2, r1
   21962:	f242 0132 	movw	r1, #8242	; 0x2032
   21966:	f300 8086 	bgt.w	21a76 <hci_internal_cmd_put+0x45a>
   2196a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   2196e:	dc01      	bgt.n	21974 <hci_internal_cmd_put+0x358>
	switch (hci_opcode) {
   21970:	428e      	cmp	r6, r1
   21972:	e067      	b.n	21a44 <hci_internal_cmd_put+0x428>
	switch (opcode)	{
   21974:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   21978:	3b01      	subs	r3, #1
   2197a:	2b5d      	cmp	r3, #93	; 0x5d
   2197c:	d85f      	bhi.n	21a3e <hci_internal_cmd_put+0x422>
   2197e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21982:	008e      	.short	0x008e
   21984:	00a4009b 	.word	0x00a4009b
   21988:	00d7005e 	.word	0x00d7005e
   2198c:	00dd00da 	.word	0x00dd00da
   21990:	00e900e6 	.word	0x00e900e6
   21994:	005e00ec 	.word	0x005e00ec
   21998:	005e005e 	.word	0x005e005e
   2199c:	00ef005e 	.word	0x00ef005e
   219a0:	00fb00f8 	.word	0x00fb00f8
   219a4:	005e00fe 	.word	0x005e00fe
   219a8:	0101005e 	.word	0x0101005e
   219ac:	010d010a 	.word	0x010d010a
   219b0:	005e0116 	.word	0x005e0116
   219b4:	0128011f 	.word	0x0128011f
   219b8:	005e0131 	.word	0x005e0131
   219bc:	005e005e 	.word	0x005e005e
   219c0:	005e005e 	.word	0x005e005e
   219c4:	014f0146 	.word	0x014f0146
   219c8:	015b0158 	.word	0x015b0158
   219cc:	0164015e 	.word	0x0164015e
   219d0:	016a0167 	.word	0x016a0167
   219d4:	005e016d 	.word	0x005e016d
   219d8:	0176005e 	.word	0x0176005e
   219dc:	017c0179 	.word	0x017c0179
   219e0:	018e0185 	.word	0x018e0185
   219e4:	005e0191 	.word	0x005e0191
   219e8:	005e005e 	.word	0x005e005e
   219ec:	005e005e 	.word	0x005e005e
   219f0:	005e005e 	.word	0x005e005e
   219f4:	005e005e 	.word	0x005e005e
   219f8:	005e005e 	.word	0x005e005e
   219fc:	005e005e 	.word	0x005e005e
   21a00:	005e005e 	.word	0x005e005e
   21a04:	005e005e 	.word	0x005e005e
   21a08:	005e005e 	.word	0x005e005e
   21a0c:	005e005e 	.word	0x005e005e
   21a10:	005e005e 	.word	0x005e005e
   21a14:	0194005e 	.word	0x0194005e
   21a18:	005e005e 	.word	0x005e005e
   21a1c:	005e019d 	.word	0x005e019d
   21a20:	005e005e 	.word	0x005e005e
   21a24:	005e005e 	.word	0x005e005e
   21a28:	005e005e 	.word	0x005e005e
   21a2c:	005e005e 	.word	0x005e005e
   21a30:	005e005e 	.word	0x005e005e
   21a34:	005e005e 	.word	0x005e005e
   21a38:	005e005e 	.word	0x005e005e
   21a3c:	0161      	.short	0x0161
	switch (hci_opcode) {
   21a3e:	f242 0332 	movw	r3, #8242	; 0x2032
   21a42:	429e      	cmp	r6, r3
   21a44:	d01f      	beq.n	21a86 <hci_internal_cmd_put+0x46a>
   21a46:	f200 8231 	bhi.w	21eac <hci_internal_cmd_put+0x890>
   21a4a:	f242 0326 	movw	r3, #8230	; 0x2026
   21a4e:	429e      	cmp	r6, r3
   21a50:	f63f ae8b 	bhi.w	2176a <hci_internal_cmd_put+0x14e>
   21a54:	2001      	movs	r0, #1
   21a56:	f242 030c 	movw	r3, #8204	; 0x200c
   21a5a:	429e      	cmp	r6, r3
   21a5c:	f67f ae2a 	bls.w	216b4 <hci_internal_cmd_put+0x98>
   21a60:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   21a64:	4ac7      	ldr	r2, [pc, #796]	; (21d84 <hci_internal_cmd_put+0x768>)
   21a66:	3b0d      	subs	r3, #13
   21a68:	b29b      	uxth	r3, r3
   21a6a:	fa22 f303 	lsr.w	r3, r2, r3
   21a6e:	07db      	lsls	r3, r3, #31
   21a70:	f57f ae78 	bpl.w	21764 <hci_internal_cmd_put+0x148>
   21a74:	e623      	b.n	216be <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   21a76:	f242 037c 	movw	r3, #8316	; 0x207c
   21a7a:	429a      	cmp	r2, r3
   21a7c:	f47f af78 	bne.w	21970 <hci_internal_cmd_put+0x354>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   21a80:	f7eb fbce 	bl	d220 <sdc_hci_cmd_le_set_data_related_address_changes>
   21a84:	e00d      	b.n	21aa2 <hci_internal_cmd_put+0x486>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21a86:	230f      	movs	r3, #15
   21a88:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21a8a:	2304      	movs	r3, #4
   21a8c:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21a8e:	2301      	movs	r3, #1
   21a90:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21a92:	2232      	movs	r2, #50	; 0x32
   21a94:	7162      	strb	r2, [r4, #5]
   21a96:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   21a98:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21a9a:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   21a9c:	e64d      	b.n	2173a <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   21a9e:	f7eb fbc3 	bl	d228 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   21aa2:	f242 0332 	movw	r3, #8242	; 0x2032
   21aa6:	429e      	cmp	r6, r3
   21aa8:	f47f ae12 	bne.w	216d0 <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21aac:	230f      	movs	r3, #15
   21aae:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21ab0:	2304      	movs	r3, #4
   21ab2:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21ab4:	70e0      	strb	r0, [r4, #3]
   21ab6:	e0a8      	b.n	21c0a <hci_internal_cmd_put+0x5ee>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   21ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21abc:	48b2      	ldr	r0, [pc, #712]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   21abe:	3303      	adds	r3, #3
   21ac0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21ac4:	f7eb fb8c 	bl	d1e0 <sdc_hci_cmd_le_read_buffer_size>
   21ac8:	e7eb      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21aca:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21ace:	4dae      	ldr	r5, [pc, #696]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21ad0:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   21ad2:	2208      	movs	r2, #8
   21ad4:	2100      	movs	r1, #0
   21ad6:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21ad8:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21adc:	f005 f891 	bl	26c02 <memset>
	features->params.le_encryption = 1;
   21ae0:	79e3      	ldrb	r3, [r4, #7]
   21ae2:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
   21ae6:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
   21aea:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   21aec:	7a23      	ldrb	r3, [r4, #8]
   21aee:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   21af2:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   21af6:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   21af8:	f242 0332 	movw	r3, #8242	; 0x2032
   21afc:	429e      	cmp	r6, r3
   21afe:	d008      	beq.n	21b12 <hci_internal_cmd_put+0x4f6>
   21b00:	f200 81ce 	bhi.w	21ea0 <hci_internal_cmd_put+0x884>
   21b04:	f242 0326 	movw	r3, #8230	; 0x2026
   21b08:	429e      	cmp	r6, r3
   21b0a:	f240 81a1 	bls.w	21e50 <hci_internal_cmd_put+0x834>
		return 0;
   21b0e:	2000      	movs	r0, #0
   21b10:	e59f      	b.n	21652 <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21b12:	230f      	movs	r3, #15
   21b14:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21b16:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   21b18:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21b1a:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21b1c:	2300      	movs	r3, #0
   21b1e:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21b20:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   21b22:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   21b24:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   21b26:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21b28:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   21b2a:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   21b2e:	e6e2      	b.n	218f6 <hci_internal_cmd_put+0x2da>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   21b30:	f7eb fb83 	bl	d23a <sdc_hci_cmd_le_set_random_address>
   21b34:	e7b5      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   21b36:	f7eb fb6f 	bl	d218 <sdc_hci_cmd_le_set_adv_params>
   21b3a:	e7b2      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   21b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   21b40:	4891      	ldr	r0, [pc, #580]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   21b42:	3301      	adds	r3, #1
   21b44:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   21b48:	f7eb fb48 	bl	d1dc <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   21b4c:	e7a9      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   21b4e:	f7eb fb5f 	bl	d210 <sdc_hci_cmd_le_set_adv_data>
   21b52:	e7a6      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   21b54:	f7eb fb75 	bl	d242 <sdc_hci_cmd_le_set_scan_response_data>
   21b58:	e7a3      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   21b5a:	f7eb fb5b 	bl	d214 <sdc_hci_cmd_le_set_adv_enable>
   21b5e:	e7a0      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   21b60:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   21b64:	4888      	ldr	r0, [pc, #544]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   21b66:	3301      	adds	r3, #1
   21b68:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   21b6c:	f7eb fb3c 	bl	d1e8 <sdc_hci_cmd_le_read_filter_accept_list_size>
   21b70:	e797      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   21b72:	f7eb fb23 	bl	d1bc <sdc_hci_cmd_le_clear_filter_accept_list>
   21b76:	e794      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   21b78:	f7eb fb1c 	bl	d1b4 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   21b7c:	e791      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   21b7e:	f7eb fb41 	bl	d204 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   21b82:	e78e      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   21b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   21b88:	497f      	ldr	r1, [pc, #508]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   21b8a:	3307      	adds	r3, #7
   21b8c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   21b90:	f7eb fb28 	bl	d1e4 <sdc_hci_cmd_le_read_channel_map>
   21b94:	e785      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   21b96:	f7eb fb2d 	bl	d1f4 <sdc_hci_cmd_le_read_remote_features>
   21b9a:	e782      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21b9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   21ba0:	4979      	ldr	r1, [pc, #484]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21ba2:	3310      	adds	r3, #16
   21ba4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   21ba8:	f7eb fb0c 	bl	d1c4 <sdc_hci_cmd_le_encrypt>
   21bac:	e779      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   21bb2:	4875      	ldr	r0, [pc, #468]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21bb4:	3308      	adds	r3, #8
   21bb6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   21bba:	f7eb fb0d 	bl	d1d8 <sdc_hci_cmd_le_rand>
   21bbe:	e770      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   21bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   21bc4:	4970      	ldr	r1, [pc, #448]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   21bc6:	3302      	adds	r3, #2
   21bc8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   21bcc:	f7eb fb00 	bl	d1d0 <sdc_hci_cmd_le_long_term_key_request_reply>
   21bd0:	e767      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   21bd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   21bd6:	496c      	ldr	r1, [pc, #432]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   21bd8:	3302      	adds	r3, #2
   21bda:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   21bde:	f7eb faf3 	bl	d1c8 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   21be2:	e75e      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   21be4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21be8:	3308      	adds	r3, #8
   21bea:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   21bee:	238f      	movs	r3, #143	; 0x8f
   21bf0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   21bf2:	23c0      	movs	r3, #192	; 0xc0
   21bf4:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   21bf6:	f242 0332 	movw	r3, #8242	; 0x2032
   21bfa:	429e      	cmp	r6, r3
   21bfc:	d180      	bne.n	21b00 <hci_internal_cmd_put+0x4e4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21bfe:	230f      	movs	r3, #15
   21c00:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21c02:	2304      	movs	r3, #4
   21c04:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   21c06:	2300      	movs	r3, #0
   21c08:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   21c0a:	2301      	movs	r3, #1
   21c0c:	e741      	b.n	21a92 <hci_internal_cmd_put+0x476>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   21c0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   21c12:	495d      	ldr	r1, [pc, #372]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   21c14:	3302      	adds	r3, #2
   21c16:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   21c1a:	f7eb faff 	bl	d21c <sdc_hci_cmd_le_set_data_length>
   21c1e:	e740      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out +=
   21c20:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   21c24:	4858      	ldr	r0, [pc, #352]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   21c26:	3304      	adds	r3, #4
   21c28:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   21c2c:	f7eb fae6 	bl	d1fc <sdc_hci_cmd_le_read_suggested_default_data_length>
   21c30:	e737      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   21c32:	f7eb fb08 	bl	d246 <sdc_hci_cmd_le_write_suggested_default_data_length>
   21c36:	e734      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_read_local_p256_public_key();
   21c38:	f000 fab4 	bl	221a4 <hci_cmd_le_read_local_p256_public_key>
   21c3c:	e731      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   21c3e:	f007 fde6 	bl	2980e <hci_cmd_le_generate_dhkey>
   21c42:	e72e      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   21c44:	f007 fde6 	bl	29814 <hci_cmd_le_generate_dhkey_v2>
   21c48:	e72b      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   21c4a:	f7eb fab5 	bl	d1b8 <sdc_hci_cmd_le_add_device_to_resolving_list>
   21c4e:	e728      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   21c50:	f7eb fada 	bl	d208 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   21c54:	e725      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_clear_resolving_list();
   21c56:	f7eb fab3 	bl	d1c0 <sdc_hci_cmd_le_clear_resolving_list>
   21c5a:	e722      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   21c5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   21c60:	4849      	ldr	r0, [pc, #292]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   21c62:	3301      	adds	r3, #1
   21c64:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   21c68:	f7eb fac6 	bl	d1f8 <sdc_hci_cmd_le_read_resolving_list_size>
   21c6c:	e719      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   21c6e:	f7eb facd 	bl	d20c <sdc_hci_cmd_le_set_address_resolution_enable>
   21c72:	e716      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   21c74:	f7eb fae3 	bl	d23e <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   21c78:	e713      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   21c7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21c7e:	4842      	ldr	r0, [pc, #264]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   21c80:	3308      	adds	r3, #8
   21c82:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21c86:	f7eb fab1 	bl	d1ec <sdc_hci_cmd_le_read_max_data_length>
   21c8a:	e70a      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21c8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21c90:	493d      	ldr	r1, [pc, #244]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21c92:	3304      	adds	r3, #4
   21c94:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21c98:	f7eb faaa 	bl	d1f0 <sdc_hci_cmd_le_read_phy>
   21c9c:	e701      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   21c9e:	f7eb fac1 	bl	d224 <sdc_hci_cmd_le_set_default_phy>
   21ca2:	e6fe      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   21ca4:	f7eb fac5 	bl	d232 <sdc_hci_cmd_le_set_phy>
   21ca8:	e6fb      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   21caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21cae:	4836      	ldr	r0, [pc, #216]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   21cb0:	3302      	adds	r3, #2
   21cb2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21cb6:	f7eb faa3 	bl	d200 <sdc_hci_cmd_le_read_transmit_power>
   21cba:	e6f2      	b.n	21aa2 <hci_internal_cmd_put+0x486>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   21cbc:	f7eb fabb 	bl	d236 <sdc_hci_cmd_le_set_privacy_mode>
   21cc0:	e6ef      	b.n	21aa2 <hci_internal_cmd_put+0x486>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21cc2:	4628      	mov	r0, r5
	switch (opcode)	{
   21cc4:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   21cc8:	f830 3b03 	ldrh.w	r3, [r0], #3
   21ccc:	4293      	cmp	r3, r2
   21cce:	d823      	bhi.n	21d18 <hci_internal_cmd_put+0x6fc>
   21cd0:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   21cd4:	f67f ace0 	bls.w	21698 <hci_internal_cmd_put+0x7c>
   21cd8:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   21cdc:	3b01      	subs	r3, #1
   21cde:	2b0a      	cmp	r3, #10
   21ce0:	f63f acda 	bhi.w	21698 <hci_internal_cmd_put+0x7c>
   21ce4:	a201      	add	r2, pc, #4	; (adr r2, 21cec <hci_internal_cmd_put+0x6d0>)
   21ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21cea:	bf00      	nop
   21cec:	00021d69 	.word	0x00021d69
   21cf0:	00021d8d 	.word	0x00021d8d
   21cf4:	00021699 	.word	0x00021699
   21cf8:	00021699 	.word	0x00021699
   21cfc:	00021699 	.word	0x00021699
   21d00:	00021de1 	.word	0x00021de1
   21d04:	00021699 	.word	0x00021699
   21d08:	00021699 	.word	0x00021699
   21d0c:	00021dbd 	.word	0x00021dbd
   21d10:	00021dcf 	.word	0x00021dcf
   21d14:	00021de7 	.word	0x00021de7
   21d18:	f503 7240 	add.w	r2, r3, #768	; 0x300
   21d1c:	b292      	uxth	r2, r2
   21d1e:	2a0c      	cmp	r2, #12
   21d20:	f63f acba 	bhi.w	21698 <hci_internal_cmd_put+0x7c>
   21d24:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   21d28:	2b0c      	cmp	r3, #12
   21d2a:	f63f acb5 	bhi.w	21698 <hci_internal_cmd_put+0x7c>
   21d2e:	a201      	add	r2, pc, #4	; (adr r2, 21d34 <hci_internal_cmd_put+0x718>)
   21d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21d34:	00021df9 	.word	0x00021df9
   21d38:	00021e1b 	.word	0x00021e1b
   21d3c:	00021e21 	.word	0x00021e21
   21d40:	00021e27 	.word	0x00021e27
   21d44:	00021e2d 	.word	0x00021e2d
   21d48:	00021e33 	.word	0x00021e33
   21d4c:	00021699 	.word	0x00021699
   21d50:	00021699 	.word	0x00021699
   21d54:	00021699 	.word	0x00021699
   21d58:	00021e39 	.word	0x00021e39
   21d5c:	00021699 	.word	0x00021699
   21d60:	00021699 	.word	0x00021699
   21d64:	00021e3f 	.word	0x00021e3f
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   21d68:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21d6c:	4806      	ldr	r0, [pc, #24]	; (21d88 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   21d6e:	330c      	adds	r3, #12
   21d70:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21d74:	f7df f880 	bl	e78 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   21d78:	f026 0308 	bic.w	r3, r6, #8
   21d7c:	f64f 5202 	movw	r2, #64770	; 0xfd02
   21d80:	4293      	cmp	r3, r2
   21d82:	e06a      	b.n	21e5a <hci_internal_cmd_put+0x83e>
   21d84:	03001241 	.word	0x03001241
   21d88:	2000350e 	.word	0x2000350e
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21d8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21d90:	484b      	ldr	r0, [pc, #300]	; (21ec0 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21d92:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21d94:	2202      	movs	r2, #2
   21d96:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21d98:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21d9c:	f004 ff31 	bl	26c02 <memset>
	cmds->read_version_info = 1;
   21da0:	79e3      	ldrb	r3, [r4, #7]
   21da2:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   21da6:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   21daa:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   21dac:	7a23      	ldrb	r3, [r4, #8]
   21dae:	f023 0307 	bic.w	r3, r3, #7
   21db2:	f043 0307 	orr.w	r3, r3, #7
   21db6:	7223      	strb	r3, [r4, #8]
		return 0;
   21db8:	2000      	movs	r0, #0
   21dba:	e7dd      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21dbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21dc0:	483f      	ldr	r0, [pc, #252]	; (21ec0 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21dc2:	3317      	adds	r3, #23
   21dc4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21dc8:	f7df f80a 	bl	de0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   21dcc:	e7d4      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		*param_length_out +=
   21dce:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21dd2:	483b      	ldr	r0, [pc, #236]	; (21ec0 <hci_internal_cmd_put+0x8a4>)
		*param_length_out +=
   21dd4:	3320      	adds	r3, #32
   21dd6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21dda:	f7de ffb9 	bl	d50 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   21dde:	e7cb      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   21de0:	f7eb f9e2 	bl	d1a8 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   21de4:	e7c8      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   21de6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   21dea:	4835      	ldr	r0, [pc, #212]	; (21ec0 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   21dec:	3301      	adds	r3, #1
   21dee:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   21df2:	f7eb f9c5 	bl	d180 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   21df6:	e7bf      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21df8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21dfc:	4830      	ldr	r0, [pc, #192]	; (21ec0 <hci_internal_cmd_put+0x8a4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21dfe:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21e00:	2202      	movs	r2, #2
   21e02:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21e04:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21e08:	f004 fefb 	bl	26c02 <memset>
	cmds->read_supported_vs_commands = 1;
   21e0c:	79e3      	ldrb	r3, [r4, #7]
   21e0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21e12:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   21e16:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   21e18:	e7ce      	b.n	21db8 <hci_internal_cmd_put+0x79c>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   21e1a:	f7eb f9a4 	bl	d166 <sdc_hci_cmd_vs_llpm_mode_set>
   21e1e:	e7ab      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   21e20:	f7eb f99d 	bl	d15e <sdc_hci_cmd_vs_conn_update>
   21e24:	e7a8      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   21e26:	f7eb f992 	bl	d14e <sdc_hci_cmd_vs_conn_event_extend>
   21e2a:	e7a5      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   21e2c:	f7eb f9a1 	bl	d172 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   21e30:	e7a2      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   21e32:	f7eb f996 	bl	d162 <sdc_hci_cmd_vs_event_length_set>
   21e36:	e79f      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   21e38:	f7eb f997 	bl	d16a <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   21e3c:	e79c      	b.n	21d78 <hci_internal_cmd_put+0x75c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   21e3e:	f7eb f99d 	bl	d17c <sdc_hci_cmd_vs_set_adv_randomness>
   21e42:	e799      	b.n	21d78 <hci_internal_cmd_put+0x75c>
	switch (hci_opcode) {
   21e44:	f242 0326 	movw	r3, #8230	; 0x2026
   21e48:	429e      	cmp	r6, r3
   21e4a:	f67f ae04 	bls.w	21a56 <hci_internal_cmd_put+0x43a>
   21e4e:	e489      	b.n	21764 <hci_internal_cmd_put+0x148>
		return 0;
   21e50:	2000      	movs	r0, #0
   21e52:	e600      	b.n	21a56 <hci_internal_cmd_put+0x43a>
	switch (hci_opcode) {
   21e54:	f240 431d 	movw	r3, #1053	; 0x41d
   21e58:	429e      	cmp	r6, r3
   21e5a:	f43f ac30 	beq.w	216be <hci_internal_cmd_put+0xa2>
   21e5e:	e481      	b.n	21764 <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   21e60:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   21e62:	e47f      	b.n	21764 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   21e64:	4a17      	ldr	r2, [pc, #92]	; (21ec4 <hci_internal_cmd_put+0x8a8>)
   21e66:	3b2d      	subs	r3, #45	; 0x2d
   21e68:	b29b      	uxth	r3, r3
   21e6a:	fa22 f303 	lsr.w	r3, r2, r3
   21e6e:	07da      	lsls	r2, r3, #31
   21e70:	f57f ac78 	bpl.w	21764 <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21e74:	230f      	movs	r3, #15
   21e76:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21e78:	2304      	movs	r3, #4
   21e7a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   21e7c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   21e7e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   21e80:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21e82:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   21e86:	2301      	movs	r3, #1
   21e88:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   21e8a:	f242 0383 	movw	r3, #8323	; 0x2083
   21e8e:	429e      	cmp	r6, r3
   21e90:	f47f ad31 	bne.w	218f6 <hci_internal_cmd_put+0x2da>
		&&
   21e94:	7863      	ldrb	r3, [r4, #1]
   21e96:	2b0e      	cmp	r3, #14
   21e98:	f47f ad2d 	bne.w	218f6 <hci_internal_cmd_put+0x2da>
		cmd_complete_or_status.occurred = false;
   21e9c:	2300      	movs	r3, #0
   21e9e:	e44c      	b.n	2173a <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   21ea0:	f242 0385 	movw	r3, #8325	; 0x2085
   21ea4:	429e      	cmp	r6, r3
   21ea6:	d905      	bls.n	21eb4 <hci_internal_cmd_put+0x898>
		return 0;
   21ea8:	2000      	movs	r0, #0
   21eaa:	e45b      	b.n	21764 <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   21eac:	f242 0385 	movw	r3, #8325	; 0x2085
   21eb0:	2001      	movs	r0, #1
   21eb2:	e414      	b.n	216de <hci_internal_cmd_put+0xc2>
		return 0;
   21eb4:	2000      	movs	r0, #0
   21eb6:	e414      	b.n	216e2 <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   21eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21ebc:	e51c      	b.n	218f8 <hci_internal_cmd_put+0x2dc>
   21ebe:	bf00      	nop
   21ec0:	2000350e 	.word	0x2000350e
   21ec4:	01000401 	.word	0x01000401

00021ec8 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   21ec8:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   21eca:	4c09      	ldr	r4, [pc, #36]	; (21ef0 <hci_internal_msg_get+0x28>)
   21ecc:	7823      	ldrb	r3, [r4, #0]
{
   21ece:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   21ed0:	b91b      	cbnz	r3, 21eda <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   21ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   21ed6:	f7eb b91a 	b.w	d10e <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   21eda:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   21edc:	1c61      	adds	r1, r4, #1
   21ede:	3202      	adds	r2, #2
   21ee0:	f004 fe84 	bl	26bec <memcpy>
		cmd_complete_or_status.occurred = false;
   21ee4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   21ee6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   21ee8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   21eea:	702b      	strb	r3, [r5, #0]
}
   21eec:	bd38      	pop	{r3, r4, r5, pc}
   21eee:	bf00      	nop
   21ef0:	20003507 	.word	0x20003507

00021ef4 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   21ef4:	b570      	push	{r4, r5, r6, lr}
   21ef6:	4605      	mov	r5, r0
   21ef8:	460e      	mov	r6, r1
   21efa:	4c08      	ldr	r4, [pc, #32]	; (21f1c <bt_rand+0x28>)
   21efc:	4620      	mov	r0, r4
   21efe:	f007 fd1e 	bl	2993e <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   21f02:	b138      	cbz	r0, 21f14 <bt_rand+0x20>
   21f04:	68a3      	ldr	r3, [r4, #8]
   21f06:	b2b2      	uxth	r2, r6
   21f08:	4629      	mov	r1, r5
   21f0a:	4620      	mov	r0, r4
   21f0c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   21f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21f12:	4718      	bx	r3
   21f14:	f06f 0012 	mvn.w	r0, #18
   21f18:	bd70      	pop	{r4, r5, r6, pc}
   21f1a:	bf00      	nop
   21f1c:	0002a550 	.word	0x0002a550

00021f20 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   21f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   21f22:	4b25      	ldr	r3, [pc, #148]	; (21fb8 <ecdh_p256_common_secret+0x98>)
   21f24:	4925      	ldr	r1, [pc, #148]	; (21fbc <ecdh_p256_common_secret+0x9c>)
   21f26:	f103 0220 	add.w	r2, r3, #32
   21f2a:	2800      	cmp	r0, #0
   21f2c:	bf08      	it	eq
   21f2e:	4619      	moveq	r1, r3
{
   21f30:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   21f32:	4610      	mov	r0, r2
   21f34:	f002 fcb4 	bl	248a0 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   21f38:	4604      	mov	r4, r0
   21f3a:	b190      	cbz	r0, 21f62 <ecdh_p256_common_secret+0x42>
		LOG_ERR("public key is not valid (err %d)", err);
   21f3c:	466d      	mov	r5, sp
   21f3e:	b088      	sub	sp, #32
   21f40:	466a      	mov	r2, sp
   21f42:	4b1f      	ldr	r3, [pc, #124]	; (21fc0 <ecdh_p256_common_secret+0xa0>)
   21f44:	6153      	str	r3, [r2, #20]
   21f46:	4b1f      	ldr	r3, [pc, #124]	; (21fc4 <ecdh_p256_common_secret+0xa4>)
   21f48:	e9c2 3006 	strd	r3, r0, [r2, #24]
   21f4c:	2304      	movs	r3, #4
   21f4e:	f842 3f10 	str.w	r3, [r2, #16]!
   21f52:	481d      	ldr	r0, [pc, #116]	; (21fc8 <ecdh_p256_common_secret+0xa8>)
   21f54:	2300      	movs	r3, #0
   21f56:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21f5a:	f7f1 fce5 	bl	13928 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   21f5e:	2412      	movs	r4, #18
   21f60:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21f66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21f6a:	2001      	movs	r0, #1
   21f6c:	f7f3 ff80 	bl	15e70 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   21f70:	f100 060c 	add.w	r6, r0, #12
   21f74:	2102      	movs	r1, #2
   21f76:	4605      	mov	r5, r0
   21f78:	4630      	mov	r0, r6
   21f7a:	f007 f8a5 	bl	290c8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   21f7e:	233e      	movs	r3, #62	; 0x3e
   21f80:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21f82:	2322      	movs	r3, #34	; 0x22
   21f84:	7043      	strb	r3, [r0, #1]
   21f86:	2101      	movs	r1, #1
   21f88:	4630      	mov	r0, r6
   21f8a:	f007 f89d 	bl	290c8 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   21f8e:	2309      	movs	r3, #9
   21f90:	7003      	strb	r3, [r0, #0]
   21f92:	2121      	movs	r1, #33	; 0x21
   21f94:	4630      	mov	r0, r6
   21f96:	f007 f897 	bl	290c8 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   21f9a:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   21f9e:	b134      	cbz	r4, 21fae <ecdh_p256_common_secret+0x8e>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   21fa0:	2220      	movs	r2, #32
   21fa2:	21ff      	movs	r1, #255	; 0xff
   21fa4:	f004 fe2d 	bl	26c02 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   21fa8:	4628      	mov	r0, r5
   21faa:	46bd      	mov	sp, r7
   21fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   21fae:	4907      	ldr	r1, [pc, #28]	; (21fcc <ecdh_p256_common_secret+0xac>)
   21fb0:	f007 fc23 	bl	297fa <sys_memcpy_swap.constprop.0>
   21fb4:	e7f8      	b.n	21fa8 <ecdh_p256_common_secret+0x88>
   21fb6:	bf00      	nop
   21fb8:	2000354e 	.word	0x2000354e
   21fbc:	0002f24a 	.word	0x0002f24a
   21fc0:	0002f1e5 	.word	0x0002f1e5
   21fc4:	0002f22b 	.word	0x0002f22b
   21fc8:	0002a880 	.word	0x0002a880
   21fcc:	2000356e 	.word	0x2000356e

00021fd0 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   21fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21fd4:	4c44      	ldr	r4, [pc, #272]	; (220e8 <ecdh_cmd_process+0x118>)
   21fd6:	f3bf 8f5b 	dmb	ish
   21fda:	6823      	ldr	r3, [r4, #0]
   21fdc:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   21fe0:	2b02      	cmp	r3, #2
{
   21fe2:	af00      	add	r7, sp, #0
   21fe4:	46a0      	mov	r8, r4
	switch (atomic_get(&cmd)) {
   21fe6:	d058      	beq.n	2209a <ecdh_cmd_process+0xca>
   21fe8:	2b04      	cmp	r3, #4
   21fea:	d05b      	beq.n	220a4 <ecdh_cmd_process+0xd4>
   21fec:	2b01      	cmp	r3, #1
   21fee:	d15b      	bne.n	220a8 <ecdh_cmd_process+0xd8>
		err = bt_rand(ecdh.private_key_be, 32);
   21ff0:	4c3e      	ldr	r4, [pc, #248]	; (220ec <ecdh_cmd_process+0x11c>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   21ff2:	4e3f      	ldr	r6, [pc, #252]	; (220f0 <ecdh_cmd_process+0x120>)
		err = bt_rand(ecdh.private_key_be, 32);
   21ff4:	2120      	movs	r1, #32
   21ff6:	4620      	mov	r0, r4
   21ff8:	f7ff ff7c 	bl	21ef4 <bt_rand>
		if (err) {
   21ffc:	2800      	cmp	r0, #0
   21ffe:	d141      	bne.n	22084 <ecdh_cmd_process+0xb4>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   22000:	2220      	movs	r2, #32
   22002:	4631      	mov	r1, r6
   22004:	4620      	mov	r0, r4
   22006:	f004 fde1 	bl	26bcc <memcmp>
   2200a:	2800      	cmp	r0, #0
   2200c:	d0f2      	beq.n	21ff4 <ecdh_cmd_process+0x24>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   2200e:	4839      	ldr	r0, [pc, #228]	; (220f4 <ecdh_cmd_process+0x124>)
   22010:	4621      	mov	r1, r4
   22012:	f002 fc31 	bl	24878 <ocrypto_ecdh_p256_public_key>
	} while (err);
   22016:	4605      	mov	r5, r0
   22018:	2800      	cmp	r0, #0
   2201a:	d1eb      	bne.n	21ff4 <ecdh_cmd_process+0x24>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   2201c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22024:	2001      	movs	r0, #1
   22026:	f7f3 ff23 	bl	15e70 <bt_buf_get_rx>
   2202a:	f100 060c 	add.w	r6, r0, #12
   2202e:	2102      	movs	r1, #2
   22030:	4604      	mov	r4, r0
   22032:	4630      	mov	r0, r6
   22034:	f007 f848 	bl	290c8 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   22038:	233e      	movs	r3, #62	; 0x3e
   2203a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   2203c:	2342      	movs	r3, #66	; 0x42
   2203e:	7043      	strb	r3, [r0, #1]
   22040:	2101      	movs	r1, #1
   22042:	4630      	mov	r0, r6
   22044:	f007 f840 	bl	290c8 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   22048:	2308      	movs	r3, #8
   2204a:	7003      	strb	r3, [r0, #0]
   2204c:	2141      	movs	r1, #65	; 0x41
   2204e:	4630      	mov	r0, r6
   22050:	f007 f83a 	bl	290c8 <net_buf_simple_add>
   22054:	4606      	mov	r6, r0
	evt->status = status;
   22056:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   2205a:	b1ad      	cbz	r5, 22088 <ecdh_cmd_process+0xb8>
		(void)memset(evt->key, 0, sizeof(evt->key));
   2205c:	2240      	movs	r2, #64	; 0x40
   2205e:	2100      	movs	r1, #0
   22060:	f004 fdcf 	bl	26c02 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22064:	f3bf 8f5b 	dmb	ish
   22068:	2300      	movs	r3, #0
   2206a:	e858 2f00 	ldrex	r2, [r8]
   2206e:	e848 3100 	strex	r1, r3, [r8]
   22072:	2900      	cmp	r1, #0
   22074:	d1f9      	bne.n	2206a <ecdh_cmd_process+0x9a>
   22076:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   2207a:	b38c      	cbz	r4, 220e0 <ecdh_cmd_process+0x110>
		bt_recv(buf);
   2207c:	4620      	mov	r0, r4
   2207e:	f7f5 fa9f 	bl	175c0 <bt_recv>
	}
}
   22082:	e02d      	b.n	220e0 <ecdh_cmd_process+0x110>
			return BT_HCI_ERR_UNSPECIFIED;
   22084:	251f      	movs	r5, #31
   22086:	e7c9      	b.n	2201c <ecdh_cmd_process+0x4c>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   22088:	491a      	ldr	r1, [pc, #104]	; (220f4 <ecdh_cmd_process+0x124>)
   2208a:	f007 fbb6 	bl	297fa <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   2208e:	3120      	adds	r1, #32
   22090:	f106 0021 	add.w	r0, r6, #33	; 0x21
   22094:	f007 fbb1 	bl	297fa <sys_memcpy_swap.constprop.0>
		break;
   22098:	e7e4      	b.n	22064 <ecdh_cmd_process+0x94>
		buf = ecdh_p256_common_secret(false);
   2209a:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   2209c:	f7ff ff40 	bl	21f20 <ecdh_p256_common_secret>
   220a0:	4604      	mov	r4, r0
		break;
   220a2:	e7df      	b.n	22064 <ecdh_cmd_process+0x94>
		buf = ecdh_p256_common_secret(true);
   220a4:	2001      	movs	r0, #1
   220a6:	e7f9      	b.n	2209c <ecdh_cmd_process+0xcc>
		LOG_WRN("Unknown command");
   220a8:	466d      	mov	r5, sp
   220aa:	b088      	sub	sp, #32
   220ac:	466a      	mov	r2, sp
   220ae:	4b12      	ldr	r3, [pc, #72]	; (220f8 <ecdh_cmd_process+0x128>)
   220b0:	6153      	str	r3, [r2, #20]
   220b2:	4b12      	ldr	r3, [pc, #72]	; (220fc <ecdh_cmd_process+0x12c>)
   220b4:	6193      	str	r3, [r2, #24]
   220b6:	2303      	movs	r3, #3
   220b8:	f842 3f10 	str.w	r3, [r2, #16]!
   220bc:	2300      	movs	r3, #0
   220be:	4810      	ldr	r0, [pc, #64]	; (22100 <ecdh_cmd_process+0x130>)
   220c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   220c4:	f7f1 fc30 	bl	13928 <z_impl_z_log_msg_static_create>
   220c8:	f3bf 8f5b 	dmb	ish
   220cc:	46ad      	mov	sp, r5
   220ce:	2300      	movs	r3, #0
   220d0:	e854 2f00 	ldrex	r2, [r4]
   220d4:	e844 3100 	strex	r1, r3, [r4]
   220d8:	2900      	cmp	r1, #0
   220da:	d1f9      	bne.n	220d0 <ecdh_cmd_process+0x100>
   220dc:	f3bf 8f5b 	dmb	ish
}
   220e0:	46bd      	mov	sp, r7
   220e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   220e6:	bf00      	nop
   220e8:	20003220 	.word	0x20003220
   220ec:	2000354e 	.word	0x2000354e
   220f0:	0002f24a 	.word	0x0002f24a
   220f4:	2000356e 	.word	0x2000356e
   220f8:	0002f20a 	.word	0x0002f20a
   220fc:	0002f239 	.word	0x0002f239
   22100:	0002a880 	.word	0x0002a880

00022104 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   22104:	b510      	push	{r4, lr}
   22106:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   22108:	2210      	movs	r2, #16
   2210a:	2100      	movs	r1, #0
   2210c:	a801      	add	r0, sp, #4
   2210e:	f004 fd78 	bl	26c02 <memset>
   22112:	4c0b      	ldr	r4, [pc, #44]	; (22140 <ecdh_thread+0x3c>)
   22114:	9405      	str	r4, [sp, #20]
   22116:	2301      	movs	r3, #1
   22118:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   2211c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22124:	2101      	movs	r1, #1
   22126:	a801      	add	r0, sp, #4
   22128:	f002 fafc 	bl	24724 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   2212c:	4620      	mov	r0, r4
   2212e:	f008 f987 	bl	2a440 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   22132:	9b04      	ldr	r3, [sp, #16]
   22134:	f36f 3394 	bfc	r3, #14, #7
   22138:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   2213a:	f7ff ff49 	bl	21fd0 <ecdh_cmd_process>
	while (true) {
   2213e:	e7ed      	b.n	2211c <ecdh_thread+0x18>
   22140:	20003210 	.word	0x20003210

00022144 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   22144:	b510      	push	{r4, lr}
   22146:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   22148:	480e      	ldr	r0, [pc, #56]	; (22184 <hci_ecdh_init+0x40>)
   2214a:	f008 f974 	bl	2a436 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2214e:	4c0e      	ldr	r4, [pc, #56]	; (22188 <hci_ecdh_init+0x44>)
   22150:	490e      	ldr	r1, [pc, #56]	; (2218c <hci_ecdh_init+0x48>)
   22152:	2200      	movs	r2, #0
   22154:	2300      	movs	r3, #0
   22156:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2215a:	2300      	movs	r3, #0
   2215c:	220a      	movs	r2, #10
   2215e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   22162:	e9cd 3301 	strd	r3, r3, [sp, #4]
   22166:	9300      	str	r3, [sp, #0]
   22168:	f44f 7262 	mov.w	r2, #904	; 0x388
   2216c:	4b08      	ldr	r3, [pc, #32]	; (22190 <hci_ecdh_init+0x4c>)
   2216e:	4620      	mov	r0, r4
   22170:	f001 f9ba 	bl	234e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   22174:	4907      	ldr	r1, [pc, #28]	; (22194 <hci_ecdh_init+0x50>)
   22176:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   22178:	b008      	add	sp, #32
   2217a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2217e:	f007 bca4 	b.w	29aca <z_impl_k_thread_name_set>
   22182:	bf00      	nop
   22184:	20003210 	.word	0x20003210
   22188:	20002b70 	.word	0x20002b70
   2218c:	200051c0 	.word	0x200051c0
   22190:	00022105 	.word	0x00022105
   22194:	0002f21e 	.word	0x0002f21e

00022198 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   22198:	4801      	ldr	r0, [pc, #4]	; (221a0 <hci_ecdh_uninit+0x8>)
   2219a:	f7f3 ba11 	b.w	155c0 <z_impl_k_thread_abort>
   2219e:	bf00      	nop
   221a0:	20002b70 	.word	0x20002b70

000221a4 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   221a4:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   221a6:	4b0b      	ldr	r3, [pc, #44]	; (221d4 <hci_cmd_le_read_local_p256_public_key+0x30>)
   221a8:	f3bf 8f5b 	dmb	ish
   221ac:	2201      	movs	r2, #1
   221ae:	e853 1f00 	ldrex	r1, [r3]
   221b2:	2900      	cmp	r1, #0
   221b4:	d103      	bne.n	221be <hci_cmd_le_read_local_p256_public_key+0x1a>
   221b6:	e843 2000 	strex	r0, r2, [r3]
   221ba:	2800      	cmp	r0, #0
   221bc:	d1f7      	bne.n	221ae <hci_cmd_le_read_local_p256_public_key+0xa>
   221be:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   221c2:	d105      	bne.n	221d0 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   221c4:	4804      	ldr	r0, [pc, #16]	; (221d8 <hci_cmd_le_read_local_p256_public_key+0x34>)
   221c6:	2100      	movs	r1, #0
   221c8:	f002 fb08 	bl	247dc <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   221cc:	2000      	movs	r0, #0
}
   221ce:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   221d0:	200c      	movs	r0, #12
   221d2:	e7fc      	b.n	221ce <hci_cmd_le_read_local_p256_public_key+0x2a>
   221d4:	20003220 	.word	0x20003220
   221d8:	20003210 	.word	0x20003210

000221dc <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   221dc:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   221de:	2900      	cmp	r1, #0
   221e0:	4b11      	ldr	r3, [pc, #68]	; (22228 <cmd_le_generate_dhkey+0x4c>)
   221e2:	f3bf 8f5b 	dmb	ish
{
   221e6:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   221e8:	bf0c      	ite	eq
   221ea:	2202      	moveq	r2, #2
   221ec:	2204      	movne	r2, #4
   221ee:	e853 1f00 	ldrex	r1, [r3]
   221f2:	2900      	cmp	r1, #0
   221f4:	d103      	bne.n	221fe <cmd_le_generate_dhkey+0x22>
   221f6:	e843 2000 	strex	r0, r2, [r3]
   221fa:	2800      	cmp	r0, #0
   221fc:	d1f7      	bne.n	221ee <cmd_le_generate_dhkey+0x12>
   221fe:	f3bf 8f5b 	dmb	ish
   22202:	d10e      	bne.n	22222 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   22204:	4621      	mov	r1, r4
   22206:	4809      	ldr	r0, [pc, #36]	; (2222c <cmd_le_generate_dhkey+0x50>)
   22208:	f007 faf7 	bl	297fa <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   2220c:	4808      	ldr	r0, [pc, #32]	; (22230 <cmd_le_generate_dhkey+0x54>)
   2220e:	f104 0120 	add.w	r1, r4, #32
   22212:	f007 faf2 	bl	297fa <sys_memcpy_swap.constprop.0>
   22216:	4807      	ldr	r0, [pc, #28]	; (22234 <cmd_le_generate_dhkey+0x58>)
   22218:	2100      	movs	r1, #0
   2221a:	f002 fadf 	bl	247dc <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   2221e:	2000      	movs	r0, #0
}
   22220:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22222:	200c      	movs	r0, #12
   22224:	e7fc      	b.n	22220 <cmd_le_generate_dhkey+0x44>
   22226:	bf00      	nop
   22228:	20003220 	.word	0x20003220
   2222c:	2000356e 	.word	0x2000356e
   22230:	2000358e 	.word	0x2000358e
   22234:	20003210 	.word	0x20003210

00022238 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   22238:	4901      	ldr	r1, [pc, #4]	; (22240 <mpsl_low_prio_irq_handler+0x8>)
   2223a:	4802      	ldr	r0, [pc, #8]	; (22244 <mpsl_low_prio_irq_handler+0xc>)
   2223c:	f007 bda9 	b.w	29d92 <k_work_submit_to_queue>
   22240:	20003254 	.word	0x20003254
   22244:	20002bf0 	.word	0x20002bf0

00022248 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   22248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2224a:	2332      	movs	r3, #50	; 0x32
   2224c:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   22250:	4a13      	ldr	r2, [pc, #76]	; (222a0 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   22252:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   22254:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   22256:	2119      	movs	r1, #25
   22258:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2225a:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   2225e:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   22262:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   22266:	f7ea f91b 	bl	c4a0 <mpsl_init>
	if (err) {
   2226a:	4604      	mov	r4, r0
   2226c:	b9a0      	cbnz	r0, 22298 <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   2226e:	480d      	ldr	r0, [pc, #52]	; (222a4 <mpsl_lib_init_sys+0x5c>)
   22270:	4629      	mov	r1, r5
   22272:	f7ee fc2c 	bl	10ace <mpsl_timeslot_session_count_set>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   22276:	4604      	mov	r4, r0
   22278:	b970      	cbnz	r0, 22298 <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2227a:	4601      	mov	r1, r0
   2227c:	462a      	mov	r2, r5
   2227e:	2008      	movs	r0, #8
   22280:	f7f2 fc86 	bl	14b90 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   22284:	462a      	mov	r2, r5
   22286:	4621      	mov	r1, r4
   22288:	200b      	movs	r0, #11
   2228a:	f7f2 fc81 	bl	14b90 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2228e:	462a      	mov	r2, r5
   22290:	4621      	mov	r1, r4
   22292:	4628      	mov	r0, r5
   22294:	f7f2 fc7c 	bl	14b90 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   22298:	4620      	mov	r0, r4
   2229a:	b003      	add	sp, #12
   2229c:	bd30      	pop	{r4, r5, pc}
   2229e:	bf00      	nop
   222a0:	000222a9 	.word	0x000222a9
   222a4:	20003224 	.word	0x20003224

000222a8 <m_assert_handler>:
{
   222a8:	b598      	push	{r3, r4, r7, lr}
   222aa:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   222ac:	466c      	mov	r4, sp
   222ae:	b08a      	sub	sp, #40	; 0x28
   222b0:	466a      	mov	r2, sp
   222b2:	4b0d      	ldr	r3, [pc, #52]	; (222e8 <m_assert_handler+0x40>)
   222b4:	6153      	str	r3, [r2, #20]
   222b6:	4b0d      	ldr	r3, [pc, #52]	; (222ec <m_assert_handler+0x44>)
   222b8:	6211      	str	r1, [r2, #32]
   222ba:	e9c2 3006 	strd	r3, r0, [r2, #24]
   222be:	f240 3301 	movw	r3, #769	; 0x301
   222c2:	8493      	strh	r3, [r2, #36]	; 0x24
   222c4:	4b0a      	ldr	r3, [pc, #40]	; (222f0 <m_assert_handler+0x48>)
   222c6:	f842 3f10 	str.w	r3, [r2, #16]!
   222ca:	480a      	ldr	r0, [pc, #40]	; (222f4 <m_assert_handler+0x4c>)
   222cc:	2300      	movs	r3, #0
   222ce:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   222d2:	f7f1 fb29 	bl	13928 <z_impl_z_log_msg_static_create>
   222d6:	46a5      	mov	sp, r4
	k_oops();
   222d8:	4040      	eors	r0, r0
   222da:	f380 8811 	msr	BASEPRI, r0
   222de:	f04f 0003 	mov.w	r0, #3
   222e2:	df02      	svc	2
}
   222e4:	46bd      	mov	sp, r7
   222e6:	bd98      	pop	{r3, r4, r7, pc}
   222e8:	0002f276 	.word	0x0002f276
   222ec:	0002f298 	.word	0x0002f298
   222f0:	01000005 	.word	0x01000005
   222f4:	0002a8f8 	.word	0x0002a8f8

000222f8 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   222f8:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   222fa:	4d0d      	ldr	r5, [pc, #52]	; (22330 <mpsl_low_prio_init+0x38>)
   222fc:	490d      	ldr	r1, [pc, #52]	; (22334 <mpsl_low_prio_init+0x3c>)
   222fe:	2400      	movs	r4, #0
   22300:	9400      	str	r4, [sp, #0]
   22302:	f06f 0309 	mvn.w	r3, #9
   22306:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2230a:	4628      	mov	r0, r5
   2230c:	f001 fc1e 	bl	23b4c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   22310:	4909      	ldr	r1, [pc, #36]	; (22338 <mpsl_low_prio_init+0x40>)
   22312:	4628      	mov	r0, r5
   22314:	f007 fbd9 	bl	29aca <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   22318:	4908      	ldr	r1, [pc, #32]	; (2233c <mpsl_low_prio_init+0x44>)
   2231a:	4809      	ldr	r0, [pc, #36]	; (22340 <mpsl_low_prio_init+0x48>)
   2231c:	f007 fd0c 	bl	29d38 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   22320:	4622      	mov	r2, r4
   22322:	2104      	movs	r1, #4
   22324:	2019      	movs	r0, #25
   22326:	f7f2 fc33 	bl	14b90 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2232a:	4620      	mov	r0, r4
   2232c:	b003      	add	sp, #12
   2232e:	bd30      	pop	{r4, r5, pc}
   22330:	20002bf0 	.word	0x20002bf0
   22334:	200055c0 	.word	0x200055c0
   22338:	0002f28e 	.word	0x0002f28e
   2233c:	00029843 	.word	0x00029843
   22340:	20003254 	.word	0x20003254

00022344 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22344:	4b01      	ldr	r3, [pc, #4]	; (2234c <mpsl_hfclk_callback+0x8>)
   22346:	2000      	movs	r0, #0
   22348:	681b      	ldr	r3, [r3, #0]
   2234a:	4718      	bx	r3
   2234c:	20003264 	.word	0x20003264

00022350 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   22350:	b120      	cbz	r0, 2235c <nrfx_clock_start+0xc>
   22352:	2801      	cmp	r0, #1
   22354:	d106      	bne.n	22364 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   22356:	4804      	ldr	r0, [pc, #16]	; (22368 <nrfx_clock_start+0x18>)
   22358:	f7e9 bf04 	b.w	c164 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2235c:	4b03      	ldr	r3, [pc, #12]	; (2236c <nrfx_clock_start+0x1c>)
   2235e:	2001      	movs	r0, #1
   22360:	681b      	ldr	r3, [r3, #0]
   22362:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   22364:	4770      	bx	lr
   22366:	bf00      	nop
   22368:	00022345 	.word	0x00022345
   2236c:	20003264 	.word	0x20003264

00022370 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   22370:	4b01      	ldr	r3, [pc, #4]	; (22378 <nrfx_clock_init+0x8>)
   22372:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   22374:	4801      	ldr	r0, [pc, #4]	; (2237c <nrfx_clock_init+0xc>)
   22376:	4770      	bx	lr
   22378:	20003264 	.word	0x20003264
   2237c:	0bad0000 	.word	0x0bad0000

00022380 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   22380:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22382:	481d      	ldr	r0, [pc, #116]	; (223f8 <timeslot_callback+0x78>)
   22384:	f3bf 8f5b 	dmb	ish
   22388:	6803      	ldr	r3, [r0, #0]
   2238a:	f3bf 8f5b 	dmb	ish
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);

	if (atomic_get(&_context.timeout_occured)) {
   2238e:	b923      	cbnz	r3, 2239a <timeslot_callback+0x1a>
		return NULL;
	}

	switch (signal) {
   22390:	2906      	cmp	r1, #6
   22392:	d804      	bhi.n	2239e <timeslot_callback+0x1e>
   22394:	2904      	cmp	r1, #4
   22396:	d823      	bhi.n	223e0 <timeslot_callback+0x60>
   22398:	b139      	cbz	r1, 223aa <timeslot_callback+0x2a>
		return NULL;
   2239a:	2000      	movs	r0, #0
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
}
   2239c:	bd10      	pop	{r4, pc}
	switch (signal) {
   2239e:	2907      	cmp	r1, #7
   223a0:	d1fb      	bne.n	2239a <timeslot_callback+0x1a>
	z_impl_k_sem_give(sem);
   223a2:	3840      	subs	r0, #64	; 0x40
   223a4:	f001 fa2e 	bl	23804 <z_impl_k_sem_give>
}
   223a8:	e7f7      	b.n	2239a <timeslot_callback+0x1a>
		rc = _context.op_desc->handler(_context.op_desc->context);
   223aa:	f850 3c20 	ldr.w	r3, [r0, #-32]
   223ae:	f1a0 0440 	sub.w	r4, r0, #64	; 0x40
   223b2:	e9d3 2000 	ldrd	r2, r0, [r3]
   223b6:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   223b8:	2801      	cmp	r0, #1
   223ba:	d005      	beq.n	223c8 <timeslot_callback+0x48>
			_context.return_param.callback_action =
   223bc:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   223be:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   223c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return NULL;
   223c4:	480d      	ldr	r0, [pc, #52]	; (223fc <timeslot_callback+0x7c>)
   223c6:	e7e9      	b.n	2239c <timeslot_callback+0x1c>
			_context.timeslot_request.params.earliest.timeout_us =
   223c8:	f247 5330 	movw	r3, #30000	; 0x7530
   223cc:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   223ce:	2303      	movs	r3, #3
   223d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   223d4:	f104 0324 	add.w	r3, r4, #36	; 0x24
			_context.timeslot_request.params.earliest.priority =
   223d8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   223dc:	63a3      	str	r3, [r4, #56]	; 0x38
   223de:	e7f1      	b.n	223c4 <timeslot_callback+0x44>
	_context.timeslot_request.params.earliest.priority =
   223e0:	f800 3c17 	strb.w	r3, [r0, #-23]
	_context.timeslot_request.params.earliest.timeout_us =
   223e4:	4b06      	ldr	r3, [pc, #24]	; (22400 <timeslot_callback+0x80>)
   223e6:	f840 3c10 	str.w	r3, [r0, #-16]
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   223ea:	f1a0 011c 	sub.w	r1, r0, #28
	_context.timeslot_request.params.earliest.priority =
   223ee:	3840      	subs	r0, #64	; 0x40
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   223f0:	7e00      	ldrb	r0, [r0, #24]
   223f2:	f7ee fb10 	bl	10a16 <mpsl_timeslot_request>
}
   223f6:	e7d0      	b.n	2239a <timeslot_callback+0x1a>
   223f8:	200032a8 	.word	0x200032a8
   223fc:	2000329c 	.word	0x2000329c
   22400:	0f423fff 	.word	0x0f423fff

00022404 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   22404:	4802      	ldr	r0, [pc, #8]	; (22410 <nrf_flash_sync_init+0xc>)
   22406:	2201      	movs	r2, #1
   22408:	2100      	movs	r1, #0
   2240a:	f007 bc12 	b.w	29c32 <z_impl_k_sem_init>
   2240e:	bf00      	nop
   22410:	20003268 	.word	0x20003268

00022414 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   22414:	4b01      	ldr	r3, [pc, #4]	; (2241c <nrf_flash_sync_set_context+0x8>)
   22416:	61d8      	str	r0, [r3, #28]
}
   22418:	4770      	bx	lr
   2241a:	bf00      	nop
   2241c:	20003268 	.word	0x20003268

00022420 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   22420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   22428:	af00      	add	r7, sp, #0
   2242a:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2242c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22430:	f7fe fee6 	bl	21200 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   22434:	4941      	ldr	r1, [pc, #260]	; (2253c <nrf_flash_sync_exe+0x11c>)
   22436:	4842      	ldr	r0, [pc, #264]	; (22540 <nrf_flash_sync_exe+0x120>)
   22438:	f7e6 fbce 	bl	8bd8 <mpsl_timeslot_session_open>
   2243c:	4604      	mov	r4, r0
						 &_context.session_id);
	MULTITHREADING_LOCK_RELEASE();
   2243e:	f7fe fee7 	bl	21210 <multithreading_lock_release>

	if (ret < 0) {
   22442:	2c00      	cmp	r4, #0
   22444:	da16      	bge.n	22474 <nrf_flash_sync_exe+0x54>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   22446:	466d      	mov	r5, sp
   22448:	b088      	sub	sp, #32
   2244a:	466a      	mov	r2, sp
   2244c:	4b3d      	ldr	r3, [pc, #244]	; (22544 <nrf_flash_sync_exe+0x124>)
   2244e:	6153      	str	r3, [r2, #20]
   22450:	4b3d      	ldr	r3, [pc, #244]	; (22548 <nrf_flash_sync_exe+0x128>)
   22452:	e9c2 3406 	strd	r3, r4, [r2, #24]
   22456:	2304      	movs	r3, #4
   22458:	f842 3f10 	str.w	r3, [r2, #16]!
   2245c:	483b      	ldr	r0, [pc, #236]	; (2254c <nrf_flash_sync_exe+0x12c>)
   2245e:	2300      	movs	r3, #0
   22460:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   22464:	f7f1 fa60 	bl	13928 <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   22468:	f06f 000b 	mvn.w	r0, #11
   2246c:	46ad      	mov	sp, r5
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   2246e:	46bd      	mov	sp, r7
   22470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22474:	4c36      	ldr	r4, [pc, #216]	; (22550 <nrf_flash_sync_exe+0x130>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   22476:	f240 1301 	movw	r3, #257	; 0x101
   2247a:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   2247c:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   2247e:	6225      	str	r5, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   22480:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   22482:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   22484:	f247 5330 	movw	r3, #30000	; 0x7530
   22488:	6323      	str	r3, [r4, #48]	; 0x30
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   2248a:	2600      	movs	r6, #0
	_context.status = -ETIMEDOUT;
   2248c:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22490:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   22494:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22496:	f104 0540 	add.w	r5, r4, #64	; 0x40
   2249a:	f3bf 8f5b 	dmb	ish
   2249e:	e855 3f00 	ldrex	r3, [r5]
   224a2:	e845 6200 	strex	r2, r6, [r5]
   224a6:	2a00      	cmp	r2, #0
   224a8:	d1f9      	bne.n	2249e <nrf_flash_sync_exe+0x7e>
   224aa:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   224ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   224b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   224b6:	f7fe fea3 	bl	21200 <multithreading_lock_acquire>
	ret = mpsl_timeslot_request(_context.session_id, req);
   224ba:	f104 0124 	add.w	r1, r4, #36	; 0x24
   224be:	7e20      	ldrb	r0, [r4, #24]
   224c0:	f7ee faa9 	bl	10a16 <mpsl_timeslot_request>
	MULTITHREADING_LOCK_RELEASE();
   224c4:	f7fe fea4 	bl	21210 <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   224c8:	4a22      	ldr	r2, [pc, #136]	; (22554 <nrf_flash_sync_exe+0x134>)
   224ca:	2300      	movs	r3, #0
   224cc:	4620      	mov	r0, r4
   224ce:	f001 f9bf 	bl	23850 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   224d2:	42b0      	cmp	r0, r6
   224d4:	da1b      	bge.n	2250e <nrf_flash_sync_exe+0xee>
		LOG_ERR("timeout");
   224d6:	46e8      	mov	r8, sp
   224d8:	b088      	sub	sp, #32
   224da:	466a      	mov	r2, sp
   224dc:	4b1e      	ldr	r3, [pc, #120]	; (22558 <nrf_flash_sync_exe+0x138>)
   224de:	6153      	str	r3, [r2, #20]
   224e0:	4b19      	ldr	r3, [pc, #100]	; (22548 <nrf_flash_sync_exe+0x128>)
   224e2:	6193      	str	r3, [r2, #24]
   224e4:	2303      	movs	r3, #3
   224e6:	f842 3f10 	str.w	r3, [r2, #16]!
   224ea:	4818      	ldr	r0, [pc, #96]	; (2254c <nrf_flash_sync_exe+0x12c>)
   224ec:	4633      	mov	r3, r6
   224ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   224f2:	f7f1 fa19 	bl	13928 <z_impl_z_log_msg_static_create>
   224f6:	f3bf 8f5b 	dmb	ish
   224fa:	46c5      	mov	sp, r8
   224fc:	2301      	movs	r3, #1
   224fe:	e855 2f00 	ldrex	r2, [r5]
   22502:	e845 3100 	strex	r1, r3, [r5]
   22506:	2900      	cmp	r1, #0
   22508:	d1f9      	bne.n	224fe <nrf_flash_sync_exe+0xde>
   2250a:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2250e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22516:	f7fe fe73 	bl	21200 <multithreading_lock_acquire>
	mpsl_timeslot_session_close(_context.session_id);
   2251a:	7e20      	ldrb	r0, [r4, #24]
   2251c:	f7ee fab6 	bl	10a8c <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   22520:	f7fe fe76 	bl	21210 <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22524:	f3bf 8f5b 	dmb	ish
   22528:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2252a:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   2252e:	b113      	cbz	r3, 22536 <nrf_flash_sync_exe+0x116>
	z_impl_k_sem_reset(sem);
   22530:	4807      	ldr	r0, [pc, #28]	; (22550 <nrf_flash_sync_exe+0x130>)
   22532:	f001 f9b5 	bl	238a0 <z_impl_k_sem_reset>
	return _context.status;
   22536:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   22538:	e799      	b.n	2246e <nrf_flash_sync_exe+0x4e>
   2253a:	bf00      	nop
   2253c:	20003280 	.word	0x20003280
   22540:	00022381 	.word	0x00022381
   22544:	0002f2b3 	.word	0x0002f2b3
   22548:	0002f2e9 	.word	0x0002f2e9
   2254c:	0002a8c0 	.word	0x0002a8c0
   22550:	20003268 	.word	0x20003268
   22554:	000b7b44 	.word	0x000b7b44
   22558:	0002f2dd 	.word	0x0002f2dd

0002255c <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2255c:	4b07      	ldr	r3, [pc, #28]	; (2257c <nrf_flash_sync_check_time_limit+0x20>)
   2255e:	2201      	movs	r2, #1
   22560:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   22562:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   22566:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   2256a:	4418      	add	r0, r3
   2256c:	4b04      	ldr	r3, [pc, #16]	; (22580 <nrf_flash_sync_check_time_limit+0x24>)
   2256e:	69db      	ldr	r3, [r3, #28]
}
   22570:	4298      	cmp	r0, r3
   22572:	bf34      	ite	cc
   22574:	2000      	movcc	r0, #0
   22576:	2001      	movcs	r0, #1
   22578:	4770      	bx	lr
   2257a:	bf00      	nop
   2257c:	40008000 	.word	0x40008000
   22580:	20003268 	.word	0x20003268

00022584 <temp_nrf5_mpsl_channel_get>:
}

static int temp_nrf5_mpsl_channel_get(const struct device *dev,
				      enum sensor_channel chan,
				      struct sensor_value *val)
{
   22584:	b510      	push	{r4, lr}
	int32_t uval;
	uint32_t uval_abs;
	uint32_t val1_abs;
	uint32_t val2_abs;

	if (chan != SENSOR_CHAN_DIE_TEMP) {
   22586:	290c      	cmp	r1, #12
	struct temp_nrf5_mpsl_data *data = dev->data;
   22588:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
   2258a:	d112      	bne.n	225b2 <temp_nrf5_mpsl_channel_get+0x2e>
		return -ENOTSUP;
	}

	uval = data->sample;
   2258c:	6818      	ldr	r0, [r3, #0]
	uval_abs = (uval < 0) ? (-uval) : uval;

	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2258e:	4c0a      	ldr	r4, [pc, #40]	; (225b8 <temp_nrf5_mpsl_channel_get+0x34>)
	uval_abs = (uval < 0) ? (-uval) : uval;
   22590:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
   22594:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
	val1_abs = uval_abs / TEMP_NRF5_MPSL_INC_PER_DEGREE_C;
   22598:	0899      	lsrs	r1, r3, #2
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   2259a:	f003 0303 	and.w	r3, r3, #3
		   TEMP_NRF5_MPSL_MILLIDEGREE_C_PER_INC;

	if (uval < 0) {
   2259e:	2800      	cmp	r0, #0
	val2_abs = (uval_abs & TEMP_NRF5_MPSL_FRACTIONAL_INC_MSK) *
   225a0:	fb04 f303 	mul.w	r3, r4, r3
		val->val1 = -(int32_t)val1_abs;
   225a4:	bfbc      	itt	lt
   225a6:	4249      	neglt	r1, r1
		val->val2 = -(int32_t)val2_abs;
   225a8:	425b      	neglt	r3, r3
	} else {
		val->val1 = (int32_t)val1_abs;
		val->val2 = (int32_t)val2_abs;
   225aa:	e9c2 1300 	strd	r1, r3, [r2]
	}

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
   225ae:	2000      	movs	r0, #0
}
   225b0:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   225b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   225b6:	e7fb      	b.n	225b0 <temp_nrf5_mpsl_channel_get+0x2c>
   225b8:	0003d090 	.word	0x0003d090

000225bc <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   225bc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   225c0:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   225c4:	2a06      	cmp	r2, #6
   225c6:	d109      	bne.n	225dc <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   225c8:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   225cc:	f3c3 1303 	ubfx	r3, r3, #4, #4
   225d0:	3b03      	subs	r3, #3
   225d2:	2b04      	cmp	r3, #4
   225d4:	d802      	bhi.n	225dc <nrf52_errata_16+0x20>
   225d6:	4a02      	ldr	r2, [pc, #8]	; (225e0 <nrf52_errata_16+0x24>)
   225d8:	5cd0      	ldrb	r0, [r2, r3]
   225da:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   225dc:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   225de:	4770      	bx	lr
   225e0:	0002f338 	.word	0x0002f338

000225e4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   225e4:	4a02      	ldr	r2, [pc, #8]	; (225f0 <nvmc_wait+0xc>)
   225e6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   225ea:	2b00      	cmp	r3, #0
   225ec:	d0fb      	beq.n	225e6 <nvmc_wait+0x2>
}
   225ee:	4770      	bx	lr
   225f0:	4001e000 	.word	0x4001e000

000225f4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   225f4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   225f6:	f007 f96d 	bl	298d4 <nrf52_errata_108>
   225fa:	b140      	cbz	r0, 2260e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   225fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22600:	4a8e      	ldr	r2, [pc, #568]	; (2283c <SystemInit+0x248>)
   22602:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   22606:	f3c3 2304 	ubfx	r3, r3, #8, #5
   2260a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   2260e:	f7ff ffd5 	bl	225bc <nrf52_errata_16>
   22612:	b110      	cbz	r0, 2261a <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   22614:	4b8a      	ldr	r3, [pc, #552]	; (22840 <SystemInit+0x24c>)
   22616:	4a8b      	ldr	r2, [pc, #556]	; (22844 <SystemInit+0x250>)
   22618:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   2261a:	f007 f95b 	bl	298d4 <nrf52_errata_108>
   2261e:	b148      	cbz	r0, 22634 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   22620:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22628:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   2262c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   22630:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   22634:	f7ff ffc2 	bl	225bc <nrf52_errata_16>
   22638:	b130      	cbz	r0, 22648 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   2263a:	4a83      	ldr	r2, [pc, #524]	; (22848 <SystemInit+0x254>)
   2263c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   22640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22644:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   22648:	f007 f944 	bl	298d4 <nrf52_errata_108>
   2264c:	b140      	cbz	r0, 22660 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   2264e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22652:	2200      	movs	r2, #0
   22654:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   22658:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2265c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   22660:	f7ff ffac 	bl	225bc <nrf52_errata_16>
   22664:	b120      	cbz	r0, 22670 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   22666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2266a:	2203      	movs	r2, #3
   2266c:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   22670:	f7ff ffa4 	bl	225bc <nrf52_errata_16>
   22674:	b160      	cbz	r0, 22690 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   22676:	4b75      	ldr	r3, [pc, #468]	; (2284c <SystemInit+0x258>)
   22678:	2205      	movs	r2, #5
   2267a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   2267e:	2201      	movs	r2, #1
   22680:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   22684:	2200      	movs	r2, #0
   22686:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   2268a:	223f      	movs	r2, #63	; 0x3f
   2268c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   22690:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22694:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22698:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   2269a:	bf09      	itett	eq
   2269c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   226a0:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   226a4:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   226a8:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   226ac:	bf08      	it	eq
   226ae:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   226b2:	2a06      	cmp	r2, #6
   226b4:	d14d      	bne.n	22752 <SystemInit+0x15e>
            {
                switch(var2)
   226b6:	3b03      	subs	r3, #3
   226b8:	2b04      	cmp	r3, #4
   226ba:	d803      	bhi.n	226c4 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   226bc:	4a64      	ldr	r2, [pc, #400]	; (22850 <SystemInit+0x25c>)
   226be:	5cd3      	ldrb	r3, [r2, r3]
   226c0:	2b00      	cmp	r3, #0
   226c2:	d046      	beq.n	22752 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   226c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   226c8:	4b62      	ldr	r3, [pc, #392]	; (22854 <SystemInit+0x260>)
   226ca:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   226ce:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   226d2:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   226d6:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   226da:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   226de:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   226e2:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   226e6:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   226ea:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   226ee:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   226f2:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   226f6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   226fa:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   226fe:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   22702:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   22706:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2270a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2270e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   22712:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   22716:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2271a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2271e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   22722:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   22726:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2272a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2272e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   22732:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   22736:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2273a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2273e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   22742:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   22746:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2274a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2274e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   22752:	f007 f8bf 	bl	298d4 <nrf52_errata_108>
   22756:	b148      	cbz	r0, 2276c <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   22758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2275c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22760:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   22764:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   22768:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   2276c:	f007 f8b2 	bl	298d4 <nrf52_errata_108>
   22770:	b148      	cbz	r0, 22786 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   22772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22776:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2277a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   2277c:	bf44      	itt	mi
   2277e:	f06f 0201 	mvnmi.w	r2, #1
   22782:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22786:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   2278a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2278e:	2a06      	cmp	r2, #6
   22790:	d126      	bne.n	227e0 <SystemInit+0x1ec>
            {
                switch(var2)
   22792:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   22796:	3b03      	subs	r3, #3
   22798:	2b04      	cmp	r3, #4
   2279a:	d802      	bhi.n	227a2 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   2279c:	4a2e      	ldr	r2, [pc, #184]	; (22858 <SystemInit+0x264>)
   2279e:	5cd3      	ldrb	r3, [r2, r3]
   227a0:	b163      	cbz	r3, 227bc <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   227a2:	4a2e      	ldr	r2, [pc, #184]	; (2285c <SystemInit+0x268>)
   227a4:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   227a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   227ac:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   227b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   227b4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   227b8:	2b06      	cmp	r3, #6
   227ba:	d111      	bne.n	227e0 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   227bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   227c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   227c4:	3b03      	subs	r3, #3
   227c6:	2b04      	cmp	r3, #4
   227c8:	d802      	bhi.n	227d0 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   227ca:	4a25      	ldr	r2, [pc, #148]	; (22860 <SystemInit+0x26c>)
   227cc:	5cd3      	ldrb	r3, [r2, r3]
   227ce:	b13b      	cbz	r3, 227e0 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   227d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   227d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   227d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   227dc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   227e0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   227e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   227e8:	2a00      	cmp	r2, #0
   227ea:	db03      	blt.n	227f4 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   227ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   227f0:	2b00      	cmp	r3, #0
   227f2:	da22      	bge.n	2283a <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   227f4:	491b      	ldr	r1, [pc, #108]	; (22864 <SystemInit+0x270>)
   227f6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   227f8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   227fc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22800:	2415      	movs	r4, #21
    nvmc_wait();
   22802:	f7ff feef 	bl	225e4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22806:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2280a:	f7ff feeb 	bl	225e4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2280e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22812:	f7ff fee7 	bl	225e4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22816:	2300      	movs	r3, #0
   22818:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2281c:	f7ff fee2 	bl	225e4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   22820:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22824:	4908      	ldr	r1, [pc, #32]	; (22848 <SystemInit+0x254>)
   22826:	4b10      	ldr	r3, [pc, #64]	; (22868 <SystemInit+0x274>)
   22828:	68ca      	ldr	r2, [r1, #12]
   2282a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2282e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22830:	60cb      	str	r3, [r1, #12]
   22832:	f3bf 8f4f 	dsb	sy
    __NOP();
   22836:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22838:	e7fd      	b.n	22836 <SystemInit+0x242>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   2283a:	bd10      	pop	{r4, pc}
   2283c:	40013000 	.word	0x40013000
   22840:	4007c000 	.word	0x4007c000
   22844:	baadf00d 	.word	0xbaadf00d
   22848:	e000ed00 	.word	0xe000ed00
   2284c:	40005000 	.word	0x40005000
   22850:	0002f333 	.word	0x0002f333
   22854:	4000c000 	.word	0x4000c000
   22858:	0002f32e 	.word	0x0002f32e
   2285c:	40001000 	.word	0x40001000
   22860:	0002f329 	.word	0x0002f329
   22864:	4001e000 	.word	0x4001e000
   22868:	05fa0004 	.word	0x05fa0004

0002286c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2286c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2286e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   22870:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22872:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   22876:	fab2 f382 	clz	r3, r2
   2287a:	f1c3 031f 	rsb	r3, r3, #31
   2287e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   22880:	fa05 f403 	lsl.w	r4, r5, r3
   22884:	ea22 0404 	bic.w	r4, r2, r4
   22888:	e850 6f00 	ldrex	r6, [r0]
   2288c:	4296      	cmp	r6, r2
   2288e:	d104      	bne.n	2289a <nrfx_flag32_alloc+0x2e>
   22890:	e840 4c00 	strex	ip, r4, [r0]
   22894:	f1bc 0f00 	cmp.w	ip, #0
   22898:	d1f6      	bne.n	22888 <nrfx_flag32_alloc+0x1c>
   2289a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2289e:	d1e7      	bne.n	22870 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   228a0:	4801      	ldr	r0, [pc, #4]	; (228a8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   228a2:	700b      	strb	r3, [r1, #0]
}
   228a4:	bd70      	pop	{r4, r5, r6, pc}
   228a6:	bf00      	nop
   228a8:	0bad0000 	.word	0x0bad0000

000228ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   228ac:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   228ae:	6803      	ldr	r3, [r0, #0]
   228b0:	40cb      	lsrs	r3, r1
   228b2:	07db      	lsls	r3, r3, #31
   228b4:	d414      	bmi.n	228e0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   228b6:	2301      	movs	r3, #1
   228b8:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   228ba:	6802      	ldr	r2, [r0, #0]
   228bc:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   228c0:	ea43 0102 	orr.w	r1, r3, r2
   228c4:	e850 4f00 	ldrex	r4, [r0]
   228c8:	4294      	cmp	r4, r2
   228ca:	d104      	bne.n	228d6 <nrfx_flag32_free+0x2a>
   228cc:	e840 1c00 	strex	ip, r1, [r0]
   228d0:	f1bc 0f00 	cmp.w	ip, #0
   228d4:	d1f6      	bne.n	228c4 <nrfx_flag32_free+0x18>
   228d6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   228da:	d1ee      	bne.n	228ba <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   228dc:	4801      	ldr	r0, [pc, #4]	; (228e4 <nrfx_flag32_free+0x38>)
}
   228de:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   228e0:	4801      	ldr	r0, [pc, #4]	; (228e8 <nrfx_flag32_free+0x3c>)
   228e2:	e7fc      	b.n	228de <nrfx_flag32_free+0x32>
   228e4:	0bad0000 	.word	0x0bad0000
   228e8:	0bad0004 	.word	0x0bad0004

000228ec <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   228ec:	4b03      	ldr	r3, [pc, #12]	; (228fc <pin_in_use_by_te+0x10>)
   228ee:	3008      	adds	r0, #8
   228f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   228f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   228f8:	4770      	bx	lr
   228fa:	bf00      	nop
   228fc:	20000878 	.word	0x20000878

00022900 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22900:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22902:	f100 0308 	add.w	r3, r0, #8
   22906:	4c0c      	ldr	r4, [pc, #48]	; (22938 <call_handler+0x38>)
   22908:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   2290c:	05da      	lsls	r2, r3, #23
{
   2290e:	4605      	mov	r5, r0
   22910:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22912:	d507      	bpl.n	22924 <call_handler+0x24>
   22914:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22918:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2291c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   22920:	6852      	ldr	r2, [r2, #4]
   22922:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   22924:	68a3      	ldr	r3, [r4, #8]
   22926:	b12b      	cbz	r3, 22934 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22928:	68e2      	ldr	r2, [r4, #12]
   2292a:	4631      	mov	r1, r6
   2292c:	4628      	mov	r0, r5
    }
}
   2292e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22932:	4718      	bx	r3
}
   22934:	bd70      	pop	{r4, r5, r6, pc}
   22936:	bf00      	nop
   22938:	20000878 	.word	0x20000878

0002293c <release_handler>:
{
   2293c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2293e:	4a12      	ldr	r2, [pc, #72]	; (22988 <release_handler+0x4c>)
   22940:	3008      	adds	r0, #8
   22942:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   22946:	05d9      	lsls	r1, r3, #23
   22948:	d51b      	bpl.n	22982 <release_handler+0x46>
   2294a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2294e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22952:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22956:	f102 040e 	add.w	r4, r2, #14
   2295a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2295c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   22960:	f413 7f80 	tst.w	r3, #256	; 0x100
   22964:	d003      	beq.n	2296e <release_handler+0x32>
   22966:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2296a:	4299      	cmp	r1, r3
   2296c:	d009      	beq.n	22982 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2296e:	3001      	adds	r0, #1
   22970:	2820      	cmp	r0, #32
   22972:	d1f3      	bne.n	2295c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   22974:	2300      	movs	r3, #0
   22976:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2297a:	4804      	ldr	r0, [pc, #16]	; (2298c <release_handler+0x50>)
}
   2297c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2297e:	f7ff bf95 	b.w	228ac <nrfx_flag32_free>
}
   22982:	bc10      	pop	{r4}
   22984:	4770      	bx	lr
   22986:	bf00      	nop
   22988:	20000878 	.word	0x20000878
   2298c:	200008cc 	.word	0x200008cc

00022990 <pin_handler_trigger_uninit>:
{
   22990:	b538      	push	{r3, r4, r5, lr}
   22992:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   22994:	f7ff ffaa 	bl	228ec <pin_in_use_by_te>
   22998:	4c09      	ldr	r4, [pc, #36]	; (229c0 <pin_handler_trigger_uninit+0x30>)
   2299a:	f102 0508 	add.w	r5, r2, #8
   2299e:	b140      	cbz	r0, 229b2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   229a0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   229a4:	4907      	ldr	r1, [pc, #28]	; (229c4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   229a6:	0b5b      	lsrs	r3, r3, #13
   229a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   229ac:	2000      	movs	r0, #0
   229ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   229b2:	4610      	mov	r0, r2
   229b4:	f7ff ffc2 	bl	2293c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   229b8:	2300      	movs	r3, #0
   229ba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   229be:	bd38      	pop	{r3, r4, r5, pc}
   229c0:	20000878 	.word	0x20000878
   229c4:	40006000 	.word	0x40006000

000229c8 <nrfx_gpiote_input_configure>:
{
   229c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   229cc:	4604      	mov	r4, r0
   229ce:	461d      	mov	r5, r3
    if (p_input_config)
   229d0:	b309      	cbz	r1, 22a16 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   229d2:	4f4f      	ldr	r7, [pc, #316]	; (22b10 <nrfx_gpiote_input_configure+0x148>)
   229d4:	f100 0808 	add.w	r8, r0, #8
   229d8:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   229dc:	07b3      	lsls	r3, r6, #30
   229de:	d506      	bpl.n	229ee <nrfx_gpiote_input_configure+0x26>
   229e0:	f7ff ff84 	bl	228ec <pin_in_use_by_te>
   229e4:	b118      	cbz	r0, 229ee <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   229e6:	484b      	ldr	r0, [pc, #300]	; (22b14 <nrfx_gpiote_input_configure+0x14c>)
}
   229e8:	b002      	add	sp, #8
   229ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   229ee:	f004 031f 	and.w	r3, r4, #31
   229f2:	009b      	lsls	r3, r3, #2
   229f4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   229f8:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   229fa:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   229fe:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
   22a02:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22a06:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22a0a:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
   22a0e:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   22a12:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
   22a16:	b19a      	cbz	r2, 22a40 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22a18:	4b3d      	ldr	r3, [pc, #244]	; (22b10 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22a1a:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22a1c:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22a1e:	f104 0608 	add.w	r6, r4, #8
   22a22:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
   22a26:	f011 0f02 	tst.w	r1, #2
   22a2a:	d00d      	beq.n	22a48 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
   22a2c:	2800      	cmp	r0, #0
   22a2e:	d1da      	bne.n	229e6 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22a30:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   22a34:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22a38:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
   22a3c:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
   22a40:	2d00      	cmp	r5, #0
   22a42:	d13b      	bne.n	22abc <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
   22a44:	4834      	ldr	r0, [pc, #208]	; (22b18 <nrfx_gpiote_input_configure+0x150>)
   22a46:	e7cf      	b.n	229e8 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22a48:	f021 0120 	bic.w	r1, r1, #32
   22a4c:	04c9      	lsls	r1, r1, #19
   22a4e:	0cc9      	lsrs	r1, r1, #19
   22a50:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   22a54:	2800      	cmp	r0, #0
   22a56:	d0eb      	beq.n	22a30 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   22a58:	2f03      	cmp	r7, #3
   22a5a:	d8c4      	bhi.n	229e6 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22a5c:	6852      	ldr	r2, [r2, #4]
   22a5e:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22a62:	b92f      	cbnz	r7, 22a70 <nrfx_gpiote_input_configure+0xa8>
   22a64:	4a2d      	ldr	r2, [pc, #180]	; (22b1c <nrfx_gpiote_input_configure+0x154>)
   22a66:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
   22a6a:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
   22a6e:	e7df      	b.n	22a30 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22a70:	ea4f 028c 	mov.w	r2, ip, lsl #2
   22a74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22a78:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22a7c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   22a80:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22a84:	f020 0003 	bic.w	r0, r0, #3
   22a88:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22a8c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22a90:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   22a94:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   22a98:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22a9c:	0220      	lsls	r0, r4, #8
   22a9e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   22aa2:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   22aa6:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   22aaa:	ea40 000e 	orr.w	r0, r0, lr
   22aae:	f041 0120 	orr.w	r1, r1, #32
   22ab2:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   22ab6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   22aba:	e7b9      	b.n	22a30 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22abc:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   22ac0:	4620      	mov	r0, r4
   22ac2:	f7ff ff3b 	bl	2293c <release_handler>
    if (!handler)
   22ac6:	2e00      	cmp	r6, #0
   22ac8:	d0bc      	beq.n	22a44 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22aca:	4d11      	ldr	r5, [pc, #68]	; (22b10 <nrfx_gpiote_input_configure+0x148>)
   22acc:	e9d5 2300 	ldrd	r2, r3, [r5]
   22ad0:	4296      	cmp	r6, r2
   22ad2:	d101      	bne.n	22ad8 <nrfx_gpiote_input_configure+0x110>
   22ad4:	429f      	cmp	r7, r3
   22ad6:	d019      	beq.n	22b0c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22ad8:	4811      	ldr	r0, [pc, #68]	; (22b20 <nrfx_gpiote_input_configure+0x158>)
   22ada:	f10d 0107 	add.w	r1, sp, #7
   22ade:	f7ff fec5 	bl	2286c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22ae2:	4b0d      	ldr	r3, [pc, #52]	; (22b18 <nrfx_gpiote_input_configure+0x150>)
   22ae4:	4298      	cmp	r0, r3
   22ae6:	f47f af7f 	bne.w	229e8 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   22aea:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   22aee:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22af2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22af6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   22af8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22afa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   22afe:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   22b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22b06:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   22b0a:	e79b      	b.n	22a44 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22b0c:	2200      	movs	r2, #0
   22b0e:	e7ee      	b.n	22aee <nrfx_gpiote_input_configure+0x126>
   22b10:	20000878 	.word	0x20000878
   22b14:	0bad0004 	.word	0x0bad0004
   22b18:	0bad0000 	.word	0x0bad0000
   22b1c:	40006000 	.word	0x40006000
   22b20:	200008cc 	.word	0x200008cc

00022b24 <nrfx_gpiote_output_configure>:
{
   22b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22b26:	4604      	mov	r4, r0
    if (p_config)
   22b28:	b389      	cbz	r1, 22b8e <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22b2a:	4e3a      	ldr	r6, [pc, #232]	; (22c14 <nrfx_gpiote_output_configure+0xf0>)
   22b2c:	f100 0708 	add.w	r7, r0, #8
   22b30:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22b34:	07ab      	lsls	r3, r5, #30
   22b36:	d404      	bmi.n	22b42 <nrfx_gpiote_output_configure+0x1e>
   22b38:	f7ff fed8 	bl	228ec <pin_in_use_by_te>
   22b3c:	b108      	cbz	r0, 22b42 <nrfx_gpiote_output_configure+0x1e>
{
   22b3e:	4836      	ldr	r0, [pc, #216]	; (22c18 <nrfx_gpiote_output_configure+0xf4>)
}
   22b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22b42:	f015 0f1c 	tst.w	r5, #28
   22b46:	784b      	ldrb	r3, [r1, #1]
   22b48:	d124      	bne.n	22b94 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
   22b4a:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22b4e:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
   22b52:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   22b56:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   22b58:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   22b5c:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   22b60:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   22b62:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   22b66:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
   22b6a:	f02c 0c07 	bic.w	ip, ip, #7
   22b6e:	ea43 030c 	orr.w	r3, r3, ip
   22b72:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   22b76:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   22b7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   22b7e:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22b82:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   22b86:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   22b8a:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   22b8e:	b922      	cbnz	r2, 22b9a <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
   22b90:	4822      	ldr	r0, [pc, #136]	; (22c1c <nrfx_gpiote_output_configure+0xf8>)
   22b92:	e7d5      	b.n	22b40 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22b94:	2b01      	cmp	r3, #1
   22b96:	d1d8      	bne.n	22b4a <nrfx_gpiote_output_configure+0x26>
   22b98:	e7d1      	b.n	22b3e <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22b9a:	4e1e      	ldr	r6, [pc, #120]	; (22c14 <nrfx_gpiote_output_configure+0xf0>)
   22b9c:	f104 0708 	add.w	r7, r4, #8
   22ba0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   22ba4:	0783      	lsls	r3, r0, #30
   22ba6:	d5ca      	bpl.n	22b3e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   22ba8:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   22bac:	4661      	mov	r1, ip
   22bae:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22bb0:	f020 0020 	bic.w	r0, r0, #32
   22bb4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   22bb8:	04c0      	lsls	r0, r0, #19
   22bba:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   22bbe:	0cc0      	lsrs	r0, r0, #19
   22bc0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22bc4:	2300      	movs	r3, #0
   22bc6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22bca:	7855      	ldrb	r5, [r2, #1]
   22bcc:	2d00      	cmp	r5, #0
   22bce:	d0df      	beq.n	22b90 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   22bd0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   22bd4:	7892      	ldrb	r2, [r2, #2]
   22bd6:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   22bda:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22bde:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22be2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   22be6:	0223      	lsls	r3, r4, #8
   22be8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22bec:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22bee:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22bf2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22bf6:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22bf8:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22bfa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22bfe:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22c02:	4313      	orrs	r3, r2
   22c04:	f040 0020 	orr.w	r0, r0, #32
   22c08:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22c0c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22c10:	e7be      	b.n	22b90 <nrfx_gpiote_output_configure+0x6c>
   22c12:	bf00      	nop
   22c14:	20000878 	.word	0x20000878
   22c18:	0bad0004 	.word	0x0bad0004
   22c1c:	0bad0000 	.word	0x0bad0000

00022c20 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   22c20:	4b01      	ldr	r3, [pc, #4]	; (22c28 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   22c22:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   22c26:	4770      	bx	lr
   22c28:	20000878 	.word	0x20000878

00022c2c <nrfx_gpiote_channel_get>:
{
   22c2c:	b508      	push	{r3, lr}
   22c2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   22c30:	f7ff fe5c 	bl	228ec <pin_in_use_by_te>
   22c34:	b138      	cbz	r0, 22c46 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22c36:	4b05      	ldr	r3, [pc, #20]	; (22c4c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   22c38:	4805      	ldr	r0, [pc, #20]	; (22c50 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22c3a:	3208      	adds	r2, #8
   22c3c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22c40:	0b5b      	lsrs	r3, r3, #13
   22c42:	700b      	strb	r3, [r1, #0]
}
   22c44:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22c46:	4803      	ldr	r0, [pc, #12]	; (22c54 <nrfx_gpiote_channel_get+0x28>)
   22c48:	e7fc      	b.n	22c44 <nrfx_gpiote_channel_get+0x18>
   22c4a:	bf00      	nop
   22c4c:	20000878 	.word	0x20000878
   22c50:	0bad0000 	.word	0x0bad0000
   22c54:	0bad0004 	.word	0x0bad0004

00022c58 <nrfx_gpiote_init>:
{
   22c58:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22c5a:	4c0f      	ldr	r4, [pc, #60]	; (22c98 <nrfx_gpiote_init+0x40>)
   22c5c:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   22c60:	b9bd      	cbnz	r5, 22c92 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   22c62:	2240      	movs	r2, #64	; 0x40
   22c64:	4629      	mov	r1, r5
   22c66:	f104 0010 	add.w	r0, r4, #16
   22c6a:	f003 ffca 	bl	26c02 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   22c6e:	2006      	movs	r0, #6
   22c70:	f7f1 ff5e 	bl	14b30 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22c74:	4b09      	ldr	r3, [pc, #36]	; (22c9c <nrfx_gpiote_init+0x44>)
    return err_code;
   22c76:	480a      	ldr	r0, [pc, #40]	; (22ca0 <nrfx_gpiote_init+0x48>)
   22c78:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   22c7c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   22c80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22c84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22c88:	2301      	movs	r3, #1
   22c8a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   22c8e:	6563      	str	r3, [r4, #84]	; 0x54
}
   22c90:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   22c92:	4804      	ldr	r0, [pc, #16]	; (22ca4 <nrfx_gpiote_init+0x4c>)
   22c94:	e7fc      	b.n	22c90 <nrfx_gpiote_init+0x38>
   22c96:	bf00      	nop
   22c98:	20000878 	.word	0x20000878
   22c9c:	40006000 	.word	0x40006000
   22ca0:	0bad0000 	.word	0x0bad0000
   22ca4:	0bad0005 	.word	0x0bad0005

00022ca8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   22ca8:	4b03      	ldr	r3, [pc, #12]	; (22cb8 <nrfx_gpiote_is_init+0x10>)
   22caa:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   22cae:	3800      	subs	r0, #0
   22cb0:	bf18      	it	ne
   22cb2:	2001      	movne	r0, #1
   22cb4:	4770      	bx	lr
   22cb6:	bf00      	nop
   22cb8:	20000878 	.word	0x20000878

00022cbc <nrfx_gpiote_channel_free>:
{
   22cbc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   22cbe:	4801      	ldr	r0, [pc, #4]	; (22cc4 <nrfx_gpiote_channel_free+0x8>)
   22cc0:	f7ff bdf4 	b.w	228ac <nrfx_flag32_free>
   22cc4:	200008c8 	.word	0x200008c8

00022cc8 <nrfx_gpiote_channel_alloc>:
{
   22cc8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   22cca:	4801      	ldr	r0, [pc, #4]	; (22cd0 <nrfx_gpiote_channel_alloc+0x8>)
   22ccc:	f7ff bdce 	b.w	2286c <nrfx_flag32_alloc>
   22cd0:	200008c8 	.word	0x200008c8

00022cd4 <nrfx_gpiote_trigger_enable>:
{
   22cd4:	b510      	push	{r4, lr}
   22cd6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22cd8:	f7ff fe08 	bl	228ec <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22cdc:	f102 0408 	add.w	r4, r2, #8
   22ce0:	4b1c      	ldr	r3, [pc, #112]	; (22d54 <nrfx_gpiote_trigger_enable+0x80>)
   22ce2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22ce6:	b1e0      	cbz	r0, 22d22 <nrfx_gpiote_trigger_enable+0x4e>
   22ce8:	f013 0402 	ands.w	r4, r3, #2
   22cec:	d119      	bne.n	22d22 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22cee:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22cf0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   22cf2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   22cf6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   22cfa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22cfe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22d02:	6004      	str	r4, [r0, #0]
   22d04:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22d06:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22d0a:	f040 0001 	orr.w	r0, r0, #1
   22d0e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   22d12:	b129      	cbz	r1, 22d20 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   22d14:	2201      	movs	r2, #1
   22d16:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   22d1a:	4a0f      	ldr	r2, [pc, #60]	; (22d58 <nrfx_gpiote_trigger_enable+0x84>)
   22d1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22d20:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22d22:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   22d26:	2b04      	cmp	r3, #4
   22d28:	d010      	beq.n	22d4c <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22d2a:	2b05      	cmp	r3, #5
   22d2c:	d010      	beq.n	22d50 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   22d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22d32:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   22d36:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22d3a:	40d9      	lsrs	r1, r3
   22d3c:	f001 0101 	and.w	r1, r1, #1
   22d40:	3102      	adds	r1, #2
}
   22d42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22d46:	4610      	mov	r0, r2
   22d48:	f006 bdd5 	b.w	298f6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   22d4c:	2103      	movs	r1, #3
   22d4e:	e7f8      	b.n	22d42 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   22d50:	2102      	movs	r1, #2
   22d52:	e7f6      	b.n	22d42 <nrfx_gpiote_trigger_enable+0x6e>
   22d54:	20000878 	.word	0x20000878
   22d58:	40006000 	.word	0x40006000

00022d5c <nrfx_gpiote_trigger_disable>:
{
   22d5c:	b508      	push	{r3, lr}
   22d5e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22d60:	f7ff fdc4 	bl	228ec <pin_in_use_by_te>
   22d64:	b1c0      	cbz	r0, 22d98 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22d66:	f102 0108 	add.w	r1, r2, #8
   22d6a:	4b0e      	ldr	r3, [pc, #56]	; (22da4 <nrfx_gpiote_trigger_disable+0x48>)
   22d6c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22d70:	0799      	lsls	r1, r3, #30
   22d72:	d411      	bmi.n	22d98 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22d74:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22d76:	2201      	movs	r2, #1
   22d78:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   22d7a:	009b      	lsls	r3, r3, #2
   22d7c:	490a      	ldr	r1, [pc, #40]	; (22da8 <nrfx_gpiote_trigger_disable+0x4c>)
   22d7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22d82:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   22d86:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22d8a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   22d8e:	f022 0203 	bic.w	r2, r2, #3
   22d92:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   22d96:	bd08      	pop	{r3, pc}
   22d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22d9c:	2100      	movs	r1, #0
   22d9e:	4610      	mov	r0, r2
   22da0:	f006 bda9 	b.w	298f6 <nrf_gpio_cfg_sense_set>
   22da4:	20000878 	.word	0x20000878
   22da8:	40006000 	.word	0x40006000

00022dac <nrfx_gpiote_pin_uninit>:
{
   22dac:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22dae:	4b0d      	ldr	r3, [pc, #52]	; (22de4 <nrfx_gpiote_pin_uninit+0x38>)
   22db0:	f100 0208 	add.w	r2, r0, #8
{
   22db4:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22db6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   22dba:	07db      	lsls	r3, r3, #31
   22dbc:	d50f      	bpl.n	22dde <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   22dbe:	f7ff ffcd 	bl	22d5c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   22dc2:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   22dc4:	f004 041f 	and.w	r4, r4, #31
   22dc8:	f7ff fde2 	bl	22990 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   22dcc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   22dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22dd4:	2202      	movs	r2, #2
   22dd6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   22dda:	4803      	ldr	r0, [pc, #12]	; (22de8 <nrfx_gpiote_pin_uninit+0x3c>)
}
   22ddc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22dde:	4803      	ldr	r0, [pc, #12]	; (22dec <nrfx_gpiote_pin_uninit+0x40>)
   22de0:	e7fc      	b.n	22ddc <nrfx_gpiote_pin_uninit+0x30>
   22de2:	bf00      	nop
   22de4:	20000878 	.word	0x20000878
   22de8:	0bad0000 	.word	0x0bad0000
   22dec:	0bad0004 	.word	0x0bad0004

00022df0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   22df0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22df4:	4b4f      	ldr	r3, [pc, #316]	; (22f34 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
   22df6:	4850      	ldr	r0, [pc, #320]	; (22f38 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22df8:	4950      	ldr	r1, [pc, #320]	; (22f3c <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
   22dfa:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22dfc:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22dfe:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22e00:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   22e02:	b136      	cbz	r6, 22e12 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   22e04:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   22e08:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22e0a:	bf1e      	ittt	ne
   22e0c:	601c      	strne	r4, [r3, #0]
   22e0e:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   22e10:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22e12:	3304      	adds	r3, #4
   22e14:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   22e16:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22e1a:	d1f1      	bne.n	22e00 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22e1c:	4b46      	ldr	r3, [pc, #280]	; (22f38 <nrfx_gpiote_irq_handler+0x148>)
   22e1e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   22e22:	b1bb      	cbz	r3, 22e54 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   22e24:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   22e28:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   22e2c:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   22e2e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   22e32:	af01      	add	r7, sp, #4
   22e34:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   22e38:	9c01      	ldr	r4, [sp, #4]
   22e3a:	b98c      	cbnz	r4, 22e60 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22e3c:	4b3e      	ldr	r3, [pc, #248]	; (22f38 <nrfx_gpiote_irq_handler+0x148>)
   22e3e:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   22e42:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   22e46:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   22e4a:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   22e4c:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   22e50:	2b00      	cmp	r3, #0
   22e52:	d1ee      	bne.n	22e32 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   22e54:	2401      	movs	r4, #1
    while (mask)
   22e56:	2d00      	cmp	r5, #0
   22e58:	d153      	bne.n	22f02 <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   22e5a:	b003      	add	sp, #12
   22e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   22e60:	fa94 f4a4 	rbit	r4, r4
   22e64:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e68:	4a35      	ldr	r2, [pc, #212]	; (22f40 <nrfx_gpiote_irq_handler+0x150>)
   22e6a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22e6e:	08e0      	lsrs	r0, r4, #3
   22e70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   22e74:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
   22e76:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   22e7a:	fa08 f202 	lsl.w	r2, r8, r2
   22e7e:	ea23 0302 	bic.w	r3, r3, r2
   22e82:	543b      	strb	r3, [r7, r0]
   22e84:	00a3      	lsls	r3, r4, #2
   22e86:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   22e8a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22e8e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   22e92:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e94:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22e96:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   22e9a:	d518      	bpl.n	22ece <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
   22e9c:	4659      	mov	r1, fp
   22e9e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22ea0:	fa5f fa82 	uxtb.w	sl, r2
   22ea4:	f7ff fd2c 	bl	22900 <call_handler>
   22ea8:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   22eac:	f3c3 4301 	ubfx	r3, r3, #16, #2
   22eb0:	459a      	cmp	sl, r3
   22eb2:	d107      	bne.n	22ec4 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22eb4:	2100      	movs	r1, #0
   22eb6:	4620      	mov	r0, r4
   22eb8:	f006 fd1d 	bl	298f6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   22ebc:	4651      	mov	r1, sl
   22ebe:	4620      	mov	r0, r4
   22ec0:	f006 fd19 	bl	298f6 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   22ec4:	fa08 f404 	lsl.w	r4, r8, r4
   22ec8:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   22ecc:	e7b4      	b.n	22e38 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22ece:	2a02      	cmp	r2, #2
   22ed0:	d10c      	bne.n	22eec <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22ed2:	2103      	movs	r1, #3
   22ed4:	4620      	mov	r0, r4
   22ed6:	f006 fd0e 	bl	298f6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   22eda:	f00a 0305 	and.w	r3, sl, #5
   22ede:	2b01      	cmp	r3, #1
   22ee0:	d1f0      	bne.n	22ec4 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
   22ee2:	4659      	mov	r1, fp
   22ee4:	4620      	mov	r0, r4
   22ee6:	f7ff fd0b 	bl	22900 <call_handler>
   22eea:	e7eb      	b.n	22ec4 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22eec:	2102      	movs	r1, #2
   22eee:	4620      	mov	r0, r4
   22ef0:	f006 fd01 	bl	298f6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   22ef4:	f1ba 0f03 	cmp.w	sl, #3
   22ef8:	d0f3      	beq.n	22ee2 <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22efa:	2a03      	cmp	r2, #3
   22efc:	d1e2      	bne.n	22ec4 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22efe:	458a      	cmp	sl, r1
   22f00:	e7ee      	b.n	22ee0 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
   22f02:	fa95 f3a5 	rbit	r3, r5
   22f06:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22f0a:	fa04 f203 	lsl.w	r2, r4, r3
   22f0e:	009b      	lsls	r3, r3, #2
   22f10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22f14:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   22f18:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22f1c:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22f20:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22f24:	f3c0 2004 	ubfx	r0, r0, #8, #5
   22f28:	f3c1 4101 	ubfx	r1, r1, #16, #2
   22f2c:	f7ff fce8 	bl	22900 <call_handler>
   22f30:	e791      	b.n	22e56 <nrfx_gpiote_irq_handler+0x66>
   22f32:	bf00      	nop
   22f34:	40006100 	.word	0x40006100
   22f38:	40006000 	.word	0x40006000
   22f3c:	40006120 	.word	0x40006120
   22f40:	20000878 	.word	0x20000878

00022f44 <nvmc_word_write>:
   22f44:	4a04      	ldr	r2, [pc, #16]	; (22f58 <nvmc_word_write+0x14>)
   22f46:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF91_SERIES)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22f4a:	07db      	lsls	r3, r3, #31
   22f4c:	d5fb      	bpl.n	22f46 <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   22f4e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   22f50:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   22f54:	4770      	bx	lr
   22f56:	bf00      	nop
   22f58:	4001e000 	.word	0x4001e000

00022f5c <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   22f5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22f60:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   22f62:	fbb0 f3f2 	udiv	r3, r0, r2
   22f66:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   22f6a:	b973      	cbnz	r3, 22f8a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   22f6c:	4b08      	ldr	r3, [pc, #32]	; (22f90 <nrfx_nvmc_page_erase+0x34>)
   22f6e:	2202      	movs	r2, #2
   22f70:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   22f74:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22f78:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22f7c:	07d2      	lsls	r2, r2, #31
   22f7e:	d5fb      	bpl.n	22f78 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   22f80:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   22f82:	4804      	ldr	r0, [pc, #16]	; (22f94 <nrfx_nvmc_page_erase+0x38>)
   22f84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   22f88:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   22f8a:	4803      	ldr	r0, [pc, #12]	; (22f98 <nrfx_nvmc_page_erase+0x3c>)
}
   22f8c:	4770      	bx	lr
   22f8e:	bf00      	nop
   22f90:	4001e000 	.word	0x4001e000
   22f94:	0bad0000 	.word	0x0bad0000
   22f98:	0bad000a 	.word	0x0bad000a

00022f9c <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   22f9c:	b510      	push	{r4, lr}
   22f9e:	4c05      	ldr	r4, [pc, #20]	; (22fb4 <nrfx_nvmc_word_write+0x18>)
   22fa0:	2301      	movs	r3, #1
   22fa2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   22fa6:	f7ff ffcd 	bl	22f44 <nvmc_word_write>
   22faa:	2300      	movs	r3, #0
   22fac:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   22fb0:	bd10      	pop	{r4, pc}
   22fb2:	bf00      	nop
   22fb4:	4001e000 	.word	0x4001e000

00022fb8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   22fb8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   22fba:	4801      	ldr	r0, [pc, #4]	; (22fc0 <nrfx_ppi_channel_alloc+0x8>)
   22fbc:	f7ff bc56 	b.w	2286c <nrfx_flag32_alloc>
   22fc0:	200008d4 	.word	0x200008d4

00022fc4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   22fc4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22fc6:	4c11      	ldr	r4, [pc, #68]	; (2300c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   22fc8:	4a11      	ldr	r2, [pc, #68]	; (23010 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   22fca:	4912      	ldr	r1, [pc, #72]	; (23014 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   22fcc:	2303      	movs	r3, #3
   22fce:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   22fd0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22fd2:	4b11      	ldr	r3, [pc, #68]	; (23018 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   22fd4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   22fd6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   22fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   22fdc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   22fde:	2300      	movs	r3, #0
   22fe0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   22fe2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   22fe6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   22fe8:	4a0c      	ldr	r2, [pc, #48]	; (2301c <_DoInit+0x58>)
   22fea:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   22fec:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   22fee:	2210      	movs	r2, #16
   22ff0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   22ff2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   22ff4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   22ff6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   22ff8:	f003 fd9a 	bl	26b30 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   22ffc:	4908      	ldr	r1, [pc, #32]	; (23020 <_DoInit+0x5c>)
   22ffe:	4620      	mov	r0, r4
   23000:	f003 fd96 	bl	26b30 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   23004:	2320      	movs	r3, #32
   23006:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   23008:	bd10      	pop	{r4, pc}
   2300a:	bf00      	nop
   2300c:	200032b0 	.word	0x200032b0
   23010:	0002f352 	.word	0x0002f352
   23014:	0002f35b 	.word	0x0002f35b
   23018:	200035be 	.word	0x200035be
   2301c:	200035ae 	.word	0x200035ae
   23020:	0002f35f 	.word	0x0002f35f

00023024 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23024:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   23028:	4f21      	ldr	r7, [pc, #132]	; (230b0 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   2302a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2302e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   23030:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23034:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   23036:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   23038:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2303a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2303c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2303e:	d831      	bhi.n	230a4 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   23040:	f8d2 a020 	ldr.w	sl, [r2, #32]
   23044:	ebaa 0905 	sub.w	r9, sl, r5
   23048:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   2304c:	4294      	cmp	r4, r2
   2304e:	d811      	bhi.n	23074 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23050:	2318      	movs	r3, #24
   23052:	fb06 3303 	mla	r3, r6, r3, r3
   23056:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   23058:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2305a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   2305c:	4641      	mov	r1, r8
   2305e:	4428      	add	r0, r5
   23060:	f003 fdc4 	bl	26bec <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   23064:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   23066:	2318      	movs	r3, #24
   23068:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   2306c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   2306e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   23070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   23074:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   23076:	429c      	cmp	r4, r3
   23078:	d818      	bhi.n	230ac <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2307a:	fb00 bb0b 	mla	fp, r0, fp, fp
   2307e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   23080:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23082:	f8db 0004 	ldr.w	r0, [fp, #4]
   23086:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   23088:	4428      	add	r0, r5
   2308a:	f003 fdaf 	bl	26bec <memcpy>
      if (NumBytes) {
   2308e:	ebb4 040a 	subs.w	r4, r4, sl
   23092:	d0e8      	beq.n	23066 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   23094:	f8db 0004 	ldr.w	r0, [fp, #4]
   23098:	4622      	mov	r2, r4
   2309a:	eb08 0109 	add.w	r1, r8, r9
   2309e:	f003 fda5 	bl	26bec <memcpy>
      return 1;
   230a2:	e7e0      	b.n	23066 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   230a4:	3b01      	subs	r3, #1
   230a6:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   230a8:	42a3      	cmp	r3, r4
   230aa:	d2d1      	bcs.n	23050 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   230ac:	2000      	movs	r0, #0
   230ae:	e7df      	b.n	23070 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   230b0:	200032b0 	.word	0x200032b0

000230b4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   230b4:	4b03      	ldr	r3, [pc, #12]	; (230c4 <SEGGER_RTT_HasDataUp+0x10>)
   230b6:	2218      	movs	r2, #24
   230b8:	fb02 3300 	mla	r3, r2, r0, r3
   230bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   230be:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   230c0:	1a80      	subs	r0, r0, r2
   230c2:	4770      	bx	lr
   230c4:	200032b0 	.word	0x200032b0

000230c8 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   230c8:	4803      	ldr	r0, [pc, #12]	; (230d8 <zephyr_rtt_mutex_lock+0x10>)
   230ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   230ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   230d2:	f000 baad 	b.w	23630 <z_impl_k_mutex_lock>
   230d6:	bf00      	nop
   230d8:	20000b8c 	.word	0x20000b8c

000230dc <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   230dc:	4801      	ldr	r0, [pc, #4]	; (230e4 <zephyr_rtt_mutex_unlock+0x8>)
   230de:	f000 bb21 	b.w	23724 <z_impl_k_mutex_unlock>
   230e2:	bf00      	nop
   230e4:	20000b8c 	.word	0x20000b8c

000230e8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   230e8:	4b01      	ldr	r3, [pc, #4]	; (230f0 <z_impl_z_errno+0x8>)
   230ea:	6898      	ldr	r0, [r3, #8]
}
   230ec:	3064      	adds	r0, #100	; 0x64
   230ee:	4770      	bx	lr
   230f0:	20003358 	.word	0x20003358

000230f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   230f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230f8:	4605      	mov	r5, r0
   230fa:	af00      	add	r7, sp, #0
   230fc:	460e      	mov	r6, r1
	__asm__ volatile(
   230fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   23102:	f3ef 8a11 	mrs	sl, BASEPRI
   23106:	f383 8812 	msr	BASEPRI_MAX, r3
   2310a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2310e:	f001 f895 	bl	2423c <z_impl_z_current_get>
   23112:	2d04      	cmp	r5, #4
   23114:	bf96      	itet	ls
   23116:	4b2f      	ldrls	r3, [pc, #188]	; (231d4 <z_fatal_error+0xe0>)
   23118:	4b2f      	ldrhi	r3, [pc, #188]	; (231d8 <z_fatal_error+0xe4>)
   2311a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2311e:	46e9      	mov	r9, sp
   23120:	b08c      	sub	sp, #48	; 0x30
   23122:	4604      	mov	r4, r0
   23124:	466a      	mov	r2, sp
   23126:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 231dc <z_fatal_error+0xe8>
   2312a:	6213      	str	r3, [r2, #32]
   2312c:	f240 4302 	movw	r3, #1026	; 0x402
   23130:	8513      	strh	r3, [r2, #40]	; 0x28
   23132:	492b      	ldr	r1, [pc, #172]	; (231e0 <z_fatal_error+0xec>)
   23134:	4b2b      	ldr	r3, [pc, #172]	; (231e4 <z_fatal_error+0xf0>)
   23136:	6151      	str	r1, [r2, #20]
   23138:	f04f 0b00 	mov.w	fp, #0
   2313c:	e9c2 8506 	strd	r8, r5, [r2, #24]
   23140:	f8c2 b024 	str.w	fp, [r2, #36]	; 0x24
   23144:	f842 3f10 	str.w	r3, [r2, #16]!
   23148:	4827      	ldr	r0, [pc, #156]	; (231e8 <z_fatal_error+0xf4>)
   2314a:	465b      	mov	r3, fp
   2314c:	f44f 5151 	mov.w	r1, #13376	; 0x3440
   23150:	f7f0 fbea 	bl	13928 <z_impl_z_log_msg_static_create>
   23154:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   23156:	b196      	cbz	r6, 2317e <z_fatal_error+0x8a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   23158:	69f3      	ldr	r3, [r6, #28]
   2315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2315e:	b173      	cbz	r3, 2317e <z_fatal_error+0x8a>
		LOG_ERR("Fault during interrupt handling\n");
   23160:	b088      	sub	sp, #32
   23162:	466a      	mov	r2, sp
   23164:	4b21      	ldr	r3, [pc, #132]	; (231ec <z_fatal_error+0xf8>)
   23166:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2316a:	2303      	movs	r3, #3
   2316c:	f842 3f10 	str.w	r3, [r2, #16]!
   23170:	481d      	ldr	r0, [pc, #116]	; (231e8 <z_fatal_error+0xf4>)
   23172:	465b      	mov	r3, fp
   23174:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   23178:	f7f0 fbd6 	bl	13928 <z_impl_z_log_msg_static_create>
   2317c:	46cd      	mov	sp, r9
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2317e:	b12c      	cbz	r4, 2318c <z_fatal_error+0x98>
   23180:	4620      	mov	r0, r4
   23182:	f006 fca5 	bl	29ad0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   23186:	b108      	cbz	r0, 2318c <z_fatal_error+0x98>
   23188:	7803      	ldrb	r3, [r0, #0]
   2318a:	b903      	cbnz	r3, 2318e <z_fatal_error+0x9a>
		thread_name = "unknown";
   2318c:	4818      	ldr	r0, [pc, #96]	; (231f0 <z_fatal_error+0xfc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2318e:	46e9      	mov	r9, sp
   23190:	b08a      	sub	sp, #40	; 0x28
   23192:	466a      	mov	r2, sp
   23194:	4b17      	ldr	r3, [pc, #92]	; (231f4 <z_fatal_error+0x100>)
   23196:	e9c2 3805 	strd	r3, r8, [r2, #20]
   2319a:	f240 4302 	movw	r3, #1026	; 0x402
   2319e:	8493      	strh	r3, [r2, #36]	; 0x24
   231a0:	4b15      	ldr	r3, [pc, #84]	; (231f8 <z_fatal_error+0x104>)
   231a2:	e9c2 4007 	strd	r4, r0, [r2, #28]
   231a6:	f842 3f10 	str.w	r3, [r2, #16]!
   231aa:	2300      	movs	r3, #0
   231ac:	480e      	ldr	r0, [pc, #56]	; (231e8 <z_fatal_error+0xf4>)
   231ae:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   231b2:	f7f0 fbb9 	bl	13928 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   231b6:	4631      	mov	r1, r6
   231b8:	46cd      	mov	sp, r9
   231ba:	4628      	mov	r0, r5
   231bc:	f7fe f82e 	bl	2121c <k_sys_fatal_error_handler>
	__asm__ volatile(
   231c0:	f38a 8811 	msr	BASEPRI, sl
   231c4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   231c8:	4620      	mov	r0, r4
   231ca:	f7f2 f9f9 	bl	155c0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   231ce:	46bd      	mov	sp, r7
   231d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231d4:	0002b450 	.word	0x0002b450
   231d8:	0002f366 	.word	0x0002f366
   231dc:	0002f42b 	.word	0x0002f42b
   231e0:	0002f374 	.word	0x0002f374
   231e4:	01000006 	.word	0x01000006
   231e8:	0002a918 	.word	0x0002a918
   231ec:	0002f3a0 	.word	0x0002f3a0
   231f0:	0002c5bf 	.word	0x0002c5bf
   231f4:	0002f3c5 	.word	0x0002f3c5
   231f8:	01000005 	.word	0x01000005

000231fc <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   231fc:	4b10      	ldr	r3, [pc, #64]	; (23240 <z_sys_init_run_level+0x44>)
{
   231fe:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23200:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23204:	3001      	adds	r0, #1
   23206:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2320a:	42a6      	cmp	r6, r4
   2320c:	d800      	bhi.n	23210 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   2320e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   23210:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   23214:	b18d      	cbz	r5, 2323a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   23216:	4628      	mov	r0, r5
   23218:	4798      	blx	r3
			if (rc != 0) {
   2321a:	b138      	cbz	r0, 2322c <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2321c:	2800      	cmp	r0, #0
   2321e:	bfb8      	it	lt
   23220:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   23222:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   23224:	28ff      	cmp	r0, #255	; 0xff
   23226:	bfa8      	it	ge
   23228:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   2322a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2322c:	68ea      	ldr	r2, [r5, #12]
   2322e:	7853      	ldrb	r3, [r2, #1]
   23230:	f043 0301 	orr.w	r3, r3, #1
   23234:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23236:	3408      	adds	r4, #8
   23238:	e7e7      	b.n	2320a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2323a:	4798      	blx	r3
   2323c:	e7fb      	b.n	23236 <z_sys_init_run_level+0x3a>
   2323e:	bf00      	nop
   23240:	0002b464 	.word	0x0002b464

00023244 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   23244:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   23246:	4b0a      	ldr	r3, [pc, #40]	; (23270 <bg_thread_main+0x2c>)
   23248:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2324a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   2324c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2324e:	f7ff ffd5 	bl	231fc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   23252:	f001 fb0b 	bl	2486c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   23256:	2004      	movs	r0, #4
   23258:	f7ff ffd0 	bl	231fc <z_sys_init_run_level>

	z_init_static_threads();
   2325c:	f000 f970 	bl	23540 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   23260:	f7ee fb02 	bl	11868 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23264:	4a03      	ldr	r2, [pc, #12]	; (23274 <bg_thread_main+0x30>)
   23266:	7b13      	ldrb	r3, [r2, #12]
   23268:	f023 0301 	bic.w	r3, r3, #1
   2326c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2326e:	bd08      	pop	{r3, pc}
   23270:	200039be 	.word	0x200039be
   23274:	20002d10 	.word	0x20002d10

00023278 <z_bss_zero>:
{
   23278:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2327a:	4803      	ldr	r0, [pc, #12]	; (23288 <z_bss_zero+0x10>)
   2327c:	4a03      	ldr	r2, [pc, #12]	; (2328c <z_bss_zero+0x14>)
   2327e:	2100      	movs	r1, #0
   23280:	1a12      	subs	r2, r2, r0
   23282:	f006 fb67 	bl	29954 <z_early_memset>
}
   23286:	bd08      	pop	{r3, pc}
   23288:	20000d48 	.word	0x20000d48
   2328c:	200039c0 	.word	0x200039c0

00023290 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   23290:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   23292:	2300      	movs	r3, #0
{
   23294:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   23296:	2201      	movs	r2, #1
   23298:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   2329c:	4e13      	ldr	r6, [pc, #76]	; (232ec <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2329e:	4d14      	ldr	r5, [pc, #80]	; (232f0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   232a0:	9301      	str	r3, [sp, #4]
   232a2:	220f      	movs	r2, #15
   232a4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   232a8:	4912      	ldr	r1, [pc, #72]	; (232f4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   232aa:	2314      	movs	r3, #20
   232ac:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   232b0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   232b4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   232b6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   232ba:	fb00 1104 	mla	r1, r0, r4, r1
   232be:	4b0e      	ldr	r3, [pc, #56]	; (232f8 <z_init_cpu+0x68>)
   232c0:	9500      	str	r5, [sp, #0]
   232c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   232c6:	4630      	mov	r0, r6
   232c8:	f000 f8dc 	bl	23484 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   232cc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   232ce:	4a0b      	ldr	r2, [pc, #44]	; (232fc <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   232d0:	60ee      	str	r6, [r5, #12]
   232d2:	f023 0304 	bic.w	r3, r3, #4
   232d6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   232d8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   232dc:	fb04 3303 	mla	r3, r4, r3, r3
   232e0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   232e2:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   232e4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   232e6:	b006      	add	sp, #24
   232e8:	bd70      	pop	{r4, r5, r6, pc}
   232ea:	bf00      	nop
   232ec:	20002c90 	.word	0x20002c90
   232f0:	20003358 	.word	0x20003358
   232f4:	20006240 	.word	0x20006240
   232f8:	000235f9 	.word	0x000235f9
   232fc:	20005a00 	.word	0x20005a00

00023300 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   23300:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23302:	2000      	movs	r0, #0
{
   23304:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   23306:	f7ff ff79 	bl	231fc <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2330a:	4b2e      	ldr	r3, [pc, #184]	; (233c4 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2330c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   23310:	4d2d      	ldr	r5, [pc, #180]	; (233c8 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   23312:	4e2e      	ldr	r6, [pc, #184]	; (233cc <z_cstart+0xcc>)
   23314:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23316:	4f2e      	ldr	r7, [pc, #184]	; (233d0 <z_cstart+0xd0>)
   23318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2331c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2331e:	23e0      	movs	r3, #224	; 0xe0
   23320:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   23324:	2400      	movs	r4, #0
   23326:	2320      	movs	r3, #32
   23328:	77eb      	strb	r3, [r5, #31]
   2332a:	762c      	strb	r4, [r5, #24]
   2332c:	766c      	strb	r4, [r5, #25]
   2332e:	76ac      	strb	r4, [r5, #26]
   23330:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   23334:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23336:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2333a:	626b      	str	r3, [r5, #36]	; 0x24
   2333c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   23340:	f7f2 f8b2 	bl	154a8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   23344:	f7f1 fb66 	bl	14a14 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2334c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2334e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23350:	f7f2 fa0e 	bl	15770 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23354:	f7f2 f94a 	bl	155ec <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   23358:	f7f0 f972 	bl	13640 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2335c:	f240 1301 	movw	r3, #257	; 0x101
   23360:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   23364:	ab06      	add	r3, sp, #24
   23366:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   23368:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   2336c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2336e:	f006 fae5 	bl	2993c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23372:	2001      	movs	r0, #1
   23374:	f7ff ff42 	bl	231fc <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23378:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   2337a:	4d16      	ldr	r5, [pc, #88]	; (233d4 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   2337c:	f7ff ff3e 	bl	231fc <z_sys_init_run_level>
	z_sched_init();
   23380:	f000 feb8 	bl	240f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23384:	4b14      	ldr	r3, [pc, #80]	; (233d8 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   23386:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23388:	9305      	str	r3, [sp, #20]
   2338a:	2301      	movs	r3, #1
   2338c:	4913      	ldr	r1, [pc, #76]	; (233dc <z_cstart+0xdc>)
   2338e:	9400      	str	r4, [sp, #0]
   23390:	e9cd 4303 	strd	r4, r3, [sp, #12]
   23394:	f44f 6200 	mov.w	r2, #2048	; 0x800
   23398:	463b      	mov	r3, r7
   2339a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2339e:	4628      	mov	r0, r5
   233a0:	f000 f870 	bl	23484 <z_setup_new_thread>
   233a4:	7b6a      	ldrb	r2, [r5, #13]
   233a6:	4606      	mov	r6, r0
   233a8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   233ac:	4628      	mov	r0, r5
   233ae:	736a      	strb	r2, [r5, #13]
   233b0:	f006 fd9c 	bl	29eec <z_ready_thread>
	z_init_cpu(0);
   233b4:	4620      	mov	r0, r4
   233b6:	f7ff ff6b 	bl	23290 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   233ba:	463a      	mov	r2, r7
   233bc:	4631      	mov	r1, r6
   233be:	4628      	mov	r0, r5
   233c0:	f7f1 fcb4 	bl	14d2c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   233c4:	20006240 	.word	0x20006240
   233c8:	e000ed00 	.word	0xe000ed00
   233cc:	20003358 	.word	0x20003358
   233d0:	00023245 	.word	0x00023245
   233d4:	20002d10 	.word	0x20002d10
   233d8:	0002f439 	.word	0x0002f439
   233dc:	200063c0 	.word	0x200063c0

000233e0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   233e0:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   233e2:	4c06      	ldr	r4, [pc, #24]	; (233fc <statics_init+0x1c>)
   233e4:	4d06      	ldr	r5, [pc, #24]	; (23400 <statics_init+0x20>)
   233e6:	42ac      	cmp	r4, r5
   233e8:	d301      	bcc.n	233ee <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   233ea:	2000      	movs	r0, #0
   233ec:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   233ee:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   233f2:	4620      	mov	r0, r4
   233f4:	f006 fab2 	bl	2995c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   233f8:	3414      	adds	r4, #20
   233fa:	e7f4      	b.n	233e6 <statics_init+0x6>
   233fc:	20000b78 	.word	0x20000b78
   23400:	20000b78 	.word	0x20000b78

00023404 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   23404:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23406:	4c06      	ldr	r4, [pc, #24]	; (23420 <init_mem_slab_module+0x1c>)
   23408:	4d06      	ldr	r5, [pc, #24]	; (23424 <init_mem_slab_module+0x20>)
	int rc = 0;
   2340a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2340c:	42ac      	cmp	r4, r5
   2340e:	d300      	bcc.n	23412 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   23410:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   23412:	4620      	mov	r0, r4
   23414:	f006 fb14 	bl	29a40 <create_free_list>
		if (rc < 0) {
   23418:	2800      	cmp	r0, #0
   2341a:	dbf9      	blt.n	23410 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2341c:	341c      	adds	r4, #28
   2341e:	e7f5      	b.n	2340c <init_mem_slab_module+0x8>
   23420:	20000b24 	.word	0x20000b24
   23424:	20000b78 	.word	0x20000b78

00023428 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23428:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2342a:	460c      	mov	r4, r1
	__asm__ volatile(
   2342c:	f04f 0540 	mov.w	r5, #64	; 0x40
   23430:	f3ef 8111 	mrs	r1, BASEPRI
   23434:	f385 8812 	msr	BASEPRI_MAX, r5
   23438:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   2343c:	6945      	ldr	r5, [r0, #20]
   2343e:	b15d      	cbz	r5, 23458 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   23440:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   23442:	682b      	ldr	r3, [r5, #0]
   23444:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   23446:	6983      	ldr	r3, [r0, #24]
   23448:	3301      	adds	r3, #1
   2344a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   2344c:	2000      	movs	r0, #0
	__asm__ volatile(
   2344e:	f381 8811 	msr	BASEPRI, r1
   23452:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   23456:	e011      	b.n	2347c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23458:	ea52 0603 	orrs.w	r6, r2, r3
   2345c:	d103      	bne.n	23466 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   2345e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   23460:	f06f 000b 	mvn.w	r0, #11
   23464:	e7f3      	b.n	2344e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   23466:	e9cd 2300 	strd	r2, r3, [sp]
   2346a:	4602      	mov	r2, r0
   2346c:	3008      	adds	r0, #8
   2346e:	f000 fd4b 	bl	23f08 <z_pend_curr>
		if (result == 0) {
   23472:	b918      	cbnz	r0, 2347c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   23474:	4b02      	ldr	r3, [pc, #8]	; (23480 <k_mem_slab_alloc+0x58>)
   23476:	689b      	ldr	r3, [r3, #8]
   23478:	695b      	ldr	r3, [r3, #20]
   2347a:	6023      	str	r3, [r4, #0]
}
   2347c:	b002      	add	sp, #8
   2347e:	bd70      	pop	{r4, r5, r6, pc}
   23480:	20003358 	.word	0x20003358

00023484 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23484:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23488:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2348a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2348c:	2604      	movs	r6, #4
   2348e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   23490:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   23492:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23494:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   23498:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2349a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2349c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   234a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   234a2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   234a4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   234a8:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   234aa:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   234ae:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   234b2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   234b4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   234b6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   234b8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   234bc:	9202      	str	r2, [sp, #8]
   234be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   234c0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   234c2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   234c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   234c6:	9200      	str	r2, [sp, #0]
   234c8:	4642      	mov	r2, r8
{
   234ca:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   234cc:	f7f1 fbfc 	bl	14cc8 <arch_new_thread>
	if (!_current) {
   234d0:	4b04      	ldr	r3, [pc, #16]	; (234e4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   234d2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   234d4:	689b      	ldr	r3, [r3, #8]
   234d6:	b103      	cbz	r3, 234da <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   234d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   234da:	6763      	str	r3, [r4, #116]	; 0x74
}
   234dc:	4640      	mov	r0, r8
   234de:	b004      	add	sp, #16
   234e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   234e4:	20003358 	.word	0x20003358

000234e8 <z_impl_k_thread_create>:
{
   234e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ea:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   234ec:	2500      	movs	r5, #0
   234ee:	9505      	str	r5, [sp, #20]
   234f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   234f2:	9504      	str	r5, [sp, #16]
   234f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   234f6:	9503      	str	r5, [sp, #12]
   234f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   234fa:	9502      	str	r5, [sp, #8]
{
   234fc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23500:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23502:	9501      	str	r5, [sp, #4]
   23504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23506:	9500      	str	r5, [sp, #0]
{
   23508:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2350a:	f7ff ffbb 	bl	23484 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2350e:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   23512:	bf08      	it	eq
   23514:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   23518:	d005      	beq.n	23526 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2351a:	ea56 0307 	orrs.w	r3, r6, r7
   2351e:	d105      	bne.n	2352c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   23520:	4620      	mov	r0, r4
   23522:	f000 fd67 	bl	23ff4 <z_sched_start>
}
   23526:	4620      	mov	r0, r4
   23528:	b007      	add	sp, #28
   2352a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2352c:	4903      	ldr	r1, [pc, #12]	; (2353c <z_impl_k_thread_create+0x54>)
   2352e:	463a      	mov	r2, r7
   23530:	4633      	mov	r3, r6
   23532:	f104 0018 	add.w	r0, r4, #24
   23536:	f000 ff59 	bl	243ec <z_add_timeout>
   2353a:	e7f4      	b.n	23526 <z_impl_k_thread_create+0x3e>
   2353c:	00029f75 	.word	0x00029f75

00023540 <z_init_static_threads>:
{
   23540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23544:	4c29      	ldr	r4, [pc, #164]	; (235ec <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23546:	4d2a      	ldr	r5, [pc, #168]	; (235f0 <z_init_static_threads+0xb0>)
{
   23548:	b087      	sub	sp, #28
   2354a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2354c:	42ae      	cmp	r6, r5
   2354e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   23552:	d30f      	bcc.n	23574 <z_init_static_threads+0x34>
	k_sched_lock();
   23554:	f000 fd9e 	bl	24094 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23558:	4c24      	ldr	r4, [pc, #144]	; (235ec <z_init_static_threads+0xac>)
   2355a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 235f4 <z_init_static_threads+0xb4>
   2355e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23562:	f240 37e7 	movw	r7, #999	; 0x3e7
   23566:	42ac      	cmp	r4, r5
   23568:	d320      	bcc.n	235ac <z_init_static_threads+0x6c>
}
   2356a:	b007      	add	sp, #28
   2356c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23570:	f000 bda4 	b.w	240bc <k_sched_unlock>
		z_setup_new_thread(
   23574:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23578:	9305      	str	r3, [sp, #20]
   2357a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   2357e:	9304      	str	r3, [sp, #16]
   23580:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23584:	9303      	str	r3, [sp, #12]
   23586:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2358a:	9302      	str	r3, [sp, #8]
   2358c:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23590:	9301      	str	r3, [sp, #4]
   23592:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23596:	9300      	str	r3, [sp, #0]
   23598:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   2359c:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   235a0:	f7ff ff70 	bl	23484 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   235a4:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   235a8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   235aa:	e7ce      	b.n	2354a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   235ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   235ae:	1c5a      	adds	r2, r3, #1
   235b0:	d00d      	beq.n	235ce <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   235b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   235b6:	2100      	movs	r1, #0
   235b8:	4638      	mov	r0, r7
   235ba:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   235be:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   235c2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   235c6:	d104      	bne.n	235d2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   235c8:	4640      	mov	r0, r8
   235ca:	f000 fd13 	bl	23ff4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   235ce:	342c      	adds	r4, #44	; 0x2c
   235d0:	e7c9      	b.n	23566 <z_init_static_threads+0x26>
   235d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   235d6:	2300      	movs	r3, #0
   235d8:	f7dc fd82 	bl	e0 <__aeabi_uldivmod>
   235dc:	4602      	mov	r2, r0
   235de:	460b      	mov	r3, r1
   235e0:	f108 0018 	add.w	r0, r8, #24
   235e4:	4649      	mov	r1, r9
   235e6:	f000 ff01 	bl	243ec <z_add_timeout>
   235ea:	e7f0      	b.n	235ce <z_init_static_threads+0x8e>
   235ec:	0002a718 	.word	0x0002a718
   235f0:	0002a718 	.word	0x0002a718
   235f4:	00029f75 	.word	0x00029f75

000235f8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   235f8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   235fa:	4c0b      	ldr	r4, [pc, #44]	; (23628 <idle+0x30>)
	return !z_sys_post_kernel;
   235fc:	4d0b      	ldr	r5, [pc, #44]	; (2362c <idle+0x34>)
	__asm__ volatile(
   235fe:	f04f 0240 	mov.w	r2, #64	; 0x40
   23602:	f3ef 8311 	mrs	r3, BASEPRI
   23606:	f382 8812 	msr	BASEPRI_MAX, r2
   2360a:	f3bf 8f6f 	isb	sy
   2360e:	f006 fd5f 	bl	2a0d0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23612:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   23614:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   23616:	b913      	cbnz	r3, 2361e <idle+0x26>
	arch_cpu_idle();
   23618:	f7f1 fa02 	bl	14a20 <arch_cpu_idle>
}
   2361c:	e7ef      	b.n	235fe <idle+0x6>
   2361e:	f7f0 fd63 	bl	140e8 <pm_system_suspend>
   23622:	2800      	cmp	r0, #0
   23624:	d1eb      	bne.n	235fe <idle+0x6>
   23626:	e7f7      	b.n	23618 <idle+0x20>
   23628:	20003358 	.word	0x20003358
   2362c:	200039be 	.word	0x200039be

00023630 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   23630:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23634:	4604      	mov	r4, r0
   23636:	4617      	mov	r7, r2
   23638:	461e      	mov	r6, r3
   2363a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2363e:	f3ef 8811 	mrs	r8, BASEPRI
   23642:	f383 8812 	msr	BASEPRI_MAX, r3
   23646:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2364a:	68c3      	ldr	r3, [r0, #12]
   2364c:	4a33      	ldr	r2, [pc, #204]	; (2371c <z_impl_k_mutex_lock+0xec>)
   2364e:	b17b      	cbz	r3, 23670 <z_impl_k_mutex_lock+0x40>
   23650:	6880      	ldr	r0, [r0, #8]
   23652:	6891      	ldr	r1, [r2, #8]
   23654:	4288      	cmp	r0, r1
   23656:	d019      	beq.n	2368c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   23658:	ea57 0306 	orrs.w	r3, r7, r6
   2365c:	d118      	bne.n	23690 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2365e:	f388 8811 	msr	BASEPRI, r8
   23662:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   23666:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2366a:	b002      	add	sp, #8
   2366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23670:	6891      	ldr	r1, [r2, #8]
   23672:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   23676:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   23678:	3301      	adds	r3, #1
   2367a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2367c:	6893      	ldr	r3, [r2, #8]
   2367e:	60a3      	str	r3, [r4, #8]
   23680:	f388 8811 	msr	BASEPRI, r8
   23684:	f3bf 8f6f 	isb	sy
		return 0;
   23688:	2000      	movs	r0, #0
   2368a:	e7ee      	b.n	2366a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   2368c:	6921      	ldr	r1, [r4, #16]
   2368e:	e7f2      	b.n	23676 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23690:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23694:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   23698:	4299      	cmp	r1, r3
   2369a:	bfa8      	it	ge
   2369c:	4619      	movge	r1, r3
   2369e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   236a2:	4291      	cmp	r1, r2
   236a4:	bfb8      	it	lt
   236a6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   236a8:	428b      	cmp	r3, r1
   236aa:	dd2e      	ble.n	2370a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   236ac:	f006 fa1b 	bl	29ae6 <adjust_owner_prio.isra.0>
   236b0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   236b2:	e9cd 7600 	strd	r7, r6, [sp]
   236b6:	481a      	ldr	r0, [pc, #104]	; (23720 <z_impl_k_mutex_lock+0xf0>)
   236b8:	4622      	mov	r2, r4
   236ba:	4641      	mov	r1, r8
   236bc:	f000 fc24 	bl	23f08 <z_pend_curr>
	if (got_mutex == 0) {
   236c0:	2800      	cmp	r0, #0
   236c2:	d0e1      	beq.n	23688 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   236c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   236c8:	f3ef 8611 	mrs	r6, BASEPRI
   236cc:	f383 8812 	msr	BASEPRI_MAX, r3
   236d0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   236d4:	68a0      	ldr	r0, [r4, #8]
   236d6:	b1d0      	cbz	r0, 2370e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   236d8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   236da:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   236dc:	429c      	cmp	r4, r3
   236de:	d00a      	beq.n	236f6 <z_impl_k_mutex_lock+0xc6>
   236e0:	b14b      	cbz	r3, 236f6 <z_impl_k_mutex_lock+0xc6>
   236e2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   236e6:	4299      	cmp	r1, r3
   236e8:	bfa8      	it	ge
   236ea:	4619      	movge	r1, r3
   236ec:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   236f0:	4299      	cmp	r1, r3
   236f2:	bfb8      	it	lt
   236f4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   236f6:	f006 f9f6 	bl	29ae6 <adjust_owner_prio.isra.0>
   236fa:	b140      	cbz	r0, 2370e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   236fc:	4808      	ldr	r0, [pc, #32]	; (23720 <z_impl_k_mutex_lock+0xf0>)
   236fe:	4631      	mov	r1, r6
   23700:	f000 fc66 	bl	23fd0 <z_reschedule>
	return -EAGAIN;
   23704:	f06f 000a 	mvn.w	r0, #10
   23708:	e7af      	b.n	2366a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   2370a:	2500      	movs	r5, #0
   2370c:	e7d1      	b.n	236b2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   2370e:	2d00      	cmp	r5, #0
   23710:	d1f4      	bne.n	236fc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   23712:	f386 8811 	msr	BASEPRI, r6
   23716:	f3bf 8f6f 	isb	sy
   2371a:	e7f3      	b.n	23704 <z_impl_k_mutex_lock+0xd4>
   2371c:	20003358 	.word	0x20003358
   23720:	200039bf 	.word	0x200039bf

00023724 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   23724:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   23726:	6883      	ldr	r3, [r0, #8]
{
   23728:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2372a:	b36b      	cbz	r3, 23788 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2372c:	4a19      	ldr	r2, [pc, #100]	; (23794 <z_impl_k_mutex_unlock+0x70>)
   2372e:	6892      	ldr	r2, [r2, #8]
   23730:	4293      	cmp	r3, r2
   23732:	d12c      	bne.n	2378e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   23734:	68c3      	ldr	r3, [r0, #12]
   23736:	2b01      	cmp	r3, #1
   23738:	d903      	bls.n	23742 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2373a:	3b01      	subs	r3, #1
   2373c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2373e:	2000      	movs	r0, #0
}
   23740:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   23742:	f04f 0340 	mov.w	r3, #64	; 0x40
   23746:	f3ef 8511 	mrs	r5, BASEPRI
   2374a:	f383 8812 	msr	BASEPRI_MAX, r3
   2374e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   23752:	6901      	ldr	r1, [r0, #16]
   23754:	6880      	ldr	r0, [r0, #8]
   23756:	f006 f9c6 	bl	29ae6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2375a:	4620      	mov	r0, r4
   2375c:	f006 fc25 	bl	29faa <z_unpend_first_thread>
	mutex->owner = new_owner;
   23760:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   23762:	b158      	cbz	r0, 2377c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   23764:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23768:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2376a:	2200      	movs	r2, #0
   2376c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2376e:	f006 fbbd 	bl	29eec <z_ready_thread>
		z_reschedule(&lock, key);
   23772:	4809      	ldr	r0, [pc, #36]	; (23798 <z_impl_k_mutex_unlock+0x74>)
   23774:	4629      	mov	r1, r5
   23776:	f000 fc2b 	bl	23fd0 <z_reschedule>
   2377a:	e7e0      	b.n	2373e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2377c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2377e:	f385 8811 	msr	BASEPRI, r5
   23782:	f3bf 8f6f 	isb	sy
   23786:	e7da      	b.n	2373e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   23788:	f06f 0015 	mvn.w	r0, #21
   2378c:	e7d8      	b.n	23740 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2378e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23792:	e7d5      	b.n	23740 <z_impl_k_mutex_unlock+0x1c>
   23794:	20003358 	.word	0x20003358
   23798:	200039bf 	.word	0x200039bf

0002379c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2379c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2379e:	4611      	mov	r1, r2
	__asm__ volatile(
   237a0:	f04f 0240 	mov.w	r2, #64	; 0x40
   237a4:	f3ef 8511 	mrs	r5, BASEPRI
   237a8:	f382 8812 	msr	BASEPRI_MAX, r2
   237ac:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   237b0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   237b2:	b19c      	cbz	r4, 237dc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   237b4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   237b6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   237b8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   237bc:	4294      	cmp	r4, r2
	list->head = node;
   237be:	6003      	str	r3, [r0, #0]
	list->tail = node;
   237c0:	bf08      	it	eq
   237c2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   237c4:	2101      	movs	r1, #1
   237c6:	4620      	mov	r0, r4
   237c8:	f006 fa02 	bl	29bd0 <z_queue_node_peek>
   237cc:	4604      	mov	r4, r0
	__asm__ volatile(
   237ce:	f385 8811 	msr	BASEPRI, r5
   237d2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   237d6:	4620      	mov	r0, r4
   237d8:	b003      	add	sp, #12
   237da:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   237dc:	ea51 0203 	orrs.w	r2, r1, r3
   237e0:	d0f5      	beq.n	237ce <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   237e2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   237e6:	e9cd 1300 	strd	r1, r3, [sp]
   237ea:	4610      	mov	r0, r2
   237ec:	4629      	mov	r1, r5
   237ee:	f000 fb8b 	bl	23f08 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   237f2:	2800      	cmp	r0, #0
   237f4:	d1ef      	bne.n	237d6 <z_impl_k_queue_get+0x3a>
   237f6:	4b02      	ldr	r3, [pc, #8]	; (23800 <z_impl_k_queue_get+0x64>)
   237f8:	689b      	ldr	r3, [r3, #8]
   237fa:	695c      	ldr	r4, [r3, #20]
   237fc:	e7eb      	b.n	237d6 <z_impl_k_queue_get+0x3a>
   237fe:	bf00      	nop
   23800:	20003358 	.word	0x20003358

00023804 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23804:	b538      	push	{r3, r4, r5, lr}
   23806:	4604      	mov	r4, r0
	__asm__ volatile(
   23808:	f04f 0340 	mov.w	r3, #64	; 0x40
   2380c:	f3ef 8511 	mrs	r5, BASEPRI
   23810:	f383 8812 	msr	BASEPRI_MAX, r3
   23814:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   23818:	f006 fbc7 	bl	29faa <z_unpend_first_thread>

	if (thread != NULL) {
   2381c:	b148      	cbz	r0, 23832 <z_impl_k_sem_give+0x2e>
   2381e:	2200      	movs	r2, #0
   23820:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23822:	f006 fb63 	bl	29eec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23826:	4629      	mov	r1, r5
   23828:	4808      	ldr	r0, [pc, #32]	; (2384c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2382a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2382e:	f000 bbcf 	b.w	23fd0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23832:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23836:	429a      	cmp	r2, r3
   23838:	bf18      	it	ne
   2383a:	3301      	addne	r3, #1
   2383c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2383e:	2102      	movs	r1, #2
   23840:	f104 0010 	add.w	r0, r4, #16
   23844:	f006 fde9 	bl	2a41a <z_handle_obj_poll_events>
}
   23848:	e7ed      	b.n	23826 <z_impl_k_sem_give+0x22>
   2384a:	bf00      	nop
   2384c:	200039bf 	.word	0x200039bf

00023850 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23850:	b513      	push	{r0, r1, r4, lr}
   23852:	f04f 0440 	mov.w	r4, #64	; 0x40
   23856:	f3ef 8111 	mrs	r1, BASEPRI
   2385a:	f384 8812 	msr	BASEPRI_MAX, r4
   2385e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   23862:	6884      	ldr	r4, [r0, #8]
   23864:	b144      	cbz	r4, 23878 <z_impl_k_sem_take+0x28>
		sem->count--;
   23866:	3c01      	subs	r4, #1
   23868:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2386a:	f381 8811 	msr	BASEPRI, r1
   2386e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23872:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   23874:	b002      	add	sp, #8
   23876:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23878:	ea52 0403 	orrs.w	r4, r2, r3
   2387c:	d106      	bne.n	2388c <z_impl_k_sem_take+0x3c>
   2387e:	f381 8811 	msr	BASEPRI, r1
   23882:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23886:	f06f 000f 	mvn.w	r0, #15
   2388a:	e7f3      	b.n	23874 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2388c:	e9cd 2300 	strd	r2, r3, [sp]
   23890:	4602      	mov	r2, r0
   23892:	4802      	ldr	r0, [pc, #8]	; (2389c <z_impl_k_sem_take+0x4c>)
   23894:	f000 fb38 	bl	23f08 <z_pend_curr>
	return ret;
   23898:	e7ec      	b.n	23874 <z_impl_k_sem_take+0x24>
   2389a:	bf00      	nop
   2389c:	200039bf 	.word	0x200039bf

000238a0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   238a0:	b570      	push	{r4, r5, r6, lr}
   238a2:	4604      	mov	r4, r0
	__asm__ volatile(
   238a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   238a8:	f3ef 8511 	mrs	r5, BASEPRI
   238ac:	f383 8812 	msr	BASEPRI_MAX, r3
   238b0:	f3bf 8f6f 	isb	sy
   238b4:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   238b8:	4620      	mov	r0, r4
   238ba:	f006 fb76 	bl	29faa <z_unpend_first_thread>
		if (thread == NULL) {
   238be:	b118      	cbz	r0, 238c8 <z_impl_k_sem_reset+0x28>
   238c0:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   238c2:	f006 fb13 	bl	29eec <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   238c6:	e7f7      	b.n	238b8 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
   238c8:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   238ca:	2102      	movs	r1, #2
   238cc:	f104 0010 	add.w	r0, r4, #16
   238d0:	f006 fda3 	bl	2a41a <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   238d4:	4629      	mov	r1, r5
   238d6:	4802      	ldr	r0, [pc, #8]	; (238e0 <z_impl_k_sem_reset+0x40>)
}
   238d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   238dc:	f000 bb78 	b.w	23fd0 <z_reschedule>
   238e0:	200039bf 	.word	0x200039bf

000238e4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   238e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   238e6:	4b09      	ldr	r3, [pc, #36]	; (2390c <k_sys_work_q_init+0x28>)
   238e8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   238ea:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   238ec:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   238ee:	9300      	str	r3, [sp, #0]
   238f0:	4907      	ldr	r1, [pc, #28]	; (23910 <k_sys_work_q_init+0x2c>)
   238f2:	4808      	ldr	r0, [pc, #32]	; (23914 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   238f4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   238f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   238fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   23900:	f000 f924 	bl	23b4c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   23904:	4620      	mov	r0, r4
   23906:	b004      	add	sp, #16
   23908:	bd10      	pop	{r4, pc}
   2390a:	bf00      	nop
   2390c:	0002f441 	.word	0x0002f441
   23910:	20006c00 	.word	0x20006c00
   23914:	20002d90 	.word	0x20002d90

00023918 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   23918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2391c:	4e4a      	ldr	r6, [pc, #296]	; (23a48 <work_queue_main+0x130>)
   2391e:	b085      	sub	sp, #20
   23920:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   23922:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   23926:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2392a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2392e:	f3ef 8711 	mrs	r7, BASEPRI
   23932:	f383 8812 	msr	BASEPRI_MAX, r3
   23936:	f3bf 8f6f 	isb	sy
   2393a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2393e:	b98d      	cbnz	r5, 23964 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   23940:	2102      	movs	r1, #2
   23942:	f104 0098 	add.w	r0, r4, #152	; 0x98
   23946:	f006 f984 	bl	29c52 <flag_test_and_clear>
   2394a:	2800      	cmp	r0, #0
   2394c:	d143      	bne.n	239d6 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2394e:	2300      	movs	r3, #0
   23950:	e9cd 8900 	strd	r8, r9, [sp]
   23954:	9302      	str	r3, [sp, #8]
   23956:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2395a:	4639      	mov	r1, r7
   2395c:	483b      	ldr	r0, [pc, #236]	; (23a4c <work_queue_main+0x134>)
   2395e:	f000 fcd3 	bl	24308 <z_sched_wait>
			continue;
   23962:	e7e2      	b.n	2392a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23964:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   23968:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2396a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2396e:	4295      	cmp	r5, r2
	list->tail = node;
   23970:	bf08      	it	eq
   23972:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   23976:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2397a:	f043 0302 	orr.w	r3, r3, #2
   2397e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   23982:	68eb      	ldr	r3, [r5, #12]
   23984:	f023 0304 	bic.w	r3, r3, #4
   23988:	f043 0301 	orr.w	r3, r3, #1
   2398c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   2398e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   23990:	f387 8811 	msr	BASEPRI, r7
   23994:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   23998:	4628      	mov	r0, r5
   2399a:	4798      	blx	r3
	__asm__ volatile(
   2399c:	f04f 0340 	mov.w	r3, #64	; 0x40
   239a0:	f3ef 8b11 	mrs	fp, BASEPRI
   239a4:	f383 8812 	msr	BASEPRI_MAX, r3
   239a8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   239ac:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   239ae:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   239b0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   239b4:	d419      	bmi.n	239ea <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   239b6:	60ea      	str	r2, [r5, #12]
   239b8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   239bc:	f023 0302 	bic.w	r3, r3, #2
   239c0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   239c4:	f38b 8811 	msr	BASEPRI, fp
   239c8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   239cc:	05db      	lsls	r3, r3, #23
   239ce:	d4ac      	bmi.n	2392a <work_queue_main+0x12>
	z_impl_k_yield();
   239d0:	f000 fb98 	bl	24104 <z_impl_k_yield>
}
   239d4:	e7a9      	b.n	2392a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   239d6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   239da:	2200      	movs	r2, #0
   239dc:	2101      	movs	r1, #1
   239de:	4628      	mov	r0, r5
   239e0:	f006 fb3d 	bl	2a05e <z_sched_wake>
   239e4:	2800      	cmp	r0, #0
   239e6:	d1f8      	bne.n	239da <work_queue_main+0xc2>
   239e8:	e7b1      	b.n	2394e <work_queue_main+0x36>
	return list->head;
   239ea:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   239ec:	f023 0303 	bic.w	r3, r3, #3
   239f0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   239f2:	2800      	cmp	r0, #0
   239f4:	d0e0      	beq.n	239b8 <work_queue_main+0xa0>
	return node->next;
   239f6:	2700      	movs	r7, #0
   239f8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   239fc:	463b      	mov	r3, r7
   239fe:	2800      	cmp	r0, #0
   23a00:	d0da      	beq.n	239b8 <work_queue_main+0xa0>
		if (wc->work == work) {
   23a02:	6842      	ldr	r2, [r0, #4]
   23a04:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   23a06:	4601      	mov	r1, r0
		if (wc->work == work) {
   23a08:	d10c      	bne.n	23a24 <work_queue_main+0x10c>
	return node->next;
   23a0a:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   23a0c:	b99f      	cbnz	r7, 23a36 <work_queue_main+0x11e>
   23a0e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   23a10:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   23a12:	4282      	cmp	r2, r0
   23a14:	d100      	bne.n	23a18 <work_queue_main+0x100>
	list->tail = node;
   23a16:	6071      	str	r1, [r6, #4]
	parent->next = child;
   23a18:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   23a1c:	f7ff fef2 	bl	23804 <z_impl_k_sem_give>
}
   23a20:	4639      	mov	r1, r7
   23a22:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   23a24:	f1ba 0f00 	cmp.w	sl, #0
   23a28:	d00b      	beq.n	23a42 <work_queue_main+0x12a>
	return node->next;
   23a2a:	f8da 2000 	ldr.w	r2, [sl]
   23a2e:	4650      	mov	r0, sl
   23a30:	460f      	mov	r7, r1
   23a32:	4692      	mov	sl, r2
   23a34:	e7e3      	b.n	239fe <work_queue_main+0xe6>
	parent->next = child;
   23a36:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   23a38:	6872      	ldr	r2, [r6, #4]
   23a3a:	4282      	cmp	r2, r0
	list->tail = node;
   23a3c:	bf08      	it	eq
   23a3e:	6077      	streq	r7, [r6, #4]
}
   23a40:	e7ea      	b.n	23a18 <work_queue_main+0x100>
   23a42:	4652      	mov	r2, sl
   23a44:	e7f3      	b.n	23a2e <work_queue_main+0x116>
   23a46:	bf00      	nop
   23a48:	2000337c 	.word	0x2000337c
   23a4c:	200039bf 	.word	0x200039bf

00023a50 <cancel_sync_locked>:
{
   23a50:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   23a52:	68c3      	ldr	r3, [r0, #12]
   23a54:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   23a58:	079b      	lsls	r3, r3, #30
{
   23a5a:	4605      	mov	r5, r0
   23a5c:	460c      	mov	r4, r1
	if (ret) {
   23a5e:	d50d      	bpl.n	23a7c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   23a60:	2201      	movs	r2, #1
   23a62:	2100      	movs	r1, #0
   23a64:	f104 0008 	add.w	r0, r4, #8
   23a68:	f006 f8e3 	bl	29c32 <z_impl_k_sem_init>
	parent->next = child;
   23a6c:	2300      	movs	r3, #0
   23a6e:	6023      	str	r3, [r4, #0]
	return list->tail;
   23a70:	4b05      	ldr	r3, [pc, #20]	; (23a88 <cancel_sync_locked+0x38>)
	canceler->work = work;
   23a72:	6065      	str	r5, [r4, #4]
   23a74:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   23a76:	b91a      	cbnz	r2, 23a80 <cancel_sync_locked+0x30>
	list->head = node;
   23a78:	e9c3 4400 	strd	r4, r4, [r3]
}
   23a7c:	4630      	mov	r0, r6
   23a7e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   23a80:	6014      	str	r4, [r2, #0]
	list->tail = node;
   23a82:	605c      	str	r4, [r3, #4]
}
   23a84:	e7fa      	b.n	23a7c <cancel_sync_locked+0x2c>
   23a86:	bf00      	nop
   23a88:	2000337c 	.word	0x2000337c

00023a8c <submit_to_queue_locked>:
{
   23a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   23a8e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23a90:	079a      	lsls	r2, r3, #30
{
   23a92:	4604      	mov	r4, r0
   23a94:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   23a96:	f3c3 0640 	ubfx	r6, r3, #1, #1
   23a9a:	d42c      	bmi.n	23af6 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   23a9c:	075b      	lsls	r3, r3, #29
   23a9e:	d41a      	bmi.n	23ad6 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   23aa0:	680b      	ldr	r3, [r1, #0]
   23aa2:	b90b      	cbnz	r3, 23aa8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   23aa4:	6883      	ldr	r3, [r0, #8]
   23aa6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   23aa8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   23aaa:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   23aac:	bf44      	itt	mi
   23aae:	68a3      	ldrmi	r3, [r4, #8]
   23ab0:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   23ab2:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   23ab4:	bf4c      	ite	mi
   23ab6:	2602      	movmi	r6, #2
		ret = 1;
   23ab8:	2601      	movpl	r6, #1
	if (queue == NULL) {
   23aba:	2d00      	cmp	r5, #0
   23abc:	d03a      	beq.n	23b34 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23abe:	4b1f      	ldr	r3, [pc, #124]	; (23b3c <submit_to_queue_locked+0xb0>)
   23ac0:	689b      	ldr	r3, [r3, #8]
   23ac2:	42ab      	cmp	r3, r5
   23ac4:	d00a      	beq.n	23adc <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   23ac6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23aca:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23acc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23ad0:	d414      	bmi.n	23afc <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   23ad2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   23ad6:	2300      	movs	r3, #0
   23ad8:	603b      	str	r3, [r7, #0]
	return ret;
   23ada:	e025      	b.n	23b28 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   23adc:	f005 ffef 	bl	29abe <k_is_in_isr>
   23ae0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   23ae4:	2800      	cmp	r0, #0
   23ae6:	d1f0      	bne.n	23aca <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23ae8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   23aea:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   23aee:	d5f0      	bpl.n	23ad2 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   23af0:	b152      	cbz	r2, 23b08 <submit_to_queue_locked+0x7c>
   23af2:	075b      	lsls	r3, r3, #29
   23af4:	d408      	bmi.n	23b08 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   23af6:	f06f 060f 	mvn.w	r6, #15
   23afa:	e7ec      	b.n	23ad6 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   23afc:	2a00      	cmp	r2, #0
   23afe:	d1fa      	bne.n	23af6 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   23b00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   23b04:	2b00      	cmp	r3, #0
   23b06:	d1f6      	bne.n	23af6 <submit_to_queue_locked+0x6a>
	parent->next = child;
   23b08:	2300      	movs	r3, #0
   23b0a:	6023      	str	r3, [r4, #0]
	return list->tail;
   23b0c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   23b10:	b963      	cbnz	r3, 23b2c <submit_to_queue_locked+0xa0>
	list->head = node;
   23b12:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   23b16:	4628      	mov	r0, r5
   23b18:	f006 f8b5 	bl	29c86 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   23b1c:	68e3      	ldr	r3, [r4, #12]
   23b1e:	f043 0304 	orr.w	r3, r3, #4
   23b22:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   23b24:	683b      	ldr	r3, [r7, #0]
   23b26:	60a3      	str	r3, [r4, #8]
}
   23b28:	4630      	mov	r0, r6
   23b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   23b2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23b2e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   23b32:	e7f0      	b.n	23b16 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   23b34:	f06f 0615 	mvn.w	r6, #21
   23b38:	e7cd      	b.n	23ad6 <submit_to_queue_locked+0x4a>
   23b3a:	bf00      	nop
   23b3c:	20003358 	.word	0x20003358

00023b40 <k_work_submit>:
{
   23b40:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   23b42:	4801      	ldr	r0, [pc, #4]	; (23b48 <k_work_submit+0x8>)
   23b44:	f006 b925 	b.w	29d92 <k_work_submit_to_queue>
   23b48:	20002d90 	.word	0x20002d90

00023b4c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   23b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23b4e:	b089      	sub	sp, #36	; 0x24
   23b50:	4604      	mov	r4, r0
	list->head = NULL;
   23b52:	2000      	movs	r0, #0
	list->tail = NULL;
   23b54:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   23b58:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23b5a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   23b5e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   23b62:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23b66:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   23b6a:	b31d      	cbz	r5, 23bb4 <k_work_queue_start+0x68>
   23b6c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   23b6e:	2800      	cmp	r0, #0
   23b70:	f240 1001 	movw	r0, #257	; 0x101
   23b74:	bf08      	it	eq
   23b76:	2001      	moveq	r0, #1
	*flagp = flags;
   23b78:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23b7c:	2000      	movs	r0, #0
   23b7e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   23b82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   23b86:	e9cd 3003 	strd	r3, r0, [sp, #12]
   23b8a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   23b8e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   23b92:	4b09      	ldr	r3, [pc, #36]	; (23bb8 <k_work_queue_start+0x6c>)
   23b94:	9400      	str	r4, [sp, #0]
   23b96:	4620      	mov	r0, r4
   23b98:	f7ff fca6 	bl	234e8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   23b9c:	b125      	cbz	r5, 23ba8 <k_work_queue_start+0x5c>
   23b9e:	6829      	ldr	r1, [r5, #0]
   23ba0:	b111      	cbz	r1, 23ba8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   23ba2:	4620      	mov	r0, r4
   23ba4:	f005 ff91 	bl	29aca <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   23ba8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   23baa:	b009      	add	sp, #36	; 0x24
   23bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23bb0:	f005 bf90 	b.w	29ad4 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   23bb4:	2001      	movs	r0, #1
   23bb6:	e7df      	b.n	23b78 <k_work_queue_start+0x2c>
   23bb8:	00023919 	.word	0x00023919

00023bbc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   23bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23bbe:	9001      	str	r0, [sp, #4]
   23bc0:	4608      	mov	r0, r1
	__asm__ volatile(
   23bc2:	f04f 0140 	mov.w	r1, #64	; 0x40
   23bc6:	f3ef 8411 	mrs	r4, BASEPRI
   23bca:	f381 8812 	msr	BASEPRI_MAX, r1
   23bce:	f3bf 8f6f 	isb	sy
	return *flagp;
   23bd2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   23bd4:	f011 0f0e 	tst.w	r1, #14
   23bd8:	d116      	bne.n	23c08 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23bda:	ea53 0502 	orrs.w	r5, r3, r2
   23bde:	d108      	bne.n	23bf2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   23be0:	a901      	add	r1, sp, #4
   23be2:	f7ff ff53 	bl	23a8c <submit_to_queue_locked>
	__asm__ volatile(
   23be6:	f384 8811 	msr	BASEPRI, r4
   23bea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23bee:	b003      	add	sp, #12
   23bf0:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   23bf2:	f041 0108 	orr.w	r1, r1, #8
   23bf6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   23bf8:	9901      	ldr	r1, [sp, #4]
   23bfa:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23bfc:	3010      	adds	r0, #16
   23bfe:	4903      	ldr	r1, [pc, #12]	; (23c0c <k_work_schedule_for_queue+0x50>)
   23c00:	f000 fbf4 	bl	243ec <z_add_timeout>
	return ret;
   23c04:	2001      	movs	r0, #1
   23c06:	e7ee      	b.n	23be6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   23c08:	2000      	movs	r0, #0
   23c0a:	e7ec      	b.n	23be6 <k_work_schedule_for_queue+0x2a>
   23c0c:	00029cfb 	.word	0x00029cfb

00023c10 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   23c10:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   23c12:	4801      	ldr	r0, [pc, #4]	; (23c18 <k_work_schedule+0x8>)
   23c14:	f7ff bfd2 	b.w	23bbc <k_work_schedule_for_queue>
   23c18:	20002d90 	.word	0x20002d90

00023c1c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   23c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23c1e:	460c      	mov	r4, r1
   23c20:	9001      	str	r0, [sp, #4]
   23c22:	4616      	mov	r6, r2
   23c24:	461d      	mov	r5, r3
	__asm__ volatile(
   23c26:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c2a:	f3ef 8711 	mrs	r7, BASEPRI
   23c2e:	f383 8812 	msr	BASEPRI_MAX, r3
   23c32:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   23c36:	4608      	mov	r0, r1
   23c38:	f006 f816 	bl	29c68 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c3c:	ea55 0306 	orrs.w	r3, r5, r6
   23c40:	d109      	bne.n	23c56 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   23c42:	a901      	add	r1, sp, #4
   23c44:	4620      	mov	r0, r4
   23c46:	f7ff ff21 	bl	23a8c <submit_to_queue_locked>
	__asm__ volatile(
   23c4a:	f387 8811 	msr	BASEPRI, r7
   23c4e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   23c52:	b003      	add	sp, #12
   23c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   23c56:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23c58:	4906      	ldr	r1, [pc, #24]	; (23c74 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   23c5a:	f043 0308 	orr.w	r3, r3, #8
   23c5e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   23c60:	9b01      	ldr	r3, [sp, #4]
   23c62:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   23c64:	f104 0010 	add.w	r0, r4, #16
   23c68:	4632      	mov	r2, r6
   23c6a:	462b      	mov	r3, r5
   23c6c:	f000 fbbe 	bl	243ec <z_add_timeout>
	return ret;
   23c70:	2001      	movs	r0, #1
   23c72:	e7ea      	b.n	23c4a <k_work_reschedule_for_queue+0x2e>
   23c74:	00029cfb 	.word	0x00029cfb

00023c78 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   23c78:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   23c7a:	4801      	ldr	r0, [pc, #4]	; (23c80 <k_work_reschedule+0x8>)
   23c7c:	f7ff bfce 	b.w	23c1c <k_work_reschedule_for_queue>
   23c80:	20002d90 	.word	0x20002d90

00023c84 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   23c84:	89c3      	ldrh	r3, [r0, #14]
   23c86:	2b7f      	cmp	r3, #127	; 0x7f
   23c88:	d812      	bhi.n	23cb0 <sliceable+0x2c>
	int ret = slice_ticks;
   23c8a:	4b0a      	ldr	r3, [pc, #40]	; (23cb4 <sliceable+0x30>)
   23c8c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   23c8e:	b163      	cbz	r3, 23caa <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   23c90:	4b09      	ldr	r3, [pc, #36]	; (23cb8 <sliceable+0x34>)
   23c92:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23c96:	681b      	ldr	r3, [r3, #0]
   23c98:	429a      	cmp	r2, r3
   23c9a:	db09      	blt.n	23cb0 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   23c9c:	7b43      	ldrb	r3, [r0, #13]
   23c9e:	06db      	lsls	r3, r3, #27
   23ca0:	d106      	bne.n	23cb0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   23ca2:	4b06      	ldr	r3, [pc, #24]	; (23cbc <sliceable+0x38>)
   23ca4:	1ac3      	subs	r3, r0, r3
   23ca6:	bf18      	it	ne
   23ca8:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   23caa:	f003 0001 	and.w	r0, r3, #1
   23cae:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   23cb0:	2300      	movs	r3, #0
   23cb2:	e7fa      	b.n	23caa <sliceable+0x26>
   23cb4:	2000338c 	.word	0x2000338c
   23cb8:	20003388 	.word	0x20003388
   23cbc:	20002c90 	.word	0x20002c90

00023cc0 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   23cc0:	4b04      	ldr	r3, [pc, #16]	; (23cd4 <slice_timeout+0x14>)
   23cc2:	1ac0      	subs	r0, r0, r3
   23cc4:	4b04      	ldr	r3, [pc, #16]	; (23cd8 <slice_timeout+0x18>)
   23cc6:	10c0      	asrs	r0, r0, #3
   23cc8:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   23cca:	4b04      	ldr	r3, [pc, #16]	; (23cdc <slice_timeout+0x1c>)
   23ccc:	2201      	movs	r2, #1
   23cce:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   23cd0:	4770      	bx	lr
   23cd2:	bf00      	nop
   23cd4:	20002e30 	.word	0x20002e30
   23cd8:	aaaaaaab 	.word	0xaaaaaaab
   23cdc:	200039bf 	.word	0x200039bf

00023ce0 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   23ce0:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   23ce2:	4b0e      	ldr	r3, [pc, #56]	; (23d1c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   23ce4:	4c0e      	ldr	r4, [pc, #56]	; (23d20 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   23ce6:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   23ce8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   23cec:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   23cf0:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   23cf2:	4620      	mov	r0, r4
   23cf4:	f006 f9d6 	bl	2a0a4 <z_abort_timeout>
	slice_expired[cpu] = false;
   23cf8:	4b0a      	ldr	r3, [pc, #40]	; (23d24 <z_reset_time_slice+0x44>)
   23cfa:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   23cfc:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   23cfe:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   23d00:	f7ff ffc0 	bl	23c84 <sliceable>
   23d04:	b148      	cbz	r0, 23d1a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   23d06:	4b08      	ldr	r3, [pc, #32]	; (23d28 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   23d08:	4908      	ldr	r1, [pc, #32]	; (23d2c <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   23d0a:	681a      	ldr	r2, [r3, #0]
   23d0c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   23d0e:	4620      	mov	r0, r4
   23d10:	17d3      	asrs	r3, r2, #31
	}
}
   23d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   23d16:	f000 bb69 	b.w	243ec <z_add_timeout>
}
   23d1a:	bd70      	pop	{r4, r5, r6, pc}
   23d1c:	20003358 	.word	0x20003358
   23d20:	20002e30 	.word	0x20002e30
   23d24:	200039bf 	.word	0x200039bf
   23d28:	2000338c 	.word	0x2000338c
   23d2c:	00023cc1 	.word	0x00023cc1

00023d30 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   23d30:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23d32:	4d0d      	ldr	r5, [pc, #52]	; (23d68 <update_cache+0x38>)
   23d34:	462b      	mov	r3, r5
   23d36:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d3a:	429c      	cmp	r4, r3
   23d3c:	d000      	beq.n	23d40 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   23d3e:	b904      	cbnz	r4, 23d42 <update_cache+0x12>
   23d40:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   23d42:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   23d44:	b938      	cbnz	r0, 23d56 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   23d46:	7b5a      	ldrb	r2, [r3, #13]
   23d48:	06d2      	lsls	r2, r2, #27
   23d4a:	d104      	bne.n	23d56 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   23d4c:	69a2      	ldr	r2, [r4, #24]
   23d4e:	b912      	cbnz	r2, 23d56 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   23d50:	89da      	ldrh	r2, [r3, #14]
   23d52:	2a7f      	cmp	r2, #127	; 0x7f
   23d54:	d805      	bhi.n	23d62 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   23d56:	429c      	cmp	r4, r3
   23d58:	d002      	beq.n	23d60 <update_cache+0x30>
			z_reset_time_slice(thread);
   23d5a:	4620      	mov	r0, r4
   23d5c:	f7ff ffc0 	bl	23ce0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   23d60:	4623      	mov	r3, r4
   23d62:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   23d64:	bd38      	pop	{r3, r4, r5, pc}
   23d66:	bf00      	nop
   23d68:	20003358 	.word	0x20003358

00023d6c <move_thread_to_end_of_prio_q>:
{
   23d6c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   23d6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23d72:	7b43      	ldrb	r3, [r0, #13]
   23d74:	2a00      	cmp	r2, #0
{
   23d76:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23d78:	da04      	bge.n	23d84 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23d7e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   23d80:	f006 f871 	bl	29e66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23d84:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   23d86:	4a15      	ldr	r2, [pc, #84]	; (23ddc <move_thread_to_end_of_prio_q+0x70>)
   23d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23d8c:	4610      	mov	r0, r2
   23d8e:	734b      	strb	r3, [r1, #13]
   23d90:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   23d94:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23d96:	4283      	cmp	r3, r0
   23d98:	bf08      	it	eq
   23d9a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23d9c:	b923      	cbnz	r3, 23da8 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   23d9e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   23da2:	6021      	str	r1, [r4, #0]
	list->tail = node;
   23da4:	6211      	str	r1, [r2, #32]
}
   23da6:	e00c      	b.n	23dc2 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   23da8:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   23dac:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   23db0:	42b5      	cmp	r5, r6
   23db2:	d00e      	beq.n	23dd2 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23db4:	42ae      	cmp	r6, r5
   23db6:	dd0c      	ble.n	23dd2 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   23db8:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   23dba:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   23dbe:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   23dc0:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   23dc2:	6890      	ldr	r0, [r2, #8]
   23dc4:	1a43      	subs	r3, r0, r1
   23dc6:	4258      	negs	r0, r3
}
   23dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   23dcc:	4158      	adcs	r0, r3
   23dce:	f7ff bfaf 	b.w	23d30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23dd2:	429c      	cmp	r4, r3
   23dd4:	d0e3      	beq.n	23d9e <move_thread_to_end_of_prio_q+0x32>
   23dd6:	681b      	ldr	r3, [r3, #0]
   23dd8:	e7e0      	b.n	23d9c <move_thread_to_end_of_prio_q+0x30>
   23dda:	bf00      	nop
   23ddc:	20003358 	.word	0x20003358

00023de0 <ready_thread>:
{
   23de0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23de2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   23de6:	7b42      	ldrb	r2, [r0, #13]
   23de8:	2b00      	cmp	r3, #0
   23dea:	db29      	blt.n	23e40 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23dec:	06d3      	lsls	r3, r2, #27
   23dee:	d127      	bne.n	23e40 <ready_thread+0x60>
	return node->next != NULL;
   23df0:	6983      	ldr	r3, [r0, #24]
   23df2:	bb2b      	cbnz	r3, 23e40 <ready_thread+0x60>
	return list->head == list;
   23df4:	4913      	ldr	r1, [pc, #76]	; (23e44 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   23df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23dfa:	7342      	strb	r2, [r0, #13]
   23dfc:	460a      	mov	r2, r1
   23dfe:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e02:	4294      	cmp	r4, r2
   23e04:	bf18      	it	ne
   23e06:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   23e08:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23e0a:	b923      	cbnz	r3, 23e16 <ready_thread+0x36>
	node->prev = tail;
   23e0c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   23e10:	6020      	str	r0, [r4, #0]
	list->tail = node;
   23e12:	6208      	str	r0, [r1, #32]
}
   23e14:	e00c      	b.n	23e30 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   23e16:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   23e1a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   23e1e:	42b5      	cmp	r5, r6
   23e20:	d00a      	beq.n	23e38 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23e22:	42ae      	cmp	r6, r5
   23e24:	dd08      	ble.n	23e38 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   23e26:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23e28:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   23e2c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   23e2e:	6058      	str	r0, [r3, #4]
}
   23e30:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   23e32:	2000      	movs	r0, #0
   23e34:	f7ff bf7c 	b.w	23d30 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23e38:	42a3      	cmp	r3, r4
   23e3a:	d0e7      	beq.n	23e0c <ready_thread+0x2c>
   23e3c:	681b      	ldr	r3, [r3, #0]
   23e3e:	e7e4      	b.n	23e0a <ready_thread+0x2a>
}
   23e40:	bc70      	pop	{r4, r5, r6}
   23e42:	4770      	bx	lr
   23e44:	20003358 	.word	0x20003358

00023e48 <unready_thread>:
{
   23e48:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   23e4a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   23e4e:	7b43      	ldrb	r3, [r0, #13]
   23e50:	2a00      	cmp	r2, #0
{
   23e52:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   23e54:	da04      	bge.n	23e60 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23e5a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23e5c:	f006 f803 	bl	29e66 <sys_dlist_remove>
	update_cache(thread == _current);
   23e60:	4b04      	ldr	r3, [pc, #16]	; (23e74 <unready_thread+0x2c>)
   23e62:	6898      	ldr	r0, [r3, #8]
   23e64:	1a43      	subs	r3, r0, r1
   23e66:	4258      	negs	r0, r3
   23e68:	4158      	adcs	r0, r3
}
   23e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   23e6e:	f7ff bf5f 	b.w	23d30 <update_cache>
   23e72:	bf00      	nop
   23e74:	20003358 	.word	0x20003358

00023e78 <pend_locked>:
{
   23e78:	b570      	push	{r4, r5, r6, lr}
   23e7a:	4615      	mov	r5, r2
   23e7c:	461c      	mov	r4, r3
   23e7e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   23e80:	f006 f80c 	bl	29e9c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23e84:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   23e88:	bf08      	it	eq
   23e8a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   23e8e:	d008      	beq.n	23ea2 <pend_locked+0x2a>
   23e90:	462a      	mov	r2, r5
   23e92:	4623      	mov	r3, r4
   23e94:	f106 0018 	add.w	r0, r6, #24
   23e98:	4902      	ldr	r1, [pc, #8]	; (23ea4 <pend_locked+0x2c>)
}
   23e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23e9e:	f000 baa5 	b.w	243ec <z_add_timeout>
   23ea2:	bd70      	pop	{r4, r5, r6, pc}
   23ea4:	00029f75 	.word	0x00029f75

00023ea8 <z_time_slice>:
{
   23ea8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   23eaa:	f04f 0340 	mov.w	r3, #64	; 0x40
   23eae:	f3ef 8511 	mrs	r5, BASEPRI
   23eb2:	f383 8812 	msr	BASEPRI_MAX, r3
   23eb6:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
   23eba:	4b10      	ldr	r3, [pc, #64]	; (23efc <z_time_slice+0x54>)
	if (pending_current == curr) {
   23ebc:	4a10      	ldr	r2, [pc, #64]	; (23f00 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
   23ebe:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   23ec0:	6810      	ldr	r0, [r2, #0]
   23ec2:	42a0      	cmp	r0, r4
   23ec4:	d106      	bne.n	23ed4 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
   23ec6:	f7ff ff0b 	bl	23ce0 <z_reset_time_slice>
	__asm__ volatile(
   23eca:	f385 8811 	msr	BASEPRI, r5
   23ece:	f3bf 8f6f 	isb	sy
}
   23ed2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   23ed4:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   23ed6:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   23ed8:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   23eda:	4a0a      	ldr	r2, [pc, #40]	; (23f04 <z_time_slice+0x5c>)
   23edc:	5cd3      	ldrb	r3, [r2, r3]
   23ede:	2b00      	cmp	r3, #0
   23ee0:	d0f3      	beq.n	23eca <z_time_slice+0x22>
   23ee2:	4620      	mov	r0, r4
   23ee4:	f7ff fece 	bl	23c84 <sliceable>
   23ee8:	2800      	cmp	r0, #0
   23eea:	d0ee      	beq.n	23eca <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
   23eec:	7b63      	ldrb	r3, [r4, #13]
   23eee:	06db      	lsls	r3, r3, #27
   23ef0:	d102      	bne.n	23ef8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
   23ef2:	4620      	mov	r0, r4
   23ef4:	f7ff ff3a 	bl	23d6c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   23ef8:	4620      	mov	r0, r4
   23efa:	e7e4      	b.n	23ec6 <z_time_slice+0x1e>
   23efc:	20003358 	.word	0x20003358
   23f00:	20003384 	.word	0x20003384
   23f04:	200039bf 	.word	0x200039bf

00023f08 <z_pend_curr>:
{
   23f08:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   23f0a:	480c      	ldr	r0, [pc, #48]	; (23f3c <z_pend_curr+0x34>)
   23f0c:	4d0c      	ldr	r5, [pc, #48]	; (23f40 <z_pend_curr+0x38>)
   23f0e:	6886      	ldr	r6, [r0, #8]
   23f10:	602e      	str	r6, [r5, #0]
{
   23f12:	460c      	mov	r4, r1
   23f14:	4611      	mov	r1, r2
   23f16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   23f1a:	f04f 0640 	mov.w	r6, #64	; 0x40
   23f1e:	f3ef 8511 	mrs	r5, BASEPRI
   23f22:	f386 8812 	msr	BASEPRI_MAX, r6
   23f26:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   23f2a:	6880      	ldr	r0, [r0, #8]
   23f2c:	f7ff ffa4 	bl	23e78 <pend_locked>
	ret = arch_swap(key);
   23f30:	4620      	mov	r0, r4
}
   23f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23f36:	f7f0 be73 	b.w	14c20 <arch_swap>
   23f3a:	bf00      	nop
   23f3c:	20003358 	.word	0x20003358
   23f40:	20003384 	.word	0x20003384

00023f44 <z_set_prio>:
{
   23f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f46:	4604      	mov	r4, r0
   23f48:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f4c:	f3ef 8611 	mrs	r6, BASEPRI
   23f50:	f383 8812 	msr	BASEPRI_MAX, r3
   23f54:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   23f58:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   23f5a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   23f5c:	b249      	sxtb	r1, r1
   23f5e:	d119      	bne.n	23f94 <z_set_prio+0x50>
	return node->next != NULL;
   23f60:	6985      	ldr	r5, [r0, #24]
   23f62:	b9bd      	cbnz	r5, 23f94 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   23f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23f68:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   23f6a:	f005 ff7c 	bl	29e66 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   23f6e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   23f70:	4a16      	ldr	r2, [pc, #88]	; (23fcc <z_set_prio+0x88>)
				thread->base.prio = prio;
   23f72:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   23f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23f78:	7343      	strb	r3, [r0, #13]
   23f7a:	4613      	mov	r3, r2
   23f7c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f80:	4298      	cmp	r0, r3
   23f82:	bf18      	it	ne
   23f84:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   23f86:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23f88:	b95d      	cbnz	r5, 23fa2 <z_set_prio+0x5e>
	node->prev = tail;
   23f8a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   23f8e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   23f90:	6214      	str	r4, [r2, #32]
}
   23f92:	e011      	b.n	23fb8 <z_set_prio+0x74>
			thread->base.prio = prio;
   23f94:	73a1      	strb	r1, [r4, #14]
   23f96:	2000      	movs	r0, #0
	__asm__ volatile(
   23f98:	f386 8811 	msr	BASEPRI, r6
   23f9c:	f3bf 8f6f 	isb	sy
}
   23fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   23fa2:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   23fa6:	42b9      	cmp	r1, r7
   23fa8:	d00b      	beq.n	23fc2 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   23faa:	428f      	cmp	r7, r1
   23fac:	dd09      	ble.n	23fc2 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   23fae:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   23fb0:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   23fb4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   23fb6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   23fb8:	2001      	movs	r0, #1
   23fba:	f7ff feb9 	bl	23d30 <update_cache>
   23fbe:	2001      	movs	r0, #1
   23fc0:	e7ea      	b.n	23f98 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   23fc2:	42a8      	cmp	r0, r5
   23fc4:	d0e1      	beq.n	23f8a <z_set_prio+0x46>
   23fc6:	682d      	ldr	r5, [r5, #0]
   23fc8:	e7de      	b.n	23f88 <z_set_prio+0x44>
   23fca:	bf00      	nop
   23fcc:	20003358 	.word	0x20003358

00023fd0 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23fd0:	b949      	cbnz	r1, 23fe6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23fd2:	f3ef 8005 	mrs	r0, IPSR
   23fd6:	b930      	cbnz	r0, 23fe6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   23fd8:	4b05      	ldr	r3, [pc, #20]	; (23ff0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   23fda:	699a      	ldr	r2, [r3, #24]
   23fdc:	689b      	ldr	r3, [r3, #8]
   23fde:	429a      	cmp	r2, r3
   23fe0:	d001      	beq.n	23fe6 <z_reschedule+0x16>
   23fe2:	f7f0 be1d 	b.w	14c20 <arch_swap>
   23fe6:	f381 8811 	msr	BASEPRI, r1
   23fea:	f3bf 8f6f 	isb	sy
}
   23fee:	4770      	bx	lr
   23ff0:	20003358 	.word	0x20003358

00023ff4 <z_sched_start>:
{
   23ff4:	b510      	push	{r4, lr}
	__asm__ volatile(
   23ff6:	f04f 0240 	mov.w	r2, #64	; 0x40
   23ffa:	f3ef 8411 	mrs	r4, BASEPRI
   23ffe:	f382 8812 	msr	BASEPRI_MAX, r2
   24002:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   24006:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   24008:	0751      	lsls	r1, r2, #29
   2400a:	d404      	bmi.n	24016 <z_sched_start+0x22>
	__asm__ volatile(
   2400c:	f384 8811 	msr	BASEPRI, r4
   24010:	f3bf 8f6f 	isb	sy
}
   24014:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24016:	f022 0204 	bic.w	r2, r2, #4
   2401a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2401c:	f7ff fee0 	bl	23de0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   24020:	4621      	mov	r1, r4
   24022:	4802      	ldr	r0, [pc, #8]	; (2402c <z_sched_start+0x38>)
}
   24024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   24028:	f7ff bfd2 	b.w	23fd0 <z_reschedule>
   2402c:	200039c0 	.word	0x200039c0

00024030 <z_impl_k_thread_suspend>:
{
   24030:	b570      	push	{r4, r5, r6, lr}
   24032:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   24034:	3018      	adds	r0, #24
   24036:	f006 f835 	bl	2a0a4 <z_abort_timeout>
	__asm__ volatile(
   2403a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2403e:	f3ef 8611 	mrs	r6, BASEPRI
   24042:	f383 8812 	msr	BASEPRI_MAX, r3
   24046:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2404a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2404e:	7b63      	ldrb	r3, [r4, #13]
   24050:	2a00      	cmp	r2, #0
   24052:	da05      	bge.n	24060 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   24054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24058:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2405a:	4620      	mov	r0, r4
   2405c:	f005 ff03 	bl	29e66 <sys_dlist_remove>
		update_cache(thread == _current);
   24060:	4d0b      	ldr	r5, [pc, #44]	; (24090 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   24062:	7b63      	ldrb	r3, [r4, #13]
   24064:	68a8      	ldr	r0, [r5, #8]
   24066:	f043 0310 	orr.w	r3, r3, #16
   2406a:	7363      	strb	r3, [r4, #13]
   2406c:	1b03      	subs	r3, r0, r4
   2406e:	4258      	negs	r0, r3
   24070:	4158      	adcs	r0, r3
   24072:	f7ff fe5d 	bl	23d30 <update_cache>
	__asm__ volatile(
   24076:	f386 8811 	msr	BASEPRI, r6
   2407a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2407e:	68ab      	ldr	r3, [r5, #8]
   24080:	42a3      	cmp	r3, r4
   24082:	d103      	bne.n	2408c <z_impl_k_thread_suspend+0x5c>
}
   24084:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   24088:	f005 bfcf 	b.w	2a02a <z_reschedule_unlocked>
}
   2408c:	bd70      	pop	{r4, r5, r6, pc}
   2408e:	bf00      	nop
   24090:	20003358 	.word	0x20003358

00024094 <k_sched_lock>:
	__asm__ volatile(
   24094:	f04f 0340 	mov.w	r3, #64	; 0x40
   24098:	f3ef 8111 	mrs	r1, BASEPRI
   2409c:	f383 8812 	msr	BASEPRI_MAX, r3
   240a0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   240a4:	4b04      	ldr	r3, [pc, #16]	; (240b8 <k_sched_lock+0x24>)
   240a6:	689a      	ldr	r2, [r3, #8]
   240a8:	7bd3      	ldrb	r3, [r2, #15]
   240aa:	3b01      	subs	r3, #1
   240ac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   240ae:	f381 8811 	msr	BASEPRI, r1
   240b2:	f3bf 8f6f 	isb	sy
}
   240b6:	4770      	bx	lr
   240b8:	20003358 	.word	0x20003358

000240bc <k_sched_unlock>:
{
   240bc:	b510      	push	{r4, lr}
	__asm__ volatile(
   240be:	f04f 0340 	mov.w	r3, #64	; 0x40
   240c2:	f3ef 8411 	mrs	r4, BASEPRI
   240c6:	f383 8812 	msr	BASEPRI_MAX, r3
   240ca:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   240ce:	4b08      	ldr	r3, [pc, #32]	; (240f0 <k_sched_unlock+0x34>)
   240d0:	689a      	ldr	r2, [r3, #8]
   240d2:	7bd3      	ldrb	r3, [r2, #15]
   240d4:	3301      	adds	r3, #1
   240d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   240d8:	2000      	movs	r0, #0
   240da:	f7ff fe29 	bl	23d30 <update_cache>
	__asm__ volatile(
   240de:	f384 8811 	msr	BASEPRI, r4
   240e2:	f3bf 8f6f 	isb	sy
}
   240e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   240ea:	f005 bf9e 	b.w	2a02a <z_reschedule_unlocked>
   240ee:	bf00      	nop
   240f0:	20003358 	.word	0x20003358

000240f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   240f4:	4b02      	ldr	r3, [pc, #8]	; (24100 <z_sched_init+0xc>)
   240f6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   240fa:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   240fe:	4770      	bx	lr
   24100:	20003358 	.word	0x20003358

00024104 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   24104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   24106:	f04f 0340 	mov.w	r3, #64	; 0x40
   2410a:	f3ef 8511 	mrs	r5, BASEPRI
   2410e:	f383 8812 	msr	BASEPRI_MAX, r3
   24112:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   24116:	4919      	ldr	r1, [pc, #100]	; (2417c <z_impl_k_yield+0x78>)
   24118:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2411a:	7b43      	ldrb	r3, [r0, #13]
   2411c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   24120:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   24122:	f005 fea0 	bl	29e66 <sys_dlist_remove>
	}
	queue_thread(_current);
   24126:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   24128:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2412a:	4608      	mov	r0, r1
   2412c:	f062 027f 	orn	r2, r2, #127	; 0x7f
   24130:	735a      	strb	r2, [r3, #13]
   24132:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
   24136:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24138:	4282      	cmp	r2, r0
   2413a:	bf08      	it	eq
   2413c:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2413e:	b922      	cbnz	r2, 2414a <z_impl_k_yield+0x46>
	node->prev = tail;
   24140:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   24144:	6023      	str	r3, [r4, #0]
	list->tail = node;
   24146:	620b      	str	r3, [r1, #32]
}
   24148:	e00c      	b.n	24164 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2414a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2414e:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   24152:	42be      	cmp	r6, r7
   24154:	d00e      	beq.n	24174 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24156:	42b7      	cmp	r7, r6
   24158:	dd0c      	ble.n	24174 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2415a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2415c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   24160:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   24162:	6053      	str	r3, [r2, #4]
	update_cache(1);
   24164:	2001      	movs	r0, #1
   24166:	f7ff fde3 	bl	23d30 <update_cache>
   2416a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2416c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24170:	f7f0 bd56 	b.w	14c20 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   24174:	42a2      	cmp	r2, r4
   24176:	d0e3      	beq.n	24140 <z_impl_k_yield+0x3c>
   24178:	6812      	ldr	r2, [r2, #0]
   2417a:	e7e0      	b.n	2413e <z_impl_k_yield+0x3a>
   2417c:	20003358 	.word	0x20003358

00024180 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   24180:	ea50 0301 	orrs.w	r3, r0, r1
{
   24184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24188:	4605      	mov	r5, r0
   2418a:	460e      	mov	r6, r1
	if (ticks == 0) {
   2418c:	d103      	bne.n	24196 <z_tick_sleep+0x16>
	z_impl_k_yield();
   2418e:	f7ff ffb9 	bl	24104 <z_impl_k_yield>
		k_yield();
		return 0;
   24192:	2000      	movs	r0, #0
   24194:	e02c      	b.n	241f0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   24196:	1c83      	adds	r3, r0, #2
   24198:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
   2419c:	db2a      	blt.n	241f4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2419e:	f005 ffa7 	bl	2a0f0 <sys_clock_tick_get_32>
   241a2:	182c      	adds	r4, r5, r0
   241a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   241a8:	f3ef 8811 	mrs	r8, BASEPRI
   241ac:	f383 8812 	msr	BASEPRI_MAX, r3
   241b0:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   241b4:	4f11      	ldr	r7, [pc, #68]	; (241fc <z_tick_sleep+0x7c>)
   241b6:	4b12      	ldr	r3, [pc, #72]	; (24200 <z_tick_sleep+0x80>)
   241b8:	68b8      	ldr	r0, [r7, #8]
   241ba:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   241bc:	f7ff fe44 	bl	23e48 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   241c0:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   241c2:	4910      	ldr	r1, [pc, #64]	; (24204 <z_tick_sleep+0x84>)
   241c4:	462a      	mov	r2, r5
   241c6:	4633      	mov	r3, r6
   241c8:	3018      	adds	r0, #24
   241ca:	f000 f90f 	bl	243ec <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   241ce:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   241d0:	7b53      	ldrb	r3, [r2, #13]
   241d2:	f043 0310 	orr.w	r3, r3, #16
   241d6:	7353      	strb	r3, [r2, #13]
   241d8:	4640      	mov	r0, r8
   241da:	f7f0 fd21 	bl	14c20 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   241de:	f005 ff87 	bl	2a0f0 <sys_clock_tick_get_32>
   241e2:	1a20      	subs	r0, r4, r0
   241e4:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   241e8:	2801      	cmp	r0, #1
   241ea:	f173 0300 	sbcs.w	r3, r3, #0
   241ee:	dbd0      	blt.n	24192 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   241f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   241f4:	f06f 0401 	mvn.w	r4, #1
   241f8:	1a24      	subs	r4, r4, r0
   241fa:	e7d3      	b.n	241a4 <z_tick_sleep+0x24>
   241fc:	20003358 	.word	0x20003358
   24200:	20003384 	.word	0x20003384
   24204:	00029f75 	.word	0x00029f75

00024208 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24208:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2420c:	bf08      	it	eq
   2420e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   24212:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24214:	d106      	bne.n	24224 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   24216:	4b08      	ldr	r3, [pc, #32]	; (24238 <z_impl_k_sleep+0x30>)
   24218:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2421a:	f7ff ff09 	bl	24030 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2421e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   24222:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   24224:	f7ff ffac 	bl	24180 <z_tick_sleep>
   24228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2422c:	fb80 0303 	smull	r0, r3, r0, r3
   24230:	0bc0      	lsrs	r0, r0, #15
   24232:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   24236:	e7f4      	b.n	24222 <z_impl_k_sleep+0x1a>
   24238:	20003358 	.word	0x20003358

0002423c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2423c:	4b01      	ldr	r3, [pc, #4]	; (24244 <z_impl_z_current_get+0x8>)
   2423e:	6898      	ldr	r0, [r3, #8]
   24240:	4770      	bx	lr
   24242:	bf00      	nop
   24244:	20003358 	.word	0x20003358

00024248 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   24248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2424c:	4604      	mov	r4, r0
   2424e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24252:	f3ef 8611 	mrs	r6, BASEPRI
   24256:	f383 8812 	msr	BASEPRI_MAX, r3
   2425a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2425e:	7b03      	ldrb	r3, [r0, #12]
   24260:	07d9      	lsls	r1, r3, #31
   24262:	d50b      	bpl.n	2427c <z_thread_abort+0x34>
	__asm__ volatile(
   24264:	f386 8811 	msr	BASEPRI, r6
   24268:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2426c:	4040      	eors	r0, r0
   2426e:	f380 8811 	msr	BASEPRI, r0
   24272:	f04f 0004 	mov.w	r0, #4
   24276:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   24278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2427c:	7b43      	ldrb	r3, [r0, #13]
   2427e:	071a      	lsls	r2, r3, #28
   24280:	d504      	bpl.n	2428c <z_thread_abort+0x44>
   24282:	f386 8811 	msr	BASEPRI, r6
   24286:	f3bf 8f6f 	isb	sy
   2428a:	e7f5      	b.n	24278 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2428c:	f023 0220 	bic.w	r2, r3, #32
   24290:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   24294:	09d2      	lsrs	r2, r2, #7
   24296:	d120      	bne.n	242da <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   24298:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2429a:	68a3      	ldr	r3, [r4, #8]
   2429c:	b113      	cbz	r3, 242a4 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2429e:	4620      	mov	r0, r4
   242a0:	f005 fde9 	bl	29e76 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   242a4:	f104 0018 	add.w	r0, r4, #24
   242a8:	f005 fefc 	bl	2a0a4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   242ac:	f104 0758 	add.w	r7, r4, #88	; 0x58
   242b0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   242b4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   242b6:	42bd      	cmp	r5, r7
   242b8:	d000      	beq.n	242bc <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   242ba:	b9b5      	cbnz	r5, 242ea <z_thread_abort+0xa2>
		update_cache(1);
   242bc:	2001      	movs	r0, #1
   242be:	f7ff fd37 	bl	23d30 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   242c2:	4b10      	ldr	r3, [pc, #64]	; (24304 <z_thread_abort+0xbc>)
   242c4:	689b      	ldr	r3, [r3, #8]
   242c6:	42a3      	cmp	r3, r4
   242c8:	d1db      	bne.n	24282 <z_thread_abort+0x3a>
   242ca:	f3ef 8305 	mrs	r3, IPSR
   242ce:	2b00      	cmp	r3, #0
   242d0:	d1d7      	bne.n	24282 <z_thread_abort+0x3a>
   242d2:	4630      	mov	r0, r6
   242d4:	f7f0 fca4 	bl	14c20 <arch_swap>
	return ret;
   242d8:	e7d3      	b.n	24282 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   242da:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   242de:	f043 0308 	orr.w	r3, r3, #8
   242e2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   242e4:	f005 fdbf 	bl	29e66 <sys_dlist_remove>
}
   242e8:	e7d7      	b.n	2429a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   242ea:	4628      	mov	r0, r5
   242ec:	f005 fdc3 	bl	29e76 <unpend_thread_no_timeout>
   242f0:	f105 0018 	add.w	r0, r5, #24
   242f4:	f005 fed6 	bl	2a0a4 <z_abort_timeout>
   242f8:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   242fc:	4628      	mov	r0, r5
   242fe:	f7ff fd6f 	bl	23de0 <ready_thread>
   24302:	e7d7      	b.n	242b4 <z_thread_abort+0x6c>
   24304:	20003358 	.word	0x20003358

00024308 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   24308:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2430a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2430e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   24310:	e9cd 6700 	strd	r6, r7, [sp]
   24314:	f7ff fdf8 	bl	23f08 <z_pend_curr>

	if (data != NULL) {
   24318:	b11c      	cbz	r4, 24322 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2431a:	4b03      	ldr	r3, [pc, #12]	; (24328 <z_sched_wait+0x20>)
   2431c:	689b      	ldr	r3, [r3, #8]
   2431e:	695b      	ldr	r3, [r3, #20]
   24320:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   24322:	b002      	add	sp, #8
   24324:	bdd0      	pop	{r4, r6, r7, pc}
   24326:	bf00      	nop
   24328:	20003358 	.word	0x20003358

0002432c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2432c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2432e:	4806      	ldr	r0, [pc, #24]	; (24348 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   24330:	4a06      	ldr	r2, [pc, #24]	; (2434c <z_data_copy+0x20>)
   24332:	4907      	ldr	r1, [pc, #28]	; (24350 <z_data_copy+0x24>)
   24334:	1a12      	subs	r2, r2, r0
   24336:	f005 fb0f 	bl	29958 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2433a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2433e:	4a05      	ldr	r2, [pc, #20]	; (24354 <z_data_copy+0x28>)
   24340:	4905      	ldr	r1, [pc, #20]	; (24358 <z_data_copy+0x2c>)
   24342:	4806      	ldr	r0, [pc, #24]	; (2435c <z_data_copy+0x30>)
   24344:	f005 bb08 	b.w	29958 <z_early_memcpy>
   24348:	20000000 	.word	0x20000000
   2434c:	20000d48 	.word	0x20000d48
   24350:	0002f478 	.word	0x0002f478
   24354:	00000000 	.word	0x00000000
   24358:	0002f478 	.word	0x0002f478
   2435c:	20000000 	.word	0x20000000

00024360 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   24360:	4b03      	ldr	r3, [pc, #12]	; (24370 <elapsed+0x10>)
   24362:	681b      	ldr	r3, [r3, #0]
   24364:	b90b      	cbnz	r3, 2436a <elapsed+0xa>
   24366:	f7fc bf41 	b.w	211ec <sys_clock_elapsed>
}
   2436a:	2000      	movs	r0, #0
   2436c:	4770      	bx	lr
   2436e:	bf00      	nop
   24370:	20003390 	.word	0x20003390

00024374 <next_timeout>:

static int32_t next_timeout(void)
{
   24374:	b510      	push	{r4, lr}
	return list->head == list;
   24376:	4b0e      	ldr	r3, [pc, #56]	; (243b0 <next_timeout+0x3c>)
   24378:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2437a:	429c      	cmp	r4, r3
   2437c:	d104      	bne.n	24388 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2437e:	f7ff ffef 	bl	24360 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   24382:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   24386:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   24388:	f7ff ffea 	bl	24360 <elapsed>
	if ((to == NULL) ||
   2438c:	2c00      	cmp	r4, #0
   2438e:	d0f8      	beq.n	24382 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   24390:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   24394:	1a1b      	subs	r3, r3, r0
   24396:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2439a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2439e:	f172 0100 	sbcs.w	r1, r2, #0
   243a2:	daee      	bge.n	24382 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   243a4:	2a00      	cmp	r2, #0
   243a6:	bfac      	ite	ge
   243a8:	4618      	movge	r0, r3
   243aa:	2000      	movlt	r0, #0
	return ret;
   243ac:	e7eb      	b.n	24386 <next_timeout+0x12>
   243ae:	bf00      	nop
   243b0:	200008d8 	.word	0x200008d8

000243b4 <remove_timeout>:
{
   243b4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   243b6:	b170      	cbz	r0, 243d6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   243b8:	4b0b      	ldr	r3, [pc, #44]	; (243e8 <remove_timeout+0x34>)
   243ba:	685b      	ldr	r3, [r3, #4]
   243bc:	4298      	cmp	r0, r3
   243be:	d00a      	beq.n	243d6 <remove_timeout+0x22>
   243c0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   243c2:	b143      	cbz	r3, 243d6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   243c4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   243c8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   243cc:	1912      	adds	r2, r2, r4
   243ce:	eb41 0105 	adc.w	r1, r1, r5
   243d2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   243d6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   243da:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   243dc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   243de:	2300      	movs	r3, #0
	node->prev = NULL;
   243e0:	e9c0 3300 	strd	r3, r3, [r0]
}
   243e4:	bd30      	pop	{r4, r5, pc}
   243e6:	bf00      	nop
   243e8:	200008d8 	.word	0x200008d8

000243ec <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   243ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   243f0:	bf08      	it	eq
   243f2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   243f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   243f8:	4604      	mov	r4, r0
   243fa:	461d      	mov	r5, r3
   243fc:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   243fe:	d05c      	beq.n	244ba <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   24400:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   24402:	f04f 0340 	mov.w	r3, #64	; 0x40
   24406:	f3ef 8711 	mrs	r7, BASEPRI
   2440a:	f383 8812 	msr	BASEPRI_MAX, r3
   2440e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   24412:	3201      	adds	r2, #1
   24414:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
   24418:	da24      	bge.n	24464 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2441a:	492d      	ldr	r1, [pc, #180]	; (244d0 <z_add_timeout+0xe4>)
   2441c:	e9d1 2000 	ldrd	r2, r0, [r1]
   24420:	f06f 0301 	mvn.w	r3, #1
   24424:	1a9b      	subs	r3, r3, r2
   24426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2442a:	eb62 0000 	sbc.w	r0, r2, r0
   2442e:	1b9e      	subs	r6, r3, r6
   24430:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   24434:	2e01      	cmp	r6, #1
   24436:	f170 0300 	sbcs.w	r3, r0, #0
   2443a:	da01      	bge.n	24440 <z_add_timeout+0x54>
   2443c:	2601      	movs	r6, #1
   2443e:	2000      	movs	r0, #0
   24440:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   24444:	4e23      	ldr	r6, [pc, #140]	; (244d4 <z_add_timeout+0xe8>)
   24446:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2444a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2444c:	45b4      	cmp	ip, r6
   2444e:	bf08      	it	eq
   24450:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   24454:	f1bc 0f00 	cmp.w	ip, #0
   24458:	d10d      	bne.n	24476 <z_add_timeout+0x8a>
	node->prev = tail;
   2445a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   2445e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24460:	6074      	str	r4, [r6, #4]
}
   24462:	e01c      	b.n	2449e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   24464:	f7ff ff7c 	bl	24360 <elapsed>
   24468:	3601      	adds	r6, #1
   2446a:	f145 0500 	adc.w	r5, r5, #0
   2446e:	1836      	adds	r6, r6, r0
   24470:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   24474:	e7e4      	b.n	24440 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   24476:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2447a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   2447e:	4293      	cmp	r3, r2
   24480:	eb71 0e00 	sbcs.w	lr, r1, r0
   24484:	da1a      	bge.n	244bc <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
   24486:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   24488:	f8dc 3004 	ldr.w	r3, [ip, #4]
   2448c:	eb60 0001 	sbc.w	r0, r0, r1
   24490:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   24494:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   24498:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2449a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   2449e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   244a0:	42b3      	cmp	r3, r6
   244a2:	d006      	beq.n	244b2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   244a4:	429c      	cmp	r4, r3
   244a6:	d104      	bne.n	244b2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
   244a8:	f7ff ff64 	bl	24374 <next_timeout>
   244ac:	2100      	movs	r1, #0
   244ae:	f7fc fe6b 	bl	21188 <sys_clock_set_timeout>
	__asm__ volatile(
   244b2:	f387 8811 	msr	BASEPRI, r7
   244b6:	f3bf 8f6f 	isb	sy
		}
	}
}
   244ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   244bc:	1a9b      	subs	r3, r3, r2
   244be:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   244c2:	45ac      	cmp	ip, r5
   244c4:	e9c4 3104 	strd	r3, r1, [r4, #16]
   244c8:	d0c7      	beq.n	2445a <z_add_timeout+0x6e>
   244ca:	f8dc c000 	ldr.w	ip, [ip]
   244ce:	e7c1      	b.n	24454 <z_add_timeout+0x68>
   244d0:	20002e48 	.word	0x20002e48
   244d4:	200008d8 	.word	0x200008d8

000244d8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   244d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
   244dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   244e0:	f3ef 8c11 	mrs	ip, BASEPRI
   244e4:	f383 8812 	msr	BASEPRI_MAX, r3
   244e8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   244ec:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 245a0 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   244f0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 245a4 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   244f4:	4f2c      	ldr	r7, [pc, #176]	; (245a8 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
   244f6:	f8c9 0000 	str.w	r0, [r9]
   244fa:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
   244fe:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24500:	4550      	cmp	r0, sl
   24502:	bf08      	it	eq
   24504:	2000      	moveq	r0, #0
   24506:	2500      	movs	r5, #0
		curr_tick += dt;
   24508:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
   2450c:	f8d9 3000 	ldr.w	r3, [r9]
   24510:	46e0      	mov	r8, ip
   24512:	b380      	cbz	r0, 24576 <sys_clock_announce+0x9e>
   24514:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
   24518:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   2451c:	42b3      	cmp	r3, r6
   2451e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
   24522:	da05      	bge.n	24530 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   24524:	1af6      	subs	r6, r6, r3
   24526:	eb6c 040e 	sbc.w	r4, ip, lr
   2452a:	e9c0 6404 	strd	r6, r4, [r0, #16]
   2452e:	e022      	b.n	24576 <sys_clock_announce+0x9e>
		curr_tick += dt;
   24530:	18b2      	adds	r2, r6, r2
   24532:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
   24536:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
   2453a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
   2453e:	f7ff ff39 	bl	243b4 <remove_timeout>
	__asm__ volatile(
   24542:	f388 8811 	msr	BASEPRI, r8
   24546:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2454a:	6883      	ldr	r3, [r0, #8]
   2454c:	4798      	blx	r3
	__asm__ volatile(
   2454e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24552:	f3ef 8811 	mrs	r8, BASEPRI
   24556:	f383 8812 	msr	BASEPRI_MAX, r3
   2455a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2455e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
   24562:	f8da 0000 	ldr.w	r0, [sl]
   24566:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24568:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
   2456a:	46c4      	mov	ip, r8
   2456c:	f8c9 3000 	str.w	r3, [r9]
   24570:	d1ca      	bne.n	24508 <sys_clock_announce+0x30>
		curr_tick += dt;
   24572:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
   24576:	189a      	adds	r2, r3, r2
   24578:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
   2457c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2457e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
   24582:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
   24586:	f7ff fef5 	bl	24374 <next_timeout>
   2458a:	4621      	mov	r1, r4
   2458c:	f7fc fdfc 	bl	21188 <sys_clock_set_timeout>
	__asm__ volatile(
   24590:	f388 8811 	msr	BASEPRI, r8
   24594:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   24598:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   2459c:	f7ff bc84 	b.w	23ea8 <z_time_slice>
   245a0:	200008d8 	.word	0x200008d8
   245a4:	20003390 	.word	0x20003390
   245a8:	20002e48 	.word	0x20002e48

000245ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   245ac:	b510      	push	{r4, lr}
	__asm__ volatile(
   245ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   245b2:	f3ef 8411 	mrs	r4, BASEPRI
   245b6:	f383 8812 	msr	BASEPRI_MAX, r3
   245ba:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   245be:	f7ff fecf 	bl	24360 <elapsed>
   245c2:	4a06      	ldr	r2, [pc, #24]	; (245dc <sys_clock_tick_get+0x30>)
   245c4:	4603      	mov	r3, r0
   245c6:	e9d2 0100 	ldrd	r0, r1, [r2]
   245ca:	1818      	adds	r0, r3, r0
   245cc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   245d0:	f384 8811 	msr	BASEPRI, r4
   245d4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   245d8:	bd10      	pop	{r4, pc}
   245da:	bf00      	nop
   245dc:	20002e48 	.word	0x20002e48

000245e0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   245e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245e2:	4604      	mov	r4, r0
	__asm__ volatile(
   245e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   245e8:	f3ef 8711 	mrs	r7, BASEPRI
   245ec:	f383 8812 	msr	BASEPRI_MAX, r3
   245f0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   245f4:	6802      	ldr	r2, [r0, #0]
   245f6:	b122      	cbz	r2, 24602 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
   245f8:	f387 8811 	msr	BASEPRI, r7
   245fc:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   24600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   24602:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
   24606:	1c58      	adds	r0, r3, #1
   24608:	f146 0100 	adc.w	r1, r6, #0
   2460c:	2802      	cmp	r0, #2
   2460e:	f171 0100 	sbcs.w	r1, r1, #0
   24612:	d327      	bcc.n	24664 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
   24614:	2b01      	cmp	r3, #1
   24616:	f176 0100 	sbcs.w	r1, r6, #0
   2461a:	bfbc      	itt	lt
   2461c:	2301      	movlt	r3, #1
   2461e:	4616      	movlt	r6, r2
   24620:	1e5d      	subs	r5, r3, #1
   24622:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
   24626:	f005 fd67 	bl	2a0f8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   2462a:	3001      	adds	r0, #1
   2462c:	f141 0100 	adc.w	r1, r1, #0
   24630:	1940      	adds	r0, r0, r5
   24632:	eb46 0101 	adc.w	r1, r6, r1
   24636:	2801      	cmp	r0, #1
   24638:	f171 0100 	sbcs.w	r1, r1, #0
   2463c:	db3a      	blt.n	246b4 <z_timer_expiration_handler+0xd4>
   2463e:	f005 fd5b 	bl	2a0f8 <z_impl_k_uptime_ticks>
   24642:	3001      	adds	r0, #1
   24644:	f141 0100 	adc.w	r1, r1, #0
   24648:	f06f 0201 	mvn.w	r2, #1
   2464c:	1940      	adds	r0, r0, r5
   2464e:	eb46 0301 	adc.w	r3, r6, r1
   24652:	1a12      	subs	r2, r2, r0
   24654:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24658:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2465c:	4918      	ldr	r1, [pc, #96]	; (246c0 <z_timer_expiration_handler+0xe0>)
   2465e:	4620      	mov	r0, r4
   24660:	f7ff fec4 	bl	243ec <z_add_timeout>
	timer->status += 1U;
   24664:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24666:	3301      	adds	r3, #1
   24668:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
   2466a:	6a23      	ldr	r3, [r4, #32]
   2466c:	b173      	cbz	r3, 2468c <z_timer_expiration_handler+0xac>
   2466e:	f387 8811 	msr	BASEPRI, r7
   24672:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
   24676:	6a23      	ldr	r3, [r4, #32]
   24678:	4620      	mov	r0, r4
   2467a:	4798      	blx	r3
	__asm__ volatile(
   2467c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24680:	f3ef 8711 	mrs	r7, BASEPRI
   24684:	f383 8812 	msr	BASEPRI_MAX, r3
   24688:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2468c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24690:	42a5      	cmp	r5, r4
   24692:	d0b1      	beq.n	245f8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
   24694:	2d00      	cmp	r5, #0
   24696:	d0af      	beq.n	245f8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
   24698:	4628      	mov	r0, r5
   2469a:	f005 fc37 	bl	29f0c <z_unpend_thread_no_timeout>
   2469e:	2300      	movs	r3, #0
   246a0:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
   246a2:	f387 8811 	msr	BASEPRI, r7
   246a6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   246aa:	4628      	mov	r0, r5
}
   246ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   246b0:	f005 bc1c 	b.w	29eec <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   246b4:	f06f 0201 	mvn.w	r2, #1
   246b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   246bc:	e7ce      	b.n	2465c <z_timer_expiration_handler+0x7c>
   246be:	bf00      	nop
   246c0:	000245e1 	.word	0x000245e1

000246c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   246c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   246c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   246cc:	bf08      	it	eq
   246ce:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   246d2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   246d6:	4605      	mov	r5, r0
   246d8:	461c      	mov	r4, r3
   246da:	4691      	mov	r9, r2
   246dc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   246de:	d01c      	beq.n	2471a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   246e0:	1c53      	adds	r3, r2, #1
   246e2:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
   246e6:	db09      	blt.n	246fc <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
   246e8:	2a01      	cmp	r2, #1
   246ea:	f174 0300 	sbcs.w	r3, r4, #0
   246ee:	bfbc      	itt	lt
   246f0:	2201      	movlt	r2, #1
   246f2:	2400      	movlt	r4, #0
   246f4:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
   246f8:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   246fc:	4628      	mov	r0, r5
   246fe:	f005 fcd1 	bl	2a0a4 <z_abort_timeout>
	timer->period = period;
   24702:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
   24706:	2300      	movs	r3, #0
   24708:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2470a:	464a      	mov	r2, r9
   2470c:	4643      	mov	r3, r8
   2470e:	4628      	mov	r0, r5
   24710:	4903      	ldr	r1, [pc, #12]	; (24720 <z_impl_k_timer_start+0x5c>)
		     duration);
}
   24712:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   24716:	f7ff be69 	b.w	243ec <z_add_timeout>
}
   2471a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2471e:	bf00      	nop
   24720:	000245e1 	.word	0x000245e1

00024724 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   24724:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   24728:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2472a:	4b29      	ldr	r3, [pc, #164]	; (247d0 <z_impl_k_poll+0xac>)
   2472c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2472e:	2301      	movs	r3, #1
   24730:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   24734:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   24738:	ea52 0305 	orrs.w	r3, r2, r5
{
   2473c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   2473e:	bf0c      	ite	eq
   24740:	2301      	moveq	r3, #1
   24742:	2300      	movne	r3, #0
   24744:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   24748:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2474a:	f005 fd57 	bl	2a1fc <register_events>
   2474e:	4681      	mov	r9, r0
	__asm__ volatile(
   24750:	f04f 0340 	mov.w	r3, #64	; 0x40
   24754:	f3ef 8a11 	mrs	sl, BASEPRI
   24758:	f383 8812 	msr	BASEPRI_MAX, r3
   2475c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   24760:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   24764:	b964      	cbnz	r4, 24780 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   24766:	4601      	mov	r1, r0
   24768:	4652      	mov	r2, sl
   2476a:	4640      	mov	r0, r8
   2476c:	f005 fe17 	bl	2a39e <clear_event_registrations>
	__asm__ volatile(
   24770:	f38a 8811 	msr	BASEPRI, sl
   24774:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   24778:	4620      	mov	r0, r4
   2477a:	b002      	add	sp, #8
   2477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   24780:	2300      	movs	r3, #0
   24782:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24786:	ea56 0305 	orrs.w	r3, r6, r5
   2478a:	d106      	bne.n	2479a <z_impl_k_poll+0x76>
   2478c:	f38a 8811 	msr	BASEPRI, sl
   24790:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24794:	f06f 040a 	mvn.w	r4, #10
   24798:	e7ee      	b.n	24778 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2479a:	e9cd 6500 	strd	r6, r5, [sp]
   2479e:	4a0d      	ldr	r2, [pc, #52]	; (247d4 <z_impl_k_poll+0xb0>)
   247a0:	480d      	ldr	r0, [pc, #52]	; (247d8 <z_impl_k_poll+0xb4>)
   247a2:	4651      	mov	r1, sl
   247a4:	f7ff fbb0 	bl	23f08 <z_pend_curr>
   247a8:	4604      	mov	r4, r0
	__asm__ volatile(
   247aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   247ae:	f3ef 8511 	mrs	r5, BASEPRI
   247b2:	f383 8812 	msr	BASEPRI_MAX, r3
   247b6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   247ba:	462a      	mov	r2, r5
   247bc:	4649      	mov	r1, r9
   247be:	4640      	mov	r0, r8
   247c0:	f005 fded 	bl	2a39e <clear_event_registrations>
	__asm__ volatile(
   247c4:	f385 8811 	msr	BASEPRI, r5
   247c8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   247cc:	e7d4      	b.n	24778 <z_impl_k_poll+0x54>
   247ce:	bf00      	nop
   247d0:	20003358 	.word	0x20003358
   247d4:	200008e0 	.word	0x200008e0
   247d8:	200039c0 	.word	0x200039c0

000247dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   247dc:	b538      	push	{r3, r4, r5, lr}
   247de:	4603      	mov	r3, r0
	__asm__ volatile(
   247e0:	f04f 0240 	mov.w	r2, #64	; 0x40
   247e4:	f3ef 8511 	mrs	r5, BASEPRI
   247e8:	f382 8812 	msr	BASEPRI_MAX, r2
   247ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   247f0:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   247f2:	2101      	movs	r1, #1
   247f4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   247f6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   247f8:	4283      	cmp	r3, r0
   247fa:	d106      	bne.n	2480a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   247fc:	f385 8811 	msr	BASEPRI, r5
   24800:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   24804:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   24806:	4620      	mov	r0, r4
   24808:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2480a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2480e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24810:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24812:	2300      	movs	r3, #0
	node->prev = NULL;
   24814:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   24818:	f005 fd67 	bl	2a2ea <signal_poll_event>
	z_reschedule(&lock, key);
   2481c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2481e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   24820:	4801      	ldr	r0, [pc, #4]	; (24828 <z_impl_k_poll_signal_raise+0x4c>)
   24822:	f7ff fbd5 	bl	23fd0 <z_reschedule>
	return rc;
   24826:	e7ee      	b.n	24806 <z_impl_k_poll_signal_raise+0x2a>
   24828:	200039c0 	.word	0x200039c0

0002482c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2482c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2482e:	4606      	mov	r6, r0
   24830:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   24832:	f005 f944 	bl	29abe <k_is_in_isr>
   24836:	b978      	cbnz	r0, 24858 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   24838:	4b0b      	ldr	r3, [pc, #44]	; (24868 <z_thread_aligned_alloc+0x3c>)
   2483a:	689b      	ldr	r3, [r3, #8]
   2483c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2483e:	b17c      	cbz	r4, 24860 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   24840:	1d2a      	adds	r2, r5, #4
   24842:	d209      	bcs.n	24858 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   24844:	2000      	movs	r0, #0
   24846:	2100      	movs	r1, #0
   24848:	e9cd 0100 	strd	r0, r1, [sp]
   2484c:	f046 0104 	orr.w	r1, r6, #4
   24850:	4620      	mov	r0, r4
   24852:	f005 f88b 	bl	2996c <k_heap_aligned_alloc>
	if (mem == NULL) {
   24856:	b908      	cbnz	r0, 2485c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   24858:	2400      	movs	r4, #0
	}

	return ret;
   2485a:	e001      	b.n	24860 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   2485c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2485e:	1d04      	adds	r4, r0, #4
}
   24860:	4620      	mov	r0, r4
   24862:	b002      	add	sp, #8
   24864:	bd70      	pop	{r4, r5, r6, pc}
   24866:	bf00      	nop
   24868:	20003358 	.word	0x20003358

0002486c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   2486c:	4801      	ldr	r0, [pc, #4]	; (24874 <boot_banner+0x8>)
   2486e:	f000 bce1 	b.w	25234 <printk>
   24872:	bf00      	nop
   24874:	0002f44a 	.word	0x0002f44a

00024878 <ocrypto_ecdh_p256_public_key>:
   24878:	b530      	push	{r4, r5, lr}
   2487a:	b099      	sub	sp, #100	; 0x64
   2487c:	4605      	mov	r5, r0
   2487e:	4668      	mov	r0, sp
   24880:	f000 f828 	bl	248d4 <ocrypto_sc_p256_from32bytes>
   24884:	4669      	mov	r1, sp
   24886:	4604      	mov	r4, r0
   24888:	a808      	add	r0, sp, #32
   2488a:	f000 fa53 	bl	24d34 <ocrypto_curve_p256_scalarmult_base>
   2488e:	a908      	add	r1, sp, #32
   24890:	4304      	orrs	r4, r0
   24892:	4628      	mov	r0, r5
   24894:	f000 f98a 	bl	24bac <ocrypto_curve_p256_to64bytes>
   24898:	4620      	mov	r0, r4
   2489a:	b019      	add	sp, #100	; 0x64
   2489c:	bd30      	pop	{r4, r5, pc}
   2489e:	bf00      	nop

000248a0 <ocrypto_ecdh_p256_common_secret>:
   248a0:	b570      	push	{r4, r5, r6, lr}
   248a2:	b098      	sub	sp, #96	; 0x60
   248a4:	4605      	mov	r5, r0
   248a6:	4668      	mov	r0, sp
   248a8:	4616      	mov	r6, r2
   248aa:	f000 f813 	bl	248d4 <ocrypto_sc_p256_from32bytes>
   248ae:	4631      	mov	r1, r6
   248b0:	4604      	mov	r4, r0
   248b2:	a808      	add	r0, sp, #32
   248b4:	f000 f946 	bl	24b44 <ocrypto_curve_p256_from64bytes>
   248b8:	a908      	add	r1, sp, #32
   248ba:	466a      	mov	r2, sp
   248bc:	4304      	orrs	r4, r0
   248be:	4608      	mov	r0, r1
   248c0:	f000 f982 	bl	24bc8 <ocrypto_curve_p256_scalarmult>
   248c4:	a908      	add	r1, sp, #32
   248c6:	4304      	orrs	r4, r0
   248c8:	4628      	mov	r0, r5
   248ca:	f000 f96d 	bl	24ba8 <ocrypto_curve_p256_to32bytes>
   248ce:	4620      	mov	r0, r4
   248d0:	b018      	add	sp, #96	; 0x60
   248d2:	bd70      	pop	{r4, r5, r6, pc}

000248d4 <ocrypto_sc_p256_from32bytes>:
   248d4:	b570      	push	{r4, r5, r6, lr}
   248d6:	680b      	ldr	r3, [r1, #0]
   248d8:	4e12      	ldr	r6, [pc, #72]	; (24924 <ocrypto_sc_p256_from32bytes+0x50>)
   248da:	ba1b      	rev	r3, r3
   248dc:	61c3      	str	r3, [r0, #28]
   248de:	684b      	ldr	r3, [r1, #4]
   248e0:	ba1b      	rev	r3, r3
   248e2:	6183      	str	r3, [r0, #24]
   248e4:	688b      	ldr	r3, [r1, #8]
   248e6:	ba1b      	rev	r3, r3
   248e8:	6143      	str	r3, [r0, #20]
   248ea:	68cb      	ldr	r3, [r1, #12]
   248ec:	ba1b      	rev	r3, r3
   248ee:	6103      	str	r3, [r0, #16]
   248f0:	690b      	ldr	r3, [r1, #16]
   248f2:	ba1b      	rev	r3, r3
   248f4:	60c3      	str	r3, [r0, #12]
   248f6:	694b      	ldr	r3, [r1, #20]
   248f8:	ba1b      	rev	r3, r3
   248fa:	6083      	str	r3, [r0, #8]
   248fc:	698b      	ldr	r3, [r1, #24]
   248fe:	ba1b      	rev	r3, r3
   24900:	6043      	str	r3, [r0, #4]
   24902:	69cb      	ldr	r3, [r1, #28]
   24904:	ba1b      	rev	r3, r3
   24906:	4632      	mov	r2, r6
   24908:	6003      	str	r3, [r0, #0]
   2490a:	4601      	mov	r1, r0
   2490c:	4604      	mov	r4, r0
   2490e:	f7db fc21 	bl	154 <ocrypto_bigint_sub256>
   24912:	4631      	mov	r1, r6
   24914:	4605      	mov	r5, r0
   24916:	4602      	mov	r2, r0
   24918:	4620      	mov	r0, r4
   2491a:	f7db fc3b 	bl	194 <ocrypto_bigint_cadd256>
   2491e:	1e68      	subs	r0, r5, #1
   24920:	bd70      	pop	{r4, r5, r6, pc}
   24922:	bf00      	nop
   24924:	0002b47c 	.word	0x0002b47c

00024928 <p256_zdblu>:
   24928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2492c:	b088      	sub	sp, #32
   2492e:	460c      	mov	r4, r1
   24930:	4606      	mov	r6, r0
   24932:	f102 0120 	add.w	r1, r2, #32
   24936:	4668      	mov	r0, sp
   24938:	f106 0720 	add.w	r7, r6, #32
   2493c:	4690      	mov	r8, r2
   2493e:	f7db ff03 	bl	748 <ocrypto_mod_p256_sqr>
   24942:	466a      	mov	r2, sp
   24944:	4669      	mov	r1, sp
   24946:	4668      	mov	r0, sp
   24948:	f7db fe20 	bl	58c <ocrypto_mod_p256_add>
   2494c:	4669      	mov	r1, sp
   2494e:	4638      	mov	r0, r7
   24950:	f7db fefa 	bl	748 <ocrypto_mod_p256_sqr>
   24954:	463a      	mov	r2, r7
   24956:	4639      	mov	r1, r7
   24958:	4638      	mov	r0, r7
   2495a:	f104 0520 	add.w	r5, r4, #32
   2495e:	f7db fe15 	bl	58c <ocrypto_mod_p256_add>
   24962:	466a      	mov	r2, sp
   24964:	4669      	mov	r1, sp
   24966:	4668      	mov	r0, sp
   24968:	f7db fe10 	bl	58c <ocrypto_mod_p256_add>
   2496c:	4641      	mov	r1, r8
   2496e:	4628      	mov	r0, r5
   24970:	f7db feea 	bl	748 <ocrypto_mod_p256_sqr>
   24974:	466a      	mov	r2, sp
   24976:	4641      	mov	r1, r8
   24978:	4630      	mov	r0, r6
   2497a:	f7db fecd 	bl	718 <ocrypto_mod_p256_mul>
   2497e:	462a      	mov	r2, r5
   24980:	4629      	mov	r1, r5
   24982:	4668      	mov	r0, sp
   24984:	f7db fe02 	bl	58c <ocrypto_mod_p256_add>
   24988:	462a      	mov	r2, r5
   2498a:	4669      	mov	r1, sp
   2498c:	4668      	mov	r0, sp
   2498e:	f7db fdfd 	bl	58c <ocrypto_mod_p256_add>
   24992:	4a12      	ldr	r2, [pc, #72]	; (249dc <p256_zdblu+0xb4>)
   24994:	4669      	mov	r1, sp
   24996:	4668      	mov	r0, sp
   24998:	f7db fdf8 	bl	58c <ocrypto_mod_p256_add>
   2499c:	4669      	mov	r1, sp
   2499e:	4620      	mov	r0, r4
   249a0:	f7db fed2 	bl	748 <ocrypto_mod_p256_sqr>
   249a4:	4632      	mov	r2, r6
   249a6:	4621      	mov	r1, r4
   249a8:	4620      	mov	r0, r4
   249aa:	f7db fe2d 	bl	608 <ocrypto_mod_p256_sub>
   249ae:	4632      	mov	r2, r6
   249b0:	4621      	mov	r1, r4
   249b2:	4620      	mov	r0, r4
   249b4:	f7db fe28 	bl	608 <ocrypto_mod_p256_sub>
   249b8:	4622      	mov	r2, r4
   249ba:	4631      	mov	r1, r6
   249bc:	4628      	mov	r0, r5
   249be:	f7db fe23 	bl	608 <ocrypto_mod_p256_sub>
   249c2:	466a      	mov	r2, sp
   249c4:	4629      	mov	r1, r5
   249c6:	4628      	mov	r0, r5
   249c8:	f7db fea6 	bl	718 <ocrypto_mod_p256_mul>
   249cc:	463a      	mov	r2, r7
   249ce:	4629      	mov	r1, r5
   249d0:	4628      	mov	r0, r5
   249d2:	f7db fe19 	bl	608 <ocrypto_mod_p256_sub>
   249d6:	b008      	add	sp, #32
   249d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   249dc:	0002b55c 	.word	0x0002b55c

000249e0 <p256_zaddc>:
   249e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   249e2:	b099      	sub	sp, #100	; 0x64
   249e4:	4604      	mov	r4, r0
   249e6:	460d      	mov	r5, r1
   249e8:	460a      	mov	r2, r1
   249ea:	4601      	mov	r1, r0
   249ec:	4668      	mov	r0, sp
   249ee:	f7db fe0b 	bl	608 <ocrypto_mod_p256_sub>
   249f2:	4669      	mov	r1, sp
   249f4:	4668      	mov	r0, sp
   249f6:	f7db fea7 	bl	748 <ocrypto_mod_p256_sqr>
   249fa:	466a      	mov	r2, sp
   249fc:	4621      	mov	r1, r4
   249fe:	a808      	add	r0, sp, #32
   24a00:	f105 0620 	add.w	r6, r5, #32
   24a04:	f104 0720 	add.w	r7, r4, #32
   24a08:	f7db fe86 	bl	718 <ocrypto_mod_p256_mul>
   24a0c:	466a      	mov	r2, sp
   24a0e:	4629      	mov	r1, r5
   24a10:	4668      	mov	r0, sp
   24a12:	f7db fe81 	bl	718 <ocrypto_mod_p256_mul>
   24a16:	4632      	mov	r2, r6
   24a18:	4639      	mov	r1, r7
   24a1a:	a810      	add	r0, sp, #64	; 0x40
   24a1c:	f7db fdb6 	bl	58c <ocrypto_mod_p256_add>
   24a20:	4632      	mov	r2, r6
   24a22:	4639      	mov	r1, r7
   24a24:	4630      	mov	r0, r6
   24a26:	f7db fdef 	bl	608 <ocrypto_mod_p256_sub>
   24a2a:	4631      	mov	r1, r6
   24a2c:	4628      	mov	r0, r5
   24a2e:	f7db fe8b 	bl	748 <ocrypto_mod_p256_sqr>
   24a32:	466a      	mov	r2, sp
   24a34:	a908      	add	r1, sp, #32
   24a36:	4620      	mov	r0, r4
   24a38:	f7db fda8 	bl	58c <ocrypto_mod_p256_add>
   24a3c:	4622      	mov	r2, r4
   24a3e:	4629      	mov	r1, r5
   24a40:	4628      	mov	r0, r5
   24a42:	f7db fde1 	bl	608 <ocrypto_mod_p256_sub>
   24a46:	466a      	mov	r2, sp
   24a48:	a908      	add	r1, sp, #32
   24a4a:	4668      	mov	r0, sp
   24a4c:	f7db fddc 	bl	608 <ocrypto_mod_p256_sub>
   24a50:	466a      	mov	r2, sp
   24a52:	4639      	mov	r1, r7
   24a54:	4638      	mov	r0, r7
   24a56:	f7db fe5f 	bl	718 <ocrypto_mod_p256_mul>
   24a5a:	462a      	mov	r2, r5
   24a5c:	a908      	add	r1, sp, #32
   24a5e:	4668      	mov	r0, sp
   24a60:	f7db fdd2 	bl	608 <ocrypto_mod_p256_sub>
   24a64:	466a      	mov	r2, sp
   24a66:	4631      	mov	r1, r6
   24a68:	4630      	mov	r0, r6
   24a6a:	f7db fe55 	bl	718 <ocrypto_mod_p256_mul>
   24a6e:	463a      	mov	r2, r7
   24a70:	4631      	mov	r1, r6
   24a72:	4630      	mov	r0, r6
   24a74:	f7db fdc8 	bl	608 <ocrypto_mod_p256_sub>
   24a78:	a910      	add	r1, sp, #64	; 0x40
   24a7a:	4668      	mov	r0, sp
   24a7c:	f7db fe64 	bl	748 <ocrypto_mod_p256_sqr>
   24a80:	4622      	mov	r2, r4
   24a82:	4669      	mov	r1, sp
   24a84:	4620      	mov	r0, r4
   24a86:	f7db fdbf 	bl	608 <ocrypto_mod_p256_sub>
   24a8a:	a908      	add	r1, sp, #32
   24a8c:	4622      	mov	r2, r4
   24a8e:	4608      	mov	r0, r1
   24a90:	f7db fdba 	bl	608 <ocrypto_mod_p256_sub>
   24a94:	a910      	add	r1, sp, #64	; 0x40
   24a96:	aa08      	add	r2, sp, #32
   24a98:	4608      	mov	r0, r1
   24a9a:	f7db fe3d 	bl	718 <ocrypto_mod_p256_mul>
   24a9e:	463a      	mov	r2, r7
   24aa0:	a910      	add	r1, sp, #64	; 0x40
   24aa2:	4638      	mov	r0, r7
   24aa4:	f7db fdb0 	bl	608 <ocrypto_mod_p256_sub>
   24aa8:	b019      	add	sp, #100	; 0x64
   24aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024aac <p256_zaddu>:
   24aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ab0:	b088      	sub	sp, #32
   24ab2:	460c      	mov	r4, r1
   24ab4:	4605      	mov	r5, r0
   24ab6:	4690      	mov	r8, r2
   24ab8:	460a      	mov	r2, r1
   24aba:	4601      	mov	r1, r0
   24abc:	4668      	mov	r0, sp
   24abe:	f7db fda3 	bl	608 <ocrypto_mod_p256_sub>
   24ac2:	4669      	mov	r1, sp
   24ac4:	4668      	mov	r0, sp
   24ac6:	f7db fe3f 	bl	748 <ocrypto_mod_p256_sqr>
   24aca:	466a      	mov	r2, sp
   24acc:	4629      	mov	r1, r5
   24ace:	4628      	mov	r0, r5
   24ad0:	f104 0620 	add.w	r6, r4, #32
   24ad4:	f7db fe20 	bl	718 <ocrypto_mod_p256_mul>
   24ad8:	f105 0720 	add.w	r7, r5, #32
   24adc:	466a      	mov	r2, sp
   24ade:	4621      	mov	r1, r4
   24ae0:	4668      	mov	r0, sp
   24ae2:	f7db fe19 	bl	718 <ocrypto_mod_p256_mul>
   24ae6:	4632      	mov	r2, r6
   24ae8:	4639      	mov	r1, r7
   24aea:	4630      	mov	r0, r6
   24aec:	f7db fd8c 	bl	608 <ocrypto_mod_p256_sub>
   24af0:	4631      	mov	r1, r6
   24af2:	4620      	mov	r0, r4
   24af4:	f7db fe28 	bl	748 <ocrypto_mod_p256_sqr>
   24af8:	462a      	mov	r2, r5
   24afa:	4621      	mov	r1, r4
   24afc:	4620      	mov	r0, r4
   24afe:	f7db fd83 	bl	608 <ocrypto_mod_p256_sub>
   24b02:	466a      	mov	r2, sp
   24b04:	4621      	mov	r1, r4
   24b06:	4620      	mov	r0, r4
   24b08:	f7db fd7e 	bl	608 <ocrypto_mod_p256_sub>
   24b0c:	466a      	mov	r2, sp
   24b0e:	4629      	mov	r1, r5
   24b10:	4640      	mov	r0, r8
   24b12:	f7db fd79 	bl	608 <ocrypto_mod_p256_sub>
   24b16:	4642      	mov	r2, r8
   24b18:	4639      	mov	r1, r7
   24b1a:	4638      	mov	r0, r7
   24b1c:	f7db fdfc 	bl	718 <ocrypto_mod_p256_mul>
   24b20:	4622      	mov	r2, r4
   24b22:	4629      	mov	r1, r5
   24b24:	4668      	mov	r0, sp
   24b26:	f7db fd6f 	bl	608 <ocrypto_mod_p256_sub>
   24b2a:	466a      	mov	r2, sp
   24b2c:	4631      	mov	r1, r6
   24b2e:	4630      	mov	r0, r6
   24b30:	f7db fdf2 	bl	718 <ocrypto_mod_p256_mul>
   24b34:	463a      	mov	r2, r7
   24b36:	4631      	mov	r1, r6
   24b38:	4630      	mov	r0, r6
   24b3a:	f7db fd65 	bl	608 <ocrypto_mod_p256_sub>
   24b3e:	b008      	add	sp, #32
   24b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024b44 <ocrypto_curve_p256_from64bytes>:
   24b44:	b570      	push	{r4, r5, r6, lr}
   24b46:	f100 0620 	add.w	r6, r0, #32
   24b4a:	b090      	sub	sp, #64	; 0x40
   24b4c:	460d      	mov	r5, r1
   24b4e:	4604      	mov	r4, r0
   24b50:	f000 f914 	bl	24d7c <ocrypto_mod_p256_from_bytes>
   24b54:	f105 0120 	add.w	r1, r5, #32
   24b58:	4630      	mov	r0, r6
   24b5a:	f000 f90f 	bl	24d7c <ocrypto_mod_p256_from_bytes>
   24b5e:	4621      	mov	r1, r4
   24b60:	a808      	add	r0, sp, #32
   24b62:	f7db fdf1 	bl	748 <ocrypto_mod_p256_sqr>
   24b66:	a908      	add	r1, sp, #32
   24b68:	4608      	mov	r0, r1
   24b6a:	4a0d      	ldr	r2, [pc, #52]	; (24ba0 <ocrypto_curve_p256_from64bytes+0x5c>)
   24b6c:	f7db fd0e 	bl	58c <ocrypto_mod_p256_add>
   24b70:	a908      	add	r1, sp, #32
   24b72:	4622      	mov	r2, r4
   24b74:	4608      	mov	r0, r1
   24b76:	f7db fdcf 	bl	718 <ocrypto_mod_p256_mul>
   24b7a:	a908      	add	r1, sp, #32
   24b7c:	4a09      	ldr	r2, [pc, #36]	; (24ba4 <ocrypto_curve_p256_from64bytes+0x60>)
   24b7e:	4608      	mov	r0, r1
   24b80:	f7db fd04 	bl	58c <ocrypto_mod_p256_add>
   24b84:	4631      	mov	r1, r6
   24b86:	4668      	mov	r0, sp
   24b88:	f7db fdde 	bl	748 <ocrypto_mod_p256_sqr>
   24b8c:	2220      	movs	r2, #32
   24b8e:	4669      	mov	r1, sp
   24b90:	eb0d 0002 	add.w	r0, sp, r2
   24b94:	f7db fccc 	bl	530 <ocrypto_constant_time_equal>
   24b98:	3801      	subs	r0, #1
   24b9a:	b010      	add	sp, #64	; 0x40
   24b9c:	bd70      	pop	{r4, r5, r6, pc}
   24b9e:	bf00      	nop
   24ba0:	0002b55c 	.word	0x0002b55c
   24ba4:	0002b53c 	.word	0x0002b53c

00024ba8 <ocrypto_curve_p256_to32bytes>:
   24ba8:	f000 b902 	b.w	24db0 <ocrypto_mod_p256_to_bytes>

00024bac <ocrypto_curve_p256_to64bytes>:
   24bac:	b538      	push	{r3, r4, r5, lr}
   24bae:	4604      	mov	r4, r0
   24bb0:	460d      	mov	r5, r1
   24bb2:	f000 f8fd 	bl	24db0 <ocrypto_mod_p256_to_bytes>
   24bb6:	f105 0120 	add.w	r1, r5, #32
   24bba:	f104 0020 	add.w	r0, r4, #32
   24bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24bc2:	f000 b8f5 	b.w	24db0 <ocrypto_mod_p256_to_bytes>
   24bc6:	bf00      	nop

00024bc8 <ocrypto_curve_p256_scalarmult>:
   24bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24bcc:	4613      	mov	r3, r2
   24bce:	b0b8      	sub	sp, #224	; 0xe0
   24bd0:	4a54      	ldr	r2, [pc, #336]	; (24d24 <ocrypto_curve_p256_scalarmult+0x15c>)
   24bd2:	4689      	mov	r9, r1
   24bd4:	4680      	mov	r8, r0
   24bd6:	4619      	mov	r1, r3
   24bd8:	a810      	add	r0, sp, #64	; 0x40
   24bda:	f7db fabb 	bl	154 <ocrypto_bigint_sub256>
   24bde:	4952      	ldr	r1, [pc, #328]	; (24d28 <ocrypto_curve_p256_scalarmult+0x160>)
   24be0:	4602      	mov	r2, r0
   24be2:	a810      	add	r0, sp, #64	; 0x40
   24be4:	f7db fad6 	bl	194 <ocrypto_bigint_cadd256>
   24be8:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   24bea:	494e      	ldr	r1, [pc, #312]	; (24d24 <ocrypto_curve_p256_scalarmult+0x15c>)
   24bec:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   24bf0:	4607      	mov	r7, r0
   24bf2:	f1c6 0201 	rsb	r2, r6, #1
   24bf6:	a810      	add	r0, sp, #64	; 0x40
   24bf8:	f7db facc 	bl	194 <ocrypto_bigint_cadd256>
   24bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   24bfe:	464a      	mov	r2, r9
   24c00:	ea6f 0a03 	mvn.w	sl, r3
   24c04:	a928      	add	r1, sp, #160	; 0xa0
   24c06:	a818      	add	r0, sp, #96	; 0x60
   24c08:	f7ff fe8e 	bl	24928 <p256_zdblu>
   24c0c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   24c10:	a920      	add	r1, sp, #128	; 0x80
   24c12:	f1ca 0201 	rsb	r2, sl, #1
   24c16:	4608      	mov	r0, r1
   24c18:	f000 f892 	bl	24d40 <ocrypto_mod_p256_cneg>
   24c1c:	f1c7 0701 	rsb	r7, r7, #1
   24c20:	24fe      	movs	r4, #254	; 0xfe
   24c22:	466a      	mov	r2, sp
   24c24:	a918      	add	r1, sp, #96	; 0x60
   24c26:	a828      	add	r0, sp, #160	; 0xa0
   24c28:	f7ff ff40 	bl	24aac <p256_zaddu>
   24c2c:	1163      	asrs	r3, r4, #5
   24c2e:	aa38      	add	r2, sp, #224	; 0xe0
   24c30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   24c34:	f004 021f 	and.w	r2, r4, #31
   24c38:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   24c3c:	40d3      	lsrs	r3, r2
   24c3e:	4655      	mov	r5, sl
   24c40:	f003 0a01 	and.w	sl, r3, #1
   24c44:	ea8a 0505 	eor.w	r5, sl, r5
   24c48:	462a      	mov	r2, r5
   24c4a:	a928      	add	r1, sp, #160	; 0xa0
   24c4c:	a818      	add	r0, sp, #96	; 0x60
   24c4e:	f7db fafd 	bl	24c <ocrypto_bigint_cswap256>
   24c52:	462a      	mov	r2, r5
   24c54:	a930      	add	r1, sp, #192	; 0xc0
   24c56:	a820      	add	r0, sp, #128	; 0x80
   24c58:	f7db faf8 	bl	24c <ocrypto_bigint_cswap256>
   24c5c:	3c01      	subs	r4, #1
   24c5e:	a928      	add	r1, sp, #160	; 0xa0
   24c60:	a818      	add	r0, sp, #96	; 0x60
   24c62:	f7ff febd 	bl	249e0 <p256_zaddc>
   24c66:	1c63      	adds	r3, r4, #1
   24c68:	d1db      	bne.n	24c22 <ocrypto_curve_p256_scalarmult+0x5a>
   24c6a:	f1ca 0201 	rsb	r2, sl, #1
   24c6e:	a920      	add	r1, sp, #128	; 0x80
   24c70:	a808      	add	r0, sp, #32
   24c72:	f000 f865 	bl	24d40 <ocrypto_mod_p256_cneg>
   24c76:	ea86 060a 	eor.w	r6, r6, sl
   24c7a:	466a      	mov	r2, sp
   24c7c:	a918      	add	r1, sp, #96	; 0x60
   24c7e:	a828      	add	r0, sp, #160	; 0xa0
   24c80:	f7ff ff14 	bl	24aac <p256_zaddu>
   24c84:	a928      	add	r1, sp, #160	; 0xa0
   24c86:	4632      	mov	r2, r6
   24c88:	a818      	add	r0, sp, #96	; 0x60
   24c8a:	f7db fadf 	bl	24c <ocrypto_bigint_cswap256>
   24c8e:	4632      	mov	r2, r6
   24c90:	a930      	add	r1, sp, #192	; 0xc0
   24c92:	a820      	add	r0, sp, #128	; 0x80
   24c94:	f7db fada 	bl	24c <ocrypto_bigint_cswap256>
   24c98:	a908      	add	r1, sp, #32
   24c9a:	466a      	mov	r2, sp
   24c9c:	4608      	mov	r0, r1
   24c9e:	f7db fd3b 	bl	718 <ocrypto_mod_p256_mul>
   24ca2:	a908      	add	r1, sp, #32
   24ca4:	4608      	mov	r0, r1
   24ca6:	f000 f89d 	bl	24de4 <ocrypto_mod_p256_inv>
   24caa:	a908      	add	r1, sp, #32
   24cac:	f108 0420 	add.w	r4, r8, #32
   24cb0:	f109 0220 	add.w	r2, r9, #32
   24cb4:	4608      	mov	r0, r1
   24cb6:	f7db fd2f 	bl	718 <ocrypto_mod_p256_mul>
   24cba:	a920      	add	r1, sp, #128	; 0x80
   24cbc:	aa08      	add	r2, sp, #32
   24cbe:	4620      	mov	r0, r4
   24cc0:	f7db fd2a 	bl	718 <ocrypto_mod_p256_mul>
   24cc4:	aa08      	add	r2, sp, #32
   24cc6:	a918      	add	r1, sp, #96	; 0x60
   24cc8:	4668      	mov	r0, sp
   24cca:	f7db fd25 	bl	718 <ocrypto_mod_p256_mul>
   24cce:	4669      	mov	r1, sp
   24cd0:	4668      	mov	r0, sp
   24cd2:	f7db fd39 	bl	748 <ocrypto_mod_p256_sqr>
   24cd6:	aa18      	add	r2, sp, #96	; 0x60
   24cd8:	4669      	mov	r1, sp
   24cda:	a808      	add	r0, sp, #32
   24cdc:	f7db fd1c 	bl	718 <ocrypto_mod_p256_mul>
   24ce0:	4621      	mov	r1, r4
   24ce2:	4668      	mov	r0, sp
   24ce4:	f7db fd30 	bl	748 <ocrypto_mod_p256_sqr>
   24ce8:	aa08      	add	r2, sp, #32
   24cea:	4669      	mov	r1, sp
   24cec:	4610      	mov	r0, r2
   24cee:	f7db fc8b 	bl	608 <ocrypto_mod_p256_sub>
   24cf2:	4a0e      	ldr	r2, [pc, #56]	; (24d2c <ocrypto_curve_p256_scalarmult+0x164>)
   24cf4:	a908      	add	r1, sp, #32
   24cf6:	4668      	mov	r0, sp
   24cf8:	f7db fc86 	bl	608 <ocrypto_mod_p256_sub>
   24cfc:	4620      	mov	r0, r4
   24cfe:	2120      	movs	r1, #32
   24d00:	f7db fc2a 	bl	558 <ocrypto_constant_time_is_zero>
   24d04:	a908      	add	r1, sp, #32
   24d06:	4602      	mov	r2, r0
   24d08:	4244      	negs	r4, r0
   24d0a:	4668      	mov	r0, sp
   24d0c:	f7db fa9e 	bl	24c <ocrypto_bigint_cswap256>
   24d10:	4640      	mov	r0, r8
   24d12:	4a07      	ldr	r2, [pc, #28]	; (24d30 <ocrypto_curve_p256_scalarmult+0x168>)
   24d14:	4669      	mov	r1, sp
   24d16:	f7db fcff 	bl	718 <ocrypto_mod_p256_mul>
   24d1a:	433c      	orrs	r4, r7
   24d1c:	4620      	mov	r0, r4
   24d1e:	b038      	add	sp, #224	; 0xe0
   24d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24d24:	0002b4bc 	.word	0x0002b4bc
   24d28:	0002b4dc 	.word	0x0002b4dc
   24d2c:	0002b53c 	.word	0x0002b53c
   24d30:	0002b49c 	.word	0x0002b49c

00024d34 <ocrypto_curve_p256_scalarmult_base>:
   24d34:	460a      	mov	r2, r1
   24d36:	4901      	ldr	r1, [pc, #4]	; (24d3c <ocrypto_curve_p256_scalarmult_base+0x8>)
   24d38:	f7ff bf46 	b.w	24bc8 <ocrypto_curve_p256_scalarmult>
   24d3c:	0002b4fc 	.word	0x0002b4fc

00024d40 <ocrypto_mod_p256_cneg>:
   24d40:	b570      	push	{r4, r5, r6, lr}
   24d42:	b088      	sub	sp, #32
   24d44:	4604      	mov	r4, r0
   24d46:	460d      	mov	r5, r1
   24d48:	4616      	mov	r6, r2
   24d4a:	2100      	movs	r1, #0
   24d4c:	2220      	movs	r2, #32
   24d4e:	4668      	mov	r0, sp
   24d50:	f001 ff57 	bl	26c02 <memset>
   24d54:	2300      	movs	r3, #0
   24d56:	4629      	mov	r1, r5
   24d58:	2220      	movs	r2, #32
   24d5a:	4620      	mov	r0, r4
   24d5c:	9300      	str	r3, [sp, #0]
   24d5e:	f001 ff45 	bl	26bec <memcpy>
   24d62:	462a      	mov	r2, r5
   24d64:	4669      	mov	r1, sp
   24d66:	4668      	mov	r0, sp
   24d68:	f7db fc4e 	bl	608 <ocrypto_mod_p256_sub>
   24d6c:	4632      	mov	r2, r6
   24d6e:	4669      	mov	r1, sp
   24d70:	4620      	mov	r0, r4
   24d72:	f7db fa6b 	bl	24c <ocrypto_bigint_cswap256>
   24d76:	b008      	add	sp, #32
   24d78:	bd70      	pop	{r4, r5, r6, pc}
   24d7a:	bf00      	nop

00024d7c <ocrypto_mod_p256_from_bytes>:
   24d7c:	680b      	ldr	r3, [r1, #0]
   24d7e:	ba1b      	rev	r3, r3
   24d80:	61c3      	str	r3, [r0, #28]
   24d82:	684b      	ldr	r3, [r1, #4]
   24d84:	ba1b      	rev	r3, r3
   24d86:	6183      	str	r3, [r0, #24]
   24d88:	688b      	ldr	r3, [r1, #8]
   24d8a:	ba1b      	rev	r3, r3
   24d8c:	6143      	str	r3, [r0, #20]
   24d8e:	68cb      	ldr	r3, [r1, #12]
   24d90:	ba1b      	rev	r3, r3
   24d92:	6103      	str	r3, [r0, #16]
   24d94:	690b      	ldr	r3, [r1, #16]
   24d96:	ba1b      	rev	r3, r3
   24d98:	60c3      	str	r3, [r0, #12]
   24d9a:	694b      	ldr	r3, [r1, #20]
   24d9c:	ba1b      	rev	r3, r3
   24d9e:	6083      	str	r3, [r0, #8]
   24da0:	698b      	ldr	r3, [r1, #24]
   24da2:	ba1b      	rev	r3, r3
   24da4:	6043      	str	r3, [r0, #4]
   24da6:	69cb      	ldr	r3, [r1, #28]
   24da8:	ba1b      	rev	r3, r3
   24daa:	6003      	str	r3, [r0, #0]
   24dac:	4770      	bx	lr
   24dae:	bf00      	nop

00024db0 <ocrypto_mod_p256_to_bytes>:
   24db0:	69cb      	ldr	r3, [r1, #28]
   24db2:	ba1b      	rev	r3, r3
   24db4:	6003      	str	r3, [r0, #0]
   24db6:	698b      	ldr	r3, [r1, #24]
   24db8:	ba1b      	rev	r3, r3
   24dba:	6043      	str	r3, [r0, #4]
   24dbc:	694b      	ldr	r3, [r1, #20]
   24dbe:	ba1b      	rev	r3, r3
   24dc0:	6083      	str	r3, [r0, #8]
   24dc2:	690b      	ldr	r3, [r1, #16]
   24dc4:	ba1b      	rev	r3, r3
   24dc6:	60c3      	str	r3, [r0, #12]
   24dc8:	68cb      	ldr	r3, [r1, #12]
   24dca:	ba1b      	rev	r3, r3
   24dcc:	6103      	str	r3, [r0, #16]
   24dce:	688b      	ldr	r3, [r1, #8]
   24dd0:	ba1b      	rev	r3, r3
   24dd2:	6143      	str	r3, [r0, #20]
   24dd4:	684b      	ldr	r3, [r1, #4]
   24dd6:	ba1b      	rev	r3, r3
   24dd8:	6183      	str	r3, [r0, #24]
   24dda:	680b      	ldr	r3, [r1, #0]
   24ddc:	ba1b      	rev	r3, r3
   24dde:	61c3      	str	r3, [r0, #28]
   24de0:	4770      	bx	lr
   24de2:	bf00      	nop

00024de4 <ocrypto_mod_p256_inv>:
   24de4:	b570      	push	{r4, r5, r6, lr}
   24de6:	b098      	sub	sp, #96	; 0x60
   24de8:	460d      	mov	r5, r1
   24dea:	4606      	mov	r6, r0
   24dec:	a810      	add	r0, sp, #64	; 0x40
   24dee:	f7db fcab 	bl	748 <ocrypto_mod_p256_sqr>
   24df2:	462a      	mov	r2, r5
   24df4:	a910      	add	r1, sp, #64	; 0x40
   24df6:	4668      	mov	r0, sp
   24df8:	f7db fc8e 	bl	718 <ocrypto_mod_p256_mul>
   24dfc:	4669      	mov	r1, sp
   24dfe:	a810      	add	r0, sp, #64	; 0x40
   24e00:	f7db fca2 	bl	748 <ocrypto_mod_p256_sqr>
   24e04:	a910      	add	r1, sp, #64	; 0x40
   24e06:	4608      	mov	r0, r1
   24e08:	f7db fc9e 	bl	748 <ocrypto_mod_p256_sqr>
   24e0c:	466a      	mov	r2, sp
   24e0e:	a910      	add	r1, sp, #64	; 0x40
   24e10:	a808      	add	r0, sp, #32
   24e12:	f7db fc81 	bl	718 <ocrypto_mod_p256_mul>
   24e16:	a908      	add	r1, sp, #32
   24e18:	a810      	add	r0, sp, #64	; 0x40
   24e1a:	f7db fc95 	bl	748 <ocrypto_mod_p256_sqr>
   24e1e:	a910      	add	r1, sp, #64	; 0x40
   24e20:	4608      	mov	r0, r1
   24e22:	f7db fc91 	bl	748 <ocrypto_mod_p256_sqr>
   24e26:	a910      	add	r1, sp, #64	; 0x40
   24e28:	4608      	mov	r0, r1
   24e2a:	f7db fc8d 	bl	748 <ocrypto_mod_p256_sqr>
   24e2e:	a910      	add	r1, sp, #64	; 0x40
   24e30:	4608      	mov	r0, r1
   24e32:	f7db fc89 	bl	748 <ocrypto_mod_p256_sqr>
   24e36:	a910      	add	r1, sp, #64	; 0x40
   24e38:	aa08      	add	r2, sp, #32
   24e3a:	4608      	mov	r0, r1
   24e3c:	f7db fc6c 	bl	718 <ocrypto_mod_p256_mul>
   24e40:	a910      	add	r1, sp, #64	; 0x40
   24e42:	4608      	mov	r0, r1
   24e44:	f7db fc80 	bl	748 <ocrypto_mod_p256_sqr>
   24e48:	a910      	add	r1, sp, #64	; 0x40
   24e4a:	4608      	mov	r0, r1
   24e4c:	f7db fc7c 	bl	748 <ocrypto_mod_p256_sqr>
   24e50:	a910      	add	r1, sp, #64	; 0x40
   24e52:	466a      	mov	r2, sp
   24e54:	a808      	add	r0, sp, #32
   24e56:	f7db fc5f 	bl	718 <ocrypto_mod_p256_mul>
   24e5a:	2405      	movs	r4, #5
   24e5c:	a908      	add	r1, sp, #32
   24e5e:	a810      	add	r0, sp, #64	; 0x40
   24e60:	f7db fc72 	bl	748 <ocrypto_mod_p256_sqr>
   24e64:	a910      	add	r1, sp, #64	; 0x40
   24e66:	4608      	mov	r0, r1
   24e68:	f7db fc6e 	bl	748 <ocrypto_mod_p256_sqr>
   24e6c:	3c01      	subs	r4, #1
   24e6e:	a910      	add	r1, sp, #64	; 0x40
   24e70:	d1f5      	bne.n	24e5e <ocrypto_mod_p256_inv+0x7a>
   24e72:	aa08      	add	r2, sp, #32
   24e74:	4608      	mov	r0, r1
   24e76:	f7db fc4f 	bl	718 <ocrypto_mod_p256_mul>
   24e7a:	2405      	movs	r4, #5
   24e7c:	a910      	add	r1, sp, #64	; 0x40
   24e7e:	4608      	mov	r0, r1
   24e80:	f7db fc62 	bl	748 <ocrypto_mod_p256_sqr>
   24e84:	a910      	add	r1, sp, #64	; 0x40
   24e86:	4608      	mov	r0, r1
   24e88:	f7db fc5e 	bl	748 <ocrypto_mod_p256_sqr>
   24e8c:	3c01      	subs	r4, #1
   24e8e:	d1f5      	bne.n	24e7c <ocrypto_mod_p256_inv+0x98>
   24e90:	a910      	add	r1, sp, #64	; 0x40
   24e92:	aa08      	add	r2, sp, #32
   24e94:	4608      	mov	r0, r1
   24e96:	f7db fc3f 	bl	718 <ocrypto_mod_p256_mul>
   24e9a:	a910      	add	r1, sp, #64	; 0x40
   24e9c:	a808      	add	r0, sp, #32
   24e9e:	f7db fc53 	bl	748 <ocrypto_mod_p256_sqr>
   24ea2:	a908      	add	r1, sp, #32
   24ea4:	4608      	mov	r0, r1
   24ea6:	f7db fc4f 	bl	748 <ocrypto_mod_p256_sqr>
   24eaa:	a908      	add	r1, sp, #32
   24eac:	466a      	mov	r2, sp
   24eae:	4668      	mov	r0, sp
   24eb0:	f7db fc32 	bl	718 <ocrypto_mod_p256_mul>
   24eb4:	2410      	movs	r4, #16
   24eb6:	4669      	mov	r1, sp
   24eb8:	a810      	add	r0, sp, #64	; 0x40
   24eba:	f7db fc45 	bl	748 <ocrypto_mod_p256_sqr>
   24ebe:	a910      	add	r1, sp, #64	; 0x40
   24ec0:	4608      	mov	r0, r1
   24ec2:	f7db fc41 	bl	748 <ocrypto_mod_p256_sqr>
   24ec6:	3c01      	subs	r4, #1
   24ec8:	a910      	add	r1, sp, #64	; 0x40
   24eca:	d1f5      	bne.n	24eb8 <ocrypto_mod_p256_inv+0xd4>
   24ecc:	462a      	mov	r2, r5
   24ece:	4608      	mov	r0, r1
   24ed0:	f7db fc22 	bl	718 <ocrypto_mod_p256_mul>
   24ed4:	2440      	movs	r4, #64	; 0x40
   24ed6:	a910      	add	r1, sp, #64	; 0x40
   24ed8:	4608      	mov	r0, r1
   24eda:	f7db fc35 	bl	748 <ocrypto_mod_p256_sqr>
   24ede:	a910      	add	r1, sp, #64	; 0x40
   24ee0:	4608      	mov	r0, r1
   24ee2:	f7db fc31 	bl	748 <ocrypto_mod_p256_sqr>
   24ee6:	3c01      	subs	r4, #1
   24ee8:	d1f5      	bne.n	24ed6 <ocrypto_mod_p256_inv+0xf2>
   24eea:	a910      	add	r1, sp, #64	; 0x40
   24eec:	466a      	mov	r2, sp
   24eee:	4608      	mov	r0, r1
   24ef0:	f7db fc12 	bl	718 <ocrypto_mod_p256_mul>
   24ef4:	2410      	movs	r4, #16
   24ef6:	a910      	add	r1, sp, #64	; 0x40
   24ef8:	4608      	mov	r0, r1
   24efa:	f7db fc25 	bl	748 <ocrypto_mod_p256_sqr>
   24efe:	a910      	add	r1, sp, #64	; 0x40
   24f00:	4608      	mov	r0, r1
   24f02:	f7db fc21 	bl	748 <ocrypto_mod_p256_sqr>
   24f06:	3c01      	subs	r4, #1
   24f08:	d1f5      	bne.n	24ef6 <ocrypto_mod_p256_inv+0x112>
   24f0a:	a910      	add	r1, sp, #64	; 0x40
   24f0c:	466a      	mov	r2, sp
   24f0e:	4608      	mov	r0, r1
   24f10:	f7db fc02 	bl	718 <ocrypto_mod_p256_mul>
   24f14:	2410      	movs	r4, #16
   24f16:	a910      	add	r1, sp, #64	; 0x40
   24f18:	4608      	mov	r0, r1
   24f1a:	f7db fc15 	bl	748 <ocrypto_mod_p256_sqr>
   24f1e:	a910      	add	r1, sp, #64	; 0x40
   24f20:	4608      	mov	r0, r1
   24f22:	f7db fc11 	bl	748 <ocrypto_mod_p256_sqr>
   24f26:	3c01      	subs	r4, #1
   24f28:	d1f5      	bne.n	24f16 <ocrypto_mod_p256_inv+0x132>
   24f2a:	a910      	add	r1, sp, #64	; 0x40
   24f2c:	aa08      	add	r2, sp, #32
   24f2e:	4608      	mov	r0, r1
   24f30:	f7db fbf2 	bl	718 <ocrypto_mod_p256_mul>
   24f34:	462a      	mov	r2, r5
   24f36:	a910      	add	r1, sp, #64	; 0x40
   24f38:	4630      	mov	r0, r6
   24f3a:	f7db fbed 	bl	718 <ocrypto_mod_p256_mul>
   24f3e:	b018      	add	sp, #96	; 0x60
   24f40:	bd70      	pop	{r4, r5, r6, pc}
   24f42:	bf00      	nop

00024f44 <write_without_rsp_vnd>:
{
   24f44:	b570      	push	{r4, r5, r6, lr}
   24f46:	461c      	mov	r4, r3
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   24f48:	f89d 3014 	ldrb.w	r3, [sp, #20]
{
   24f4c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   24f50:	460d      	mov	r5, r1
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   24f52:	079b      	lsls	r3, r3, #30
	uint8_t *value = attr->user_data;
   24f54:	68ee      	ldr	r6, [r5, #12]
{
   24f56:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   24f58:	d50a      	bpl.n	24f70 <write_without_rsp_vnd+0x2c>
	if (offset + len > VND_MAX_LEN) {
   24f5a:	1905      	adds	r5, r0, r4
   24f5c:	2d14      	cmp	r5, #20
   24f5e:	dc0a      	bgt.n	24f76 <write_without_rsp_vnd+0x32>
	memcpy(value + offset, buf, len);
   24f60:	4622      	mov	r2, r4
   24f62:	4430      	add	r0, r6
   24f64:	f001 fe42 	bl	26bec <memcpy>
	value[offset + len] = 0;
   24f68:	2300      	movs	r3, #0
   24f6a:	5573      	strb	r3, [r6, r5]
}
   24f6c:	4620      	mov	r0, r4
   24f6e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   24f70:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   24f74:	e7fa      	b.n	24f6c <write_without_rsp_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24f76:	f06f 0406 	mvn.w	r4, #6
   24f7a:	e7f7      	b.n	24f6c <write_without_rsp_vnd+0x28>

00024f7c <write_signed>:
{
   24f7c:	b538      	push	{r3, r4, r5, lr}
   24f7e:	460c      	mov	r4, r1
   24f80:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   24f84:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   24f86:	461c      	mov	r4, r3
   24f88:	18c3      	adds	r3, r0, r3
   24f8a:	2b04      	cmp	r3, #4
{
   24f8c:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   24f8e:	dc05      	bgt.n	24f9c <write_signed+0x20>
	memcpy(value + offset, buf, len);
   24f90:	4622      	mov	r2, r4
   24f92:	4428      	add	r0, r5
   24f94:	f001 fe2a 	bl	26bec <memcpy>
}
   24f98:	4620      	mov	r0, r4
   24f9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24f9c:	f06f 0406 	mvn.w	r4, #6
   24fa0:	e7fa      	b.n	24f98 <write_signed+0x1c>

00024fa2 <write_long_vnd>:
{
   24fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24fa4:	461c      	mov	r4, r3
   24fa6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   24faa:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   24fae:	f013 0501 	ands.w	r5, r3, #1
{
   24fb2:	460e      	mov	r6, r1
   24fb4:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   24fb6:	d10a      	bne.n	24fce <write_long_vnd+0x2c>
	if (offset + len > VND_LONG_MAX_LEN) {
   24fb8:	1907      	adds	r7, r0, r4
   24fba:	2f4a      	cmp	r7, #74	; 0x4a
   24fbc:	dc09      	bgt.n	24fd2 <write_long_vnd+0x30>
	uint8_t *value = attr->user_data;
   24fbe:	68f6      	ldr	r6, [r6, #12]
	memcpy(value + offset, buf, len);
   24fc0:	4622      	mov	r2, r4
   24fc2:	4430      	add	r0, r6
   24fc4:	f001 fe12 	bl	26bec <memcpy>
	value[offset + len] = 0;
   24fc8:	55f5      	strb	r5, [r6, r7]
}
   24fca:	4620      	mov	r0, r4
   24fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   24fce:	2400      	movs	r4, #0
   24fd0:	e7fb      	b.n	24fca <write_long_vnd+0x28>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24fd2:	f06f 0406 	mvn.w	r4, #6
   24fd6:	e7f8      	b.n	24fca <write_long_vnd+0x28>

00024fd8 <write_vnd>:
{
   24fd8:	b570      	push	{r4, r5, r6, lr}
   24fda:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   24fde:	460c      	mov	r4, r1
	if (offset + len > VND_MAX_LEN) {
   24fe0:	18c5      	adds	r5, r0, r3
   24fe2:	2d14      	cmp	r5, #20
	uint8_t *value = attr->user_data;
   24fe4:	68e6      	ldr	r6, [r4, #12]
{
   24fe6:	4611      	mov	r1, r2
	if (offset + len > VND_MAX_LEN) {
   24fe8:	461c      	mov	r4, r3
   24fea:	dc07      	bgt.n	24ffc <write_vnd+0x24>
	memcpy(value + offset, buf, len);
   24fec:	461a      	mov	r2, r3
   24fee:	4430      	add	r0, r6
   24ff0:	f001 fdfc 	bl	26bec <memcpy>
	value[offset + len] = 0;
   24ff4:	2300      	movs	r3, #0
   24ff6:	5573      	strb	r3, [r6, r5]
}
   24ff8:	4620      	mov	r0, r4
   24ffa:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24ffc:	f06f 0406 	mvn.w	r4, #6
   25000:	e7fa      	b.n	24ff8 <write_vnd+0x20>

00025002 <read_signed>:
{
   25002:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   25004:	2404      	movs	r4, #4
   25006:	9402      	str	r4, [sp, #8]
   25008:	68cc      	ldr	r4, [r1, #12]
   2500a:	9401      	str	r4, [sp, #4]
   2500c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   25010:	9400      	str	r4, [sp, #0]
   25012:	f003 fa5d 	bl	284d0 <bt_gatt_attr_read>
}
   25016:	b004      	add	sp, #16
   25018:	bd10      	pop	{r4, pc}

0002501a <read_vnd>:
{
   2501a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   2501e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   25022:	4605      	mov	r5, r0
				 strlen(value));
   25024:	4640      	mov	r0, r8
{
   25026:	461f      	mov	r7, r3
   25028:	460c      	mov	r4, r1
   2502a:	4616      	mov	r6, r2
				 strlen(value));
   2502c:	f001 fd9e 	bl	26b6c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   25030:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   25034:	9300      	str	r3, [sp, #0]
   25036:	b280      	uxth	r0, r0
   25038:	e9cd 8001 	strd	r8, r0, [sp, #4]
   2503c:	463b      	mov	r3, r7
   2503e:	4632      	mov	r2, r6
   25040:	4621      	mov	r1, r4
   25042:	4628      	mov	r0, r5
   25044:	f003 fa44 	bl	284d0 <bt_gatt_attr_read>
}
   25048:	b004      	add	sp, #16
   2504a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002504e <ct_ccc_cfg_changed>:
}
   2504e:	4770      	bx	lr

00025050 <read_ct>:
{
   25050:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   25052:	240a      	movs	r4, #10
   25054:	9402      	str	r4, [sp, #8]
   25056:	68cc      	ldr	r4, [r1, #12]
   25058:	9401      	str	r4, [sp, #4]
   2505a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   2505e:	9400      	str	r4, [sp, #0]
   25060:	f003 fa36 	bl	284d0 <bt_gatt_attr_read>
}
   25064:	b004      	add	sp, #16
   25066:	bd10      	pop	{r4, pc}

00025068 <cbpprintf_external>:
{
   25068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2506c:	4606      	mov	r6, r0
   2506e:	460d      	mov	r5, r1
   25070:	4617      	mov	r7, r2
	if (buf == NULL) {
   25072:	4698      	mov	r8, r3
   25074:	b32b      	cbz	r3, 250c2 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   25076:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2507a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2507e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   25080:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   25082:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   25086:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2508a:	441c      	add	r4, r3
   2508c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2508e:	f04f 0a00 	mov.w	sl, #0
   25092:	45ca      	cmp	sl, r9
   25094:	d309      	bcc.n	250aa <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   25096:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2509a:	f108 0308 	add.w	r3, r8, #8
   2509e:	4639      	mov	r1, r7
   250a0:	4630      	mov	r0, r6
   250a2:	46ac      	mov	ip, r5
}
   250a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   250a8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   250aa:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   250ae:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   250b2:	4620      	mov	r0, r4
   250b4:	f001 fd5a 	bl	26b6c <strlen>
   250b8:	3001      	adds	r0, #1
   250ba:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   250bc:	f10a 0a01 	add.w	sl, sl, #1
   250c0:	e7e7      	b.n	25092 <cbpprintf_external+0x2a>
}
   250c2:	f06f 0015 	mvn.w	r0, #21
   250c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000250ca <is_ptr>:
{
   250ca:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   250cc:	2500      	movs	r5, #0
{
   250ce:	4602      	mov	r2, r0
	bool mod = false;
   250d0:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   250d2:	4614      	mov	r4, r2
   250d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   250d8:	b90b      	cbnz	r3, 250de <is_ptr+0x14>
					return false;
   250da:	4618      	mov	r0, r3
   250dc:	e009      	b.n	250f2 <is_ptr+0x28>
		if (mod) {
   250de:	b198      	cbz	r0, 25108 <is_ptr+0x3e>
			if (cnt == n) {
   250e0:	428d      	cmp	r5, r1
   250e2:	d107      	bne.n	250f4 <is_ptr+0x2a>
				if (c == 'p') {
   250e4:	2b70      	cmp	r3, #112	; 0x70
   250e6:	d004      	beq.n	250f2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   250e8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   250ec:	2a3a      	cmp	r2, #58	; 0x3a
   250ee:	d80b      	bhi.n	25108 <is_ptr+0x3e>
					return false;
   250f0:	2000      	movs	r0, #0
}
   250f2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   250f4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   250f8:	2e3a      	cmp	r6, #58	; 0x3a
   250fa:	d805      	bhi.n	25108 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   250fc:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   250fe:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   25100:	1c94      	adds	r4, r2, #2
   25102:	2b00      	cmp	r3, #0
   25104:	d0e9      	beq.n	250da <is_ptr+0x10>
   25106:	2000      	movs	r0, #0
		if (c == '%') {
   25108:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   2510a:	bf08      	it	eq
   2510c:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   25110:	4622      	mov	r2, r4
   25112:	e7de      	b.n	250d2 <is_ptr+0x8>

00025114 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   25114:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   25116:	2364      	movs	r3, #100	; 0x64
{
   25118:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   2511a:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   2511c:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   2511e:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   25120:	b969      	cbnz	r1, 2513e <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   25122:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   25124:	429a      	cmp	r2, r3
   25126:	fbb2 f4f3 	udiv	r4, r2, r3
   2512a:	d20c      	bcs.n	25146 <u8_to_dec+0x32>
   2512c:	2b01      	cmp	r3, #1
   2512e:	d00a      	beq.n	25146 <u8_to_dec+0x32>
   25130:	b948      	cbnz	r0, 25146 <u8_to_dec+0x32>
		value -= digit * divisor;
   25132:	fb03 2214 	mls	r2, r3, r4, r2
   25136:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   25138:	240a      	movs	r4, #10
   2513a:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   2513e:	3e01      	subs	r6, #1
   25140:	d1f0      	bne.n	25124 <u8_to_dec+0x10>
		*buf = '\0';
   25142:	702e      	strb	r6, [r5, #0]
	return num_digits;
   25144:	e7ed      	b.n	25122 <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   25146:	3430      	adds	r4, #48	; 0x30
   25148:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   2514c:	fbb2 f4f3 	udiv	r4, r2, r3
   25150:	3901      	subs	r1, #1
   25152:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   25156:	3001      	adds	r0, #1
		divisor /= 10;
   25158:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   2515c:	b2c9      	uxtb	r1, r1
			num_digits++;
   2515e:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   25160:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   25162:	b2db      	uxtb	r3, r3
   25164:	e7dc      	b.n	25120 <u8_to_dec+0xc>

00025166 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   25166:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2516a:	b2db      	uxtb	r3, r3
   2516c:	2b09      	cmp	r3, #9
   2516e:	d802      	bhi.n	25176 <char2hex+0x10>
		*x = c - '0';
   25170:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   25172:	2000      	movs	r0, #0
   25174:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   25176:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2517a:	2b05      	cmp	r3, #5
   2517c:	d802      	bhi.n	25184 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2517e:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   25180:	b2c3      	uxtb	r3, r0
   25182:	e7f5      	b.n	25170 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   25184:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   25188:	2b05      	cmp	r3, #5
   2518a:	d801      	bhi.n	25190 <char2hex+0x2a>
		*x = c - 'A' + 10;
   2518c:	3837      	subs	r0, #55	; 0x37
   2518e:	e7f7      	b.n	25180 <char2hex+0x1a>
		return -EINVAL;
   25190:	f06f 0015 	mvn.w	r0, #21
}
   25194:	4770      	bx	lr

00025196 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   25196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25198:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2519a:	f001 0001 	and.w	r0, r1, #1
   2519e:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   251a2:	429e      	cmp	r6, r3
   251a4:	ea4f 0751 	mov.w	r7, r1, lsr #1
   251a8:	d903      	bls.n	251b2 <hex2bin+0x1c>
		return 0;
   251aa:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   251ac:	4630      	mov	r0, r6
   251ae:	b003      	add	sp, #12
   251b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   251b2:	b158      	cbz	r0, 251cc <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   251b4:	7828      	ldrb	r0, [r5, #0]
   251b6:	f10d 0107 	add.w	r1, sp, #7
   251ba:	f7ff ffd4 	bl	25166 <char2hex>
   251be:	2800      	cmp	r0, #0
   251c0:	dbf3      	blt.n	251aa <hex2bin+0x14>
		buf[0] = dec;
   251c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   251c6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   251ca:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   251cc:	3501      	adds	r5, #1
   251ce:	4417      	add	r7, r2
   251d0:	42ba      	cmp	r2, r7
   251d2:	d0eb      	beq.n	251ac <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   251d4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   251d8:	f10d 0107 	add.w	r1, sp, #7
   251dc:	f7ff ffc3 	bl	25166 <char2hex>
   251e0:	2800      	cmp	r0, #0
   251e2:	dbe2      	blt.n	251aa <hex2bin+0x14>
		buf[i] = dec << 4;
   251e4:	f89d 4007 	ldrb.w	r4, [sp, #7]
   251e8:	0124      	lsls	r4, r4, #4
   251ea:	b2e4      	uxtb	r4, r4
   251ec:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   251ee:	f815 0b02 	ldrb.w	r0, [r5], #2
   251f2:	f7ff ffb8 	bl	25166 <char2hex>
   251f6:	2800      	cmp	r0, #0
   251f8:	dbd7      	blt.n	251aa <hex2bin+0x14>
		buf[i] += dec;
   251fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   251fe:	441c      	add	r4, r3
   25200:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   25204:	e7e4      	b.n	251d0 <hex2bin+0x3a>

00025206 <arch_printk_char_out>:
}
   25206:	2000      	movs	r0, #0
   25208:	4770      	bx	lr

0002520a <str_out>:
{
   2520a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2520c:	688a      	ldr	r2, [r1, #8]
   2520e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   25210:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25212:	b114      	cbz	r4, 2521a <str_out+0x10>
   25214:	684b      	ldr	r3, [r1, #4]
   25216:	4293      	cmp	r3, r2
   25218:	dc01      	bgt.n	2521e <str_out+0x14>
		ctx->count++;
   2521a:	608d      	str	r5, [r1, #8]
}
   2521c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2521e:	3b01      	subs	r3, #1
   25220:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   25222:	bf08      	it	eq
   25224:	2200      	moveq	r2, #0
   25226:	608d      	str	r5, [r1, #8]
   25228:	bf0c      	ite	eq
   2522a:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2522c:	54a0      	strbne	r0, [r4, r2]
   2522e:	e7f5      	b.n	2521c <str_out+0x12>

00025230 <vprintk>:
		z_log_vprintk(fmt, ap);
   25230:	f001 b805 	b.w	2623e <z_log_vprintk>

00025234 <printk>:
{
   25234:	b40f      	push	{r0, r1, r2, r3}
   25236:	b507      	push	{r0, r1, r2, lr}
   25238:	a904      	add	r1, sp, #16
   2523a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2523e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   25240:	f000 fffd 	bl	2623e <z_log_vprintk>
}
   25244:	b003      	add	sp, #12
   25246:	f85d eb04 	ldr.w	lr, [sp], #4
   2524a:	b004      	add	sp, #16
   2524c:	4770      	bx	lr

0002524e <snprintk>:
{
   2524e:	b40c      	push	{r2, r3}
   25250:	b507      	push	{r0, r1, r2, lr}
   25252:	ab04      	add	r3, sp, #16
   25254:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25258:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2525a:	f7ed f851 	bl	12300 <vsnprintk>
}
   2525e:	b003      	add	sp, #12
   25260:	f85d eb04 	ldr.w	lr, [sp], #4
   25264:	b002      	add	sp, #8
   25266:	4770      	bx	lr

00025268 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25268:	4604      	mov	r4, r0
   2526a:	b508      	push	{r3, lr}
   2526c:	4608      	mov	r0, r1
   2526e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25270:	461a      	mov	r2, r3
   25272:	47a0      	blx	r4
	return z_impl_z_current_get();
   25274:	f7fe ffe2 	bl	2423c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   25278:	f7f0 f9a2 	bl	155c0 <z_impl_k_thread_abort>

0002527c <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2527c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   25280:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   25282:	0840      	lsrs	r0, r0, #1
   25284:	4770      	bx	lr

00025286 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   25286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25288:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2528a:	f7ff fff7 	bl	2527c <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2528e:	fab0 f080 	clz	r0, r0
   25292:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25296:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2529a:	00ca      	lsls	r2, r1, #3
   2529c:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   252a0:	1d17      	adds	r7, r2, #4
{
   252a2:	460c      	mov	r4, r1
   252a4:	3206      	adds	r2, #6
   252a6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   252a8:	b956      	cbnz	r6, 252c0 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   252aa:	2101      	movs	r1, #1
   252ac:	fa01 f000 	lsl.w	r0, r1, r0
   252b0:	68d9      	ldr	r1, [r3, #12]
   252b2:	4301      	orrs	r1, r0
   252b4:	60d9      	str	r1, [r3, #12]
		b->next = c;
   252b6:	f8cc 4010 	str.w	r4, [ip, #16]
   252ba:	53dd      	strh	r5, [r3, r7]
   252bc:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   252be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   252c0:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   252c2:	3104      	adds	r1, #4
   252c4:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   252c6:	53d8      	strh	r0, [r3, r7]
   252c8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   252cc:	529e      	strh	r6, [r3, r2]
   252ce:	80c5      	strh	r5, [r0, #6]
   252d0:	525d      	strh	r5, [r3, r1]
   252d2:	e7f4      	b.n	252be <free_list_add+0x38>

000252d4 <free_list_remove_bidx>:
{
   252d4:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   252d6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   252da:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   252dc:	4299      	cmp	r1, r3
   252de:	f102 0104 	add.w	r1, r2, #4
   252e2:	d10a      	bne.n	252fa <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   252e4:	2301      	movs	r3, #1
   252e6:	fa03 f202 	lsl.w	r2, r3, r2
   252ea:	68c3      	ldr	r3, [r0, #12]
   252ec:	ea23 0302 	bic.w	r3, r3, r2
   252f0:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   252f2:	2300      	movs	r3, #0
   252f4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   252f8:	bd10      	pop	{r4, pc}
   252fa:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   252fc:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25300:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25304:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25308:	80cb      	strh	r3, [r1, #6]
   2530a:	8082      	strh	r2, [r0, #4]
}
   2530c:	e7f4      	b.n	252f8 <free_list_remove_bidx+0x24>

0002530e <free_list_remove>:
{
   2530e:	b508      	push	{r3, lr}
   25310:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25312:	f7ff ffb3 	bl	2527c <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25316:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2531a:	f1c2 021f 	rsb	r2, r2, #31
   2531e:	4618      	mov	r0, r3
}
   25320:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25324:	f7ff bfd6 	b.w	252d4 <free_list_remove_bidx>

00025328 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   25328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2532c:	fab1 f581 	clz	r5, r1
   25330:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   25334:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   25338:	4603      	mov	r3, r0
	if (b->next) {
   2533a:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2533e:	460e      	mov	r6, r1
	if (b->next) {
   25340:	b1c2      	cbz	r2, 25374 <alloc_chunk+0x4c>
   25342:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   25344:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   25348:	4618      	mov	r0, r3
   2534a:	4621      	mov	r1, r4
   2534c:	f7ff ff96 	bl	2527c <chunk_size>
   25350:	42b0      	cmp	r0, r6
   25352:	d306      	bcc.n	25362 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   25354:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   25356:	4618      	mov	r0, r3
   25358:	f7ff ffbc 	bl	252d4 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2535c:	4620      	mov	r0, r4
   2535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   25362:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   25366:	3f01      	subs	r7, #1
   25368:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   2536a:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   2536e:	d001      	beq.n	25374 <alloc_chunk+0x4c>
   25370:	4282      	cmp	r2, r0
   25372:	d1e7      	bne.n	25344 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   25374:	f1c5 0220 	rsb	r2, r5, #32
   25378:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2537c:	4094      	lsls	r4, r2
   2537e:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   25380:	4014      	ands	r4, r2
   25382:	d0eb      	beq.n	2535c <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   25384:	fa94 f2a4 	rbit	r2, r4
   25388:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2538c:	1d11      	adds	r1, r2, #4
   2538e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25392:	4621      	mov	r1, r4
   25394:	e7df      	b.n	25356 <alloc_chunk+0x2e>

00025396 <merge_chunks>:
{
   25396:	b538      	push	{r3, r4, r5, lr}
   25398:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2539a:	f7ff ff6f 	bl	2527c <chunk_size>
{
   2539e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   253a0:	4604      	mov	r4, r0
   253a2:	4611      	mov	r1, r2
   253a4:	4618      	mov	r0, r3
   253a6:	f7ff ff69 	bl	2527c <chunk_size>
		((uint16_t *)cmem)[f] = val;
   253aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   253ae:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   253b0:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   253b2:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   253b4:	4618      	mov	r0, r3
   253b6:	f7ff ff61 	bl	2527c <chunk_size>
	void *cmem = &buf[c];
   253ba:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   253bc:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   253c0:	bd38      	pop	{r3, r4, r5, pc}

000253c2 <split_chunks>:
{
   253c2:	b538      	push	{r3, r4, r5, lr}
   253c4:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   253c6:	f7ff ff59 	bl	2527c <chunk_size>
{
   253ca:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   253cc:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   253ce:	1a51      	subs	r1, r2, r1
   253d0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   253d4:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   253d6:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   253d8:	8060      	strh	r0, [r4, #2]
   253da:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   253de:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   253e0:	8044      	strh	r4, [r0, #2]
   253e2:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   253e6:	4618      	mov	r0, r3
   253e8:	4611      	mov	r1, r2
   253ea:	f7ff ff47 	bl	2527c <chunk_size>
	void *cmem = &buf[c];
   253ee:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   253f0:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   253f4:	bd38      	pop	{r3, r4, r5, pc}

000253f6 <free_chunk>:
{
   253f6:	b538      	push	{r3, r4, r5, lr}
   253f8:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   253fa:	f7ff ff3f 	bl	2527c <chunk_size>
   253fe:	460c      	mov	r4, r1
   25400:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25402:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25406:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25408:	07da      	lsls	r2, r3, #31
   2540a:	d40a      	bmi.n	25422 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2540c:	4628      	mov	r0, r5
   2540e:	f7ff ff7e 	bl	2530e <free_list_remove>
	return c + chunk_size(h, c);
   25412:	4621      	mov	r1, r4
   25414:	4628      	mov	r0, r5
   25416:	f7ff ff31 	bl	2527c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2541a:	1822      	adds	r2, r4, r0
   2541c:	4628      	mov	r0, r5
   2541e:	f7ff ffba 	bl	25396 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25422:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25426:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25428:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2542c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2542e:	07db      	lsls	r3, r3, #31
   25430:	d40c      	bmi.n	2544c <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   25432:	4628      	mov	r0, r5
   25434:	f7ff ff6b 	bl	2530e <free_list_remove>
		return ((uint16_t *)cmem)[f];
   25438:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2543c:	4622      	mov	r2, r4
   2543e:	1a61      	subs	r1, r4, r1
   25440:	4628      	mov	r0, r5
   25442:	f7ff ffa8 	bl	25396 <merge_chunks>
   25446:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2544a:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2544c:	4621      	mov	r1, r4
   2544e:	4628      	mov	r0, r5
}
   25450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   25454:	f7ff bf17 	b.w	25286 <free_list_add>

00025458 <sys_heap_free>:
	if (mem == NULL) {
   25458:	b161      	cbz	r1, 25474 <sys_heap_free+0x1c>
   2545a:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2545c:	3904      	subs	r1, #4
   2545e:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   25460:	f021 0307 	bic.w	r3, r1, #7
   25464:	4403      	add	r3, r0
	free_chunk(h, c);
   25466:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   25468:	885a      	ldrh	r2, [r3, #2]
   2546a:	f022 0201 	bic.w	r2, r2, #1
   2546e:	805a      	strh	r2, [r3, #2]
   25470:	f7ff bfc1 	b.w	253f6 <free_chunk>
}
   25474:	4770      	bx	lr

00025476 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   25476:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   25478:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2547a:	b909      	cbnz	r1, 25480 <sys_heap_alloc+0xa>
		return NULL;
   2547c:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   2547e:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   25480:	68ab      	ldr	r3, [r5, #8]
   25482:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   25486:	d9f9      	bls.n	2547c <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25488:	310b      	adds	r1, #11
   2548a:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2548c:	4621      	mov	r1, r4
   2548e:	4628      	mov	r0, r5
   25490:	f7ff ff4a 	bl	25328 <alloc_chunk>
	if (c == 0U) {
   25494:	4606      	mov	r6, r0
   25496:	2800      	cmp	r0, #0
   25498:	d0f0      	beq.n	2547c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2549a:	4601      	mov	r1, r0
   2549c:	4628      	mov	r0, r5
   2549e:	f7ff feed 	bl	2527c <chunk_size>
   254a2:	42a0      	cmp	r0, r4
   254a4:	d907      	bls.n	254b6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   254a6:	1932      	adds	r2, r6, r4
   254a8:	4628      	mov	r0, r5
   254aa:	f7ff ff8a 	bl	253c2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   254ae:	4611      	mov	r1, r2
   254b0:	4628      	mov	r0, r5
   254b2:	f7ff fee8 	bl	25286 <free_list_add>
	void *cmem = &buf[c];
   254b6:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   254ba:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   254bc:	8853      	ldrh	r3, [r2, #2]
   254be:	f043 0301 	orr.w	r3, r3, #1
   254c2:	8053      	strh	r3, [r2, #2]
   254c4:	3004      	adds	r0, #4
	return mem;
   254c6:	e7da      	b.n	2547e <sys_heap_alloc+0x8>

000254c8 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   254c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   254cc:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   254d0:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   254d4:	6806      	ldr	r6, [r0, #0]
{
   254d6:	460f      	mov	r7, r1
   254d8:	4614      	mov	r4, r2
	if (align != rew) {
   254da:	d00c      	beq.n	254f6 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   254dc:	424b      	negs	r3, r1
   254de:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   254e0:	2b04      	cmp	r3, #4
   254e2:	461a      	mov	r2, r3
   254e4:	464f      	mov	r7, r9
   254e6:	bf28      	it	cs
   254e8:	2204      	movcs	r2, #4
	rew = align & -align;
   254ea:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   254ec:	b964      	cbnz	r4, 25508 <sys_heap_aligned_alloc+0x40>
		return NULL;
   254ee:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   254f0:	4628      	mov	r0, r5
   254f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   254f6:	2904      	cmp	r1, #4
   254f8:	d804      	bhi.n	25504 <sys_heap_aligned_alloc+0x3c>
}
   254fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   254fe:	4611      	mov	r1, r2
   25500:	f7ff bfb9 	b.w	25476 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   25504:	2204      	movs	r2, #4
   25506:	e7f1      	b.n	254ec <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   25508:	68b3      	ldr	r3, [r6, #8]
   2550a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2550e:	d9ee      	bls.n	254ee <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25510:	f104 010b 	add.w	r1, r4, #11
   25514:	4439      	add	r1, r7
   25516:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   25518:	08c9      	lsrs	r1, r1, #3
   2551a:	4630      	mov	r0, r6
   2551c:	f7ff ff04 	bl	25328 <alloc_chunk>
	if (c0 == 0) {
   25520:	4680      	mov	r8, r0
   25522:	2800      	cmp	r0, #0
   25524:	d0e3      	beq.n	254ee <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25526:	f109 0504 	add.w	r5, r9, #4
   2552a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2552e:	1e7b      	subs	r3, r7, #1
   25530:	4435      	add	r5, r6
   25532:	441d      	add	r5, r3
   25534:	427f      	negs	r7, r7
   25536:	403d      	ands	r5, r7
   25538:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2553c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2553e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25540:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   25542:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   25544:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   25548:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2554a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2554e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   25552:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   25556:	d208      	bcs.n	2556a <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   25558:	4601      	mov	r1, r0
   2555a:	463a      	mov	r2, r7
   2555c:	4630      	mov	r0, r6
   2555e:	f7ff ff30 	bl	253c2 <split_chunks>
		free_list_add(h, c0);
   25562:	4641      	mov	r1, r8
   25564:	4630      	mov	r0, r6
   25566:	f7ff fe8e 	bl	25286 <free_list_add>
	return c + chunk_size(h, c);
   2556a:	4639      	mov	r1, r7
   2556c:	4630      	mov	r0, r6
   2556e:	f7ff fe85 	bl	2527c <chunk_size>
   25572:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   25574:	4284      	cmp	r4, r0
   25576:	d207      	bcs.n	25588 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   25578:	4630      	mov	r0, r6
   2557a:	4622      	mov	r2, r4
   2557c:	f7ff ff21 	bl	253c2 <split_chunks>
		free_list_add(h, c_end);
   25580:	4621      	mov	r1, r4
   25582:	4630      	mov	r0, r6
   25584:	f7ff fe7f 	bl	25286 <free_list_add>
	void *cmem = &buf[c];
   25588:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2558c:	8873      	ldrh	r3, [r6, #2]
   2558e:	f043 0301 	orr.w	r3, r3, #1
   25592:	8073      	strh	r3, [r6, #2]
   25594:	e7ac      	b.n	254f0 <sys_heap_aligned_alloc+0x28>

00025596 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25596:	3a04      	subs	r2, #4
{
   25598:	b4f0      	push	{r4, r5, r6, r7}
   2559a:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2559c:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2559e:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   255a0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   255a4:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   255a8:	1a0e      	subs	r6, r1, r0
   255aa:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   255ac:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   255ae:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   255b2:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   255b4:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   255b8:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   255ba:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   255bc:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   255be:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   255c2:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   255c4:	f1c2 0220 	rsb	r2, r2, #32
   255c8:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   255ca:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   255ce:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   255d2:	4294      	cmp	r4, r2
   255d4:	d1fb      	bne.n	255ce <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   255d6:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   255d8:	f042 0201 	orr.w	r2, r2, #1
   255dc:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   255de:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   255e2:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   255e4:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   255e6:	8007      	strh	r7, [r0, #0]
   255e8:	8065      	strh	r5, [r4, #2]
   255ea:	1984      	adds	r4, r0, r6
   255ec:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   255f0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   255f4:	8067      	strh	r7, [r4, #2]
   255f6:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   255f8:	885a      	ldrh	r2, [r3, #2]
   255fa:	f042 0201 	orr.w	r2, r2, #1
   255fe:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   25600:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   25602:	f7ff be40 	b.w	25286 <free_list_add>

00025606 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25606:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25608:	f013 0307 	ands.w	r3, r3, #7
   2560c:	d105      	bne.n	2561a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2560e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   25610:	2b00      	cmp	r3, #0
   25612:	bf0c      	ite	eq
   25614:	2000      	moveq	r0, #0
   25616:	2003      	movne	r0, #3
   25618:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2561a:	2b02      	cmp	r3, #2
   2561c:	d105      	bne.n	2562a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2561e:	8b40      	ldrh	r0, [r0, #26]
   25620:	fab0 f080 	clz	r0, r0
   25624:	0940      	lsrs	r0, r0, #5
   25626:	0080      	lsls	r0, r0, #2
   25628:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2562a:	2b01      	cmp	r3, #1
   2562c:	d105      	bne.n	2563a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2562e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   25630:	2b00      	cmp	r3, #0
   25632:	bf0c      	ite	eq
   25634:	2000      	moveq	r0, #0
   25636:	2005      	movne	r0, #5
   25638:	4770      	bx	lr
	int evt = EVT_NOP;
   2563a:	2000      	movs	r0, #0
}
   2563c:	4770      	bx	lr

0002563e <validate_args>:
{
   2563e:	b510      	push	{r4, lr}
   25640:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25642:	b100      	cbz	r0, 25646 <validate_args+0x8>
   25644:	b911      	cbnz	r1, 2564c <validate_args+0xe>
		return -EINVAL;
   25646:	f06f 0015 	mvn.w	r0, #21
}
   2564a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2564c:	1d08      	adds	r0, r1, #4
   2564e:	f000 f895 	bl	2577c <sys_notify_validate>
	if ((rv == 0)
   25652:	2800      	cmp	r0, #0
   25654:	d1f9      	bne.n	2564a <validate_args+0xc>
	    && ((cli->notify.flags
   25656:	68a3      	ldr	r3, [r4, #8]
   25658:	2b03      	cmp	r3, #3
   2565a:	d9f6      	bls.n	2564a <validate_args+0xc>
   2565c:	e7f3      	b.n	25646 <validate_args+0x8>

0002565e <notify_one>:
{
   2565e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25662:	460d      	mov	r5, r1
   25664:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25666:	4619      	mov	r1, r3
   25668:	1d28      	adds	r0, r5, #4
{
   2566a:	4690      	mov	r8, r2
   2566c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2566e:	f000 f899 	bl	257a4 <sys_notify_finalize>
	if (cb) {
   25672:	4604      	mov	r4, r0
   25674:	b138      	cbz	r0, 25686 <notify_one+0x28>
		cb(mgr, cli, state, res);
   25676:	4633      	mov	r3, r6
   25678:	4642      	mov	r2, r8
   2567a:	4629      	mov	r1, r5
   2567c:	4638      	mov	r0, r7
   2567e:	46a4      	mov	ip, r4
}
   25680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   25684:	4760      	bx	ip
}
   25686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002568a <transition_complete>:
{
   2568a:	b410      	push	{r4}
	__asm__ volatile(
   2568c:	f04f 0440 	mov.w	r4, #64	; 0x40
   25690:	f3ef 8211 	mrs	r2, BASEPRI
   25694:	f384 8812 	msr	BASEPRI_MAX, r4
   25698:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2569c:	6141      	str	r1, [r0, #20]
}
   2569e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   256a0:	2101      	movs	r1, #1
   256a2:	f7ec be43 	b.w	1232c <process_event>

000256a6 <onoff_manager_init>:
{
   256a6:	b538      	push	{r3, r4, r5, lr}
   256a8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   256aa:	4605      	mov	r5, r0
   256ac:	b158      	cbz	r0, 256c6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   256ae:	b151      	cbz	r1, 256c6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   256b0:	680b      	ldr	r3, [r1, #0]
   256b2:	b143      	cbz	r3, 256c6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   256b4:	684b      	ldr	r3, [r1, #4]
   256b6:	b133      	cbz	r3, 256c6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   256b8:	221c      	movs	r2, #28
   256ba:	2100      	movs	r1, #0
   256bc:	f001 faa1 	bl	26c02 <memset>
   256c0:	612c      	str	r4, [r5, #16]
	return 0;
   256c2:	2000      	movs	r0, #0
}
   256c4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   256c6:	f06f 0015 	mvn.w	r0, #21
   256ca:	e7fb      	b.n	256c4 <onoff_manager_init+0x1e>

000256cc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   256cc:	b570      	push	{r4, r5, r6, lr}
   256ce:	4605      	mov	r5, r0
   256d0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   256d2:	f7ff ffb4 	bl	2563e <validate_args>

	if (rv < 0) {
   256d6:	1e04      	subs	r4, r0, #0
   256d8:	db15      	blt.n	25706 <onoff_request+0x3a>
   256da:	f04f 0340 	mov.w	r3, #64	; 0x40
   256de:	f3ef 8211 	mrs	r2, BASEPRI
   256e2:	f383 8812 	msr	BASEPRI_MAX, r3
   256e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   256ea:	8b6b      	ldrh	r3, [r5, #26]
   256ec:	8b2c      	ldrh	r4, [r5, #24]
   256ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   256f2:	428b      	cmp	r3, r1
   256f4:	f004 0407 	and.w	r4, r4, #7
   256f8:	d107      	bne.n	2570a <onoff_request+0x3e>
	__asm__ volatile(
   256fa:	f382 8811 	msr	BASEPRI, r2
   256fe:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   25702:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   25706:	4620      	mov	r0, r4
   25708:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2570a:	2c02      	cmp	r4, #2
   2570c:	d10c      	bne.n	25728 <onoff_request+0x5c>
		mgr->refs += 1U;
   2570e:	3301      	adds	r3, #1
   25710:	836b      	strh	r3, [r5, #26]
   25712:	f382 8811 	msr	BASEPRI, r2
   25716:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2571a:	2300      	movs	r3, #0
   2571c:	4622      	mov	r2, r4
   2571e:	4631      	mov	r1, r6
   25720:	4628      	mov	r0, r5
   25722:	f7ff ff9c 	bl	2565e <notify_one>
   25726:	e7ee      	b.n	25706 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   25728:	2c06      	cmp	r4, #6
   2572a:	d814      	bhi.n	25756 <onoff_request+0x8a>
   2572c:	e8df f004 	tbb	[pc, r4]
   25730:	13131304 	.word	0x13131304
   25734:	1a04      	.short	0x1a04
   25736:	04          	.byte	0x04
   25737:	00          	.byte	0x00
	parent->next = child;
   25738:	2300      	movs	r3, #0
   2573a:	6033      	str	r3, [r6, #0]
	return list->tail;
   2573c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   2573e:	b93b      	cbnz	r3, 25750 <onoff_request+0x84>
	list->head = node;
   25740:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   25744:	b9ac      	cbnz	r4, 25772 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   25746:	2102      	movs	r1, #2
   25748:	4628      	mov	r0, r5
   2574a:	f7ec fdef 	bl	1232c <process_event>
   2574e:	e7da      	b.n	25706 <onoff_request+0x3a>
	parent->next = child;
   25750:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25752:	606e      	str	r6, [r5, #4]
}
   25754:	e7f6      	b.n	25744 <onoff_request+0x78>
   25756:	f382 8811 	msr	BASEPRI, r2
   2575a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   2575e:	f06f 0404 	mvn.w	r4, #4
   25762:	e7d0      	b.n	25706 <onoff_request+0x3a>
   25764:	f382 8811 	msr	BASEPRI, r2
   25768:	f3bf 8f6f 	isb	sy
   2576c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   25770:	e7c9      	b.n	25706 <onoff_request+0x3a>
   25772:	f382 8811 	msr	BASEPRI, r2
   25776:	f3bf 8f6f 	isb	sy
		if (notify) {
   2577a:	e7c4      	b.n	25706 <onoff_request+0x3a>

0002577c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2577c:	4603      	mov	r3, r0
   2577e:	b140      	cbz	r0, 25792 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25780:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25782:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25786:	2a02      	cmp	r2, #2
   25788:	d006      	beq.n	25798 <sys_notify_validate+0x1c>
   2578a:	2a03      	cmp	r2, #3
   2578c:	d004      	beq.n	25798 <sys_notify_validate+0x1c>
   2578e:	2a01      	cmp	r2, #1
   25790:	d005      	beq.n	2579e <sys_notify_validate+0x22>
   25792:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   25796:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25798:	681a      	ldr	r2, [r3, #0]
   2579a:	2a00      	cmp	r2, #0
   2579c:	d0f9      	beq.n	25792 <sys_notify_validate+0x16>
		notify->result = 0;
   2579e:	2000      	movs	r0, #0
   257a0:	6098      	str	r0, [r3, #8]
   257a2:	4770      	bx	lr

000257a4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   257a4:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   257a6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   257a8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   257aa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   257ae:	2a02      	cmp	r2, #2
{
   257b0:	4603      	mov	r3, r0
	switch (method) {
   257b2:	f04f 0400 	mov.w	r4, #0
   257b6:	d007      	beq.n	257c8 <sys_notify_finalize+0x24>
   257b8:	2a03      	cmp	r2, #3
   257ba:	d002      	beq.n	257c2 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   257bc:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   257be:	2000      	movs	r0, #0
   257c0:	e001      	b.n	257c6 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   257c2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   257c4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   257c6:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   257c8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   257ca:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   257cc:	2800      	cmp	r0, #0
   257ce:	d0f6      	beq.n	257be <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   257d0:	f7ff f804 	bl	247dc <z_impl_k_poll_signal_raise>
   257d4:	e7f3      	b.n	257be <sys_notify_finalize+0x1a>

000257d6 <encode_uint>:
{
   257d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257da:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   257dc:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   257de:	2b6f      	cmp	r3, #111	; 0x6f
{
   257e0:	4680      	mov	r8, r0
   257e2:	460f      	mov	r7, r1
   257e4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   257e6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   257ea:	d029      	beq.n	25840 <encode_uint+0x6a>
   257ec:	d824      	bhi.n	25838 <encode_uint+0x62>
		return 10;
   257ee:	2b58      	cmp	r3, #88	; 0x58
   257f0:	bf0c      	ite	eq
   257f2:	2610      	moveq	r6, #16
   257f4:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   257f6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   257fa:	4632      	mov	r2, r6
   257fc:	2300      	movs	r3, #0
   257fe:	4640      	mov	r0, r8
   25800:	4639      	mov	r1, r7
   25802:	f7da fc6d 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25806:	2a09      	cmp	r2, #9
   25808:	b2d4      	uxtb	r4, r2
   2580a:	d81e      	bhi.n	2584a <encode_uint+0x74>
   2580c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2580e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25810:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   25812:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   25816:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   2581a:	d301      	bcc.n	25820 <encode_uint+0x4a>
   2581c:	45d1      	cmp	r9, sl
   2581e:	d811      	bhi.n	25844 <encode_uint+0x6e>
	if (conv->flag_hash) {
   25820:	782b      	ldrb	r3, [r5, #0]
   25822:	069b      	lsls	r3, r3, #26
   25824:	d505      	bpl.n	25832 <encode_uint+0x5c>
		if (radix == 8) {
   25826:	2e08      	cmp	r6, #8
   25828:	d115      	bne.n	25856 <encode_uint+0x80>
			conv->altform_0 = true;
   2582a:	78ab      	ldrb	r3, [r5, #2]
   2582c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   25830:	70ab      	strb	r3, [r5, #2]
}
   25832:	4648      	mov	r0, r9
   25834:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   25838:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2583c:	2b70      	cmp	r3, #112	; 0x70
   2583e:	e7d7      	b.n	257f0 <encode_uint+0x1a>
	switch (specifier) {
   25840:	2608      	movs	r6, #8
   25842:	e7d8      	b.n	257f6 <encode_uint+0x20>
		value /= radix;
   25844:	4680      	mov	r8, r0
   25846:	460f      	mov	r7, r1
   25848:	e7d7      	b.n	257fa <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2584a:	f1bb 0f19 	cmp.w	fp, #25
   2584e:	bf94      	ite	ls
   25850:	3437      	addls	r4, #55	; 0x37
   25852:	3457      	addhi	r4, #87	; 0x57
   25854:	e7db      	b.n	2580e <encode_uint+0x38>
		} else if (radix == 16) {
   25856:	2e10      	cmp	r6, #16
   25858:	d1eb      	bne.n	25832 <encode_uint+0x5c>
			conv->altform_0c = true;
   2585a:	78ab      	ldrb	r3, [r5, #2]
   2585c:	f043 0310 	orr.w	r3, r3, #16
   25860:	e7e6      	b.n	25830 <encode_uint+0x5a>

00025862 <outs>:
{
   25862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25866:	4607      	mov	r7, r0
   25868:	4688      	mov	r8, r1
   2586a:	4615      	mov	r5, r2
   2586c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2586e:	4614      	mov	r4, r2
   25870:	42b4      	cmp	r4, r6
   25872:	d305      	bcc.n	25880 <outs+0x1e>
   25874:	b10e      	cbz	r6, 2587a <outs+0x18>
	return (int)count;
   25876:	1b60      	subs	r0, r4, r5
   25878:	e008      	b.n	2588c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2587a:	7823      	ldrb	r3, [r4, #0]
   2587c:	2b00      	cmp	r3, #0
   2587e:	d0fa      	beq.n	25876 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   25880:	f814 0b01 	ldrb.w	r0, [r4], #1
   25884:	4641      	mov	r1, r8
   25886:	47b8      	blx	r7
		if (rc < 0) {
   25888:	2800      	cmp	r0, #0
   2588a:	daf1      	bge.n	25870 <outs+0xe>
}
   2588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025890 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   25890:	b40f      	push	{r0, r1, r2, r3}
   25892:	b507      	push	{r0, r1, r2, lr}
   25894:	a904      	add	r1, sp, #16
   25896:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2589a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2589c:	f7ff fcc8 	bl	25230 <vprintk>

	va_end(ap);
}
   258a0:	b003      	add	sp, #12
   258a2:	f85d eb04 	ldr.w	lr, [sp], #4
   258a6:	b004      	add	sp, #16
   258a8:	4770      	bx	lr

000258aa <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   258aa:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   258ac:	6903      	ldr	r3, [r0, #16]
{
   258ae:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   258b0:	f013 0008 	ands.w	r0, r3, #8
   258b4:	d109      	bne.n	258ca <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   258b6:	6813      	ldr	r3, [r2, #0]
   258b8:	68d4      	ldr	r4, [r2, #12]
   258ba:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
   258bc:	bf97      	itett	ls
   258be:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   258c0:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   258c2:	1ad3      	subls	r3, r2, r3

	return true;
   258c4:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   258c6:	600b      	str	r3, [r1, #0]
}
   258c8:	bd10      	pop	{r4, pc}
   258ca:	2300      	movs	r3, #0
		return false;
   258cc:	4618      	mov	r0, r3
   258ce:	e7fa      	b.n	258c6 <free_space+0x1c>

000258d0 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   258d0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   258d2:	a901      	add	r1, sp, #4
{
   258d4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   258d6:	f7ff ffe8 	bl	258aa <free_space>
   258da:	b120      	cbz	r0, 258e6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   258dc:	9b01      	ldr	r3, [sp, #4]
   258de:	68e2      	ldr	r2, [r4, #12]
   258e0:	3b01      	subs	r3, #1
   258e2:	4413      	add	r3, r2
   258e4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   258e6:	6a20      	ldr	r0, [r4, #32]
   258e8:	9b01      	ldr	r3, [sp, #4]
   258ea:	1ac0      	subs	r0, r0, r3
}
   258ec:	3801      	subs	r0, #1
   258ee:	b002      	add	sp, #8
   258f0:	bd10      	pop	{r4, pc}

000258f2 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
   258f2:	b510      	push	{r4, lr}
   258f4:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   258f6:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   258f8:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   258fa:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   258fc:	07d2      	lsls	r2, r2, #31
   258fe:	d502      	bpl.n	25906 <idx_inc+0x14>
		return i & (buffer->size - 1);
   25900:	3b01      	subs	r3, #1
   25902:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   25904:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   25906:	4298      	cmp	r0, r3
   25908:	bf28      	it	cs
   2590a:	1ac0      	subcs	r0, r0, r3
   2590c:	e7fa      	b.n	25904 <idx_inc+0x12>

0002590e <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
   2590e:	b510      	push	{r4, lr}
   25910:	4604      	mov	r4, r0
   25912:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   25914:	68c1      	ldr	r1, [r0, #12]
   25916:	f7ff ffec 	bl	258f2 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   2591a:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   2591c:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2591e:	f023 0308 	bic.w	r3, r3, #8
   25922:	6123      	str	r3, [r4, #16]
}
   25924:	bd10      	pop	{r4, pc}

00025926 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   25926:	b538      	push	{r3, r4, r5, lr}
   25928:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2592a:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   2592c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2592e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   25930:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25934:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   25938:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2593a:	6801      	ldr	r1, [r0, #0]
   2593c:	462a      	mov	r2, r5
   2593e:	f7ff ffd8 	bl	258f2 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   25942:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25944:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25946:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   25948:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   2594a:	bf02      	ittt	eq
   2594c:	6923      	ldreq	r3, [r4, #16]
   2594e:	f043 0308 	orreq.w	r3, r3, #8
   25952:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25954:	462a      	mov	r2, r5
   25956:	4620      	mov	r0, r4
   25958:	f7ff ffcb 	bl	258f2 <idx_inc>
   2595c:	6060      	str	r0, [r4, #4]
}
   2595e:	bd38      	pop	{r3, r4, r5, pc}

00025960 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
   25960:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25964:	68c7      	ldr	r7, [r0, #12]
   25966:	69c6      	ldr	r6, [r0, #28]
{
   25968:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2596a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2596e:	f003 0303 	and.w	r3, r3, #3
   25972:	2b02      	cmp	r3, #2
{
   25974:	4604      	mov	r4, r0
   25976:	4688      	mov	r8, r1
   25978:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2597a:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2597e:	f04f 0300 	mov.w	r3, #0
   25982:	d009      	beq.n	25998 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
   25984:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   25986:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2598a:	6923      	ldr	r3, [r4, #16]
   2598c:	0799      	lsls	r1, r3, #30
   2598e:	d410      	bmi.n	259b2 <drop_item_locked+0x52>
		return false;
   25990:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
   25992:	b003      	add	sp, #12
   25994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   25998:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   2599c:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   2599e:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   259a0:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   259a4:	d0f1      	beq.n	2598a <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   259a6:	f7ff ffb2 	bl	2590e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   259aa:	68e3      	ldr	r3, [r4, #12]
   259ac:	60a3      	str	r3, [r4, #8]
		return true;
   259ae:	2001      	movs	r0, #1
   259b0:	e7ef      	b.n	25992 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   259b2:	69a3      	ldr	r3, [r4, #24]
   259b4:	4650      	mov	r0, sl
   259b6:	4798      	blx	r3
	return item->hdr.valid;
   259b8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   259bc:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   259be:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   259c0:	d5e6      	bpl.n	25990 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   259c2:	f013 0302 	ands.w	r3, r3, #2
   259c6:	d01d      	beq.n	25a04 <drop_item_locked+0xa4>
		if (free_wlen) {
   259c8:	f1b8 0f00 	cmp.w	r8, #0
   259cc:	d003      	beq.n	259d6 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   259ce:	4641      	mov	r1, r8
   259d0:	4620      	mov	r0, r4
   259d2:	f7ff ffa8 	bl	25926 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   259d6:	6861      	ldr	r1, [r4, #4]
   259d8:	462a      	mov	r2, r5
   259da:	4620      	mov	r0, r4
   259dc:	f7ff ff89 	bl	258f2 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   259e0:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   259e4:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   259e6:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   259e8:	d104      	bne.n	259f4 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   259ea:	462a      	mov	r2, r5
   259ec:	4620      	mov	r0, r4
   259ee:	f7ff ff80 	bl	258f2 <idx_inc>
   259f2:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   259f4:	68a3      	ldr	r3, [r4, #8]
   259f6:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   259f8:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   259fa:	6923      	ldr	r3, [r4, #16]
   259fc:	f043 0308 	orr.w	r3, r3, #8
   25a00:	6123      	str	r3, [r4, #16]
   25a02:	e7d4      	b.n	259ae <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   25a04:	4601      	mov	r1, r0
   25a06:	4620      	mov	r0, r4
   25a08:	9301      	str	r3, [sp, #4]
   25a0a:	f7ff ff80 	bl	2590e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   25a0e:	68e2      	ldr	r2, [r4, #12]
   25a10:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   25a12:	f1b8 0f00 	cmp.w	r8, #0
   25a16:	d004      	beq.n	25a22 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   25a18:	6821      	ldr	r1, [r4, #0]
   25a1a:	69e2      	ldr	r2, [r4, #28]
   25a1c:	9b01      	ldr	r3, [sp, #4]
   25a1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   25a22:	eb05 0208 	add.w	r2, r5, r8
   25a26:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   25a2a:	6821      	ldr	r1, [r4, #0]
   25a2c:	4620      	mov	r0, r4
   25a2e:	f7ff ff60 	bl	258f2 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   25a32:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   25a34:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   25a36:	f043 0308 	orr.w	r3, r3, #8
   25a3a:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   25a3c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   25a40:	f36f 0300 	bfc	r3, #0, #1
   25a44:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   25a48:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   25a4c:	e7af      	b.n	259ae <drop_item_locked+0x4e>

00025a4e <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
   25a4e:	b570      	push	{r4, r5, r6, lr}
   25a50:	4604      	mov	r4, r0
   25a52:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   25a54:	f7ff ff4d 	bl	258f2 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   25a58:	6823      	ldr	r3, [r4, #0]
   25a5a:	4283      	cmp	r3, r0
   25a5c:	d105      	bne.n	25a6a <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
   25a5e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   25a60:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   25a62:	f023 0308 	bic.w	r3, r3, #8
   25a66:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
   25a68:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   25a6a:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
   25a6c:	00ab      	lsls	r3, r5, #2
   25a6e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   25a72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   25a76:	4620      	mov	r0, r4
   25a78:	6861      	ldr	r1, [r4, #4]
   25a7a:	462a      	mov	r2, r5
   25a7c:	f7ff ff39 	bl	258f2 <idx_inc>
   25a80:	6060      	str	r0, [r4, #4]
   25a82:	e7f1      	b.n	25a68 <post_drop_action+0x1a>

00025a84 <max_utilization_update>:
{
   25a84:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25a86:	6903      	ldr	r3, [r0, #16]
   25a88:	075b      	lsls	r3, r3, #29
{
   25a8a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   25a8c:	d506      	bpl.n	25a9c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   25a8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   25a90:	f7ff ff1e 	bl	258d0 <get_usage>
   25a94:	4285      	cmp	r5, r0
   25a96:	bf2c      	ite	cs
   25a98:	6265      	strcs	r5, [r4, #36]	; 0x24
   25a9a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   25a9c:	bd38      	pop	{r3, r4, r5, pc}

00025a9e <mpsc_pbuf_init>:
{
   25a9e:	b538      	push	{r3, r4, r5, lr}
   25aa0:	460d      	mov	r5, r1
   25aa2:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   25aa4:	221c      	movs	r2, #28
   25aa6:	2100      	movs	r1, #0
   25aa8:	f001 f8ab 	bl	26c02 <memset>
	buffer->get_wlen = cfg->get_wlen;
   25aac:	68eb      	ldr	r3, [r5, #12]
   25aae:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   25ab0:	68ab      	ldr	r3, [r5, #8]
   25ab2:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   25ab4:	682b      	ldr	r3, [r5, #0]
   25ab6:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   25ab8:	686b      	ldr	r3, [r5, #4]
   25aba:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   25abc:	2200      	movs	r2, #0
   25abe:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   25ac0:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   25ac2:	b123      	cbz	r3, 25ace <mpsc_pbuf_init+0x30>
   25ac4:	1e59      	subs	r1, r3, #1
   25ac6:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   25ac8:	bf08      	it	eq
   25aca:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   25ace:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25ad0:	2201      	movs	r2, #1
   25ad2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25ad6:	2100      	movs	r1, #0
}
   25ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25adc:	f004 b8a9 	b.w	29c32 <z_impl_k_sem_init>

00025ae0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   25ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ae4:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
   25ae6:	2500      	movs	r5, #0
{
   25ae8:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   25aea:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
   25aec:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
   25aee:	428b      	cmp	r3, r1
{
   25af0:	4604      	mov	r4, r0
   25af2:	460e      	mov	r6, r1
   25af4:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
   25af6:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   25af8:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
   25afa:	d33a      	bcc.n	25b72 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
   25afc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b00:	f3ef 8b11 	mrs	fp, BASEPRI
   25b04:	f383 8812 	msr	BASEPRI_MAX, r3
   25b08:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
   25b0c:	9a05      	ldr	r2, [sp, #20]
   25b0e:	46d8      	mov	r8, fp
   25b10:	b12a      	cbz	r2, 25b1e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   25b12:	4629      	mov	r1, r5
   25b14:	4620      	mov	r0, r4
   25b16:	f7ff ff9a 	bl	25a4e <post_drop_action>
			tmp_wr_idx_shift = 0;
   25b1a:	2300      	movs	r3, #0
   25b1c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
   25b1e:	a904      	add	r1, sp, #16
   25b20:	4620      	mov	r0, r4
   25b22:	f7ff fec2 	bl	258aa <free_space>

		if (free_wlen >= wlen) {
   25b26:	9904      	ldr	r1, [sp, #16]
   25b28:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
   25b2a:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
   25b2c:	d32a      	bcc.n	25b84 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   25b2e:	6822      	ldr	r2, [r4, #0]
			item =
   25b30:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   25b32:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   25b36:	f021 0103 	bic.w	r1, r1, #3
   25b3a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   25b3e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25b42:	6821      	ldr	r1, [r4, #0]
   25b44:	4632      	mov	r2, r6
   25b46:	4620      	mov	r0, r4
   25b48:	f7ff fed3 	bl	258f2 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   25b4c:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25b4e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   25b50:	4298      	cmp	r0, r3
   25b52:	d012      	beq.n	25b7a <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   25b54:	2700      	movs	r7, #0
	__asm__ volatile(
   25b56:	f388 8811 	msr	BASEPRI, r8
   25b5a:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   25b5e:	9903      	ldr	r1, [sp, #12]
   25b60:	b129      	cbz	r1, 25b6e <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   25b62:	6962      	ldr	r2, [r4, #20]
   25b64:	b10a      	cbz	r2, 25b6a <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
   25b66:	4620      	mov	r0, r4
   25b68:	4790      	blx	r2
			}
			dropped_item = NULL;
   25b6a:	2300      	movs	r3, #0
   25b6c:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
   25b6e:	2f00      	cmp	r7, #0
   25b70:	d1c4      	bne.n	25afc <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   25b72:	4648      	mov	r0, r9
   25b74:	b007      	add	sp, #28
   25b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   25b7a:	6923      	ldr	r3, [r4, #16]
   25b7c:	f043 0308 	orr.w	r3, r3, #8
   25b80:	6123      	str	r3, [r4, #16]
   25b82:	e7e7      	b.n	25b54 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
   25b84:	b118      	cbz	r0, 25b8e <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
   25b86:	4620      	mov	r0, r4
   25b88:	f7ff fecd 	bl	25926 <add_skip_item>
			cont = true;
   25b8c:	e7e3      	b.n	25b56 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   25b8e:	9b00      	ldr	r3, [sp, #0]
   25b90:	ea5a 0303 	orrs.w	r3, sl, r3
   25b94:	d01a      	beq.n	25bcc <mpsc_pbuf_alloc+0xec>
   25b96:	9101      	str	r1, [sp, #4]
   25b98:	f003 ff91 	bl	29abe <k_is_in_isr>
   25b9c:	9901      	ldr	r1, [sp, #4]
   25b9e:	b9a8      	cbnz	r0, 25bcc <mpsc_pbuf_alloc+0xec>
   25ba0:	f38b 8811 	msr	BASEPRI, fp
   25ba4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   25ba8:	9b00      	ldr	r3, [sp, #0]
   25baa:	4652      	mov	r2, sl
   25bac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25bb0:	f7fd fe4e 	bl	23850 <z_impl_k_sem_take>
	__asm__ volatile(
   25bb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bb8:	f3ef 8811 	mrs	r8, BASEPRI
   25bbc:	f383 8812 	msr	BASEPRI_MAX, r3
   25bc0:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
   25bc4:	fab0 f780 	clz	r7, r0
   25bc8:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   25bca:	e7c4      	b.n	25b56 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
   25bcc:	ab05      	add	r3, sp, #20
   25bce:	aa03      	add	r2, sp, #12
   25bd0:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   25bd2:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   25bd4:	f7ff fec4 	bl	25960 <drop_item_locked>
   25bd8:	4607      	mov	r7, r0
   25bda:	e7bc      	b.n	25b56 <mpsc_pbuf_alloc+0x76>

00025bdc <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   25bdc:	b570      	push	{r4, r5, r6, lr}
   25bde:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   25be0:	6983      	ldr	r3, [r0, #24]
   25be2:	4608      	mov	r0, r1
{
   25be4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25be6:	4798      	blx	r3
   25be8:	4602      	mov	r2, r0
   25bea:	f04f 0340 	mov.w	r3, #64	; 0x40
   25bee:	f3ef 8611 	mrs	r6, BASEPRI
   25bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   25bf6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   25bfa:	782b      	ldrb	r3, [r5, #0]
   25bfc:	f043 0301 	orr.w	r3, r3, #1
   25c00:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25c02:	6861      	ldr	r1, [r4, #4]
   25c04:	4620      	mov	r0, r4
   25c06:	f7ff fe74 	bl	258f2 <idx_inc>
   25c0a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   25c0c:	4620      	mov	r0, r4
   25c0e:	f7ff ff39 	bl	25a84 <max_utilization_update>
	__asm__ volatile(
   25c12:	f386 8811 	msr	BASEPRI, r6
   25c16:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   25c1a:	bd70      	pop	{r4, r5, r6, pc}

00025c1c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   25c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25c1e:	4604      	mov	r4, r0
	__asm__ volatile(
   25c20:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c24:	f3ef 8611 	mrs	r6, BASEPRI
   25c28:	f383 8812 	msr	BASEPRI_MAX, r3
   25c2c:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   25c30:	6923      	ldr	r3, [r4, #16]
   25c32:	f013 0f08 	tst.w	r3, #8
   25c36:	68a3      	ldr	r3, [r4, #8]
   25c38:	d102      	bne.n	25c40 <mpsc_pbuf_claim+0x24>
   25c3a:	6862      	ldr	r2, [r4, #4]
   25c3c:	4293      	cmp	r3, r2
   25c3e:	d900      	bls.n	25c42 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
   25c40:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   25c42:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   25c44:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   25c46:	b92a      	cbnz	r2, 25c54 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
   25c48:	f386 8811 	msr	BASEPRI, r6
   25c4c:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
   25c50:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   25c52:	e033      	b.n	25cbc <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
   25c54:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   25c58:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   25c5c:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   25c60:	d0f2      	beq.n	25c48 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
   25c62:	2802      	cmp	r0, #2
   25c64:	d103      	bne.n	25c6e <mpsc_pbuf_claim+0x52>
		return item->skip.len;
   25c66:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   25c6a:	08ad      	lsrs	r5, r5, #2
   25c6c:	d105      	bne.n	25c7a <mpsc_pbuf_claim+0x5e>
   25c6e:	07d0      	lsls	r0, r2, #31
   25c70:	d412      	bmi.n	25c98 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
   25c72:	69a3      	ldr	r3, [r4, #24]
   25c74:	4638      	mov	r0, r7
   25c76:	4798      	blx	r3
   25c78:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   25c7a:	68a1      	ldr	r1, [r4, #8]
   25c7c:	462a      	mov	r2, r5
   25c7e:	4620      	mov	r0, r4
   25c80:	f7ff fe37 	bl	258f2 <idx_inc>
				rd_idx_inc(buffer, inc);
   25c84:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
   25c86:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   25c88:	4620      	mov	r0, r4
   25c8a:	f7ff fe40 	bl	2590e <rd_idx_inc>
   25c8e:	f386 8811 	msr	BASEPRI, r6
   25c92:	f3bf 8f6f 	isb	sy
	} while (cont);
   25c96:	e7c3      	b.n	25c20 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   25c98:	f042 0202 	orr.w	r2, r2, #2
   25c9c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
   25ca0:	4638      	mov	r0, r7
   25ca2:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
   25ca4:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   25ca6:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   25ca8:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   25caa:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   25cac:	4620      	mov	r0, r4
   25cae:	f7ff fe20 	bl	258f2 <idx_inc>
				buffer->tmp_rd_idx =
   25cb2:	60a0      	str	r0, [r4, #8]
   25cb4:	f386 8811 	msr	BASEPRI, r6
   25cb8:	f3bf 8f6f 	isb	sy
}
   25cbc:	4638      	mov	r0, r7
   25cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025cc0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   25cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cc2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   25cc4:	6983      	ldr	r3, [r0, #24]
   25cc6:	4608      	mov	r0, r1
{
   25cc8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25cca:	4798      	blx	r3
   25ccc:	4606      	mov	r6, r0
	__asm__ volatile(
   25cce:	f04f 0340 	mov.w	r3, #64	; 0x40
   25cd2:	f3ef 8711 	mrs	r7, BASEPRI
   25cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   25cda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   25cde:	782b      	ldrb	r3, [r5, #0]
   25ce0:	f36f 0300 	bfc	r3, #0, #1
   25ce4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25ce6:	6923      	ldr	r3, [r4, #16]
   25ce8:	079b      	lsls	r3, r3, #30
   25cea:	d505      	bpl.n	25cf8 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   25cec:	68e2      	ldr	r2, [r4, #12]
   25cee:	69e3      	ldr	r3, [r4, #28]
   25cf0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   25cf4:	429d      	cmp	r5, r3
   25cf6:	d11a      	bne.n	25d2e <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
   25cf8:	782b      	ldrb	r3, [r5, #0]
   25cfa:	f36f 0341 	bfc	r3, #1, #1
   25cfe:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   25d00:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   25d04:	4299      	cmp	r1, r3
   25d06:	d104      	bne.n	25d12 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   25d08:	4632      	mov	r2, r6
   25d0a:	4620      	mov	r0, r4
   25d0c:	f7ff fdf1 	bl	258f2 <idx_inc>
   25d10:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   25d12:	4631      	mov	r1, r6
   25d14:	4620      	mov	r0, r4
   25d16:	f7ff fdfa 	bl	2590e <rd_idx_inc>
	__asm__ volatile(
   25d1a:	f387 8811 	msr	BASEPRI, r7
   25d1e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   25d22:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   25d26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25d2a:	f7fd bd6b 	b.w	23804 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   25d2e:	682b      	ldr	r3, [r5, #0]
   25d30:	f360 039f 	bfi	r3, r0, #2, #30
   25d34:	602b      	str	r3, [r5, #0]
   25d36:	e7f0      	b.n	25d1a <mpsc_pbuf_free+0x5a>

00025d38 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   25d38:	6902      	ldr	r2, [r0, #16]
   25d3a:	6883      	ldr	r3, [r0, #8]
   25d3c:	0712      	lsls	r2, r2, #28
   25d3e:	d402      	bmi.n	25d46 <mpsc_pbuf_is_pending+0xe>
   25d40:	6842      	ldr	r2, [r0, #4]
   25d42:	429a      	cmp	r2, r3
   25d44:	d200      	bcs.n	25d48 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   25d46:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   25d48:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   25d4a:	1e18      	subs	r0, r3, #0
   25d4c:	bf18      	it	ne
   25d4e:	2001      	movne	r0, #1
   25d50:	4770      	bx	lr

00025d52 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   25d52:	4770      	bx	lr

00025d54 <nvs_flash_rd>:
{
   25d54:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   25d56:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25d58:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   25d5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25d5c:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25d5e:	fa16 f181 	uxtah	r1, r6, r1
   25d62:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   25d66:	6884      	ldr	r4, [r0, #8]
   25d68:	6824      	ldr	r4, [r4, #0]
   25d6a:	46a4      	mov	ip, r4
}
   25d6c:	bc70      	pop	{r4, r5, r6}
   25d6e:	4760      	bx	ip

00025d70 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   25d70:	680b      	ldr	r3, [r1, #0]
   25d72:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   25d76:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   25d78:	89c0      	ldrh	r0, [r0, #14]
   25d7a:	0c1a      	lsrs	r2, r3, #16
   25d7c:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   25d80:	bf04      	itt	eq
   25d82:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   25d86:	600b      	streq	r3, [r1, #0]
}
   25d88:	4770      	bx	lr

00025d8a <nvs_flash_block_cmp>:
{
   25d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25d8e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25d90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   25d92:	681d      	ldr	r5, [r3, #0]
   25d94:	426d      	negs	r5, r5
{
   25d96:	b089      	sub	sp, #36	; 0x24
   25d98:	4681      	mov	r9, r0
   25d9a:	460e      	mov	r6, r1
   25d9c:	4617      	mov	r7, r2
	block_size =
   25d9e:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   25da2:	b91c      	cbnz	r4, 25dac <nvs_flash_block_cmp+0x22>
	return 0;
   25da4:	4620      	mov	r0, r4
}
   25da6:	b009      	add	sp, #36	; 0x24
   25da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   25dac:	42ac      	cmp	r4, r5
   25dae:	46a0      	mov	r8, r4
   25db0:	bf28      	it	cs
   25db2:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   25db4:	4643      	mov	r3, r8
   25db6:	466a      	mov	r2, sp
   25db8:	4631      	mov	r1, r6
   25dba:	4648      	mov	r0, r9
   25dbc:	f7ff ffca 	bl	25d54 <nvs_flash_rd>
		if (rc) {
   25dc0:	2800      	cmp	r0, #0
   25dc2:	d1f0      	bne.n	25da6 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   25dc4:	4642      	mov	r2, r8
   25dc6:	4669      	mov	r1, sp
   25dc8:	4638      	mov	r0, r7
   25dca:	f000 feff 	bl	26bcc <memcmp>
		if (rc) {
   25dce:	b920      	cbnz	r0, 25dda <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   25dd0:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   25dd4:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   25dd6:	4447      	add	r7, r8
   25dd8:	e7e3      	b.n	25da2 <nvs_flash_block_cmp+0x18>
			return 1;
   25dda:	2001      	movs	r0, #1
   25ddc:	e7e3      	b.n	25da6 <nvs_flash_block_cmp+0x1c>

00025dde <nvs_flash_cmp_const>:
{
   25dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25de2:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   25de4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   25de6:	681d      	ldr	r5, [r3, #0]
   25de8:	426d      	negs	r5, r5
{
   25dea:	b088      	sub	sp, #32
	block_size =
   25dec:	f005 0520 	and.w	r5, r5, #32
{
   25df0:	4607      	mov	r7, r0
   25df2:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   25df4:	4668      	mov	r0, sp
{
   25df6:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   25df8:	462a      	mov	r2, r5
   25dfa:	f000 ff02 	bl	26c02 <memset>
	while (len) {
   25dfe:	b91c      	cbnz	r4, 25e08 <nvs_flash_cmp_const+0x2a>
	return 0;
   25e00:	4620      	mov	r0, r4
}
   25e02:	b008      	add	sp, #32
   25e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   25e08:	42ac      	cmp	r4, r5
   25e0a:	46a0      	mov	r8, r4
   25e0c:	bf28      	it	cs
   25e0e:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   25e10:	4643      	mov	r3, r8
   25e12:	466a      	mov	r2, sp
   25e14:	4631      	mov	r1, r6
   25e16:	4638      	mov	r0, r7
   25e18:	f7ff ffb7 	bl	25d8a <nvs_flash_block_cmp>
		if (rc) {
   25e1c:	2800      	cmp	r0, #0
   25e1e:	d1f0      	bne.n	25e02 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   25e20:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   25e24:	4446      	add	r6, r8
   25e26:	e7ea      	b.n	25dfe <nvs_flash_cmp_const+0x20>

00025e28 <nvs_flash_erase_sector>:
{
   25e28:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25e2a:	8982      	ldrh	r2, [r0, #12]
   25e2c:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   25e2e:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25e30:	0c09      	lsrs	r1, r1, #16
{
   25e32:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   25e34:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   25e36:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25e38:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   25e3c:	6883      	ldr	r3, [r0, #8]
   25e3e:	689b      	ldr	r3, [r3, #8]
   25e40:	4798      	blx	r3
	if (rc) {
   25e42:	b950      	cbnz	r0, 25e5a <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   25e44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   25e46:	89a3      	ldrh	r3, [r4, #12]
   25e48:	7912      	ldrb	r2, [r2, #4]
   25e4a:	4629      	mov	r1, r5
   25e4c:	4620      	mov	r0, r4
   25e4e:	f7ff ffc6 	bl	25dde <nvs_flash_cmp_const>
		rc = -ENXIO;
   25e52:	2800      	cmp	r0, #0
   25e54:	bf18      	it	ne
   25e56:	f06f 0005 	mvnne.w	r0, #5
}
   25e5a:	bd38      	pop	{r3, r4, r5, pc}

00025e5c <nvs_ate_crc8_update>:
{
   25e5c:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25e5e:	4601      	mov	r1, r0
{
   25e60:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25e62:	2207      	movs	r2, #7
   25e64:	20ff      	movs	r0, #255	; 0xff
   25e66:	f7ec fb6f 	bl	12548 <crc8_ccitt>
	entry->crc8 = crc8;
   25e6a:	71e0      	strb	r0, [r4, #7]
}
   25e6c:	bd10      	pop	{r4, pc}

00025e6e <z_log_msg_static_create.constprop.0>:
   25e6e:	2300      	movs	r3, #0
   25e70:	f7ed bd5a 	b.w	13928 <z_impl_z_log_msg_static_create>

00025e74 <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   25e74:	7803      	ldrb	r3, [r0, #0]
   25e76:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   25e78:	bf81      	itttt	hi
   25e7a:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   25e7e:	18c9      	addhi	r1, r1, r3
   25e80:	425b      	neghi	r3, r3
   25e82:	4019      	andhi	r1, r3
}
   25e84:	4608      	mov	r0, r1
   25e86:	4770      	bx	lr

00025e88 <nvs_ate_valid>:
{
   25e88:	b570      	push	{r4, r5, r6, lr}
   25e8a:	460c      	mov	r4, r1
   25e8c:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25e8e:	2108      	movs	r1, #8
   25e90:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25e92:	f7ff ffef 	bl	25e74 <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25e96:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25e98:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   25e9a:	4621      	mov	r1, r4
   25e9c:	20ff      	movs	r0, #255	; 0xff
   25e9e:	f7ec fb53 	bl	12548 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   25ea2:	79e3      	ldrb	r3, [r4, #7]
   25ea4:	4283      	cmp	r3, r0
   25ea6:	d107      	bne.n	25eb8 <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   25ea8:	89aa      	ldrh	r2, [r5, #12]
   25eaa:	8863      	ldrh	r3, [r4, #2]
   25eac:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   25eae:	4283      	cmp	r3, r0
   25eb0:	bf2c      	ite	cs
   25eb2:	2000      	movcs	r0, #0
   25eb4:	2001      	movcc	r0, #1
}
   25eb6:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   25eb8:	2000      	movs	r0, #0
   25eba:	e7fc      	b.n	25eb6 <nvs_ate_valid+0x2e>

00025ebc <nvs_close_ate_valid>:
{
   25ebc:	b538      	push	{r3, r4, r5, lr}
   25ebe:	4605      	mov	r5, r0
   25ec0:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   25ec2:	f7ff ffe1 	bl	25e88 <nvs_ate_valid>
   25ec6:	b1a0      	cbz	r0, 25ef2 <nvs_close_ate_valid+0x36>
   25ec8:	88a0      	ldrh	r0, [r4, #4]
   25eca:	b998      	cbnz	r0, 25ef4 <nvs_close_ate_valid+0x38>
   25ecc:	8822      	ldrh	r2, [r4, #0]
   25ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
   25ed2:	429a      	cmp	r2, r3
   25ed4:	d10d      	bne.n	25ef2 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25ed6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   25ed8:	2108      	movs	r1, #8
   25eda:	f7ff ffcb 	bl	25e74 <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   25ede:	8862      	ldrh	r2, [r4, #2]
   25ee0:	89ab      	ldrh	r3, [r5, #12]
   25ee2:	1a9b      	subs	r3, r3, r2
   25ee4:	fbb3 f2f0 	udiv	r2, r3, r0
   25ee8:	fb02 3010 	mls	r0, r2, r0, r3
   25eec:	fab0 f080 	clz	r0, r0
   25ef0:	0940      	lsrs	r0, r0, #5
}
   25ef2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   25ef4:	2000      	movs	r0, #0
   25ef6:	e7fc      	b.n	25ef2 <nvs_close_ate_valid+0x36>

00025ef8 <nvs_prev_ate>:
{
   25ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25efa:	4604      	mov	r4, r0
   25efc:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25efe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   25f00:	2108      	movs	r1, #8
   25f02:	f7ff ffb7 	bl	25e74 <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25f06:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   25f08:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25f0a:	2308      	movs	r3, #8
   25f0c:	4620      	mov	r0, r4
   25f0e:	f7ff ff21 	bl	25d54 <nvs_flash_rd>
	if (rc) {
   25f12:	4606      	mov	r6, r0
   25f14:	2800      	cmp	r0, #0
   25f16:	d136      	bne.n	25f86 <nvs_prev_ate+0x8e>
	*addr += ate_size;
   25f18:	682b      	ldr	r3, [r5, #0]
   25f1a:	443b      	add	r3, r7
   25f1c:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   25f1e:	89a2      	ldrh	r2, [r4, #12]
   25f20:	b299      	uxth	r1, r3
   25f22:	1bd2      	subs	r2, r2, r7
   25f24:	4291      	cmp	r1, r2
   25f26:	d12e      	bne.n	25f86 <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   25f28:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   25f2a:	bf03      	ittte	eq
   25f2c:	89e2      	ldrheq	r2, [r4, #14]
   25f2e:	f102 32ff 	addeq.w	r2, r2, #4294967295	; 0xffffffff
   25f32:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   25f36:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   25f3a:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   25f3c:	2308      	movs	r3, #8
   25f3e:	466a      	mov	r2, sp
   25f40:	4620      	mov	r0, r4
   25f42:	f7ff ff07 	bl	25d54 <nvs_flash_rd>
	if (rc) {
   25f46:	b9e8      	cbnz	r0, 25f84 <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   25f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25f4a:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25f4c:	466b      	mov	r3, sp
		if (data8[i] != value) {
   25f4e:	f813 1b01 	ldrb.w	r1, [r3], #1
   25f52:	428a      	cmp	r2, r1
   25f54:	d10c      	bne.n	25f70 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   25f56:	3001      	adds	r0, #1
   25f58:	2808      	cmp	r0, #8
   25f5a:	d1f8      	bne.n	25f4e <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   25f5c:	6863      	ldr	r3, [r4, #4]
   25f5e:	e005      	b.n	25f6c <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   25f60:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   25f62:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   25f66:	0c1b      	lsrs	r3, r3, #16
   25f68:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   25f6a:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   25f6c:	602b      	str	r3, [r5, #0]
		return 0;
   25f6e:	e00a      	b.n	25f86 <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   25f70:	4669      	mov	r1, sp
   25f72:	4620      	mov	r0, r4
   25f74:	f7ff ffa2 	bl	25ebc <nvs_close_ate_valid>
   25f78:	2800      	cmp	r0, #0
   25f7a:	d1f1      	bne.n	25f60 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   25f7c:	4629      	mov	r1, r5
   25f7e:	4620      	mov	r0, r4
   25f80:	f7ec feac 	bl	12cdc <nvs_recover_last_ate>
   25f84:	4606      	mov	r6, r0
}
   25f86:	4630      	mov	r0, r6
   25f88:	b003      	add	sp, #12
   25f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025f8c <nvs_flash_al_wrt>:
{
   25f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25f90:	4607      	mov	r7, r0
   25f92:	b089      	sub	sp, #36	; 0x24
   25f94:	4690      	mov	r8, r2
	if (!len) {
   25f96:	461e      	mov	r6, r3
   25f98:	b91b      	cbnz	r3, 25fa2 <nvs_flash_al_wrt+0x16>
		return 0;
   25f9a:	2000      	movs	r0, #0
}
   25f9c:	b009      	add	sp, #36	; 0x24
   25f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   25fa2:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   25fa4:	8983      	ldrh	r3, [r0, #12]
   25fa6:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   25fa8:	fa14 f181 	uxtah	r1, r4, r1
   25fac:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   25fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25fb2:	681d      	ldr	r5, [r3, #0]
   25fb4:	426d      	negs	r5, r5
	if (blen > 0) {
   25fb6:	4035      	ands	r5, r6
   25fb8:	d00c      	beq.n	25fd4 <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   25fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   25fbc:	6883      	ldr	r3, [r0, #8]
   25fbe:	4621      	mov	r1, r4
   25fc0:	f8d3 9004 	ldr.w	r9, [r3, #4]
   25fc4:	462b      	mov	r3, r5
   25fc6:	47c8      	blx	r9
		if (rc) {
   25fc8:	2800      	cmp	r0, #0
   25fca:	d1e7      	bne.n	25f9c <nvs_flash_al_wrt+0x10>
	if (len) {
   25fcc:	1b76      	subs	r6, r6, r5
   25fce:	d0e4      	beq.n	25f9a <nvs_flash_al_wrt+0xe>
		offset += blen;
   25fd0:	442c      	add	r4, r5
		data8 += blen;
   25fd2:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   25fd4:	4632      	mov	r2, r6
   25fd6:	4641      	mov	r1, r8
   25fd8:	4668      	mov	r0, sp
   25fda:	f000 fe07 	bl	26bec <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   25fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25fe0:	681a      	ldr	r2, [r3, #0]
   25fe2:	7919      	ldrb	r1, [r3, #4]
   25fe4:	1b92      	subs	r2, r2, r6
   25fe6:	eb0d 0006 	add.w	r0, sp, r6
   25fea:	f000 fe0a 	bl	26c02 <memset>
				 fs->flash_parameters->write_block_size);
   25fee:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   25ff2:	681b      	ldr	r3, [r3, #0]
   25ff4:	6882      	ldr	r2, [r0, #8]
   25ff6:	4621      	mov	r1, r4
   25ff8:	6855      	ldr	r5, [r2, #4]
   25ffa:	466a      	mov	r2, sp
   25ffc:	47a8      	blx	r5
	return rc;
   25ffe:	e7cd      	b.n	25f9c <nvs_flash_al_wrt+0x10>

00026000 <nvs_flash_ate_wrt>:
{
   26000:	b510      	push	{r4, lr}
   26002:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26004:	2308      	movs	r3, #8
   26006:	6841      	ldr	r1, [r0, #4]
{
   26008:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2600a:	f7ff ffbf 	bl	25f8c <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2600e:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   26010:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   26012:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   26014:	f7ff ff2e 	bl	25e74 <nvs_al_size.isra.0>
   26018:	6863      	ldr	r3, [r4, #4]
   2601a:	1a1b      	subs	r3, r3, r0
   2601c:	6063      	str	r3, [r4, #4]
}
   2601e:	4610      	mov	r0, r2
   26020:	bd10      	pop	{r4, pc}

00026022 <nvs_add_gc_done_ate>:
{
   26022:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   26024:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26028:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2602c:	2300      	movs	r3, #0
{
   2602e:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   26030:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26034:	6883      	ldr	r3, [r0, #8]
   26036:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2603a:	4668      	mov	r0, sp
   2603c:	f7ff ff0e 	bl	25e5c <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   26040:	4669      	mov	r1, sp
   26042:	4620      	mov	r0, r4
   26044:	f7ff ffdc 	bl	26000 <nvs_flash_ate_wrt>
}
   26048:	b002      	add	sp, #8
   2604a:	bd10      	pop	{r4, pc}

0002604c <nvs_gc>:
{
   2604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26050:	4604      	mov	r4, r0
   26052:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26054:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   26056:	2108      	movs	r1, #8
   26058:	f7ff ff0c 	bl	25e74 <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2605c:	6863      	ldr	r3, [r4, #4]
   2605e:	0c1b      	lsrs	r3, r3, #16
   26060:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   26062:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   26064:	a903      	add	r1, sp, #12
   26066:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   26068:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2606a:	f7ff fe81 	bl	25d70 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2606e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   26072:	89a6      	ldrh	r6, [r4, #12]
   26074:	445e      	add	r6, fp
   26076:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26078:	aa06      	add	r2, sp, #24
   2607a:	2308      	movs	r3, #8
   2607c:	4631      	mov	r1, r6
   2607e:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   26080:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   26082:	f7ff fe67 	bl	25d54 <nvs_flash_rd>
	if (rc < 0) {
   26086:	1e02      	subs	r2, r0, #0
   26088:	f2c0 80a9 	blt.w	261de <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2608c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2608e:	aa06      	add	r2, sp, #24
   26090:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   26092:	2300      	movs	r3, #0
		if (data8[i] != value) {
   26094:	f812 0b01 	ldrb.w	r0, [r2], #1
   26098:	4281      	cmp	r1, r0
   2609a:	f040 808f 	bne.w	261bc <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2609e:	3301      	adds	r3, #1
   260a0:	2b08      	cmp	r3, #8
   260a2:	d1f7      	bne.n	26094 <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   260a4:	68a3      	ldr	r3, [r4, #8]
   260a6:	6862      	ldr	r2, [r4, #4]
   260a8:	442b      	add	r3, r5
   260aa:	429a      	cmp	r2, r3
   260ac:	d27e      	bcs.n	261ac <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   260ae:	4659      	mov	r1, fp
   260b0:	4620      	mov	r0, r4
   260b2:	f7ff feb9 	bl	25e28 <nvs_flash_erase_sector>
   260b6:	4602      	mov	r2, r0
	if (rc) {
   260b8:	e091      	b.n	261de <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   260ba:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   260be:	0c36      	lsrs	r6, r6, #16
   260c0:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   260c2:	441e      	add	r6, r3
   260c4:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   260c6:	aa08      	add	r2, sp, #32
   260c8:	a904      	add	r1, sp, #16
   260ca:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   260cc:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   260d0:	f7ff ff12 	bl	25ef8 <nvs_prev_ate>
		if (rc) {
   260d4:	4602      	mov	r2, r0
   260d6:	2800      	cmp	r0, #0
   260d8:	f040 8081 	bne.w	261de <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   260dc:	a908      	add	r1, sp, #32
   260de:	4620      	mov	r0, r4
   260e0:	f7ff fed2 	bl	25e88 <nvs_ate_valid>
   260e4:	b918      	cbnz	r0, 260ee <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   260e6:	9b01      	ldr	r3, [sp, #4]
   260e8:	459a      	cmp	sl, r3
   260ea:	d1ec      	bne.n	260c6 <nvs_gc+0x7a>
   260ec:	e7da      	b.n	260a4 <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   260ee:	6863      	ldr	r3, [r4, #4]
   260f0:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   260f2:	aa0a      	add	r2, sp, #40	; 0x28
   260f4:	a905      	add	r1, sp, #20
   260f6:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   260f8:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   260fa:	f7ff fefd 	bl	25ef8 <nvs_prev_ate>
			if (rc) {
   260fe:	4602      	mov	r2, r0
   26100:	2800      	cmp	r0, #0
   26102:	d16c      	bne.n	261de <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   26104:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   26108:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2610c:	429a      	cmp	r2, r3
   2610e:	d027      	beq.n	26160 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   26110:	6862      	ldr	r2, [r4, #4]
   26112:	9b05      	ldr	r3, [sp, #20]
   26114:	429a      	cmp	r2, r3
   26116:	d1ec      	bne.n	260f2 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   26118:	4556      	cmp	r6, sl
   2611a:	d1e4      	bne.n	260e6 <nvs_gc+0x9a>
   2611c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   26120:	2b00      	cmp	r3, #0
   26122:	d0e0      	beq.n	260e6 <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   26124:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   26128:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2612c:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2612e:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   26130:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   26132:	68a3      	ldr	r3, [r4, #8]
   26134:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   26138:	f7ff fe90 	bl	25e5c <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2613c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2613e:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   26142:	681e      	ldr	r6, [r3, #0]
   26144:	4276      	negs	r6, r6
	block_size =
   26146:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2614a:	f1b9 0f00 	cmp.w	r9, #0
   2614e:	d10e      	bne.n	2616e <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   26150:	a908      	add	r1, sp, #32
   26152:	4620      	mov	r0, r4
   26154:	f7ff ff54 	bl	26000 <nvs_flash_ate_wrt>
			if (rc) {
   26158:	4602      	mov	r2, r0
   2615a:	2800      	cmp	r0, #0
   2615c:	d0c3      	beq.n	260e6 <nvs_gc+0x9a>
   2615e:	e03e      	b.n	261de <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   26160:	a90a      	add	r1, sp, #40	; 0x28
   26162:	4620      	mov	r0, r4
   26164:	f7ff fe90 	bl	25e88 <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   26168:	2800      	cmp	r0, #0
   2616a:	d0d1      	beq.n	26110 <nvs_gc+0xc4>
   2616c:	e7d4      	b.n	26118 <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2616e:	454e      	cmp	r6, r9
   26170:	46b0      	mov	r8, r6
   26172:	bf28      	it	cs
   26174:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   26176:	aa0c      	add	r2, sp, #48	; 0x30
   26178:	4643      	mov	r3, r8
   2617a:	4639      	mov	r1, r7
   2617c:	4620      	mov	r0, r4
   2617e:	f7ff fde9 	bl	25d54 <nvs_flash_rd>
		if (rc) {
   26182:	4602      	mov	r2, r0
   26184:	bb58      	cbnz	r0, 261de <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   26186:	4643      	mov	r3, r8
   26188:	68a1      	ldr	r1, [r4, #8]
   2618a:	aa0c      	add	r2, sp, #48	; 0x30
   2618c:	4620      	mov	r0, r4
   2618e:	f7ff fefd 	bl	25f8c <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   26192:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   26194:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   26196:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   26198:	f7ff fe6c 	bl	25e74 <nvs_al_size.isra.0>
   2619c:	68a3      	ldr	r3, [r4, #8]
   2619e:	4403      	add	r3, r0
   261a0:	60a3      	str	r3, [r4, #8]
		if (rc) {
   261a2:	b9e2      	cbnz	r2, 261de <nvs_gc+0x192>
		len -= bytes_to_copy;
   261a4:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   261a8:	4447      	add	r7, r8
   261aa:	e7ce      	b.n	2614a <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   261ac:	4620      	mov	r0, r4
   261ae:	f7ff ff38 	bl	26022 <nvs_add_gc_done_ate>
		if (rc) {
   261b2:	4602      	mov	r2, r0
   261b4:	2800      	cmp	r0, #0
   261b6:	f43f af7a 	beq.w	260ae <nvs_gc+0x62>
   261ba:	e010      	b.n	261de <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   261bc:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   261be:	a906      	add	r1, sp, #24
   261c0:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   261c2:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   261c4:	f7ff fe7a 	bl	25ebc <nvs_close_ate_valid>
   261c8:	2800      	cmp	r0, #0
   261ca:	f47f af76 	bne.w	260ba <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   261ce:	a904      	add	r1, sp, #16
   261d0:	4620      	mov	r0, r4
   261d2:	f7ec fd83 	bl	12cdc <nvs_recover_last_ate>
		if (rc) {
   261d6:	4602      	mov	r2, r0
   261d8:	2800      	cmp	r0, #0
   261da:	f43f af74 	beq.w	260c6 <nvs_gc+0x7a>
}
   261de:	4610      	mov	r0, r2
   261e0:	b015      	add	sp, #84	; 0x54
   261e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000261e6 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   261e6:	2300      	movs	r3, #0
   261e8:	461a      	mov	r2, r3
   261ea:	f7ec bfa9 	b.w	13140 <nvs_write>

000261ee <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   261ee:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   261f0:	2400      	movs	r4, #0
   261f2:	9400      	str	r4, [sp, #0]
   261f4:	f7ed f88c 	bl	13310 <nvs_read_hist>
	return rc;
}
   261f8:	b002      	add	sp, #8
   261fa:	bd10      	pop	{r4, pc}

000261fc <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   261fc:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   261fe:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   26200:	bf5f      	itttt	pl
   26202:	6803      	ldrpl	r3, [r0, #0]
   26204:	8842      	ldrhpl	r2, [r0, #2]
   26206:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2620a:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   2620e:	bf5d      	ittte	pl
   26210:	3017      	addpl	r0, #23
   26212:	f020 0007 	bicpl.w	r0, r0, #7
   26216:	0880      	lsrpl	r0, r0, #2
	return 0;
   26218:	2000      	movmi	r0, #0
}
   2621a:	4770      	bx	lr

0002621c <dummy_timestamp>:
}
   2621c:	2000      	movs	r0, #0
   2621e:	4770      	bx	lr

00026220 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26220:	f003 ba66 	b.w	296f0 <sys_clock_cycle_get_32>

00026224 <atomic_inc>:
{
   26224:	4603      	mov	r3, r0
}
   26226:	f3bf 8f5b 	dmb	ish
   2622a:	e853 0f00 	ldrex	r0, [r3]
   2622e:	1c42      	adds	r2, r0, #1
   26230:	e843 2100 	strex	r1, r2, [r3]
   26234:	2900      	cmp	r1, #0
   26236:	d1f8      	bne.n	2622a <atomic_inc+0x6>
   26238:	f3bf 8f5b 	dmb	ish
   2623c:	4770      	bx	lr

0002623e <z_log_vprintk>:
{
   2623e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   26240:	2300      	movs	r3, #0
   26242:	e9cd 0102 	strd	r0, r1, [sp, #8]
   26246:	e9cd 3300 	strd	r3, r3, [sp]
   2624a:	461a      	mov	r2, r3
   2624c:	4619      	mov	r1, r3
   2624e:	4618      	mov	r0, r3
   26250:	f7ed fbf2 	bl	13a38 <z_impl_z_log_msg_runtime_vcreate>
}
   26254:	b005      	add	sp, #20
   26256:	f85d fb04 	ldr.w	pc, [sp], #4

0002625a <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   2625a:	2001      	movs	r0, #1
   2625c:	f7ed b9a0 	b.w	135a0 <z_log_dropped>

00026260 <z_log_get_tag>:
}
   26260:	2000      	movs	r0, #0
   26262:	4770      	bx	lr

00026264 <z_cbprintf_cpy>:
{
   26264:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   26266:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   2626a:	1b9b      	subs	r3, r3, r6
   2626c:	428b      	cmp	r3, r1
{
   2626e:	460c      	mov	r4, r1
   26270:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   26272:	d30a      	bcc.n	2628a <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   26274:	6813      	ldr	r3, [r2, #0]
   26276:	460a      	mov	r2, r1
   26278:	4601      	mov	r1, r0
   2627a:	1998      	adds	r0, r3, r6
   2627c:	f000 fcb6 	bl	26bec <memcpy>
	desc->off += len;
   26280:	68ab      	ldr	r3, [r5, #8]
   26282:	4423      	add	r3, r4
   26284:	60ab      	str	r3, [r5, #8]
	return len;
   26286:	4620      	mov	r0, r4
}
   26288:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   2628a:	f06f 001b 	mvn.w	r0, #27
   2628e:	e7fb      	b.n	26288 <z_cbprintf_cpy+0x24>

00026290 <z_log_msg_finalize>:
{
   26290:	b570      	push	{r4, r5, r6, lr}
   26292:	460e      	mov	r6, r1
   26294:	4615      	mov	r5, r2
   26296:	4619      	mov	r1, r3
	if (!msg) {
   26298:	4604      	mov	r4, r0
   2629a:	b918      	cbnz	r0, 262a4 <z_log_msg_finalize+0x14>
}
   2629c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   262a0:	f7ed b97e 	b.w	135a0 <z_log_dropped>
	if (data) {
   262a4:	b133      	cbz	r3, 262b4 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   262a6:	f3c2 234a 	ubfx	r3, r2, #9, #11
   262aa:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   262ac:	0d12      	lsrs	r2, r2, #20
   262ae:	4418      	add	r0, r3
   262b0:	f000 fc9c 	bl	26bec <memcpy>
	msg->hdr.source = source;
   262b4:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   262b8:	4620      	mov	r0, r4
}
   262ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   262be:	f7ed baff 	b.w	138c0 <z_log_msg_commit>

000262c2 <buffer_write>:
{
   262c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262c4:	4606      	mov	r6, r0
   262c6:	460d      	mov	r5, r1
   262c8:	4614      	mov	r4, r2
   262ca:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   262cc:	4621      	mov	r1, r4
   262ce:	4628      	mov	r0, r5
   262d0:	463a      	mov	r2, r7
   262d2:	47b0      	blx	r6
	} while (len != 0);
   262d4:	1a24      	subs	r4, r4, r0
		buf += processed;
   262d6:	4405      	add	r5, r0
	} while (len != 0);
   262d8:	d1f8      	bne.n	262cc <buffer_write+0xa>
}
   262da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000262dc <cbvprintf>:
{
   262dc:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   262de:	2400      	movs	r4, #0
   262e0:	9400      	str	r4, [sp, #0]
   262e2:	f7ec f947 	bl	12574 <z_cbvprintf_impl>
}
   262e6:	b002      	add	sp, #8
   262e8:	bd10      	pop	{r4, pc}

000262ea <log_output_flush>:
{
   262ea:	b510      	push	{r4, lr}
		     output->control_block->offset,
   262ec:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   262ee:	6881      	ldr	r1, [r0, #8]
{
   262f0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   262f2:	e9d2 2300 	ldrd	r2, r3, [r2]
   262f6:	6800      	ldr	r0, [r0, #0]
   262f8:	f7ff ffe3 	bl	262c2 <buffer_write>
	output->control_block->offset = 0;
   262fc:	6863      	ldr	r3, [r4, #4]
   262fe:	2200      	movs	r2, #0
   26300:	601a      	str	r2, [r3, #0]
}
   26302:	bd10      	pop	{r4, pc}

00026304 <out_func>:
{
   26304:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26306:	684b      	ldr	r3, [r1, #4]
   26308:	681a      	ldr	r2, [r3, #0]
   2630a:	68cb      	ldr	r3, [r1, #12]
   2630c:	429a      	cmp	r2, r3
{
   2630e:	4605      	mov	r5, r0
   26310:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26312:	d102      	bne.n	2631a <out_func+0x16>
		log_output_flush(out_ctx);
   26314:	4608      	mov	r0, r1
   26316:	f7ff ffe8 	bl	262ea <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2631a:	6863      	ldr	r3, [r4, #4]
   2631c:	f3bf 8f5b 	dmb	ish
   26320:	e853 2f00 	ldrex	r2, [r3]
   26324:	1c51      	adds	r1, r2, #1
   26326:	e843 1000 	strex	r0, r1, [r3]
   2632a:	2800      	cmp	r0, #0
   2632c:	d1f8      	bne.n	26320 <out_func+0x1c>
   2632e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   26332:	68a3      	ldr	r3, [r4, #8]
   26334:	549d      	strb	r5, [r3, r2]
}
   26336:	2000      	movs	r0, #0
   26338:	bd38      	pop	{r3, r4, r5, pc}

0002633a <cr_out_func>:
	if (c == '\n') {
   2633a:	280a      	cmp	r0, #10
{
   2633c:	b538      	push	{r3, r4, r5, lr}
   2633e:	4604      	mov	r4, r0
   26340:	460d      	mov	r5, r1
	if (c == '\n') {
   26342:	d102      	bne.n	2634a <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   26344:	200d      	movs	r0, #13
   26346:	f7ff ffdd 	bl	26304 <out_func>
	out_func(c, ctx);
   2634a:	4629      	mov	r1, r5
   2634c:	4620      	mov	r0, r4
   2634e:	f7ff ffd9 	bl	26304 <out_func>
}
   26352:	2000      	movs	r0, #0
   26354:	bd38      	pop	{r3, r4, r5, pc}

00026356 <log_backend_uart_init>:
}
   26356:	4770      	bx	lr

00026358 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   26358:	4770      	bx	lr

0002635a <get_sectors_cb>:
{
   2635a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2635c:	684c      	ldr	r4, [r1, #4]
   2635e:	6803      	ldr	r3, [r0, #0]
   26360:	42a3      	cmp	r3, r4
   26362:	d201      	bcs.n	26368 <get_sectors_cb+0xe>
		*bail_value = true;
   26364:	2001      	movs	r0, #1
}
   26366:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   26368:	688a      	ldr	r2, [r1, #8]
   2636a:	4422      	add	r2, r4
   2636c:	4293      	cmp	r3, r2
   2636e:	d301      	bcc.n	26374 <get_sectors_cb+0x1a>
		*bail_value = false;
   26370:	2000      	movs	r0, #0
   26372:	e7f8      	b.n	26366 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   26374:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   26378:	694e      	ldr	r6, [r1, #20]
   2637a:	42b5      	cmp	r5, r6
   2637c:	d303      	bcc.n	26386 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2637e:	f06f 030b 	mvn.w	r3, #11
   26382:	618b      	str	r3, [r1, #24]
		return true;
   26384:	e7f4      	b.n	26370 <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   26386:	1b1b      	subs	r3, r3, r4
   26388:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2638c:	6843      	ldr	r3, [r0, #4]
   2638e:	6908      	ldr	r0, [r1, #16]
   26390:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   26394:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   26396:	690b      	ldr	r3, [r1, #16]
   26398:	3301      	adds	r3, #1
   2639a:	610b      	str	r3, [r1, #16]
	return true;
   2639c:	e7e2      	b.n	26364 <get_sectors_cb+0xa>

0002639e <read_str>:
{
   2639e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   263a2:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   263a6:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   263a8:	4640      	mov	r0, r8
{
   263aa:	461f      	mov	r7, r3
   263ac:	460c      	mov	r4, r1
   263ae:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   263b0:	f000 fbdc 	bl	26b6c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   263b4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   263b8:	9300      	str	r3, [sp, #0]
   263ba:	b280      	uxth	r0, r0
   263bc:	e9cd 8001 	strd	r8, r0, [sp, #4]
   263c0:	463b      	mov	r3, r7
   263c2:	4632      	mov	r2, r6
   263c4:	4621      	mov	r1, r4
   263c6:	4628      	mov	r0, r5
   263c8:	f002 f882 	bl	284d0 <bt_gatt_attr_read>
}
   263cc:	b004      	add	sp, #16
   263ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000263d2 <bas_init>:

static int bas_init(void)
{

	return 0;
}
   263d2:	2000      	movs	r0, #0
   263d4:	4770      	bx	lr

000263d6 <settings_load>:
	return settings_load_subtree(NULL);
   263d6:	2000      	movs	r0, #0
   263d8:	f7ee b8d0 	b.w	1457c <settings_load_subtree>

000263dc <settings_delete>:
	return settings_save_one(name, NULL, 0);
   263dc:	2200      	movs	r2, #0
   263de:	4611      	mov	r1, r2
   263e0:	f7ee b892 	b.w	14508 <settings_save_one>

000263e4 <settings_name_steq>:
{
   263e4:	4603      	mov	r3, r0
   263e6:	b510      	push	{r4, lr}
   263e8:	4608      	mov	r0, r1
	if (next) {
   263ea:	b10a      	cbz	r2, 263f0 <settings_name_steq+0xc>
		*next = NULL;
   263ec:	2100      	movs	r1, #0
   263ee:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   263f0:	b153      	cbz	r3, 26408 <settings_name_steq+0x24>
   263f2:	b1d0      	cbz	r0, 2642a <settings_name_steq+0x46>
   263f4:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   263f6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   263fa:	b180      	cbz	r0, 2641e <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   263fc:	f813 4b01 	ldrb.w	r4, [r3], #1
   26400:	42a0      	cmp	r0, r4
   26402:	d101      	bne.n	26408 <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   26404:	283d      	cmp	r0, #61	; 0x3d
   26406:	d1f6      	bne.n	263f6 <settings_name_steq+0x12>
		return 0;
   26408:	2000      	movs	r0, #0
   2640a:	e00e      	b.n	2642a <settings_name_steq+0x46>
			*next = name + 1;
   2640c:	3301      	adds	r3, #1
   2640e:	6013      	str	r3, [r2, #0]
   26410:	e00a      	b.n	26428 <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   26412:	283d      	cmp	r0, #61	; 0x3d
   26414:	d008      	beq.n	26428 <settings_name_steq+0x44>
   26416:	fab0 f080 	clz	r0, r0
   2641a:	0940      	lsrs	r0, r0, #5
   2641c:	e005      	b.n	2642a <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2641e:	7818      	ldrb	r0, [r3, #0]
   26420:	282f      	cmp	r0, #47	; 0x2f
   26422:	d1f6      	bne.n	26412 <settings_name_steq+0x2e>
		if (next) {
   26424:	2a00      	cmp	r2, #0
   26426:	d1f1      	bne.n	2640c <settings_name_steq+0x28>
		return 1;
   26428:	2001      	movs	r0, #1
}
   2642a:	bd10      	pop	{r4, pc}

0002642c <settings_name_next>:
{
   2642c:	b510      	push	{r4, lr}
	if (next) {
   2642e:	b109      	cbz	r1, 26434 <settings_name_next+0x8>
		*next = NULL;
   26430:	2300      	movs	r3, #0
   26432:	600b      	str	r3, [r1, #0]
	if (!name) {
   26434:	b158      	cbz	r0, 2644e <settings_name_next+0x22>
   26436:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   26438:	781a      	ldrb	r2, [r3, #0]
   2643a:	461c      	mov	r4, r3
   2643c:	3301      	adds	r3, #1
   2643e:	b12a      	cbz	r2, 2644c <settings_name_next+0x20>
   26440:	2a3d      	cmp	r2, #61	; 0x3d
   26442:	d003      	beq.n	2644c <settings_name_next+0x20>
   26444:	2a2f      	cmp	r2, #47	; 0x2f
   26446:	d1f7      	bne.n	26438 <settings_name_next+0xc>
		if (next) {
   26448:	b101      	cbz	r1, 2644c <settings_name_next+0x20>
			*next = name + 1;
   2644a:	600b      	str	r3, [r1, #0]
   2644c:	1a20      	subs	r0, r4, r0
}
   2644e:	bd10      	pop	{r4, pc}

00026450 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   26450:	3008      	adds	r0, #8
   26452:	4770      	bx	lr

00026454 <settings_nvs_read_fn>:
{
   26454:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   26456:	4613      	mov	r3, r2
{
   26458:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2645a:	460a      	mov	r2, r1
   2645c:	8881      	ldrh	r1, [r0, #4]
   2645e:	6800      	ldr	r0, [r0, #0]
   26460:	f7ff fec5 	bl	261ee <nvs_read>
}
   26464:	42a0      	cmp	r0, r4
   26466:	bfa8      	it	ge
   26468:	4620      	movge	r0, r4
   2646a:	bd10      	pop	{r4, pc}

0002646c <settings_nvs_save>:
{
   2646c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26470:	b097      	sub	sp, #92	; 0x5c
   26472:	4604      	mov	r4, r0
   26474:	9201      	str	r2, [sp, #4]
   26476:	469a      	mov	sl, r3
	if (!name) {
   26478:	4689      	mov	r9, r1
   2647a:	2900      	cmp	r1, #0
   2647c:	d07e      	beq.n	2657c <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2647e:	b1da      	cbz	r2, 264b8 <settings_nvs_save+0x4c>
   26480:	faba f78a 	clz	r7, sl
   26484:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   26486:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   26488:	3501      	adds	r5, #1
   2648a:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2648c:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2648e:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   26492:	1e6e      	subs	r6, r5, #1
   26494:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   26496:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2649a:	d029      	beq.n	264f0 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2649c:	234a      	movs	r3, #74	; 0x4a
   2649e:	aa03      	add	r2, sp, #12
   264a0:	4631      	mov	r1, r6
   264a2:	4658      	mov	r0, fp
   264a4:	f7ff fea3 	bl	261ee <nvs_read>
		if (rc < 0) {
   264a8:	2800      	cmp	r0, #0
   264aa:	da07      	bge.n	264bc <settings_nvs_save+0x50>
		name_id--;
   264ac:	f110 0f02 	cmn.w	r0, #2
   264b0:	bf08      	it	eq
   264b2:	46b0      	moveq	r8, r6
   264b4:	4635      	mov	r5, r6
   264b6:	e7ec      	b.n	26492 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   264b8:	2701      	movs	r7, #1
   264ba:	e7e4      	b.n	26486 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   264bc:	f100 0358 	add.w	r3, r0, #88	; 0x58
   264c0:	eb0d 0003 	add.w	r0, sp, r3
   264c4:	2300      	movs	r3, #0
   264c6:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   264ca:	a903      	add	r1, sp, #12
   264cc:	4648      	mov	r0, r9
   264ce:	f000 fb5d 	bl	26b8c <strcmp>
   264d2:	2800      	cmp	r0, #0
   264d4:	d1ee      	bne.n	264b4 <settings_nvs_save+0x48>
		if (!delete) {
   264d6:	b32f      	cbz	r7, 26524 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   264d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   264da:	42b3      	cmp	r3, r6
   264dc:	d00b      	beq.n	264f6 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   264de:	4631      	mov	r1, r6
   264e0:	4658      	mov	r0, fp
   264e2:	f7ff fe80 	bl	261e6 <nvs_delete>
		if (rc >= 0) {
   264e6:	2800      	cmp	r0, #0
   264e8:	da12      	bge.n	26510 <settings_nvs_save+0xa4>
}
   264ea:	b017      	add	sp, #92	; 0x5c
   264ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   264f0:	b3b7      	cbz	r7, 26560 <settings_nvs_save+0xf4>
			return 0;
   264f2:	2000      	movs	r0, #0
   264f4:	e7f9      	b.n	264ea <settings_nvs_save+0x7e>
			cf->last_name_id--;
   264f6:	4622      	mov	r2, r4
   264f8:	1e73      	subs	r3, r6, #1
   264fa:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   264fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26502:	2302      	movs	r3, #2
   26504:	4658      	mov	r0, fp
   26506:	f7ec fe1b 	bl	13140 <nvs_write>
			if (rc < 0) {
   2650a:	2800      	cmp	r0, #0
   2650c:	dae7      	bge.n	264de <settings_nvs_save+0x72>
   2650e:	e7ec      	b.n	264ea <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   26510:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   26514:	313f      	adds	r1, #63	; 0x3f
   26516:	b289      	uxth	r1, r1
   26518:	4658      	mov	r0, fp
   2651a:	f7ff fe64 	bl	261e6 <nvs_delete>
	if (rc < 0) {
   2651e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   26522:	e7e2      	b.n	264ea <settings_nvs_save+0x7e>
		name_id--;
   26524:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   26526:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2652a:	d02a      	beq.n	26582 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2652c:	f104 0508 	add.w	r5, r4, #8
   26530:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   26534:	9a01      	ldr	r2, [sp, #4]
   26536:	4653      	mov	r3, sl
   26538:	b289      	uxth	r1, r1
   2653a:	4628      	mov	r0, r5
   2653c:	f7ec fe00 	bl	13140 <nvs_write>
	if (rc < 0) {
   26540:	2800      	cmp	r0, #0
   26542:	dbd2      	blt.n	264ea <settings_nvs_save+0x7e>
	if (write_name) {
   26544:	b977      	cbnz	r7, 26564 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   26546:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   26548:	4543      	cmp	r3, r8
   2654a:	d2d2      	bcs.n	264f2 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2654c:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2654e:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   26550:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   26554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26558:	4628      	mov	r0, r5
   2655a:	f7ec fdf1 	bl	13140 <nvs_write>
   2655e:	e7de      	b.n	2651e <settings_nvs_save+0xb2>
	write_name = true;
   26560:	2701      	movs	r7, #1
   26562:	e7e0      	b.n	26526 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   26564:	4648      	mov	r0, r9
   26566:	f000 fb01 	bl	26b6c <strlen>
   2656a:	464a      	mov	r2, r9
   2656c:	4603      	mov	r3, r0
   2656e:	4641      	mov	r1, r8
   26570:	4628      	mov	r0, r5
   26572:	f7ec fde5 	bl	13140 <nvs_write>
		if (rc < 0) {
   26576:	2800      	cmp	r0, #0
   26578:	dae5      	bge.n	26546 <settings_nvs_save+0xda>
   2657a:	e7b6      	b.n	264ea <settings_nvs_save+0x7e>
		return -EINVAL;
   2657c:	f06f 0015 	mvn.w	r0, #21
   26580:	e7b3      	b.n	264ea <settings_nvs_save+0x7e>
		return -ENOMEM;
   26582:	f06f 000b 	mvn.w	r0, #11
   26586:	e7b0      	b.n	264ea <settings_nvs_save+0x7e>

00026588 <settings_nvs_backend_init>:
{
   26588:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2658a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2658c:	6303      	str	r3, [r0, #48]	; 0x30
{
   2658e:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   26590:	b1c3      	cbz	r3, 265c4 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   26592:	f100 0608 	add.w	r6, r0, #8
   26596:	4630      	mov	r0, r6
   26598:	f7ec fbd2 	bl	12d40 <nvs_mount>
	if (rc) {
   2659c:	4605      	mov	r5, r0
   2659e:	b970      	cbnz	r0, 265be <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   265a0:	2302      	movs	r3, #2
   265a2:	f10d 0206 	add.w	r2, sp, #6
   265a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   265aa:	4630      	mov	r0, r6
   265ac:	f7ff fe1f 	bl	261ee <nvs_read>
	if (rc < 0) {
   265b0:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   265b2:	bfac      	ite	ge
   265b4:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   265b8:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   265bc:	8723      	strh	r3, [r4, #56]	; 0x38
}
   265be:	4628      	mov	r0, r5
   265c0:	b002      	add	sp, #8
   265c2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   265c4:	f06f 0512 	mvn.w	r5, #18
   265c8:	e7f9      	b.n	265be <settings_nvs_backend_init+0x36>

000265ca <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   265ca:	b538      	push	{r3, r4, r5, lr}
   265cc:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   265ce:	42ab      	cmp	r3, r5
{
   265d0:	4611      	mov	r1, r2
   265d2:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   265d4:	d804      	bhi.n	265e0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   265d6:	461a      	mov	r2, r3
   265d8:	f000 fb08 	bl	26bec <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   265dc:	4620      	mov	r0, r4
   265de:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   265e0:	2400      	movs	r4, #0
   265e2:	e7fb      	b.n	265dc <_copy+0x12>

000265e4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   265e4:	f000 bb0d 	b.w	26c02 <memset>

000265e8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   265e8:	09c3      	lsrs	r3, r0, #7
   265ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   265ee:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   265f2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   265f6:	b2c0      	uxtb	r0, r0
   265f8:	4770      	bx	lr

000265fa <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   265fa:	78cb      	ldrb	r3, [r1, #3]
   265fc:	7802      	ldrb	r2, [r0, #0]
   265fe:	4053      	eors	r3, r2
   26600:	7003      	strb	r3, [r0, #0]
   26602:	884b      	ldrh	r3, [r1, #2]
   26604:	7842      	ldrb	r2, [r0, #1]
   26606:	4053      	eors	r3, r2
   26608:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2660a:	680a      	ldr	r2, [r1, #0]
   2660c:	7883      	ldrb	r3, [r0, #2]
   2660e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26612:	7083      	strb	r3, [r0, #2]
   26614:	680a      	ldr	r2, [r1, #0]
   26616:	78c3      	ldrb	r3, [r0, #3]
   26618:	4053      	eors	r3, r2
   2661a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2661c:	79cb      	ldrb	r3, [r1, #7]
   2661e:	7902      	ldrb	r2, [r0, #4]
   26620:	4053      	eors	r3, r2
   26622:	7103      	strb	r3, [r0, #4]
   26624:	88cb      	ldrh	r3, [r1, #6]
   26626:	7942      	ldrb	r2, [r0, #5]
   26628:	4053      	eors	r3, r2
   2662a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2662c:	684a      	ldr	r2, [r1, #4]
   2662e:	7983      	ldrb	r3, [r0, #6]
   26630:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26634:	7183      	strb	r3, [r0, #6]
   26636:	684a      	ldr	r2, [r1, #4]
   26638:	79c3      	ldrb	r3, [r0, #7]
   2663a:	4053      	eors	r3, r2
   2663c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2663e:	7acb      	ldrb	r3, [r1, #11]
   26640:	7a02      	ldrb	r2, [r0, #8]
   26642:	4053      	eors	r3, r2
   26644:	7203      	strb	r3, [r0, #8]
   26646:	7a42      	ldrb	r2, [r0, #9]
   26648:	894b      	ldrh	r3, [r1, #10]
   2664a:	4053      	eors	r3, r2
   2664c:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2664e:	688a      	ldr	r2, [r1, #8]
   26650:	7a83      	ldrb	r3, [r0, #10]
   26652:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26656:	7283      	strb	r3, [r0, #10]
   26658:	688a      	ldr	r2, [r1, #8]
   2665a:	7ac3      	ldrb	r3, [r0, #11]
   2665c:	4053      	eors	r3, r2
   2665e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26660:	7bcb      	ldrb	r3, [r1, #15]
   26662:	7b02      	ldrb	r2, [r0, #12]
   26664:	4053      	eors	r3, r2
   26666:	7303      	strb	r3, [r0, #12]
   26668:	89cb      	ldrh	r3, [r1, #14]
   2666a:	7b42      	ldrb	r2, [r0, #13]
   2666c:	4053      	eors	r3, r2
   2666e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26670:	68ca      	ldr	r2, [r1, #12]
   26672:	7b83      	ldrb	r3, [r0, #14]
   26674:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26678:	7383      	strb	r3, [r0, #14]
   2667a:	68ca      	ldr	r2, [r1, #12]
   2667c:	7bc3      	ldrb	r3, [r0, #15]
   2667e:	4053      	eors	r3, r2
   26680:	73c3      	strb	r3, [r0, #15]
}
   26682:	4770      	bx	lr

00026684 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   26684:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26686:	7802      	ldrb	r2, [r0, #0]
   26688:	f88d 2000 	strb.w	r2, [sp]
   2668c:	7942      	ldrb	r2, [r0, #5]
   2668e:	f88d 2001 	strb.w	r2, [sp, #1]
   26692:	7a82      	ldrb	r2, [r0, #10]
   26694:	f88d 2002 	strb.w	r2, [sp, #2]
   26698:	7bc2      	ldrb	r2, [r0, #15]
   2669a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2669e:	7902      	ldrb	r2, [r0, #4]
   266a0:	f88d 2004 	strb.w	r2, [sp, #4]
   266a4:	7a42      	ldrb	r2, [r0, #9]
   266a6:	f88d 2005 	strb.w	r2, [sp, #5]
   266aa:	7b82      	ldrb	r2, [r0, #14]
   266ac:	f88d 2006 	strb.w	r2, [sp, #6]
   266b0:	78c2      	ldrb	r2, [r0, #3]
   266b2:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   266b6:	7a02      	ldrb	r2, [r0, #8]
   266b8:	f88d 2008 	strb.w	r2, [sp, #8]
   266bc:	7b42      	ldrb	r2, [r0, #13]
   266be:	f88d 2009 	strb.w	r2, [sp, #9]
   266c2:	7882      	ldrb	r2, [r0, #2]
   266c4:	f88d 200a 	strb.w	r2, [sp, #10]
   266c8:	79c2      	ldrb	r2, [r0, #7]
   266ca:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   266ce:	7b02      	ldrb	r2, [r0, #12]
   266d0:	f88d 200c 	strb.w	r2, [sp, #12]
   266d4:	7842      	ldrb	r2, [r0, #1]
   266d6:	7ac3      	ldrb	r3, [r0, #11]
   266d8:	f88d 200d 	strb.w	r2, [sp, #13]
   266dc:	7982      	ldrb	r2, [r0, #6]
   266de:	f88d 200e 	strb.w	r2, [sp, #14]
   266e2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   266e6:	2310      	movs	r3, #16
   266e8:	466a      	mov	r2, sp
   266ea:	4619      	mov	r1, r3
   266ec:	f7ff ff6d 	bl	265ca <_copy>
}
   266f0:	b005      	add	sp, #20
   266f2:	f85d fb04 	ldr.w	pc, [sp], #4

000266f6 <mult_row_column>:
{
   266f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   266f8:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   266fa:	7808      	ldrb	r0, [r1, #0]
{
   266fc:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   266fe:	f7ff ff73 	bl	265e8 <_double_byte>
   26702:	4605      	mov	r5, r0
   26704:	7860      	ldrb	r0, [r4, #1]
   26706:	f7ff ff6f 	bl	265e8 <_double_byte>
   2670a:	78a2      	ldrb	r2, [r4, #2]
   2670c:	7863      	ldrb	r3, [r4, #1]
   2670e:	4053      	eors	r3, r2
   26710:	78e2      	ldrb	r2, [r4, #3]
   26712:	4053      	eors	r3, r2
   26714:	405d      	eors	r5, r3
   26716:	4068      	eors	r0, r5
   26718:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2671a:	7860      	ldrb	r0, [r4, #1]
   2671c:	7827      	ldrb	r7, [r4, #0]
   2671e:	f7ff ff63 	bl	265e8 <_double_byte>
   26722:	4605      	mov	r5, r0
   26724:	78a0      	ldrb	r0, [r4, #2]
   26726:	f7ff ff5f 	bl	265e8 <_double_byte>
   2672a:	78a3      	ldrb	r3, [r4, #2]
   2672c:	405f      	eors	r7, r3
   2672e:	78e3      	ldrb	r3, [r4, #3]
   26730:	405f      	eors	r7, r3
   26732:	407d      	eors	r5, r7
   26734:	4068      	eors	r0, r5
   26736:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26738:	7863      	ldrb	r3, [r4, #1]
   2673a:	7827      	ldrb	r7, [r4, #0]
   2673c:	78a0      	ldrb	r0, [r4, #2]
   2673e:	405f      	eors	r7, r3
   26740:	f7ff ff52 	bl	265e8 <_double_byte>
   26744:	4605      	mov	r5, r0
   26746:	78e0      	ldrb	r0, [r4, #3]
   26748:	f7ff ff4e 	bl	265e8 <_double_byte>
   2674c:	78e3      	ldrb	r3, [r4, #3]
   2674e:	405f      	eors	r7, r3
   26750:	407d      	eors	r5, r7
   26752:	4068      	eors	r0, r5
   26754:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26756:	7820      	ldrb	r0, [r4, #0]
   26758:	f7ff ff46 	bl	265e8 <_double_byte>
   2675c:	7862      	ldrb	r2, [r4, #1]
   2675e:	7823      	ldrb	r3, [r4, #0]
   26760:	4053      	eors	r3, r2
   26762:	78a2      	ldrb	r2, [r4, #2]
   26764:	4053      	eors	r3, r2
   26766:	ea80 0503 	eor.w	r5, r0, r3
   2676a:	78e0      	ldrb	r0, [r4, #3]
   2676c:	f7ff ff3c 	bl	265e8 <_double_byte>
   26770:	b2ed      	uxtb	r5, r5
   26772:	4045      	eors	r5, r0
   26774:	70f5      	strb	r5, [r6, #3]
}
   26776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026778 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   26778:	b570      	push	{r4, r5, r6, lr}
   2677a:	4614      	mov	r4, r2
   2677c:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2677e:	4605      	mov	r5, r0
   26780:	2800      	cmp	r0, #0
   26782:	d049      	beq.n	26818 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26784:	2900      	cmp	r1, #0
   26786:	d049      	beq.n	2681c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26788:	2a00      	cmp	r2, #0
   2678a:	d049      	beq.n	26820 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2678c:	2310      	movs	r3, #16
   2678e:	460a      	mov	r2, r1
   26790:	4668      	mov	r0, sp
   26792:	4619      	mov	r1, r3
   26794:	f7ff ff19 	bl	265ca <_copy>
	add_round_key(state, s->words);
   26798:	4621      	mov	r1, r4
   2679a:	4668      	mov	r0, sp
   2679c:	f7ff ff2d 	bl	265fa <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   267a0:	3410      	adds	r4, #16
   267a2:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   267a6:	4668      	mov	r0, sp
   267a8:	f7ee f8d6 	bl	14958 <sub_bytes>
		shift_rows(state);
   267ac:	4668      	mov	r0, sp
   267ae:	f7ff ff69 	bl	26684 <shift_rows>
	mult_row_column(t, s);
   267b2:	4669      	mov	r1, sp
   267b4:	a804      	add	r0, sp, #16
   267b6:	f7ff ff9e 	bl	266f6 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   267ba:	a901      	add	r1, sp, #4
   267bc:	a805      	add	r0, sp, #20
   267be:	f7ff ff9a 	bl	266f6 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   267c2:	a902      	add	r1, sp, #8
   267c4:	a806      	add	r0, sp, #24
   267c6:	f7ff ff96 	bl	266f6 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   267ca:	a903      	add	r1, sp, #12
   267cc:	a807      	add	r0, sp, #28
   267ce:	f7ff ff92 	bl	266f6 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   267d2:	2310      	movs	r3, #16
   267d4:	4619      	mov	r1, r3
   267d6:	eb0d 0203 	add.w	r2, sp, r3
   267da:	4668      	mov	r0, sp
   267dc:	f7ff fef5 	bl	265ca <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   267e0:	4621      	mov	r1, r4
   267e2:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   267e4:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   267e6:	f7ff ff08 	bl	265fa <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   267ea:	42b4      	cmp	r4, r6
   267ec:	d1db      	bne.n	267a6 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   267ee:	f7ee f8b3 	bl	14958 <sub_bytes>
	shift_rows(state);
   267f2:	4668      	mov	r0, sp
   267f4:	f7ff ff46 	bl	26684 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   267f8:	4621      	mov	r1, r4
   267fa:	4668      	mov	r0, sp
   267fc:	f7ff fefd 	bl	265fa <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   26800:	2310      	movs	r3, #16
   26802:	4619      	mov	r1, r3
   26804:	466a      	mov	r2, sp
   26806:	4628      	mov	r0, r5
   26808:	f7ff fedf 	bl	265ca <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2680c:	4668      	mov	r0, sp
   2680e:	2210      	movs	r2, #16
   26810:	2100      	movs	r1, #0
   26812:	f7ff fee7 	bl	265e4 <_set>

	return TC_CRYPTO_SUCCESS;
   26816:	2001      	movs	r0, #1
}
   26818:	b008      	add	sp, #32
   2681a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2681c:	4608      	mov	r0, r1
   2681e:	e7fb      	b.n	26818 <tc_aes_encrypt+0xa0>
   26820:	4610      	mov	r0, r2
   26822:	e7f9      	b.n	26818 <tc_aes_encrypt+0xa0>

00026824 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   26824:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26826:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   26828:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2682a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2682e:	2b00      	cmp	r3, #0
   26830:	bfac      	ite	ge
   26832:	2300      	movge	r3, #0
   26834:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   26836:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2683a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2683e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   26840:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   26844:	d002      	beq.n	2684c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   26846:	7813      	ldrb	r3, [r2, #0]
   26848:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2684a:	e7f4      	b.n	26836 <gf_double+0x12>
	}
}
   2684c:	bd10      	pop	{r4, pc}

0002684e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2684e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26850:	b120      	cbz	r0, 2685c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26852:	2258      	movs	r2, #88	; 0x58
   26854:	2100      	movs	r1, #0
   26856:	f7ff fec5 	bl	265e4 <_set>
   2685a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2685c:	bd08      	pop	{r3, pc}

0002685e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2685e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26860:	4604      	mov	r4, r0
   26862:	b188      	cbz	r0, 26888 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26864:	2210      	movs	r2, #16
   26866:	2100      	movs	r1, #0
   26868:	f7ff febc 	bl	265e4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2686c:	2210      	movs	r2, #16
   2686e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26872:	2100      	movs	r1, #0
   26874:	f7ff feb6 	bl	265e4 <_set>
	s->leftover_offset = 0;
   26878:	2300      	movs	r3, #0
   2687a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2687c:	2200      	movs	r2, #0
   2687e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26882:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   26886:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26888:	bd10      	pop	{r4, pc}

0002688a <tc_cmac_setup>:
{
   2688a:	b570      	push	{r4, r5, r6, lr}
   2688c:	4604      	mov	r4, r0
   2688e:	460d      	mov	r5, r1
   26890:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26892:	b310      	cbz	r0, 268da <tc_cmac_setup+0x50>
   26894:	b311      	cbz	r1, 268dc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   26896:	2258      	movs	r2, #88	; 0x58
   26898:	2100      	movs	r1, #0
   2689a:	f7ff fea3 	bl	265e4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2689e:	4629      	mov	r1, r5
	s->sched = sched;
   268a0:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   268a2:	4630      	mov	r0, r6
   268a4:	f7ee f864 	bl	14970 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   268a8:	2210      	movs	r2, #16
   268aa:	2100      	movs	r1, #0
   268ac:	4620      	mov	r0, r4
   268ae:	f7ff fe99 	bl	265e4 <_set>
	gf_double (s->K1, s->iv);
   268b2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   268b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   268b8:	4621      	mov	r1, r4
   268ba:	4620      	mov	r0, r4
   268bc:	f7ff ff5c 	bl	26778 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   268c0:	4621      	mov	r1, r4
   268c2:	4628      	mov	r0, r5
   268c4:	f7ff ffae 	bl	26824 <gf_double>
	gf_double (s->K2, s->K1);
   268c8:	4629      	mov	r1, r5
   268ca:	f104 0020 	add.w	r0, r4, #32
   268ce:	f7ff ffa9 	bl	26824 <gf_double>
	tc_cmac_init(s);
   268d2:	4620      	mov	r0, r4
   268d4:	f7ff ffc3 	bl	2685e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   268d8:	2001      	movs	r0, #1
}
   268da:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   268dc:	4608      	mov	r0, r1
   268de:	e7fc      	b.n	268da <tc_cmac_setup+0x50>

000268e0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   268e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268e4:	460e      	mov	r6, r1
   268e6:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   268e8:	4604      	mov	r4, r0
   268ea:	2800      	cmp	r0, #0
   268ec:	d060      	beq.n	269b0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   268ee:	b1fa      	cbz	r2, 26930 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   268f0:	2900      	cmp	r1, #0
   268f2:	d05d      	beq.n	269b0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   268f4:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   268f8:	ea53 0102 	orrs.w	r1, r3, r2
   268fc:	d058      	beq.n	269b0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   268fe:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   26900:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   26904:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   26908:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2690c:	f1b8 0f00 	cmp.w	r8, #0
   26910:	d02c      	beq.n	2696c <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26912:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26916:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2691a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2691c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2691e:	d20a      	bcs.n	26936 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26920:	462b      	mov	r3, r5
   26922:	4632      	mov	r2, r6
   26924:	4629      	mov	r1, r5
   26926:	f7ff fe50 	bl	265ca <_copy>
			s->leftover_offset += data_length;
   2692a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2692c:	442b      	add	r3, r5
   2692e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   26930:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   26932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   26936:	463b      	mov	r3, r7
   26938:	4632      	mov	r2, r6
   2693a:	4639      	mov	r1, r7
   2693c:	f7ff fe45 	bl	265ca <_copy>
		data_length -= remaining_space;
   26940:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   26942:	2300      	movs	r3, #0
   26944:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26946:	4445      	add	r5, r8
		data += remaining_space;
   26948:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2694a:	1e63      	subs	r3, r4, #1
   2694c:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   26950:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26954:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26958:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2695a:	ea82 0200 	eor.w	r2, r2, r0
   2695e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26960:	d1f6      	bne.n	26950 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26962:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26964:	4621      	mov	r1, r4
   26966:	4620      	mov	r0, r4
   26968:	f7ff ff06 	bl	26778 <tc_aes_encrypt>
   2696c:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26970:	2d10      	cmp	r5, #16
   26972:	d80a      	bhi.n	2698a <tc_cmac_update+0xaa>
	if (data_length > 0) {
   26974:	2d00      	cmp	r5, #0
   26976:	d0db      	beq.n	26930 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   26978:	462b      	mov	r3, r5
   2697a:	4632      	mov	r2, r6
   2697c:	4629      	mov	r1, r5
   2697e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26982:	f7ff fe22 	bl	265ca <_copy>
		s->leftover_offset = data_length;
   26986:	6465      	str	r5, [r4, #68]	; 0x44
   26988:	e7d2      	b.n	26930 <tc_cmac_update+0x50>
   2698a:	1e63      	subs	r3, r4, #1
   2698c:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2698e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26992:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26996:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26998:	ea82 0200 	eor.w	r2, r2, r0
   2699c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2699e:	d1f6      	bne.n	2698e <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   269a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269a2:	4621      	mov	r1, r4
   269a4:	4620      	mov	r0, r4
   269a6:	f7ff fee7 	bl	26778 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   269aa:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   269ac:	3d10      	subs	r5, #16
   269ae:	e7df      	b.n	26970 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   269b0:	2000      	movs	r0, #0
   269b2:	e7be      	b.n	26932 <tc_cmac_update+0x52>

000269b4 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   269b4:	b570      	push	{r4, r5, r6, lr}
   269b6:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   269b8:	4605      	mov	r5, r0
   269ba:	b1e8      	cbz	r0, 269f8 <tc_cmac_final+0x44>
   269bc:	b369      	cbz	r1, 26a1a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   269be:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   269c0:	2a10      	cmp	r2, #16
   269c2:	d11a      	bne.n	269fa <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   269c4:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269c6:	1e63      	subs	r3, r4, #1
   269c8:	3901      	subs	r1, #1
   269ca:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   269ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   269d2:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   269d6:	4072      	eors	r2, r6
   269d8:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269dc:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   269de:	ea82 0206 	eor.w	r2, r2, r6
   269e2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   269e4:	d1f3      	bne.n	269ce <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   269e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   269e8:	4621      	mov	r1, r4
   269ea:	4628      	mov	r0, r5
   269ec:	f7ff fec4 	bl	26778 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   269f0:	4620      	mov	r0, r4
   269f2:	f7ff ff2c 	bl	2684e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   269f6:	2001      	movs	r0, #1
}
   269f8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   269fa:	f102 0030 	add.w	r0, r2, #48	; 0x30
   269fe:	2100      	movs	r1, #0
   26a00:	f1c2 0210 	rsb	r2, r2, #16
   26a04:	4420      	add	r0, r4
   26a06:	f7ff fded 	bl	265e4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26a0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26a0c:	4423      	add	r3, r4
   26a0e:	2280      	movs	r2, #128	; 0x80
   26a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26a14:	f104 0120 	add.w	r1, r4, #32
   26a18:	e7d5      	b.n	269c6 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26a1a:	4608      	mov	r0, r1
   26a1c:	e7ec      	b.n	269f8 <tc_cmac_final+0x44>

00026a1e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   26a1e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26a20:	6800      	ldr	r0, [r0, #0]
   26a22:	f7ee b817 	b.w	14a54 <z_arm_fatal_error>

00026a26 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26a26:	2100      	movs	r1, #0
   26a28:	2001      	movs	r0, #1
   26a2a:	f7ee b813 	b.w	14a54 <z_arm_fatal_error>

00026a2e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26a2e:	b508      	push	{r3, lr}
	handler();
   26a30:	f7ee f8d6 	bl	14be0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26a34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26a38:	f7ee b9ae 	b.w	14d98 <z_arm_exc_exit>

00026a3c <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   26a3c:	2300      	movs	r3, #0
   26a3e:	f7ec bf73 	b.w	13928 <z_impl_z_log_msg_static_create>

00026a42 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   26a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a46:	4684      	mov	ip, r0
   26a48:	460f      	mov	r7, r1
	register const char *s = nptr;
   26a4a:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   26a4c:	4621      	mov	r1, r4
   26a4e:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   26a52:	2b20      	cmp	r3, #32
   26a54:	d0fa      	beq.n	26a4c <strtoul+0xa>
   26a56:	f1a3 0009 	sub.w	r0, r3, #9
   26a5a:	2804      	cmp	r0, #4
   26a5c:	d9f6      	bls.n	26a4c <strtoul+0xa>
	} while (isspace((unsigned char)c) != 0);
	if (c == '-') {
   26a5e:	2b2d      	cmp	r3, #45	; 0x2d
   26a60:	d125      	bne.n	26aae <strtoul+0x6c>
		neg = 1;
		c = *s++;
   26a62:	784b      	ldrb	r3, [r1, #1]
   26a64:	1c8c      	adds	r4, r1, #2
		neg = 1;
   26a66:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   26a6a:	bb3a      	cbnz	r2, 26abc <strtoul+0x7a>
   26a6c:	2b30      	cmp	r3, #48	; 0x30
   26a6e:	d032      	beq.n	26ad6 <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   26a70:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26a72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   26a76:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   26a78:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   26a7c:	fb02 f801 	mul.w	r8, r2, r1
   26a80:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   26a84:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   26a86:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c) != 0) {
   26a8a:	2e09      	cmp	r6, #9
   26a8c:	d82a      	bhi.n	26ae4 <strtoul+0xa2>
			c -= '0';
   26a8e:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c) != 0) {
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   26a90:	429a      	cmp	r2, r3
   26a92:	dd37      	ble.n	26b04 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   26a94:	1c6e      	adds	r6, r5, #1
   26a96:	d007      	beq.n	26aa8 <strtoul+0x66>
   26a98:	4288      	cmp	r0, r1
   26a9a:	d830      	bhi.n	26afe <strtoul+0xbc>
   26a9c:	d101      	bne.n	26aa2 <strtoul+0x60>
   26a9e:	4543      	cmp	r3, r8
   26aa0:	dc2d      	bgt.n	26afe <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   26aa2:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   26aa6:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   26aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c) != 0) {
   26aac:	e7eb      	b.n	26a86 <strtoul+0x44>
	} else if (c == '+') {
   26aae:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   26ab0:	bf04      	itt	eq
   26ab2:	784b      	ldrbeq	r3, [r1, #1]
   26ab4:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   26ab6:	f04f 0e00 	mov.w	lr, #0
   26aba:	e7d6      	b.n	26a6a <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   26abc:	2a10      	cmp	r2, #16
   26abe:	d1d8      	bne.n	26a72 <strtoul+0x30>
   26ac0:	2b30      	cmp	r3, #48	; 0x30
   26ac2:	d1d6      	bne.n	26a72 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26ac4:	7821      	ldrb	r1, [r4, #0]
   26ac6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   26aca:	2958      	cmp	r1, #88	; 0x58
   26acc:	d1d1      	bne.n	26a72 <strtoul+0x30>
		c = s[1];
   26ace:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   26ad0:	2210      	movs	r2, #16
		s += 2;
   26ad2:	3402      	adds	r4, #2
	if (base == 0) {
   26ad4:	e7cd      	b.n	26a72 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   26ad6:	7822      	ldrb	r2, [r4, #0]
   26ad8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   26adc:	2a58      	cmp	r2, #88	; 0x58
   26ade:	d0f6      	beq.n	26ace <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   26ae0:	2208      	movs	r2, #8
   26ae2:	e7c6      	b.n	26a72 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26ae4:	f043 0620 	orr.w	r6, r3, #32
   26ae8:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c) != 0) {
   26aea:	2e19      	cmp	r6, #25
   26aec:	d80a      	bhi.n	26b04 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26aee:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) != 0 ? 'A' - 10 : 'a' - 10;
   26af2:	2e1a      	cmp	r6, #26
   26af4:	bf34      	ite	cc
   26af6:	2637      	movcc	r6, #55	; 0x37
   26af8:	2657      	movcs	r6, #87	; 0x57
   26afa:	1b9b      	subs	r3, r3, r6
   26afc:	e7c8      	b.n	26a90 <strtoul+0x4e>
			any = -1;
   26afe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26b02:	e7d1      	b.n	26aa8 <strtoul+0x66>
		}
	}
	if (any < 0) {
   26b04:	1c6b      	adds	r3, r5, #1
   26b06:	d107      	bne.n	26b18 <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26b08:	f7fc faee 	bl	230e8 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   26b0c:	2322      	movs	r3, #34	; 0x22
   26b0e:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   26b10:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   26b12:	b947      	cbnz	r7, 26b26 <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   26b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   26b18:	f1be 0f00 	cmp.w	lr, #0
   26b1c:	d000      	beq.n	26b20 <strtoul+0xde>
		acc = -acc;
   26b1e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   26b20:	2f00      	cmp	r7, #0
   26b22:	d0f7      	beq.n	26b14 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   26b24:	b10d      	cbz	r5, 26b2a <strtoul+0xe8>
   26b26:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   26b2a:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   26b2e:	e7f1      	b.n	26b14 <strtoul+0xd2>

00026b30 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   26b30:	3901      	subs	r1, #1
   26b32:	4603      	mov	r3, r0
   26b34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   26b38:	b90a      	cbnz	r2, 26b3e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   26b3a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   26b3c:	4770      	bx	lr
		*d = *s;
   26b3e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   26b42:	e7f7      	b.n	26b34 <strcpy+0x4>

00026b44 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
   26b44:	b510      	push	{r4, lr}
   26b46:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   26b48:	4603      	mov	r3, r0
   26b4a:	b922      	cbnz	r2, 26b56 <strncpy+0x12>
   26b4c:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   26b4e:	2100      	movs	r1, #0
	while (n > 0) {
   26b50:	4293      	cmp	r3, r2
   26b52:	d108      	bne.n	26b66 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
   26b54:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
   26b56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   26b5a:	2c00      	cmp	r4, #0
   26b5c:	d0f6      	beq.n	26b4c <strncpy+0x8>
		*d = *s;
   26b5e:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   26b62:	3a01      	subs	r2, #1
   26b64:	e7f1      	b.n	26b4a <strncpy+0x6>
		*d = '\0';
   26b66:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26b6a:	e7f1      	b.n	26b50 <strncpy+0xc>

00026b6c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   26b6c:	4603      	mov	r3, r0
	size_t n = 0;
   26b6e:	2000      	movs	r0, #0

	while (*s != '\0') {
   26b70:	5c1a      	ldrb	r2, [r3, r0]
   26b72:	b902      	cbnz	r2, 26b76 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26b74:	4770      	bx	lr
		n++;
   26b76:	3001      	adds	r0, #1
   26b78:	e7fa      	b.n	26b70 <strlen+0x4>

00026b7a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   26b7a:	4603      	mov	r3, r0
	size_t n = 0;
   26b7c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   26b7e:	5c1a      	ldrb	r2, [r3, r0]
   26b80:	b10a      	cbz	r2, 26b86 <strnlen+0xc>
   26b82:	4288      	cmp	r0, r1
   26b84:	d100      	bne.n	26b88 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   26b86:	4770      	bx	lr
		n++;
   26b88:	3001      	adds	r0, #1
   26b8a:	e7f8      	b.n	26b7e <strnlen+0x4>

00026b8c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   26b8c:	1e43      	subs	r3, r0, #1
   26b8e:	3901      	subs	r1, #1
   26b90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26b94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   26b98:	4282      	cmp	r2, r0
   26b9a:	d101      	bne.n	26ba0 <strcmp+0x14>
   26b9c:	2a00      	cmp	r2, #0
   26b9e:	d1f7      	bne.n	26b90 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   26ba0:	1a10      	subs	r0, r2, r0
   26ba2:	4770      	bx	lr

00026ba4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   26ba4:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   26ba6:	460b      	mov	r3, r1
   26ba8:	4605      	mov	r5, r0
   26baa:	b16a      	cbz	r2, 26bc8 <strncmp+0x24>
   26bac:	f810 6b01 	ldrb.w	r6, [r0], #1
   26bb0:	781c      	ldrb	r4, [r3, #0]
   26bb2:	42b4      	cmp	r4, r6
   26bb4:	f101 0101 	add.w	r1, r1, #1
   26bb8:	d100      	bne.n	26bbc <strncmp+0x18>
   26bba:	b91c      	cbnz	r4, 26bc4 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   26bbc:	782a      	ldrb	r2, [r5, #0]
   26bbe:	781b      	ldrb	r3, [r3, #0]
   26bc0:	1ad0      	subs	r0, r2, r3
   26bc2:	e002      	b.n	26bca <strncmp+0x26>
		n--;
   26bc4:	3a01      	subs	r2, #1
   26bc6:	e7ee      	b.n	26ba6 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   26bc8:	4610      	mov	r0, r2
}
   26bca:	bd70      	pop	{r4, r5, r6, pc}

00026bcc <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26bcc:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26bce:	b15a      	cbz	r2, 26be8 <memcmp+0x1c>
   26bd0:	3901      	subs	r1, #1
   26bd2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   26bd4:	f810 2b01 	ldrb.w	r2, [r0], #1
   26bd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   26bdc:	42a0      	cmp	r0, r4
   26bde:	d001      	beq.n	26be4 <memcmp+0x18>
   26be0:	429a      	cmp	r2, r3
   26be2:	d0f7      	beq.n	26bd4 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   26be4:	1ad0      	subs	r0, r2, r3
}
   26be6:	bd10      	pop	{r4, pc}
		return 0;
   26be8:	4610      	mov	r0, r2
   26bea:	e7fc      	b.n	26be6 <memcmp+0x1a>

00026bec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   26bec:	b510      	push	{r4, lr}
   26bee:	1e43      	subs	r3, r0, #1
   26bf0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   26bf2:	4291      	cmp	r1, r2
   26bf4:	d100      	bne.n	26bf8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   26bf6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   26bf8:	f811 4b01 	ldrb.w	r4, [r1], #1
   26bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   26c00:	e7f7      	b.n	26bf2 <memcpy+0x6>

00026c02 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   26c02:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   26c04:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   26c06:	4603      	mov	r3, r0
	while (n > 0) {
   26c08:	4293      	cmp	r3, r2
   26c0a:	d100      	bne.n	26c0e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   26c0c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   26c0e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26c12:	e7f9      	b.n	26c08 <memset+0x6>

00026c14 <_stdout_hook_default>:
}
   26c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26c18:	4770      	bx	lr

00026c1a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   26c1a:	684b      	ldr	r3, [r1, #4]
   26c1c:	2b01      	cmp	r3, #1
   26c1e:	dd07      	ble.n	26c30 <sprintf_out+0x16>
		*(p->ptr) = c;
   26c20:	680b      	ldr	r3, [r1, #0]
   26c22:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   26c24:	680b      	ldr	r3, [r1, #0]
   26c26:	3301      	adds	r3, #1
   26c28:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   26c2a:	684b      	ldr	r3, [r1, #4]
   26c2c:	3b01      	subs	r3, #1
   26c2e:	604b      	str	r3, [r1, #4]
}
   26c30:	2000      	movs	r0, #0
   26c32:	4770      	bx	lr

00026c34 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   26c34:	2806      	cmp	r0, #6
   26c36:	d108      	bne.n	26c4a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26c38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26c3c:	2201      	movs	r2, #1
   26c3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26c42:	f3bf 8f4f 	dsb	sy
        __WFE();
   26c46:	bf20      	wfe
    while (true)
   26c48:	e7fd      	b.n	26c46 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   26c4a:	4770      	bx	lr

00026c4c <pm_state_exit_post_ops>:
   26c4c:	2300      	movs	r3, #0
   26c4e:	f383 8811 	msr	BASEPRI, r3
   26c52:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26c56:	4770      	bx	lr

00026c58 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26c58:	b530      	push	{r4, r5, lr}
   26c5a:	b085      	sub	sp, #20
   26c5c:	4604      	mov	r4, r0
   26c5e:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26c60:	4668      	mov	r0, sp
   26c62:	2203      	movs	r2, #3
   26c64:	f7ff ffc2 	bl	26bec <memcpy>
	(void)memset(res + 3, 0, 13);
   26c68:	220d      	movs	r2, #13
   26c6a:	2100      	movs	r1, #0
   26c6c:	f10d 0003 	add.w	r0, sp, #3
   26c70:	f7ff ffc7 	bl	26c02 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26c74:	4620      	mov	r0, r4
   26c76:	466a      	mov	r2, sp
   26c78:	4669      	mov	r1, sp
   26c7a:	f002 fd89 	bl	29790 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26c7e:	4604      	mov	r4, r0
   26c80:	b920      	cbnz	r0, 26c8c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   26c82:	2203      	movs	r2, #3
   26c84:	4669      	mov	r1, sp
   26c86:	4628      	mov	r0, r5
   26c88:	f7ff ffb0 	bl	26bec <memcpy>

	return 0;
}
   26c8c:	4620      	mov	r0, r4
   26c8e:	b005      	add	sp, #20
   26c90:	bd30      	pop	{r4, r5, pc}

00026c92 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26c92:	b513      	push	{r0, r1, r4, lr}
   26c94:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26c96:	aa01      	add	r2, sp, #4
   26c98:	3103      	adds	r1, #3
   26c9a:	f7ff ffdd 	bl	26c58 <ah>
	if (err) {
   26c9e:	b948      	cbnz	r0, 26cb4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26ca0:	2203      	movs	r2, #3
   26ca2:	a901      	add	r1, sp, #4
   26ca4:	4620      	mov	r0, r4
   26ca6:	f7ff ff91 	bl	26bcc <memcmp>
   26caa:	fab0 f080 	clz	r0, r0
   26cae:	0940      	lsrs	r0, r0, #5
}
   26cb0:	b002      	add	sp, #8
   26cb2:	bd10      	pop	{r4, pc}
		return false;
   26cb4:	2000      	movs	r0, #0
   26cb6:	e7fb      	b.n	26cb0 <bt_rpa_irk_matches+0x1e>

00026cb8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26cb8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26cba:	1cce      	adds	r6, r1, #3
{
   26cbc:	4605      	mov	r5, r0
   26cbe:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26cc0:	4630      	mov	r0, r6
   26cc2:	2103      	movs	r1, #3
   26cc4:	f7fb f916 	bl	21ef4 <bt_rand>
	if (err) {
   26cc8:	b960      	cbnz	r0, 26ce4 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26cca:	7963      	ldrb	r3, [r4, #5]
   26ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26cd4:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26cd6:	4622      	mov	r2, r4
   26cd8:	4631      	mov	r1, r6
   26cda:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26ce0:	f7ff bfba 	b.w	26c58 <ah>
}
   26ce4:	bd70      	pop	{r4, r5, r6, pc}

00026ce6 <z_log_msg_static_create.constprop.0>:
   26ce6:	2300      	movs	r3, #0
   26ce8:	f7ec be1e 	b.w	13928 <z_impl_z_log_msg_static_create>

00026cec <bt_settings_decode_key>:
{
   26cec:	b570      	push	{r4, r5, r6, lr}
   26cee:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26cf0:	2100      	movs	r1, #0
{
   26cf2:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26cf4:	f7ff fb9a 	bl	2642c <settings_name_next>
   26cf8:	280d      	cmp	r0, #13
   26cfa:	d118      	bne.n	26d2e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26cfc:	7b23      	ldrb	r3, [r4, #12]
   26cfe:	2b30      	cmp	r3, #48	; 0x30
   26d00:	d013      	beq.n	26d2a <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   26d02:	2b31      	cmp	r3, #49	; 0x31
   26d04:	d113      	bne.n	26d2e <bt_settings_decode_key+0x42>
   26d06:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   26d08:	f805 3b06 	strb.w	r3, [r5], #6
   26d0c:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26d10:	462a      	mov	r2, r5
   26d12:	4620      	mov	r0, r4
   26d14:	2301      	movs	r3, #1
   26d16:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   26d18:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26d1a:	f7fe fa3c 	bl	25196 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   26d1e:	42b4      	cmp	r4, r6
   26d20:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   26d24:	d1f4      	bne.n	26d10 <bt_settings_decode_key+0x24>
	return 0;
   26d26:	2000      	movs	r0, #0
}
   26d28:	bd70      	pop	{r4, r5, r6, pc}
   26d2a:	2300      	movs	r3, #0
   26d2c:	e7ec      	b.n	26d08 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   26d2e:	f06f 0015 	mvn.w	r0, #21
   26d32:	e7f9      	b.n	26d28 <bt_settings_decode_key+0x3c>

00026d34 <bt_uuid_cmp>:
{
   26d34:	b510      	push	{r4, lr}
   26d36:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   26d38:	7801      	ldrb	r1, [r0, #0]
   26d3a:	7822      	ldrb	r2, [r4, #0]
   26d3c:	428a      	cmp	r2, r1
{
   26d3e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26d40:	d00f      	beq.n	26d62 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   26d42:	4669      	mov	r1, sp
   26d44:	f7ef f800 	bl	15d48 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26d48:	a905      	add	r1, sp, #20
   26d4a:	4620      	mov	r0, r4
   26d4c:	f7ee fffc 	bl	15d48 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26d50:	2210      	movs	r2, #16
   26d52:	f10d 0115 	add.w	r1, sp, #21
   26d56:	f10d 0001 	add.w	r0, sp, #1
   26d5a:	f7ff ff37 	bl	26bcc <memcmp>
}
   26d5e:	b00a      	add	sp, #40	; 0x28
   26d60:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   26d62:	2a01      	cmp	r2, #1
   26d64:	d006      	beq.n	26d74 <bt_uuid_cmp+0x40>
   26d66:	2a02      	cmp	r2, #2
   26d68:	d007      	beq.n	26d7a <bt_uuid_cmp+0x46>
   26d6a:	b972      	cbnz	r2, 26d8a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26d6c:	8840      	ldrh	r0, [r0, #2]
   26d6e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26d70:	1ac0      	subs	r0, r0, r3
   26d72:	e7f4      	b.n	26d5e <bt_uuid_cmp+0x2a>
   26d74:	6840      	ldr	r0, [r0, #4]
   26d76:	6863      	ldr	r3, [r4, #4]
   26d78:	e7fa      	b.n	26d70 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26d7a:	2210      	movs	r2, #16
   26d7c:	1c61      	adds	r1, r4, #1
   26d7e:	3001      	adds	r0, #1
}
   26d80:	b00a      	add	sp, #40	; 0x28
   26d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26d86:	f7ff bf21 	b.w	26bcc <memcmp>
	switch (u1->type) {
   26d8a:	f06f 0015 	mvn.w	r0, #21
   26d8e:	e7e6      	b.n	26d5e <bt_uuid_cmp+0x2a>

00026d90 <bt_uuid_create>:
	switch (data_len) {
   26d90:	2a04      	cmp	r2, #4
{
   26d92:	b510      	push	{r4, lr}
	switch (data_len) {
   26d94:	d00a      	beq.n	26dac <bt_uuid_create+0x1c>
   26d96:	2a10      	cmp	r2, #16
   26d98:	d00d      	beq.n	26db6 <bt_uuid_create+0x26>
   26d9a:	2a02      	cmp	r2, #2
   26d9c:	f04f 0300 	mov.w	r3, #0
   26da0:	d10f      	bne.n	26dc2 <bt_uuid_create+0x32>
		uuid->type = BT_UUID_TYPE_16;
   26da2:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26da4:	880b      	ldrh	r3, [r1, #0]
   26da6:	8043      	strh	r3, [r0, #2]
	return true;
   26da8:	2001      	movs	r0, #1
}
   26daa:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   26dac:	2301      	movs	r3, #1
   26dae:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26db0:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26db2:	6043      	str	r3, [r0, #4]
		break;
   26db4:	e7f8      	b.n	26da8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   26db6:	2302      	movs	r3, #2
   26db8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26dbc:	f7ff ff16 	bl	26bec <memcpy>
		break;
   26dc0:	e7f2      	b.n	26da8 <bt_uuid_create+0x18>
	switch (data_len) {
   26dc2:	4618      	mov	r0, r3
   26dc4:	e7f1      	b.n	26daa <bt_uuid_create+0x1a>

00026dc6 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26dc6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26dc8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26dca:	2106      	movs	r1, #6
{
   26dcc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26dce:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26dd2:	f7fb f88f 	bl	21ef4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26dd6:	b918      	cbnz	r0, 26de0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26dd8:	79a3      	ldrb	r3, [r4, #6]
   26dda:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26dde:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26de0:	bd10      	pop	{r4, pc}

00026de2 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   26de2:	b510      	push	{r4, lr}
   26de4:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   26de6:	2207      	movs	r2, #7
   26de8:	f7ff ff00 	bl	26bec <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   26dec:	7823      	ldrb	r3, [r4, #0]
   26dee:	f023 0302 	bic.w	r3, r3, #2
   26df2:	7023      	strb	r3, [r4, #0]
}
   26df4:	bd10      	pop	{r4, pc}

00026df6 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   26df6:	7800      	ldrb	r0, [r0, #0]
}
   26df8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   26dfc:	4770      	bx	lr

00026dfe <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26dfe:	280f      	cmp	r0, #15
   26e00:	d807      	bhi.n	26e12 <bt_hci_evt_get_flags+0x14>
   26e02:	280d      	cmp	r0, #13
   26e04:	d80b      	bhi.n	26e1e <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   26e06:	2805      	cmp	r0, #5
   26e08:	bf08      	it	eq
   26e0a:	2003      	moveq	r0, #3
   26e0c:	bf18      	it	ne
   26e0e:	2002      	movne	r0, #2
   26e10:	4770      	bx	lr
	switch (evt) {
   26e12:	2813      	cmp	r0, #19
   26e14:	d003      	beq.n	26e1e <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   26e16:	281a      	cmp	r0, #26
   26e18:	bf08      	it	eq
   26e1a:	2001      	moveq	r0, #1
   26e1c:	e7f6      	b.n	26e0c <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   26e1e:	2001      	movs	r0, #1
	}
}
   26e20:	4770      	bx	lr

00026e22 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26e22:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   26e26:	b183      	cbz	r3, 26e4a <update_sec_level+0x28>
   26e28:	7b5a      	ldrb	r2, [r3, #13]
   26e2a:	07d1      	lsls	r1, r2, #31
   26e2c:	d50d      	bpl.n	26e4a <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26e2e:	06d2      	lsls	r2, r2, #27
   26e30:	d50d      	bpl.n	26e4e <update_sec_level+0x2c>
   26e32:	7b1b      	ldrb	r3, [r3, #12]
   26e34:	2b10      	cmp	r3, #16
   26e36:	bf14      	ite	ne
   26e38:	2303      	movne	r3, #3
   26e3a:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   26e3c:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26e3e:	7a80      	ldrb	r0, [r0, #10]
}
   26e40:	4298      	cmp	r0, r3
   26e42:	bf8c      	ite	hi
   26e44:	2000      	movhi	r0, #0
   26e46:	2001      	movls	r0, #1
   26e48:	4770      	bx	lr
   26e4a:	2302      	movs	r3, #2
   26e4c:	e7f6      	b.n	26e3c <update_sec_level+0x1a>
   26e4e:	2303      	movs	r3, #3
   26e50:	e7f4      	b.n	26e3c <update_sec_level+0x1a>

00026e52 <hci_vendor_event>:
}
   26e52:	4770      	bx	lr

00026e54 <atomic_or>:
{
   26e54:	b510      	push	{r4, lr}
   26e56:	4603      	mov	r3, r0
}
   26e58:	f3bf 8f5b 	dmb	ish
   26e5c:	e853 0f00 	ldrex	r0, [r3]
   26e60:	ea40 0201 	orr.w	r2, r0, r1
   26e64:	e843 2400 	strex	r4, r2, [r3]
   26e68:	2c00      	cmp	r4, #0
   26e6a:	d1f7      	bne.n	26e5c <atomic_or+0x8>
   26e6c:	f3bf 8f5b 	dmb	ish
   26e70:	bd10      	pop	{r4, pc}

00026e72 <unpair_remote>:
{
   26e72:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   26e74:	4601      	mov	r1, r0
   26e76:	7818      	ldrb	r0, [r3, #0]
   26e78:	f7ef b874 	b.w	15f64 <unpair>

00026e7c <z_log_msg_static_create.constprop.0>:
   26e7c:	2300      	movs	r3, #0
   26e7e:	f7ec bd53 	b.w	13928 <z_impl_z_log_msg_static_create>

00026e82 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26e82:	f3bf 8f5b 	dmb	ish
   26e86:	e850 3f00 	ldrex	r3, [r0]
   26e8a:	400b      	ands	r3, r1
   26e8c:	e840 3200 	strex	r2, r3, [r0]
   26e90:	2a00      	cmp	r2, #0
   26e92:	d1f8      	bne.n	26e86 <atomic_and.isra.0+0x4>
   26e94:	f3bf 8f5b 	dmb	ish
}
   26e98:	4770      	bx	lr

00026e9a <sys_put_le64>:
	dst[1] = val >> 8;
   26e9a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26e9e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26ea0:	0e00      	lsrs	r0, r0, #24
   26ea2:	7053      	strb	r3, [r2, #1]
   26ea4:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26ea6:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26ea8:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26eac:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26eae:	7093      	strb	r3, [r2, #2]
   26eb0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26eb2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26eb4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26eb6:	71d1      	strb	r1, [r2, #7]
}
   26eb8:	4770      	bx	lr

00026eba <bt_hci_disconnect>:
{
   26eba:	b570      	push	{r4, r5, r6, lr}
   26ebc:	4606      	mov	r6, r0
   26ebe:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26ec0:	f240 4006 	movw	r0, #1030	; 0x406
   26ec4:	2103      	movs	r1, #3
   26ec6:	f7ef fd35 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   26eca:	4604      	mov	r4, r0
   26ecc:	b168      	cbz	r0, 26eea <bt_hci_disconnect+0x30>
   26ece:	2103      	movs	r1, #3
   26ed0:	300c      	adds	r0, #12
   26ed2:	f002 f8f9 	bl	290c8 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   26ed6:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   26ed8:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26eda:	4621      	mov	r1, r4
   26edc:	2200      	movs	r2, #0
}
   26ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26ee2:	f240 4006 	movw	r0, #1030	; 0x406
   26ee6:	f7ef bd5f 	b.w	169a8 <bt_hci_cmd_send_sync>
}
   26eea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26eee:	bd70      	pop	{r4, r5, r6, pc}

00026ef0 <bt_le_set_data_len>:
{
   26ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26ef2:	4607      	mov	r7, r0
   26ef4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26ef6:	f242 0022 	movw	r0, #8226	; 0x2022
   26efa:	2106      	movs	r1, #6
{
   26efc:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26efe:	f7ef fd19 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   26f02:	4604      	mov	r4, r0
   26f04:	b178      	cbz	r0, 26f26 <bt_le_set_data_len+0x36>
   26f06:	2106      	movs	r1, #6
   26f08:	300c      	adds	r0, #12
   26f0a:	f002 f8dd 	bl	290c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26f0e:	883b      	ldrh	r3, [r7, #0]
   26f10:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   26f12:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   26f14:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26f16:	4621      	mov	r1, r4
   26f18:	2200      	movs	r2, #0
}
   26f1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   26f1e:	f242 0022 	movw	r0, #8226	; 0x2022
   26f22:	f7ef bd41 	b.w	169a8 <bt_hci_cmd_send_sync>
}
   26f26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026f2c <bt_le_set_phy>:
{
   26f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26f30:	4681      	mov	r9, r0
   26f32:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26f34:	f242 0032 	movw	r0, #8242	; 0x2032
   26f38:	2107      	movs	r1, #7
{
   26f3a:	f89d a020 	ldrb.w	sl, [sp, #32]
   26f3e:	4617      	mov	r7, r2
   26f40:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   26f42:	f7ef fcf7 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   26f46:	4605      	mov	r5, r0
   26f48:	b1a0      	cbz	r0, 26f74 <bt_le_set_phy+0x48>
   26f4a:	2107      	movs	r1, #7
   26f4c:	300c      	adds	r0, #12
   26f4e:	f002 f8bb 	bl	290c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   26f52:	f8b9 3000 	ldrh.w	r3, [r9]
   26f56:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   26f58:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   26f5c:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   26f5e:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   26f60:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26f64:	4629      	mov	r1, r5
   26f66:	2200      	movs	r2, #0
}
   26f68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   26f6c:	f242 0032 	movw	r0, #8242	; 0x2032
   26f70:	f7ef bd1a 	b.w	169a8 <bt_hci_cmd_send_sync>
}
   26f74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026f7c <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   26f7c:	68c0      	ldr	r0, [r0, #12]
   26f7e:	f7ef bdf5 	b.w	16b6c <bt_hci_le_enh_conn_complete>

00026f82 <bt_le_conn_params_valid>:
{
   26f82:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   26f84:	8803      	ldrh	r3, [r0, #0]
   26f86:	8842      	ldrh	r2, [r0, #2]
   26f88:	4293      	cmp	r3, r2
   26f8a:	d819      	bhi.n	26fc0 <bt_le_conn_params_valid+0x3e>
   26f8c:	2b05      	cmp	r3, #5
   26f8e:	d917      	bls.n	26fc0 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   26f90:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   26f94:	d814      	bhi.n	26fc0 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   26f96:	8883      	ldrh	r3, [r0, #4]
   26f98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   26f9c:	d210      	bcs.n	26fc0 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   26f9e:	88c0      	ldrh	r0, [r0, #6]
   26fa0:	f1a0 010a 	sub.w	r1, r0, #10
   26fa4:	b289      	uxth	r1, r1
   26fa6:	f640 4476 	movw	r4, #3190	; 0xc76
   26faa:	42a1      	cmp	r1, r4
   26fac:	d808      	bhi.n	26fc0 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   26fae:	3301      	adds	r3, #1
   26fb0:	b29b      	uxth	r3, r3
   26fb2:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   26fb4:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   26fb8:	bf34      	ite	cc
   26fba:	2001      	movcc	r0, #1
   26fbc:	2000      	movcs	r0, #0
}
   26fbe:	bd10      	pop	{r4, pc}
		return false;
   26fc0:	2000      	movs	r0, #0
   26fc2:	e7fc      	b.n	26fbe <bt_le_conn_params_valid+0x3c>

00026fc4 <le_conn_param_neg_reply>:
{
   26fc4:	b570      	push	{r4, r5, r6, lr}
   26fc6:	4606      	mov	r6, r0
   26fc8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   26fca:	f242 0021 	movw	r0, #8225	; 0x2021
   26fce:	2103      	movs	r1, #3
   26fd0:	f7ef fcb0 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   26fd4:	4604      	mov	r4, r0
   26fd6:	b918      	cbnz	r0, 26fe0 <le_conn_param_neg_reply+0x1c>
}
   26fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   26fdc:	f7ef b858 	b.w	16090 <le_conn_param_neg_reply.part.0>
   26fe0:	2103      	movs	r1, #3
   26fe2:	300c      	adds	r0, #12
   26fe4:	f002 f870 	bl	290c8 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   26fe8:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   26fea:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   26fec:	4621      	mov	r1, r4
   26fee:	f242 0021 	movw	r0, #8225	; 0x2021
}
   26ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   26ff6:	f7f0 b897 	b.w	17128 <bt_hci_cmd_send>

00026ffa <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   26ffa:	f240 3041 	movw	r0, #833	; 0x341
   26ffe:	4770      	bx	lr

00027000 <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   27000:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   27002:	f7f8 fa03 	bl	1f40c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   27006:	b118      	cbz	r0, 27010 <bt_addr_le_is_bonded+0x10>
   27008:	89c0      	ldrh	r0, [r0, #14]
   2700a:	3800      	subs	r0, #0
   2700c:	bf18      	it	ne
   2700e:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   27010:	bd08      	pop	{r3, pc}

00027012 <bt_addr_le_eq>:
{
   27012:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   27014:	2207      	movs	r2, #7
   27016:	f7ff fdd9 	bl	26bcc <memcmp>
}
   2701a:	fab0 f080 	clz	r0, r0
   2701e:	0940      	lsrs	r0, r0, #5
   27020:	bd08      	pop	{r3, pc}

00027022 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   27022:	2207      	movs	r2, #7
   27024:	f7ff bde2 	b.w	26bec <memcpy>

00027028 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27028:	f3bf 8f5b 	dmb	ish
   2702c:	6800      	ldr	r0, [r0, #0]
   2702e:	f3bf 8f5b 	dmb	ish
}
   27032:	4770      	bx	lr

00027034 <atomic_test_bit>:
{
   27034:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27036:	f7ff fff7 	bl	27028 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2703a:	4108      	asrs	r0, r1
}
   2703c:	f000 0001 	and.w	r0, r0, #1
   27040:	bd08      	pop	{r3, pc}

00027042 <adv_is_private_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27042:	f100 0210 	add.w	r2, r0, #16
{
   27046:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   27048:	4610      	mov	r0, r2
{
   2704a:	460c      	mov	r4, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2704c:	2107      	movs	r1, #7
   2704e:	f7ff fff1 	bl	27034 <atomic_test_bit>
   27052:	b130      	cbz	r0, 27062 <adv_is_private_enabled+0x20>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   27054:	210d      	movs	r1, #13
   27056:	4610      	mov	r0, r2
   27058:	f7ff ffec 	bl	27034 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2705c:	b908      	cbnz	r0, 27062 <adv_is_private_enabled+0x20>
		*adv_enabled = true;
   2705e:	2301      	movs	r3, #1
   27060:	7023      	strb	r3, [r4, #0]
}
   27062:	bd10      	pop	{r4, pc}

00027064 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   27064:	7a03      	ldrb	r3, [r0, #8]
   27066:	075b      	lsls	r3, r3, #29
{
   27068:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2706a:	d505      	bpl.n	27078 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2706c:	4601      	mov	r1, r0
   2706e:	322a      	adds	r2, #42	; 0x2a
   27070:	f811 0b01 	ldrb.w	r0, [r1], #1
   27074:	f7f0 bd12 	b.w	17a9c <hci_id_add>
}
   27078:	4770      	bx	lr

0002707a <z_log_msg_static_create.constprop.0>:
   2707a:	2300      	movs	r3, #0
   2707c:	f7ec bc54 	b.w	13928 <z_impl_z_log_msg_static_create>

00027080 <addr_res_enable>:
{
   27080:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27082:	2101      	movs	r1, #1
{
   27084:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27086:	f242 002d 	movw	r0, #8237	; 0x202d
   2708a:	f7ef fc53 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   2708e:	4604      	mov	r4, r0
   27090:	b158      	cbz	r0, 270aa <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   27092:	4629      	mov	r1, r5
   27094:	300c      	adds	r0, #12
   27096:	f002 f826 	bl	290e6 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2709a:	4621      	mov	r1, r4
   2709c:	2200      	movs	r2, #0
}
   2709e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   270a2:	f242 002d 	movw	r0, #8237	; 0x202d
   270a6:	f7ef bc7f 	b.w	169a8 <bt_hci_cmd_send_sync>
}
   270aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   270ae:	bd38      	pop	{r3, r4, r5, pc}

000270b0 <atomic_or.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   270b0:	f3bf 8f5b 	dmb	ish
   270b4:	e850 3f00 	ldrex	r3, [r0]
   270b8:	430b      	orrs	r3, r1
   270ba:	e840 3200 	strex	r2, r3, [r0]
   270be:	2a00      	cmp	r2, #0
   270c0:	d1f8      	bne.n	270b4 <atomic_or.isra.0+0x4>
   270c2:	f3bf 8f5b 	dmb	ish
}
   270c6:	4770      	bx	lr

000270c8 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270c8:	f100 0210 	add.w	r2, r0, #16
{
   270cc:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270ce:	2107      	movs	r1, #7
{
   270d0:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   270d2:	4610      	mov	r0, r2
   270d4:	f7ff ffae 	bl	27034 <atomic_test_bit>
   270d8:	b150      	cbz	r0, 270f0 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   270da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   270de:	4610      	mov	r0, r2
   270e0:	f7ff ffe6 	bl	270b0 <atomic_or.isra.0>
		bt_le_adv_set_enable(adv, false);
   270e4:	4620      	mov	r0, r4
   270e6:	2100      	movs	r1, #0
}
   270e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_set_enable(adv, false);
   270ec:	f000 b975 	b.w	273da <bt_le_adv_set_enable>
}
   270f0:	bd10      	pop	{r4, pc}

000270f2 <find_rl_conflict>:
{
   270f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conflict->found) {
   270f6:	684f      	ldr	r7, [r1, #4]
{
   270f8:	b086      	sub	sp, #24
   270fa:	4605      	mov	r5, r0
   270fc:	460c      	mov	r4, r1
	if (conflict->found) {
   270fe:	b9c7      	cbnz	r7, 27132 <find_rl_conflict+0x40>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   27100:	7a03      	ldrb	r3, [r0, #8]
   27102:	075b      	lsls	r3, r3, #29
   27104:	d515      	bpl.n	27132 <find_rl_conflict+0x40>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   27106:	6808      	ldr	r0, [r1, #0]
   27108:	1c69      	adds	r1, r5, #1
   2710a:	3001      	adds	r0, #1
   2710c:	f7ff ff81 	bl	27012 <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   27110:	f8d4 8000 	ldr.w	r8, [r4]
   27114:	2216      	movs	r2, #22
   27116:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   27118:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   2711a:	4668      	mov	r0, sp
   2711c:	f7ff fd71 	bl	26c02 <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   27120:	2210      	movs	r2, #16
   27122:	4669      	mov	r1, sp
   27124:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   27128:	f7ff fd50 	bl	26bcc <memcmp>
   2712c:	b920      	cbnz	r0, 27138 <find_rl_conflict+0x46>
	if (addr_conflict || irk_conflict) {
   2712e:	b106      	cbz	r6, 27132 <find_rl_conflict+0x40>
		conflict->found = resident;
   27130:	6065      	str	r5, [r4, #4]
}
   27132:	b006      	add	sp, #24
   27134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27138:	6820      	ldr	r0, [r4, #0]
   2713a:	2210      	movs	r2, #16
   2713c:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   27140:	302a      	adds	r0, #42	; 0x2a
   27142:	f7ff fd43 	bl	26bcc <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   27146:	2800      	cmp	r0, #0
   27148:	d0f2      	beq.n	27130 <find_rl_conflict+0x3e>
   2714a:	e7f0      	b.n	2712e <find_rl_conflict+0x3c>

0002714c <adv_unpause_enabled>:
{
   2714c:	b410      	push	{r4}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2714e:	f100 0310 	add.w	r3, r0, #16
   27152:	f3bf 8f5b 	dmb	ish
   27156:	e853 2f00 	ldrex	r2, [r3]
   2715a:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   2715e:	e843 1400 	strex	r4, r1, [r3]
   27162:	2c00      	cmp	r4, #0
   27164:	d1f7      	bne.n	27156 <adv_unpause_enabled+0xa>
   27166:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2716a:	0413      	lsls	r3, r2, #16
   2716c:	d503      	bpl.n	27176 <adv_unpause_enabled+0x2a>
}
   2716e:	bc10      	pop	{r4}
		bt_le_adv_set_enable(adv, true);
   27170:	2101      	movs	r1, #1
   27172:	f000 b932 	b.w	273da <bt_le_adv_set_enable>
}
   27176:	bc10      	pop	{r4}
   27178:	4770      	bx	lr

0002717a <adv_rpa_invalidate>:
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   2717a:	f100 0210 	add.w	r2, r0, #16
{
   2717e:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   27180:	2106      	movs	r1, #6
   27182:	4610      	mov	r0, r2
   27184:	f7ff ff56 	bl	27034 <atomic_test_bit>
   27188:	b980      	cbnz	r0, 271ac <adv_rpa_invalidate+0x32>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   2718a:	210d      	movs	r1, #13
   2718c:	4610      	mov	r0, r2
   2718e:	f7ff ff51 	bl	27034 <atomic_test_bit>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED) &&
   27192:	b958      	cbnz	r0, 271ac <adv_rpa_invalidate+0x32>
   27194:	f3bf 8f5b 	dmb	ish
   27198:	e852 3f00 	ldrex	r3, [r2]
   2719c:	f023 0310 	bic.w	r3, r3, #16
   271a0:	e842 3100 	strex	r1, r3, [r2]
   271a4:	2900      	cmp	r1, #0
   271a6:	d1f7      	bne.n	27198 <adv_rpa_invalidate+0x1e>
   271a8:	f3bf 8f5b 	dmb	ish
}
   271ac:	bd08      	pop	{r3, pc}

000271ae <bt_lookup_id_addr>:
{
   271ae:	b510      	push	{r4, lr}
   271b0:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   271b2:	b930      	cbnz	r0, 271c2 <bt_lookup_id_addr+0x14>
   271b4:	b119      	cbz	r1, 271be <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   271b6:	f7f8 f8e5 	bl	1f384 <bt_keys_find_irk>
		if (keys) {
   271ba:	b100      	cbz	r0, 271be <bt_lookup_id_addr+0x10>
			return &keys->addr;
   271bc:	1c44      	adds	r4, r0, #1
}
   271be:	4620      	mov	r0, r4
   271c0:	bd10      	pop	{r4, pc}
		return NULL;
   271c2:	2400      	movs	r4, #0
   271c4:	e7fb      	b.n	271be <bt_lookup_id_addr+0x10>

000271c6 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   271c6:	b118      	cbz	r0, 271d0 <bt_id_set_adv_random_addr+0xa>
   271c8:	b111      	cbz	r1, 271d0 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   271ca:	4608      	mov	r0, r1
   271cc:	f7f0 bdd6 	b.w	17d7c <set_random_address>
}
   271d0:	f06f 0015 	mvn.w	r0, #21
   271d4:	4770      	bx	lr

000271d6 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   271d6:	b110      	cbz	r0, 271de <bt_id_set_adv_private_addr+0x8>
		return bt_id_set_private_addr(adv->id);
   271d8:	7800      	ldrb	r0, [r0, #0]
   271da:	f7f0 be91 	b.w	17f00 <bt_id_set_private_addr>
}
   271de:	f06f 0015 	mvn.w	r0, #21
   271e2:	4770      	bx	lr

000271e4 <bt_id_adv_random_addr_check>:
}
   271e4:	3800      	subs	r0, #0
   271e6:	bf18      	it	ne
   271e8:	2001      	movne	r0, #1
   271ea:	4770      	bx	lr

000271ec <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   271ec:	7a03      	ldrb	r3, [r0, #8]
   271ee:	07d9      	lsls	r1, r3, #31
   271f0:	d504      	bpl.n	271fc <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   271f2:	f023 0301 	bic.w	r3, r3, #1
   271f6:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   271f8:	f7f0 bf3c 	b.w	18074 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   271fc:	0799      	lsls	r1, r3, #30
   271fe:	d504      	bpl.n	2720a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27200:	f023 0302 	bic.w	r3, r3, #2
   27204:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   27206:	f7f0 bf4f 	b.w	180a8 <bt_id_del>
}
   2720a:	4770      	bx	lr

0002720c <get_adv_channel_map>:
{
   2720c:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2720e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   27212:	bf0c      	ite	eq
   27214:	2007      	moveq	r0, #7
   27216:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   27218:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2721a:	bf48      	it	mi
   2721c:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   27220:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   27222:	bf48      	it	mi
   27224:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   27228:	4770      	bx	lr

0002722a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2722a:	f3bf 8f5b 	dmb	ish
   2722e:	6800      	ldr	r0, [r0, #0]
   27230:	f3bf 8f5b 	dmb	ish
}
   27234:	4770      	bx	lr

00027236 <atomic_and>:
{
   27236:	b510      	push	{r4, lr}
   27238:	4603      	mov	r3, r0
}
   2723a:	f3bf 8f5b 	dmb	ish
   2723e:	e853 0f00 	ldrex	r0, [r3]
   27242:	ea00 0201 	and.w	r2, r0, r1
   27246:	e843 2400 	strex	r4, r2, [r3]
   2724a:	2c00      	cmp	r4, #0
   2724c:	d1f7      	bne.n	2723e <atomic_and+0x8>
   2724e:	f3bf 8f5b 	dmb	ish
   27252:	bd10      	pop	{r4, pc}

00027254 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27254:	2301      	movs	r3, #1
{
   27256:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27258:	fa03 f101 	lsl.w	r1, r3, r1
{
   2725c:	4604      	mov	r4, r0
	if (val) {
   2725e:	b162      	cbz	r2, 2727a <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27260:	f3bf 8f5b 	dmb	ish
   27264:	e854 3f00 	ldrex	r3, [r4]
   27268:	430b      	orrs	r3, r1
   2726a:	e844 3200 	strex	r2, r3, [r4]
   2726e:	2a00      	cmp	r2, #0
   27270:	d1f8      	bne.n	27264 <atomic_set_bit_to+0x10>
   27272:	f3bf 8f5b 	dmb	ish
	}
}
   27276:	bc10      	pop	{r4}
   27278:	4770      	bx	lr
   2727a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2727c:	43c9      	mvns	r1, r1
   2727e:	f7ff bfda 	b.w	27236 <atomic_and>

00027282 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   27282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27286:	b087      	sub	sp, #28
   27288:	4605      	mov	r5, r0
   2728a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2728e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   27292:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   27296:	460c      	mov	r4, r1
   27298:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2729a:	2100      	movs	r1, #0
   2729c:	2210      	movs	r2, #16
   2729e:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   272a0:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   272a2:	f7ff fcae 	bl	26c02 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   272a6:	b9ee      	cbnz	r6, 272e4 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   272a8:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   272ac:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   272ae:	a902      	add	r1, sp, #8
   272b0:	f242 0008 	movw	r0, #8200	; 0x2008
   272b4:	f7f1 f95a 	bl	1856c <hci_set_ad>
		if (err) {
   272b8:	4604      	mov	r4, r0
   272ba:	b978      	cbnz	r0, 272dc <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   272bc:	f1ba 0f00 	cmp.w	sl, #0
   272c0:	d13e      	bne.n	27340 <le_adv_update.constprop.0+0xbe>
   272c2:	3510      	adds	r5, #16
   272c4:	f3bf 8f5b 	dmb	ish
   272c8:	e855 3f00 	ldrex	r3, [r5]
   272cc:	f043 0304 	orr.w	r3, r3, #4
   272d0:	e845 3200 	strex	r2, r3, [r5]
   272d4:	2a00      	cmp	r2, #0
   272d6:	d1f7      	bne.n	272c8 <le_adv_update.constprop.0+0x46>
   272d8:	f3bf 8f5b 	dmb	ish
}
   272dc:	4620      	mov	r0, r4
   272de:	b007      	add	sp, #28
   272e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   272e4:	f7f0 fb8a 	bl	179fc <bt_get_name>
   272e8:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   272ea:	b9e4      	cbnz	r4, 27326 <le_adv_update.constprop.0+0xa4>
   272ec:	bb37      	cbnz	r7, 2733c <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   272ee:	4658      	mov	r0, fp
   272f0:	f7ff fc3c 	bl	26b6c <strlen>
   272f4:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   272f6:	2e01      	cmp	r6, #1
		d[0].data = ad;
   272f8:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   272fc:	f88d 3000 	strb.w	r3, [sp]
   27300:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   27304:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   27308:	d1d0      	bne.n	272ac <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   2730a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   2730e:	9605      	str	r6, [sp, #20]
			d_len = 2;
   27310:	2202      	movs	r2, #2
   27312:	e7cc      	b.n	272ae <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27314:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   27318:	3a08      	subs	r2, #8
   2731a:	2a01      	cmp	r2, #1
   2731c:	d925      	bls.n	2736a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2731e:	3301      	adds	r3, #1
   27320:	4598      	cmp	r8, r3
   27322:	d1f7      	bne.n	27314 <le_adv_update.constprop.0+0x92>
   27324:	e7e2      	b.n	272ec <le_adv_update.constprop.0+0x6a>
   27326:	2300      	movs	r3, #0
   27328:	e7fa      	b.n	27320 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2732a:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2732e:	3a08      	subs	r2, #8
   27330:	2a01      	cmp	r2, #1
   27332:	d91a      	bls.n	2736a <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   27334:	3301      	adds	r3, #1
   27336:	4599      	cmp	r9, r3
   27338:	d1f7      	bne.n	2732a <le_adv_update.constprop.0+0xa8>
   2733a:	e7d8      	b.n	272ee <le_adv_update.constprop.0+0x6c>
   2733c:	2300      	movs	r3, #0
   2733e:	e7fa      	b.n	27336 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   27340:	2e02      	cmp	r6, #2
   27342:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   27346:	bf08      	it	eq
   27348:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2734a:	a902      	add	r1, sp, #8
			d_len = 2;
   2734c:	bf08      	it	eq
   2734e:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   27350:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   27354:	bf08      	it	eq
   27356:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2735a:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2735e:	f7f1 f905 	bl	1856c <hci_set_ad>
		if (err) {
   27362:	2800      	cmp	r0, #0
   27364:	d0ad      	beq.n	272c2 <le_adv_update.constprop.0+0x40>
   27366:	4604      	mov	r4, r0
   27368:	e7b8      	b.n	272dc <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   2736a:	f06f 0415 	mvn.w	r4, #21
   2736e:	e7b5      	b.n	272dc <le_adv_update.constprop.0+0x5a>

00027370 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   27370:	6843      	ldr	r3, [r0, #4]
   27372:	f013 0008 	ands.w	r0, r3, #8
   27376:	d00a      	beq.n	2738e <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   27378:	035a      	lsls	r2, r3, #13
   2737a:	d407      	bmi.n	2738c <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2737c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   27380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27384:	bf14      	ite	ne
   27386:	2002      	movne	r0, #2
   27388:	2001      	moveq	r0, #1
   2738a:	4770      	bx	lr
   2738c:	2001      	movs	r0, #1
}
   2738e:	4770      	bx	lr

00027390 <bt_le_adv_set_enable_legacy>:
{
   27390:	b570      	push	{r4, r5, r6, lr}
   27392:	4606      	mov	r6, r0
   27394:	b086      	sub	sp, #24
   27396:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27398:	f242 000a 	movw	r0, #8202	; 0x200a
   2739c:	2101      	movs	r1, #1
   2739e:	f7ef fac9 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   273a2:	4604      	mov	r4, r0
   273a4:	b1b0      	cbz	r0, 273d4 <bt_le_adv_set_enable_legacy+0x44>
   273a6:	300c      	adds	r0, #12
	if (enable) {
   273a8:	b195      	cbz	r5, 273d0 <bt_le_adv_set_enable_legacy+0x40>
   273aa:	2101      	movs	r1, #1
   273ac:	f001 fe9b 	bl	290e6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   273b0:	f106 0210 	add.w	r2, r6, #16
   273b4:	a903      	add	r1, sp, #12
   273b6:	4620      	mov	r0, r4
   273b8:	9500      	str	r5, [sp, #0]
   273ba:	2307      	movs	r3, #7
   273bc:	f7ef faa8 	bl	16910 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   273c0:	2200      	movs	r2, #0
   273c2:	4621      	mov	r1, r4
   273c4:	f242 000a 	movw	r0, #8202	; 0x200a
   273c8:	f7ef faee 	bl	169a8 <bt_hci_cmd_send_sync>
}
   273cc:	b006      	add	sp, #24
   273ce:	bd70      	pop	{r4, r5, r6, pc}
   273d0:	4629      	mov	r1, r5
   273d2:	e7eb      	b.n	273ac <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   273d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   273d8:	e7f8      	b.n	273cc <bt_le_adv_set_enable_legacy+0x3c>

000273da <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   273da:	f7ff bfd9 	b.w	27390 <bt_le_adv_set_enable_legacy>

000273de <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   273de:	3018      	adds	r0, #24
   273e0:	f002 bcfc 	b.w	29ddc <k_work_cancel_delayable>

000273e4 <sys_slist_find_and_remove>:
	return list->head;
   273e4:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   273e6:	2200      	movs	r2, #0
   273e8:	b90b      	cbnz	r3, 273ee <sys_slist_find_and_remove+0xa>
   273ea:	4618      	mov	r0, r3
   273ec:	4770      	bx	lr
   273ee:	428b      	cmp	r3, r1
   273f0:	d110      	bne.n	27414 <sys_slist_find_and_remove+0x30>
	return node->next;
   273f2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   273f4:	b942      	cbnz	r2, 27408 <sys_slist_find_and_remove+0x24>
   273f6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   273f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   273fa:	4291      	cmp	r1, r2
   273fc:	d100      	bne.n	27400 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   273fe:	6043      	str	r3, [r0, #4]
	parent->next = child;
   27400:	2300      	movs	r3, #0
   27402:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27404:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   27406:	4770      	bx	lr
	parent->next = child;
   27408:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2740a:	6843      	ldr	r3, [r0, #4]
   2740c:	4299      	cmp	r1, r3
	list->tail = node;
   2740e:	bf08      	it	eq
   27410:	6042      	streq	r2, [r0, #4]
}
   27412:	e7f5      	b.n	27400 <sys_slist_find_and_remove+0x1c>
	return node->next;
   27414:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27416:	681b      	ldr	r3, [r3, #0]
   27418:	e7e6      	b.n	273e8 <sys_slist_find_and_remove+0x4>

0002741a <atomic_and>:
{
   2741a:	b510      	push	{r4, lr}
   2741c:	4603      	mov	r3, r0
}
   2741e:	f3bf 8f5b 	dmb	ish
   27422:	e853 0f00 	ldrex	r0, [r3]
   27426:	ea00 0201 	and.w	r2, r0, r1
   2742a:	e843 2400 	strex	r4, r2, [r3]
   2742e:	2c00      	cmp	r4, #0
   27430:	d1f7      	bne.n	27422 <atomic_and+0x8>
   27432:	f3bf 8f5b 	dmb	ish
   27436:	bd10      	pop	{r4, pc}

00027438 <z_log_msg_static_create.constprop.0>:
   27438:	2300      	movs	r3, #0
   2743a:	f7ec ba75 	b.w	13928 <z_impl_z_log_msg_static_create>

0002743e <tx_complete_work>:
	tx_notify(conn);
   2743e:	3828      	subs	r0, #40	; 0x28
   27440:	f7f1 bda8 	b.w	18f94 <tx_notify>

00027444 <bt_conn_reset_rx_state>:
{
   27444:	b510      	push	{r4, lr}
   27446:	4604      	mov	r4, r0
	if (!conn->rx) {
   27448:	6900      	ldr	r0, [r0, #16]
   2744a:	b118      	cbz	r0, 27454 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2744c:	f7f8 faea 	bl	1fa24 <net_buf_unref>
	conn->rx = NULL;
   27450:	2300      	movs	r3, #0
   27452:	6123      	str	r3, [r4, #16]
}
   27454:	bd10      	pop	{r4, pc}

00027456 <conn_cleanup>:
{
   27456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2745a:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   2745c:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2745e:	f104 0638 	add.w	r6, r4, #56	; 0x38
   27462:	2300      	movs	r3, #0
   27464:	2200      	movs	r2, #0
   27466:	4630      	mov	r0, r6
   27468:	f001 fdcd 	bl	29006 <net_buf_get>
   2746c:	4603      	mov	r3, r0
   2746e:	b950      	cbnz	r0, 27486 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   27470:	4620      	mov	r0, r4
   27472:	f7ff ffe7 	bl	27444 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   27476:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2747a:	2200      	movs	r2, #0
}
   2747c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   27480:	2300      	movs	r3, #0
   27482:	f7fc bbf9 	b.w	23c78 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   27486:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   27488:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   2748a:	f7f8 facb 	bl	1fa24 <net_buf_unref>
		if (tx) {
   2748e:	2d00      	cmp	r5, #0
   27490:	d0e7      	beq.n	27462 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   27492:	4629      	mov	r1, r5
   27494:	4620      	mov	r0, r4
   27496:	f7f1 fdad 	bl	18ff4 <conn_tx_destroy>
   2749a:	e7e0      	b.n	2745e <conn_cleanup+0x8>

0002749c <bt_conn_ref>:
{
   2749c:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2749e:	f3bf 8f5b 	dmb	ish
   274a2:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   274a6:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   274aa:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   274ae:	b17b      	cbz	r3, 274d0 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   274b0:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   274b4:	1c59      	adds	r1, r3, #1
   274b6:	e852 4f00 	ldrex	r4, [r2]
   274ba:	429c      	cmp	r4, r3
   274bc:	d104      	bne.n	274c8 <bt_conn_ref+0x2c>
   274be:	e842 1c00 	strex	ip, r1, [r2]
   274c2:	f1bc 0f00 	cmp.w	ip, #0
   274c6:	d1f6      	bne.n	274b6 <bt_conn_ref+0x1a>
   274c8:	f3bf 8f5b 	dmb	ish
   274cc:	d1e7      	bne.n	2749e <bt_conn_ref+0x2>
}
   274ce:	bd10      	pop	{r4, pc}
			return NULL;
   274d0:	4618      	mov	r0, r3
   274d2:	e7fc      	b.n	274ce <bt_conn_ref+0x32>

000274d4 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   274d4:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   274d8:	f3bf 8f5b 	dmb	ish
   274dc:	e853 1f00 	ldrex	r1, [r3]
   274e0:	3901      	subs	r1, #1
   274e2:	e843 1200 	strex	r2, r1, [r3]
   274e6:	2a00      	cmp	r2, #0
   274e8:	d1f8      	bne.n	274dc <bt_conn_unref+0x8>
   274ea:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   274ee:	8842      	ldrh	r2, [r0, #2]
   274f0:	f240 1301 	movw	r3, #257	; 0x101
   274f4:	429a      	cmp	r2, r3
   274f6:	d108      	bne.n	2750a <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   274f8:	f3bf 8f5b 	dmb	ish
   274fc:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   27500:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   27504:	b90b      	cbnz	r3, 2750a <bt_conn_unref+0x36>
		bt_le_adv_resume();
   27506:	f7f1 bb0d 	b.w	18b24 <bt_le_adv_resume>
}
   2750a:	4770      	bx	lr

0002750c <conn_lookup_handle>:
{
   2750c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27510:	4607      	mov	r7, r0
   27512:	460e      	mov	r6, r1
   27514:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27516:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27518:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2751c:	42b4      	cmp	r4, r6
   2751e:	d103      	bne.n	27528 <conn_lookup_handle+0x1c>
	return NULL;
   27520:	2300      	movs	r3, #0
}
   27522:	4618      	mov	r0, r3
   27524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27528:	fb09 7004 	mla	r0, r9, r4, r7
   2752c:	f7ff ffb6 	bl	2749c <bt_conn_ref>
   27530:	4603      	mov	r3, r0
		if (!conn) {
   27532:	b158      	cbz	r0, 2754c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27534:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27536:	2d01      	cmp	r5, #1
   27538:	d002      	beq.n	27540 <conn_lookup_handle+0x34>
   2753a:	3d07      	subs	r5, #7
   2753c:	2d01      	cmp	r5, #1
   2753e:	d803      	bhi.n	27548 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27540:	881a      	ldrh	r2, [r3, #0]
   27542:	4542      	cmp	r2, r8
   27544:	d0ed      	beq.n	27522 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27546:	4618      	mov	r0, r3
   27548:	f7ff ffc4 	bl	274d4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2754c:	3401      	adds	r4, #1
   2754e:	e7e5      	b.n	2751c <conn_lookup_handle+0x10>

00027550 <bt_conn_connected>:
{
   27550:	b510      	push	{r4, lr}
   27552:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27554:	f7f2 fc9a 	bl	19e8c <bt_l2cap_connected>
	notify_connected(conn);
   27558:	4620      	mov	r0, r4
}
   2755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2755e:	f7f1 bce1 	b.w	18f24 <notify_connected>

00027562 <bt_conn_disconnect>:
{
   27562:	b510      	push	{r4, lr}
	switch (conn->state) {
   27564:	7b43      	ldrb	r3, [r0, #13]
   27566:	3b02      	subs	r3, #2
{
   27568:	4604      	mov	r4, r0
	switch (conn->state) {
   2756a:	2b06      	cmp	r3, #6
   2756c:	d816      	bhi.n	2759c <bt_conn_disconnect+0x3a>
   2756e:	e8df f003 	tbb	[pc, r3]
   27572:	1504      	.short	0x1504
   27574:	0b091515 	.word	0x0b091515
   27578:	09          	.byte	0x09
   27579:	00          	.byte	0x00
		conn->err = reason;
   2757a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2757c:	2100      	movs	r1, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2757e:	4620      	mov	r0, r4
   27580:	f7f1 ffe4 	bl	1954c <bt_conn_set_state>
{
   27584:	2000      	movs	r0, #0
}
   27586:	bd10      	pop	{r4, pc}
	err = bt_hci_disconnect(conn->handle, reason);
   27588:	8800      	ldrh	r0, [r0, #0]
   2758a:	f7ff fc96 	bl	26eba <bt_hci_disconnect>
	if (err) {
   2758e:	2800      	cmp	r0, #0
   27590:	d1f9      	bne.n	27586 <bt_conn_disconnect+0x24>
	if (conn->state == BT_CONN_CONNECTED) {
   27592:	7b63      	ldrb	r3, [r4, #13]
   27594:	2b07      	cmp	r3, #7
   27596:	d1f5      	bne.n	27584 <bt_conn_disconnect+0x22>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   27598:	2108      	movs	r1, #8
   2759a:	e7f0      	b.n	2757e <bt_conn_disconnect+0x1c>
		return -ENOTCONN;
   2759c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   275a0:	e7f1      	b.n	27586 <bt_conn_disconnect+0x24>

000275a2 <bt_conn_ltk_present>:
{
   275a2:	b510      	push	{r4, lr}
   275a4:	4604      	mov	r4, r0
	const struct bt_keys *keys = conn->le.keys;
   275a6:	f8d0 00b8 	ldr.w	r0, [r0, #184]	; 0xb8
	if (!keys) {
   275aa:	b928      	cbnz	r0, 275b8 <bt_conn_ltk_present+0x16>
		keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   275ac:	7a20      	ldrb	r0, [r4, #8]
   275ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   275b2:	f7f7 ff2b 	bl	1f40c <bt_keys_find_addr>
	if (keys) {
   275b6:	b138      	cbz	r0, 275c8 <bt_conn_ltk_present+0x26>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   275b8:	78e2      	ldrb	r2, [r4, #3]
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   275ba:	89c3      	ldrh	r3, [r0, #14]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   275bc:	b92a      	cbnz	r2, 275ca <bt_conn_ltk_present+0x28>
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_PERIPH_LTK);
   275be:	f013 0f21 	tst.w	r3, #33	; 0x21
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   275c2:	bf14      	ite	ne
   275c4:	2001      	movne	r0, #1
   275c6:	2000      	moveq	r0, #0
}
   275c8:	bd10      	pop	{r4, pc}
			return keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK);
   275ca:	f013 0f24 	tst.w	r3, #36	; 0x24
   275ce:	e7f8      	b.n	275c2 <bt_conn_ltk_present+0x20>

000275d0 <bt_conn_set_security>:
{
   275d0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   275d2:	7b43      	ldrb	r3, [r0, #13]
   275d4:	2b07      	cmp	r3, #7
{
   275d6:	4604      	mov	r4, r0
   275d8:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   275da:	d126      	bne.n	2762a <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   275dc:	7a43      	ldrb	r3, [r0, #9]
   275de:	428b      	cmp	r3, r1
   275e0:	d219      	bcs.n	27616 <bt_conn_set_security+0x46>
   275e2:	7a83      	ldrb	r3, [r0, #10]
   275e4:	428b      	cmp	r3, r1
   275e6:	d216      	bcs.n	27616 <bt_conn_set_security+0x46>
	if (val) {
   275e8:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   275ea:	f100 0004 	add.w	r0, r0, #4
   275ee:	d514      	bpl.n	2761a <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   275f0:	f3bf 8f5b 	dmb	ish
   275f4:	e850 3f00 	ldrex	r3, [r0]
   275f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   275fc:	e840 3200 	strex	r2, r3, [r0]
   27600:	2a00      	cmp	r2, #0
   27602:	d1f7      	bne.n	275f4 <bt_conn_set_security+0x24>
   27604:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   27608:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2760c:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2760e:	4620      	mov	r0, r4
   27610:	f7f6 ff1e 	bl	1e450 <bt_smp_start_security>
	if (err) {
   27614:	b930      	cbnz	r0, 27624 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   27616:	2000      	movs	r0, #0
}
   27618:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2761a:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2761e:	f7ff fefc 	bl	2741a <atomic_and>
   27622:	e7f1      	b.n	27608 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   27624:	7a63      	ldrb	r3, [r4, #9]
   27626:	72a3      	strb	r3, [r4, #10]
   27628:	e7f6      	b.n	27618 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2762a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2762e:	e7f3      	b.n	27618 <bt_conn_set_security+0x48>

00027630 <bt_conn_get_security>:
}
   27630:	7a40      	ldrb	r0, [r0, #9]
   27632:	4770      	bx	lr

00027634 <bt_conn_is_peer_addr_le>:
{
   27634:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27636:	7a03      	ldrb	r3, [r0, #8]
   27638:	428b      	cmp	r3, r1
{
   2763a:	4604      	mov	r4, r0
   2763c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2763e:	d115      	bne.n	2766c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27640:	f100 0188 	add.w	r1, r0, #136	; 0x88
   27644:	2207      	movs	r2, #7
   27646:	4628      	mov	r0, r5
   27648:	f7ff fac0 	bl	26bcc <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2764c:	b180      	cbz	r0, 27670 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2764e:	78e3      	ldrb	r3, [r4, #3]
   27650:	2207      	movs	r2, #7
   27652:	b943      	cbnz	r3, 27666 <bt_conn_is_peer_addr_le+0x32>
   27654:	f104 0196 	add.w	r1, r4, #150	; 0x96
   27658:	4628      	mov	r0, r5
   2765a:	f7ff fab7 	bl	26bcc <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2765e:	fab0 f080 	clz	r0, r0
   27662:	0940      	lsrs	r0, r0, #5
}
   27664:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   27666:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2766a:	e7f5      	b.n	27658 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2766c:	2000      	movs	r0, #0
   2766e:	e7f9      	b.n	27664 <bt_conn_is_peer_addr_le+0x30>
		return true;
   27670:	2001      	movs	r0, #1
   27672:	e7f7      	b.n	27664 <bt_conn_is_peer_addr_le+0x30>

00027674 <bt_conn_get_dst>:
}
   27674:	3088      	adds	r0, #136	; 0x88
   27676:	4770      	bx	lr

00027678 <bt_conn_le_conn_update>:
{
   27678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2767a:	4607      	mov	r7, r0
   2767c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2767e:	f242 0013 	movw	r0, #8211	; 0x2013
   27682:	210e      	movs	r1, #14
   27684:	f7ef f956 	bl	16934 <bt_hci_cmd_create>
	if (!buf) {
   27688:	4606      	mov	r6, r0
   2768a:	b1d0      	cbz	r0, 276c2 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2768c:	210e      	movs	r1, #14
   2768e:	300c      	adds	r0, #12
   27690:	f001 fd1a 	bl	290c8 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27694:	220e      	movs	r2, #14
   27696:	4604      	mov	r4, r0
   27698:	2100      	movs	r1, #0
   2769a:	f7ff fab2 	bl	26c02 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2769e:	883b      	ldrh	r3, [r7, #0]
   276a0:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   276a2:	882b      	ldrh	r3, [r5, #0]
   276a4:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   276a6:	886b      	ldrh	r3, [r5, #2]
   276a8:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   276aa:	88ab      	ldrh	r3, [r5, #4]
   276ac:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   276ae:	88eb      	ldrh	r3, [r5, #6]
   276b0:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   276b2:	4631      	mov	r1, r6
   276b4:	2200      	movs	r2, #0
}
   276b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   276ba:	f242 0013 	movw	r0, #8211	; 0x2013
   276be:	f7ef b973 	b.w	169a8 <bt_hci_cmd_send_sync>
}
   276c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   276c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000276c8 <l2cap_connected>:
}
   276c8:	4770      	bx	lr

000276ca <z_log_msg_static_create.constprop.0>:
   276ca:	2300      	movs	r3, #0
   276cc:	f7ec b92c 	b.w	13928 <z_impl_z_log_msg_static_create>

000276d0 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   276d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   276d2:	4605      	mov	r5, r0
   276d4:	460f      	mov	r7, r1
   276d6:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   276d8:	2300      	movs	r3, #0
   276da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   276de:	2104      	movs	r1, #4
   276e0:	2000      	movs	r0, #0
   276e2:	f7f2 f85f 	bl	197a4 <bt_conn_create_pdu_timeout>
	if (!buf) {
   276e6:	4604      	mov	r4, r0
   276e8:	b920      	cbnz	r0, 276f4 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   276ea:	4628      	mov	r0, r5
}
   276ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   276f0:	f7f2 bb88 	b.w	19e04 <l2cap_create_le_sig_pdu.part.0>
   276f4:	2104      	movs	r1, #4
   276f6:	300c      	adds	r0, #12
   276f8:	f001 fce6 	bl	290c8 <net_buf_simple_add>
	hdr->code = code;
   276fc:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   276fe:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   27700:	8046      	strh	r6, [r0, #2]
}
   27702:	4620      	mov	r0, r4
   27704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027706 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   27706:	4770      	bx	lr

00027708 <bt_l2cap_chan_del>:
{
   27708:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2770a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2770e:	4604      	mov	r4, r0
	if (!chan->conn) {
   27710:	b123      	cbz	r3, 2771c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27712:	686b      	ldr	r3, [r5, #4]
   27714:	b103      	cbz	r3, 27718 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27716:	4798      	blx	r3
	chan->conn = NULL;
   27718:	2300      	movs	r3, #0
   2771a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2771c:	68e3      	ldr	r3, [r4, #12]
   2771e:	b10b      	cbz	r3, 27724 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27720:	4620      	mov	r0, r4
   27722:	4798      	blx	r3
	if (ops->released) {
   27724:	6a2b      	ldr	r3, [r5, #32]
   27726:	b11b      	cbz	r3, 27730 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27728:	4620      	mov	r0, r4
}
   2772a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2772e:	4718      	bx	r3
}
   27730:	bd70      	pop	{r4, r5, r6, pc}

00027732 <bt_l2cap_disconnected>:
{
   27732:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27734:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27736:	b130      	cbz	r0, 27746 <bt_l2cap_disconnected+0x14>
	return node->next;
   27738:	f850 4908 	ldr.w	r4, [r0], #-8
   2773c:	b104      	cbz	r4, 27740 <bt_l2cap_disconnected+0xe>
   2773e:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27740:	f7ff ffe2 	bl	27708 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27744:	b904      	cbnz	r4, 27748 <bt_l2cap_disconnected+0x16>
}
   27746:	bd38      	pop	{r3, r4, r5, pc}
   27748:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2774a:	b12d      	cbz	r5, 27758 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2774c:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2774e:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   27750:	f7ff ffda 	bl	27708 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27754:	462c      	mov	r4, r5
   27756:	e7f7      	b.n	27748 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   27758:	4620      	mov	r0, r4
}
   2775a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2775e:	f7ff bfd3 	b.w	27708 <bt_l2cap_chan_del>

00027762 <bt_l2cap_security_changed>:
{
   27762:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   27764:	6d03      	ldr	r3, [r0, #80]	; 0x50
   27766:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27768:	b1bb      	cbz	r3, 2779a <bt_l2cap_security_changed+0x38>
   2776a:	4618      	mov	r0, r3
	return node->next;
   2776c:	f850 4908 	ldr.w	r4, [r0], #-8
   27770:	b104      	cbz	r4, 27774 <bt_l2cap_security_changed+0x12>
   27772:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27774:	f853 3c04 	ldr.w	r3, [r3, #-4]
   27778:	689b      	ldr	r3, [r3, #8]
   2777a:	b10b      	cbz	r3, 27780 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2777c:	4629      	mov	r1, r5
   2777e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27780:	b15c      	cbz	r4, 2779a <bt_l2cap_security_changed+0x38>
   27782:	4620      	mov	r0, r4
   27784:	68a4      	ldr	r4, [r4, #8]
   27786:	6843      	ldr	r3, [r0, #4]
   27788:	b124      	cbz	r4, 27794 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2778a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2778c:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2778e:	2b00      	cmp	r3, #0
   27790:	d1f4      	bne.n	2777c <bt_l2cap_security_changed+0x1a>
   27792:	e7f6      	b.n	27782 <bt_l2cap_security_changed+0x20>
   27794:	689b      	ldr	r3, [r3, #8]
   27796:	2b00      	cmp	r3, #0
   27798:	d1f0      	bne.n	2777c <bt_l2cap_security_changed+0x1a>
}
   2779a:	bd38      	pop	{r3, r4, r5, pc}

0002779c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2779c:	3104      	adds	r1, #4
   2779e:	f7f2 b801 	b.w	197a4 <bt_conn_create_pdu_timeout>

000277a2 <bt_l2cap_send_cb>:
{
   277a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   277a6:	4614      	mov	r4, r2
   277a8:	4605      	mov	r5, r0
   277aa:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   277ac:	f102 000c 	add.w	r0, r2, #12
   277b0:	2104      	movs	r1, #4
   277b2:	461e      	mov	r6, r3
   277b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   277b8:	f001 fc9d 	bl	290f6 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   277bc:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   277be:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   277c0:	3a04      	subs	r2, #4
   277c2:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   277c4:	4643      	mov	r3, r8
   277c6:	4632      	mov	r2, r6
   277c8:	4621      	mov	r1, r4
   277ca:	4628      	mov	r0, r5
}
   277cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   277d0:	f7f1 bde6 	b.w	193a0 <bt_conn_send_cb>

000277d4 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   277d4:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   277d6:	b130      	cbz	r0, 277e6 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   277d8:	8b83      	ldrh	r3, [r0, #28]
   277da:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   277dc:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   277e0:	d001      	beq.n	277e6 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   277e2:	6880      	ldr	r0, [r0, #8]
   277e4:	e7f7      	b.n	277d6 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   277e6:	4770      	bx	lr

000277e8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   277e8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   277ea:	b130      	cbz	r0, 277fa <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   277ec:	8983      	ldrh	r3, [r0, #12]
   277ee:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   277f0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   277f4:	d001      	beq.n	277fa <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   277f6:	6880      	ldr	r0, [r0, #8]
   277f8:	e7f7      	b.n	277ea <bt_l2cap_le_lookup_rx_cid+0x2>
}
   277fa:	4770      	bx	lr

000277fc <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   277fc:	4770      	bx	lr

000277fe <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   277fe:	4603      	mov	r3, r0
	return list->head;
   27800:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27802:	b128      	cbz	r0, 27810 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27804:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27806:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27808:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2780a:	4288      	cmp	r0, r1
	list->tail = node;
   2780c:	bf08      	it	eq
   2780e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27810:	4770      	bx	lr

00027812 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27812:	4603      	mov	r3, r0
	size_t bytes = 0;
   27814:	2000      	movs	r0, #0

	while (buf) {
   27816:	b903      	cbnz	r3, 2781a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27818:	4770      	bx	lr
		bytes += buf->len;
   2781a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2781c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2781e:	4410      	add	r0, r2
		buf = buf->frags;
   27820:	e7f9      	b.n	27816 <net_buf_frags_len+0x4>

00027822 <attr_read_type_cb>:
{
   27822:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27824:	68d4      	ldr	r4, [r2, #12]
   27826:	7823      	ldrb	r3, [r4, #0]
   27828:	3102      	adds	r1, #2
   2782a:	b913      	cbnz	r3, 27832 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2782c:	7021      	strb	r1, [r4, #0]
	return true;
   2782e:	2001      	movs	r0, #1
}
   27830:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27832:	428b      	cmp	r3, r1
   27834:	d0fb      	beq.n	2782e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27836:	8a03      	ldrh	r3, [r0, #16]
   27838:	3b02      	subs	r3, #2
   2783a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2783c:	2000      	movs	r0, #0
   2783e:	6110      	str	r0, [r2, #16]
		return false;
   27840:	e7f6      	b.n	27830 <attr_read_type_cb+0xe>

00027842 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27842:	f3bf 8f5b 	dmb	ish
   27846:	6800      	ldr	r0, [r0, #0]
   27848:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2784c:	4108      	asrs	r0, r1
}
   2784e:	f000 0001 	and.w	r0, r0, #1
   27852:	4770      	bx	lr

00027854 <write_cb>:
{
   27854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27856:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27858:	4601      	mov	r1, r0
{
   2785a:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2785c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   27860:	6820      	ldr	r0, [r4, #0]
   27862:	f000 fec2 	bl	285ea <bt_gatt_check_perm>
   27866:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27868:	bb00      	cbnz	r0, 278ac <write_cb+0x58>
	if (!data->req) {
   2786a:	7a23      	ldrb	r3, [r4, #8]
   2786c:	b1b3      	cbz	r3, 2789c <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2786e:	f1a3 0218 	sub.w	r2, r3, #24
   27872:	4253      	negs	r3, r2
   27874:	4153      	adcs	r3, r2
   27876:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   27878:	9301      	str	r3, [sp, #4]
   2787a:	8a63      	ldrh	r3, [r4, #18]
   2787c:	9300      	str	r3, [sp, #0]
   2787e:	68ae      	ldr	r6, [r5, #8]
   27880:	8a23      	ldrh	r3, [r4, #16]
   27882:	68e2      	ldr	r2, [r4, #12]
   27884:	6820      	ldr	r0, [r4, #0]
   27886:	4629      	mov	r1, r5
   27888:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2788a:	2800      	cmp	r0, #0
   2788c:	db08      	blt.n	278a0 <write_cb+0x4c>
   2788e:	8a23      	ldrh	r3, [r4, #16]
   27890:	4298      	cmp	r0, r3
   27892:	d10e      	bne.n	278b2 <write_cb+0x5e>
	data->err = 0U;
   27894:	2300      	movs	r3, #0
   27896:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27898:	2001      	movs	r0, #1
   2789a:	e008      	b.n	278ae <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2789c:	2302      	movs	r3, #2
   2789e:	e7eb      	b.n	27878 <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   278a0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   278a4:	d305      	bcc.n	278b2 <write_cb+0x5e>
		return -err;
   278a6:	4240      	negs	r0, r0
   278a8:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   278aa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   278ac:	2000      	movs	r0, #0
}
   278ae:	b002      	add	sp, #8
   278b0:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   278b2:	200e      	movs	r0, #14
   278b4:	e7f9      	b.n	278aa <write_cb+0x56>

000278b6 <bt_gatt_foreach_attr>:
{
   278b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   278b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   278bc:	2300      	movs	r3, #0
   278be:	9300      	str	r3, [sp, #0]
   278c0:	461a      	mov	r2, r3
   278c2:	f7f4 fdf1 	bl	1c4a8 <bt_gatt_foreach_attr_type>
}
   278c6:	b005      	add	sp, #20
   278c8:	f85d fb04 	ldr.w	pc, [sp], #4

000278cc <find_info_cb>:
{
   278cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   278ce:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   278d0:	6817      	ldr	r7, [r2, #0]
{
   278d2:	4605      	mov	r5, r0
   278d4:	460e      	mov	r6, r1
   278d6:	4614      	mov	r4, r2
	if (!data->rsp) {
   278d8:	b963      	cbnz	r3, 278f4 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   278da:	6850      	ldr	r0, [r2, #4]
   278dc:	2101      	movs	r1, #1
   278de:	300c      	adds	r0, #12
   278e0:	f001 fbf2 	bl	290c8 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   278e4:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   278e6:	682b      	ldr	r3, [r5, #0]
   278e8:	781b      	ldrb	r3, [r3, #0]
   278ea:	2b00      	cmp	r3, #0
   278ec:	bf14      	ite	ne
   278ee:	2302      	movne	r3, #2
   278f0:	2301      	moveq	r3, #1
   278f2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   278f4:	68a3      	ldr	r3, [r4, #8]
   278f6:	781b      	ldrb	r3, [r3, #0]
   278f8:	2b01      	cmp	r3, #1
   278fa:	d003      	beq.n	27904 <find_info_cb+0x38>
   278fc:	2b02      	cmp	r3, #2
   278fe:	d019      	beq.n	27934 <find_info_cb+0x68>
   27900:	2000      	movs	r0, #0
   27902:	e016      	b.n	27932 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27904:	682b      	ldr	r3, [r5, #0]
   27906:	781b      	ldrb	r3, [r3, #0]
   27908:	2b00      	cmp	r3, #0
   2790a:	d1f9      	bne.n	27900 <find_info_cb+0x34>
   2790c:	6860      	ldr	r0, [r4, #4]
   2790e:	2104      	movs	r1, #4
   27910:	300c      	adds	r0, #12
   27912:	f001 fbd9 	bl	290c8 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27916:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   27918:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2791a:	682a      	ldr	r2, [r5, #0]
   2791c:	68e3      	ldr	r3, [r4, #12]
   2791e:	8852      	ldrh	r2, [r2, #2]
   27920:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27922:	6863      	ldr	r3, [r4, #4]
   27924:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   27926:	8a1b      	ldrh	r3, [r3, #16]
   27928:	1ac0      	subs	r0, r0, r3
   2792a:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2792c:	bf94      	ite	ls
   2792e:	2000      	movls	r0, #0
   27930:	2001      	movhi	r0, #1
}
   27932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27934:	682b      	ldr	r3, [r5, #0]
   27936:	781b      	ldrb	r3, [r3, #0]
   27938:	2b02      	cmp	r3, #2
   2793a:	d1e1      	bne.n	27900 <find_info_cb+0x34>
   2793c:	6860      	ldr	r0, [r4, #4]
   2793e:	2112      	movs	r1, #18
   27940:	300c      	adds	r0, #12
   27942:	f001 fbc1 	bl	290c8 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27946:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   27948:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2794a:	6829      	ldr	r1, [r5, #0]
   2794c:	68e0      	ldr	r0, [r4, #12]
   2794e:	2210      	movs	r2, #16
   27950:	3101      	adds	r1, #1
   27952:	3002      	adds	r0, #2
   27954:	f7ff f94a 	bl	26bec <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   27958:	6863      	ldr	r3, [r4, #4]
   2795a:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2795c:	8a1b      	ldrh	r3, [r3, #16]
   2795e:	1ac0      	subs	r0, r0, r3
   27960:	2812      	cmp	r0, #18
   27962:	e7e3      	b.n	2792c <find_info_cb+0x60>

00027964 <att_chan_mtu_updated>:
{
   27964:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   27966:	6805      	ldr	r5, [r0, #0]
	return list->head;
   27968:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2796a:	b352      	cbz	r2, 279c2 <att_chan_mtu_updated+0x5e>
	return node->next;
   2796c:	6813      	ldr	r3, [r2, #0]
   2796e:	b103      	cbz	r3, 27972 <att_chan_mtu_updated+0xe>
   27970:	3b88      	subs	r3, #136	; 0x88
   27972:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   27976:	2200      	movs	r2, #0
   27978:	4611      	mov	r1, r2
   2797a:	e000      	b.n	2797e <att_chan_mtu_updated+0x1a>
   2797c:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   2797e:	4284      	cmp	r4, r0
   27980:	d007      	beq.n	27992 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27982:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27984:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27986:	42b1      	cmp	r1, r6
   27988:	bf38      	it	cc
   2798a:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2798c:	42a2      	cmp	r2, r4
   2798e:	bf38      	it	cc
   27990:	4622      	movcc	r2, r4
   27992:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27994:	b12b      	cbz	r3, 279a2 <att_chan_mtu_updated+0x3e>
   27996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   2799a:	2b00      	cmp	r3, #0
   2799c:	d1ee      	bne.n	2797c <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2799e:	4284      	cmp	r4, r0
   279a0:	d1ef      	bne.n	27982 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   279a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   279a4:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   279a6:	428b      	cmp	r3, r1
   279a8:	d801      	bhi.n	279ae <att_chan_mtu_updated+0x4a>
   279aa:	4290      	cmp	r0, r2
   279ac:	d90b      	bls.n	279c6 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   279ae:	4282      	cmp	r2, r0
   279b0:	bf38      	it	cc
   279b2:	4602      	movcc	r2, r0
   279b4:	4299      	cmp	r1, r3
   279b6:	6828      	ldr	r0, [r5, #0]
   279b8:	bf38      	it	cc
   279ba:	4619      	movcc	r1, r3
}
   279bc:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   279be:	f7f5 bb37 	b.w	1d030 <bt_gatt_att_max_mtu_changed>
   279c2:	4611      	mov	r1, r2
   279c4:	e7ed      	b.n	279a2 <att_chan_mtu_updated+0x3e>
}
   279c6:	bc70      	pop	{r4, r5, r6}
   279c8:	4770      	bx	lr

000279ca <attr_read_group_cb>:
	if (!data->rsp->len) {
   279ca:	68d0      	ldr	r0, [r2, #12]
   279cc:	7803      	ldrb	r3, [r0, #0]
   279ce:	3104      	adds	r1, #4
   279d0:	b913      	cbnz	r3, 279d8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   279d2:	7001      	strb	r1, [r0, #0]
	return true;
   279d4:	2001      	movs	r0, #1
   279d6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   279d8:	428b      	cmp	r3, r1
   279da:	d0fb      	beq.n	279d4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   279dc:	6891      	ldr	r1, [r2, #8]
   279de:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   279e0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   279e2:	3b04      	subs	r3, #4
   279e4:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   279e6:	6110      	str	r0, [r2, #16]
}
   279e8:	4770      	bx	lr

000279ea <z_log_msg_static_create.constprop.0>:
   279ea:	2300      	movs	r3, #0
   279ec:	f7eb bf9c 	b.w	13928 <z_impl_z_log_msg_static_create>

000279f0 <chan_req_send>:
{
   279f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   279f2:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   279f4:	6888      	ldr	r0, [r1, #8]
   279f6:	f7ff ff0c 	bl	27812 <net_buf_frags_len>
   279fa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   279fc:	4283      	cmp	r3, r0
{
   279fe:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27a00:	d30b      	bcc.n	27a1a <chan_req_send+0x2a>
	chan->req = req;
   27a02:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   27a04:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   27a06:	2600      	movs	r6, #0
   27a08:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   27a0a:	4628      	mov	r0, r5
   27a0c:	4639      	mov	r1, r7
   27a0e:	f7f2 fca1 	bl	1a354 <chan_send>
	if (err) {
   27a12:	b108      	cbz	r0, 27a18 <chan_req_send+0x28>
		req->buf = buf;
   27a14:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   27a16:	63ae      	str	r6, [r5, #56]	; 0x38
}
   27a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   27a1a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   27a1e:	e7fb      	b.n	27a18 <chan_req_send+0x28>

00027a20 <process_queue>:
{
   27a20:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   27a22:	2200      	movs	r2, #0
{
   27a24:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   27a26:	2300      	movs	r3, #0
   27a28:	4608      	mov	r0, r1
{
   27a2a:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   27a2c:	f001 faeb 	bl	29006 <net_buf_get>
	if (buf) {
   27a30:	4605      	mov	r5, r0
   27a32:	b158      	cbz	r0, 27a4c <process_queue+0x2c>
	return chan_send(chan, buf);
   27a34:	4601      	mov	r1, r0
   27a36:	4620      	mov	r0, r4
   27a38:	f7f2 fc8c 	bl	1a354 <chan_send>
		if (err) {
   27a3c:	4604      	mov	r4, r0
   27a3e:	b118      	cbz	r0, 27a48 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   27a40:	4629      	mov	r1, r5
   27a42:	4630      	mov	r0, r6
   27a44:	f002 f8e7 	bl	29c16 <k_queue_prepend>
}
   27a48:	4620      	mov	r0, r4
   27a4a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   27a4c:	f06f 0401 	mvn.w	r4, #1
   27a50:	e7fa      	b.n	27a48 <process_queue+0x28>

00027a52 <bt_att_chan_send_rsp>:
{
   27a52:	b538      	push	{r3, r4, r5, lr}
   27a54:	4604      	mov	r4, r0
   27a56:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   27a58:	f7f2 fc7c 	bl	1a354 <chan_send>
	if (err) {
   27a5c:	b130      	cbz	r0, 27a6c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   27a5e:	4629      	mov	r1, r5
   27a60:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   27a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   27a68:	f001 bafc 	b.w	29064 <net_buf_put>
}
   27a6c:	bd38      	pop	{r3, r4, r5, pc}

00027a6e <sys_slist_find_and_remove.isra.0>:
	return list->head;
   27a6e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27a70:	2200      	movs	r2, #0
   27a72:	b903      	cbnz	r3, 27a76 <sys_slist_find_and_remove.isra.0+0x8>
   27a74:	4770      	bx	lr
   27a76:	428b      	cmp	r3, r1
   27a78:	d10f      	bne.n	27a9a <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   27a7a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a7c:	b93a      	cbnz	r2, 27a8e <sys_slist_find_and_remove.isra.0+0x20>
   27a7e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   27a80:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a82:	4291      	cmp	r1, r2
   27a84:	d100      	bne.n	27a88 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   27a86:	6043      	str	r3, [r0, #4]
	parent->next = child;
   27a88:	2300      	movs	r3, #0
   27a8a:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a8c:	4770      	bx	lr
	parent->next = child;
   27a8e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27a90:	6843      	ldr	r3, [r0, #4]
   27a92:	4299      	cmp	r1, r3
	list->tail = node;
   27a94:	bf08      	it	eq
   27a96:	6042      	streq	r2, [r0, #4]
}
   27a98:	e7f6      	b.n	27a88 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   27a9a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27a9c:	681b      	ldr	r3, [r3, #0]
   27a9e:	e7e8      	b.n	27a72 <sys_slist_find_and_remove.isra.0+0x4>

00027aa0 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27aa0:	2301      	movs	r3, #1
   27aa2:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27aa4:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27aa6:	f3bf 8f5b 	dmb	ish
   27aaa:	e850 2f00 	ldrex	r2, [r0]
   27aae:	401a      	ands	r2, r3
   27ab0:	e840 2100 	strex	r1, r2, [r0]
   27ab4:	2900      	cmp	r1, #0
   27ab6:	d1f8      	bne.n	27aaa <atomic_clear_bit+0xa>
   27ab8:	f3bf 8f5b 	dmb	ish
}
   27abc:	4770      	bx	lr

00027abe <atomic_test_and_set_bit>:
{
   27abe:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27ac0:	2301      	movs	r3, #1
   27ac2:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27ac6:	f3bf 8f5b 	dmb	ish
   27aca:	e850 3f00 	ldrex	r3, [r0]
   27ace:	ea43 0201 	orr.w	r2, r3, r1
   27ad2:	e840 2400 	strex	r4, r2, [r0]
   27ad6:	2c00      	cmp	r4, #0
   27ad8:	d1f7      	bne.n	27aca <atomic_test_and_set_bit+0xc>
   27ada:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   27ade:	4219      	tst	r1, r3
}
   27ae0:	bf14      	ite	ne
   27ae2:	2001      	movne	r0, #1
   27ae4:	2000      	moveq	r0, #0
   27ae6:	bd10      	pop	{r4, pc}

00027ae8 <att_chan_read>:
{
   27ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27aec:	4680      	mov	r8, r0
   27aee:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27af0:	4610      	mov	r0, r2
{
   27af2:	4699      	mov	r9, r3
   27af4:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27af6:	f7ff fe8c 	bl	27812 <net_buf_frags_len>
   27afa:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27afe:	4283      	cmp	r3, r0
{
   27b00:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27b02:	d97a      	bls.n	27bfa <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27b04:	f8d8 3004 	ldr.w	r3, [r8, #4]
   27b08:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   27b0a:	4630      	mov	r0, r6
   27b0c:	f001 fab0 	bl	29070 <net_buf_frag_last>
	size_t len, total = 0;
   27b10:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27b14:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27b16:	4630      	mov	r0, r6
   27b18:	f7ff fe7b 	bl	27812 <net_buf_frags_len>
   27b1c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   27b20:	f105 070c 	add.w	r7, r5, #12
   27b24:	1a24      	subs	r4, r4, r0
   27b26:	4638      	mov	r0, r7
   27b28:	f001 fb11 	bl	2914e <net_buf_simple_tailroom>
   27b2c:	4284      	cmp	r4, r0
   27b2e:	d211      	bcs.n	27b54 <att_chan_read+0x6c>
   27b30:	4630      	mov	r0, r6
   27b32:	f7ff fe6e 	bl	27812 <net_buf_frags_len>
   27b36:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27b3a:	1a24      	subs	r4, r4, r0
		if (!len) {
   27b3c:	bb34      	cbnz	r4, 27b8c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27b3e:	7ab0      	ldrb	r0, [r6, #10]
   27b40:	f7f7 feae 	bl	1f8a0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   27b44:	2200      	movs	r2, #0
   27b46:	2300      	movs	r3, #0
   27b48:	f001 fa58 	bl	28ffc <net_buf_alloc_fixed>
			if (!frag) {
   27b4c:	4605      	mov	r5, r0
   27b4e:	b930      	cbnz	r0, 27b5e <att_chan_read+0x76>
	return total;
   27b50:	4657      	mov	r7, sl
   27b52:	e02c      	b.n	27bae <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   27b54:	4638      	mov	r0, r7
   27b56:	f001 fafa 	bl	2914e <net_buf_simple_tailroom>
   27b5a:	4604      	mov	r4, r0
   27b5c:	e7ee      	b.n	27b3c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27b5e:	4601      	mov	r1, r0
   27b60:	4630      	mov	r0, r6
   27b62:	f001 fa96 	bl	29092 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27b66:	4630      	mov	r0, r6
   27b68:	f7ff fe53 	bl	27812 <net_buf_frags_len>
   27b6c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27b70:	f105 070c 	add.w	r7, r5, #12
   27b74:	1a24      	subs	r4, r4, r0
   27b76:	4638      	mov	r0, r7
   27b78:	f001 fae9 	bl	2914e <net_buf_simple_tailroom>
   27b7c:	4284      	cmp	r4, r0
   27b7e:	d21a      	bcs.n	27bb6 <att_chan_read+0xce>
   27b80:	4630      	mov	r0, r6
   27b82:	f7ff fe46 	bl	27812 <net_buf_frags_len>
   27b86:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   27b8a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27b8c:	68e9      	ldr	r1, [r5, #12]
   27b8e:	8a2a      	ldrh	r2, [r5, #16]
   27b90:	f8cd 9000 	str.w	r9, [sp]
   27b94:	f8db 7004 	ldr.w	r7, [fp, #4]
   27b98:	9803      	ldr	r0, [sp, #12]
   27b9a:	440a      	add	r2, r1
   27b9c:	b2a3      	uxth	r3, r4
   27b9e:	4659      	mov	r1, fp
   27ba0:	47b8      	blx	r7
		if (read < 0) {
   27ba2:	1e07      	subs	r7, r0, #0
   27ba4:	da0c      	bge.n	27bc0 <att_chan_read+0xd8>
				return total;
   27ba6:	f1ba 0f00 	cmp.w	sl, #0
   27baa:	bf18      	it	ne
   27bac:	4657      	movne	r7, sl
}
   27bae:	4638      	mov	r0, r7
   27bb0:	b005      	add	sp, #20
   27bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bb6:	4638      	mov	r0, r7
   27bb8:	f001 fac9 	bl	2914e <net_buf_simple_tailroom>
   27bbc:	4604      	mov	r4, r0
   27bbe:	e7e5      	b.n	27b8c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27bc2:	b993      	cbnz	r3, 27bea <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   27bc4:	4639      	mov	r1, r7
   27bc6:	f105 000c 	add.w	r0, r5, #12
   27bca:	f001 fa7d 	bl	290c8 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27bce:	4630      	mov	r0, r6
   27bd0:	f7ff fe1f 	bl	27812 <net_buf_frags_len>
   27bd4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   27bd8:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27bda:	4283      	cmp	r3, r0
		total += read;
   27bdc:	44ba      	add	sl, r7
		offset += read;
   27bde:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27be2:	d9b5      	bls.n	27b50 <att_chan_read+0x68>
   27be4:	42a7      	cmp	r7, r4
   27be6:	d096      	beq.n	27b16 <att_chan_read+0x2e>
   27be8:	e7b2      	b.n	27b50 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27bea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27bee:	4639      	mov	r1, r7
   27bf0:	4628      	mov	r0, r5
   27bf2:	4798      	blx	r3
   27bf4:	2800      	cmp	r0, #0
   27bf6:	d1e5      	bne.n	27bc4 <att_chan_read+0xdc>
   27bf8:	e7aa      	b.n	27b50 <att_chan_read+0x68>
		return 0;
   27bfa:	2700      	movs	r7, #0
   27bfc:	e7d7      	b.n	27bae <att_chan_read+0xc6>

00027bfe <read_cb>:
{
   27bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   27c00:	6816      	ldr	r6, [r2, #0]
{
   27c02:	4605      	mov	r5, r0
	data->err = 0x00;
   27c04:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27c06:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   27c08:	7313      	strb	r3, [r2, #12]
{
   27c0a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27c0c:	4629      	mov	r1, r5
   27c0e:	2295      	movs	r2, #149	; 0x95
   27c10:	f000 fceb 	bl	285ea <bt_gatt_check_perm>
   27c14:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27c16:	b980      	cbnz	r0, 27c3a <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27c18:	e9cd 0000 	strd	r0, r0, [sp]
   27c1c:	4629      	mov	r1, r5
   27c1e:	88a3      	ldrh	r3, [r4, #4]
   27c20:	68a2      	ldr	r2, [r4, #8]
   27c22:	4630      	mov	r0, r6
   27c24:	f7ff ff60 	bl	27ae8 <att_chan_read>
	if (ret < 0) {
   27c28:	2800      	cmp	r0, #0
   27c2a:	da09      	bge.n	27c40 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   27c2c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   27c30:	bf26      	itte	cs
   27c32:	4240      	negcs	r0, r0
   27c34:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   27c36:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   27c38:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   27c3a:	2000      	movs	r0, #0
}
   27c3c:	b002      	add	sp, #8
   27c3e:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   27c40:	2001      	movs	r0, #1
   27c42:	e7fb      	b.n	27c3c <read_cb+0x3e>

00027c44 <read_vl_cb>:
{
   27c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27c48:	f8d2 8000 	ldr.w	r8, [r2]
{
   27c4c:	4606      	mov	r6, r0
	data->err = 0x00;
   27c4e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27c50:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   27c54:	7313      	strb	r3, [r2, #12]
{
   27c56:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27c58:	4631      	mov	r1, r6
   27c5a:	2295      	movs	r2, #149	; 0x95
   27c5c:	f000 fcc5 	bl	285ea <bt_gatt_check_perm>
   27c60:	4605      	mov	r5, r0
   27c62:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   27c64:	b9e0      	cbnz	r0, 27ca0 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   27c66:	68a0      	ldr	r0, [r4, #8]
   27c68:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   27c6c:	8a02      	ldrh	r2, [r0, #16]
   27c6e:	1a9b      	subs	r3, r3, r2
   27c70:	2b01      	cmp	r3, #1
   27c72:	dd15      	ble.n	27ca0 <read_vl_cb+0x5c>
   27c74:	2102      	movs	r1, #2
   27c76:	300c      	adds	r0, #12
   27c78:	f001 fa26 	bl	290c8 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27c7c:	e9cd 5500 	strd	r5, r5, [sp]
   27c80:	4607      	mov	r7, r0
   27c82:	88a3      	ldrh	r3, [r4, #4]
   27c84:	68a2      	ldr	r2, [r4, #8]
   27c86:	4631      	mov	r1, r6
   27c88:	4640      	mov	r0, r8
   27c8a:	f7ff ff2d 	bl	27ae8 <att_chan_read>
	if (read < 0) {
   27c8e:	1e03      	subs	r3, r0, #0
   27c90:	da0a      	bge.n	27ca8 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   27c92:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27c96:	bf26      	itte	cs
   27c98:	425b      	negcs	r3, r3
   27c9a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27c9c:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   27c9e:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   27ca0:	2000      	movs	r0, #0
}
   27ca2:	b002      	add	sp, #8
   27ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   27ca8:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   27caa:	2001      	movs	r0, #1
   27cac:	e7f9      	b.n	27ca2 <read_vl_cb+0x5e>

00027cae <bt_att_sent>:
{
   27cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   27cb0:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   27cb4:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   27cb6:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   27cb8:	2104      	movs	r1, #4
   27cba:	3030      	adds	r0, #48	; 0x30
   27cbc:	f7ff fef0 	bl	27aa0 <atomic_clear_bit>
	if (!att) {
   27cc0:	b304      	cbz	r4, 27d04 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   27cc2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27cc4:	b98b      	cbnz	r3, 27cea <bt_att_sent+0x3c>
   27cc6:	6863      	ldr	r3, [r4, #4]
   27cc8:	b17b      	cbz	r3, 27cea <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27cca:	1d20      	adds	r0, r4, #4
   27ccc:	f7ff fd97 	bl	277fe <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27cd0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   27cd2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27cd4:	4638      	mov	r0, r7
   27cd6:	f7ff fe8b 	bl	279f0 <chan_req_send>
   27cda:	2800      	cmp	r0, #0
   27cdc:	da12      	bge.n	27d04 <bt_att_sent+0x56>
	return list->head;
   27cde:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   27ce0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   27ce2:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   27ce4:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   27ce6:	b903      	cbnz	r3, 27cea <bt_att_sent+0x3c>
	list->tail = node;
   27ce8:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   27cea:	f105 0138 	add.w	r1, r5, #56	; 0x38
   27cee:	4638      	mov	r0, r7
   27cf0:	f7ff fe96 	bl	27a20 <process_queue>
	if (!err) {
   27cf4:	b130      	cbz	r0, 27d04 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   27cf6:	f104 010c 	add.w	r1, r4, #12
   27cfa:	4638      	mov	r0, r7
}
   27cfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   27d00:	f7ff be8e 	b.w	27a20 <process_queue>
}
   27d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027d06 <att_req_send_process>:
{
   27d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   27d0a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   27d0c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27d0e:	2c00      	cmp	r4, #0
   27d10:	d03a      	beq.n	27d88 <att_req_send_process+0x82>
	return node->next;
   27d12:	f854 6988 	ldr.w	r6, [r4], #-136
   27d16:	b106      	cbz	r6, 27d1a <att_req_send_process+0x14>
   27d18:	3e88      	subs	r6, #136	; 0x88
{
   27d1a:	2300      	movs	r3, #0
   27d1c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   27d1e:	f108 0704 	add.w	r7, r8, #4
   27d22:	e013      	b.n	27d4c <att_req_send_process+0x46>
		if (!req && prev &&
   27d24:	b1bb      	cbz	r3, 27d56 <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   27d26:	2103      	movs	r1, #3
   27d28:	f104 0034 	add.w	r0, r4, #52	; 0x34
   27d2c:	f7ff fd89 	bl	27842 <atomic_test_bit>
   27d30:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   27d32:	f103 0034 	add.w	r0, r3, #52	; 0x34
   27d36:	f7ff fd84 	bl	27842 <atomic_test_bit>
		if (!req && prev &&
   27d3a:	4282      	cmp	r2, r0
   27d3c:	d10b      	bne.n	27d56 <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27d3e:	b31e      	cbz	r6, 27d88 <att_req_send_process+0x82>
   27d40:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   27d44:	b102      	cbz	r2, 27d48 <att_req_send_process+0x42>
   27d46:	3a88      	subs	r2, #136	; 0x88
{
   27d48:	4634      	mov	r4, r6
   27d4a:	4616      	mov	r6, r2
		if (chan->req) {
   27d4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   27d4e:	2a00      	cmp	r2, #0
   27d50:	d1f5      	bne.n	27d3e <att_req_send_process+0x38>
		if (!req && prev &&
   27d52:	2d00      	cmp	r5, #0
   27d54:	d0e6      	beq.n	27d24 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   27d56:	4638      	mov	r0, r7
   27d58:	f7ff fd51 	bl	277fe <sys_slist_get>
	if (node) {
   27d5c:	4605      	mov	r5, r0
   27d5e:	b908      	cbnz	r0, 27d64 <att_req_send_process+0x5e>
   27d60:	4623      	mov	r3, r4
   27d62:	e7ec      	b.n	27d3e <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   27d64:	4601      	mov	r1, r0
   27d66:	4620      	mov	r0, r4
   27d68:	f7ff fe42 	bl	279f0 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   27d6c:	2800      	cmp	r0, #0
   27d6e:	da0b      	bge.n	27d88 <att_req_send_process+0x82>
	return list->head;
   27d70:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   27d74:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   27d76:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   27d7a:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   27d7e:	2b00      	cmp	r3, #0
   27d80:	d1ee      	bne.n	27d60 <att_req_send_process+0x5a>
	list->tail = node;
   27d82:	f8c8 5008 	str.w	r5, [r8, #8]
}
   27d86:	e7eb      	b.n	27d60 <att_req_send_process+0x5a>
}
   27d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027d8c <bt_att_status>:
{
   27d8c:	b538      	push	{r3, r4, r5, lr}
   27d8e:	4605      	mov	r5, r0
   27d90:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   27d92:	2100      	movs	r1, #0
   27d94:	f7ff fd55 	bl	27842 <atomic_test_bit>
   27d98:	b1b8      	cbz	r0, 27dca <bt_att_status+0x3e>
	if (!chan->att) {
   27d9a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   27d9e:	b1a0      	cbz	r0, 27dca <bt_att_status+0x3e>
	if (chan->req) {
   27da0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27da2:	b993      	cbnz	r3, 27dca <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   27da4:	3004      	adds	r0, #4
   27da6:	f7ff fd2a 	bl	277fe <sys_slist_get>
	if (!node) {
   27daa:	4604      	mov	r4, r0
   27dac:	b168      	cbz	r0, 27dca <bt_att_status+0x3e>
	return chan_req_send(chan, req);
   27dae:	4601      	mov	r1, r0
   27db0:	1f28      	subs	r0, r5, #4
   27db2:	f7ff fe1d 	bl	279f0 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   27db6:	2800      	cmp	r0, #0
   27db8:	da07      	bge.n	27dca <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   27dba:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   27dbe:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   27dc0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   27dc2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   27dc4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   27dc6:	b902      	cbnz	r2, 27dca <bt_att_status+0x3e>
	list->tail = node;
   27dc8:	609c      	str	r4, [r3, #8]
}
   27dca:	bd38      	pop	{r3, r4, r5, pc}

00027dcc <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   27dcc:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   27dce:	6883      	ldr	r3, [r0, #8]
   27dd0:	699b      	ldr	r3, [r3, #24]
   27dd2:	b10b      	cbz	r3, 27dd8 <att_sent+0xc>
		chan->ops->sent(chan);
   27dd4:	3004      	adds	r0, #4
   27dd6:	4718      	bx	r3
}
   27dd8:	4770      	bx	lr

00027dda <att_unknown>:
{
   27dda:	b510      	push	{r4, lr}
   27ddc:	460c      	mov	r4, r1
	if (!err) {
   27dde:	b90a      	cbnz	r2, 27de4 <att_unknown+0xa>
		att_sent(conn, user_data);
   27de0:	f7ff fff4 	bl	27dcc <att_sent>
	tx_meta_data_free(user_data);
   27de4:	4620      	mov	r0, r4
}
   27de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27dea:	f7f2 b9df 	b.w	1a1ac <tx_meta_data_free>

00027dee <att_tx_complete>:
{
   27dee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27df2:	4606      	mov	r6, r0
   27df4:	460d      	mov	r5, r1
	if (!err) {
   27df6:	4614      	mov	r4, r2
   27df8:	b122      	cbz	r2, 27e04 <att_tx_complete+0x16>
}
   27dfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   27dfe:	4608      	mov	r0, r1
   27e00:	f7f2 b9d4 	b.w	1a1ac <tx_meta_data_free>
		att_sent(conn, user_data);
   27e04:	f7ff ffe2 	bl	27dcc <att_sent>
	bt_gatt_complete_func_t func = data->func;
   27e08:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   27e0a:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   27e0e:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   27e12:	4628      	mov	r0, r5
   27e14:	f7f2 f9ca 	bl	1a1ac <tx_meta_data_free>
	if (!err && func) {
   27e18:	b92f      	cbnz	r7, 27e26 <att_tx_complete+0x38>
}
   27e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   27e1e:	4649      	mov	r1, r9
   27e20:	4630      	mov	r0, r6
   27e22:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   27e24:	3401      	adds	r4, #1
   27e26:	b2a3      	uxth	r3, r4
   27e28:	4543      	cmp	r3, r8
   27e2a:	d3f8      	bcc.n	27e1e <att_tx_complete+0x30>
   27e2c:	e7f5      	b.n	27e1a <att_tx_complete+0x2c>

00027e2e <att_req_sent>:
{
   27e2e:	b510      	push	{r4, lr}
   27e30:	460c      	mov	r4, r1
	if (!err) {
   27e32:	b90a      	cbnz	r2, 27e38 <att_req_sent+0xa>
		att_sent(conn, user_data);
   27e34:	f7ff ffca 	bl	27dcc <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   27e38:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   27e3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   27e3c:	b12b      	cbz	r3, 27e4a <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   27e3e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27e42:	2300      	movs	r3, #0
   27e44:	3058      	adds	r0, #88	; 0x58
   27e46:	f7fb ff17 	bl	23c78 <k_work_reschedule>
	tx_meta_data_free(user_data);
   27e4a:	4620      	mov	r0, r4
}
   27e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   27e50:	f7f2 b9ac 	b.w	1a1ac <tx_meta_data_free>

00027e54 <att_cfm_sent>:
{
   27e54:	b510      	push	{r4, lr}
   27e56:	460c      	mov	r4, r1
	if (!err) {
   27e58:	b90a      	cbnz	r2, 27e5e <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   27e5a:	f7ff ffb7 	bl	27dcc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   27e5e:	6820      	ldr	r0, [r4, #0]
   27e60:	2101      	movs	r1, #1
   27e62:	3034      	adds	r0, #52	; 0x34
   27e64:	f7ff fe1c 	bl	27aa0 <atomic_clear_bit>
	tx_meta_data_free(data);
   27e68:	4620      	mov	r0, r4
}
   27e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27e6e:	f7f2 b99d 	b.w	1a1ac <tx_meta_data_free>

00027e72 <att_rsp_sent>:
{
   27e72:	b510      	push	{r4, lr}
   27e74:	460c      	mov	r4, r1
	if (!err) {
   27e76:	b90a      	cbnz	r2, 27e7c <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   27e78:	f7ff ffa8 	bl	27dcc <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   27e7c:	6820      	ldr	r0, [r4, #0]
   27e7e:	2100      	movs	r1, #0
   27e80:	3034      	adds	r0, #52	; 0x34
   27e82:	f7ff fe0d 	bl	27aa0 <atomic_clear_bit>
	tx_meta_data_free(data);
   27e86:	4620      	mov	r0, r4
}
   27e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   27e8c:	f7f2 b98e 	b.w	1a1ac <tx_meta_data_free>

00027e90 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27e94:	4688      	mov	r8, r1
   27e96:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27e98:	2101      	movs	r1, #1
   27e9a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   27e9c:	4605      	mov	r5, r0
   27e9e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   27ea0:	f7f2 fcc2 	bl	1a828 <bt_att_chan_create_pdu>
	if (!buf) {
   27ea4:	4604      	mov	r4, r0
   27ea6:	b170      	cbz	r0, 27ec6 <send_err_rsp.part.0+0x36>
   27ea8:	2104      	movs	r1, #4
   27eaa:	300c      	adds	r0, #12
   27eac:	f001 f90c 	bl	290c8 <net_buf_simple_add>
	rsp->request = req;
   27eb0:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   27eb4:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   27eb8:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   27eba:	4621      	mov	r1, r4
   27ebc:	4628      	mov	r0, r5
}
   27ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   27ec2:	f7ff bdc6 	b.w	27a52 <bt_att_chan_send_rsp>
}
   27ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027eca <att_write_cmd>:
{
   27eca:	b530      	push	{r4, r5, lr}
   27ecc:	460c      	mov	r4, r1
   27ece:	b085      	sub	sp, #20
   27ed0:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27ed2:	f101 000c 	add.w	r0, r1, #12
   27ed6:	f001 f92e 	bl	29136 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   27eda:	8a22      	ldrh	r2, [r4, #16]
   27edc:	9202      	str	r2, [sp, #8]
   27ede:	68e2      	ldr	r2, [r4, #12]
   27ee0:	9201      	str	r2, [sp, #4]
   27ee2:	2200      	movs	r2, #0
   27ee4:	4603      	mov	r3, r0
   27ee6:	9200      	str	r2, [sp, #0]
   27ee8:	4611      	mov	r1, r2
   27eea:	4628      	mov	r0, r5
   27eec:	f7f2 fdd8 	bl	1aaa0 <att_write_rsp>
}
   27ef0:	b005      	add	sp, #20
   27ef2:	bd30      	pop	{r4, r5, pc}

00027ef4 <att_write_req>:
{
   27ef4:	b530      	push	{r4, r5, lr}
   27ef6:	460c      	mov	r4, r1
   27ef8:	b085      	sub	sp, #20
   27efa:	4605      	mov	r5, r0
   27efc:	f101 000c 	add.w	r0, r1, #12
   27f00:	f001 f919 	bl	29136 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   27f04:	8a22      	ldrh	r2, [r4, #16]
   27f06:	9202      	str	r2, [sp, #8]
   27f08:	68e2      	ldr	r2, [r4, #12]
   27f0a:	9201      	str	r2, [sp, #4]
   27f0c:	2200      	movs	r2, #0
   27f0e:	4603      	mov	r3, r0
   27f10:	9200      	str	r2, [sp, #0]
   27f12:	2112      	movs	r1, #18
   27f14:	2213      	movs	r2, #19
   27f16:	4628      	mov	r0, r5
   27f18:	f7f2 fdc2 	bl	1aaa0 <att_write_rsp>
}
   27f1c:	b005      	add	sp, #20
   27f1e:	bd30      	pop	{r4, r5, pc}

00027f20 <att_read_blob_req>:
{
   27f20:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   27f22:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   27f24:	8813      	ldrh	r3, [r2, #0]
   27f26:	8852      	ldrh	r2, [r2, #2]
   27f28:	9200      	str	r2, [sp, #0]
   27f2a:	210c      	movs	r1, #12
   27f2c:	220d      	movs	r2, #13
   27f2e:	f7f3 f8e1 	bl	1b0f4 <att_read_rsp>
}
   27f32:	b003      	add	sp, #12
   27f34:	f85d fb04 	ldr.w	pc, [sp], #4

00027f38 <att_read_req>:
{
   27f38:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   27f3a:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   27f3c:	2200      	movs	r2, #0
   27f3e:	881b      	ldrh	r3, [r3, #0]
   27f40:	9200      	str	r2, [sp, #0]
   27f42:	210a      	movs	r1, #10
   27f44:	220b      	movs	r2, #11
   27f46:	f7f3 f8d5 	bl	1b0f4 <att_read_rsp>
}
   27f4a:	b003      	add	sp, #12
   27f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00027f50 <att_mtu_req>:
{
   27f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f52:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   27f54:	f850 2b34 	ldr.w	r2, [r0], #52
{
   27f58:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27f5a:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   27f5c:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   27f5e:	f7ff fc70 	bl	27842 <atomic_test_bit>
   27f62:	4604      	mov	r4, r0
   27f64:	b9f0      	cbnz	r0, 27fa4 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
   27f66:	68db      	ldr	r3, [r3, #12]
   27f68:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   27f6a:	2e16      	cmp	r6, #22
   27f6c:	d91c      	bls.n	27fa8 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   27f6e:	4638      	mov	r0, r7
   27f70:	2202      	movs	r2, #2
   27f72:	f7f2 fe47 	bl	1ac04 <bt_att_create_pdu>
	if (!pdu) {
   27f76:	4607      	mov	r7, r0
   27f78:	b1c0      	cbz	r0, 27fac <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
   27f7a:	2102      	movs	r1, #2
   27f7c:	300c      	adds	r0, #12
   27f7e:	f001 f8a3 	bl	290c8 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   27f82:	2341      	movs	r3, #65	; 0x41
   27f84:	7003      	strb	r3, [r0, #0]
   27f86:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   27f88:	4639      	mov	r1, r7
   27f8a:	4628      	mov	r0, r5
   27f8c:	f7ff fd61 	bl	27a52 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27f90:	2e41      	cmp	r6, #65	; 0x41
   27f92:	bf28      	it	cs
   27f94:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   27f96:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   27f98:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   27f9a:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   27f9c:	f7ff fce2 	bl	27964 <att_chan_mtu_updated>
	return 0;
   27fa0:	4620      	mov	r0, r4
}
   27fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   27fa4:	2006      	movs	r0, #6
   27fa6:	e7fc      	b.n	27fa2 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
   27fa8:	2004      	movs	r0, #4
   27faa:	e7fa      	b.n	27fa2 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
   27fac:	200e      	movs	r0, #14
   27fae:	e7f8      	b.n	27fa2 <att_mtu_req+0x52>

00027fb0 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   27fb0:	8a0a      	ldrh	r2, [r1, #16]
   27fb2:	68c9      	ldr	r1, [r1, #12]
   27fb4:	2300      	movs	r3, #0
   27fb6:	f7f3 ba49 	b.w	1b44c <att_handle_rsp>

00027fba <bt_att_encrypt_change>:
{
   27fba:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   27fbc:	4606      	mov	r6, r0
	if (!att_chan->att) {
   27fbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   27fc2:	f856 5904 	ldr.w	r5, [r6], #-4
{
   27fc6:	4604      	mov	r4, r0
	if (!att_chan->att) {
   27fc8:	2b00      	cmp	r3, #0
   27fca:	d036      	beq.n	2803a <bt_att_encrypt_change+0x80>
	if (hci_status) {
   27fcc:	b139      	cbz	r1, 27fde <bt_att_encrypt_change+0x24>
		if (att_chan->req && att_chan->req->retrying) {
   27fce:	6b43      	ldr	r3, [r0, #52]	; 0x34
   27fd0:	2b00      	cmp	r3, #0
   27fd2:	d032      	beq.n	2803a <bt_att_encrypt_change+0x80>
   27fd4:	7c1b      	ldrb	r3, [r3, #16]
   27fd6:	07da      	lsls	r2, r3, #31
   27fd8:	d52f      	bpl.n	2803a <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   27fda:	2305      	movs	r3, #5
   27fdc:	e020      	b.n	28020 <bt_att_encrypt_change+0x66>
	bt_gatt_encrypt_change(conn);
   27fde:	4628      	mov	r0, r5
   27fe0:	f7f5 f83a 	bl	1d058 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   27fe4:	7a6b      	ldrb	r3, [r5, #9]
   27fe6:	2b01      	cmp	r3, #1
   27fe8:	d027      	beq.n	2803a <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   27fea:	6b65      	ldr	r5, [r4, #52]	; 0x34
   27fec:	b32d      	cbz	r5, 2803a <bt_att_encrypt_change+0x80>
   27fee:	7c2b      	ldrb	r3, [r5, #16]
   27ff0:	07db      	lsls	r3, r3, #31
   27ff2:	d522      	bpl.n	2803a <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   27ff4:	68eb      	ldr	r3, [r5, #12]
   27ff6:	2b00      	cmp	r3, #0
   27ff8:	d0ef      	beq.n	27fda <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   27ffa:	696a      	ldr	r2, [r5, #20]
   27ffc:	7c69      	ldrb	r1, [r5, #17]
   27ffe:	4630      	mov	r0, r6
   28000:	f7f2 fc12 	bl	1a828 <bt_att_chan_create_pdu>
	if (!buf) {
   28004:	4604      	mov	r4, r0
   28006:	b150      	cbz	r0, 2801e <bt_att_encrypt_change+0x64>
	if (req->encode(buf, req->len, req->user_data)) {
   28008:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2800c:	68eb      	ldr	r3, [r5, #12]
   2800e:	4798      	blx	r3
   28010:	b168      	cbz	r0, 2802e <bt_att_encrypt_change+0x74>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28012:	69a0      	ldr	r0, [r4, #24]
   28014:	f7f2 f8ca 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(buf);
   28018:	4620      	mov	r0, r4
   2801a:	f7f7 fd03 	bl	1fa24 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2801e:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   28020:	2200      	movs	r2, #0
   28022:	4630      	mov	r0, r6
   28024:	4611      	mov	r1, r2
}
   28026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2802a:	f7f3 ba0f 	b.w	1b44c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2802e:	4621      	mov	r1, r4
   28030:	4630      	mov	r0, r6
   28032:	f7f2 f98f 	bl	1a354 <chan_send>
   28036:	2800      	cmp	r0, #0
   28038:	d1eb      	bne.n	28012 <bt_att_encrypt_change+0x58>
}
   2803a:	bd70      	pop	{r4, r5, r6, pc}

0002803c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2803e:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   28040:	f7f2 fa14 	bl	1a46c <att_get>
	if (!att) {
   28044:	4604      	mov	r4, r0
   28046:	b940      	cbnz	r0, 2805a <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   28048:	69a8      	ldr	r0, [r5, #24]
   2804a:	f7f2 f8af 	bl	1a1ac <tx_meta_data_free>
		net_buf_unref(buf);
   2804e:	4628      	mov	r0, r5
   28050:	f7f7 fce8 	bl	1fa24 <net_buf_unref>
		return -ENOTCONN;
   28054:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   28058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   2805a:	f100 060c 	add.w	r6, r0, #12
   2805e:	4629      	mov	r1, r5
   28060:	4630      	mov	r0, r6
   28062:	f000 ffff 	bl	29064 <net_buf_put>
	return list->head;
   28066:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28068:	b14d      	cbz	r5, 2807e <bt_att_send+0x42>
	return node->next;
   2806a:	f855 4988 	ldr.w	r4, [r5], #-136
   2806e:	b104      	cbz	r4, 28072 <bt_att_send+0x36>
   28070:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   28072:	4631      	mov	r1, r6
   28074:	4628      	mov	r0, r5
   28076:	f7ff fcd3 	bl	27a20 <process_queue>
		if (!err) {
   2807a:	4603      	mov	r3, r0
   2807c:	b980      	cbnz	r0, 280a0 <bt_att_send+0x64>
	return 0;
   2807e:	2000      	movs	r0, #0
   28080:	e7ea      	b.n	28058 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   28082:	2103      	movs	r1, #3
   28084:	f104 0034 	add.w	r0, r4, #52	; 0x34
   28088:	f7ff fbdb 	bl	27842 <atomic_test_bit>
   2808c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2808e:	f105 0034 	add.w	r0, r5, #52	; 0x34
   28092:	f7ff fbd6 	bl	27842 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   28096:	4287      	cmp	r7, r0
   28098:	f06f 0301 	mvn.w	r3, #1
   2809c:	d107      	bne.n	280ae <bt_att_send+0x72>
   2809e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   280a0:	2c00      	cmp	r4, #0
   280a2:	d0ec      	beq.n	2807e <bt_att_send+0x42>
   280a4:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   280a8:	b922      	cbnz	r2, 280b4 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   280aa:	3302      	adds	r3, #2
   280ac:	d0e9      	beq.n	28082 <bt_att_send+0x46>
{
   280ae:	4625      	mov	r5, r4
   280b0:	4614      	mov	r4, r2
   280b2:	e7de      	b.n	28072 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   280b4:	3a88      	subs	r2, #136	; 0x88
   280b6:	e7f8      	b.n	280aa <bt_att_send+0x6e>

000280b8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   280b8:	b510      	push	{r4, lr}
   280ba:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   280bc:	f7f2 f9d6 	bl	1a46c <att_get>
	if (!att) {
   280c0:	b160      	cbz	r0, 280dc <bt_att_req_send+0x24>
	parent->next = child;
   280c2:	2300      	movs	r3, #0
   280c4:	6023      	str	r3, [r4, #0]
	return list->tail;
   280c6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   280c8:	b92b      	cbnz	r3, 280d6 <bt_att_req_send+0x1e>
	list->head = node;
   280ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   280ce:	f7ff fe1a 	bl	27d06 <att_req_send_process>

	return 0;
   280d2:	2000      	movs	r0, #0
}
   280d4:	bd10      	pop	{r4, pc}
	parent->next = child;
   280d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   280d8:	6084      	str	r4, [r0, #8]
}
   280da:	e7f8      	b.n	280ce <bt_att_req_send+0x16>
		return -ENOTCONN;
   280dc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   280e0:	e7f8      	b.n	280d4 <bt_att_req_send+0x1c>

000280e2 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   280e2:	2001      	movs	r0, #1
   280e4:	4770      	bx	lr

000280e6 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   280e6:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   280e8:	f7f2 f9c0 	bl	1a46c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   280ec:	b150      	cbz	r0, 28104 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   280ee:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   280f0:	b144      	cbz	r4, 28104 <bt_att_clear_out_of_sync_sent+0x1e>
   280f2:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   280f4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   280f8:	2105      	movs	r1, #5
   280fa:	f7ff fcd1 	bl	27aa0 <atomic_clear_bit>
	return node->next;
   280fe:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   28102:	e7f5      	b.n	280f0 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   28104:	bd10      	pop	{r4, pc}

00028106 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28106:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28108:	2104      	movs	r1, #4
   2810a:	f7ff fb6d 	bl	277e8 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2810e:	b128      	cbz	r0, 2811c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   28110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   28114:	2105      	movs	r1, #5
   28116:	3030      	adds	r0, #48	; 0x30
   28118:	f7ff bb93 	b.w	27842 <atomic_test_bit>
}
   2811c:	bd08      	pop	{r3, pc}

0002811e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2811e:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   28120:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   28124:	2201      	movs	r2, #1
   28126:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28128:	7403      	strb	r3, [r0, #16]
}
   2812a:	4770      	bx	lr

0002812c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2812c:	6010      	str	r0, [r2, #0]
}
   2812e:	2000      	movs	r0, #0
   28130:	4770      	bx	lr

00028132 <gatt_ccc_changed>:
{
   28132:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   28134:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   28136:	895a      	ldrh	r2, [r3, #10]
   28138:	428a      	cmp	r2, r1
   2813a:	d003      	beq.n	28144 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2813c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2813e:	68db      	ldr	r3, [r3, #12]
   28140:	b103      	cbz	r3, 28144 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   28142:	4718      	bx	r3
}
   28144:	4770      	bx	lr

00028146 <gatt_indicate_rsp>:
{
   28146:	b510      	push	{r4, lr}
   28148:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2814a:	68a3      	ldr	r3, [r4, #8]
{
   2814c:	460a      	mov	r2, r1
	if (params->func) {
   2814e:	b10b      	cbz	r3, 28154 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   28150:	4621      	mov	r1, r4
   28152:	4798      	blx	r3
	params->_ref--;
   28154:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28156:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   28158:	3b01      	subs	r3, #1
   2815a:	b2db      	uxtb	r3, r3
   2815c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2815e:	b122      	cbz	r2, 2816a <gatt_indicate_rsp+0x24>
   28160:	b91b      	cbnz	r3, 2816a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   28162:	4620      	mov	r0, r4
}
   28164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   28168:	4710      	bx	r2
}
   2816a:	bd10      	pop	{r4, pc}

0002816c <match_uuid>:
	data->attr = attr;
   2816c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2816e:	8091      	strh	r1, [r2, #4]
}
   28170:	2000      	movs	r0, #0
   28172:	4770      	bx	lr

00028174 <ccc_set_cb>:
}
   28174:	2000      	movs	r0, #0
   28176:	4770      	bx	lr

00028178 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28178:	2207      	movs	r2, #7
   2817a:	f7fe bd37 	b.w	26bec <memcpy>

0002817e <write_name>:
{
   2817e:	b570      	push	{r4, r5, r6, lr}
   28180:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28182:	2100      	movs	r1, #0
{
   28184:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28188:	9101      	str	r1, [sp, #4]
{
   2818a:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2818c:	a802      	add	r0, sp, #8
   2818e:	223d      	movs	r2, #61	; 0x3d
{
   28190:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28192:	f7fe fd36 	bl	26c02 <memset>
	if (offset >= sizeof(value)) {
   28196:	2d40      	cmp	r5, #64	; 0x40
   28198:	d80d      	bhi.n	281b6 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   2819a:	4425      	add	r5, r4
   2819c:	2d40      	cmp	r5, #64	; 0x40
   2819e:	dc0d      	bgt.n	281bc <write_name+0x3e>
	memcpy(value, buf, len);
   281a0:	4622      	mov	r2, r4
   281a2:	4631      	mov	r1, r6
   281a4:	a801      	add	r0, sp, #4
   281a6:	f7fe fd21 	bl	26bec <memcpy>
	bt_set_name(value);
   281aa:	a801      	add	r0, sp, #4
   281ac:	f7ef fbe6 	bl	1797c <bt_set_name>
}
   281b0:	4620      	mov	r0, r4
   281b2:	b012      	add	sp, #72	; 0x48
   281b4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   281b6:	f06f 0406 	mvn.w	r4, #6
   281ba:	e7f9      	b.n	281b0 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   281bc:	f06f 040c 	mvn.w	r4, #12
   281c0:	e7f6      	b.n	281b0 <write_name+0x32>

000281c2 <gen_hash_m>:
{
   281c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   281c4:	6807      	ldr	r7, [r0, #0]
   281c6:	783d      	ldrb	r5, [r7, #0]
{
   281c8:	b089      	sub	sp, #36	; 0x24
   281ca:	4606      	mov	r6, r0
   281cc:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   281ce:	b9dd      	cbnz	r5, 28208 <gen_hash_m+0x46>
	switch (u16->val) {
   281d0:	887b      	ldrh	r3, [r7, #2]
   281d2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   281d6:	d004      	beq.n	281e2 <gen_hash_m+0x20>
   281d8:	d810      	bhi.n	281fc <gen_hash_m+0x3a>
   281da:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   281de:	2b03      	cmp	r3, #3
   281e0:	d812      	bhi.n	28208 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   281e2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   281e6:	2202      	movs	r2, #2
   281e8:	f10d 010a 	add.w	r1, sp, #10
   281ec:	4620      	mov	r0, r4
   281ee:	f7fe fb77 	bl	268e0 <tc_cmac_update>
   281f2:	b968      	cbnz	r0, 28210 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   281f4:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   281f8:	65a2      	str	r2, [r4, #88]	; 0x58
   281fa:	e006      	b.n	2820a <gen_hash_m+0x48>
	switch (u16->val) {
   281fc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   28200:	33ff      	adds	r3, #255	; 0xff
   28202:	b29b      	uxth	r3, r3
   28204:	2b04      	cmp	r3, #4
   28206:	d91e      	bls.n	28246 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   28208:	2501      	movs	r5, #1
}
   2820a:	4628      	mov	r0, r5
   2820c:	b009      	add	sp, #36	; 0x24
   2820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   28210:	887b      	ldrh	r3, [r7, #2]
   28212:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28216:	2202      	movs	r2, #2
   28218:	f10d 010a 	add.w	r1, sp, #10
   2821c:	4620      	mov	r0, r4
   2821e:	f7fe fb5f 	bl	268e0 <tc_cmac_update>
   28222:	2800      	cmp	r0, #0
   28224:	d0e6      	beq.n	281f4 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   28226:	2000      	movs	r0, #0
   28228:	9000      	str	r0, [sp, #0]
   2822a:	aa03      	add	r2, sp, #12
   2822c:	6877      	ldr	r7, [r6, #4]
   2822e:	2313      	movs	r3, #19
   28230:	4631      	mov	r1, r6
   28232:	47b8      	blx	r7
		if (len < 0) {
   28234:	1e02      	subs	r2, r0, #0
   28236:	dbdf      	blt.n	281f8 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   28238:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2823a:	4620      	mov	r0, r4
   2823c:	f7fe fb50 	bl	268e0 <tc_cmac_update>
   28240:	2800      	cmp	r0, #0
   28242:	d1e1      	bne.n	28208 <gen_hash_m+0x46>
   28244:	e7d6      	b.n	281f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   28246:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2824a:	2202      	movs	r2, #2
   2824c:	f10d 010a 	add.w	r1, sp, #10
   28250:	4620      	mov	r0, r4
   28252:	f7fe fb45 	bl	268e0 <tc_cmac_update>
   28256:	2800      	cmp	r0, #0
   28258:	d0cc      	beq.n	281f4 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2825a:	887b      	ldrh	r3, [r7, #2]
   2825c:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28260:	2202      	movs	r2, #2
   28262:	f10d 010a 	add.w	r1, sp, #10
   28266:	e7e8      	b.n	2823a <gen_hash_m+0x78>

00028268 <bt_addr_le_eq>:
{
   28268:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2826a:	2207      	movs	r2, #7
   2826c:	f7fe fcae 	bl	26bcc <memcmp>
}
   28270:	fab0 f080 	clz	r0, r0
   28274:	0940      	lsrs	r0, r0, #5
   28276:	bd08      	pop	{r3, pc}

00028278 <ccc_find_cfg>:
{
   28278:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2827a:	7803      	ldrb	r3, [r0, #0]
   2827c:	4293      	cmp	r3, r2
{
   2827e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   28280:	d105      	bne.n	2828e <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   28282:	3001      	adds	r0, #1
   28284:	f7ff fff0 	bl	28268 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   28288:	b108      	cbz	r0, 2828e <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2828a:	4620      	mov	r0, r4
}
   2828c:	bd10      	pop	{r4, pc}
	return NULL;
   2828e:	2000      	movs	r0, #0
   28290:	e7fc      	b.n	2828c <ccc_find_cfg+0x14>

00028292 <atomic_or>:
{
   28292:	b510      	push	{r4, lr}
   28294:	4603      	mov	r3, r0
}
   28296:	f3bf 8f5b 	dmb	ish
   2829a:	e853 0f00 	ldrex	r0, [r3]
   2829e:	ea40 0201 	orr.w	r2, r0, r1
   282a2:	e843 2400 	strex	r4, r2, [r3]
   282a6:	2c00      	cmp	r4, #0
   282a8:	d1f7      	bne.n	2829a <atomic_or+0x8>
   282aa:	f3bf 8f5b 	dmb	ish
   282ae:	bd10      	pop	{r4, pc}

000282b0 <atomic_and>:
{
   282b0:	b510      	push	{r4, lr}
   282b2:	4603      	mov	r3, r0
}
   282b4:	f3bf 8f5b 	dmb	ish
   282b8:	e853 0f00 	ldrex	r0, [r3]
   282bc:	ea00 0201 	and.w	r2, r0, r1
   282c0:	e843 2400 	strex	r4, r2, [r3]
   282c4:	2c00      	cmp	r4, #0
   282c6:	d1f7      	bne.n	282b8 <atomic_and+0x8>
   282c8:	f3bf 8f5b 	dmb	ish
   282cc:	bd10      	pop	{r4, pc}

000282ce <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   282ce:	f3bf 8f5b 	dmb	ish
   282d2:	6800      	ldr	r0, [r0, #0]
   282d4:	f3bf 8f5b 	dmb	ish
}
   282d8:	4770      	bx	lr

000282da <z_log_msg_static_create.constprop.0>:
   282da:	2300      	movs	r3, #0
   282dc:	f7eb bb24 	b.w	13928 <z_impl_z_log_msg_static_create>

000282e0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   282e0:	2a02      	cmp	r2, #2
{
   282e2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   282e4:	d108      	bne.n	282f8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   282e6:	2300      	movs	r3, #0
   282e8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   282ec:	461a      	mov	r2, r3
   282ee:	7a00      	ldrb	r0, [r0, #8]
   282f0:	f7f3 fbc2 	bl	1ba78 <sc_save>
}
   282f4:	2002      	movs	r0, #2
   282f6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   282f8:	f7f3 fd14 	bl	1bd24 <sc_clear>
   282fc:	e7fa      	b.n	282f4 <sc_ccc_cfg_write+0x14>

000282fe <read_appearance>:
{
   282fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28300:	4615      	mov	r5, r2
   28302:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28306:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28308:	f7fe fe77 	bl	26ffa <bt_get_appearance>
	if (offset > value_len) {
   2830c:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2830e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28312:	d80e      	bhi.n	28332 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   28314:	f1c6 0402 	rsb	r4, r6, #2
   28318:	42bc      	cmp	r4, r7
   2831a:	bfa8      	it	ge
   2831c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2831e:	f10d 0306 	add.w	r3, sp, #6
   28322:	4622      	mov	r2, r4
   28324:	1999      	adds	r1, r3, r6
   28326:	4628      	mov	r0, r5
   28328:	f7fe fc60 	bl	26bec <memcpy>
}
   2832c:	4620      	mov	r0, r4
   2832e:	b003      	add	sp, #12
   28330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28332:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28336:	e7f9      	b.n	2832c <read_appearance+0x2e>

00028338 <read_name>:
{
   28338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2833c:	4698      	mov	r8, r3
   2833e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   28342:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   28344:	f7ef fb5a 	bl	179fc <bt_get_name>
   28348:	4607      	mov	r7, r0
				 strlen(name));
   2834a:	f7fe fc0f 	bl	26b6c <strlen>
	if (offset > value_len) {
   2834e:	b283      	uxth	r3, r0
   28350:	42b3      	cmp	r3, r6
   28352:	d30c      	bcc.n	2836e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   28354:	1b9c      	subs	r4, r3, r6
   28356:	4544      	cmp	r4, r8
   28358:	bfa8      	it	ge
   2835a:	4644      	movge	r4, r8
   2835c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2835e:	4622      	mov	r2, r4
   28360:	19b9      	adds	r1, r7, r6
   28362:	4628      	mov	r0, r5
   28364:	f7fe fc42 	bl	26bec <memcpy>
}
   28368:	4620      	mov	r0, r4
   2836a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2836e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28372:	e7f9      	b.n	28368 <read_name+0x30>

00028374 <cf_read>:
{
   28374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28376:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28378:	2300      	movs	r3, #0
{
   2837a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2837e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28382:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28384:	f7f3 f9f2 	bl	1b76c <find_cf_cfg>
	if (cfg) {
   28388:	b128      	cbz	r0, 28396 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2838a:	f100 0108 	add.w	r1, r0, #8
   2838e:	2201      	movs	r2, #1
   28390:	a801      	add	r0, sp, #4
   28392:	f7fe fc2b 	bl	26bec <memcpy>
	if (offset > value_len) {
   28396:	2e01      	cmp	r6, #1
   28398:	d80d      	bhi.n	283b6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2839a:	f1c6 0401 	rsb	r4, r6, #1
   2839e:	42bc      	cmp	r4, r7
   283a0:	bfa8      	it	ge
   283a2:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   283a4:	ab01      	add	r3, sp, #4
   283a6:	4622      	mov	r2, r4
   283a8:	1999      	adds	r1, r3, r6
   283aa:	4628      	mov	r0, r5
   283ac:	f7fe fc1e 	bl	26bec <memcpy>
}
   283b0:	4620      	mov	r0, r4
   283b2:	b003      	add	sp, #12
   283b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   283b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   283ba:	e7f9      	b.n	283b0 <cf_read+0x3c>

000283bc <bt_gatt_attr_read_service>:
{
   283bc:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   283be:	68c9      	ldr	r1, [r1, #12]
{
   283c0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   283c2:	780a      	ldrb	r2, [r1, #0]
{
   283c4:	461c      	mov	r4, r3
   283c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   283ca:	b992      	cbnz	r2, 283f2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   283cc:	884a      	ldrh	r2, [r1, #2]
   283ce:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   283d2:	2b02      	cmp	r3, #2
   283d4:	d818      	bhi.n	28408 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   283d6:	f1c3 0202 	rsb	r2, r3, #2
   283da:	4294      	cmp	r4, r2
   283dc:	bfa8      	it	ge
   283de:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   283e0:	4622      	mov	r2, r4
   283e2:	f10d 0106 	add.w	r1, sp, #6
   283e6:	4419      	add	r1, r3
   283e8:	f7fe fc00 	bl	26bec <memcpy>
}
   283ec:	4620      	mov	r0, r4
   283ee:	b002      	add	sp, #8
   283f0:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   283f2:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   283f4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   283f8:	d806      	bhi.n	28408 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   283fa:	f1c3 0210 	rsb	r2, r3, #16
   283fe:	4294      	cmp	r4, r2
   28400:	bfa8      	it	ge
   28402:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28404:	4622      	mov	r2, r4
   28406:	e7ee      	b.n	283e6 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28408:	f06f 0406 	mvn.w	r4, #6
   2840c:	e7ee      	b.n	283ec <bt_gatt_attr_read_service+0x30>

0002840e <bt_gatt_attr_read_ccc>:
{
   2840e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   28410:	68c9      	ldr	r1, [r1, #12]
{
   28412:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28416:	4615      	mov	r5, r2
   28418:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2841a:	f7f3 f9d5 	bl	1b7c8 <find_ccc_cfg>
	if (cfg) {
   2841e:	b100      	cbz	r0, 28422 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   28420:	8900      	ldrh	r0, [r0, #8]
   28422:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28426:	2e02      	cmp	r6, #2
   28428:	d80e      	bhi.n	28448 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2842a:	f1c6 0402 	rsb	r4, r6, #2
   2842e:	42bc      	cmp	r4, r7
   28430:	bfa8      	it	ge
   28432:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28434:	f10d 0306 	add.w	r3, sp, #6
   28438:	4622      	mov	r2, r4
   2843a:	1999      	adds	r1, r3, r6
   2843c:	4628      	mov	r0, r5
   2843e:	f7fe fbd5 	bl	26bec <memcpy>
}
   28442:	4620      	mov	r0, r4
   28444:	b003      	add	sp, #12
   28446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28448:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2844c:	e7f9      	b.n	28442 <bt_gatt_attr_read_ccc+0x34>

0002844e <set_change_aware_no_store>:
{
   2844e:	b508      	push	{r3, lr}
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28450:	300c      	adds	r0, #12
	if (aware) {
   28452:	b129      	cbz	r1, 28460 <set_change_aware_no_store+0x12>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   28454:	2101      	movs	r1, #1
   28456:	f7ff ff1c 	bl	28292 <atomic_or>
		changed = !atomic_test_and_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2845a:	43c0      	mvns	r0, r0
   2845c:	4008      	ands	r0, r1
}
   2845e:	bd08      	pop	{r3, pc}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28460:	f06f 0101 	mvn.w	r1, #1
   28464:	f7ff ff24 	bl	282b0 <atomic_and>
	return (old & mask) != 0;
   28468:	f000 0001 	and.w	r0, r0, #1
   2846c:	e7f7      	b.n	2845e <set_change_aware_no_store+0x10>

0002846e <set_change_aware>:
{
   2846e:	b510      	push	{r4, lr}
   28470:	4604      	mov	r4, r0
	bool changed = set_change_aware_no_store(cfg, aware);
   28472:	f7ff ffec 	bl	2844e <set_change_aware_no_store>
	if (changed) {
   28476:	b138      	cbz	r0, 28488 <set_change_aware+0x1a>
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   28478:	4621      	mov	r1, r4
   2847a:	2201      	movs	r2, #1
}
   2847c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		gatt_delayed_store_enqueue(cfg->id, &cfg->peer, DELAYED_STORE_CF);
   28480:	f811 0b01 	ldrb.w	r0, [r1], #1
   28484:	f7f3 b9b4 	b.w	1b7f0 <gatt_delayed_store_enqueue>
}
   28488:	bd10      	pop	{r4, pc}

0002848a <sc_restore_rsp>:
{
   2848a:	b538      	push	{r3, r4, r5, lr}
   2848c:	4604      	mov	r4, r0
   2848e:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   28490:	f7ff fe27 	bl	280e2 <bt_att_fixed_chan_only>
   28494:	b148      	cbz	r0, 284aa <sc_restore_rsp+0x20>
		cfg = find_cf_cfg(conn);
   28496:	4620      	mov	r0, r4
   28498:	f7f3 f968 	bl	1b76c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2849c:	b128      	cbz	r0, 284aa <sc_restore_rsp+0x20>
   2849e:	7a03      	ldrb	r3, [r0, #8]
   284a0:	07db      	lsls	r3, r3, #31
   284a2:	d502      	bpl.n	284aa <sc_restore_rsp+0x20>
			set_change_aware(cfg, true);
   284a4:	2101      	movs	r1, #1
   284a6:	f7ff ffe2 	bl	2846e <set_change_aware>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   284aa:	b985      	cbnz	r5, 284ce <sc_restore_rsp+0x44>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   284ac:	7a20      	ldrb	r0, [r4, #8]
   284ae:	f104 0188 	add.w	r1, r4, #136	; 0x88
   284b2:	f7f3 f8f3 	bl	1b69c <find_sc_cfg>
		if (sc_cfg) {
   284b6:	4604      	mov	r4, r0
   284b8:	b148      	cbz	r0, 284ce <sc_restore_rsp+0x44>
	memset(&cfg->data, 0, sizeof(cfg->data));
   284ba:	4629      	mov	r1, r5
   284bc:	2204      	movs	r2, #4
   284be:	3008      	adds	r0, #8
   284c0:	f7fe fb9f 	bl	26c02 <memset>
		sc_store(cfg);
   284c4:	4620      	mov	r0, r4
}
   284c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   284ca:	f7f3 ba9d 	b.w	1ba08 <sc_store>
}
   284ce:	bd38      	pop	{r3, r4, r5, pc}

000284d0 <bt_gatt_attr_read>:
{
   284d0:	b510      	push	{r4, lr}
   284d2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   284d6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   284da:	42a1      	cmp	r1, r4
{
   284dc:	4610      	mov	r0, r2
	if (offset > value_len) {
   284de:	d80b      	bhi.n	284f8 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   284e0:	1a64      	subs	r4, r4, r1
   284e2:	429c      	cmp	r4, r3
   284e4:	bfa8      	it	ge
   284e6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   284e8:	9b03      	ldr	r3, [sp, #12]
   284ea:	b2a4      	uxth	r4, r4
   284ec:	4622      	mov	r2, r4
   284ee:	4419      	add	r1, r3
   284f0:	f7fe fb7c 	bl	26bec <memcpy>
}
   284f4:	4620      	mov	r0, r4
   284f6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   284f8:	f06f 0406 	mvn.w	r4, #6
   284fc:	e7fa      	b.n	284f4 <bt_gatt_attr_read+0x24>

000284fe <bt_gatt_attr_value_handle>:
{
   284fe:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28500:	4604      	mov	r4, r0
   28502:	b910      	cbnz	r0, 2850a <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28504:	2000      	movs	r0, #0
}
   28506:	b002      	add	sp, #8
   28508:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2850a:	2300      	movs	r3, #0
   2850c:	f88d 3004 	strb.w	r3, [sp, #4]
   28510:	6800      	ldr	r0, [r0, #0]
   28512:	f642 0303 	movw	r3, #10243	; 0x2803
   28516:	a901      	add	r1, sp, #4
   28518:	f8ad 3006 	strh.w	r3, [sp, #6]
   2851c:	f7fe fc0a 	bl	26d34 <bt_uuid_cmp>
   28520:	2800      	cmp	r0, #0
   28522:	d1ef      	bne.n	28504 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28524:	68e3      	ldr	r3, [r4, #12]
   28526:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28528:	2800      	cmp	r0, #0
   2852a:	d1ec      	bne.n	28506 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2852c:	4620      	mov	r0, r4
   2852e:	f7f3 ff8b 	bl	1c448 <bt_gatt_attr_get_handle>
   28532:	3001      	adds	r0, #1
   28534:	b280      	uxth	r0, r0
	return handle;
   28536:	e7e6      	b.n	28506 <bt_gatt_attr_value_handle+0x8>

00028538 <bt_gatt_attr_read_chrc>:
{
   28538:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2853a:	68cc      	ldr	r4, [r1, #12]
{
   2853c:	b087      	sub	sp, #28
   2853e:	4608      	mov	r0, r1
   28540:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   28542:	79a3      	ldrb	r3, [r4, #6]
   28544:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28548:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2854c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2854e:	f7ff ffd6 	bl	284fe <bt_gatt_attr_value_handle>
   28552:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28556:	6821      	ldr	r1, [r4, #0]
   28558:	780b      	ldrb	r3, [r1, #0]
   2855a:	b99b      	cbnz	r3, 28584 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2855c:	884b      	ldrh	r3, [r1, #2]
   2855e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28562:	2405      	movs	r4, #5
	if (offset > value_len) {
   28564:	42b4      	cmp	r4, r6
   28566:	d315      	bcc.n	28594 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28568:	1ba4      	subs	r4, r4, r6
   2856a:	42bc      	cmp	r4, r7
   2856c:	bfa8      	it	ge
   2856e:	463c      	movge	r4, r7
   28570:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28572:	ab01      	add	r3, sp, #4
   28574:	4622      	mov	r2, r4
   28576:	1999      	adds	r1, r3, r6
   28578:	4628      	mov	r0, r5
   2857a:	f7fe fb37 	bl	26bec <memcpy>
}
   2857e:	4620      	mov	r0, r4
   28580:	b007      	add	sp, #28
   28582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28584:	2210      	movs	r2, #16
   28586:	3101      	adds	r1, #1
   28588:	f10d 0007 	add.w	r0, sp, #7
   2858c:	f7fe fb2e 	bl	26bec <memcpy>
		value_len += 16U;
   28590:	2413      	movs	r4, #19
   28592:	e7e7      	b.n	28564 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28594:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28598:	e7f1      	b.n	2857e <bt_gatt_attr_read_chrc+0x46>

0002859a <bt_gatt_foreach_attr>:
{
   2859a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2859c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   285a0:	2300      	movs	r3, #0
   285a2:	9300      	str	r3, [sp, #0]
   285a4:	461a      	mov	r2, r3
   285a6:	f7f3 ff7f 	bl	1c4a8 <bt_gatt_foreach_attr_type>
}
   285aa:	b005      	add	sp, #20
   285ac:	f85d fb04 	ldr.w	pc, [sp], #4

000285b0 <db_hash_process>:
	do_db_hash();
   285b0:	f7f4 b86a 	b.w	1c688 <do_db_hash>

000285b4 <bt_gatt_attr_read_cep>:
{
   285b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   285b6:	4610      	mov	r0, r2
   285b8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   285bc:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   285be:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   285c0:	8812      	ldrh	r2, [r2, #0]
   285c2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   285c6:	d80d      	bhi.n	285e4 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   285c8:	f1c5 0402 	rsb	r4, r5, #2
   285cc:	429c      	cmp	r4, r3
   285ce:	bfa8      	it	ge
   285d0:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   285d2:	f10d 0306 	add.w	r3, sp, #6
   285d6:	4622      	mov	r2, r4
   285d8:	1959      	adds	r1, r3, r5
   285da:	f7fe fb07 	bl	26bec <memcpy>
}
   285de:	4620      	mov	r0, r4
   285e0:	b003      	add	sp, #12
   285e2:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   285e4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   285e8:	e7f9      	b.n	285de <bt_gatt_attr_read_cep+0x2a>

000285ea <bt_gatt_check_perm>:
{
   285ea:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   285ec:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285ee:	8a4b      	ldrh	r3, [r1, #18]
{
   285f0:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   285f2:	d504      	bpl.n	285fe <bt_gatt_check_perm+0x14>
   285f4:	f013 0f95 	tst.w	r3, #149	; 0x95
   285f8:	d02b      	beq.n	28652 <bt_gatt_check_perm+0x68>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   285fa:	6848      	ldr	r0, [r1, #4]
   285fc:	b348      	cbz	r0, 28652 <bt_gatt_check_perm+0x68>
	if ((mask & BT_GATT_PERM_WRITE) &&
   285fe:	0790      	lsls	r0, r2, #30
   28600:	d504      	bpl.n	2860c <bt_gatt_check_perm+0x22>
   28602:	f413 7f95 	tst.w	r3, #298	; 0x12a
   28606:	d026      	beq.n	28656 <bt_gatt_check_perm+0x6c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28608:	6889      	ldr	r1, [r1, #8]
   2860a:	b321      	cbz	r1, 28656 <bt_gatt_check_perm+0x6c>
	mask &= attr->perm;
   2860c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   28610:	f014 0f3c 	tst.w	r4, #60	; 0x3c
   28614:	d00d      	beq.n	28632 <bt_gatt_check_perm+0x48>
		if (!conn->encrypt) {
   28616:	7aeb      	ldrb	r3, [r5, #11]
   28618:	b92b      	cbnz	r3, 28626 <bt_gatt_check_perm+0x3c>
			if (bt_conn_ltk_present(conn)) {
   2861a:	4628      	mov	r0, r5
   2861c:	f7fe ffc1 	bl	275a2 <bt_conn_ltk_present>
   28620:	b9d8      	cbnz	r0, 2865a <bt_gatt_check_perm+0x70>
				return BT_ATT_ERR_AUTHENTICATION;
   28622:	2005      	movs	r0, #5
}
   28624:	bd38      	pop	{r3, r4, r5, pc}
		if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28626:	f014 0f30 	tst.w	r4, #48	; 0x30
   2862a:	d104      	bne.n	28636 <bt_gatt_check_perm+0x4c>
		if (mask & BT_GATT_PERM_LESC_MASK) {
   2862c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   28630:	d107      	bne.n	28642 <bt_gatt_check_perm+0x58>
	return 0;
   28632:	2000      	movs	r0, #0
   28634:	e7f6      	b.n	28624 <bt_gatt_check_perm+0x3a>
			if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28636:	4628      	mov	r0, r5
   28638:	f7fe fffa 	bl	27630 <bt_conn_get_security>
   2863c:	2802      	cmp	r0, #2
   2863e:	d8f5      	bhi.n	2862c <bt_gatt_check_perm+0x42>
   28640:	e7ef      	b.n	28622 <bt_gatt_check_perm+0x38>
			const struct bt_keys *keys = conn->le.keys;
   28642:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
			if (!keys || (keys->flags & BT_KEYS_SC) == 0) {
   28646:	2b00      	cmp	r3, #0
   28648:	d0eb      	beq.n	28622 <bt_gatt_check_perm+0x38>
   2864a:	7b5b      	ldrb	r3, [r3, #13]
   2864c:	06db      	lsls	r3, r3, #27
   2864e:	d5e8      	bpl.n	28622 <bt_gatt_check_perm+0x38>
   28650:	e7ef      	b.n	28632 <bt_gatt_check_perm+0x48>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28652:	2002      	movs	r0, #2
   28654:	e7e6      	b.n	28624 <bt_gatt_check_perm+0x3a>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28656:	2003      	movs	r0, #3
   28658:	e7e4      	b.n	28624 <bt_gatt_check_perm+0x3a>
				return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2865a:	200f      	movs	r0, #15
   2865c:	e7e2      	b.n	28624 <bt_gatt_check_perm+0x3a>

0002865e <bt_gatt_is_subscribed>:
{
   2865e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28662:	7b43      	ldrb	r3, [r0, #13]
   28664:	2b07      	cmp	r3, #7
{
   28666:	4605      	mov	r5, r0
   28668:	460c      	mov	r4, r1
   2866a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   2866c:	d110      	bne.n	28690 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2866e:	2300      	movs	r3, #0
   28670:	f88d 300c 	strb.w	r3, [sp, #12]
   28674:	6820      	ldr	r0, [r4, #0]
   28676:	f642 0303 	movw	r3, #10243	; 0x2803
   2867a:	a903      	add	r1, sp, #12
   2867c:	f8ad 300e 	strh.w	r3, [sp, #14]
   28680:	f7fe fb58 	bl	26d34 <bt_uuid_cmp>
   28684:	b960      	cbnz	r0, 286a0 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   28686:	68e3      	ldr	r3, [r4, #12]
   28688:	799b      	ldrb	r3, [r3, #6]
   2868a:	f013 0f30 	tst.w	r3, #48	; 0x30
   2868e:	d103      	bne.n	28698 <bt_gatt_is_subscribed+0x3a>
		return false;
   28690:	2000      	movs	r0, #0
}
   28692:	b004      	add	sp, #16
   28694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   28698:	4620      	mov	r0, r4
   2869a:	f7f4 f8dd 	bl	1c858 <bt_gatt_attr_next>
   2869e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   286a0:	2300      	movs	r3, #0
   286a2:	6820      	ldr	r0, [r4, #0]
   286a4:	f88d 300c 	strb.w	r3, [sp, #12]
   286a8:	a903      	add	r1, sp, #12
   286aa:	f642 1302 	movw	r3, #10498	; 0x2902
   286ae:	f8ad 300e 	strh.w	r3, [sp, #14]
   286b2:	f7fe fb3f 	bl	26d34 <bt_uuid_cmp>
   286b6:	b118      	cbz	r0, 286c0 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   286b8:	4620      	mov	r0, r4
   286ba:	f7f4 f8cd 	bl	1c858 <bt_gatt_attr_next>
   286be:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   286c0:	2600      	movs	r6, #0
   286c2:	f642 1802 	movw	r8, #10498	; 0x2902
   286c6:	6820      	ldr	r0, [r4, #0]
   286c8:	f88d 6000 	strb.w	r6, [sp]
   286cc:	4669      	mov	r1, sp
   286ce:	f8ad 8002 	strh.w	r8, [sp, #2]
   286d2:	f7fe fb2f 	bl	26d34 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   286d6:	b9d8      	cbnz	r0, 28710 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   286d8:	2300      	movs	r3, #0
   286da:	6820      	ldr	r0, [r4, #0]
   286dc:	f88d 300c 	strb.w	r3, [sp, #12]
   286e0:	a903      	add	r1, sp, #12
   286e2:	f642 1302 	movw	r3, #10498	; 0x2902
   286e6:	f8ad 300e 	strh.w	r3, [sp, #14]
   286ea:	f7fe fb23 	bl	26d34 <bt_uuid_cmp>
   286ee:	2800      	cmp	r0, #0
   286f0:	d1ce      	bne.n	28690 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   286f2:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   286f4:	4622      	mov	r2, r4
   286f6:	4628      	mov	r0, r5
   286f8:	f812 1b01 	ldrb.w	r1, [r2], #1
   286fc:	f7fe ff9a 	bl	27634 <bt_conn_is_peer_addr_le>
   28700:	2800      	cmp	r0, #0
   28702:	d0c5      	beq.n	28690 <bt_gatt_is_subscribed+0x32>
   28704:	8923      	ldrh	r3, [r4, #8]
   28706:	421f      	tst	r7, r3
   28708:	bf14      	ite	ne
   2870a:	2001      	movne	r0, #1
   2870c:	2000      	moveq	r0, #0
   2870e:	e7c0      	b.n	28692 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   28710:	6820      	ldr	r0, [r4, #0]
   28712:	f88d 6004 	strb.w	r6, [sp, #4]
   28716:	f642 0303 	movw	r3, #10243	; 0x2803
   2871a:	a901      	add	r1, sp, #4
   2871c:	f8ad 3006 	strh.w	r3, [sp, #6]
   28720:	f7fe fb08 	bl	26d34 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   28724:	2800      	cmp	r0, #0
   28726:	d0d7      	beq.n	286d8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   28728:	6820      	ldr	r0, [r4, #0]
   2872a:	f88d 6008 	strb.w	r6, [sp, #8]
   2872e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   28732:	a902      	add	r1, sp, #8
   28734:	f8ad 300a 	strh.w	r3, [sp, #10]
   28738:	f7fe fafc 	bl	26d34 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2873c:	2800      	cmp	r0, #0
   2873e:	d0cb      	beq.n	286d8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   28740:	6820      	ldr	r0, [r4, #0]
   28742:	f88d 600c 	strb.w	r6, [sp, #12]
   28746:	f642 0301 	movw	r3, #10241	; 0x2801
   2874a:	a903      	add	r1, sp, #12
   2874c:	f8ad 300e 	strh.w	r3, [sp, #14]
   28750:	f7fe faf0 	bl	26d34 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   28754:	2800      	cmp	r0, #0
   28756:	d0bf      	beq.n	286d8 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   28758:	4620      	mov	r0, r4
   2875a:	f7f4 f87d 	bl	1c858 <bt_gatt_attr_next>
		if (!attr) {
   2875e:	4604      	mov	r4, r0
   28760:	2800      	cmp	r0, #0
   28762:	d1b0      	bne.n	286c6 <bt_gatt_is_subscribed+0x68>
   28764:	e794      	b.n	28690 <bt_gatt_is_subscribed+0x32>

00028766 <bt_gatt_change_aware>:
{
   28766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2876a:	4605      	mov	r5, r0
   2876c:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   2876e:	f7f2 fffd 	bl	1b76c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28772:	4604      	mov	r4, r0
   28774:	b1e0      	cbz	r0, 287b0 <bt_gatt_change_aware+0x4a>
   28776:	7a03      	ldrb	r3, [r0, #8]
   28778:	07db      	lsls	r3, r3, #31
   2877a:	d519      	bpl.n	287b0 <bt_gatt_change_aware+0x4a>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2877c:	f100 070c 	add.w	r7, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28780:	4638      	mov	r0, r7
   28782:	f7ff fda4 	bl	282ce <atomic_get>
   28786:	f010 0601 	ands.w	r6, r0, #1
   2878a:	d111      	bne.n	287b0 <bt_gatt_change_aware+0x4a>
	if (!req) {
   2878c:	f1b8 0f00 	cmp.w	r8, #0
   28790:	d00f      	beq.n	287b2 <bt_gatt_change_aware+0x4c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28792:	f06f 0102 	mvn.w	r1, #2
   28796:	4638      	mov	r0, r7
   28798:	f7ff fd8a 	bl	282b0 <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2879c:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   287a0:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   287a2:	d009      	beq.n	287b8 <bt_gatt_change_aware+0x52>
		bt_att_clear_out_of_sync_sent(conn);
   287a4:	f7ff fc9f 	bl	280e6 <bt_att_clear_out_of_sync_sent>
		set_change_aware(cfg, true);
   287a8:	2101      	movs	r1, #1
   287aa:	4620      	mov	r0, r4
   287ac:	f7ff fe5f 	bl	2846e <set_change_aware>
		return true;
   287b0:	2601      	movs	r6, #1
}
   287b2:	4630      	mov	r0, r6
   287b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   287b8:	f7ff fc93 	bl	280e2 <bt_att_fixed_chan_only>
   287bc:	2800      	cmp	r0, #0
   287be:	d0f8      	beq.n	287b2 <bt_gatt_change_aware+0x4c>
   287c0:	4628      	mov	r0, r5
   287c2:	f7ff fca0 	bl	28106 <bt_att_out_of_sync_sent_on_fixed>
   287c6:	2800      	cmp	r0, #0
   287c8:	d0f3      	beq.n	287b2 <bt_gatt_change_aware+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   287ca:	f06f 0102 	mvn.w	r1, #2
   287ce:	4638      	mov	r0, r7
   287d0:	f7ff fd6e 	bl	282b0 <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   287d4:	4628      	mov	r0, r5
   287d6:	e7e5      	b.n	287a4 <bt_gatt_change_aware+0x3e>

000287d8 <delayed_store>:
{
   287d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   287da:	f1a0 0417 	sub.w	r4, r0, #23
   287de:	1c47      	adds	r7, r0, #1
		if (bt_addr_le_is_bonded(el->id, &el->peer)) {
   287e0:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   287e4:	4621      	mov	r1, r4
   287e6:	f7fe fc0b 	bl	27000 <bt_addr_le_is_bonded>
   287ea:	b380      	cbz	r0, 2884e <delayed_store+0x76>
			    atomic_test_and_clear_bit(el->flags, DELAYED_STORE_CCC)) {
   287ec:	1de6      	adds	r6, r4, #7
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   287ee:	f06f 0101 	mvn.w	r1, #1
   287f2:	4630      	mov	r0, r6
   287f4:	f7ff fd5c 	bl	282b0 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE) &&
   287f8:	07c2      	lsls	r2, r0, #31
   287fa:	d504      	bpl.n	28806 <delayed_store+0x2e>
				bt_gatt_store_ccc(el->id, &el->peer);
   287fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   28800:	4621      	mov	r1, r4
   28802:	f7f4 fc41 	bl	1d088 <bt_gatt_store_ccc>
   28806:	f06f 0102 	mvn.w	r1, #2
   2880a:	4630      	mov	r0, r6
   2880c:	f7ff fd50 	bl	282b0 <atomic_and>
			if (IS_ENABLED(CONFIG_BT_SETTINGS_CF_STORE_ON_WRITE) &&
   28810:	0783      	lsls	r3, r0, #30
   28812:	d504      	bpl.n	2881e <delayed_store+0x46>
				bt_gatt_store_cf(el->id, &el->peer);
   28814:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   28818:	4621      	mov	r1, r4
   2881a:	f7f3 fab5 	bl	1bd88 <bt_gatt_store_cf.isra.0>
			if (atomic_get(el->flags) == 0) {
   2881e:	4630      	mov	r0, r6
   28820:	f7ff fd55 	bl	282ce <atomic_get>
   28824:	4605      	mov	r5, r0
   28826:	b990      	cbnz	r0, 2884e <delayed_store+0x76>
	if (el) {
   28828:	2c01      	cmp	r4, #1
   2882a:	d010      	beq.n	2884e <delayed_store+0x76>
		el->id = 0;
   2882c:	f804 0c01 	strb.w	r0, [r4, #-1]
		memset(&el->peer, 0, sizeof(el->peer));
   28830:	4601      	mov	r1, r0
   28832:	2207      	movs	r2, #7
   28834:	4620      	mov	r0, r4
   28836:	f7fe f9e4 	bl	26c02 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2883a:	f3bf 8f5b 	dmb	ish
   2883e:	e856 3f00 	ldrex	r3, [r6]
   28842:	e846 5200 	strex	r2, r5, [r6]
   28846:	2a00      	cmp	r2, #0
   28848:	d1f9      	bne.n	2883e <delayed_store+0x66>
   2884a:	f3bf 8f5b 	dmb	ish
	for (size_t i = 0; i < ARRAY_SIZE(gatt_delayed_store.peer_list); i++) {
   2884e:	340c      	adds	r4, #12
   28850:	42bc      	cmp	r4, r7
   28852:	d1c5      	bne.n	287e0 <delayed_store+0x8>
}
   28854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028856 <bt_gatt_pairing_complete>:
{
   28856:	b538      	push	{r3, r4, r5, lr}
   28858:	4604      	mov	r4, r0
	if (bonded) {
   2885a:	b159      	cbz	r1, 28874 <bt_gatt_pairing_complete+0x1e>
		bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   2885c:	f100 0588 	add.w	r5, r0, #136	; 0x88
   28860:	4629      	mov	r1, r5
   28862:	7a00      	ldrb	r0, [r0, #8]
   28864:	f7f4 fc10 	bl	1d088 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   28868:	7a20      	ldrb	r0, [r4, #8]
   2886a:	4629      	mov	r1, r5
}
   2886c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_store_cf(conn->id, &conn->le.dst);
   28870:	f7f3 ba8a 	b.w	1bd88 <bt_gatt_store_cf.isra.0>
}
   28874:	bd38      	pop	{r3, r4, r5, pc}

00028876 <sys_mem_swap>:
{
   28876:	b510      	push	{r4, lr}
   28878:	1843      	adds	r3, r0, r1
   2887a:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2887e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   28882:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28884:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   28888:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2888a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2888c:	d1f7      	bne.n	2887e <sys_mem_swap+0x8>
	}
}
   2888e:	bd10      	pop	{r4, pc}

00028890 <smp_pairing_rsp>:
}
   28890:	2007      	movs	r0, #7
   28892:	4770      	bx	lr

00028894 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28894:	f3bf 8f5b 	dmb	ish
   28898:	6800      	ldr	r0, [r0, #0]
   2889a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2889e:	4108      	asrs	r0, r1
}
   288a0:	f000 0001 	and.w	r0, r0, #1
   288a4:	4770      	bx	lr

000288a6 <update_keys_check>:
{
   288a6:	b510      	push	{r4, lr}
   288a8:	4603      	mov	r3, r0
	if (!keys ||
   288aa:	b1d9      	cbz	r1, 288e4 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   288ac:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   288ae:	f010 0f24 	tst.w	r0, #36	; 0x24
   288b2:	d017      	beq.n	288e4 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   288b4:	7d1a      	ldrb	r2, [r3, #20]
   288b6:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   288b8:	7b09      	ldrb	r1, [r1, #12]
   288ba:	42a2      	cmp	r2, r4
   288bc:	bf28      	it	cs
   288be:	4622      	movcs	r2, r4
   288c0:	4291      	cmp	r1, r2
   288c2:	d901      	bls.n	288c8 <update_keys_check+0x22>
			return false;
   288c4:	2000      	movs	r0, #0
}
   288c6:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   288c8:	0682      	lsls	r2, r0, #26
   288ca:	d404      	bmi.n	288d6 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   288cc:	7a18      	ldrb	r0, [r3, #8]
   288ce:	3800      	subs	r0, #0
   288d0:	bf18      	it	ne
   288d2:	2001      	movne	r0, #1
   288d4:	e7f7      	b.n	288c6 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   288d6:	2105      	movs	r1, #5
   288d8:	1d18      	adds	r0, r3, #4
   288da:	f7ff ffdb 	bl	28894 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   288de:	2800      	cmp	r0, #0
   288e0:	d1f4      	bne.n	288cc <update_keys_check+0x26>
   288e2:	e7ef      	b.n	288c4 <update_keys_check+0x1e>
	return true;
   288e4:	2001      	movs	r0, #1
   288e6:	e7ee      	b.n	288c6 <update_keys_check+0x20>

000288e8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   288e8:	2301      	movs	r3, #1
   288ea:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   288ec:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   288ee:	f3bf 8f5b 	dmb	ish
   288f2:	e850 2f00 	ldrex	r2, [r0]
   288f6:	401a      	ands	r2, r3
   288f8:	e840 2100 	strex	r1, r2, [r0]
   288fc:	2900      	cmp	r1, #0
   288fe:	d1f8      	bne.n	288f2 <atomic_clear_bit+0xa>
   28900:	f3bf 8f5b 	dmb	ish
}
   28904:	4770      	bx	lr

00028906 <z_log_msg_static_create.constprop.0>:
   28906:	2300      	movs	r3, #0
   28908:	f7eb b80e 	b.w	13928 <z_impl_z_log_msg_static_create>

0002890c <smp_chan_get>:
{
   2890c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   2890e:	2106      	movs	r1, #6
   28910:	f7fe ff6a 	bl	277e8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   28914:	b918      	cbnz	r0, 2891e <smp_chan_get+0x12>
}
   28916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2891a:	f7f4 bdc7 	b.w	1d4ac <smp_chan_get.part.0>
   2891e:	38ec      	subs	r0, #236	; 0xec
   28920:	bd08      	pop	{r3, pc}

00028922 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28922:	2301      	movs	r3, #1
   28924:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28926:	f3bf 8f5b 	dmb	ish
   2892a:	e850 2f00 	ldrex	r2, [r0]
   2892e:	431a      	orrs	r2, r3
   28930:	e840 2100 	strex	r1, r2, [r0]
   28934:	2900      	cmp	r1, #0
   28936:	d1f8      	bne.n	2892a <atomic_set_bit+0x8>
   28938:	f3bf 8f5b 	dmb	ish
}
   2893c:	4770      	bx	lr

0002893e <smp_keypress_notif>:
{
   2893e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   28940:	210e      	movs	r1, #14
   28942:	f7ff ffee 	bl	28922 <atomic_set_bit>
}
   28946:	2000      	movs	r0, #0
   28948:	bd08      	pop	{r3, pc}

0002894a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2894a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2894c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2894e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28950:	4628      	mov	r0, r5
   28952:	2104      	movs	r1, #4
   28954:	f7ff ff9e 	bl	28894 <atomic_test_bit>
   28958:	b168      	cbz	r0, 28976 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2895a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2895c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2895e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28960:	4608      	mov	r0, r1
   28962:	f7fe ff1b 	bl	2779c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   28966:	4604      	mov	r4, r0
   28968:	b940      	cbnz	r0, 2897c <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2896a:	2104      	movs	r1, #4
   2896c:	4628      	mov	r0, r5
   2896e:	f7ff ffd8 	bl	28922 <atomic_set_bit>
}
   28972:	4620      	mov	r0, r4
   28974:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   28976:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2897a:	e7ef      	b.n	2895c <smp_create_pdu.constprop.0+0x12>
   2897c:	2101      	movs	r1, #1
   2897e:	300c      	adds	r0, #12
   28980:	f000 fba2 	bl	290c8 <net_buf_simple_add>
	hdr->code = op;
   28984:	7006      	strb	r6, [r0, #0]
	return buf;
   28986:	e7f4      	b.n	28972 <smp_create_pdu.constprop.0+0x28>

00028988 <send_pairing_rsp>:
{
   28988:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2898a:	2102      	movs	r1, #2
{
   2898c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2898e:	f7ff ffdc 	bl	2894a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   28992:	4604      	mov	r4, r0
   28994:	b178      	cbz	r0, 289b6 <send_pairing_rsp+0x2e>
   28996:	2106      	movs	r1, #6
   28998:	300c      	adds	r0, #12
   2899a:	f000 fb95 	bl	290c8 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2899e:	2206      	movs	r2, #6
   289a0:	f105 0111 	add.w	r1, r5, #17
   289a4:	f7fe f922 	bl	26bec <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   289a8:	4628      	mov	r0, r5
   289aa:	2200      	movs	r2, #0
   289ac:	4621      	mov	r1, r4
   289ae:	f7f4 fd03 	bl	1d3b8 <smp_send.constprop.0>
	return 0;
   289b2:	2000      	movs	r0, #0
}
   289b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   289b6:	2008      	movs	r0, #8
   289b8:	e7fc      	b.n	289b4 <send_pairing_rsp+0x2c>

000289ba <smp_send_pairing_random>:
{
   289ba:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   289bc:	2104      	movs	r1, #4
{
   289be:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   289c0:	f7ff ffc3 	bl	2894a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   289c4:	4604      	mov	r4, r0
   289c6:	b178      	cbz	r0, 289e8 <smp_send_pairing_random+0x2e>
   289c8:	2110      	movs	r1, #16
   289ca:	300c      	adds	r0, #12
   289cc:	f000 fb7c 	bl	290c8 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   289d0:	2210      	movs	r2, #16
   289d2:	f105 0127 	add.w	r1, r5, #39	; 0x27
   289d6:	f7fe f909 	bl	26bec <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   289da:	4628      	mov	r0, r5
   289dc:	2200      	movs	r2, #0
   289de:	4621      	mov	r1, r4
   289e0:	f7f4 fcea 	bl	1d3b8 <smp_send.constprop.0>
	return 0;
   289e4:	2000      	movs	r0, #0
}
   289e6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   289e8:	2008      	movs	r0, #8
   289ea:	e7fc      	b.n	289e6 <smp_send_pairing_random+0x2c>

000289ec <smp_dhkey_check>:
{
   289ec:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   289ee:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   289f2:	78db      	ldrb	r3, [r3, #3]
   289f4:	2b01      	cmp	r3, #1
{
   289f6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   289f8:	d114      	bne.n	28a24 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   289fa:	68ce      	ldr	r6, [r1, #12]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   289fc:	1d05      	adds	r5, r0, #4
   289fe:	2110      	movs	r1, #16
   28a00:	4628      	mov	r0, r5
   28a02:	f7ff ff71 	bl	288e8 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   28a06:	4631      	mov	r1, r6
   28a08:	2210      	movs	r2, #16
   28a0a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   28a0e:	f7fe f8ed 	bl	26bec <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   28a12:	2107      	movs	r1, #7
   28a14:	4628      	mov	r0, r5
   28a16:	f7ff ff3d 	bl	28894 <atomic_test_bit>
   28a1a:	b128      	cbz	r0, 28a28 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28a1c:	2109      	movs	r1, #9
   28a1e:	4628      	mov	r0, r5
   28a20:	f7ff ff7f 	bl	28922 <atomic_set_bit>
}
   28a24:	2000      	movs	r0, #0
   28a26:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28a28:	210a      	movs	r1, #10
   28a2a:	4628      	mov	r0, r5
   28a2c:	f7ff ff32 	bl	28894 <atomic_test_bit>
   28a30:	2800      	cmp	r0, #0
   28a32:	d1f3      	bne.n	28a1c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   28a34:	4620      	mov	r0, r4
}
   28a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   28a3a:	f7f5 b9c3 	b.w	1ddc4 <compute_and_check_and_send_periph_dhcheck>

00028a3e <smp_security_request>:
static uint8_t smp_security_request(struct bt_smp *smp, struct net_buf *buf)
   28a3e:	2007      	movs	r0, #7
   28a40:	4770      	bx	lr

00028a42 <atomic_test_and_clear_bit>:
{
   28a42:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   28a44:	2301      	movs	r3, #1
   28a46:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28a4a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28a4c:	f3bf 8f5b 	dmb	ish
   28a50:	e850 3f00 	ldrex	r3, [r0]
   28a54:	ea03 0402 	and.w	r4, r3, r2
   28a58:	e840 4500 	strex	r5, r4, [r0]
   28a5c:	2d00      	cmp	r5, #0
   28a5e:	d1f7      	bne.n	28a50 <atomic_test_and_clear_bit+0xe>
   28a60:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   28a64:	4219      	tst	r1, r3
}
   28a66:	bf14      	ite	ne
   28a68:	2001      	movne	r0, #1
   28a6a:	2000      	moveq	r0, #0
   28a6c:	bd30      	pop	{r4, r5, pc}

00028a6e <smp_reset>:
{
   28a6e:	b538      	push	{r3, r4, r5, lr}
   28a70:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28a72:	1d03      	adds	r3, r0, #4
   28a74:	2500      	movs	r5, #0
   28a76:	f3bf 8f5b 	dmb	ish
   28a7a:	e853 2f00 	ldrex	r2, [r3]
   28a7e:	e843 5100 	strex	r1, r5, [r3]
   28a82:	2900      	cmp	r1, #0
   28a84:	d1f9      	bne.n	28a7a <smp_reset+0xc>
   28a86:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   28a8a:	f504 7090 	add.w	r0, r4, #288	; 0x120
   28a8e:	f001 f9a5 	bl	29ddc <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   28a92:	7225      	strb	r5, [r4, #8]
   28a94:	f3bf 8f5b 	dmb	ish
   28a98:	e854 3f00 	ldrex	r3, [r4]
   28a9c:	e844 5200 	strex	r2, r5, [r4]
   28aa0:	2a00      	cmp	r2, #0
   28aa2:	d1f9      	bne.n	28a98 <smp_reset+0x2a>
   28aa4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28aa8:	4620      	mov	r0, r4
   28aaa:	2101      	movs	r1, #1
}
   28aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   28ab0:	f7ff bf37 	b.w	28922 <atomic_set_bit>

00028ab4 <smp_c1>:
{
   28ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28ab8:	b089      	sub	sp, #36	; 0x24
   28aba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   28abe:	4699      	mov	r9, r3
	p1[0] = ia->type;
   28ac0:	783b      	ldrb	r3, [r7, #0]
{
   28ac2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   28ac4:	f88d 3000 	strb.w	r3, [sp]
{
   28ac8:	460c      	mov	r4, r1
	p1[1] = ra->type;
   28aca:	f898 3000 	ldrb.w	r3, [r8]
   28ace:	f88d 3001 	strb.w	r3, [sp, #1]
{
   28ad2:	4611      	mov	r1, r2
   28ad4:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   28ad6:	2207      	movs	r2, #7
   28ad8:	f10d 0002 	add.w	r0, sp, #2
   28adc:	f7fe f886 	bl	26bec <memcpy>
	memcpy(p1 + 9, pres, 7);
   28ae0:	2207      	movs	r2, #7
   28ae2:	4649      	mov	r1, r9
   28ae4:	f10d 0009 	add.w	r0, sp, #9
   28ae8:	f7fe f880 	bl	26bec <memcpy>
	while (len--) {
   28aec:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   28af0:	462a      	mov	r2, r5
   28af2:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   28af4:	f814 3b01 	ldrb.w	r3, [r4], #1
   28af8:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   28afc:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   28afe:	ea83 030c 	eor.w	r3, r3, ip
   28b02:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   28b06:	d1f5      	bne.n	28af4 <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   28b08:	462a      	mov	r2, r5
   28b0a:	4629      	mov	r1, r5
   28b0c:	4630      	mov	r0, r6
   28b0e:	f000 fe3f 	bl	29790 <bt_encrypt_le>
	if (err) {
   28b12:	4604      	mov	r4, r0
   28b14:	bb20      	cbnz	r0, 28b60 <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   28b16:	2206      	movs	r2, #6
   28b18:	f108 0101 	add.w	r1, r8, #1
   28b1c:	a804      	add	r0, sp, #16
   28b1e:	f7fe f865 	bl	26bec <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   28b22:	2206      	movs	r2, #6
   28b24:	1c79      	adds	r1, r7, #1
   28b26:	f10d 0016 	add.w	r0, sp, #22
   28b2a:	f7fe f85f 	bl	26bec <memcpy>
	(void)memset(p2 + 12, 0, 4);
   28b2e:	2204      	movs	r2, #4
   28b30:	4621      	mov	r1, r4
   28b32:	a807      	add	r0, sp, #28
   28b34:	f7fe f865 	bl	26c02 <memset>
	while (len--) {
   28b38:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   28b3c:	462a      	mov	r2, r5
   28b3e:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   28b40:	f812 1b01 	ldrb.w	r1, [r2], #1
   28b44:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   28b48:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   28b4a:	ea81 0104 	eor.w	r1, r1, r4
   28b4e:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   28b52:	d1f5      	bne.n	28b40 <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   28b54:	462a      	mov	r2, r5
   28b56:	4629      	mov	r1, r5
   28b58:	4630      	mov	r0, r6
   28b5a:	f000 fe19 	bl	29790 <bt_encrypt_le>
   28b5e:	4604      	mov	r4, r0
}
   28b60:	4620      	mov	r0, r4
   28b62:	b009      	add	sp, #36	; 0x24
   28b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028b68 <legacy_pairing_confirm>:
{
   28b68:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28b6a:	1d07      	adds	r7, r0, #4
{
   28b6c:	b085      	sub	sp, #20
   28b6e:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28b70:	210a      	movs	r1, #10
   28b72:	4638      	mov	r0, r7
   28b74:	f7ff fe8e 	bl	28894 <atomic_test_bit>
   28b78:	bb88      	cbnz	r0, 28bde <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   28b7a:	2104      	movs	r1, #4
   28b7c:	4620      	mov	r0, r4
   28b7e:	f7ff fed0 	bl	28922 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28b82:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   28b84:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   28b88:	f7ff fedf 	bl	2894a <smp_create_pdu.constprop.0>
	if (!buf) {
   28b8c:	4605      	mov	r5, r0
   28b8e:	b1c0      	cbz	r0, 28bc2 <legacy_pairing_confirm+0x5a>
   28b90:	2110      	movs	r1, #16
   28b92:	300c      	adds	r0, #12
   28b94:	f000 fa98 	bl	290c8 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   28b98:	f106 0396 	add.w	r3, r6, #150	; 0x96
   28b9c:	368f      	adds	r6, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   28b9e:	9002      	str	r0, [sp, #8]
   28ba0:	9301      	str	r3, [sp, #4]
   28ba2:	9600      	str	r6, [sp, #0]
   28ba4:	f104 0310 	add.w	r3, r4, #16
   28ba8:	f104 0209 	add.w	r2, r4, #9
   28bac:	f104 0127 	add.w	r1, r4, #39	; 0x27
   28bb0:	f104 0047 	add.w	r0, r4, #71	; 0x47
   28bb4:	f7ff ff7e 	bl	28ab4 <smp_c1>
   28bb8:	4606      	mov	r6, r0
   28bba:	b128      	cbz	r0, 28bc8 <legacy_pairing_confirm+0x60>
		net_buf_unref(buf);
   28bbc:	4628      	mov	r0, r5
   28bbe:	f7f6 ff31 	bl	1fa24 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   28bc2:	2008      	movs	r0, #8
}
   28bc4:	b005      	add	sp, #20
   28bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	smp_send(smp, buf, NULL, NULL);
   28bc8:	4602      	mov	r2, r0
   28bca:	4629      	mov	r1, r5
   28bcc:	4620      	mov	r0, r4
   28bce:	f7f4 fbf3 	bl	1d3b8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28bd2:	4631      	mov	r1, r6
   28bd4:	4638      	mov	r0, r7
   28bd6:	f7ff fe87 	bl	288e8 <atomic_clear_bit>
	return 0;
   28bda:	2000      	movs	r0, #0
   28bdc:	e7f2      	b.n	28bc4 <legacy_pairing_confirm+0x5c>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   28bde:	2100      	movs	r1, #0
   28be0:	4638      	mov	r0, r7
   28be2:	f7ff fe9e 	bl	28922 <atomic_set_bit>
	return 0;
   28be6:	e7f8      	b.n	28bda <legacy_pairing_confirm+0x72>

00028be8 <bt_smp_request_ltk>:
{
   28be8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   28bec:	9f09      	ldr	r7, [sp, #36]	; 0x24
   28bee:	e9cd 2300 	strd	r2, r3, [sp]
   28bf2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   28bf4:	f7ff fe8a 	bl	2890c <smp_chan_get>
	if (!smp) {
   28bf8:	4605      	mov	r5, r0
   28bfa:	2800      	cmp	r0, #0
   28bfc:	d07c      	beq.n	28cf8 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   28bfe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c02:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   28c04:	f1b8 0f00 	cmp.w	r8, #0
   28c08:	d128      	bne.n	28c5c <bt_smp_request_ltk+0x74>
   28c0a:	e9dd 3200 	ldrd	r3, r2, [sp]
   28c0e:	4313      	orrs	r3, r2
   28c10:	d124      	bne.n	28c5c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c12:	2103      	movs	r1, #3
   28c14:	4630      	mov	r0, r6
   28c16:	f7ff fe3d 	bl	28894 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   28c1a:	b1f8      	cbz	r0, 28c5c <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   28c1c:	2101      	movs	r1, #1
   28c1e:	4630      	mov	r0, r6
   28c20:	f7ff fe38 	bl	28894 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   28c24:	b1d0      	cbz	r0, 28c5c <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   28c26:	7d2c      	ldrb	r4, [r5, #20]
   28c28:	7b6b      	ldrb	r3, [r5, #13]
   28c2a:	429c      	cmp	r4, r3
   28c2c:	bf28      	it	cs
   28c2e:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   28c30:	4622      	mov	r2, r4
   28c32:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28c36:	4638      	mov	r0, r7
   28c38:	f7fd ffd8 	bl	26bec <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   28c3c:	2c0f      	cmp	r4, #15
   28c3e:	d805      	bhi.n	28c4c <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   28c40:	f1c4 0210 	rsb	r2, r4, #16
   28c44:	4641      	mov	r1, r8
   28c46:	1938      	adds	r0, r7, r4
   28c48:	f7fd ffdb 	bl	26c02 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   28c4c:	4630      	mov	r0, r6
   28c4e:	2101      	movs	r1, #1
   28c50:	f7ff fe67 	bl	28922 <atomic_set_bit>
		return true;
   28c54:	2001      	movs	r0, #1
}
   28c56:	b002      	add	sp, #8
   28c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   28c5c:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   28c60:	b983      	cbnz	r3, 28c84 <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   28c62:	f104 0888 	add.w	r8, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   28c66:	7a21      	ldrb	r1, [r4, #8]
   28c68:	4642      	mov	r2, r8
   28c6a:	2020      	movs	r0, #32
   28c6c:	f7f6 fb68 	bl	1f340 <bt_keys_find>
   28c70:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
		if (!conn->le.keys) {
   28c74:	b930      	cbnz	r0, 28c84 <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   28c76:	7a21      	ldrb	r1, [r4, #8]
   28c78:	4642      	mov	r2, r8
   28c7a:	2001      	movs	r0, #1
   28c7c:	f7f6 fb60 	bl	1f340 <bt_keys_find>
   28c80:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   28c84:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28c88:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
	if (ediv == 0U && rand == 0U &&
   28c8c:	f1b8 0f00 	cmp.w	r8, #0
   28c90:	d10c      	bne.n	28cac <bt_smp_request_ltk+0xc4>
   28c92:	e9dd 3200 	ldrd	r3, r2, [sp]
   28c96:	4313      	orrs	r3, r2
   28c98:	d108      	bne.n	28cac <bt_smp_request_ltk+0xc4>
   28c9a:	b300      	cbz	r0, 28cde <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   28c9c:	89c3      	ldrh	r3, [r0, #14]
   28c9e:	069a      	lsls	r2, r3, #26
   28ca0:	d505      	bpl.n	28cae <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   28ca2:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   28ca4:	f100 011a 	add.w	r1, r0, #26
   28ca8:	4622      	mov	r2, r4
   28caa:	e7c4      	b.n	28c36 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28cac:	b1b8      	cbz	r0, 28cde <bt_smp_request_ltk+0xf6>
   28cae:	89c3      	ldrh	r3, [r0, #14]
   28cb0:	07db      	lsls	r3, r3, #31
   28cb2:	d514      	bpl.n	28cde <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28cb4:	2208      	movs	r2, #8
   28cb6:	4669      	mov	r1, sp
   28cb8:	3068      	adds	r0, #104	; 0x68
   28cba:	f7fd ff87 	bl	26bcc <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   28cbe:	b970      	cbnz	r0, 28cde <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   28cc0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
   28cc4:	2202      	movs	r2, #2
   28cc6:	a908      	add	r1, sp, #32
   28cc8:	3070      	adds	r0, #112	; 0x70
   28cca:	f7fd ff7f 	bl	26bcc <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   28cce:	4680      	mov	r8, r0
   28cd0:	b928      	cbnz	r0, 28cde <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   28cd2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
   28cd6:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   28cd8:	3172      	adds	r1, #114	; 0x72
   28cda:	4622      	mov	r2, r4
   28cdc:	e7ab      	b.n	28c36 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28cde:	210f      	movs	r1, #15
   28ce0:	4630      	mov	r0, r6
   28ce2:	f7ff fdd7 	bl	28894 <atomic_test_bit>
   28ce6:	b120      	cbz	r0, 28cf2 <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   28ce8:	2202      	movs	r2, #2
   28cea:	2106      	movs	r1, #6
   28cec:	4620      	mov	r0, r4
   28cee:	f7f0 fe1b 	bl	19928 <bt_conn_security_changed>
	smp_reset(smp);
   28cf2:	4628      	mov	r0, r5
   28cf4:	f7ff febb 	bl	28a6e <smp_reset>
		return false;
   28cf8:	2000      	movs	r0, #0
   28cfa:	e7ac      	b.n	28c56 <bt_smp_request_ltk+0x6e>

00028cfc <bt_smp_irk_get>:
{
   28cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   28cfe:	2500      	movs	r5, #0
{
   28d00:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   28d02:	2210      	movs	r2, #16
   28d04:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   28d06:	e9cd 5500 	strd	r5, r5, [sp]
   28d0a:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   28d0e:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   28d10:	f7fd ff5c 	bl	26bcc <memcmp>
   28d14:	b180      	cbz	r0, 28d38 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   28d16:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   28d18:	220c      	movs	r2, #12
   28d1a:	4629      	mov	r1, r5
   28d1c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   28d1e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   28d20:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   28d22:	70e5      	strb	r5, [r4, #3]
   28d24:	1d20      	adds	r0, r4, #4
   28d26:	f7fd ff6c 	bl	26c02 <memset>
	err = bt_encrypt_le(key, res, res);
   28d2a:	4622      	mov	r2, r4
   28d2c:	4621      	mov	r1, r4
   28d2e:	4630      	mov	r0, r6
   28d30:	f000 fd2e 	bl	29790 <bt_encrypt_le>
}
   28d34:	b004      	add	sp, #16
   28d36:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28d38:	f06f 0015 	mvn.w	r0, #21
   28d3c:	e7fa      	b.n	28d34 <bt_smp_irk_get+0x38>

00028d3e <bt_smp_dhkey_ready>:
{
   28d3e:	b570      	push	{r4, r5, r6, lr}
   28d40:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   28d42:	2008      	movs	r0, #8
   28d44:	f7f4 fac8 	bl	1d2d8 <smp_find>
	if (smp) {
   28d48:	4604      	mov	r4, r0
   28d4a:	b1b8      	cbz	r0, 28d7c <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   28d4c:	1d05      	adds	r5, r0, #4
   28d4e:	2108      	movs	r1, #8
   28d50:	4628      	mov	r0, r5
   28d52:	f7ff fdc9 	bl	288e8 <atomic_clear_bit>
	if (!dhkey) {
   28d56:	b38e      	cbz	r6, 28dbc <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   28d58:	2107      	movs	r1, #7
   28d5a:	f7ff fdc5 	bl	288e8 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   28d5e:	4631      	mov	r1, r6
   28d60:	2220      	movs	r2, #32
   28d62:	f104 0097 	add.w	r0, r4, #151	; 0x97
   28d66:	f7fd ff41 	bl	26bec <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   28d6a:	210a      	movs	r1, #10
   28d6c:	4628      	mov	r0, r5
   28d6e:	f7ff fd91 	bl	28894 <atomic_test_bit>
   28d72:	b168      	cbz	r0, 28d90 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28d74:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28d76:	4628      	mov	r0, r5
   28d78:	f7ff fdd3 	bl	28922 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   28d7c:	2007      	movs	r0, #7
   28d7e:	f7f4 faab 	bl	1d2d8 <smp_find>
		if (smp) {
   28d82:	4604      	mov	r4, r0
   28d84:	b118      	cbz	r0, 28d8e <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   28d86:	f7f4 fc1b 	bl	1d5c0 <smp_dhkey_generate>
			if (err) {
   28d8a:	4601      	mov	r1, r0
   28d8c:	b990      	cbnz	r0, 28db4 <bt_smp_dhkey_ready+0x76>
}
   28d8e:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28d90:	2110      	movs	r1, #16
   28d92:	4628      	mov	r0, r5
   28d94:	f7ff fd7e 	bl	28894 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   28d98:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   28d9a:	2800      	cmp	r0, #0
   28d9c:	d1eb      	bne.n	28d76 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   28d9e:	4628      	mov	r0, r5
   28da0:	f7ff fd78 	bl	28894 <atomic_test_bit>
   28da4:	2800      	cmp	r0, #0
   28da6:	d0e9      	beq.n	28d7c <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   28da8:	4620      	mov	r0, r4
   28daa:	f7f5 f80b 	bl	1ddc4 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   28dae:	4601      	mov	r1, r0
   28db0:	2800      	cmp	r0, #0
   28db2:	d0e3      	beq.n	28d7c <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   28db4:	4620      	mov	r0, r4
   28db6:	f7f5 fc95 	bl	1e6e4 <smp_error>
   28dba:	e7df      	b.n	28d7c <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   28dbc:	210b      	movs	r1, #11
   28dbe:	e7f9      	b.n	28db4 <bt_smp_dhkey_ready+0x76>

00028dc0 <smp_check_complete>:
{
   28dc0:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   28dc2:	7883      	ldrb	r3, [r0, #2]
   28dc4:	2b01      	cmp	r3, #1
{
   28dc6:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   28dc8:	d110      	bne.n	28dec <smp_check_complete+0x2c>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   28dca:	2106      	movs	r1, #6
   28dcc:	f7fe fd02 	bl	277d4 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   28dd0:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   28dd4:	ea23 0104 	bic.w	r1, r3, r4
   28dd8:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   28ddc:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   28de0:	b921      	cbnz	r1, 28dec <smp_check_complete+0x2c>
}
   28de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   28de6:	38ec      	subs	r0, #236	; 0xec
   28de8:	f7f5 bbf8 	b.w	1e5dc <smp_pairing_complete>
}
   28dec:	bd10      	pop	{r4, pc}

00028dee <smp_sign_info_sent>:
	if (!err) {
   28dee:	b912      	cbnz	r2, 28df6 <smp_sign_info_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_SIGN);
   28df0:	2104      	movs	r1, #4
   28df2:	f7ff bfe5 	b.w	28dc0 <smp_check_complete>
}
   28df6:	4770      	bx	lr

00028df8 <smp_id_sent>:
	if (!err) {
   28df8:	b912      	cbnz	r2, 28e00 <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   28dfa:	2102      	movs	r1, #2
   28dfc:	f7ff bfe0 	b.w	28dc0 <smp_check_complete>
}
   28e00:	4770      	bx	lr

00028e02 <smp_ident_sent>:
	if (!err) {
   28e02:	b912      	cbnz	r2, 28e0a <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   28e04:	2101      	movs	r1, #1
   28e06:	f7ff bfdb 	b.w	28dc0 <smp_check_complete>
}
   28e0a:	4770      	bx	lr

00028e0c <bt_smp_disconnected>:
{
   28e0c:	b570      	push	{r4, r5, r6, lr}
   28e0e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   28e10:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   28e14:	f850 3b34 	ldr.w	r3, [r0], #52
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28e18:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   28e1a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
	(void)k_work_cancel_delayable(&smp->work);
   28e1e:	f000 ffdd 	bl	29ddc <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28e22:	2103      	movs	r1, #3
   28e24:	4620      	mov	r0, r4
   28e26:	f7ff fd35 	bl	28894 <atomic_test_bit>
   28e2a:	b1a0      	cbz	r0, 28e56 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28e2c:	2108      	movs	r1, #8
   28e2e:	4630      	mov	r0, r6
   28e30:	f7f5 fbd4 	bl	1e5dc <smp_pairing_complete>
	if (keys) {
   28e34:	b13d      	cbz	r5, 28e46 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28e36:	89eb      	ldrh	r3, [r5, #14]
   28e38:	b113      	cbz	r3, 28e40 <bt_smp_disconnected+0x34>
   28e3a:	7b6b      	ldrb	r3, [r5, #13]
   28e3c:	079b      	lsls	r3, r3, #30
   28e3e:	d502      	bpl.n	28e46 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   28e40:	4628      	mov	r0, r5
   28e42:	f7f6 fb0d 	bl	1f460 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   28e46:	4630      	mov	r0, r6
   28e48:	f44f 72ac 	mov.w	r2, #344	; 0x158
}
   28e4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   28e50:	2100      	movs	r1, #0
   28e52:	f7fd bed6 	b.w	26c02 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28e56:	2101      	movs	r1, #1
   28e58:	4620      	mov	r0, r4
   28e5a:	f7ff fd1b 	bl	28894 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   28e5e:	2800      	cmp	r0, #0
   28e60:	d1e4      	bne.n	28e2c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   28e62:	210f      	movs	r1, #15
   28e64:	4620      	mov	r0, r4
   28e66:	f7ff fd15 	bl	28894 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   28e6a:	2800      	cmp	r0, #0
   28e6c:	d1de      	bne.n	28e2c <bt_smp_disconnected+0x20>
   28e6e:	e7e1      	b.n	28e34 <bt_smp_disconnected+0x28>

00028e70 <bt_addr_le_eq>:
{
   28e70:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   28e72:	2207      	movs	r2, #7
   28e74:	f7fd feaa 	bl	26bcc <memcmp>
}
   28e78:	fab0 f080 	clz	r0, r0
   28e7c:	0940      	lsrs	r0, r0, #5
   28e7e:	bd08      	pop	{r3, pc}

00028e80 <id_add>:
	bt_id_add(keys);
   28e80:	f7ef b8f8 	b.w	18074 <bt_id_add>

00028e84 <bt_keys_get_type>:
{
   28e84:	b570      	push	{r4, r5, r6, lr}
   28e86:	4604      	mov	r4, r0
   28e88:	460d      	mov	r5, r1
   28e8a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   28e8c:	f7f6 fa58 	bl	1f340 <bt_keys_find>
	if (keys) {
   28e90:	b938      	cbnz	r0, 28ea2 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   28e92:	4631      	mov	r1, r6
   28e94:	4628      	mov	r0, r5
   28e96:	f7f6 f9cf 	bl	1f238 <bt_keys_get_addr>
	if (!keys) {
   28e9a:	b110      	cbz	r0, 28ea2 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   28e9c:	89c3      	ldrh	r3, [r0, #14]
   28e9e:	431c      	orrs	r4, r3
   28ea0:	81c4      	strh	r4, [r0, #14]
}
   28ea2:	bd70      	pop	{r4, r5, r6, pc}

00028ea4 <bt_keys_add_type>:
	keys->keys |= type;
   28ea4:	89c3      	ldrh	r3, [r0, #14]
   28ea6:	4319      	orrs	r1, r3
   28ea8:	81c1      	strh	r1, [r0, #14]
}
   28eaa:	4770      	bx	lr

00028eac <sys_memcpy_swap>:
	psrc += length - 1;
   28eac:	1e53      	subs	r3, r2, #1
   28eae:	4419      	add	r1, r3
	for (; length > 0; length--) {
   28eb0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   28eb2:	f811 3901 	ldrb.w	r3, [r1], #-1
   28eb6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   28eba:	4290      	cmp	r0, r2
   28ebc:	d1f9      	bne.n	28eb2 <sys_memcpy_swap+0x6>
}
   28ebe:	4770      	bx	lr

00028ec0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   28ec0:	b510      	push	{r4, lr}
   28ec2:	1e43      	subs	r3, r0, #1
   28ec4:	f100 0210 	add.w	r2, r0, #16
   28ec8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28eca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28ece:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28ed2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28ed4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28ed6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28ed8:	d1f7      	bne.n	28eca <sys_mem_swap.constprop.0+0xa>
}
   28eda:	bd10      	pop	{r4, pc}

00028edc <bt_crypto_aes_cmac>:
{
   28edc:	b570      	push	{r4, r5, r6, lr}
   28ede:	b0c2      	sub	sp, #264	; 0x108
   28ee0:	460d      	mov	r5, r1
   28ee2:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28ee4:	4601      	mov	r1, r0
   28ee6:	aa16      	add	r2, sp, #88	; 0x58
   28ee8:	4668      	mov	r0, sp
{
   28eea:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28eec:	f7fd fccd 	bl	2688a <tc_cmac_setup>
   28ef0:	b918      	cbnz	r0, 28efa <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   28ef2:	f06f 0004 	mvn.w	r0, #4
}
   28ef6:	b042      	add	sp, #264	; 0x108
   28ef8:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28efa:	4632      	mov	r2, r6
   28efc:	4629      	mov	r1, r5
   28efe:	4668      	mov	r0, sp
   28f00:	f7fd fcee 	bl	268e0 <tc_cmac_update>
   28f04:	2800      	cmp	r0, #0
   28f06:	d0f4      	beq.n	28ef2 <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28f08:	4669      	mov	r1, sp
   28f0a:	4620      	mov	r0, r4
   28f0c:	f7fd fd52 	bl	269b4 <tc_cmac_final>
   28f10:	2800      	cmp	r0, #0
   28f12:	d0ee      	beq.n	28ef2 <bt_crypto_aes_cmac+0x16>
	return 0;
   28f14:	2000      	movs	r0, #0
   28f16:	e7ee      	b.n	28ef6 <bt_crypto_aes_cmac+0x1a>

00028f18 <bt_crypto_f4>:
{
   28f18:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f1a:	b097      	sub	sp, #92	; 0x5c
   28f1c:	4614      	mov	r4, r2
   28f1e:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   28f20:	2220      	movs	r2, #32
   28f22:	4601      	mov	r1, r0
   28f24:	a805      	add	r0, sp, #20
{
   28f26:	461d      	mov	r5, r3
   28f28:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   28f2a:	f7ff ffbf 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   28f2e:	2220      	movs	r2, #32
   28f30:	4631      	mov	r1, r6
   28f32:	a80d      	add	r0, sp, #52	; 0x34
   28f34:	f7ff ffba 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28f38:	4621      	mov	r1, r4
   28f3a:	2210      	movs	r2, #16
   28f3c:	a801      	add	r0, sp, #4
	m[64] = z;
   28f3e:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28f42:	f7ff ffb3 	bl	28eac <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   28f46:	463b      	mov	r3, r7
   28f48:	2241      	movs	r2, #65	; 0x41
   28f4a:	a905      	add	r1, sp, #20
   28f4c:	a801      	add	r0, sp, #4
   28f4e:	f7ff ffc5 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   28f52:	4604      	mov	r4, r0
   28f54:	b910      	cbnz	r0, 28f5c <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   28f56:	4638      	mov	r0, r7
   28f58:	f7ff ffb2 	bl	28ec0 <sys_mem_swap.constprop.0>
}
   28f5c:	4620      	mov	r0, r4
   28f5e:	b017      	add	sp, #92	; 0x5c
   28f60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028f62 <bt_crypto_f6>:
{
   28f62:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f64:	b097      	sub	sp, #92	; 0x5c
   28f66:	4605      	mov	r5, r0
   28f68:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28f6a:	a805      	add	r0, sp, #20
   28f6c:	2210      	movs	r2, #16
{
   28f6e:	461c      	mov	r4, r3
   28f70:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   28f72:	f7ff ff9b 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28f76:	2210      	movs	r2, #16
   28f78:	4631      	mov	r1, r6
   28f7a:	a809      	add	r0, sp, #36	; 0x24
   28f7c:	f7ff ff96 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   28f80:	4621      	mov	r1, r4
   28f82:	2210      	movs	r2, #16
   28f84:	a80d      	add	r0, sp, #52	; 0x34
   28f86:	f7ff ff91 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28f8a:	991c      	ldr	r1, [sp, #112]	; 0x70
   28f8c:	2203      	movs	r2, #3
   28f8e:	a811      	add	r0, sp, #68	; 0x44
   28f90:	f7ff ff8c 	bl	28eac <sys_memcpy_swap>
	m[51] = a1->type;
   28f94:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   28f96:	f814 3b01 	ldrb.w	r3, [r4], #1
   28f9a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   28f9e:	4621      	mov	r1, r4
   28fa0:	2206      	movs	r2, #6
   28fa2:	a812      	add	r0, sp, #72	; 0x48
   28fa4:	f7fd fe22 	bl	26bec <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   28fa8:	4621      	mov	r1, r4
   28faa:	2206      	movs	r2, #6
   28fac:	a812      	add	r0, sp, #72	; 0x48
   28fae:	f7ff ff7d 	bl	28eac <sys_memcpy_swap>
	m[58] = a2->type;
   28fb2:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   28fb4:	f814 3b01 	ldrb.w	r3, [r4], #1
   28fb8:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   28fbc:	4621      	mov	r1, r4
   28fbe:	2206      	movs	r2, #6
   28fc0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28fc4:	f7fd fe12 	bl	26bec <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28fc8:	4621      	mov	r1, r4
   28fca:	2206      	movs	r2, #6
   28fcc:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28fd0:	f7ff ff6c 	bl	28eac <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28fd4:	2210      	movs	r2, #16
   28fd6:	4629      	mov	r1, r5
   28fd8:	a801      	add	r0, sp, #4
   28fda:	f7ff ff67 	bl	28eac <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   28fde:	463b      	mov	r3, r7
   28fe0:	2241      	movs	r2, #65	; 0x41
   28fe2:	a905      	add	r1, sp, #20
   28fe4:	a801      	add	r0, sp, #4
   28fe6:	f7ff ff79 	bl	28edc <bt_crypto_aes_cmac>
	if (err) {
   28fea:	4604      	mov	r4, r0
   28fec:	b910      	cbnz	r0, 28ff4 <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   28fee:	4638      	mov	r0, r7
   28ff0:	f7ff ff66 	bl	28ec0 <sys_mem_swap.constprop.0>
}
   28ff4:	4620      	mov	r0, r4
   28ff6:	b017      	add	sp, #92	; 0x5c
   28ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028ffa <fixed_data_unref>:
}
   28ffa:	4770      	bx	lr

00028ffc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28ffc:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28ffe:	6849      	ldr	r1, [r1, #4]
   29000:	6809      	ldr	r1, [r1, #0]
   29002:	f7f6 bc7d 	b.w	1f900 <net_buf_alloc_len>

00029006 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   29006:	f7fa bbc9 	b.w	2379c <z_impl_k_queue_get>

0002900a <net_buf_slist_put>:
	__asm__ volatile(
   2900a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2900e:	f3ef 8211 	mrs	r2, BASEPRI
   29012:	f383 8812 	msr	BASEPRI_MAX, r3
   29016:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2901a:	2300      	movs	r3, #0
   2901c:	600b      	str	r3, [r1, #0]
	return list->tail;
   2901e:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   29020:	b933      	cbnz	r3, 29030 <net_buf_slist_put+0x26>
	list->head = node;
   29022:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   29026:	f382 8811 	msr	BASEPRI, r2
   2902a:	f3bf 8f6f 	isb	sy
}
   2902e:	4770      	bx	lr
	parent->next = child;
   29030:	6019      	str	r1, [r3, #0]
	list->tail = node;
   29032:	6041      	str	r1, [r0, #4]
}
   29034:	e7f7      	b.n	29026 <net_buf_slist_put+0x1c>

00029036 <net_buf_slist_get>:
{
   29036:	b510      	push	{r4, lr}
   29038:	4603      	mov	r3, r0
	__asm__ volatile(
   2903a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2903e:	f3ef 8111 	mrs	r1, BASEPRI
   29042:	f382 8812 	msr	BASEPRI_MAX, r2
   29046:	f3bf 8f6f 	isb	sy
	return list->head;
   2904a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2904c:	b128      	cbz	r0, 2905a <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2904e:	685c      	ldr	r4, [r3, #4]
	return node->next;
   29050:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29052:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29054:	42a0      	cmp	r0, r4
	list->tail = node;
   29056:	bf08      	it	eq
   29058:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2905a:	f381 8811 	msr	BASEPRI, r1
   2905e:	f3bf 8f6f 	isb	sy
}
   29062:	bd10      	pop	{r4, pc}

00029064 <net_buf_put>:
	k_fifo_put(fifo, buf);
   29064:	f000 bdcc 	b.w	29c00 <k_queue_append>

00029068 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29068:	7a02      	ldrb	r2, [r0, #8]
   2906a:	3201      	adds	r2, #1
   2906c:	7202      	strb	r2, [r0, #8]
	return buf;
}
   2906e:	4770      	bx	lr

00029070 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   29070:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   29072:	4618      	mov	r0, r3
   29074:	685b      	ldr	r3, [r3, #4]
   29076:	2b00      	cmp	r3, #0
   29078:	d1fb      	bne.n	29072 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2907a:	4770      	bx	lr

0002907c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2907c:	6842      	ldr	r2, [r0, #4]
{
   2907e:	b510      	push	{r4, lr}
	if (parent->frags) {
   29080:	b12a      	cbz	r2, 2908e <net_buf_frag_insert+0x12>
   29082:	460b      	mov	r3, r1
	while (buf->frags) {
   29084:	461c      	mov	r4, r3
   29086:	685b      	ldr	r3, [r3, #4]
   29088:	2b00      	cmp	r3, #0
   2908a:	d1fb      	bne.n	29084 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2908c:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2908e:	6041      	str	r1, [r0, #4]
}
   29090:	bd10      	pop	{r4, pc}

00029092 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   29092:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   29094:	4604      	mov	r4, r0
   29096:	b920      	cbnz	r0, 290a2 <net_buf_frag_add+0x10>
	buf->ref++;
   29098:	7a0b      	ldrb	r3, [r1, #8]
   2909a:	3301      	adds	r3, #1
   2909c:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   2909e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   290a0:	bd10      	pop	{r4, pc}
   290a2:	4603      	mov	r3, r0
	while (buf->frags) {
   290a4:	4618      	mov	r0, r3
   290a6:	685b      	ldr	r3, [r3, #4]
   290a8:	2b00      	cmp	r3, #0
   290aa:	d1fb      	bne.n	290a4 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   290ac:	f7ff ffe6 	bl	2907c <net_buf_frag_insert>
   290b0:	4620      	mov	r0, r4
   290b2:	e7f5      	b.n	290a0 <net_buf_frag_add+0xe>

000290b4 <net_buf_simple_init_with_data>:
void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
	buf->data  = data;
	buf->size  = size;
   290b4:	b292      	uxth	r2, r2
	buf->__buf = data;
   290b6:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   290b8:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   290ba:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   290bc:	8082      	strh	r2, [r0, #4]
}
   290be:	4770      	bx	lr

000290c0 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   290c0:	6883      	ldr	r3, [r0, #8]
   290c2:	440b      	add	r3, r1
   290c4:	6003      	str	r3, [r0, #0]
}
   290c6:	4770      	bx	lr

000290c8 <net_buf_simple_add>:
	return buf->data + buf->len;
   290c8:	8883      	ldrh	r3, [r0, #4]
   290ca:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   290cc:	4419      	add	r1, r3
   290ce:	8081      	strh	r1, [r0, #4]
	return tail;
}
   290d0:	18d0      	adds	r0, r2, r3
   290d2:	4770      	bx	lr

000290d4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   290d4:	b430      	push	{r4, r5}
   290d6:	8884      	ldrh	r4, [r0, #4]
   290d8:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   290da:	18a3      	adds	r3, r4, r2
   290dc:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290de:	1928      	adds	r0, r5, r4
}
   290e0:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   290e2:	f7fd bd83 	b.w	26bec <memcpy>

000290e6 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   290e6:	b510      	push	{r4, lr}
   290e8:	8883      	ldrh	r3, [r0, #4]
   290ea:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   290ec:	1c5c      	adds	r4, r3, #1
   290ee:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   290f0:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   290f2:	18d0      	adds	r0, r2, r3
   290f4:	bd10      	pop	{r4, pc}

000290f6 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   290f6:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   290f8:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   290fa:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   290fc:	1a40      	subs	r0, r0, r1
	buf->len += len;
   290fe:	4411      	add	r1, r2
	buf->data -= len;
   29100:	6018      	str	r0, [r3, #0]
	buf->len += len;
   29102:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   29104:	4770      	bx	lr

00029106 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   29106:	8882      	ldrh	r2, [r0, #4]
   29108:	1a52      	subs	r2, r2, r1
{
   2910a:	4603      	mov	r3, r0
	buf->len -= len;
   2910c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2910e:	6800      	ldr	r0, [r0, #0]
   29110:	4408      	add	r0, r1
   29112:	6018      	str	r0, [r3, #0]
}
   29114:	4770      	bx	lr

00029116 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29116:	4603      	mov	r3, r0
	void *data = buf->data;
   29118:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2911a:	889a      	ldrh	r2, [r3, #4]
   2911c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2911e:	4401      	add	r1, r0
	buf->len -= len;
   29120:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   29122:	6019      	str	r1, [r3, #0]

	return data;
}
   29124:	4770      	bx	lr

00029126 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   29126:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   29128:	6803      	ldr	r3, [r0, #0]
   2912a:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2912c:	2101      	movs	r1, #1
   2912e:	f7ff ffea 	bl	29106 <net_buf_simple_pull>

	return val;
}
   29132:	4620      	mov	r0, r4
   29134:	bd10      	pop	{r4, pc}

00029136 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   29136:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   29138:	6803      	ldr	r3, [r0, #0]
   2913a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2913c:	2102      	movs	r1, #2
   2913e:	f7ff ffe2 	bl	29106 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   29142:	4620      	mov	r0, r4
   29144:	bd10      	pop	{r4, pc}

00029146 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   29146:	6802      	ldr	r2, [r0, #0]
   29148:	6880      	ldr	r0, [r0, #8]
}
   2914a:	1a10      	subs	r0, r2, r0
   2914c:	4770      	bx	lr

0002914e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2914e:	8883      	ldrh	r3, [r0, #4]
   29150:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   29152:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   29154:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   29156:	6803      	ldr	r3, [r0, #0]
   29158:	1a5b      	subs	r3, r3, r1
}
   2915a:	1ad0      	subs	r0, r2, r3
   2915c:	4770      	bx	lr

0002915e <adc_context_on_timer_expired>:
{
   2915e:	b410      	push	{r4}
   29160:	4603      	mov	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29162:	3808      	subs	r0, #8
   29164:	f3bf 8f5b 	dmb	ish
   29168:	e850 2f00 	ldrex	r2, [r0]
   2916c:	1c51      	adds	r1, r2, #1
   2916e:	e840 1400 	strex	r4, r1, [r0]
   29172:	2c00      	cmp	r4, #0
   29174:	d1f8      	bne.n	29168 <adc_context_on_timer_expired+0xa>
   29176:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   2917a:	b912      	cbnz	r2, 29182 <adc_context_on_timer_expired+0x24>
}
   2917c:	bc10      	pop	{r4}
		adc_context_start_sampling(ctx);
   2917e:	f7f6 bc99 	b.w	1fab4 <adc_context_start_sampling>
		ctx->status = -EBUSY;
   29182:	f06f 020f 	mvn.w	r2, #15
}
   29186:	bc10      	pop	{r4}
		ctx->status = -EBUSY;
   29188:	669a      	str	r2, [r3, #104]	; 0x68
}
   2918a:	4770      	bx	lr

0002918c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2918c:	6903      	ldr	r3, [r0, #16]
   2918e:	b2c9      	uxtb	r1, r1
   29190:	220c      	movs	r2, #12
   29192:	fb01 3302 	mla	r3, r1, r2, r3
   29196:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   29198:	f000 0007 	and.w	r0, r0, #7
   2919c:	4770      	bx	lr

0002919e <set_on_state>:
	__asm__ volatile(
   2919e:	f04f 0340 	mov.w	r3, #64	; 0x40
   291a2:	f3ef 8211 	mrs	r2, BASEPRI
   291a6:	f383 8812 	msr	BASEPRI_MAX, r3
   291aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   291ae:	6803      	ldr	r3, [r0, #0]
   291b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   291b4:	f043 0302 	orr.w	r3, r3, #2
   291b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   291ba:	f382 8811 	msr	BASEPRI, r2
   291be:	f3bf 8f6f 	isb	sy
}
   291c2:	4770      	bx	lr

000291c4 <stop>:
{
   291c4:	b570      	push	{r4, r5, r6, lr}
   291c6:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   291c8:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   291ca:	f04f 0440 	mov.w	r4, #64	; 0x40
   291ce:	f3ef 8511 	mrs	r5, BASEPRI
   291d2:	f384 8812 	msr	BASEPRI_MAX, r4
   291d6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   291da:	260c      	movs	r6, #12
   291dc:	fb06 3401 	mla	r4, r6, r1, r3
   291e0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   291e2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   291e6:	d008      	beq.n	291fa <stop+0x36>
   291e8:	42a2      	cmp	r2, r4
   291ea:	d006      	beq.n	291fa <stop+0x36>
	__asm__ volatile(
   291ec:	f385 8811 	msr	BASEPRI, r5
   291f0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   291f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   291f8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   291fa:	4371      	muls	r1, r6
   291fc:	440b      	add	r3, r1
   291fe:	2201      	movs	r2, #1
   29200:	641a      	str	r2, [r3, #64]	; 0x40
   29202:	f385 8811 	msr	BASEPRI, r5
   29206:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2920a:	6843      	ldr	r3, [r0, #4]
   2920c:	440b      	add	r3, r1
   2920e:	685b      	ldr	r3, [r3, #4]
   29210:	4798      	blx	r3
	return 0;
   29212:	2000      	movs	r0, #0
   29214:	e7f0      	b.n	291f8 <stop+0x34>

00029216 <api_stop>:
	return stop(dev, subsys, CTX_API);
   29216:	2280      	movs	r2, #128	; 0x80
   29218:	f7ff bfd4 	b.w	291c4 <stop>

0002921c <async_start>:
{
   2921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2921e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29220:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   29222:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29224:	f04f 0540 	mov.w	r5, #64	; 0x40
   29228:	f3ef 8611 	mrs	r6, BASEPRI
   2922c:	f385 8812 	msr	BASEPRI_MAX, r5
   29230:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29234:	250c      	movs	r5, #12
   29236:	4369      	muls	r1, r5
   29238:	440c      	add	r4, r1
   2923a:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2923c:	f005 0c07 	and.w	ip, r5, #7
   29240:	f1bc 0f01 	cmp.w	ip, #1
   29244:	d10b      	bne.n	2925e <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29246:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   29248:	f386 8811 	msr	BASEPRI, r6
   2924c:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   29250:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   29254:	6843      	ldr	r3, [r0, #4]
   29256:	585b      	ldr	r3, [r3, r1]
   29258:	4798      	blx	r3
	return 0;
   2925a:	2000      	movs	r0, #0
}
   2925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2925e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   29262:	42af      	cmp	r7, r5
   29264:	f386 8811 	msr	BASEPRI, r6
   29268:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2926c:	bf0c      	ite	eq
   2926e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   29272:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   29276:	e7f1      	b.n	2925c <async_start+0x40>

00029278 <api_start>:
{
   29278:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2927a:	2480      	movs	r4, #128	; 0x80
   2927c:	9400      	str	r4, [sp, #0]
   2927e:	f7ff ffcd 	bl	2921c <async_start>
}
   29282:	b002      	add	sp, #8
   29284:	bd10      	pop	{r4, pc}

00029286 <onoff_started_callback>:
{
   29286:	b410      	push	{r4}
	return &data->mgr[type];
   29288:	6900      	ldr	r0, [r0, #16]
   2928a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2928c:	241c      	movs	r4, #28
   2928e:	fb03 0004 	mla	r0, r3, r4, r0
   29292:	2100      	movs	r1, #0
}
   29294:	bc10      	pop	{r4}
	notify(mgr, 0);
   29296:	4710      	bx	r2

00029298 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29298:	2000      	movs	r0, #0
   2929a:	f000 bb00 	b.w	2989e <nrfx_clock_stop>

0002929e <blocking_start_callback>:
{
   2929e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   292a0:	f7fa bab0 	b.w	23804 <z_impl_k_sem_give>

000292a4 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   292a4:	2000      	movs	r0, #0
   292a6:	4770      	bx	lr

000292a8 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   292a8:	b538      	push	{r3, r4, r5, lr}
   292aa:	460c      	mov	r4, r1
   292ac:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   292ae:	f7ee fb59 	bl	17964 <bt_is_ready>
   292b2:	b128      	cbz	r0, 292c0 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   292b4:	4629      	mov	r1, r5
   292b6:	4620      	mov	r0, r4
}
   292b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   292bc:	f7ed bc2a 	b.w	16b14 <bt_hci_le_rand>
}
   292c0:	f06f 000a 	mvn.w	r0, #10
   292c4:	bd38      	pop	{r3, r4, r5, pc}

000292c6 <erase_op>:
{
   292c6:	b570      	push	{r4, r5, r6, lr}
   292c8:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   292ca:	f000 fb28 	bl	2991e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   292ce:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   292d0:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   292d2:	b10b      	cbz	r3, 292d8 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   292d4:	f000 faed 	bl	298b2 <nrf_flash_sync_get_timestamp_begin>
{
   292d8:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   292da:	6860      	ldr	r0, [r4, #4]
   292dc:	f7f9 fe3e 	bl	22f5c <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   292e0:	68a3      	ldr	r3, [r4, #8]
   292e2:	1b5b      	subs	r3, r3, r5
   292e4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   292e6:	6863      	ldr	r3, [r4, #4]
   292e8:	442b      	add	r3, r5
   292ea:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   292ec:	7b23      	ldrb	r3, [r4, #12]
		i++;
   292ee:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   292f0:	b93b      	cbnz	r3, 29302 <erase_op+0x3c>
	} while (e_ctx->len > 0);
   292f2:	68a3      	ldr	r3, [r4, #8]
   292f4:	2b00      	cmp	r3, #0
   292f6:	d1f0      	bne.n	292da <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   292f8:	68a0      	ldr	r0, [r4, #8]
}
   292fa:	3800      	subs	r0, #0
   292fc:	bf18      	it	ne
   292fe:	2001      	movne	r0, #1
   29300:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   29302:	4630      	mov	r0, r6
   29304:	f7f9 f92a 	bl	2255c <nrf_flash_sync_check_time_limit>
   29308:	2800      	cmp	r0, #0
   2930a:	d0f2      	beq.n	292f2 <erase_op+0x2c>
   2930c:	e7f4      	b.n	292f8 <erase_op+0x32>

0002930e <is_regular_addr_valid>:
{
   2930e:	b538      	push	{r3, r4, r5, lr}
   29310:	4605      	mov	r5, r0
   29312:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   29314:	f000 fafd 	bl	29912 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   29318:	2d00      	cmp	r5, #0
   2931a:	db07      	blt.n	2932c <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2931c:	42a8      	cmp	r0, r5
   2931e:	d905      	bls.n	2932c <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   29320:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   29322:	4284      	cmp	r4, r0
   29324:	bf8c      	ite	hi
   29326:	2000      	movhi	r0, #0
   29328:	2001      	movls	r0, #1
}
   2932a:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2932c:	2000      	movs	r0, #0
   2932e:	e7fc      	b.n	2932a <is_regular_addr_valid+0x1c>

00029330 <flash_nrf_read>:
{
   29330:	b570      	push	{r4, r5, r6, lr}
   29332:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   29334:	4628      	mov	r0, r5
   29336:	4619      	mov	r1, r3
{
   29338:	4616      	mov	r6, r2
   2933a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2933c:	f7ff ffe7 	bl	2930e <is_regular_addr_valid>
   29340:	b928      	cbnz	r0, 2934e <flash_nrf_read+0x1e>
   29342:	4621      	mov	r1, r4
   29344:	4628      	mov	r0, r5
}
   29346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2934a:	f7f7 b91f 	b.w	2058c <flash_nrf_read.part.0>
	if (!len) {
   2934e:	b124      	cbz	r4, 2935a <flash_nrf_read+0x2a>
	memcpy(data, (void *)addr, len);
   29350:	4622      	mov	r2, r4
   29352:	4629      	mov	r1, r5
   29354:	4630      	mov	r0, r6
   29356:	f7fd fc49 	bl	26bec <memcpy>
}
   2935a:	2000      	movs	r0, #0
   2935c:	bd70      	pop	{r4, r5, r6, pc}

0002935e <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2935e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29360:	461c      	mov	r4, r3
   29362:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   29364:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   29366:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   29368:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2936a:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2936c:	6913      	ldr	r3, [r2, #16]
{
   2936e:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   29370:	aa01      	add	r2, sp, #4
   29372:	4669      	mov	r1, sp
   29374:	4798      	blx	r3

	while (layout_size--) {
   29376:	9b01      	ldr	r3, [sp, #4]
   29378:	1e5a      	subs	r2, r3, #1
   2937a:	9201      	str	r2, [sp, #4]
   2937c:	b91b      	cbnz	r3, 29386 <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2937e:	f06f 0015 	mvn.w	r0, #21
}
   29382:	b003      	add	sp, #12
   29384:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   29386:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   29388:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2938a:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2938c:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2938e:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   29390:	b985      	cbnz	r5, 293b4 <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   29392:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   29394:	f8d0 c000 	ldr.w	ip, [r0]
   29398:	4563      	cmp	r3, ip
   2939a:	bf28      	it	cs
   2939c:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2939e:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   293a0:	fb03 1107 	mla	r1, r3, r7, r1
   293a4:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   293a6:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   293a8:	6802      	ldr	r2, [r0, #0]
   293aa:	429a      	cmp	r2, r3
   293ac:	d806      	bhi.n	293bc <flash_get_page_info+0x5e>
		layout++;
   293ae:	3008      	adds	r0, #8
   293b0:	9000      	str	r0, [sp, #0]
   293b2:	e7e0      	b.n	29376 <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   293b4:	1a6b      	subs	r3, r5, r1
   293b6:	fbb3 f3f7 	udiv	r3, r3, r7
   293ba:	e7eb      	b.n	29394 <flash_get_page_info+0x36>
			return 0;
   293bc:	2000      	movs	r0, #0
   293be:	e7e0      	b.n	29382 <flash_get_page_info+0x24>

000293c0 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   293c0:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   293c2:	2200      	movs	r2, #0
   293c4:	f7ff bfcb 	b.w	2935e <flash_get_page_info>

000293c8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   293c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   293cc:	6883      	ldr	r3, [r0, #8]
{
   293ce:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   293d0:	691b      	ldr	r3, [r3, #16]
{
   293d2:	4688      	mov	r8, r1
   293d4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   293d6:	a901      	add	r1, sp, #4
   293d8:	aa02      	add	r2, sp, #8
   293da:	4798      	blx	r3
	off_t off = 0;
   293dc:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   293de:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   293e0:	4625      	mov	r5, r4
   293e2:	9b02      	ldr	r3, [sp, #8]
   293e4:	42ab      	cmp	r3, r5
   293e6:	d802      	bhi.n	293ee <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   293e8:	b006      	add	sp, #24
   293ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   293ee:	9f01      	ldr	r7, [sp, #4]
   293f0:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   293f4:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   293f6:	687b      	ldr	r3, [r7, #4]
   293f8:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   293fa:	683a      	ldr	r2, [r7, #0]
   293fc:	42b2      	cmp	r2, r6
   293fe:	eb0a 0306 	add.w	r3, sl, r6
   29402:	d802      	bhi.n	2940a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   29404:	3501      	adds	r5, #1
   29406:	469a      	mov	sl, r3
   29408:	e7eb      	b.n	293e2 <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2940a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2940c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2940e:	4649      	mov	r1, r9
   29410:	a803      	add	r0, sp, #12
   29412:	47c0      	blx	r8
   29414:	2800      	cmp	r0, #0
   29416:	d0e7      	beq.n	293e8 <flash_page_foreach+0x20>
			off += page_info.size;
   29418:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2941a:	3601      	adds	r6, #1
			off += page_info.size;
   2941c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2941e:	e7ec      	b.n	293fa <flash_page_foreach+0x32>

00029420 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29420:	6843      	ldr	r3, [r0, #4]
   29422:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29424:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   29428:	600b      	str	r3, [r1, #0]
}
   2942a:	2000      	movs	r0, #0
   2942c:	4770      	bx	lr

0002942e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2942e:	6843      	ldr	r3, [r0, #4]
   29430:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   29432:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   29436:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2943a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2943e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   29442:	2000      	movs	r0, #0
   29444:	4770      	bx	lr

00029446 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29446:	6843      	ldr	r3, [r0, #4]
   29448:	685b      	ldr	r3, [r3, #4]
}
   2944a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2944c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29450:	4770      	bx	lr

00029452 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29452:	6843      	ldr	r3, [r0, #4]
   29454:	685b      	ldr	r3, [r3, #4]
}
   29456:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29458:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2945c:	4770      	bx	lr

0002945e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2945e:	6843      	ldr	r3, [r0, #4]
   29460:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29462:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   29466:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2946a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2946c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   29470:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   29474:	2000      	movs	r0, #0
   29476:	4770      	bx	lr

00029478 <gpio_nrfx_manage_callback>:
{
   29478:	b510      	push	{r4, lr}
	return port->data;
   2947a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2947c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2947e:	b1f8      	cbz	r0, 294c0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29480:	4288      	cmp	r0, r1
   29482:	d119      	bne.n	294b8 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   29484:	689c      	ldr	r4, [r3, #8]
	return node->next;
   29486:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   29488:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2948a:	42a1      	cmp	r1, r4
   2948c:	d100      	bne.n	29490 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2948e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29490:	2000      	movs	r0, #0
   29492:	6008      	str	r0, [r1, #0]
	if (set) {
   29494:	b12a      	cbz	r2, 294a2 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   29496:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   29498:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2949a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2949c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2949e:	b902      	cbnz	r2, 294a2 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   294a0:	6099      	str	r1, [r3, #8]
	return 0;
   294a2:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   294a4:	e010      	b.n	294c8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   294a6:	4281      	cmp	r1, r0
   294a8:	d106      	bne.n	294b8 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   294aa:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   294ac:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   294ae:	6898      	ldr	r0, [r3, #8]
   294b0:	4281      	cmp	r1, r0
   294b2:	d1ed      	bne.n	29490 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   294b4:	609c      	str	r4, [r3, #8]
}
   294b6:	e7eb      	b.n	29490 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   294b8:	4604      	mov	r4, r0
   294ba:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   294bc:	2800      	cmp	r0, #0
   294be:	d1f2      	bne.n	294a6 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   294c0:	2a00      	cmp	r2, #0
   294c2:	d1e8      	bne.n	29496 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   294c4:	f06f 0015 	mvn.w	r0, #21
}
   294c8:	bd10      	pop	{r4, pc}

000294ca <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   294ca:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   294cc:	6843      	ldr	r3, [r0, #4]
   294ce:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   294d0:	7a05      	ldrb	r5, [r0, #8]
   294d2:	6844      	ldr	r4, [r0, #4]
   294d4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   294d8:	42a3      	cmp	r3, r4
   294da:	d302      	bcc.n	294e2 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   294dc:	f06f 0001 	mvn.w	r0, #1
}
   294e0:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   294e2:	795c      	ldrb	r4, [r3, #5]
   294e4:	428c      	cmp	r4, r1
   294e6:	d001      	beq.n	294ec <pinctrl_lookup_state+0x22>
		(*state)++;
   294e8:	3308      	adds	r3, #8
   294ea:	e7f0      	b.n	294ce <pinctrl_lookup_state+0x4>
			return 0;
   294ec:	2000      	movs	r0, #0
   294ee:	e7f7      	b.n	294e0 <pinctrl_lookup_state+0x16>

000294f0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   294f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   294f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   294f8:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
   294fa:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   294fe:	4281      	cmp	r1, r0
   29500:	d102      	bne.n	29508 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   29502:	2000      	movs	r0, #0
}
   29504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   29508:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2950a:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2950e:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
   29512:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   29514:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   29518:	bf08      	it	eq
   2951a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
   2951e:	2d19      	cmp	r5, #25
   29520:	d86a      	bhi.n	295f8 <pinctrl_configure_pins+0x108>
   29522:	e8df f005 	tbb	[pc, r5]
   29526:	170d      	.short	0x170d
   29528:	2e221f1c 	.word	0x2e221f1c
   2952c:	6969691f 	.word	0x6969691f
   29530:	69553269 	.word	0x69553269
   29534:	69696969 	.word	0x69696969
   29538:	69696969 	.word	0x69696969
   2953c:	66636058 	.word	0x66636058
			NRF_PSEL_UART(reg, TXD) = pin;
   29540:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   29544:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29548:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
   2954c:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
}
   29550:	2501      	movs	r5, #1
   29552:	e002      	b.n	2955a <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = pin;
   29554:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29558:	2500      	movs	r5, #0
   2955a:	46ac      	mov	ip, r5
   2955c:	e01c      	b.n	29598 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_UART(reg, RTS) = pin;
   2955e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   29562:	e7ef      	b.n	29544 <pinctrl_configure_pins+0x54>
			NRF_PSEL_UART(reg, CTS) = pin;
   29564:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   29568:	e7f6      	b.n	29558 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2956a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2956e:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
   29570:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   29574:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   29578:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
   2957c:	f04f 0c01 	mov.w	ip, #1
   29580:	e00a      	b.n	29598 <pinctrl_configure_pins+0xa8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   29582:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   29586:	2501      	movs	r5, #1
   29588:	e7f2      	b.n	29570 <pinctrl_configure_pins+0x80>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2958a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2958e:	2c00      	cmp	r4, #0
   29590:	d1e2      	bne.n	29558 <pinctrl_configure_pins+0x68>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29592:	2500      	movs	r5, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   29594:	46ac      	mov	ip, r5
				drive = NRF_DRIVE_S0D1;
   29596:	2406      	movs	r4, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   29598:	f850 eb04 	ldr.w	lr, [r0], #4
   2959c:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   295a0:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   295a4:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   295a8:	ea4f 2404 	mov.w	r4, r4, lsl #8
   295ac:	bf18      	it	ne
   295ae:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
   295b2:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   295b6:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
   295ba:	bf18      	it	ne
   295bc:	2501      	movne	r5, #1
   295be:	ea44 040c 	orr.w	r4, r4, ip
    reg->PIN_CNF[pin_number] = cnf;
   295c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   295c6:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   295ca:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   295ce:	e796      	b.n	294fe <pinctrl_configure_pins+0xe>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   295d0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   295d4:	e7db      	b.n	2958e <pinctrl_configure_pins+0x9e>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   295d6:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   295da:	6805      	ldr	r5, [r0, #0]
   295dc:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
   295e0:	2d00      	cmp	r5, #0
   295e2:	d0d0      	beq.n	29586 <pinctrl_configure_pins+0x96>
   295e4:	e7ae      	b.n	29544 <pinctrl_configure_pins+0x54>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   295e6:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   295ea:	e7f6      	b.n	295da <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   295ec:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   295f0:	e7f3      	b.n	295da <pinctrl_configure_pins+0xea>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   295f2:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   295f6:	e7f0      	b.n	295da <pinctrl_configure_pins+0xea>
		switch (NRF_GET_FUN(pins[i])) {
   295f8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   295fc:	e782      	b.n	29504 <pinctrl_configure_pins+0x14>

000295fe <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   295fe:	6902      	ldr	r2, [r0, #16]
{
   29600:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29602:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   29606:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2960a:	2000      	movs	r0, #0
   2960c:	4770      	bx	lr

0002960e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2960e:	6843      	ldr	r3, [r0, #4]
   29610:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   29612:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   29616:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2961a:	4770      	bx	lr

0002961c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2961c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2961e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   29620:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29622:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29626:	b150      	cbz	r0, 2963e <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   29628:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2962a:	2000      	movs	r0, #0
   2962c:	7812      	ldrb	r2, [r2, #0]
   2962e:	700a      	strb	r2, [r1, #0]
   29630:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   29634:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29638:	2201      	movs	r2, #1
   2963a:	601a      	str	r2, [r3, #0]
	return 0;
   2963c:	4770      	bx	lr
		return -1;
   2963e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   29642:	4770      	bx	lr

00029644 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   29644:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   29646:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29648:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2964c:	b940      	cbnz	r0, 29660 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2964e:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   29650:	079b      	lsls	r3, r3, #30
   29652:	d406      	bmi.n	29662 <is_tx_ready.isra.0+0x1e>
   29654:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   29658:	3800      	subs	r0, #0
   2965a:	bf18      	it	ne
   2965c:	2001      	movne	r0, #1
   2965e:	4770      	bx	lr
   29660:	2001      	movs	r0, #1
}
   29662:	4770      	bx	lr

00029664 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   29664:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   29666:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   29668:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2966c:	05c9      	lsls	r1, r1, #23
   2966e:	d518      	bpl.n	296a2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29670:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29674:	b1a9      	cbz	r1, 296a2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   29676:	f04f 0040 	mov.w	r0, #64	; 0x40
   2967a:	f3ef 8111 	mrs	r1, BASEPRI
   2967e:	f380 8812 	msr	BASEPRI_MAX, r0
   29682:	f3bf 8f6f 	isb	sy
   29686:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2968a:	b130      	cbz	r0, 2969a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2968c:	2000      	movs	r0, #0
   2968e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   29692:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29696:	2001      	movs	r0, #1
   29698:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2969a:	f381 8811 	msr	BASEPRI, r1
   2969e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   296a2:	6852      	ldr	r2, [r2, #4]
   296a4:	06d2      	lsls	r2, r2, #27
   296a6:	d515      	bpl.n	296d4 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   296a8:	f04f 0140 	mov.w	r1, #64	; 0x40
   296ac:	f3ef 8211 	mrs	r2, BASEPRI
   296b0:	f381 8812 	msr	BASEPRI_MAX, r1
   296b4:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   296b8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   296bc:	b111      	cbz	r1, 296c4 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   296be:	2100      	movs	r1, #0
   296c0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   296c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   296c8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   296cc:	f382 8811 	msr	BASEPRI, r2
   296d0:	f3bf 8f6f 	isb	sy
}
   296d4:	4770      	bx	lr

000296d6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   296d6:	4770      	bx	lr

000296d8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   296d8:	f100 0350 	add.w	r3, r0, #80	; 0x50
   296dc:	009b      	lsls	r3, r3, #2
   296de:	b29b      	uxth	r3, r3
   296e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   296e4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   296e8:	2200      	movs	r2, #0
   296ea:	601a      	str	r2, [r3, #0]
   296ec:	681b      	ldr	r3, [r3, #0]
}
   296ee:	4770      	bx	lr

000296f0 <sys_clock_cycle_get_32>:
{
   296f0:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   296f2:	f7f7 fbf1 	bl	20ed8 <z_nrf_rtc_timer_read>
}
   296f6:	bd08      	pop	{r3, pc}

000296f8 <hci_driver_close>:
{
   296f8:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   296fa:	f7f8 fd4d 	bl	22198 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   296fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29702:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29706:	f7f7 fd7b 	bl	21200 <multithreading_lock_acquire>
	if (err) {
   2970a:	4604      	mov	r4, r0
   2970c:	b920      	cbnz	r0, 29718 <hci_driver_close+0x20>
	err = sdc_disable();
   2970e:	f7d7 f8bd 	bl	88c <sdc_disable>
	if (err) {
   29712:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   29714:	f7f7 fd7c 	bl	21210 <multithreading_lock_release>
}
   29718:	4620      	mov	r0, r4
   2971a:	bd10      	pop	{r4, pc}

0002971c <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   2971c:	f7f7 bdc4 	b.w	212a8 <rand_prio_low_vector_get>

00029720 <hci_driver_send>:
{
   29720:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   29722:	8a03      	ldrh	r3, [r0, #16]
{
   29724:	4605      	mov	r5, r0
	if (!buf->len) {
   29726:	b373      	cbz	r3, 29786 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   29728:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2972a:	b1a3      	cbz	r3, 29756 <hci_driver_send+0x36>
   2972c:	2b02      	cmp	r3, #2
   2972e:	d12a      	bne.n	29786 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29738:	f7f7 fd62 	bl	21200 <multithreading_lock_acquire>
	if (!errcode) {
   2973c:	4604      	mov	r4, r0
   2973e:	b940      	cbnz	r0, 29752 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   29740:	68e8      	ldr	r0, [r5, #12]
   29742:	f7e3 fcd9 	bl	d0f8 <sdc_hci_data_put>
   29746:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29748:	f7f7 fd62 	bl	21210 <multithreading_lock_release>
		if (errcode) {
   2974c:	b1b4      	cbz	r4, 2977c <hci_driver_send+0x5c>
			receive_signal_raise();
   2974e:	f7f7 fdbf 	bl	212d0 <receive_signal_raise>
}
   29752:	4620      	mov	r0, r4
   29754:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   29756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2975a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2975e:	f7f7 fd4f 	bl	21200 <multithreading_lock_acquire>
	if (!errcode) {
   29762:	4604      	mov	r4, r0
   29764:	2800      	cmp	r0, #0
   29766:	d1f4      	bne.n	29752 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   29768:	68e8      	ldr	r0, [r5, #12]
   2976a:	f7f7 ff57 	bl	2161c <hci_internal_cmd_put>
   2976e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   29770:	f7f7 fd4e 	bl	21210 <multithreading_lock_release>
	if (errcode) {
   29774:	2c00      	cmp	r4, #0
   29776:	d1ec      	bne.n	29752 <hci_driver_send+0x32>
	receive_signal_raise();
   29778:	f7f7 fdaa 	bl	212d0 <receive_signal_raise>
		net_buf_unref(buf);
   2977c:	4628      	mov	r0, r5
   2977e:	f7f6 f951 	bl	1fa24 <net_buf_unref>
   29782:	2400      	movs	r4, #0
   29784:	e7e5      	b.n	29752 <hci_driver_send+0x32>
	switch (type) {
   29786:	f06f 0415 	mvn.w	r4, #21
   2978a:	e7e2      	b.n	29752 <hci_driver_send+0x32>

0002978c <receive_work_handler>:
	hci_driver_receive_process();
   2978c:	f7f7 bebc 	b.w	21508 <hci_driver_receive_process>

00029790 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   29790:	b5f0      	push	{r4, r5, r6, r7, lr}
   29792:	b08d      	sub	sp, #52	; 0x34
   29794:	4615      	mov	r5, r2
   29796:	466a      	mov	r2, sp
   29798:	f100 0310 	add.w	r3, r0, #16
   2979c:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   2979e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   297a2:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   297a6:	4283      	cmp	r3, r0
   297a8:	d1f9      	bne.n	2979e <bt_encrypt_le+0xe>
   297aa:	aa04      	add	r2, sp, #16
   297ac:	f101 0310 	add.w	r3, r1, #16
   297b0:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   297b2:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   297b6:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   297ba:	4299      	cmp	r1, r3
   297bc:	d1f9      	bne.n	297b2 <bt_encrypt_le+0x22>
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   297be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   297c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   297c6:	f7f7 fd1b 	bl	21200 <multithreading_lock_acquire>

	if (!errcode) {
   297ca:	4604      	mov	r4, r0
   297cc:	b990      	cbnz	r0, 297f4 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   297ce:	aa08      	add	r2, sp, #32
   297d0:	4639      	mov	r1, r7
   297d2:	4630      	mov	r0, r6
   297d4:	f7e3 f9cf 	bl	cb76 <sdc_soc_ecb_block_encrypt>
   297d8:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   297da:	f7f7 fd19 	bl	21210 <multithreading_lock_release>
	}

	if (!errcode) {
   297de:	b94c      	cbnz	r4, 297f4 <bt_encrypt_le+0x64>
   297e0:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   297e2:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   297e6:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   297e8:	f812 1901 	ldrb.w	r1, [r2], #-1
   297ec:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   297f0:	429d      	cmp	r5, r3
   297f2:	d1f9      	bne.n	297e8 <bt_encrypt_le+0x58>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   297f4:	4620      	mov	r0, r4
   297f6:	b00d      	add	sp, #52	; 0x34
   297f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000297fa <sys_memcpy_swap.constprop.0>:
   297fa:	f101 0320 	add.w	r3, r1, #32
   297fe:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   29800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   29804:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   29808:	428b      	cmp	r3, r1
   2980a:	d1f9      	bne.n	29800 <sys_memcpy_swap.constprop.0+0x6>
}
   2980c:	4770      	bx	lr

0002980e <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2980e:	2100      	movs	r1, #0
   29810:	f7f8 bce4 	b.w	221dc <cmd_le_generate_dhkey>

00029814 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   29814:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   29818:	2901      	cmp	r1, #1
   2981a:	d801      	bhi.n	29820 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2981c:	f7f8 bcde 	b.w	221dc <cmd_le_generate_dhkey>
}
   29820:	2012      	movs	r0, #18
   29822:	4770      	bx	lr

00029824 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29824:	4668      	mov	r0, sp
   29826:	f020 0107 	bic.w	r1, r0, #7
   2982a:	468d      	mov	sp, r1
   2982c:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2982e:	f7e1 fdf7 	bl	b420 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29832:	f7eb f9c7 	bl	14bc4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29836:	f7eb faaf 	bl	14d98 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2983a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2983e:	4685      	mov	sp, r0
   29840:	4770      	bx	lr

00029842 <mpsl_low_prio_work_handler>:
{
   29842:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   29844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2984c:	f7f7 fcd8 	bl	21200 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   29850:	f7e7 fa38 	bl	10cc4 <mpsl_low_priority_process>
}
   29854:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   29858:	f7f7 bcda 	b.w	21210 <multithreading_lock_release>

0002985c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2985c:	4668      	mov	r0, sp
   2985e:	f020 0107 	bic.w	r1, r0, #7
   29862:	468d      	mov	sp, r1
   29864:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   29866:	f7e1 fd91 	bl	b38c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2986a:	f7eb f9ab 	bl	14bc4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2986e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29872:	4685      	mov	sp, r0
   29874:	4770      	bx	lr

00029876 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29876:	4668      	mov	r0, sp
   29878:	f020 0107 	bic.w	r1, r0, #7
   2987c:	468d      	mov	sp, r1
   2987e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29880:	f7df fa0c 	bl	8c9c <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   29884:	f7eb f99e 	bl	14bc4 <_arch_isr_direct_pm>
   29888:	f7eb fa86 	bl	14d98 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2988c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29890:	4685      	mov	sp, r0
   29892:	4770      	bx	lr

00029894 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   29894:	b508      	push	{r3, lr}

	mpsl_fem_init();
   29896:	f7e7 fbeb 	bl	11070 <mpsl_fem_init>

	return 0;
}
   2989a:	2000      	movs	r0, #0
   2989c:	bd08      	pop	{r3, pc}

0002989e <nrfx_clock_stop>:
	switch (domain) {
   2989e:	2801      	cmp	r0, #1
   298a0:	d101      	bne.n	298a6 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   298a2:	f7e2 bc51 	b.w	c148 <mpsl_clock_hfclk_release>
}
   298a6:	4770      	bx	lr

000298a8 <nrfx_clock_enable>:
}
   298a8:	4770      	bx	lr

000298aa <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   298aa:	f7e2 ba57 	b.w	bd5c <MPSL_IRQ_CLOCK_Handler>

000298ae <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   298ae:	f7e2 be2f 	b.w	c510 <mpsl_is_initialized>

000298b2 <nrf_flash_sync_get_timestamp_begin>:
}
   298b2:	4770      	bx	lr

000298b4 <temp_nrf5_mpsl_init>:
	(void)dev;

	LOG_DBG("");

	return 0;
}
   298b4:	2000      	movs	r0, #0
   298b6:	4770      	bx	lr

000298b8 <temp_nrf5_mpsl_sample_fetch>:
{
   298b8:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   298ba:	2939      	cmp	r1, #57	; 0x39
	struct temp_nrf5_mpsl_data *data = dev->data;
   298bc:	6904      	ldr	r4, [r0, #16]
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
   298be:	d001      	beq.n	298c4 <temp_nrf5_mpsl_sample_fetch+0xc>
   298c0:	290c      	cmp	r1, #12
   298c2:	d104      	bne.n	298ce <temp_nrf5_mpsl_sample_fetch+0x16>
	data->sample = mpsl_temperature_get();
   298c4:	f7e2 fe3c 	bl	c540 <mpsl_temperature_get>
   298c8:	6020      	str	r0, [r4, #0]
	return 0;
   298ca:	2000      	movs	r0, #0
}
   298cc:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   298ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   298d2:	e7fb      	b.n	298cc <temp_nrf5_mpsl_sample_fetch+0x14>

000298d4 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   298d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   298d8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   298dc:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   298de:	bf04      	itt	eq
   298e0:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   298e4:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   298e8:	1f83      	subs	r3, r0, #6
   298ea:	4258      	negs	r0, r3
   298ec:	4158      	adcs	r0, r3
   298ee:	4770      	bx	lr

000298f0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   298f0:	4700      	bx	r0

000298f2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   298f2:	f000 bc03 	b.w	2a0fc <z_impl_k_busy_wait>

000298f6 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   298f6:	f000 001f 	and.w	r0, r0, #31
   298fa:	0080      	lsls	r0, r0, #2
   298fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29900:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   29904:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29908:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2990c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   29910:	4770      	bx	lr

00029912 <nrfx_nvmc_flash_size_get>:
   29912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29916:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   29918:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2991a:	4350      	muls	r0, r2
   2991c:	4770      	bx	lr

0002991e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2991e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   29922:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   29924:	4770      	bx	lr

00029926 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   29926:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2992a:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2992c:	4770      	bx	lr

0002992e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2992e:	f7f9 bb49 	b.w	22fc4 <_DoInit>

00029932 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   29932:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   29934:	f7ff fffb 	bl	2992e <SEGGER_RTT_Init>

	return 0;
}
   29938:	2000      	movs	r0, #0
   2993a:	bd08      	pop	{r3, pc}

0002993c <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2993c:	4770      	bx	lr

0002993e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2993e:	b140      	cbz	r0, 29952 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29940:	68c3      	ldr	r3, [r0, #12]
   29942:	7858      	ldrb	r0, [r3, #1]
   29944:	f010 0001 	ands.w	r0, r0, #1
   29948:	bf1e      	ittt	ne
   2994a:	7818      	ldrbne	r0, [r3, #0]
   2994c:	fab0 f080 	clzne	r0, r0
   29950:	0940      	lsrne	r0, r0, #5
}
   29952:	4770      	bx	lr

00029954 <z_early_memset>:
	(void) memset(dst, c, n);
   29954:	f7fd b955 	b.w	26c02 <memset>

00029958 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   29958:	f7fd b948 	b.w	26bec <memcpy>

0002995c <k_heap_init>:
{
   2995c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2995e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29962:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29966:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29968:	f7fb be15 	b.w	25596 <sys_heap_init>

0002996c <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29970:	b085      	sub	sp, #20
   29972:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   29976:	4607      	mov	r7, r0
   29978:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2997a:	4650      	mov	r0, sl
   2997c:	4621      	mov	r1, r4
{
   2997e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29980:	f000 fbc0 	bl	2a104 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   29984:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   29988:	bf08      	it	eq
   2998a:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2998e:	4605      	mov	r5, r0
   29990:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   29992:	bf04      	itt	eq
   29994:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   29998:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2999c:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   299a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   299a4:	f3ef 8411 	mrs	r4, BASEPRI
   299a8:	f383 8812 	msr	BASEPRI_MAX, r3
   299ac:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   299b0:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   299b4:	464a      	mov	r2, r9
   299b6:	4641      	mov	r1, r8
   299b8:	4638      	mov	r0, r7
   299ba:	f7fb fd85 	bl	254c8 <sys_heap_aligned_alloc>
   299be:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   299c0:	f7fa fdf4 	bl	245ac <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   299c4:	9b03      	ldr	r3, [sp, #12]
   299c6:	b13b      	cbz	r3, 299d8 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   299c8:	f384 8811 	msr	BASEPRI, r4
   299cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   299d0:	4618      	mov	r0, r3
   299d2:	b005      	add	sp, #20
   299d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   299d8:	1a28      	subs	r0, r5, r0
   299da:	eb66 0101 	sbc.w	r1, r6, r1
   299de:	2801      	cmp	r0, #1
   299e0:	f171 0200 	sbcs.w	r2, r1, #0
   299e4:	dbf0      	blt.n	299c8 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   299e6:	e9cd 0100 	strd	r0, r1, [sp]
   299ea:	465a      	mov	r2, fp
   299ec:	4621      	mov	r1, r4
   299ee:	4650      	mov	r0, sl
   299f0:	f7fa fa8a 	bl	23f08 <z_pend_curr>
	__asm__ volatile(
   299f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   299f8:	f3ef 8411 	mrs	r4, BASEPRI
   299fc:	f383 8812 	msr	BASEPRI_MAX, r3
   29a00:	f3bf 8f6f 	isb	sy
	return k;
   29a04:	e7d6      	b.n	299b4 <k_heap_aligned_alloc+0x48>

00029a06 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   29a06:	b538      	push	{r3, r4, r5, lr}
   29a08:	4604      	mov	r4, r0
   29a0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   29a0e:	f3ef 8511 	mrs	r5, BASEPRI
   29a12:	f383 8812 	msr	BASEPRI_MAX, r3
   29a16:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   29a1a:	f7fb fd1d 	bl	25458 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   29a1e:	f104 000c 	add.w	r0, r4, #12
   29a22:	f000 fb0c 	bl	2a03e <z_unpend_all>
   29a26:	b130      	cbz	r0, 29a36 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   29a28:	4629      	mov	r1, r5
   29a2a:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   29a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   29a32:	f7fa bacd 	b.w	23fd0 <z_reschedule>
	__asm__ volatile(
   29a36:	f385 8811 	msr	BASEPRI, r5
   29a3a:	f3bf 8f6f 	isb	sy
}
   29a3e:	bd38      	pop	{r3, r4, r5, pc}

00029a40 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   29a40:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   29a44:	4313      	orrs	r3, r2
   29a46:	f013 0303 	ands.w	r3, r3, #3
   29a4a:	d10c      	bne.n	29a66 <create_free_list+0x26>
	slab->free_list = NULL;
   29a4c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   29a4e:	6881      	ldr	r1, [r0, #8]
   29a50:	4299      	cmp	r1, r3
   29a52:	d801      	bhi.n	29a58 <create_free_list+0x18>
	return 0;
   29a54:	2000      	movs	r0, #0
   29a56:	4770      	bx	lr
		*(char **)p = slab->free_list;
   29a58:	6941      	ldr	r1, [r0, #20]
   29a5a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   29a5c:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   29a5e:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   29a60:	3301      	adds	r3, #1
		p += slab->block_size;
   29a62:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   29a64:	e7f3      	b.n	29a4e <create_free_list+0xe>
		return -EINVAL;
   29a66:	f06f 0015 	mvn.w	r0, #21
}
   29a6a:	4770      	bx	lr

00029a6c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a6e:	4604      	mov	r4, r0
   29a70:	460d      	mov	r5, r1
	__asm__ volatile(
   29a72:	f04f 0340 	mov.w	r3, #64	; 0x40
   29a76:	f3ef 8611 	mrs	r6, BASEPRI
   29a7a:	f383 8812 	msr	BASEPRI_MAX, r3
   29a7e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   29a82:	6947      	ldr	r7, [r0, #20]
   29a84:	b977      	cbnz	r7, 29aa4 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   29a86:	f000 fa90 	bl	29faa <z_unpend_first_thread>

		if (pending_thread != NULL) {
   29a8a:	b158      	cbz	r0, 29aa4 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   29a8c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   29a8e:	6142      	str	r2, [r0, #20]
   29a90:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   29a92:	f000 fa2b 	bl	29eec <z_ready_thread>
			z_reschedule(&slab->lock, key);
   29a96:	4631      	mov	r1, r6
   29a98:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   29a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   29aa0:	f7fa ba96 	b.w	23fd0 <z_reschedule>
	**(char ***) mem = slab->free_list;
   29aa4:	682b      	ldr	r3, [r5, #0]
   29aa6:	6962      	ldr	r2, [r4, #20]
   29aa8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   29aaa:	682b      	ldr	r3, [r5, #0]
   29aac:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   29aae:	69a3      	ldr	r3, [r4, #24]
   29ab0:	3b01      	subs	r3, #1
   29ab2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   29ab4:	f386 8811 	msr	BASEPRI, r6
   29ab8:	f3bf 8f6f 	isb	sy
}
   29abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029abe <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   29abe:	f3ef 8005 	mrs	r0, IPSR
}
   29ac2:	3800      	subs	r0, #0
   29ac4:	bf18      	it	ne
   29ac6:	2001      	movne	r0, #1
   29ac8:	4770      	bx	lr

00029aca <z_impl_k_thread_name_set>:
}
   29aca:	f06f 0057 	mvn.w	r0, #87	; 0x57
   29ace:	4770      	bx	lr

00029ad0 <k_thread_name_get>:
}
   29ad0:	2000      	movs	r0, #0
   29ad2:	4770      	bx	lr

00029ad4 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29ad4:	f7fa ba8e 	b.w	23ff4 <z_sched_start>

00029ad8 <z_pm_save_idle_exit>:
{
   29ad8:	b508      	push	{r3, lr}
	pm_system_resume();
   29ada:	f7ea fac9 	bl	14070 <pm_system_resume>
}
   29ade:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   29ae2:	f7ff bdf8 	b.w	296d6 <sys_clock_idle_exit>

00029ae6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29ae6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   29aea:	428b      	cmp	r3, r1
   29aec:	d001      	beq.n	29af2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   29aee:	f7fa ba29 	b.w	23f44 <z_set_prio>
}
   29af2:	2000      	movs	r0, #0
   29af4:	4770      	bx	lr

00029af6 <z_impl_k_mutex_init>:
{
   29af6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   29af8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   29afa:	e9c3 0002 	strd	r0, r0, [r3, #8]
   29afe:	e9c3 3300 	strd	r3, r3, [r3]
}
   29b02:	4770      	bx	lr

00029b04 <queue_insert>:
{
   29b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29b08:	4699      	mov	r9, r3
   29b0a:	4604      	mov	r4, r0
   29b0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   29b10:	460d      	mov	r5, r1
   29b12:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   29b14:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   29b18:	f04f 0240 	mov.w	r2, #64	; 0x40
   29b1c:	f3ef 8711 	mrs	r7, BASEPRI
   29b20:	f382 8812 	msr	BASEPRI_MAX, r2
   29b24:	f3bf 8f6f 	isb	sy
	if (is_append) {
   29b28:	b103      	cbz	r3, 29b2c <queue_insert+0x28>
	return list->tail;
   29b2a:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   29b2c:	4630      	mov	r0, r6
   29b2e:	f000 fa3c 	bl	29faa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   29b32:	b158      	cbz	r0, 29b4c <queue_insert+0x48>
   29b34:	2300      	movs	r3, #0
   29b36:	67c3      	str	r3, [r0, #124]	; 0x7c
   29b38:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   29b3c:	f000 f9d6 	bl	29eec <z_ready_thread>
	z_reschedule(&queue->lock, key);
   29b40:	4630      	mov	r0, r6
   29b42:	4639      	mov	r1, r7
   29b44:	f7fa fa44 	bl	23fd0 <z_reschedule>
		return 0;
   29b48:	2000      	movs	r0, #0
   29b4a:	e00c      	b.n	29b66 <queue_insert+0x62>
	if (alloc) {
   29b4c:	f1b9 0f00 	cmp.w	r9, #0
   29b50:	d01b      	beq.n	29b8a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   29b52:	2108      	movs	r1, #8
   29b54:	f7fa fe6a 	bl	2482c <z_thread_aligned_alloc>
		if (anode == NULL) {
   29b58:	b938      	cbnz	r0, 29b6a <queue_insert+0x66>
	__asm__ volatile(
   29b5a:	f387 8811 	msr	BASEPRI, r7
   29b5e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   29b62:	f06f 000b 	mvn.w	r0, #11
}
   29b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   29b6a:	2201      	movs	r2, #1
		anode->data = data;
   29b6c:	f8c0 8004 	str.w	r8, [r0, #4]
   29b70:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29b72:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29b74:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   29b78:	b95d      	cbnz	r5, 29b92 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29b7a:	6822      	ldr	r2, [r4, #0]
   29b7c:	430a      	orrs	r2, r1
   29b7e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29b80:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   29b82:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   29b84:	b96a      	cbnz	r2, 29ba2 <queue_insert+0x9e>
	list->tail = node;
   29b86:	6060      	str	r0, [r4, #4]
}
   29b88:	e00b      	b.n	29ba2 <queue_insert+0x9e>
	node->next_and_flags = flags;
   29b8a:	f8c8 9000 	str.w	r9, [r8]
}
   29b8e:	4640      	mov	r0, r8
   29b90:	e7ef      	b.n	29b72 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29b92:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   29b94:	2a03      	cmp	r2, #3
   29b96:	d810      	bhi.n	29bba <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   29b98:	6001      	str	r1, [r0, #0]
	return list->tail;
   29b9a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   29b9c:	b939      	cbnz	r1, 29bae <queue_insert+0xaa>
	list->head = node;
   29b9e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   29ba2:	2104      	movs	r1, #4
   29ba4:	f104 0010 	add.w	r0, r4, #16
   29ba8:	f000 fc37 	bl	2a41a <z_handle_obj_poll_events>
   29bac:	e7c8      	b.n	29b40 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29bae:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29bb0:	f002 0203 	and.w	r2, r2, #3
   29bb4:	4302      	orrs	r2, r0
   29bb6:	600a      	str	r2, [r1, #0]
   29bb8:	e7e5      	b.n	29b86 <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   29bba:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   29bbe:	430a      	orrs	r2, r1
   29bc0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29bc2:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   29bc4:	f002 0203 	and.w	r2, r2, #3
   29bc8:	ea40 0302 	orr.w	r3, r0, r2
   29bcc:	602b      	str	r3, [r5, #0]
}
   29bce:	e7e8      	b.n	29ba2 <queue_insert+0x9e>

00029bd0 <z_queue_node_peek>:
{
   29bd0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   29bd2:	4604      	mov	r4, r0
   29bd4:	b130      	cbz	r0, 29be4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   29bd6:	6802      	ldr	r2, [r0, #0]
   29bd8:	0793      	lsls	r3, r2, #30
   29bda:	d003      	beq.n	29be4 <z_queue_node_peek+0x14>
		ret = anode->data;
   29bdc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29bde:	b109      	cbz	r1, 29be4 <z_queue_node_peek+0x14>
			k_free(anode);
   29be0:	f000 fc31 	bl	2a446 <k_free>
}
   29be4:	4620      	mov	r0, r4
   29be6:	bd10      	pop	{r4, pc}

00029be8 <z_impl_k_queue_init>:
	list->head = NULL;
   29be8:	2300      	movs	r3, #0
	list->tail = NULL;
   29bea:	e9c0 3300 	strd	r3, r3, [r0]
   29bee:	f100 0308 	add.w	r3, r0, #8
   29bf2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   29bf6:	f100 0310 	add.w	r3, r0, #16
   29bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   29bfe:	4770      	bx	lr

00029c00 <k_queue_append>:
{
   29c00:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   29c02:	2301      	movs	r3, #1
   29c04:	9300      	str	r3, [sp, #0]
   29c06:	2300      	movs	r3, #0
{
   29c08:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29c0a:	4619      	mov	r1, r3
   29c0c:	f7ff ff7a 	bl	29b04 <queue_insert>
}
   29c10:	b003      	add	sp, #12
   29c12:	f85d fb04 	ldr.w	pc, [sp], #4

00029c16 <k_queue_prepend>:
{
   29c16:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   29c18:	2300      	movs	r3, #0
{
   29c1a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29c1c:	9300      	str	r3, [sp, #0]
   29c1e:	4619      	mov	r1, r3
   29c20:	f7ff ff70 	bl	29b04 <queue_insert>
}
   29c24:	b003      	add	sp, #12
   29c26:	f85d fb04 	ldr.w	pc, [sp], #4

00029c2a <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   29c2a:	6800      	ldr	r0, [r0, #0]
   29c2c:	2100      	movs	r1, #0
   29c2e:	f7ff bfcf 	b.w	29bd0 <z_queue_node_peek>

00029c32 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   29c32:	b15a      	cbz	r2, 29c4c <z_impl_k_sem_init+0x1a>
   29c34:	428a      	cmp	r2, r1
   29c36:	d309      	bcc.n	29c4c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   29c38:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   29c3c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   29c40:	e9c0 0000 	strd	r0, r0, [r0]
   29c44:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   29c48:	2000      	movs	r0, #0
   29c4a:	4770      	bx	lr
		return -EINVAL;
   29c4c:	f06f 0015 	mvn.w	r0, #21
}
   29c50:	4770      	bx	lr

00029c52 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   29c52:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   29c54:	2301      	movs	r3, #1
   29c56:	408b      	lsls	r3, r1
   29c58:	ea22 0303 	bic.w	r3, r2, r3
   29c5c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   29c5e:	fa22 f001 	lsr.w	r0, r2, r1
}
   29c62:	f000 0001 	and.w	r0, r0, #1
   29c66:	4770      	bx	lr

00029c68 <unschedule_locked>:
{
   29c68:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29c6a:	2103      	movs	r1, #3
{
   29c6c:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   29c6e:	300c      	adds	r0, #12
   29c70:	f7ff ffef 	bl	29c52 <flag_test_and_clear>
   29c74:	b130      	cbz	r0, 29c84 <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   29c76:	f104 0010 	add.w	r0, r4, #16
   29c7a:	f000 fa13 	bl	2a0a4 <z_abort_timeout>
   29c7e:	fab0 f080 	clz	r0, r0
   29c82:	0940      	lsrs	r0, r0, #5
}
   29c84:	bd10      	pop	{r4, pc}

00029c86 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   29c86:	b120      	cbz	r0, 29c92 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   29c88:	2200      	movs	r2, #0
   29c8a:	4611      	mov	r1, r2
   29c8c:	3088      	adds	r0, #136	; 0x88
   29c8e:	f000 b9e6 	b.w	2a05e <z_sched_wake>
}
   29c92:	4770      	bx	lr

00029c94 <cancel_async_locked>:
{
   29c94:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   29c96:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29c98:	f3c3 0640 	ubfx	r6, r3, #1, #1
   29c9c:	079b      	lsls	r3, r3, #30
{
   29c9e:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29ca0:	d416      	bmi.n	29cd0 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   29ca2:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   29ca4:	2102      	movs	r1, #2
   29ca6:	300c      	adds	r0, #12
   29ca8:	f7ff ffd3 	bl	29c52 <flag_test_and_clear>
   29cac:	b180      	cbz	r0, 29cd0 <cancel_async_locked+0x3c>
	return list->head;
   29cae:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29cb2:	b16a      	cbz	r2, 29cd0 <cancel_async_locked+0x3c>
   29cb4:	4294      	cmp	r4, r2
   29cb6:	d11d      	bne.n	29cf4 <cancel_async_locked+0x60>
	return node->next;
   29cb8:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29cba:	b99e      	cbnz	r6, 29ce4 <cancel_async_locked+0x50>
   29cbc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   29cc0:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   29cc4:	429c      	cmp	r4, r3
   29cc6:	d101      	bne.n	29ccc <cancel_async_locked+0x38>
	list->tail = node;
   29cc8:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   29ccc:	2300      	movs	r3, #0
   29cce:	6023      	str	r3, [r4, #0]
	return *flagp;
   29cd0:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   29cd2:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   29cd6:	bf1e      	ittt	ne
   29cd8:	f043 0302 	orrne.w	r3, r3, #2
   29cdc:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29cde:	f040 0002 	orrne.w	r0, r0, #2
}
   29ce2:	bd70      	pop	{r4, r5, r6, pc}
   29ce4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   29ce6:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   29cea:	4294      	cmp	r4, r2
	list->tail = node;
   29cec:	bf08      	it	eq
   29cee:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   29cf2:	e7eb      	b.n	29ccc <cancel_async_locked+0x38>
	return node->next;
   29cf4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29cf6:	6812      	ldr	r2, [r2, #0]
   29cf8:	e7db      	b.n	29cb2 <cancel_async_locked+0x1e>

00029cfa <work_timeout>:
{
   29cfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29cfc:	4604      	mov	r4, r0
	__asm__ volatile(
   29cfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   29d02:	f3ef 8511 	mrs	r5, BASEPRI
   29d06:	f383 8812 	msr	BASEPRI_MAX, r3
   29d0a:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   29d0e:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29d10:	f1a0 0610 	sub.w	r6, r0, #16
   29d14:	2103      	movs	r1, #3
   29d16:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   29d18:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   29d1a:	f7ff ff9a 	bl	29c52 <flag_test_and_clear>
   29d1e:	b128      	cbz	r0, 29d2c <work_timeout+0x32>
		queue = dw->queue;
   29d20:	69a3      	ldr	r3, [r4, #24]
   29d22:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   29d24:	a901      	add	r1, sp, #4
   29d26:	4630      	mov	r0, r6
   29d28:	f7f9 feb0 	bl	23a8c <submit_to_queue_locked>
	__asm__ volatile(
   29d2c:	f385 8811 	msr	BASEPRI, r5
   29d30:	f3bf 8f6f 	isb	sy
}
   29d34:	b002      	add	sp, #8
   29d36:	bd70      	pop	{r4, r5, r6, pc}

00029d38 <k_work_init>:
{
   29d38:	b538      	push	{r3, r4, r5, lr}
   29d3a:	4604      	mov	r4, r0
   29d3c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   29d3e:	2210      	movs	r2, #16
   29d40:	2100      	movs	r1, #0
   29d42:	f7fc ff5e 	bl	26c02 <memset>
   29d46:	6065      	str	r5, [r4, #4]
}
   29d48:	bd38      	pop	{r3, r4, r5, pc}

00029d4a <k_work_busy_get>:
	__asm__ volatile(
   29d4a:	f04f 0240 	mov.w	r2, #64	; 0x40
   29d4e:	f3ef 8311 	mrs	r3, BASEPRI
   29d52:	f382 8812 	msr	BASEPRI_MAX, r2
   29d56:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   29d5a:	68c0      	ldr	r0, [r0, #12]
   29d5c:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   29d60:	f383 8811 	msr	BASEPRI, r3
   29d64:	f3bf 8f6f 	isb	sy
}
   29d68:	4770      	bx	lr

00029d6a <z_work_submit_to_queue>:
{
   29d6a:	b513      	push	{r0, r1, r4, lr}
   29d6c:	9001      	str	r0, [sp, #4]
   29d6e:	4608      	mov	r0, r1
	__asm__ volatile(
   29d70:	f04f 0340 	mov.w	r3, #64	; 0x40
   29d74:	f3ef 8411 	mrs	r4, BASEPRI
   29d78:	f383 8812 	msr	BASEPRI_MAX, r3
   29d7c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   29d80:	a901      	add	r1, sp, #4
   29d82:	f7f9 fe83 	bl	23a8c <submit_to_queue_locked>
	__asm__ volatile(
   29d86:	f384 8811 	msr	BASEPRI, r4
   29d8a:	f3bf 8f6f 	isb	sy
}
   29d8e:	b002      	add	sp, #8
   29d90:	bd10      	pop	{r4, pc}

00029d92 <k_work_submit_to_queue>:
{
   29d92:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   29d94:	f7ff ffe9 	bl	29d6a <z_work_submit_to_queue>
	if (ret > 0) {
   29d98:	1e04      	subs	r4, r0, #0
   29d9a:	dd09      	ble.n	29db0 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   29d9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29da0:	f3ef 8011 	mrs	r0, BASEPRI
   29da4:	f383 8812 	msr	BASEPRI_MAX, r3
   29da8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   29dac:	f000 f931 	bl	2a012 <z_reschedule_irqlock>
}
   29db0:	4620      	mov	r0, r4
   29db2:	bd10      	pop	{r4, pc}

00029db4 <k_work_queue_init>:
{
   29db4:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   29db6:	22a0      	movs	r2, #160	; 0xa0
   29db8:	2100      	movs	r1, #0
   29dba:	f7fc ff22 	bl	26c02 <memset>
}
   29dbe:	bd08      	pop	{r3, pc}

00029dc0 <k_work_init_delayable>:
{
   29dc0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   29dc2:	2230      	movs	r2, #48	; 0x30
{
   29dc4:	4604      	mov	r4, r0
   29dc6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   29dc8:	2100      	movs	r1, #0
   29dca:	f7fc ff1a 	bl	26c02 <memset>
   29dce:	f44f 7380 	mov.w	r3, #256	; 0x100
   29dd2:	6065      	str	r5, [r4, #4]
   29dd4:	60e3      	str	r3, [r4, #12]
}
   29dd6:	bd38      	pop	{r3, r4, r5, pc}

00029dd8 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   29dd8:	f7ff bfb7 	b.w	29d4a <k_work_busy_get>

00029ddc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   29ddc:	b538      	push	{r3, r4, r5, lr}
   29dde:	4604      	mov	r4, r0
   29de0:	f04f 0340 	mov.w	r3, #64	; 0x40
   29de4:	f3ef 8511 	mrs	r5, BASEPRI
   29de8:	f383 8812 	msr	BASEPRI_MAX, r3
   29dec:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   29df0:	f7ff ff3a 	bl	29c68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   29df4:	4620      	mov	r0, r4
   29df6:	f7ff ff4d 	bl	29c94 <cancel_async_locked>
	__asm__ volatile(
   29dfa:	f385 8811 	msr	BASEPRI, r5
   29dfe:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   29e02:	bd38      	pop	{r3, r4, r5, pc}

00029e04 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   29e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e06:	4604      	mov	r4, r0
   29e08:	460d      	mov	r5, r1
	__asm__ volatile(
   29e0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   29e0e:	f3ef 8611 	mrs	r6, BASEPRI
   29e12:	f383 8812 	msr	BASEPRI_MAX, r3
   29e16:	f3bf 8f6f 	isb	sy
	return *flagp;
   29e1a:	68c3      	ldr	r3, [r0, #12]
   29e1c:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   29e20:	2b00      	cmp	r3, #0
   29e22:	bf14      	ite	ne
   29e24:	2701      	movne	r7, #1
   29e26:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   29e28:	d105      	bne.n	29e36 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   29e2a:	f386 8811 	msr	BASEPRI, r6
   29e2e:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   29e32:	4638      	mov	r0, r7
   29e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   29e36:	f7ff ff17 	bl	29c68 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   29e3a:	4620      	mov	r0, r4
   29e3c:	f7ff ff2a 	bl	29c94 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   29e40:	4629      	mov	r1, r5
   29e42:	4620      	mov	r0, r4
   29e44:	f7f9 fe04 	bl	23a50 <cancel_sync_locked>
   29e48:	f386 8811 	msr	BASEPRI, r6
   29e4c:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   29e50:	2800      	cmp	r0, #0
   29e52:	d0ee      	beq.n	29e32 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   29e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29e5c:	f105 0008 	add.w	r0, r5, #8
   29e60:	f7f9 fcf6 	bl	23850 <z_impl_k_sem_take>
   29e64:	e7e5      	b.n	29e32 <k_work_cancel_delayable_sync+0x2e>

00029e66 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   29e66:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29e6a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29e6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29e6e:	2300      	movs	r3, #0
	node->prev = NULL;
   29e70:	e9c0 3300 	strd	r3, r3, [r0]
}
   29e74:	4770      	bx	lr

00029e76 <unpend_thread_no_timeout>:
{
   29e76:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   29e78:	f7ff fff5 	bl	29e66 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   29e7c:	7b43      	ldrb	r3, [r0, #13]
   29e7e:	f023 0302 	bic.w	r3, r3, #2
   29e82:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   29e84:	2300      	movs	r3, #0
   29e86:	6083      	str	r3, [r0, #8]
}
   29e88:	bd08      	pop	{r3, pc}

00029e8a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29e8a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   29e8e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   29e92:	4283      	cmp	r3, r0
		return b2 - b1;
   29e94:	bf14      	ite	ne
   29e96:	1ac0      	subne	r0, r0, r3
	return 0;
   29e98:	2000      	moveq	r0, #0
}
   29e9a:	4770      	bx	lr

00029e9c <add_to_waitq_locked>:
{
   29e9c:	b538      	push	{r3, r4, r5, lr}
   29e9e:	4604      	mov	r4, r0
   29ea0:	460d      	mov	r5, r1
	unready_thread(thread);
   29ea2:	f7f9 ffd1 	bl	23e48 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   29ea6:	7b63      	ldrb	r3, [r4, #13]
   29ea8:	f043 0302 	orr.w	r3, r3, #2
   29eac:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   29eae:	b1e5      	cbz	r5, 29eea <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   29eb0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   29eb2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29eb4:	429d      	cmp	r5, r3
   29eb6:	d109      	bne.n	29ecc <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   29eb8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   29eba:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   29ebe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29ec0:	606c      	str	r4, [r5, #4]
}
   29ec2:	e012      	b.n	29eea <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   29ec4:	686a      	ldr	r2, [r5, #4]
   29ec6:	4293      	cmp	r3, r2
   29ec8:	d0f6      	beq.n	29eb8 <add_to_waitq_locked+0x1c>
   29eca:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   29ecc:	2b00      	cmp	r3, #0
   29ece:	d0f3      	beq.n	29eb8 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   29ed0:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   29ed4:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   29ed8:	428a      	cmp	r2, r1
   29eda:	d0f3      	beq.n	29ec4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   29edc:	4291      	cmp	r1, r2
   29ede:	ddf1      	ble.n	29ec4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   29ee0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   29ee2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   29ee6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   29ee8:	605c      	str	r4, [r3, #4]
}
   29eea:	bd38      	pop	{r3, r4, r5, pc}

00029eec <z_ready_thread>:
{
   29eec:	b510      	push	{r4, lr}
	__asm__ volatile(
   29eee:	f04f 0340 	mov.w	r3, #64	; 0x40
   29ef2:	f3ef 8411 	mrs	r4, BASEPRI
   29ef6:	f383 8812 	msr	BASEPRI_MAX, r3
   29efa:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   29efe:	f7f9 ff6f 	bl	23de0 <ready_thread>
	__asm__ volatile(
   29f02:	f384 8811 	msr	BASEPRI, r4
   29f06:	f3bf 8f6f 	isb	sy
}
   29f0a:	bd10      	pop	{r4, pc}

00029f0c <z_unpend_thread_no_timeout>:
{
   29f0c:	b508      	push	{r3, lr}
	__asm__ volatile(
   29f0e:	f04f 0240 	mov.w	r2, #64	; 0x40
   29f12:	f3ef 8111 	mrs	r1, BASEPRI
   29f16:	f382 8812 	msr	BASEPRI_MAX, r2
   29f1a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   29f1e:	6883      	ldr	r3, [r0, #8]
   29f20:	b10b      	cbz	r3, 29f26 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
   29f22:	f7ff ffa8 	bl	29e76 <unpend_thread_no_timeout>
	__asm__ volatile(
   29f26:	f381 8811 	msr	BASEPRI, r1
   29f2a:	f3bf 8f6f 	isb	sy
}
   29f2e:	bd08      	pop	{r3, pc}

00029f30 <z_sched_wake_thread>:
{
   29f30:	b538      	push	{r3, r4, r5, lr}
   29f32:	4604      	mov	r4, r0
	__asm__ volatile(
   29f34:	f04f 0340 	mov.w	r3, #64	; 0x40
   29f38:	f3ef 8511 	mrs	r5, BASEPRI
   29f3c:	f383 8812 	msr	BASEPRI_MAX, r3
   29f40:	f3bf 8f6f 	isb	sy
		if (!killed) {
   29f44:	7b43      	ldrb	r3, [r0, #13]
   29f46:	f013 0f28 	tst.w	r3, #40	; 0x28
   29f4a:	d10b      	bne.n	29f64 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
   29f4c:	6883      	ldr	r3, [r0, #8]
   29f4e:	b10b      	cbz	r3, 29f54 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
   29f50:	f7ff ff91 	bl	29e76 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29f54:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   29f56:	b951      	cbnz	r1, 29f6e <z_sched_wake_thread+0x3e>
   29f58:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29f5c:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   29f5e:	4620      	mov	r0, r4
   29f60:	f7f9 ff3e 	bl	23de0 <ready_thread>
	__asm__ volatile(
   29f64:	f385 8811 	msr	BASEPRI, r5
   29f68:	f3bf 8f6f 	isb	sy
}
   29f6c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   29f6e:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   29f72:	e7f3      	b.n	29f5c <z_sched_wake_thread+0x2c>

00029f74 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   29f74:	2101      	movs	r1, #1
   29f76:	3818      	subs	r0, #24
   29f78:	f7ff bfda 	b.w	29f30 <z_sched_wake_thread>

00029f7c <z_unpend1_no_timeout>:
{
   29f7c:	b508      	push	{r3, lr}
   29f7e:	4603      	mov	r3, r0
	__asm__ volatile(
   29f80:	f04f 0240 	mov.w	r2, #64	; 0x40
   29f84:	f3ef 8111 	mrs	r1, BASEPRI
   29f88:	f382 8812 	msr	BASEPRI_MAX, r2
   29f8c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   29f90:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29f92:	4283      	cmp	r3, r0
   29f94:	d007      	beq.n	29fa6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   29f96:	b108      	cbz	r0, 29f9c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   29f98:	f7ff ff6d 	bl	29e76 <unpend_thread_no_timeout>
	__asm__ volatile(
   29f9c:	f381 8811 	msr	BASEPRI, r1
   29fa0:	f3bf 8f6f 	isb	sy
}
   29fa4:	bd08      	pop	{r3, pc}
   29fa6:	2000      	movs	r0, #0
   29fa8:	e7f8      	b.n	29f9c <z_unpend1_no_timeout+0x20>

00029faa <z_unpend_first_thread>:
{
   29faa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29fac:	f04f 0340 	mov.w	r3, #64	; 0x40
   29fb0:	f3ef 8511 	mrs	r5, BASEPRI
   29fb4:	f383 8812 	msr	BASEPRI_MAX, r3
   29fb8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   29fbc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29fbe:	42a0      	cmp	r0, r4
   29fc0:	d00d      	beq.n	29fde <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   29fc2:	b134      	cbz	r4, 29fd2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   29fc4:	4620      	mov	r0, r4
   29fc6:	f7ff ff56 	bl	29e76 <unpend_thread_no_timeout>
   29fca:	f104 0018 	add.w	r0, r4, #24
   29fce:	f000 f869 	bl	2a0a4 <z_abort_timeout>
	__asm__ volatile(
   29fd2:	f385 8811 	msr	BASEPRI, r5
   29fd6:	f3bf 8f6f 	isb	sy
}
   29fda:	4620      	mov	r0, r4
   29fdc:	bd38      	pop	{r3, r4, r5, pc}
   29fde:	2400      	movs	r4, #0
   29fe0:	e7f7      	b.n	29fd2 <z_unpend_first_thread+0x28>

00029fe2 <z_unpend_thread>:
{
   29fe2:	b510      	push	{r4, lr}
   29fe4:	4601      	mov	r1, r0
	__asm__ volatile(
   29fe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   29fea:	f3ef 8411 	mrs	r4, BASEPRI
   29fee:	f383 8812 	msr	BASEPRI_MAX, r3
   29ff2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   29ff6:	6883      	ldr	r3, [r0, #8]
   29ff8:	b10b      	cbz	r3, 29ffe <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
   29ffa:	f7ff ff3c 	bl	29e76 <unpend_thread_no_timeout>
	__asm__ volatile(
   29ffe:	f384 8811 	msr	BASEPRI, r4
   2a002:	f3bf 8f6f 	isb	sy
}
   2a006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a00a:	f101 0018 	add.w	r0, r1, #24
   2a00e:	f000 b849 	b.w	2a0a4 <z_abort_timeout>

0002a012 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a012:	4603      	mov	r3, r0
   2a014:	b920      	cbnz	r0, 2a020 <z_reschedule_irqlock+0xe>
   2a016:	f3ef 8205 	mrs	r2, IPSR
   2a01a:	b90a      	cbnz	r2, 2a020 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2a01c:	f7ea be00 	b.w	14c20 <arch_swap>
   2a020:	f383 8811 	msr	BASEPRI, r3
   2a024:	f3bf 8f6f 	isb	sy
}
   2a028:	4770      	bx	lr

0002a02a <z_reschedule_unlocked>:
	__asm__ volatile(
   2a02a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a02e:	f3ef 8011 	mrs	r0, BASEPRI
   2a032:	f383 8812 	msr	BASEPRI_MAX, r3
   2a036:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a03a:	f7ff bfea 	b.w	2a012 <z_reschedule_irqlock>

0002a03e <z_unpend_all>:
{
   2a03e:	b538      	push	{r3, r4, r5, lr}
   2a040:	4605      	mov	r5, r0
	int need_sched = 0;
   2a042:	2000      	movs	r0, #0
	return list->head == list;
   2a044:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a046:	42a5      	cmp	r5, r4
   2a048:	d000      	beq.n	2a04c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a04a:	b904      	cbnz	r4, 2a04e <z_unpend_all+0x10>
}
   2a04c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2a04e:	4620      	mov	r0, r4
   2a050:	f7ff ffc7 	bl	29fe2 <z_unpend_thread>
		z_ready_thread(thread);
   2a054:	4620      	mov	r0, r4
   2a056:	f7ff ff49 	bl	29eec <z_ready_thread>
		need_sched = 1;
   2a05a:	2001      	movs	r0, #1
   2a05c:	e7f2      	b.n	2a044 <z_unpend_all+0x6>

0002a05e <z_sched_wake>:
{
   2a05e:	b538      	push	{r3, r4, r5, lr}
   2a060:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a064:	f3ef 8511 	mrs	r5, BASEPRI
   2a068:	f383 8812 	msr	BASEPRI_MAX, r3
   2a06c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2a070:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a072:	42a0      	cmp	r0, r4
   2a074:	d012      	beq.n	2a09c <z_sched_wake+0x3e>
		if (thread != NULL) {
   2a076:	b19c      	cbz	r4, 2a0a0 <z_sched_wake+0x42>
   2a078:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   2a07a:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   2a07c:	4620      	mov	r0, r4
   2a07e:	f7ff fefa 	bl	29e76 <unpend_thread_no_timeout>
   2a082:	f104 0018 	add.w	r0, r4, #24
   2a086:	f000 f80d 	bl	2a0a4 <z_abort_timeout>
			ready_thread(thread);
   2a08a:	4620      	mov	r0, r4
   2a08c:	f7f9 fea8 	bl	23de0 <ready_thread>
			ret = true;
   2a090:	2001      	movs	r0, #1
	__asm__ volatile(
   2a092:	f385 8811 	msr	BASEPRI, r5
   2a096:	f3bf 8f6f 	isb	sy
}
   2a09a:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   2a09c:	2000      	movs	r0, #0
   2a09e:	e7f8      	b.n	2a092 <z_sched_wake+0x34>
   2a0a0:	4620      	mov	r0, r4
   2a0a2:	e7f6      	b.n	2a092 <z_sched_wake+0x34>

0002a0a4 <z_abort_timeout>:
{
   2a0a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a0a6:	f04f 0240 	mov.w	r2, #64	; 0x40
   2a0aa:	f3ef 8411 	mrs	r4, BASEPRI
   2a0ae:	f382 8812 	msr	BASEPRI_MAX, r2
   2a0b2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2a0b6:	6803      	ldr	r3, [r0, #0]
   2a0b8:	b13b      	cbz	r3, 2a0ca <z_abort_timeout+0x26>
			remove_timeout(to);
   2a0ba:	f7fa f97b 	bl	243b4 <remove_timeout>
			ret = 0;
   2a0be:	2000      	movs	r0, #0
	__asm__ volatile(
   2a0c0:	f384 8811 	msr	BASEPRI, r4
   2a0c4:	f3bf 8f6f 	isb	sy
}
   2a0c8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2a0ca:	f06f 0015 	mvn.w	r0, #21
   2a0ce:	e7f7      	b.n	2a0c0 <z_abort_timeout+0x1c>

0002a0d0 <z_get_next_timeout_expiry>:
{
   2a0d0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a0d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a0d6:	f3ef 8411 	mrs	r4, BASEPRI
   2a0da:	f383 8812 	msr	BASEPRI_MAX, r3
   2a0de:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2a0e2:	f7fa f947 	bl	24374 <next_timeout>
	__asm__ volatile(
   2a0e6:	f384 8811 	msr	BASEPRI, r4
   2a0ea:	f3bf 8f6f 	isb	sy
}
   2a0ee:	bd10      	pop	{r4, pc}

0002a0f0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2a0f0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2a0f2:	f7fa fa5b 	bl	245ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2a0f6:	bd08      	pop	{r3, pc}

0002a0f8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2a0f8:	f7fa ba58 	b.w	245ac <sys_clock_tick_get>

0002a0fc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2a0fc:	b108      	cbz	r0, 2a102 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2a0fe:	f7eb bbb5 	b.w	1586c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2a102:	4770      	bx	lr

0002a104 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a104:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a108:	bf08      	it	eq
   2a10a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2a10e:	b538      	push	{r3, r4, r5, lr}
   2a110:	460c      	mov	r4, r1
   2a112:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a114:	d014      	beq.n	2a140 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a116:	4308      	orrs	r0, r1
   2a118:	d103      	bne.n	2a122 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2a11a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2a11e:	f7fa ba45 	b.w	245ac <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2a122:	f06f 0001 	mvn.w	r0, #1
   2a126:	1b40      	subs	r0, r0, r5
   2a128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a12c:	eb63 0101 	sbc.w	r1, r3, r1
   2a130:	2900      	cmp	r1, #0
   2a132:	da04      	bge.n	2a13e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2a134:	f7fa fa3a 	bl	245ac <sys_clock_tick_get>
   2a138:	1940      	adds	r0, r0, r5
   2a13a:	eb41 0104 	adc.w	r1, r1, r4
}
   2a13e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2a140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a144:	4601      	mov	r1, r0
   2a146:	e7fa      	b.n	2a13e <sys_clock_timeout_end_calc+0x3a>

0002a148 <k_timer_init>:
	timer->status = 0U;
   2a148:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2a14a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2a14e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2a152:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2a156:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2a15a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2a15c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2a15e:	4770      	bx	lr

0002a160 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2a160:	b510      	push	{r4, lr}
   2a162:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   2a164:	f7ff ff9e 	bl	2a0a4 <z_abort_timeout>

	if (inactive) {
   2a168:	b9b0      	cbnz	r0, 2a198 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2a16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a16c:	b10b      	cbz	r3, 2a172 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2a16e:	4620      	mov	r0, r4
   2a170:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2a172:	f104 0018 	add.w	r0, r4, #24
   2a176:	f7ff ff01 	bl	29f7c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2a17a:	b168      	cbz	r0, 2a198 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2a17c:	f7ff feb6 	bl	29eec <z_ready_thread>
	__asm__ volatile(
   2a180:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a184:	f3ef 8011 	mrs	r0, BASEPRI
   2a188:	f383 8812 	msr	BASEPRI_MAX, r3
   2a18c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a194:	f7ff bf3d 	b.w	2a012 <z_reschedule_irqlock>
   2a198:	bd10      	pop	{r4, pc}

0002a19a <add_event>:
{
   2a19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a19c:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a19e:	e9d0 1300 	ldrd	r1, r3, [r0]
   2a1a2:	4288      	cmp	r0, r1
   2a1a4:	4604      	mov	r4, r0
   2a1a6:	d105      	bne.n	2a1b4 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2a1a8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2a1aa:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2a1ae:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a1b0:	6065      	str	r5, [r4, #4]
   2a1b2:	e01d      	b.n	2a1f0 <add_event+0x56>
	if ((pending == NULL) ||
   2a1b4:	2b00      	cmp	r3, #0
   2a1b6:	d0f7      	beq.n	2a1a8 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a1b8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a1ba:	b100      	cbz	r0, 2a1be <add_event+0x24>
   2a1bc:	3860      	subs	r0, #96	; 0x60
   2a1be:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a1c2:	4639      	mov	r1, r7
   2a1c4:	f7ff fe61 	bl	29e8a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2a1c8:	2800      	cmp	r0, #0
   2a1ca:	dced      	bgt.n	2a1a8 <add_event+0xe>
	return list->head == list;
   2a1cc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a1ce:	42b4      	cmp	r4, r6
   2a1d0:	d0ea      	beq.n	2a1a8 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a1d2:	2e00      	cmp	r6, #0
   2a1d4:	d0e8      	beq.n	2a1a8 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2a1d6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a1d8:	b101      	cbz	r1, 2a1dc <add_event+0x42>
   2a1da:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2a1dc:	4638      	mov	r0, r7
   2a1de:	f7ff fe54 	bl	29e8a <z_sched_prio_cmp>
   2a1e2:	2800      	cmp	r0, #0
   2a1e4:	dd05      	ble.n	2a1f2 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2a1e6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2a1e8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2a1ec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2a1ee:	6075      	str	r5, [r6, #4]
}
   2a1f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2a1f2:	6863      	ldr	r3, [r4, #4]
   2a1f4:	429e      	cmp	r6, r3
   2a1f6:	d0d7      	beq.n	2a1a8 <add_event+0xe>
   2a1f8:	6836      	ldr	r6, [r6, #0]
   2a1fa:	e7ea      	b.n	2a1d2 <add_event+0x38>

0002a1fc <register_events>:
{
   2a1fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2a200:	2500      	movs	r5, #0
{
   2a202:	468b      	mov	fp, r1
   2a204:	4614      	mov	r4, r2
   2a206:	461f      	mov	r7, r3
   2a208:	4682      	mov	sl, r0
	int events_registered = 0;
   2a20a:	462e      	mov	r6, r5
	event->poller = NULL;
   2a20c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2a20e:	455d      	cmp	r5, fp
   2a210:	db02      	blt.n	2a218 <register_events+0x1c>
}
   2a212:	4630      	mov	r0, r6
   2a214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a218:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a21c:	f3ef 8911 	mrs	r9, BASEPRI
   2a220:	f383 8812 	msr	BASEPRI_MAX, r3
   2a224:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2a228:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a22c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a230:	3b01      	subs	r3, #1
   2a232:	2b07      	cmp	r3, #7
   2a234:	d80f      	bhi.n	2a256 <register_events+0x5a>
   2a236:	e8df f003 	tbb	[pc, r3]
   2a23a:	041e      	.short	0x041e
   2a23c:	0e0e0a0e 	.word	0x0e0e0a0e
   2a240:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   2a242:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a246:	689b      	ldr	r3, [r3, #8]
   2a248:	b12b      	cbz	r3, 2a256 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2a24a:	2302      	movs	r3, #2
   2a24c:	e020      	b.n	2a290 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2a24e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a252:	681b      	ldr	r3, [r3, #0]
   2a254:	bb8b      	cbnz	r3, 2a2ba <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2a256:	bb47      	cbnz	r7, 2a2aa <register_events+0xae>
   2a258:	7823      	ldrb	r3, [r4, #0]
   2a25a:	b333      	cbz	r3, 2a2aa <register_events+0xae>
	switch (event->type) {
   2a25c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a264:	3b01      	subs	r3, #1
   2a266:	2b07      	cmp	r3, #7
   2a268:	d830      	bhi.n	2a2cc <register_events+0xd0>
   2a26a:	e8df f003 	tbb	[pc, r3]
   2a26e:	2833      	.short	0x2833
   2a270:	2f2f282f 	.word	0x2f2f282f
   2a274:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   2a276:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a27a:	689b      	ldr	r3, [r3, #8]
   2a27c:	2b00      	cmp	r3, #0
   2a27e:	d0ea      	beq.n	2a256 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2a280:	2301      	movs	r3, #1
   2a282:	e005      	b.n	2a290 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2a284:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a288:	6a1b      	ldr	r3, [r3, #32]
   2a28a:	2b00      	cmp	r3, #0
   2a28c:	d0e3      	beq.n	2a256 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2a28e:	2310      	movs	r3, #16
	event->state |= state;
   2a290:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2a294:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2a298:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2a29c:	430b      	orrs	r3, r1
   2a29e:	f363 3294 	bfi	r2, r3, #14, #7
   2a2a2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2a2a6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2a2aa:	f389 8811 	msr	BASEPRI, r9
   2a2ae:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2a2b2:	3501      	adds	r5, #1
   2a2b4:	f10a 0a14 	add.w	sl, sl, #20
   2a2b8:	e7a9      	b.n	2a20e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2a2ba:	2304      	movs	r3, #4
   2a2bc:	e7e8      	b.n	2a290 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2a2be:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a2c2:	4622      	mov	r2, r4
   2a2c4:	4651      	mov	r1, sl
   2a2c6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2a2c8:	f7ff ff67 	bl	2a19a <add_event>
	event->poller = poller;
   2a2cc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2a2d0:	3601      	adds	r6, #1
   2a2d2:	e7ea      	b.n	2a2aa <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2a2d4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a2d8:	4622      	mov	r2, r4
   2a2da:	4651      	mov	r1, sl
   2a2dc:	e7f4      	b.n	2a2c8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2a2de:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a2e2:	4622      	mov	r2, r4
   2a2e4:	4651      	mov	r1, sl
   2a2e6:	3024      	adds	r0, #36	; 0x24
   2a2e8:	e7ee      	b.n	2a2c8 <register_events+0xcc>

0002a2ea <signal_poll_event>:
{
   2a2ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2a2ee:	6884      	ldr	r4, [r0, #8]
{
   2a2f0:	4605      	mov	r5, r0
   2a2f2:	460e      	mov	r6, r1
	if (poller != NULL) {
   2a2f4:	b144      	cbz	r4, 2a308 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2a2f6:	7863      	ldrb	r3, [r4, #1]
   2a2f8:	2b01      	cmp	r3, #1
   2a2fa:	d12e      	bne.n	2a35a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2a2fc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a300:	f013 0302 	ands.w	r3, r3, #2
   2a304:	d10a      	bne.n	2a31c <signal_poll_event+0x32>
		poller->is_polling = false;
   2a306:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2a308:	68eb      	ldr	r3, [r5, #12]
   2a30a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2a30e:	4316      	orrs	r6, r2
	event->poller = NULL;
   2a310:	2000      	movs	r0, #0
	event->state |= state;
   2a312:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2a316:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2a318:	60eb      	str	r3, [r5, #12]
	return retcode;
   2a31a:	e03e      	b.n	2a39a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2a31c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2a320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a324:	bf08      	it	eq
   2a326:	f112 0f02 	cmneq.w	r2, #2
   2a32a:	d032      	beq.n	2a392 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a32c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2a330:	4640      	mov	r0, r8
   2a332:	f7ff fe56 	bl	29fe2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2a336:	2e08      	cmp	r6, #8
   2a338:	bf0c      	ite	eq
   2a33a:	f06f 0303 	mvneq.w	r3, #3
   2a33e:	2300      	movne	r3, #0
   2a340:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a342:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a346:	06db      	lsls	r3, r3, #27
   2a348:	d109      	bne.n	2a35e <signal_poll_event+0x74>
   2a34a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2a34e:	b937      	cbnz	r7, 2a35e <signal_poll_event+0x74>
	z_ready_thread(thread);
   2a350:	4640      	mov	r0, r8
   2a352:	f7ff fdcb 	bl	29eec <z_ready_thread>
		poller->is_polling = false;
   2a356:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2a358:	e7d6      	b.n	2a308 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2a35a:	2b02      	cmp	r3, #2
   2a35c:	d001      	beq.n	2a362 <signal_poll_event+0x78>
		poller->is_polling = false;
   2a35e:	2300      	movs	r3, #0
   2a360:	e7d1      	b.n	2a306 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2a362:	7823      	ldrb	r3, [r4, #0]
   2a364:	2b00      	cmp	r3, #0
   2a366:	d0cf      	beq.n	2a308 <signal_poll_event+0x1e>
   2a368:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2a36c:	2f00      	cmp	r7, #0
   2a36e:	d0f2      	beq.n	2a356 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2a370:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2a374:	f1a4 0914 	sub.w	r9, r4, #20
   2a378:	f104 0014 	add.w	r0, r4, #20
   2a37c:	f7ff fe92 	bl	2a0a4 <z_abort_timeout>
		twork->poll_result = 0;
   2a380:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2a384:	4649      	mov	r1, r9
   2a386:	4638      	mov	r0, r7
   2a388:	f7ff fcef 	bl	29d6a <z_work_submit_to_queue>
		poller->is_polling = false;
   2a38c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2a390:	e7ba      	b.n	2a308 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2a392:	2300      	movs	r3, #0
   2a394:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2a396:	f06f 000a 	mvn.w	r0, #10
}
   2a39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a39e <clear_event_registrations>:
	while (num_events--) {
   2a39e:	2314      	movs	r3, #20
{
   2a3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a3a2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2a3a6:	2400      	movs	r4, #0
	switch (event->type) {
   2a3a8:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2a3ac:	b901      	cbnz	r1, 2a3b0 <clear_event_registrations+0x12>
}
   2a3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2a3b0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2a3b4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2a3b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a3bc:	2b08      	cmp	r3, #8
   2a3be:	f1a0 0714 	sub.w	r7, r0, #20
   2a3c2:	d80c      	bhi.n	2a3de <clear_event_registrations+0x40>
   2a3c4:	fa26 f303 	lsr.w	r3, r6, r3
   2a3c8:	07db      	lsls	r3, r3, #31
   2a3ca:	d508      	bpl.n	2a3de <clear_event_registrations+0x40>
	return node->next != NULL;
   2a3cc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2a3d0:	b12b      	cbz	r3, 2a3de <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2a3d2:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2a3d6:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2a3d8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2a3da:	e940 4405 	strd	r4, r4, [r0, #-20]
   2a3de:	f382 8811 	msr	BASEPRI, r2
   2a3e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2a3e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a3ea:	f3ef 8211 	mrs	r2, BASEPRI
   2a3ee:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3f2:	f3bf 8f6f 	isb	sy
   2a3f6:	3901      	subs	r1, #1
   2a3f8:	4638      	mov	r0, r7
   2a3fa:	e7d7      	b.n	2a3ac <clear_event_registrations+0xe>

0002a3fc <k_poll_event_init>:
{
   2a3fc:	b510      	push	{r4, lr}
	event->type = type;
   2a3fe:	0552      	lsls	r2, r2, #21
   2a400:	0209      	lsls	r1, r1, #8
   2a402:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2a406:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2a40a:	430a      	orrs	r2, r1
   2a40c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2a40e:	2400      	movs	r4, #0
	event->type = type;
   2a410:	430a      	orrs	r2, r1
	event->obj = obj;
   2a412:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2a416:	6084      	str	r4, [r0, #8]
}
   2a418:	bd10      	pop	{r4, pc}

0002a41a <z_handle_obj_poll_events>:
{
   2a41a:	4603      	mov	r3, r0
	return list->head == list;
   2a41c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2a41e:	4283      	cmp	r3, r0
   2a420:	d008      	beq.n	2a434 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2a422:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a426:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a428:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a42a:	2300      	movs	r3, #0
	node->prev = NULL;
   2a42c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2a430:	f7ff bf5b 	b.w	2a2ea <signal_poll_event>
}
   2a434:	4770      	bx	lr

0002a436 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2a436:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2a438:	e9c0 0000 	strd	r0, r0, [r0]
   2a43c:	6083      	str	r3, [r0, #8]
}
   2a43e:	4770      	bx	lr

0002a440 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2a440:	2300      	movs	r3, #0
   2a442:	6083      	str	r3, [r0, #8]
}
   2a444:	4770      	bx	lr

0002a446 <k_free>:
	if (ptr != NULL) {
   2a446:	b120      	cbz	r0, 2a452 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2a448:	1f01      	subs	r1, r0, #4
   2a44a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2a44e:	f7ff bada 	b.w	29a06 <k_heap_free>
}
   2a452:	4770      	bx	lr

0002a454 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2a454:	4770      	bx	lr
	...
